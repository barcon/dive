/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (https://www.swig.org).
 * Version 4.2.0
 *
 * Do not make changes to this file unless you know what you are doing - modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


#define SWIG_VERSION 0x040200
#define SWIGPYTHON
#define SWIG_PYTHON_DIRECTOR_NO_VTABLE

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if defined(__GNUC__)
#  if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#    ifndef GCC_HASCLASSVISIBILITY
#      define GCC_HASCLASSVISIBILITY
#    endif
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif

/* Deal with Apple's deprecated 'AssertMacros.h' from Carbon-framework */
#if defined(__APPLE__) && !defined(__ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES)
# define __ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES 0
#endif

/* Intel's compiler complains if a variable which was never initialised is
 * cast to void, which is a common idiom which we use to indicate that we
 * are aware a variable isn't used.  So we just silence that warning.
 * See: https://github.com/swig/swig/issues/192 for more discussion.
 */
#ifdef __INTEL_COMPILER
# pragma warning disable 592
#endif

#if __cplusplus >=201103L
# define SWIG_NULLPTR nullptr
#else
# define SWIG_NULLPTR NULL
#endif 


/* C99 and C++11 should provide snprintf, but define SWIG_NO_SNPRINTF
 * if you're missing it.
 */
#if ((defined __STDC_VERSION__ && __STDC_VERSION__ >= 199901L) || \
     (defined __cplusplus && __cplusplus >= 201103L) || \
     defined SWIG_HAVE_SNPRINTF) && \
    !defined SWIG_NO_SNPRINTF
# define SWIG_snprintf(O,S,F,A) snprintf(O,S,F,A)
# define SWIG_snprintf2(O,S,F,A,B) snprintf(O,S,F,A,B)
#else
/* Fallback versions ignore the buffer size, but most of our uses either have a
 * fixed maximum possible size or dynamically allocate a buffer that's large
 * enough.
 */
# define SWIG_snprintf(O,S,F,A) sprintf(O,F,A)
# define SWIG_snprintf2(O,S,F,A,B) sprintf(O,F,A,B)
#endif



#if defined(__GNUC__) && defined(_WIN32) && !defined(SWIG_PYTHON_NO_HYPOT_WORKAROUND)
/* Workaround for '::hypot' has not been declared', see https://bugs.python.org/issue11566 */
# include <math.h>
#endif

#if !defined(PY_SSIZE_T_CLEAN) && !defined(SWIG_NO_PY_SSIZE_T_CLEAN)
#define PY_SSIZE_T_CLEAN
#endif

#if __GNUC__ >= 7
#pragma GCC diagnostic push
#if defined(__cplusplus) && __cplusplus >=201703L
#pragma GCC diagnostic ignored "-Wregister" /* For python-2.7 headers that use register */
#endif
#endif

#if defined(_DEBUG) && defined(SWIG_PYTHON_INTERPRETER_NO_DEBUG)
/* Use debug wrappers with the Python release dll */

#if defined(_MSC_VER) && _MSC_VER >= 1929
/* Workaround compilation errors when redefining _DEBUG in MSVC 2019 version 16.10 and later
 * See https://github.com/swig/swig/issues/2090 */
# include <corecrt.h>
#endif

# undef _DEBUG
# include <Python.h>
# define _DEBUG 1
#else
# include <Python.h>
#endif

#if __GNUC__ >= 7
#pragma GCC diagnostic pop
#endif

#include <stdio.h>

/* -----------------------------------------------------------------------------
 * swigrun.swg
 *
 * This file contains generic C API SWIG runtime support for pointer
 * type checking.
 * ----------------------------------------------------------------------------- */

/* This should only be incremented when either the layout of swig_type_info changes,
   or for whatever reason, the runtime changes incompatibly */
#define SWIG_RUNTIME_VERSION "4"

/* define SWIG_TYPE_TABLE_NAME as "SWIG_TYPE_TABLE" */
#ifdef SWIG_TYPE_TABLE
# define SWIG_QUOTE_STRING(x) #x
# define SWIG_EXPAND_AND_QUOTE_STRING(x) SWIG_QUOTE_STRING(x)
# define SWIG_TYPE_TABLE_NAME SWIG_EXPAND_AND_QUOTE_STRING(SWIG_TYPE_TABLE)
#else
# define SWIG_TYPE_TABLE_NAME
#endif

/*
  You can use the SWIGRUNTIME and SWIGRUNTIMEINLINE macros for
  creating a static or dynamic library from the SWIG runtime code.
  In 99.9% of the cases, SWIG just needs to declare them as 'static'.

  But only do this if strictly necessary, ie, if you have problems
  with your compiler or suchlike.
*/

#ifndef SWIGRUNTIME
# define SWIGRUNTIME SWIGINTERN
#endif

#ifndef SWIGRUNTIMEINLINE
# define SWIGRUNTIMEINLINE SWIGRUNTIME SWIGINLINE
#endif

/*  Generic buffer size */
#ifndef SWIG_BUFFER_SIZE
# define SWIG_BUFFER_SIZE 1024
#endif

/* Flags for pointer conversions */
#define SWIG_POINTER_DISOWN        0x1
#define SWIG_CAST_NEW_MEMORY       0x2
#define SWIG_POINTER_NO_NULL       0x4
#define SWIG_POINTER_CLEAR         0x8
#define SWIG_POINTER_RELEASE       (SWIG_POINTER_CLEAR | SWIG_POINTER_DISOWN)

/* Flags for new pointer objects */
#define SWIG_POINTER_OWN           0x1


/*
   Flags/methods for returning states.

   The SWIG conversion methods, as ConvertPtr, return an integer
   that tells if the conversion was successful or not. And if not,
   an error code can be returned (see swigerrors.swg for the codes).

   Use the following macros/flags to set or process the returning
   states.

   In old versions of SWIG, code such as the following was usually written:

     if (SWIG_ConvertPtr(obj,vptr,ty.flags) != -1) {
       // success code
     } else {
       //fail code
     }

   Now you can be more explicit:

    int res = SWIG_ConvertPtr(obj,vptr,ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
    } else {
      // fail code
    }

   which is the same really, but now you can also do

    Type *ptr;
    int res = SWIG_ConvertPtr(obj,(void **)(&ptr),ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
      if (SWIG_IsNewObj(res) {
        ...
	delete *ptr;
      } else {
        ...
      }
    } else {
      // fail code
    }

   I.e., now SWIG_ConvertPtr can return new objects and you can
   identify the case and take care of the deallocation. Of course that
   also requires SWIG_ConvertPtr to return new result values, such as

      int SWIG_ConvertPtr(obj, ptr,...) {
        if (<obj is ok>) {
          if (<need new object>) {
            *ptr = <ptr to new allocated object>;
            return SWIG_NEWOBJ;
          } else {
            *ptr = <ptr to old object>;
            return SWIG_OLDOBJ;
          }
        } else {
          return SWIG_BADOBJ;
        }
      }

   Of course, returning the plain '0(success)/-1(fail)' still works, but you can be
   more explicit by returning SWIG_BADOBJ, SWIG_ERROR or any of the
   SWIG errors code.

   Finally, if the SWIG_CASTRANK_MODE is enabled, the result code
   allows returning the 'cast rank', for example, if you have this

       int food(double)
       int fooi(int);

   and you call

      food(1)   // cast rank '1'  (1 -> 1.0)
      fooi(1)   // cast rank '0'

   just use the SWIG_AddCast()/SWIG_CheckState()
*/

#define SWIG_OK                    (0)
/* Runtime errors are < 0 */
#define SWIG_ERROR                 (-1)
/* Errors in range -1 to -99 are in swigerrors.swg (errors for all languages including those not using the runtime) */
/* Errors in range -100 to -199 are language specific errors defined in *errors.swg */
/* Errors < -200 are generic runtime specific errors */
#define SWIG_ERROR_RELEASE_NOT_OWNED (-200)

#define SWIG_IsOK(r)               (r >= 0)
#define SWIG_ArgError(r)           ((r != SWIG_ERROR) ? r : SWIG_TypeError)

/* The CastRankLimit says how many bits are used for the cast rank */
#define SWIG_CASTRANKLIMIT         (1 << 8)
/* The NewMask denotes the object was created (using new/malloc) */
#define SWIG_NEWOBJMASK            (SWIG_CASTRANKLIMIT  << 1)
/* The TmpMask is for in/out typemaps that use temporary objects */
#define SWIG_TMPOBJMASK            (SWIG_NEWOBJMASK << 1)
/* Simple returning values */
#define SWIG_BADOBJ                (SWIG_ERROR)
#define SWIG_OLDOBJ                (SWIG_OK)
#define SWIG_NEWOBJ                (SWIG_OK | SWIG_NEWOBJMASK)
#define SWIG_TMPOBJ                (SWIG_OK | SWIG_TMPOBJMASK)
/* Check, add and del object mask methods */
#define SWIG_AddNewMask(r)         (SWIG_IsOK(r) ? (r | SWIG_NEWOBJMASK) : r)
#define SWIG_DelNewMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_NEWOBJMASK) : r)
#define SWIG_IsNewObj(r)           (SWIG_IsOK(r) && (r & SWIG_NEWOBJMASK))
#define SWIG_AddTmpMask(r)         (SWIG_IsOK(r) ? (r | SWIG_TMPOBJMASK) : r)
#define SWIG_DelTmpMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_TMPOBJMASK) : r)
#define SWIG_IsTmpObj(r)           (SWIG_IsOK(r) && (r & SWIG_TMPOBJMASK))

/* Cast-Rank Mode */
#if defined(SWIG_CASTRANK_MODE)
#  ifndef SWIG_TypeRank
#    define SWIG_TypeRank             unsigned long
#  endif
#  ifndef SWIG_MAXCASTRANK            /* Default cast allowed */
#    define SWIG_MAXCASTRANK          (2)
#  endif
#  define SWIG_CASTRANKMASK          ((SWIG_CASTRANKLIMIT) -1)
#  define SWIG_CastRank(r)           (r & SWIG_CASTRANKMASK)
SWIGINTERNINLINE int SWIG_AddCast(int r) {
  return SWIG_IsOK(r) ? ((SWIG_CastRank(r) < SWIG_MAXCASTRANK) ? (r + 1) : SWIG_ERROR) : r;
}
SWIGINTERNINLINE int SWIG_CheckState(int r) {
  return SWIG_IsOK(r) ? SWIG_CastRank(r) + 1 : 0;
}
#else /* no cast-rank mode */
#  define SWIG_AddCast(r) (r)
#  define SWIG_CheckState(r) (SWIG_IsOK(r) ? 1 : 0)
#endif


#include <string.h>

#ifdef __cplusplus
extern "C" {
#endif

typedef void *(*swig_converter_func)(void *, int *);
typedef struct swig_type_info *(*swig_dycast_func)(void **);

/* Structure to store information on one type */
typedef struct swig_type_info {
  const char             *name;			/* mangled name of this type */
  const char             *str;			/* human readable name of this type */
  swig_dycast_func        dcast;		/* dynamic cast function down a hierarchy */
  struct swig_cast_info  *cast;			/* linked list of types that can cast into this type */
  void                   *clientdata;		/* language specific type data */
  int                    owndata;		/* flag if the structure owns the clientdata */
} swig_type_info;

/* Structure to store a type and conversion function used for casting */
typedef struct swig_cast_info {
  swig_type_info         *type;			/* pointer to type that is equivalent to this type */
  swig_converter_func     converter;		/* function to cast the void pointers */
  struct swig_cast_info  *next;			/* pointer to next cast in linked list */
  struct swig_cast_info  *prev;			/* pointer to the previous cast */
} swig_cast_info;

/* Structure used to store module information
 * Each module generates one structure like this, and the runtime collects
 * all of these structures and stores them in a circularly linked list.*/
typedef struct swig_module_info {
  swig_type_info         **types;		/* Array of pointers to swig_type_info structures that are in this module */
  size_t                 size;		        /* Number of types in this module */
  struct swig_module_info *next;		/* Pointer to next element in circularly linked list */
  swig_type_info         **type_initial;	/* Array of initially generated type structures */
  swig_cast_info         **cast_initial;	/* Array of initially generated casting structures */
  void                    *clientdata;		/* Language specific module data */
} swig_module_info;

/*
  Compare two type names skipping the space characters, therefore
  "char*" == "char *" and "Class<int>" == "Class<int >", etc.

  Return 0 when the two name types are equivalent, as in
  strncmp, but skipping ' '.
*/
SWIGRUNTIME int
SWIG_TypeNameComp(const char *f1, const char *l1,
		  const char *f2, const char *l2) {
  for (;(f1 != l1) && (f2 != l2); ++f1, ++f2) {
    while ((*f1 == ' ') && (f1 != l1)) ++f1;
    while ((*f2 == ' ') && (f2 != l2)) ++f2;
    if (*f1 != *f2) return (*f1 > *f2) ? 1 : -1;
  }
  return (int)((l1 - f1) - (l2 - f2));
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if equal, -1 if nb < tb, 1 if nb > tb
*/
SWIGRUNTIME int
SWIG_TypeCmp(const char *nb, const char *tb) {
  int equiv = 1;
  const char* te = tb + strlen(tb);
  const char* ne = nb;
  while (equiv != 0 && *ne) {
    for (nb = ne; *ne; ++ne) {
      if (*ne == '|') break;
    }
    equiv = SWIG_TypeNameComp(nb, ne, tb, te);
    if (*ne) ++ne;
  }
  return equiv;
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if not equal, 1 if equal
*/
SWIGRUNTIME int
SWIG_TypeEquiv(const char *nb, const char *tb) {
  return SWIG_TypeCmp(nb, tb) == 0 ? 1 : 0;
}

/*
  Check the typename
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheck(const char *c, swig_type_info *ty) {
  if (ty) {
    swig_cast_info *iter = ty->cast;
    while (iter) {
      if (strcmp(iter->type->name, c) == 0) {
        if (iter == ty->cast)
          return iter;
        /* Move iter to the top of the linked list */
        iter->prev->next = iter->next;
        if (iter->next)
          iter->next->prev = iter->prev;
        iter->next = ty->cast;
        iter->prev = 0;
        if (ty->cast) ty->cast->prev = iter;
        ty->cast = iter;
        return iter;
      }
      iter = iter->next;
    }
  }
  return 0;
}

/*
  Identical to SWIG_TypeCheck, except strcmp is replaced with a pointer comparison
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheckStruct(const swig_type_info *from, swig_type_info *ty) {
  if (ty) {
    swig_cast_info *iter = ty->cast;
    while (iter) {
      if (iter->type == from) {
        if (iter == ty->cast)
          return iter;
        /* Move iter to the top of the linked list */
        iter->prev->next = iter->next;
        if (iter->next)
          iter->next->prev = iter->prev;
        iter->next = ty->cast;
        iter->prev = 0;
        if (ty->cast) ty->cast->prev = iter;
        ty->cast = iter;
        return iter;
      }
      iter = iter->next;
    }
  }
  return 0;
}

/*
  Cast a pointer up an inheritance hierarchy
*/
SWIGRUNTIMEINLINE void *
SWIG_TypeCast(swig_cast_info *ty, void *ptr, int *newmemory) {
  return ((!ty) || (!ty->converter)) ? ptr : (*ty->converter)(ptr, newmemory);
}

/*
   Dynamic pointer casting. Down an inheritance hierarchy
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeDynamicCast(swig_type_info *ty, void **ptr) {
  swig_type_info *lastty = ty;
  if (!ty || !ty->dcast) return ty;
  while (ty && (ty->dcast)) {
    ty = (*ty->dcast)(ptr);
    if (ty) lastty = ty;
  }
  return lastty;
}

/*
  Return the name associated with this type
*/
SWIGRUNTIMEINLINE const char *
SWIG_TypeName(const swig_type_info *ty) {
  return ty->name;
}

/*
  Return the pretty name associated with this type,
  that is an unmangled type name in a form presentable to the user.
*/
SWIGRUNTIME const char *
SWIG_TypePrettyName(const swig_type_info *type) {
  /* The "str" field contains the equivalent pretty names of the
     type, separated by vertical-bar characters.  Choose the last
     name. It should be the most specific; a fully resolved name
     but not necessarily with default template parameters expanded. */
  if (!type) return NULL;
  if (type->str != NULL) {
    const char *last_name = type->str;
    const char *s;
    for (s = type->str; *s; s++)
      if (*s == '|') last_name = s+1;
    return last_name;
  }
  else
    return type->name;
}

/*
   Set the clientdata field for a type
*/
SWIGRUNTIME void
SWIG_TypeClientData(swig_type_info *ti, void *clientdata) {
  swig_cast_info *cast = ti->cast;
  /* if (ti->clientdata == clientdata) return; */
  ti->clientdata = clientdata;

  while (cast) {
    if (!cast->converter) {
      swig_type_info *tc = cast->type;
      if (!tc->clientdata) {
	SWIG_TypeClientData(tc, clientdata);
      }
    }
    cast = cast->next;
  }
}
SWIGRUNTIME void
SWIG_TypeNewClientData(swig_type_info *ti, void *clientdata) {
  SWIG_TypeClientData(ti, clientdata);
  ti->owndata = 1;
}

/*
  Search for a swig_type_info structure only by mangled name
  Search is a O(log #types)

  We start searching at module start, and finish searching when start == end.
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_MangledTypeQueryModule(swig_module_info *start,
                            swig_module_info *end,
		            const char *name) {
  swig_module_info *iter = start;
  do {
    if (iter->size) {
      size_t l = 0;
      size_t r = iter->size - 1;
      do {
	/* since l+r >= 0, we can (>> 1) instead (/ 2) */
	size_t i = (l + r) >> 1;
	const char *iname = iter->types[i]->name;
	if (iname) {
	  int compare = strcmp(name, iname);
	  if (compare == 0) {
	    return iter->types[i];
	  } else if (compare < 0) {
	    if (i) {
	      r = i - 1;
	    } else {
	      break;
	    }
	  } else if (compare > 0) {
	    l = i + 1;
	  }
	} else {
	  break; /* should never happen */
	}
      } while (l <= r);
    }
    iter = iter->next;
  } while (iter != end);
  return 0;
}

/*
  Search for a swig_type_info structure for either a mangled name or a human readable name.
  It first searches the mangled names of the types, which is a O(log #types)
  If a type is not found it then searches the human readable names, which is O(#types).

  We start searching at module start, and finish searching when start == end.
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeQueryModule(swig_module_info *start,
                     swig_module_info *end,
		     const char *name) {
  /* STEP 1: Search the name field using binary search */
  swig_type_info *ret = SWIG_MangledTypeQueryModule(start, end, name);
  if (ret) {
    return ret;
  } else {
    /* STEP 2: If the type hasn't been found, do a complete search
       of the str field (the human readable name) */
    swig_module_info *iter = start;
    do {
      size_t i = 0;
      for (; i < iter->size; ++i) {
	if (iter->types[i]->str && (SWIG_TypeEquiv(iter->types[i]->str, name)))
	  return iter->types[i];
      }
      iter = iter->next;
    } while (iter != end);
  }

  /* neither found a match */
  return 0;
}

/*
   Pack binary data into a string
*/
SWIGRUNTIME char *
SWIG_PackData(char *c, void *ptr, size_t sz) {
  static const char hex[17] = "0123456789abcdef";
  const unsigned char *u = (unsigned char *) ptr;
  const unsigned char *eu =  u + sz;
  for (; u != eu; ++u) {
    unsigned char uu = *u;
    *(c++) = hex[(uu & 0xf0) >> 4];
    *(c++) = hex[uu & 0xf];
  }
  return c;
}

/*
   Unpack binary data from a string
*/
SWIGRUNTIME const char *
SWIG_UnpackData(const char *c, void *ptr, size_t sz) {
  unsigned char *u = (unsigned char *) ptr;
  const unsigned char *eu = u + sz;
  for (; u != eu; ++u) {
    char d = *(c++);
    unsigned char uu;
    if ((d >= '0') && (d <= '9'))
      uu = (unsigned char)((d - '0') << 4);
    else if ((d >= 'a') && (d <= 'f'))
      uu = (unsigned char)((d - ('a'-10)) << 4);
    else
      return (char *) 0;
    d = *(c++);
    if ((d >= '0') && (d <= '9'))
      uu |= (unsigned char)(d - '0');
    else if ((d >= 'a') && (d <= 'f'))
      uu |= (unsigned char)(d - ('a'-10));
    else
      return (char *) 0;
    *u = uu;
  }
  return c;
}

/*
   Pack 'void *' into a string buffer.
*/
SWIGRUNTIME char *
SWIG_PackVoidPtr(char *buff, void *ptr, const char *name, size_t bsz) {
  char *r = buff;
  if ((2*sizeof(void *) + 2) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,&ptr,sizeof(void *));
  if (strlen(name) + 1 > (bsz - (r - buff))) return 0;
  strcpy(r,name);
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackVoidPtr(const char *c, void **ptr, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      *ptr = (void *) 0;
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sizeof(void *));
}

SWIGRUNTIME char *
SWIG_PackDataName(char *buff, void *ptr, size_t sz, const char *name, size_t bsz) {
  char *r = buff;
  size_t lname = (name ? strlen(name) : 0);
  if ((2*sz + 2 + lname) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,ptr,sz);
  if (lname) {
    strncpy(r,name,lname+1);
  } else {
    *r = 0;
  }
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackDataName(const char *c, void *ptr, size_t sz, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      memset(ptr,0,sz);
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sz);
}

#ifdef __cplusplus
}
#endif

/* SWIG Errors applicable to all language modules, values are reserved from -1 to -99 */
#define  SWIG_UnknownError    	   -1
#define  SWIG_IOError        	   -2
#define  SWIG_RuntimeError   	   -3
#define  SWIG_IndexError     	   -4
#define  SWIG_TypeError      	   -5
#define  SWIG_DivisionByZero 	   -6
#define  SWIG_OverflowError  	   -7
#define  SWIG_SyntaxError    	   -8
#define  SWIG_ValueError     	   -9
#define  SWIG_SystemError    	   -10
#define  SWIG_AttributeError 	   -11
#define  SWIG_MemoryError    	   -12
#define  SWIG_NullReferenceError   -13


/* Compatibility macros for Python 3 */
#if PY_VERSION_HEX >= 0x03000000

#define PyClass_Check(obj) PyObject_IsInstance(obj, (PyObject *)&PyType_Type)
#define PyInt_Check(x) PyLong_Check(x)
#define PyInt_AsLong(x) PyLong_AsLong(x)
#define PyInt_FromLong(x) PyLong_FromLong(x)
#define PyInt_FromSize_t(x) PyLong_FromSize_t(x)
#define PyString_Check(name) PyBytes_Check(name)
#define PyString_FromString(x) PyUnicode_FromString(x)
#define PyString_Format(fmt, args)  PyUnicode_Format(fmt, args)
#define PyString_AsString(str) PyBytes_AsString(str)
#define PyString_Size(str) PyBytes_Size(str)	
#define PyString_InternFromString(key) PyUnicode_InternFromString(key)
#define Py_TPFLAGS_HAVE_CLASS Py_TPFLAGS_BASETYPE
#define _PyLong_FromSsize_t(x) PyLong_FromSsize_t(x)

#endif

#ifndef Py_TYPE
#  define Py_TYPE(op) ((op)->ob_type)
#endif

/* SWIG APIs for compatibility of both Python 2 & 3 */

#if PY_VERSION_HEX >= 0x03000000
#  define SWIG_Python_str_FromFormat PyUnicode_FromFormat
#else
#  define SWIG_Python_str_FromFormat PyString_FromFormat
#endif


/* Wrapper around PyUnicode_AsUTF8AndSize - call Py_XDECREF on the returned pbytes when finished with the returned string */
SWIGINTERN const char *
SWIG_PyUnicode_AsUTF8AndSize(PyObject *str, Py_ssize_t *psize, PyObject **pbytes)
{
#if PY_VERSION_HEX >= 0x03030000
# if !defined(Py_LIMITED_API) || Py_LIMITED_API+0 >= 0x030A0000
  *pbytes = NULL;
  return PyUnicode_AsUTF8AndSize(str, psize);
# else
   *pbytes = PyUnicode_AsUTF8String(str);
   const char *chars = *pbytes ? PyBytes_AsString(*pbytes) : NULL;
   if (chars && psize)
     *psize = PyBytes_Size(*pbytes);
  return chars;
# endif
#else
  char *chars = NULL;
  *pbytes = NULL;
  PyString_AsStringAndSize(str, &chars, psize);
  return chars;
#endif
}

SWIGINTERN PyObject*
SWIG_Python_str_FromChar(const char *c)
{
#if PY_VERSION_HEX >= 0x03000000
  return PyUnicode_FromString(c); 
#else
  return PyString_FromString(c);
#endif
}

#ifndef PyObject_DEL
# define PyObject_DEL PyObject_Del
#endif

/* SWIGPY_USE_CAPSULE is no longer used within SWIG itself, but some user interface files check for it. */
# define SWIGPY_USE_CAPSULE
#ifdef SWIGPYTHON_BUILTIN
# define SWIGPY_CAPSULE_ATTR_NAME "type_pointer_capsule_builtin" SWIG_TYPE_TABLE_NAME
#else
# define SWIGPY_CAPSULE_ATTR_NAME "type_pointer_capsule" SWIG_TYPE_TABLE_NAME
#endif
# define SWIGPY_CAPSULE_NAME ("swig_runtime_data" SWIG_RUNTIME_VERSION "." SWIGPY_CAPSULE_ATTR_NAME)

#if PY_VERSION_HEX < 0x03020000
#define PyDescr_TYPE(x) (((PyDescrObject *)(x))->d_type)
#define PyDescr_NAME(x) (((PyDescrObject *)(x))->d_name)
#define Py_hash_t long
#endif

#ifdef Py_LIMITED_API
# define PyTuple_GET_ITEM PyTuple_GetItem
/* Note that PyTuple_SetItem() has different semantics from PyTuple_SET_ITEM as it decref's the original tuple item, so in general they cannot be used
  interchangeably. However in SWIG-generated code PyTuple_SET_ITEM is only used with newly initialized tuples without any items and for them this does work. */
# define PyTuple_SET_ITEM PyTuple_SetItem
# define PyTuple_GET_SIZE PyTuple_Size
# define PyCFunction_GET_FLAGS PyCFunction_GetFlags
# define PyCFunction_GET_FUNCTION PyCFunction_GetFunction
# define PyCFunction_GET_SELF PyCFunction_GetSelf
# define PyList_GET_ITEM PyList_GetItem
# define PyList_SET_ITEM PyList_SetItem
# define PySliceObject PyObject
#endif

/* -----------------------------------------------------------------------------
 * error manipulation
 * ----------------------------------------------------------------------------- */

SWIGRUNTIME PyObject*
SWIG_Python_ErrorType(int code) {
  PyObject* type = 0;
  switch(code) {
  case SWIG_MemoryError:
    type = PyExc_MemoryError;
    break;
  case SWIG_IOError:
    type = PyExc_IOError;
    break;
  case SWIG_RuntimeError:
    type = PyExc_RuntimeError;
    break;
  case SWIG_IndexError:
    type = PyExc_IndexError;
    break;
  case SWIG_TypeError:
    type = PyExc_TypeError;
    break;
  case SWIG_DivisionByZero:
    type = PyExc_ZeroDivisionError;
    break;
  case SWIG_OverflowError:
    type = PyExc_OverflowError;
    break;
  case SWIG_SyntaxError:
    type = PyExc_SyntaxError;
    break;
  case SWIG_ValueError:
    type = PyExc_ValueError;
    break;
  case SWIG_SystemError:
    type = PyExc_SystemError;
    break;
  case SWIG_AttributeError:
    type = PyExc_AttributeError;
    break;
  default:
    type = PyExc_RuntimeError;
  }
  return type;
}


SWIGRUNTIME void
SWIG_Python_AddErrorMsg(const char* mesg)
{
  PyObject *type = 0;
  PyObject *value = 0;
  PyObject *traceback = 0;

  if (PyErr_Occurred())
    PyErr_Fetch(&type, &value, &traceback);
  if (value) {
    PyObject *old_str = PyObject_Str(value);
    PyObject *bytes = NULL;
    const char *tmp = SWIG_PyUnicode_AsUTF8AndSize(old_str, NULL, &bytes);
    PyErr_Clear();
    Py_XINCREF(type);
    if (tmp)
      PyErr_Format(type, "%s %s", tmp, mesg);
    else
      PyErr_Format(type, "%s", mesg);
    Py_XDECREF(bytes);
    Py_DECREF(old_str);
    Py_DECREF(value);
  } else {
    PyErr_SetString(PyExc_RuntimeError, mesg);
  }
}

SWIGRUNTIME int
SWIG_Python_TypeErrorOccurred(PyObject *obj)
{
  PyObject *error;
  if (obj)
    return 0;
  error = PyErr_Occurred();
  return error && PyErr_GivenExceptionMatches(error, PyExc_TypeError);
}

SWIGRUNTIME void
SWIG_Python_RaiseOrModifyTypeError(const char *message)
{
  if (SWIG_Python_TypeErrorOccurred(NULL)) {
    /* Use existing TypeError to preserve stacktrace and enhance with given message */
    PyObject *newvalue;
    PyObject *type = NULL, *value = NULL, *traceback = NULL;
    PyErr_Fetch(&type, &value, &traceback);
#if PY_VERSION_HEX >= 0x03000000
    newvalue = PyUnicode_FromFormat("%S\nAdditional information:\n%s", value, message);
#else
    newvalue = PyString_FromFormat("%s\nAdditional information:\n%s", PyString_AsString(value), message);
#endif
    if (newvalue) {
      Py_XDECREF(value);
      PyErr_Restore(type, newvalue, traceback);
    } else {
      PyErr_Restore(type, value, traceback);
    }
  } else {
    /* Raise TypeError using given message */
    PyErr_SetString(PyExc_TypeError, message);
  }
}

#if defined(SWIG_PYTHON_NO_THREADS)
#  if defined(SWIG_PYTHON_THREADS)
#    undef SWIG_PYTHON_THREADS
#  endif
#endif
#if defined(SWIG_PYTHON_THREADS) /* Threading support is enabled */
#  if !defined(SWIG_PYTHON_USE_GIL) && !defined(SWIG_PYTHON_NO_USE_GIL)
#    define SWIG_PYTHON_USE_GIL
#  endif
#  if defined(SWIG_PYTHON_USE_GIL) /* Use PyGILState threads calls */
#    if !defined(SWIG_PYTHON_INITIALIZE_THREADS)
#      if PY_VERSION_HEX < 0x03070000
#        define SWIG_PYTHON_INITIALIZE_THREADS PyEval_InitThreads()
#      else
#        define SWIG_PYTHON_INITIALIZE_THREADS
#      endif
#    endif
#    ifdef __cplusplus /* C++ code */
       class SWIG_Python_Thread_Block {
         bool status;
         PyGILState_STATE state;
       public:
         void end() { if (status) { PyGILState_Release(state); status = false;} }
         SWIG_Python_Thread_Block() : status(true), state(PyGILState_Ensure()) {}
         ~SWIG_Python_Thread_Block() { end(); }
       };
       class SWIG_Python_Thread_Allow {
         bool status;
         PyThreadState *save;
       public:
         void end() { if (status) { status = false; PyEval_RestoreThread(save); }}
         SWIG_Python_Thread_Allow() : status(true), save(PyEval_SaveThread()) {}
         ~SWIG_Python_Thread_Allow() { end(); }
       };
#      define SWIG_PYTHON_THREAD_BEGIN_BLOCK   SWIG_Python_Thread_Block _swig_thread_block
#      define SWIG_PYTHON_THREAD_END_BLOCK     _swig_thread_block.end()
#      define SWIG_PYTHON_THREAD_BEGIN_ALLOW   SWIG_Python_Thread_Allow _swig_thread_allow
#      define SWIG_PYTHON_THREAD_END_ALLOW     _swig_thread_allow.end()
#    else /* C code */
#      define SWIG_PYTHON_THREAD_BEGIN_BLOCK   PyGILState_STATE _swig_thread_block = PyGILState_Ensure()
#      define SWIG_PYTHON_THREAD_END_BLOCK     PyGILState_Release(_swig_thread_block)
#      define SWIG_PYTHON_THREAD_BEGIN_ALLOW   PyThreadState *_swig_thread_allow = PyEval_SaveThread()
#      define SWIG_PYTHON_THREAD_END_ALLOW     PyEval_RestoreThread(_swig_thread_allow)
#    endif
#  else /* Old thread way, not implemented, user must provide it */
#    if !defined(SWIG_PYTHON_INITIALIZE_THREADS)
#      define SWIG_PYTHON_INITIALIZE_THREADS
#    endif
#    if !defined(SWIG_PYTHON_THREAD_BEGIN_BLOCK)
#      define SWIG_PYTHON_THREAD_BEGIN_BLOCK
#    endif
#    if !defined(SWIG_PYTHON_THREAD_END_BLOCK)
#      define SWIG_PYTHON_THREAD_END_BLOCK
#    endif
#    if !defined(SWIG_PYTHON_THREAD_BEGIN_ALLOW)
#      define SWIG_PYTHON_THREAD_BEGIN_ALLOW
#    endif
#    if !defined(SWIG_PYTHON_THREAD_END_ALLOW)
#      define SWIG_PYTHON_THREAD_END_ALLOW
#    endif
#  endif
#else /* No thread support */
#  define SWIG_PYTHON_INITIALIZE_THREADS
#  define SWIG_PYTHON_THREAD_BEGIN_BLOCK
#  define SWIG_PYTHON_THREAD_END_BLOCK
#  define SWIG_PYTHON_THREAD_BEGIN_ALLOW
#  define SWIG_PYTHON_THREAD_END_ALLOW
#endif

/* -----------------------------------------------------------------------------
 * Python API portion that goes into the runtime
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#endif

/* -----------------------------------------------------------------------------
 * Constant declarations
 * ----------------------------------------------------------------------------- */

/* Constant Types */
#define SWIG_PY_POINTER 4
#define SWIG_PY_BINARY  5

/* Constant information structure */
typedef struct swig_const_info {
  int type;
  const char *name;
  long lvalue;
  double dvalue;
  void   *pvalue;
  swig_type_info **ptype;
} swig_const_info;

#ifdef __cplusplus
}
#endif


/* -----------------------------------------------------------------------------
 * pyrun.swg
 *
 * This file contains the runtime support for Python modules
 * and includes code for managing global variables and pointer
 * type checking.
 *
 * ----------------------------------------------------------------------------- */

#if PY_VERSION_HEX < 0x02070000 /* 2.7.0 */
# error "This version of SWIG only supports Python >= 2.7"
#endif

#if PY_VERSION_HEX >= 0x03000000 && PY_VERSION_HEX < 0x03030000
# error "This version of SWIG only supports Python 3 >= 3.3"
#endif

/* Common SWIG API */

/* for raw pointers */
#define SWIG_Python_ConvertPtr(obj, pptr, type, flags)  SWIG_Python_ConvertPtrAndOwn(obj, pptr, type, flags, 0)
#define SWIG_ConvertPtr(obj, pptr, type, flags)         SWIG_Python_ConvertPtr(obj, pptr, type, flags)
#define SWIG_ConvertPtrAndOwn(obj,pptr,type,flags,own)  SWIG_Python_ConvertPtrAndOwn(obj, pptr, type, flags, own)

#ifdef SWIGPYTHON_BUILTIN
#define SWIG_NewPointerObj(ptr, type, flags)            SWIG_Python_NewPointerObj(self, ptr, type, flags)
#else
#define SWIG_NewPointerObj(ptr, type, flags)            SWIG_Python_NewPointerObj(NULL, ptr, type, flags)
#endif

#define SWIG_InternalNewPointerObj(ptr, type, flags)	SWIG_Python_NewPointerObj(NULL, ptr, type, flags)

#define SWIG_CheckImplicit(ty)                          SWIG_Python_CheckImplicit(ty) 
#define SWIG_AcquirePtr(ptr, src)                       SWIG_Python_AcquirePtr(ptr, src)
#define swig_owntype                                    int

/* for raw packed data */
#define SWIG_ConvertPacked(obj, ptr, sz, ty)            SWIG_Python_ConvertPacked(obj, ptr, sz, ty)
#define SWIG_NewPackedObj(ptr, sz, type)                SWIG_Python_NewPackedObj(ptr, sz, type)

/* for class or struct pointers */
#define SWIG_ConvertInstance(obj, pptr, type, flags)    SWIG_ConvertPtr(obj, pptr, type, flags)
#define SWIG_NewInstanceObj(ptr, type, flags)           SWIG_NewPointerObj(ptr, type, flags)

/* for C or C++ function pointers */
#define SWIG_ConvertFunctionPtr(obj, pptr, type)        SWIG_Python_ConvertFunctionPtr(obj, pptr, type)
#define SWIG_NewFunctionPtrObj(ptr, type)               SWIG_Python_NewPointerObj(NULL, ptr, type, 0)

/* for C++ member pointers, ie, member methods */
#define SWIG_ConvertMember(obj, ptr, sz, ty)            SWIG_Python_ConvertPacked(obj, ptr, sz, ty)
#define SWIG_NewMemberObj(ptr, sz, type)                SWIG_Python_NewPackedObj(ptr, sz, type)


/* Runtime API */

#define SWIG_GetModule(clientdata)                      SWIG_Python_GetModule(clientdata)
#define SWIG_SetModule(clientdata, pointer)             SWIG_Python_SetModule(pointer)
#define SWIG_NewClientData(obj)                         SwigPyClientData_New(obj)

#define SWIG_SetErrorObj                                SWIG_Python_SetErrorObj                            
#define SWIG_SetErrorMsg                        	SWIG_Python_SetErrorMsg				   
#define SWIG_ErrorType(code)                    	SWIG_Python_ErrorType(code)                        
#define SWIG_Error(code, msg)            		SWIG_Python_SetErrorMsg(SWIG_ErrorType(code), msg) 
#define SWIG_fail                        		goto fail					   


/* Runtime API implementation */

/* Error manipulation */

SWIGINTERN void 
SWIG_Python_SetErrorObj(PyObject *errtype, PyObject *obj) {
  SWIG_PYTHON_THREAD_BEGIN_BLOCK; 
  PyErr_SetObject(errtype, obj);
  Py_DECREF(obj);
  SWIG_PYTHON_THREAD_END_BLOCK;
}

SWIGINTERN void 
SWIG_Python_SetErrorMsg(PyObject *errtype, const char *msg) {
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  PyErr_SetString(errtype, msg);
  SWIG_PYTHON_THREAD_END_BLOCK;
}

#define SWIG_Python_Raise(obj, type, desc)  SWIG_Python_SetErrorObj(SWIG_Python_ExceptionType(desc), obj)

/* Set a constant value */

#if defined(SWIGPYTHON_BUILTIN)

SWIGINTERN void
SwigPyBuiltin_AddPublicSymbol(PyObject *seq, const char *key) {
  PyObject *s = PyString_InternFromString(key);
  PyList_Append(seq, s);
  Py_DECREF(s);
}

SWIGINTERN void
SWIG_Python_SetConstant(PyObject *d, PyObject *public_interface, const char *name, PyObject *obj) {   
  PyDict_SetItemString(d, name, obj);
  Py_DECREF(obj);
  if (public_interface)
    SwigPyBuiltin_AddPublicSymbol(public_interface, name);
}

#else

SWIGINTERN void
SWIG_Python_SetConstant(PyObject *d, const char *name, PyObject *obj) {   
  PyDict_SetItemString(d, name, obj);
  Py_DECREF(obj);                            
}

#endif

/* Append a value to the result obj */

SWIGINTERN PyObject*
SWIG_Python_AppendOutput(PyObject* result, PyObject* obj) {
  if (!result) {
    result = obj;
  } else if (result == Py_None) {
    Py_DECREF(result);
    result = obj;
  } else {
    if (!PyList_Check(result)) {
      PyObject *o2 = result;
      result = PyList_New(1);
      if (result) {
        PyList_SET_ITEM(result, 0, o2);
      } else {
        Py_DECREF(obj);
        return o2;
      }
    }
    PyList_Append(result,obj);
    Py_DECREF(obj);
  }
  return result;
}

/* Unpack the argument tuple */

SWIGINTERN Py_ssize_t
SWIG_Python_UnpackTuple(PyObject *args, const char *name, Py_ssize_t min, Py_ssize_t max, PyObject **objs)
{
  if (!args) {
    if (!min && !max) {
      return 1;
    } else {
      PyErr_Format(PyExc_TypeError, "%s expected %s%d arguments, got none", 
		   name, (min == max ? "" : "at least "), (int)min);
      return 0;
    }
  }  
  if (!PyTuple_Check(args)) {
    if (min <= 1 && max >= 1) {
      Py_ssize_t i;
      objs[0] = args;
      for (i = 1; i < max; ++i) {
	objs[i] = 0;
      }
      return 2;
    }
    PyErr_SetString(PyExc_SystemError, "UnpackTuple() argument list is not a tuple");
    return 0;
  } else {
    Py_ssize_t l = PyTuple_GET_SIZE(args);
    if (l < min) {
      PyErr_Format(PyExc_TypeError, "%s expected %s%d arguments, got %d", 
		   name, (min == max ? "" : "at least "), (int)min, (int)l);
      return 0;
    } else if (l > max) {
      PyErr_Format(PyExc_TypeError, "%s expected %s%d arguments, got %d", 
		   name, (min == max ? "" : "at most "), (int)max, (int)l);
      return 0;
    } else {
      Py_ssize_t i;
      for (i = 0; i < l; ++i) {
	objs[i] = PyTuple_GET_ITEM(args, i);
      }
      for (; l < max; ++l) {
	objs[l] = 0;
      }
      return i + 1;
    }    
  }
}

SWIGINTERN int
SWIG_Python_CheckNoKeywords(PyObject *kwargs, const char *name) {
  int no_kwargs = 1;
  if (kwargs) {
    assert(PyDict_Check(kwargs));
    if (PyDict_Size(kwargs) > 0) {
      PyErr_Format(PyExc_TypeError, "%s() does not take keyword arguments", name);
      no_kwargs = 0;
    }
  }
  return no_kwargs;
}

/* A functor is a function object with one single object argument */
#define SWIG_Python_CallFunctor(functor, obj)	        PyObject_CallFunctionObjArgs(functor, obj, NULL);

/*
  Helper for static pointer initialization for both C and C++ code, for example
  static PyObject *SWIG_STATIC_POINTER(MyVar) = NewSomething(...);
*/
#ifdef __cplusplus
#define SWIG_STATIC_POINTER(var)  var
#else
#define SWIG_STATIC_POINTER(var)  var = 0; if (!var) var
#endif

#ifdef __cplusplus
extern "C" {
#endif

/* Python-specific SWIG API */
#define SWIG_newvarlink()                             SWIG_Python_newvarlink()
#define SWIG_addvarlink(p, name, get_attr, set_attr)  SWIG_Python_addvarlink(p, name, get_attr, set_attr)
#define SWIG_InstallConstants(d, constants)           SWIG_Python_InstallConstants(d, constants)
 
/* -----------------------------------------------------------------------------
 * global variable support code.
 * ----------------------------------------------------------------------------- */
 
typedef struct swig_globalvar {   
  char       *name;                  /* Name of global variable */
  PyObject *(*get_attr)(void);       /* Return the current value */
  int       (*set_attr)(PyObject *); /* Set the value */
  struct swig_globalvar *next;
} swig_globalvar;

typedef struct swig_varlinkobject {
  PyObject_HEAD
  swig_globalvar *vars;
} swig_varlinkobject;

SWIGINTERN PyObject *
swig_varlink_repr(PyObject *SWIGUNUSEDPARM(v)) {
#if PY_VERSION_HEX >= 0x03000000
  return PyUnicode_InternFromString("<Swig global variables>");
#else
  return PyString_FromString("<Swig global variables>");
#endif
}

SWIGINTERN PyObject *
swig_varlink_str(PyObject *o) {
  swig_varlinkobject *v = (swig_varlinkobject *) o;
#if PY_VERSION_HEX >= 0x03000000
  PyObject *str = PyUnicode_InternFromString("(");
  PyObject *tail;
  PyObject *joined;
  swig_globalvar *var;
  for (var = v->vars; var; var=var->next) {
    tail = PyUnicode_FromString(var->name);
    joined = PyUnicode_Concat(str, tail);
    Py_DecRef(str);
    Py_DecRef(tail);
    str = joined;
    if (var->next) {
        tail = PyUnicode_InternFromString(", ");
        joined = PyUnicode_Concat(str, tail);
        Py_DecRef(str);
        Py_DecRef(tail);
        str = joined;
    }
  }
  tail = PyUnicode_InternFromString(")");
  joined = PyUnicode_Concat(str, tail);
  Py_DecRef(str);
  Py_DecRef(tail);
  str = joined;
#else
  PyObject *str = PyString_FromString("(");
  swig_globalvar *var;
  for (var = v->vars; var; var=var->next) {
    PyString_ConcatAndDel(&str,PyString_FromString(var->name));
    if (var->next) PyString_ConcatAndDel(&str,PyString_FromString(", "));
  }
  PyString_ConcatAndDel(&str,PyString_FromString(")"));
#endif
  return str;
}

SWIGINTERN void
swig_varlink_dealloc(PyObject *o) {
  swig_varlinkobject *v = (swig_varlinkobject *) o;
  swig_globalvar *var = v->vars;
  while (var) {
    swig_globalvar *n = var->next;
    free(var->name);
    free(var);
    var = n;
  }
}

SWIGINTERN PyObject *
swig_varlink_getattr(PyObject *o, char *n) {
  swig_varlinkobject *v = (swig_varlinkobject *) o;
  PyObject *res = NULL;
  swig_globalvar *var = v->vars;
  while (var) {
    if (strcmp(var->name,n) == 0) {
      res = (*var->get_attr)();
      break;
    }
    var = var->next;
  }
  if (res == NULL && !PyErr_Occurred()) {
    PyErr_Format(PyExc_AttributeError, "Unknown C global variable '%s'", n);
  }
  return res;
}

SWIGINTERN int
swig_varlink_setattr(PyObject *o, char *n, PyObject *p) {
  swig_varlinkobject *v = (swig_varlinkobject *) o;
  int res = 1;
  swig_globalvar *var = v->vars;
  while (var) {
    if (strcmp(var->name,n) == 0) {
      res = (*var->set_attr)(p);
      break;
    }
    var = var->next;
  }
  if (res == 1 && !PyErr_Occurred()) {
    PyErr_Format(PyExc_AttributeError, "Unknown C global variable '%s'", n);
  }
  return res;
}

SWIGINTERN PyTypeObject*
swig_varlink_type(void) {
  static char varlink__doc__[] = "Swig var link object";
#ifndef Py_LIMITED_API
  static PyTypeObject varlink_type;
  static int type_init = 0;
  if (!type_init) {
    const PyTypeObject tmp = {
#if PY_VERSION_HEX >= 0x03000000
      PyVarObject_HEAD_INIT(NULL, 0)
#else
      PyObject_HEAD_INIT(NULL)
      0,                                  /* ob_size */
#endif
      "swigvarlink",                      /* tp_name */
      sizeof(swig_varlinkobject),         /* tp_basicsize */
      0,                                  /* tp_itemsize */
      (destructor) swig_varlink_dealloc,  /* tp_dealloc */
#if PY_VERSION_HEX < 0x030800b4
      (printfunc)0,                       /*tp_print*/
#else
      (Py_ssize_t)0,                      /*tp_vectorcall_offset*/
#endif
      (getattrfunc) swig_varlink_getattr, /* tp_getattr */
      (setattrfunc) swig_varlink_setattr, /* tp_setattr */
      0,                                  /* tp_compare */
      (reprfunc) swig_varlink_repr,       /* tp_repr */
      0,                                  /* tp_as_number */
      0,                                  /* tp_as_sequence */
      0,                                  /* tp_as_mapping */
      0,                                  /* tp_hash */
      0,                                  /* tp_call */
      (reprfunc) swig_varlink_str,        /* tp_str */
      0,                                  /* tp_getattro */
      0,                                  /* tp_setattro */
      0,                                  /* tp_as_buffer */
      0,                                  /* tp_flags */
      varlink__doc__,                     /* tp_doc */
      0,                                  /* tp_traverse */
      0,                                  /* tp_clear */
      0,                                  /* tp_richcompare */
      0,                                  /* tp_weaklistoffset */
      0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, /* tp_iter -> tp_weaklist */
      0,                                  /* tp_del */
      0,                                  /* tp_version_tag */
#if PY_VERSION_HEX >= 0x03040000
      0,                                  /* tp_finalize */
#endif
#if PY_VERSION_HEX >= 0x03080000
      0,                                  /* tp_vectorcall */
#endif
#if (PY_VERSION_HEX >= 0x03080000) && (PY_VERSION_HEX < 0x03090000)
      0,                                  /* tp_print */
#endif
#if PY_VERSION_HEX >= 0x030C0000
      0,                                  /* tp_watched */
#endif
#ifdef COUNT_ALLOCS
      0,                                  /* tp_allocs */
      0,                                  /* tp_frees */
      0,                                  /* tp_maxalloc */
      0,                                  /* tp_prev */
      0                                   /* tp_next */
#endif
    };
    varlink_type = tmp;
    type_init = 1;
    if (PyType_Ready(&varlink_type) < 0)
      return NULL;
  }
  return &varlink_type;
#else
  PyType_Slot slots[] = {
    { Py_tp_dealloc, (void *)swig_varlink_dealloc },
    { Py_tp_repr, (void *)swig_varlink_repr },
    { Py_tp_getattr, (void *)swig_varlink_getattr },
    { Py_tp_setattr, (void *)swig_varlink_setattr },
    { Py_tp_str, (void *)swig_varlink_str },
    { Py_tp_doc, (void *)varlink__doc__ },
    { 0, NULL }
  };
  PyType_Spec spec = {
    "swigvarlink",
    sizeof(swig_varlinkobject),
    0,
    Py_TPFLAGS_DEFAULT,
    slots
  };
  return (PyTypeObject *)PyType_FromSpec(&spec);
#endif
}

/* Create a variable linking object for use later */
SWIGINTERN PyObject *
SWIG_Python_newvarlink(void) {
  swig_varlinkobject *result = PyObject_New(swig_varlinkobject, swig_varlink_type());
  if (result) {
    result->vars = 0;
  }
  return ((PyObject*) result);
}

SWIGINTERN void 
SWIG_Python_addvarlink(PyObject *p, const char *name, PyObject *(*get_attr)(void), int (*set_attr)(PyObject *p)) {
  swig_varlinkobject *v = (swig_varlinkobject *) p;
  swig_globalvar *gv = (swig_globalvar *) malloc(sizeof(swig_globalvar));
  if (gv) {
    size_t size = strlen(name)+1;
    gv->name = (char *)malloc(size);
    if (gv->name) {
      memcpy(gv->name, name, size);
      gv->get_attr = get_attr;
      gv->set_attr = set_attr;
      gv->next = v->vars;
    }
  }
  v->vars = gv;
}


static PyObject *Swig_Globals_global = NULL;
  
SWIGINTERN PyObject *
SWIG_globals(void) {
  if (Swig_Globals_global == NULL) {
    Swig_Globals_global = SWIG_newvarlink();
  }
  return Swig_Globals_global;
}

#ifdef __cplusplus
}
#endif

/* -----------------------------------------------------------------------------
 * Pointer declarations
 * ----------------------------------------------------------------------------- */

/* Flags for new pointer objects */
#define SWIG_POINTER_NOSHADOW       (SWIG_POINTER_OWN      << 1)
#define SWIG_POINTER_NEW            (SWIG_POINTER_NOSHADOW | SWIG_POINTER_OWN)

#define SWIG_POINTER_IMPLICIT_CONV  (SWIG_POINTER_DISOWN   << 1)

#define SWIG_BUILTIN_TP_INIT	    (SWIG_POINTER_OWN << 2)
#define SWIG_BUILTIN_INIT	    (SWIG_BUILTIN_TP_INIT | SWIG_POINTER_OWN)

#ifdef __cplusplus
extern "C" {
#endif

/* The python void return value */

SWIGRUNTIMEINLINE PyObject * 
SWIG_Py_Void(void)
{
  PyObject *none = Py_None;
  Py_INCREF(none);
  return none;
}

/* SwigPyClientData */

typedef struct {
  PyObject *klass;
  PyObject *newraw;
  PyObject *newargs;
  PyObject *destroy;
  int delargs;
  int implicitconv;
  PyTypeObject *pytype;
} SwigPyClientData;

SWIGRUNTIMEINLINE int 
SWIG_Python_CheckImplicit(swig_type_info *ty)
{
  SwigPyClientData *data = (SwigPyClientData *)ty->clientdata;
  int fail = data ? data->implicitconv : 0;
  if (fail)
    PyErr_SetString(PyExc_TypeError, "Implicit conversion is prohibited for explicit constructors.");
  return fail;
}

SWIGRUNTIMEINLINE PyObject *
SWIG_Python_ExceptionType(swig_type_info *desc) {
  SwigPyClientData *data = desc ? (SwigPyClientData *) desc->clientdata : 0;
  PyObject *klass = data ? data->klass : 0;
  return (klass ? klass : PyExc_RuntimeError);
}


SWIGRUNTIME SwigPyClientData * 
SwigPyClientData_New(PyObject* obj)
{
  if (!obj) {
    return 0;
  } else {
    SwigPyClientData *data = (SwigPyClientData *)malloc(sizeof(SwigPyClientData));
    /* the klass element */
    data->klass = obj;
    Py_INCREF(data->klass);
    /* the newraw method and newargs arguments used to create a new raw instance */
    if (PyClass_Check(obj)) {
      data->newraw = 0;
      Py_INCREF(obj);
      data->newargs = obj;
    } else {
      data->newraw = PyObject_GetAttrString(data->klass, "__new__");
      if (data->newraw) {
        data->newargs = PyTuple_New(1);
        if (data->newargs) {
          Py_INCREF(obj);
          PyTuple_SET_ITEM(data->newargs, 0, obj);
        } else {
          Py_DECREF(data->newraw);
          Py_DECREF(data->klass);
          free(data);
          return 0;
        }
      } else {
        Py_INCREF(obj);
        data->newargs = obj;
      }
    }
    /* the destroy method, aka as the C++ delete method */
    data->destroy = PyObject_GetAttrString(data->klass, "__swig_destroy__");
    if (PyErr_Occurred()) {
      PyErr_Clear();
      data->destroy = 0;
    }
    if (data->destroy) {
      data->delargs = !(PyCFunction_GET_FLAGS(data->destroy) & METH_O);
    } else {
      data->delargs = 0;
    }
    data->implicitconv = 0;
    data->pytype = 0;
    return data;
  }
}

SWIGRUNTIME void 
SwigPyClientData_Del(SwigPyClientData *data)
{
  Py_XDECREF(data->klass);
  Py_XDECREF(data->newraw);
  Py_XDECREF(data->newargs);
  Py_XDECREF(data->destroy);
  free(data);
}

/* =============== SwigPyObject =====================*/

typedef struct {
  PyObject_HEAD
  void *ptr;
  swig_type_info *ty;
  int own;
  PyObject *next;
#ifdef SWIGPYTHON_BUILTIN
  PyObject *dict;
#endif
} SwigPyObject;


#ifdef SWIGPYTHON_BUILTIN

SWIGRUNTIME PyObject *
SwigPyObject_get___dict__(PyObject *v, PyObject *SWIGUNUSEDPARM(args))
{
  SwigPyObject *sobj = (SwigPyObject *)v;

  if (!sobj->dict)
    sobj->dict = PyDict_New();

  Py_XINCREF(sobj->dict);
  return sobj->dict;
}

#endif

SWIGRUNTIME PyObject *
SwigPyObject_long(SwigPyObject *v)
{
  return PyLong_FromVoidPtr(v->ptr);
}

SWIGRUNTIME PyObject *
SwigPyObject_format(const char* fmt, SwigPyObject *v)
{
  PyObject *res = NULL;
  PyObject *args = PyTuple_New(1);
  if (args) {
    PyObject *val = SwigPyObject_long(v);
    if (val) {
      PyObject *ofmt;
      PyTuple_SET_ITEM(args, 0, val);
      ofmt = SWIG_Python_str_FromChar(fmt);
      if (ofmt) {
#if PY_VERSION_HEX >= 0x03000000
        res = PyUnicode_Format(ofmt,args);
#else
        res = PyString_Format(ofmt,args);
#endif
        Py_DECREF(ofmt);
      }
    }
    Py_DECREF(args);
  }
  return res;
}

SWIGRUNTIME PyObject *
SwigPyObject_oct(SwigPyObject *v)
{
  return SwigPyObject_format("%o",v);
}

SWIGRUNTIME PyObject *
SwigPyObject_hex(SwigPyObject *v)
{
  return SwigPyObject_format("%x",v);
}

SWIGRUNTIME PyObject *
SwigPyObject_repr(SwigPyObject *v)
{
  const char *name = SWIG_TypePrettyName(v->ty);
  PyObject *repr = SWIG_Python_str_FromFormat("<Swig Object of type '%s' at %p>", (name ? name : "unknown"), (void *)v);
  if (repr && v->next) {
    PyObject *nrep = SwigPyObject_repr((SwigPyObject *)v->next);
    if (nrep) {
# if PY_VERSION_HEX >= 0x03000000
      PyObject *joined = PyUnicode_Concat(repr, nrep);
      Py_DecRef(repr);
      Py_DecRef(nrep);
      repr = joined;
# else
      PyString_ConcatAndDel(&repr,nrep);
# endif
    } else {
      Py_DecRef(repr);
      repr = NULL;
    }
  }
  return repr;
}

/* We need a version taking two PyObject* parameters so it's a valid
 * PyCFunction to use in swigobject_methods[]. */
SWIGRUNTIME PyObject *
SwigPyObject_repr2(PyObject *v, PyObject *SWIGUNUSEDPARM(args))
{
  return SwigPyObject_repr((SwigPyObject*)v);
}

SWIGRUNTIME int
SwigPyObject_compare(SwigPyObject *v, SwigPyObject *w)
{
  void *i = v->ptr;
  void *j = w->ptr;
  return (i < j) ? -1 : ((i > j) ? 1 : 0);
}

/* Added for Python 3.x, would it also be useful for Python 2.x? */
SWIGRUNTIME PyObject*
SwigPyObject_richcompare(SwigPyObject *v, SwigPyObject *w, int op)
{
  PyObject* res = NULL;
  if (!PyErr_Occurred()) {
    if (op != Py_EQ && op != Py_NE) {
      Py_INCREF(Py_NotImplemented);
      return Py_NotImplemented;
    }
    res = PyBool_FromLong( (SwigPyObject_compare(v, w)==0) == (op == Py_EQ) ? 1 : 0);
  }
  return res;  
}


SWIGRUNTIME PyTypeObject* SwigPyObject_TypeOnce(void);

#ifdef SWIGPYTHON_BUILTIN
static swig_type_info *SwigPyObject_stype = 0;
SWIGRUNTIME PyTypeObject*
SwigPyObject_type(void) {
    SwigPyClientData *cd;
    assert(SwigPyObject_stype);
    cd = (SwigPyClientData*) SwigPyObject_stype->clientdata;
    assert(cd);
    assert(cd->pytype);
    return cd->pytype;
}
#else
SWIGRUNTIME PyTypeObject*
SwigPyObject_type(void) {
  static PyTypeObject *SWIG_STATIC_POINTER(type) = SwigPyObject_TypeOnce();
  return type;
}
#endif

SWIGRUNTIMEINLINE int
SwigPyObject_Check(PyObject *op) {
  PyTypeObject *target_tp = SwigPyObject_type();
  PyTypeObject *op_type = Py_TYPE(op);
#ifdef SWIGPYTHON_BUILTIN
  if (PyType_IsSubtype(op_type, target_tp))
    return 1;
  return (strcmp(op_type->tp_name, "SwigPyObject") == 0);
#else
  if (op_type == target_tp)
    return 1;
# ifdef Py_LIMITED_API
  int cmp;
  PyObject *tp_name = PyObject_GetAttrString((PyObject *)op_type, "__name__");
  if (!tp_name)
    return 0;
  cmp = PyUnicode_CompareWithASCIIString(tp_name, "SwigPyObject");
  Py_DECREF(tp_name);
  return cmp == 0;
# else
  return (strcmp(op_type->tp_name, "SwigPyObject") == 0);
# endif
#endif
}

SWIGRUNTIME PyObject *
SwigPyObject_New(void *ptr, swig_type_info *ty, int own);

static PyObject* Swig_Capsule_global = NULL;

SWIGRUNTIME void
SwigPyObject_dealloc(PyObject *v)
{
  SwigPyObject *sobj = (SwigPyObject *) v;
  PyObject *next = sobj->next;
  if (sobj->own == SWIG_POINTER_OWN) {
    swig_type_info *ty = sobj->ty;
    SwigPyClientData *data = ty ? (SwigPyClientData *) ty->clientdata : 0;
    PyObject *destroy = data ? data->destroy : 0;
    if (destroy) {
      /* destroy is always a VARARGS method */
      PyObject *res;

      /* PyObject_CallFunction() has the potential to silently drop
         the active exception.  In cases of unnamed temporary
         variable or where we just finished iterating over a generator
         StopIteration will be active right now, and this needs to
         remain true upon return from SwigPyObject_dealloc.  So save
         and restore. */
      
      PyObject *type = NULL, *value = NULL, *traceback = NULL;
      PyErr_Fetch(&type, &value, &traceback);

      if (data->delargs) {
        /* we need to create a temporary object to carry the destroy operation */
        PyObject *tmp = SwigPyObject_New(sobj->ptr, ty, 0);
        if (tmp) {
          res = SWIG_Python_CallFunctor(destroy, tmp);
        } else {
          res = 0;
        }
        Py_XDECREF(tmp);
      } else {
        PyCFunction meth = PyCFunction_GET_FUNCTION(destroy);
        PyObject *mself = PyCFunction_GET_SELF(destroy);
        res = ((*meth)(mself, v));
      }
      if (!res)
        PyErr_WriteUnraisable(destroy);

      PyErr_Restore(type, value, traceback);

      Py_XDECREF(res);
    } 
#if !defined(SWIG_PYTHON_SILENT_MEMLEAK)
    else {
      const char *name = SWIG_TypePrettyName(ty);
      printf("swig/python detected a memory leak of type '%s', no destructor found.\n", (name ? name : "unknown"));
    }
#endif
    Py_XDECREF(Swig_Capsule_global);
  }
  Py_XDECREF(next);
#ifdef SWIGPYTHON_BUILTIN
  Py_XDECREF(sobj->dict);
#endif
  PyObject_DEL(v);
}

SWIGRUNTIME PyObject* 
SwigPyObject_append(PyObject* v, PyObject* next)
{
  SwigPyObject *sobj = (SwigPyObject *) v;
  if (!SwigPyObject_Check(next)) {
    PyErr_SetString(PyExc_TypeError, "Attempt to append a non SwigPyObject");
    return NULL;
  }
  ((SwigPyObject *)next)->next = sobj->next;
  sobj->next = next;
  Py_INCREF(next);
  return SWIG_Py_Void();
}

SWIGRUNTIME PyObject* 
SwigPyObject_next(PyObject* v, PyObject *SWIGUNUSEDPARM(args))
{
  SwigPyObject *sobj = (SwigPyObject *) v;
  if (sobj->next) {    
    Py_INCREF(sobj->next);
    return sobj->next;
  } else {
    return SWIG_Py_Void();
  }
}

SWIGINTERN PyObject*
SwigPyObject_disown(PyObject* v, PyObject *SWIGUNUSEDPARM(args))
{
  SwigPyObject *sobj = (SwigPyObject *)v;
  sobj->own = 0;
  return SWIG_Py_Void();
}

SWIGINTERN PyObject*
SwigPyObject_acquire(PyObject* v, PyObject *SWIGUNUSEDPARM(args))
{
  SwigPyObject *sobj = (SwigPyObject *)v;
  sobj->own = SWIG_POINTER_OWN;
  return SWIG_Py_Void();
}

SWIGINTERN PyObject*
SwigPyObject_own(PyObject *v, PyObject *args)
{
  PyObject *val = 0;
  if (!PyArg_UnpackTuple(args, "own", 0, 1, &val)) {
    return NULL;
  } else {
    SwigPyObject *sobj = (SwigPyObject *)v;
    PyObject *obj = PyBool_FromLong(sobj->own);
    if (val) {
      if (PyObject_IsTrue(val)) {
        Py_DECREF(SwigPyObject_acquire(v,args));
      } else {
        Py_DECREF(SwigPyObject_disown(v,args));
      }
    } 
    return obj;
  }
}

static PyMethodDef
swigobject_methods[] = {
  {"disown",  SwigPyObject_disown,  METH_NOARGS,  "releases ownership of the pointer"},
  {"acquire", SwigPyObject_acquire, METH_NOARGS,  "acquires ownership of the pointer"},
  {"own",     SwigPyObject_own,     METH_VARARGS, "returns/sets ownership of the pointer"},
  {"append",  SwigPyObject_append,  METH_O,       "appends another 'this' object"},
  {"next",    SwigPyObject_next,    METH_NOARGS,  "returns the next 'this' object"},
  {"__repr__",SwigPyObject_repr2,   METH_NOARGS,  "returns object representation"},
  {0, 0, 0, 0}  
};

SWIGRUNTIME PyTypeObject*
SwigPyObject_TypeOnce(void) {
  static char swigobject_doc[] = "Swig object carries a C/C++ instance pointer";
#ifndef Py_LIMITED_API
  static PyNumberMethods SwigPyObject_as_number = {
    (binaryfunc)0, /*nb_add*/
    (binaryfunc)0, /*nb_subtract*/
    (binaryfunc)0, /*nb_multiply*/
    /* nb_divide removed in Python 3 */
#if PY_VERSION_HEX < 0x03000000
    (binaryfunc)0, /*nb_divide*/
#endif
    (binaryfunc)0, /*nb_remainder*/
    (binaryfunc)0, /*nb_divmod*/
    (ternaryfunc)0,/*nb_power*/
    (unaryfunc)0,  /*nb_negative*/
    (unaryfunc)0,  /*nb_positive*/
    (unaryfunc)0,  /*nb_absolute*/
    (inquiry)0,    /*nb_nonzero*/
    0,		   /*nb_invert*/
    0,		   /*nb_lshift*/
    0,		   /*nb_rshift*/
    0,		   /*nb_and*/
    0,		   /*nb_xor*/
    0,		   /*nb_or*/
#if PY_VERSION_HEX < 0x03000000
    0,   /*nb_coerce*/
#endif
    (unaryfunc)SwigPyObject_long, /*nb_int*/
#if PY_VERSION_HEX < 0x03000000
    (unaryfunc)SwigPyObject_long, /*nb_long*/
#else
    0, /*nb_reserved*/
#endif
    (unaryfunc)0,                 /*nb_float*/
#if PY_VERSION_HEX < 0x03000000
    (unaryfunc)SwigPyObject_oct,  /*nb_oct*/
    (unaryfunc)SwigPyObject_hex,  /*nb_hex*/
#endif
#if PY_VERSION_HEX >= 0x03050000 /* 3.5 */
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 /* nb_inplace_add -> nb_inplace_matrix_multiply */
#elif PY_VERSION_HEX >= 0x03000000 /* 3.0 */
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 /* nb_inplace_add -> nb_index, nb_inplace_divide removed */
#else
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 /* nb_inplace_add -> nb_index */
#endif
  };

  static PyTypeObject swigpyobject_type;
  static int type_init = 0;
  if (!type_init) {
    const PyTypeObject tmp = {
#if PY_VERSION_HEX >= 0x03000000
      PyVarObject_HEAD_INIT(NULL, 0)
#else
      PyObject_HEAD_INIT(NULL)
      0,                                    /* ob_size */
#endif
      "SwigPyObject",                       /* tp_name */
      sizeof(SwigPyObject),                 /* tp_basicsize */
      0,                                    /* tp_itemsize */
      (destructor)SwigPyObject_dealloc,     /* tp_dealloc */
#if PY_VERSION_HEX < 0x030800b4
      (printfunc)0,                         /*tp_print*/
#else
      (Py_ssize_t)0,                        /*tp_vectorcall_offset*/
#endif
      (getattrfunc)0,                       /* tp_getattr */
      (setattrfunc)0,                       /* tp_setattr */
#if PY_VERSION_HEX >= 0x03000000
      0, /* tp_reserved in 3.0.1, tp_compare in 3.0.0 but not used */
#else
      (cmpfunc)SwigPyObject_compare,        /* tp_compare */
#endif
      (reprfunc)SwigPyObject_repr,          /* tp_repr */
      &SwigPyObject_as_number,              /* tp_as_number */
      0,                                    /* tp_as_sequence */
      0,                                    /* tp_as_mapping */
      (hashfunc)0,                          /* tp_hash */
      (ternaryfunc)0,                       /* tp_call */
      0,                                    /* tp_str */
      PyObject_GenericGetAttr,              /* tp_getattro */
      0,                                    /* tp_setattro */
      0,                                    /* tp_as_buffer */
      Py_TPFLAGS_DEFAULT,                   /* tp_flags */
      swigobject_doc,                       /* tp_doc */
      0,                                    /* tp_traverse */
      0,                                    /* tp_clear */
      (richcmpfunc)SwigPyObject_richcompare,/* tp_richcompare */
      0,                                    /* tp_weaklistoffset */
      0,                                    /* tp_iter */
      0,                                    /* tp_iternext */
      swigobject_methods,                   /* tp_methods */
      0,                                    /* tp_members */
      0,                                    /* tp_getset */
      0,                                    /* tp_base */
      0,                                    /* tp_dict */
      0,                                    /* tp_descr_get */
      0,                                    /* tp_descr_set */
      0,                                    /* tp_dictoffset */
      0,                                    /* tp_init */
      0,                                    /* tp_alloc */
      0,                                    /* tp_new */
      0,                                    /* tp_free */
      0,                                    /* tp_is_gc */
      0,                                    /* tp_bases */
      0,                                    /* tp_mro */
      0,                                    /* tp_cache */
      0,                                    /* tp_subclasses */
      0,                                    /* tp_weaklist */
      0,                                    /* tp_del */
      0,                                    /* tp_version_tag */
#if PY_VERSION_HEX >= 0x03040000
      0,                                    /* tp_finalize */
#endif
#if PY_VERSION_HEX >= 0x03080000
      0,                                    /* tp_vectorcall */
#endif
#if (PY_VERSION_HEX >= 0x03080000) && (PY_VERSION_HEX < 0x03090000)
      0,                                    /* tp_print */
#endif
#if PY_VERSION_HEX >= 0x030C0000
      0,                                    /* tp_watched */
#endif
#ifdef COUNT_ALLOCS
      0,                                    /* tp_allocs */
      0,                                    /* tp_frees */
      0,                                    /* tp_maxalloc */
      0,                                    /* tp_prev */
      0                                     /* tp_next */
#endif
    };
    swigpyobject_type = tmp;
    type_init = 1;
    if (PyType_Ready(&swigpyobject_type) != 0)
      return NULL;
  }
  return &swigpyobject_type;
#else
  PyType_Slot slots[] = {
    { Py_tp_dealloc, (void *)SwigPyObject_dealloc },
    { Py_tp_repr, (void *)SwigPyObject_repr },
    { Py_tp_getattro, (void *)PyObject_GenericGetAttr },
    { Py_tp_doc, (void *)swigobject_doc },
    { Py_tp_richcompare, (void *)SwigPyObject_richcompare },
    { Py_tp_methods, (void *)swigobject_methods },
    { Py_nb_int, (void *)SwigPyObject_long },
    { 0, NULL }
  };
  PyType_Spec spec = {
    "SwigPyObject",
    sizeof(SwigPyObject),
    0,
    Py_TPFLAGS_DEFAULT,
    slots
  };
  return (PyTypeObject *)PyType_FromSpec(&spec);
#endif
}

SWIGRUNTIME PyObject *
SwigPyObject_New(void *ptr, swig_type_info *ty, int own)
{
  SwigPyObject *sobj = PyObject_New(SwigPyObject, SwigPyObject_type());
  if (sobj) {
    sobj->ptr  = ptr;
    sobj->ty   = ty;
    sobj->own  = own;
    sobj->next = 0;
#ifdef SWIGPYTHON_BUILTIN
    sobj->dict = 0;
#endif
    if (own == SWIG_POINTER_OWN) {
      /* Obtain a reference to the Python capsule wrapping the module information, so that the
       * module information is correctly destroyed after all SWIG python objects have been freed
       * by the GC (and corresponding destructors invoked) */
      Py_XINCREF(Swig_Capsule_global);
    }
  }
  return (PyObject *)sobj;
}

/* -----------------------------------------------------------------------------
 * Implements a simple Swig Packed type, and use it instead of string
 * ----------------------------------------------------------------------------- */

typedef struct {
  PyObject_HEAD
  void *pack;
  swig_type_info *ty;
  size_t size;
} SwigPyPacked;

SWIGRUNTIME PyObject *
SwigPyPacked_repr(SwigPyPacked *v)
{
  char result[SWIG_BUFFER_SIZE];
  if (SWIG_PackDataName(result, v->pack, v->size, 0, sizeof(result))) {
    return SWIG_Python_str_FromFormat("<Swig Packed at %s%s>", result, v->ty->name);
  } else {
    return SWIG_Python_str_FromFormat("<Swig Packed %s>", v->ty->name);
  }  
}

SWIGRUNTIME PyObject *
SwigPyPacked_str(SwigPyPacked *v)
{
  char result[SWIG_BUFFER_SIZE];
  if (SWIG_PackDataName(result, v->pack, v->size, 0, sizeof(result))){
    return SWIG_Python_str_FromFormat("%s%s", result, v->ty->name);
  } else {
    return SWIG_Python_str_FromChar(v->ty->name);
  }  
}

SWIGRUNTIME int
SwigPyPacked_compare(SwigPyPacked *v, SwigPyPacked *w)
{
  size_t i = v->size;
  size_t j = w->size;
  int s = (i < j) ? -1 : ((i > j) ? 1 : 0);
  return s ? s : strncmp((const char *)v->pack, (const char *)w->pack, 2*v->size);
}

SWIGRUNTIME PyTypeObject* SwigPyPacked_TypeOnce(void);

SWIGRUNTIME PyTypeObject*
SwigPyPacked_type(void) {
  static PyTypeObject *SWIG_STATIC_POINTER(type) = SwigPyPacked_TypeOnce();
  return type;
}

SWIGRUNTIMEINLINE int
SwigPyPacked_Check(PyObject *op) {
  PyTypeObject* op_type = Py_TYPE(op);
  if (op_type == SwigPyPacked_TypeOnce())
    return 1;
#ifdef Py_LIMITED_API
  int cmp;
  PyObject *tp_name = PyObject_GetAttrString((PyObject *)op_type, "__name__");
  if (!tp_name)
    return 0;
  cmp = PyUnicode_CompareWithASCIIString(tp_name, "SwigPyPacked");
  Py_DECREF(tp_name);
  return cmp == 0;
#else
  return (strcmp(op_type->tp_name, "SwigPyPacked") == 0);
#endif
}

SWIGRUNTIME void
SwigPyPacked_dealloc(PyObject *v)
{
  if (SwigPyPacked_Check(v)) {
    SwigPyPacked *sobj = (SwigPyPacked *) v;
    free(sobj->pack);
  }
  PyObject_DEL(v);
}

SWIGRUNTIME PyTypeObject*
SwigPyPacked_TypeOnce(void) {
  static char swigpacked_doc[] = "Swig object carries a C/C++ instance pointer";
#ifndef Py_LIMITED_API
  static PyTypeObject swigpypacked_type;
  static int type_init = 0;
  if (!type_init) {
    const PyTypeObject tmp = {
#if PY_VERSION_HEX>=0x03000000
      PyVarObject_HEAD_INIT(NULL, 0)
#else
      PyObject_HEAD_INIT(NULL)
      0,                                    /* ob_size */
#endif
      "SwigPyPacked",                       /* tp_name */
      sizeof(SwigPyPacked),                 /* tp_basicsize */
      0,                                    /* tp_itemsize */
      (destructor)SwigPyPacked_dealloc,     /* tp_dealloc */
#if PY_VERSION_HEX < 0x030800b4
      (printfunc)0,                         /*tp_print*/
#else
      (Py_ssize_t)0,                        /*tp_vectorcall_offset*/
#endif
      (getattrfunc)0,                       /* tp_getattr */
      (setattrfunc)0,                       /* tp_setattr */
#if PY_VERSION_HEX>=0x03000000
      0, /* tp_reserved in 3.0.1 */
#else
      (cmpfunc)SwigPyPacked_compare,        /* tp_compare */
#endif
      (reprfunc)SwigPyPacked_repr,          /* tp_repr */
      0,                                    /* tp_as_number */
      0,                                    /* tp_as_sequence */
      0,                                    /* tp_as_mapping */
      (hashfunc)0,                          /* tp_hash */
      (ternaryfunc)0,                       /* tp_call */
      (reprfunc)SwigPyPacked_str,           /* tp_str */
      PyObject_GenericGetAttr,              /* tp_getattro */
      0,                                    /* tp_setattro */
      0,                                    /* tp_as_buffer */
      Py_TPFLAGS_DEFAULT,                   /* tp_flags */
      swigpacked_doc,                       /* tp_doc */
      0,                                    /* tp_traverse */
      0,                                    /* tp_clear */
      0,                                    /* tp_richcompare */
      0,                                    /* tp_weaklistoffset */
      0,                                    /* tp_iter */
      0,                                    /* tp_iternext */
      0,                                    /* tp_methods */
      0,                                    /* tp_members */
      0,                                    /* tp_getset */
      0,                                    /* tp_base */
      0,                                    /* tp_dict */
      0,                                    /* tp_descr_get */
      0,                                    /* tp_descr_set */
      0,                                    /* tp_dictoffset */
      0,                                    /* tp_init */
      0,                                    /* tp_alloc */
      0,                                    /* tp_new */
      0,                                    /* tp_free */
      0,                                    /* tp_is_gc */
      0,                                    /* tp_bases */
      0,                                    /* tp_mro */
      0,                                    /* tp_cache */
      0,                                    /* tp_subclasses */
      0,                                    /* tp_weaklist */
      0,                                    /* tp_del */
      0,                                    /* tp_version_tag */
#if PY_VERSION_HEX >= 0x03040000
      0,                                    /* tp_finalize */
#endif
#if PY_VERSION_HEX >= 0x03080000
      0,                                    /* tp_vectorcall */
#endif
#if (PY_VERSION_HEX >= 0x03080000) && (PY_VERSION_HEX < 0x03090000)
      0,                                    /* tp_print */
#endif
#if PY_VERSION_HEX >= 0x030C0000
      0,                                    /* tp_watched */
#endif
#ifdef COUNT_ALLOCS
      0,                                    /* tp_allocs */
      0,                                    /* tp_frees */
      0,                                    /* tp_maxalloc */
      0,                                    /* tp_prev */
      0                                     /* tp_next */
#endif
    };
    swigpypacked_type = tmp;
    type_init = 1;
    if (PyType_Ready(&swigpypacked_type) != 0)
      return NULL;
  }
  return &swigpypacked_type;
#else
  PyType_Slot slots[] = {
    { Py_tp_dealloc, (void *)SwigPyPacked_dealloc },
    { Py_tp_repr, (void *)SwigPyPacked_repr },
    { Py_tp_str, (void *)SwigPyPacked_str },
    { Py_tp_getattro, (void *)PyObject_GenericGetAttr },
    { Py_tp_doc, (void *)swigpacked_doc },
    { 0, NULL }
  };
  PyType_Spec spec = {
    "SwigPyPacked",
    sizeof(SwigPyPacked),
    0,
    Py_TPFLAGS_DEFAULT,
    slots
  };
  return (PyTypeObject *)PyType_FromSpec(&spec);
#endif
}

SWIGRUNTIME PyObject *
SwigPyPacked_New(void *ptr, size_t size, swig_type_info *ty)
{
  SwigPyPacked *sobj = PyObject_New(SwigPyPacked, SwigPyPacked_type());
  if (sobj) {
    void *pack = malloc(size);
    if (pack) {
      memcpy(pack, ptr, size);
      sobj->pack = pack;
      sobj->ty   = ty;
      sobj->size = size;
    } else {
      PyObject_DEL((PyObject *) sobj);
      sobj = 0;
    }
  }
  return (PyObject *) sobj;
}

SWIGRUNTIME swig_type_info *
SwigPyPacked_UnpackData(PyObject *obj, void *ptr, size_t size)
{
  if (SwigPyPacked_Check(obj)) {
    SwigPyPacked *sobj = (SwigPyPacked *)obj;
    if (sobj->size != size) return 0;
    memcpy(ptr, sobj->pack, size);
    return sobj->ty;
  } else {
    return 0;
  }
}

/* -----------------------------------------------------------------------------
 * pointers/data manipulation
 * ----------------------------------------------------------------------------- */

static PyObject *Swig_This_global = NULL;

SWIGRUNTIME PyObject *
SWIG_This(void)
{
  if (Swig_This_global == NULL)
    Swig_This_global = SWIG_Python_str_FromChar("this");
  return Swig_This_global;
}

/* #define SWIG_PYTHON_SLOW_GETSET_THIS */

/* TODO: I don't know how to implement the fast getset in Python 3 right now */
#if PY_VERSION_HEX>=0x03000000
#define SWIG_PYTHON_SLOW_GETSET_THIS 
#endif

SWIGRUNTIME SwigPyObject *
SWIG_Python_GetSwigThis(PyObject *pyobj) 
{
  PyObject *obj;

  if (SwigPyObject_Check(pyobj))
    return (SwigPyObject *) pyobj;

#ifdef SWIGPYTHON_BUILTIN
  (void)obj;
# ifdef PyWeakref_CheckProxy
  if (PyWeakref_CheckProxy(pyobj)) {
    pyobj = PyWeakref_GET_OBJECT(pyobj);
    if (pyobj && SwigPyObject_Check(pyobj))
      return (SwigPyObject*) pyobj;
  }
# endif
  return NULL;
#else

  obj = 0;

#if !defined(SWIG_PYTHON_SLOW_GETSET_THIS)
  if (PyInstance_Check(pyobj)) {
    obj = _PyInstance_Lookup(pyobj, SWIG_This());      
  } else {
    PyObject **dictptr = _PyObject_GetDictPtr(pyobj);
    if (dictptr != NULL) {
      PyObject *dict = *dictptr;
      obj = dict ? PyDict_GetItem(dict, SWIG_This()) : 0;
    } else {
#ifdef PyWeakref_CheckProxy
      if (PyWeakref_CheckProxy(pyobj)) {
	PyObject *wobj = PyWeakref_GET_OBJECT(pyobj);
	return wobj ? SWIG_Python_GetSwigThis(wobj) : 0;
      }
#endif
      obj = PyObject_GetAttr(pyobj,SWIG_This());
      if (obj) {
	Py_DECREF(obj);
      } else {
	if (PyErr_Occurred()) PyErr_Clear();
	return 0;
      }
    }
  }
#else
  obj = PyObject_GetAttr(pyobj,SWIG_This());
  if (obj) {
    Py_DECREF(obj);
  } else {
    if (PyErr_Occurred()) PyErr_Clear();
    return 0;
  }
#endif
  if (obj && !SwigPyObject_Check(obj)) {
    /* a PyObject is called 'this', try to get the 'real this'
       SwigPyObject from it */ 
    return SWIG_Python_GetSwigThis(obj);
  }
  return (SwigPyObject *)obj;
#endif
}

/* Acquire a pointer value */

SWIGRUNTIME int
SWIG_Python_AcquirePtr(PyObject *obj, int own) {
  if (own == SWIG_POINTER_OWN) {
    SwigPyObject *sobj = SWIG_Python_GetSwigThis(obj);
    if (sobj) {
      int oldown = sobj->own;
      sobj->own = own;
      return oldown;
    }
  }
  return 0;
}

/* Convert a pointer value */

SWIGRUNTIME int
SWIG_Python_ConvertPtrAndOwn(PyObject *obj, void **ptr, swig_type_info *ty, int flags, int *own) {
  int res;
  SwigPyObject *sobj;
  int implicit_conv = (flags & SWIG_POINTER_IMPLICIT_CONV) != 0;

  if (!obj)
    return SWIG_ERROR;
  if (obj == Py_None && !implicit_conv) {
    if (ptr)
      *ptr = 0;
    return (flags & SWIG_POINTER_NO_NULL) ? SWIG_NullReferenceError : SWIG_OK;
  }

  res = SWIG_ERROR;

  sobj = SWIG_Python_GetSwigThis(obj);
  if (own)
    *own = 0;
  while (sobj) {
    void *vptr = sobj->ptr;
    if (ty) {
      swig_type_info *to = sobj->ty;
      if (to == ty) {
        /* no type cast needed */
        if (ptr) *ptr = vptr;
        break;
      } else {
        swig_cast_info *tc = SWIG_TypeCheck(to->name,ty);
        if (!tc) {
          sobj = (SwigPyObject *)sobj->next;
        } else {
          if (ptr) {
            int newmemory = 0;
            *ptr = SWIG_TypeCast(tc,vptr,&newmemory);
            if (newmemory == SWIG_CAST_NEW_MEMORY) {
              assert(own); /* badly formed typemap which will lead to a memory leak - it must set and use own to delete *ptr */
              if (own)
                *own = *own | SWIG_CAST_NEW_MEMORY;
            }
          }
          break;
        }
      }
    } else {
      if (ptr) *ptr = vptr;
      break;
    }
  }
  if (sobj) {
    if (((flags & SWIG_POINTER_RELEASE) == SWIG_POINTER_RELEASE) && !sobj->own) {
      res = SWIG_ERROR_RELEASE_NOT_OWNED;
    } else {
      if (own)
        *own = *own | sobj->own;
      if (flags & SWIG_POINTER_DISOWN) {
        sobj->own = 0;
      }
      if (flags & SWIG_POINTER_CLEAR) {
        sobj->ptr = 0;
      }
      res = SWIG_OK;
    }
  } else {
    if (implicit_conv) {
      SwigPyClientData *data = ty ? (SwigPyClientData *) ty->clientdata : 0;
      if (data && !data->implicitconv) {
        PyObject *klass = data->klass;
        if (klass) {
          PyObject *impconv;
          data->implicitconv = 1; /* avoid recursion and call 'explicit' constructors*/
          impconv = SWIG_Python_CallFunctor(klass, obj);
          data->implicitconv = 0;
          if (PyErr_Occurred()) {
            PyErr_Clear();
            impconv = 0;
          }
          if (impconv) {
            SwigPyObject *iobj = SWIG_Python_GetSwigThis(impconv);
            if (iobj) {
              void *vptr;
              res = SWIG_Python_ConvertPtrAndOwn((PyObject*)iobj, &vptr, ty, 0, 0);
              if (SWIG_IsOK(res)) {
                if (ptr) {
                  *ptr = vptr;
                  /* transfer the ownership to 'ptr' */
                  iobj->own = 0;
                  res = SWIG_AddCast(res);
                  res = SWIG_AddNewMask(res);
                } else {
                  res = SWIG_AddCast(res);		    
                }
              }
            }
            Py_DECREF(impconv);
          }
        }
      }
      if (!SWIG_IsOK(res) && obj == Py_None) {
        if (ptr)
          *ptr = 0;
        if (PyErr_Occurred())
          PyErr_Clear();
        res = SWIG_OK;
      }
    }
  }
  return res;
}

/* Convert a function ptr value */

SWIGRUNTIME int
SWIG_Python_ConvertFunctionPtr(PyObject *obj, void **ptr, swig_type_info *ty) {
  if (!PyCFunction_Check(obj)) {
    return SWIG_ConvertPtr(obj, ptr, ty, 0);
  } else {
    void *vptr = 0;
    swig_cast_info *tc;

    /* here we get the method pointer for callbacks */
#ifndef Py_LIMITED_API
    const char *doc = (((PyCFunctionObject *)obj) -> m_ml -> ml_doc);
#else
    PyObject* pystr_doc = PyObject_GetAttrString(obj, "__doc__");
    PyObject *bytes = NULL;
    const char *doc = pystr_doc ? SWIG_PyUnicode_AsUTF8AndSize(pystr_doc, NULL, &bytes) : 0;
#endif
    const char *desc = doc ? strstr(doc, "swig_ptr: ") : 0;
    if (desc)
      desc = ty ? SWIG_UnpackVoidPtr(desc + 10, &vptr, ty->name) : 0;
#ifdef Py_LIMITED_API
    Py_XDECREF(bytes);
    Py_XDECREF(pystr_doc);
#endif
    if (!desc)
      return SWIG_ERROR;
    tc = SWIG_TypeCheck(desc,ty);
    if (tc) {
      int newmemory = 0;
      *ptr = SWIG_TypeCast(tc,vptr,&newmemory);
      assert(!newmemory); /* newmemory handling not yet implemented */
    } else {
      return SWIG_ERROR;
    }
    return SWIG_OK;
  }
}

/* Convert a packed pointer value */

SWIGRUNTIME int
SWIG_Python_ConvertPacked(PyObject *obj, void *ptr, size_t sz, swig_type_info *ty) {
  swig_type_info *to = SwigPyPacked_UnpackData(obj, ptr, sz);
  if (!to) return SWIG_ERROR;
  if (ty) {
    if (to != ty) {
      /* check type cast? */
      swig_cast_info *tc = SWIG_TypeCheck(to->name,ty);
      if (!tc) return SWIG_ERROR;
    }
  }
  return SWIG_OK;
}  

/* -----------------------------------------------------------------------------
 * Create a new pointer object
 * ----------------------------------------------------------------------------- */

/*
  Create a new instance object, without calling __init__, and set the
  'this' attribute.
*/

SWIGRUNTIME PyObject* 
SWIG_Python_NewShadowInstance(SwigPyClientData *data, PyObject *swig_this)
{
  PyObject *inst = 0;
  PyObject *newraw = data->newraw;
  if (newraw) {
    inst = PyObject_Call(newraw, data->newargs, NULL);
    if (inst) {
#if !defined(SWIG_PYTHON_SLOW_GETSET_THIS)
      PyObject **dictptr = _PyObject_GetDictPtr(inst);
      if (dictptr != NULL) {
        PyObject *dict = *dictptr;
        if (dict == NULL) {
          dict = PyDict_New();
          *dictptr = dict;
        }
        if (dict) {
          PyDict_SetItem(dict, SWIG_This(), swig_this);
        } else{
          Py_DECREF(inst);
          inst = 0;
        }
      }
#else
      if (PyObject_SetAttr(inst, SWIG_This(), swig_this) == -1) {
        Py_DECREF(inst);
        inst = 0;
      }
#endif
    }
  } else {
#if PY_VERSION_HEX >= 0x03000000
    PyObject *empty_args = PyTuple_New(0);
    if (empty_args) {
      PyObject *empty_kwargs = PyDict_New();
      if (empty_kwargs) {
#ifndef Py_LIMITED_API
        newfunc newfn = ((PyTypeObject *)data->newargs)->tp_new;
#else
        newfunc newfn = (newfunc)PyType_GetSlot((PyTypeObject *)data->newargs, Py_tp_new);
#endif
        inst = newfn((PyTypeObject *)data->newargs, empty_args, empty_kwargs);
        Py_DECREF(empty_kwargs);
        if (inst) {
          if (PyObject_SetAttr(inst, SWIG_This(), swig_this) == -1) {
            Py_DECREF(inst);
            inst = 0;
          } else {
            PyType_Modified(Py_TYPE(inst));
          }
        }
      }
      Py_DECREF(empty_args);
    }
#else
    PyObject *dict = PyDict_New();
    if (dict) {
      PyDict_SetItem(dict, SWIG_This(), swig_this);
      inst = PyInstance_NewRaw(data->newargs, dict);
      Py_DECREF(dict);
    }
#endif
  }
  return inst;
}

SWIGRUNTIME int
SWIG_Python_SetSwigThis(PyObject *inst, PyObject *swig_this)
{
#if !defined(SWIG_PYTHON_SLOW_GETSET_THIS)
  PyObject **dictptr = _PyObject_GetDictPtr(inst);
  if (dictptr != NULL) {
    PyObject *dict = *dictptr;
    if (dict == NULL) {
      dict = PyDict_New();
      *dictptr = dict;
    }
    if (dict) {
      return PyDict_SetItem(dict, SWIG_This(), swig_this);
    } else{
      return -1;
    }
  }
#endif
  return PyObject_SetAttr(inst, SWIG_This(), swig_this);
} 


SWIGINTERN PyObject *
SWIG_Python_InitShadowInstance(PyObject *args) {
  PyObject *obj[2];
  if (!SWIG_Python_UnpackTuple(args, "swiginit", 2, 2, obj)) {
    return NULL;
  } else {
    SwigPyObject *sthis = SWIG_Python_GetSwigThis(obj[0]);
    if (sthis) {
      Py_DECREF(SwigPyObject_append((PyObject*) sthis, obj[1]));
    } else {
      if (SWIG_Python_SetSwigThis(obj[0], obj[1]) != 0)
        return NULL;
    }
    return SWIG_Py_Void();
  }
}

/* Create a new pointer object */

SWIGRUNTIME PyObject *
SWIG_Python_NewPointerObj(PyObject *self, void *ptr, swig_type_info *type, int flags) {
  SwigPyClientData *clientdata;
  PyObject * robj;
  int own;

  if (!ptr)
    return SWIG_Py_Void();

  clientdata = type ? (SwigPyClientData *)(type->clientdata) : 0;
  own = (flags & SWIG_POINTER_OWN) ? SWIG_POINTER_OWN : 0;
  if (clientdata && clientdata->pytype) {
    SwigPyObject *newobj;
    if (flags & SWIG_BUILTIN_TP_INIT) {
      newobj = (SwigPyObject*) self;
      if (newobj->ptr) {
#ifndef Py_LIMITED_API
        allocfunc alloc = clientdata->pytype->tp_alloc;
#else
        allocfunc alloc = (allocfunc)PyType_GetSlot(clientdata->pytype, Py_tp_alloc);
#endif
        PyObject *next_self = alloc(clientdata->pytype, 0);
        while (newobj->next)
	  newobj = (SwigPyObject *) newobj->next;
        newobj->next = next_self;
        newobj = (SwigPyObject *)next_self;
#ifdef SWIGPYTHON_BUILTIN
        newobj->dict = 0;
#endif
      }
    } else {
      newobj = PyObject_New(SwigPyObject, clientdata->pytype);
#ifdef SWIGPYTHON_BUILTIN
      if (newobj) {
        newobj->dict = 0;
      }
#endif
    }
    if (newobj) {
      newobj->ptr = ptr;
      newobj->ty = type;
      newobj->own = own;
      newobj->next = 0;
      return (PyObject*) newobj;
    }
    return SWIG_Py_Void();
  }

  assert(!(flags & SWIG_BUILTIN_TP_INIT));

  robj = SwigPyObject_New(ptr, type, own);
  if (robj && clientdata && !(flags & SWIG_POINTER_NOSHADOW)) {
    PyObject *inst = SWIG_Python_NewShadowInstance(clientdata, robj);
    Py_DECREF(robj);
    robj = inst;
  }
  return robj;
}

/* Create a new packed object */

SWIGRUNTIMEINLINE PyObject *
SWIG_Python_NewPackedObj(void *ptr, size_t sz, swig_type_info *type) {
  return ptr ? SwigPyPacked_New((void *) ptr, sz, type) : SWIG_Py_Void();
}

/* -----------------------------------------------------------------------------*
 *  Get type list 
 * -----------------------------------------------------------------------------*/

#ifdef SWIG_LINK_RUNTIME
void *SWIG_ReturnGlobalTypeList(void *);
#endif

static PyObject *Swig_TypeCache_global = NULL;

/* The python cached type query */
SWIGRUNTIME PyObject *
SWIG_Python_TypeCache(void) {
  if (Swig_TypeCache_global == NULL) {
    Swig_TypeCache_global = PyDict_New();
  }
  return Swig_TypeCache_global;
}

SWIGRUNTIME swig_module_info *
SWIG_Python_GetModule(void *SWIGUNUSEDPARM(clientdata)) {
#ifdef SWIG_LINK_RUNTIME
  static void *type_pointer = (void *)0;
  /* first check if module already created */
  if (!type_pointer) {
    type_pointer = SWIG_ReturnGlobalTypeList((void *)0);
  }
#else
  void *type_pointer = PyCapsule_Import(SWIGPY_CAPSULE_NAME, 0);
  if (PyErr_Occurred()) {
    PyErr_Clear();
    type_pointer = (void *)0;
  }
#endif
  return (swig_module_info *) type_pointer;
}


static int interpreter_counter = 0; /* how many (sub-)interpreters are using swig_module's types */

SWIGRUNTIME void
SWIG_Python_DestroyModule(PyObject *obj)
{
  swig_module_info *swig_module = (swig_module_info *) PyCapsule_GetPointer(obj, SWIGPY_CAPSULE_NAME);
  swig_type_info **types = swig_module->types;
  size_t i;
  if (--interpreter_counter != 0) /* another sub-interpreter may still be using the swig_module's types */
    return;
  for (i =0; i < swig_module->size; ++i) {
    swig_type_info *ty = types[i];
    if (ty->owndata) {
      SwigPyClientData *data = (SwigPyClientData *) ty->clientdata;
      ty->clientdata = 0;
      if (data) SwigPyClientData_Del(data);
    }
  }
  Py_DECREF(SWIG_This());
  Swig_This_global = NULL;
  Py_DECREF(SWIG_globals());
  Swig_Globals_global = NULL;
  Py_DECREF(SWIG_Python_TypeCache());
  Swig_TypeCache_global = NULL;
  Swig_Capsule_global = NULL;
}

SWIGRUNTIME void
SWIG_Python_SetModule(swig_module_info *swig_module) {
#if PY_VERSION_HEX >= 0x03000000
 /* Add a dummy module object into sys.modules */
  PyObject *module = PyImport_AddModule("swig_runtime_data" SWIG_RUNTIME_VERSION);
#else
  static PyMethodDef swig_empty_runtime_method_table[] = { {NULL, NULL, 0, NULL} }; /* Sentinel */
  PyObject *module = Py_InitModule("swig_runtime_data" SWIG_RUNTIME_VERSION, swig_empty_runtime_method_table);
#endif
  PyObject *pointer = PyCapsule_New((void *) swig_module, SWIGPY_CAPSULE_NAME, SWIG_Python_DestroyModule);
  if (pointer && module) {
    if (PyModule_AddObject(module, SWIGPY_CAPSULE_ATTR_NAME, pointer) == 0) {
      ++interpreter_counter;
      Swig_Capsule_global = pointer;
    } else {
      Py_DECREF(pointer);
    }
  } else {
    Py_XDECREF(pointer);
  }
}

SWIGRUNTIME swig_type_info *
SWIG_Python_TypeQuery(const char *type)
{
  PyObject *cache = SWIG_Python_TypeCache();
  PyObject *key = SWIG_Python_str_FromChar(type); 
  PyObject *obj = PyDict_GetItem(cache, key);
  swig_type_info *descriptor;
  if (obj) {
    descriptor = (swig_type_info *) PyCapsule_GetPointer(obj, NULL);
  } else {
    swig_module_info *swig_module = SWIG_GetModule(0);
    descriptor = SWIG_TypeQueryModule(swig_module, swig_module, type);
    if (descriptor) {
      obj = PyCapsule_New((void*) descriptor, NULL, NULL);
      if (obj) {
        PyDict_SetItem(cache, key, obj);
        Py_DECREF(obj);
      }
    }
  }
  Py_DECREF(key);
  return descriptor;
}

/* 
   For backward compatibility only
*/
#define SWIG_POINTER_EXCEPTION  0
#define SWIG_arg_fail(arg)      SWIG_Python_ArgFail(arg)
#define SWIG_MustGetPtr(p, type, argnum, flags)  SWIG_Python_MustGetPtr(p, type, argnum, flags)

SWIGRUNTIME int
SWIG_Python_AddErrMesg(const char* mesg, int infront)
{  
  if (PyErr_Occurred()) {
    PyObject *type = 0;
    PyObject *value = 0;
    PyObject *traceback = 0;
    PyErr_Fetch(&type, &value, &traceback);
    if (value) {
      PyObject *old_str = PyObject_Str(value);
      PyObject *bytes = NULL;
      const char *tmp = SWIG_PyUnicode_AsUTF8AndSize(old_str, NULL, &bytes);
      const char *errmesg = tmp ? tmp : "Invalid error message";
      Py_XINCREF(type);
      PyErr_Clear();
      if (infront) {
	PyErr_Format(type, "%s %s", mesg, errmesg);
      } else {
	PyErr_Format(type, "%s %s", errmesg, mesg);
      }
      Py_XDECREF(bytes);
      Py_DECREF(old_str);
    }
    return 1;
  } else {
    return 0;
  }
}
  
SWIGRUNTIME int
SWIG_Python_ArgFail(int argnum)
{
  if (PyErr_Occurred()) {
    /* add information about failing argument */
    char mesg[256];
    PyOS_snprintf(mesg, sizeof(mesg), "argument number %d:", argnum);
    return SWIG_Python_AddErrMesg(mesg, 1);
  } else {
    return 0;
  }
}

SWIGRUNTIMEINLINE const char *
SwigPyObject_GetDesc(PyObject *self)
{
  SwigPyObject *v = (SwigPyObject *)self;
  swig_type_info *ty = v ? v->ty : 0;
  return ty ? ty->str : "";
}

SWIGRUNTIME void
SWIG_Python_TypeError(const char *type, PyObject *obj)
{
  if (type) {
#if defined(SWIG_COBJECT_TYPES)
    if (obj && SwigPyObject_Check(obj)) {
      const char *otype = (const char *) SwigPyObject_GetDesc(obj);
      if (otype) {
	PyErr_Format(PyExc_TypeError, "a '%s' is expected, 'SwigPyObject(%s)' is received",
		     type, otype);
	return;
      }
    } else 
#endif      
    {
#ifndef Py_LIMITED_API
      /* tp_name is not accessible */
      const char *otype = (obj ? obj->ob_type->tp_name : 0); 
      if (otype) {
	PyObject *str = PyObject_Str(obj);
	PyObject *bytes = NULL;
	const char *cstr = str ? SWIG_PyUnicode_AsUTF8AndSize(str, NULL, &bytes) : 0;
	if (cstr) {
	  PyErr_Format(PyExc_TypeError, "a '%s' is expected, '%s(%s)' is received",
		       type, otype, cstr);
	} else {
	  PyErr_Format(PyExc_TypeError, "a '%s' is expected, '%s' is received",
		       type, otype);
	}
	Py_XDECREF(bytes);
	Py_XDECREF(str);
	return;
      }
#endif
    }   
    PyErr_Format(PyExc_TypeError, "a '%s' is expected", type);
  } else {
    PyErr_Format(PyExc_TypeError, "unexpected type is received");
  }
}


/* Convert a pointer value, signal an exception on a type mismatch */
SWIGRUNTIME void *
SWIG_Python_MustGetPtr(PyObject *obj, swig_type_info *ty, int SWIGUNUSEDPARM(argnum), int flags) {
  void *result;
  if (SWIG_Python_ConvertPtr(obj, &result, ty, flags) == -1) {
    PyErr_Clear();
  }
  return result;
}

#ifdef SWIGPYTHON_BUILTIN
SWIGRUNTIME int
SWIG_Python_NonDynamicSetAttr(PyObject *obj, PyObject *name, PyObject *value) {
  PyTypeObject *tp = obj->ob_type;
  PyObject *descr;
  PyObject *encoded_name;
  descrsetfunc f;
  int res = -1;

# ifdef Py_USING_UNICODE
  if (PyString_Check(name)) {
    name = PyUnicode_Decode(PyString_AsString(name), PyString_Size(name), NULL, NULL);
    if (!name)
      return -1;
  } else if (!PyUnicode_Check(name))
# else
  if (!PyString_Check(name))
# endif
  {
    PyErr_Format(PyExc_TypeError, "attribute name must be string, not '%.200s'", name->ob_type->tp_name);
    return -1;
  } else {
    Py_INCREF(name);
  }

  if (!tp->tp_dict) {
    if (PyType_Ready(tp) != 0)
      goto done;
  }

  descr = _PyType_Lookup(tp, name);
  f = NULL;
  if (descr != NULL)
    f = descr->ob_type->tp_descr_set;
  if (!f) {
    if (PyString_Check(name)) {
      encoded_name = name;
      Py_INCREF(name);
    } else {
      encoded_name = PyUnicode_AsUTF8String(name);
      if (!encoded_name)
        goto done;
    }
    PyErr_Format(PyExc_AttributeError, "'%.100s' object has no attribute '%.200s'", tp->tp_name, PyString_AsString(encoded_name));
    Py_DECREF(encoded_name);
  } else {
    res = f(descr, obj, value);
  }
  
  done:
  Py_DECREF(name);
  return res;
}
#endif


#ifdef __cplusplus
}
#endif



#define SWIG_exception_fail(code, msg) do { SWIG_Error(code, msg); SWIG_fail; } while(0) 

#define SWIG_contract_assert(expr, msg) do { if (!(expr)) { SWIG_Error(SWIG_RuntimeError, msg); SWIG_fail; } } while (0) 



  #define SWIG_exception(code, msg) do { SWIG_Error(code, msg); SWIG_fail;; } while(0) 


/* -------- TYPES TABLE (BEGIN) -------- */

#define SWIGTYPE_p_FunctionScalar swig_types[0]
#define SWIGTYPE_p_a_2__double swig_types[1]
#define SWIGTYPE_p_allocator_type swig_types[2]
#define SWIGTYPE_p_basis__Cartesian swig_types[3]
#define SWIGTYPE_p_basis__Cylindrical swig_types[4]
#define SWIGTYPE_p_basis__IBasis swig_types[5]
#define SWIGTYPE_p_char swig_types[6]
#define SWIGTYPE_p_difference_type swig_types[7]
#define SWIGTYPE_p_dive__DirichletMeshIndex swig_types[8]
#define SWIGTYPE_p_dive__DofMeshIndex swig_types[9]
#define SWIGTYPE_p_dive__NodeMeshIndex swig_types[10]
#define SWIGTYPE_p_dive__elements__ElementHexa swig_types[11]
#define SWIGTYPE_p_dive__elements__ElementHexa__LinearFunctions swig_types[12]
#define SWIGTYPE_p_dive__elements__ElementHexa__QuadraticFunctions swig_types[13]
#define SWIGTYPE_p_dive__elements__IElement swig_types[14]
#define SWIGTYPE_p_dive__elements__IntegralAreaHelper swig_types[15]
#define SWIGTYPE_p_dive__elements__IntegralEdgeHelper swig_types[16]
#define SWIGTYPE_p_dive__loads__Dirichlet swig_types[17]
#define SWIGTYPE_p_dive__loads__IDirichlet swig_types[18]
#define SWIGTYPE_p_dive__loads__ILoad swig_types[19]
#define SWIGTYPE_p_dive__loads__LoadDistributedFace swig_types[20]
#define SWIGTYPE_p_dive__loads__LoadDistributedVolume swig_types[21]
#define SWIGTYPE_p_dive__meshes__IMesh swig_types[22]
#define SWIGTYPE_p_dive__meshes__Mesh swig_types[23]
#define SWIGTYPE_p_dive__problems__IFluid swig_types[24]
#define SWIGTYPE_p_dive__problems__IPressure swig_types[25]
#define SWIGTYPE_p_dive__problems__IProblem swig_types[26]
#define SWIGTYPE_p_dive__problems__IThermal swig_types[27]
#define SWIGTYPE_p_dive__problems__ProblemFluid swig_types[28]
#define SWIGTYPE_p_dive__problems__ProblemPressure swig_types[29]
#define SWIGTYPE_p_dive__problems__ProblemThermal swig_types[30]
#define SWIGTYPE_p_dive__selection__ElementCmp swig_types[31]
#define SWIGTYPE_p_dive__selection__Face swig_types[32]
#define SWIGTYPE_p_dive__selection__FaceCmp swig_types[33]
#define SWIGTYPE_p_dive__selection__NodeCmp swig_types[34]
#define SWIGTYPE_p_dive__selection__SpecElementsByTag swig_types[35]
#define SWIGTYPE_p_dive__selection__SpecElementsByType swig_types[36]
#define SWIGTYPE_p_dive__selection__SpecNodesByCoordinate swig_types[37]
#define SWIGTYPE_p_dive__selection__SpecNodesByRange swig_types[38]
#define SWIGTYPE_p_dive__selection__SpecNodesByTag swig_types[39]
#define SWIGTYPE_p_dive__selection__SpecificationT_std__shared_ptrT_dive__elements__IElement_t_t swig_types[40]
#define SWIGTYPE_p_dive__selection__SpecificationT_std__shared_ptrT_nodes__INode_t_t swig_types[41]
#define SWIGTYPE_p_dive__selection__TypeCmp swig_types[42]
#define SWIGTYPE_p_dive__timers__ITimer swig_types[43]
#define SWIGTYPE_p_dive__timers__TimerStationary swig_types[44]
#define SWIGTYPE_p_dive__timers__TimerStepped swig_types[45]
#define SWIGTYPE_p_double swig_types[46]
#define SWIGTYPE_p_eilig__Ellpack swig_types[47]
#define SWIGTYPE_p_eilig__Matrix swig_types[48]
#define SWIGTYPE_p_eilig__Vector swig_types[49]
#define SWIGTYPE_p_f_double__double swig_types[50]
#define SWIGTYPE_p_f_double_double__double swig_types[51]
#define SWIGTYPE_p_f_double_double_double__double swig_types[52]
#define SWIGTYPE_p_f_long_long___size_t_double__long_long swig_types[53]
#define SWIGTYPE_p_interpolation__IInterpolation swig_types[54]
#define SWIGTYPE_p_interpolation__InterpolationFixed swig_types[55]
#define SWIGTYPE_p_interpolation__InterpolationIDW swig_types[56]
#define SWIGTYPE_p_interpolation__InterpolationNN swig_types[57]
#define SWIGTYPE_p_interpolation__InterpolationRBF swig_types[58]
#define SWIGTYPE_p_kdtree__TreePtr swig_types[59]
#define SWIGTYPE_p_long_long swig_types[60]
#define SWIGTYPE_p_material__IBase swig_types[61]
#define SWIGTYPE_p_material__IMaterial swig_types[62]
#define SWIGTYPE_p_material__IMaterialFluid swig_types[63]
#define SWIGTYPE_p_material__IMaterialSolid swig_types[64]
#define SWIGTYPE_p_material__MaterialFluid swig_types[65]
#define SWIGTYPE_p_material__MaterialSolid swig_types[66]
#define SWIGTYPE_p_nodes__INode swig_types[67]
#define SWIGTYPE_p_nodes__Node swig_types[68]
#define SWIGTYPE_p_p_PyObject swig_types[69]
#define SWIGTYPE_p_quadrature__GaussHexa swig_types[70]
#define SWIGTYPE_p_quadrature__GaussLine swig_types[71]
#define SWIGTYPE_p_quadrature__GaussRect swig_types[72]
#define SWIGTYPE_p_quadrature__IGauss swig_types[73]
#define SWIGTYPE_p_size_t swig_types[74]
#define SWIGTYPE_p_size_type swig_types[75]
#define SWIGTYPE_p_std__allocatorT_dive__DirichletMeshIndex_t swig_types[76]
#define SWIGTYPE_p_std__allocatorT_dive__DofMeshIndex_t swig_types[77]
#define SWIGTYPE_p_std__allocatorT_dive__NodeMeshIndex_t swig_types[78]
#define SWIGTYPE_p_std__allocatorT_double_t swig_types[79]
#define SWIGTYPE_p_std__allocatorT_std__shared_ptrT_basis__IBasis_t_t swig_types[80]
#define SWIGTYPE_p_std__allocatorT_std__shared_ptrT_dive__elements__IElement_t_t swig_types[81]
#define SWIGTYPE_p_std__allocatorT_std__shared_ptrT_dive__loads__IDirichlet_t_t swig_types[82]
#define SWIGTYPE_p_std__allocatorT_std__shared_ptrT_dive__loads__ILoad_t_t swig_types[83]
#define SWIGTYPE_p_std__allocatorT_std__shared_ptrT_dive__meshes__IMesh_t_t swig_types[84]
#define SWIGTYPE_p_std__allocatorT_std__shared_ptrT_nodes__INode_t_t swig_types[85]
#define SWIGTYPE_p_std__allocatorT_std__size_t_t swig_types[86]
#define SWIGTYPE_p_std__allocatorT_std__vectorT_dive__NodeMeshIndex_t_t swig_types[87]
#define SWIGTYPE_p_std__allocatorT_std__vectorT_double_t_t swig_types[88]
#define SWIGTYPE_p_std__invalid_argument swig_types[89]
#define SWIGTYPE_p_std__mapT_long_long_std__string_t swig_types[90]
#define SWIGTYPE_p_std__setT_dive__selection__Face_dive__selection__FaceCmp_std__allocatorT_dive__selection__Face_t_t swig_types[91]
#define SWIGTYPE_p_std__setT_std__shared_ptrT_dive__elements__IElement_t_dive__selection__ElementCmp_std__allocatorT_std__shared_ptrT_dive__elements__IElement_t_t_t swig_types[92]
#define SWIGTYPE_p_std__setT_std__shared_ptrT_nodes__INode_t_dive__selection__NodeCmp_std__allocatorT_std__shared_ptrT_nodes__INode_t_t_t swig_types[93]
#define SWIGTYPE_p_std__setT_std__size_t_dive__selection__TypeCmp_std__allocatorT_std__size_t_t_t swig_types[94]
#define SWIGTYPE_p_std__shared_ptrT_basis__Cartesian_const_t swig_types[95]
#define SWIGTYPE_p_std__shared_ptrT_basis__Cartesian_t swig_types[96]
#define SWIGTYPE_p_std__shared_ptrT_basis__Cylindrical_const_t swig_types[97]
#define SWIGTYPE_p_std__shared_ptrT_basis__Cylindrical_t swig_types[98]
#define SWIGTYPE_p_std__shared_ptrT_basis__IBasis_const_t swig_types[99]
#define SWIGTYPE_p_std__shared_ptrT_basis__IBasis_t swig_types[100]
#define SWIGTYPE_p_std__shared_ptrT_dive__elements__ElementHexa_const_t swig_types[101]
#define SWIGTYPE_p_std__shared_ptrT_dive__elements__ElementHexa_t swig_types[102]
#define SWIGTYPE_p_std__shared_ptrT_dive__elements__IElement_const_t swig_types[103]
#define SWIGTYPE_p_std__shared_ptrT_dive__elements__IElement_t swig_types[104]
#define SWIGTYPE_p_std__shared_ptrT_dive__loads__Dirichlet_const_t swig_types[105]
#define SWIGTYPE_p_std__shared_ptrT_dive__loads__Dirichlet_t swig_types[106]
#define SWIGTYPE_p_std__shared_ptrT_dive__loads__IDirichlet_const_t swig_types[107]
#define SWIGTYPE_p_std__shared_ptrT_dive__loads__IDirichlet_t swig_types[108]
#define SWIGTYPE_p_std__shared_ptrT_dive__loads__ILoad_const_t swig_types[109]
#define SWIGTYPE_p_std__shared_ptrT_dive__loads__ILoad_t swig_types[110]
#define SWIGTYPE_p_std__shared_ptrT_dive__loads__LoadDistributedFace_const_t swig_types[111]
#define SWIGTYPE_p_std__shared_ptrT_dive__loads__LoadDistributedFace_t swig_types[112]
#define SWIGTYPE_p_std__shared_ptrT_dive__loads__LoadDistributedVolume_const_t swig_types[113]
#define SWIGTYPE_p_std__shared_ptrT_dive__loads__LoadDistributedVolume_t swig_types[114]
#define SWIGTYPE_p_std__shared_ptrT_dive__meshes__IMesh_const_t swig_types[115]
#define SWIGTYPE_p_std__shared_ptrT_dive__meshes__IMesh_t swig_types[116]
#define SWIGTYPE_p_std__shared_ptrT_dive__meshes__Mesh_const_t swig_types[117]
#define SWIGTYPE_p_std__shared_ptrT_dive__meshes__Mesh_t swig_types[118]
#define SWIGTYPE_p_std__shared_ptrT_dive__problems__IFluid_t swig_types[119]
#define SWIGTYPE_p_std__shared_ptrT_dive__problems__IPressure_t swig_types[120]
#define SWIGTYPE_p_std__shared_ptrT_dive__problems__IProblem_const_t swig_types[121]
#define SWIGTYPE_p_std__shared_ptrT_dive__problems__IProblem_t swig_types[122]
#define SWIGTYPE_p_std__shared_ptrT_dive__problems__IThermal_t swig_types[123]
#define SWIGTYPE_p_std__shared_ptrT_dive__problems__ProblemFluid_const_t swig_types[124]
#define SWIGTYPE_p_std__shared_ptrT_dive__problems__ProblemFluid_t swig_types[125]
#define SWIGTYPE_p_std__shared_ptrT_dive__problems__ProblemPressure_const_t swig_types[126]
#define SWIGTYPE_p_std__shared_ptrT_dive__problems__ProblemPressure_t swig_types[127]
#define SWIGTYPE_p_std__shared_ptrT_dive__problems__ProblemThermal_const_t swig_types[128]
#define SWIGTYPE_p_std__shared_ptrT_dive__problems__ProblemThermal_t swig_types[129]
#define SWIGTYPE_p_std__shared_ptrT_dive__timers__ITimer_const_t swig_types[130]
#define SWIGTYPE_p_std__shared_ptrT_dive__timers__ITimer_t swig_types[131]
#define SWIGTYPE_p_std__shared_ptrT_dive__timers__TimerStationary_const_t swig_types[132]
#define SWIGTYPE_p_std__shared_ptrT_dive__timers__TimerStationary_t swig_types[133]
#define SWIGTYPE_p_std__shared_ptrT_dive__timers__TimerStepped_const_t swig_types[134]
#define SWIGTYPE_p_std__shared_ptrT_dive__timers__TimerStepped_t swig_types[135]
#define SWIGTYPE_p_std__shared_ptrT_interpolation__IInterpolation_const_t swig_types[136]
#define SWIGTYPE_p_std__shared_ptrT_interpolation__IInterpolation_t swig_types[137]
#define SWIGTYPE_p_std__shared_ptrT_interpolation__InterpolationFixed_const_t swig_types[138]
#define SWIGTYPE_p_std__shared_ptrT_interpolation__InterpolationFixed_t swig_types[139]
#define SWIGTYPE_p_std__shared_ptrT_interpolation__InterpolationIDW_const_t swig_types[140]
#define SWIGTYPE_p_std__shared_ptrT_interpolation__InterpolationIDW_t swig_types[141]
#define SWIGTYPE_p_std__shared_ptrT_interpolation__InterpolationNN_const_t swig_types[142]
#define SWIGTYPE_p_std__shared_ptrT_interpolation__InterpolationNN_t swig_types[143]
#define SWIGTYPE_p_std__shared_ptrT_interpolation__InterpolationRBF_const_t swig_types[144]
#define SWIGTYPE_p_std__shared_ptrT_interpolation__InterpolationRBF_t swig_types[145]
#define SWIGTYPE_p_std__shared_ptrT_material__IBase_const_t swig_types[146]
#define SWIGTYPE_p_std__shared_ptrT_material__IBase_t swig_types[147]
#define SWIGTYPE_p_std__shared_ptrT_material__IMaterialFluid_const_t swig_types[148]
#define SWIGTYPE_p_std__shared_ptrT_material__IMaterialFluid_t swig_types[149]
#define SWIGTYPE_p_std__shared_ptrT_material__IMaterialSolid_const_t swig_types[150]
#define SWIGTYPE_p_std__shared_ptrT_material__IMaterialSolid_t swig_types[151]
#define SWIGTYPE_p_std__shared_ptrT_material__IMaterial_const_t swig_types[152]
#define SWIGTYPE_p_std__shared_ptrT_material__IMaterial_t swig_types[153]
#define SWIGTYPE_p_std__shared_ptrT_material__MaterialFluid_const_t swig_types[154]
#define SWIGTYPE_p_std__shared_ptrT_material__MaterialFluid_t swig_types[155]
#define SWIGTYPE_p_std__shared_ptrT_material__MaterialSolid_const_t swig_types[156]
#define SWIGTYPE_p_std__shared_ptrT_material__MaterialSolid_t swig_types[157]
#define SWIGTYPE_p_std__shared_ptrT_nodes__INode_const_t swig_types[158]
#define SWIGTYPE_p_std__shared_ptrT_nodes__INode_t swig_types[159]
#define SWIGTYPE_p_std__shared_ptrT_nodes__Node_const_t swig_types[160]
#define SWIGTYPE_p_std__shared_ptrT_nodes__Node_t swig_types[161]
#define SWIGTYPE_p_std__shared_ptrT_quadrature__GaussHexa_const_t swig_types[162]
#define SWIGTYPE_p_std__shared_ptrT_quadrature__GaussHexa_t swig_types[163]
#define SWIGTYPE_p_std__shared_ptrT_quadrature__GaussLine_const_t swig_types[164]
#define SWIGTYPE_p_std__shared_ptrT_quadrature__GaussLine_t swig_types[165]
#define SWIGTYPE_p_std__shared_ptrT_quadrature__GaussRect_const_t swig_types[166]
#define SWIGTYPE_p_std__shared_ptrT_quadrature__GaussRect_t swig_types[167]
#define SWIGTYPE_p_std__shared_ptrT_quadrature__IGauss_const_t swig_types[168]
#define SWIGTYPE_p_std__shared_ptrT_quadrature__IGauss_t swig_types[169]
#define SWIGTYPE_p_std__shared_ptrT_values__IBool_t swig_types[170]
#define SWIGTYPE_p_std__shared_ptrT_values__IMatrix3D_t swig_types[171]
#define SWIGTYPE_p_std__shared_ptrT_values__IScalar1D_t swig_types[172]
#define SWIGTYPE_p_std__shared_ptrT_values__IScalar2D_t swig_types[173]
#define SWIGTYPE_p_std__shared_ptrT_values__IScalar3D_t swig_types[174]
#define SWIGTYPE_p_std__shared_ptrT_values__IScalar_t swig_types[175]
#define SWIGTYPE_p_std__shared_ptrT_values__IString_t swig_types[176]
#define SWIGTYPE_p_std__shared_ptrT_values__IValue_t swig_types[177]
#define SWIGTYPE_p_std__shared_ptrT_values__IVector3D_t swig_types[178]
#define SWIGTYPE_p_std__shared_ptrT_values__ValueBool_const_t swig_types[179]
#define SWIGTYPE_p_std__shared_ptrT_values__ValueBool_t swig_types[180]
#define SWIGTYPE_p_std__shared_ptrT_values__ValueMatrix3DCongruent_const_t swig_types[181]
#define SWIGTYPE_p_std__shared_ptrT_values__ValueMatrix3DCongruent_t swig_types[182]
#define SWIGTYPE_p_std__shared_ptrT_values__ValueMatrix3DInterpolation_const_t swig_types[183]
#define SWIGTYPE_p_std__shared_ptrT_values__ValueMatrix3DInterpolation_t swig_types[184]
#define SWIGTYPE_p_std__shared_ptrT_values__ValueScalar1DFunction_const_t swig_types[185]
#define SWIGTYPE_p_std__shared_ptrT_values__ValueScalar1DFunction_t swig_types[186]
#define SWIGTYPE_p_std__shared_ptrT_values__ValueScalar1D_const_t swig_types[187]
#define SWIGTYPE_p_std__shared_ptrT_values__ValueScalar1D_t swig_types[188]
#define SWIGTYPE_p_std__shared_ptrT_values__ValueScalar2DFunction_const_t swig_types[189]
#define SWIGTYPE_p_std__shared_ptrT_values__ValueScalar2DFunction_t swig_types[190]
#define SWIGTYPE_p_std__shared_ptrT_values__ValueScalar2D_const_t swig_types[191]
#define SWIGTYPE_p_std__shared_ptrT_values__ValueScalar2D_t swig_types[192]
#define SWIGTYPE_p_std__shared_ptrT_values__ValueScalar3DCongruent_const_t swig_types[193]
#define SWIGTYPE_p_std__shared_ptrT_values__ValueScalar3DCongruent_t swig_types[194]
#define SWIGTYPE_p_std__shared_ptrT_values__ValueScalar3DFunction_const_t swig_types[195]
#define SWIGTYPE_p_std__shared_ptrT_values__ValueScalar3DFunction_t swig_types[196]
#define SWIGTYPE_p_std__shared_ptrT_values__ValueScalar3DInterpolation_const_t swig_types[197]
#define SWIGTYPE_p_std__shared_ptrT_values__ValueScalar3DInterpolation_t swig_types[198]
#define SWIGTYPE_p_std__shared_ptrT_values__ValueScalar3D_const_t swig_types[199]
#define SWIGTYPE_p_std__shared_ptrT_values__ValueScalar3D_t swig_types[200]
#define SWIGTYPE_p_std__shared_ptrT_values__ValueScalar_const_t swig_types[201]
#define SWIGTYPE_p_std__shared_ptrT_values__ValueScalar_t swig_types[202]
#define SWIGTYPE_p_std__shared_ptrT_values__ValueString_const_t swig_types[203]
#define SWIGTYPE_p_std__shared_ptrT_values__ValueString_t swig_types[204]
#define SWIGTYPE_p_std__shared_ptrT_values__ValueVector3DCongruent_const_t swig_types[205]
#define SWIGTYPE_p_std__shared_ptrT_values__ValueVector3DCongruent_t swig_types[206]
#define SWIGTYPE_p_std__shared_ptrT_values__ValueVector3D_const_t swig_types[207]
#define SWIGTYPE_p_std__shared_ptrT_values__ValueVector3D_t swig_types[208]
#define SWIGTYPE_p_std__string swig_types[209]
#define SWIGTYPE_p_std__vectorT_dive__DirichletMeshIndex_t swig_types[210]
#define SWIGTYPE_p_std__vectorT_dive__DofMeshIndex_t swig_types[211]
#define SWIGTYPE_p_std__vectorT_dive__NodeMeshIndex_t swig_types[212]
#define SWIGTYPE_p_std__vectorT_double_t swig_types[213]
#define SWIGTYPE_p_std__vectorT_eilig__Ellpack_std__allocatorT_eilig__Ellpack_t_t swig_types[214]
#define SWIGTYPE_p_std__vectorT_eilig__Matrix_std__allocatorT_eilig__Matrix_t_t swig_types[215]
#define SWIGTYPE_p_std__vectorT_eilig__Vector_std__allocatorT_eilig__Vector_t_t swig_types[216]
#define SWIGTYPE_p_std__vectorT_std__shared_ptrT_basis__IBasis_t_t swig_types[217]
#define SWIGTYPE_p_std__vectorT_std__shared_ptrT_dive__elements__IElement_t_t swig_types[218]
#define SWIGTYPE_p_std__vectorT_std__shared_ptrT_dive__loads__IDirichlet_t_t swig_types[219]
#define SWIGTYPE_p_std__vectorT_std__shared_ptrT_dive__loads__ILoad_t_t swig_types[220]
#define SWIGTYPE_p_std__vectorT_std__shared_ptrT_dive__meshes__IMesh_t_t swig_types[221]
#define SWIGTYPE_p_std__vectorT_std__shared_ptrT_nodes__INode_t_t swig_types[222]
#define SWIGTYPE_p_std__vectorT_std__size_t_t swig_types[223]
#define SWIGTYPE_p_std__vectorT_std__vectorT_dive__NodeMeshIndex_t_t swig_types[224]
#define SWIGTYPE_p_std__vectorT_std__vectorT_double_t_t swig_types[225]
#define SWIGTYPE_p_swig__SwigPyIterator swig_types[226]
#define SWIGTYPE_p_utils__Strings swig_types[227]
#define SWIGTYPE_p_utils__file__Text swig_types[228]
#define SWIGTYPE_p_value_type swig_types[229]
#define SWIGTYPE_p_values__IBool swig_types[230]
#define SWIGTYPE_p_values__IMatrix3D swig_types[231]
#define SWIGTYPE_p_values__IScalar swig_types[232]
#define SWIGTYPE_p_values__IScalar1D swig_types[233]
#define SWIGTYPE_p_values__IScalar2D swig_types[234]
#define SWIGTYPE_p_values__IScalar3D swig_types[235]
#define SWIGTYPE_p_values__IString swig_types[236]
#define SWIGTYPE_p_values__IValue swig_types[237]
#define SWIGTYPE_p_values__IVector3D swig_types[238]
#define SWIGTYPE_p_values__ValueBool swig_types[239]
#define SWIGTYPE_p_values__ValueMatrix3DCongruent swig_types[240]
#define SWIGTYPE_p_values__ValueMatrix3DInterpolation swig_types[241]
#define SWIGTYPE_p_values__ValueScalar swig_types[242]
#define SWIGTYPE_p_values__ValueScalar1D swig_types[243]
#define SWIGTYPE_p_values__ValueScalar1DFunction swig_types[244]
#define SWIGTYPE_p_values__ValueScalar2D swig_types[245]
#define SWIGTYPE_p_values__ValueScalar2DFunction swig_types[246]
#define SWIGTYPE_p_values__ValueScalar3D swig_types[247]
#define SWIGTYPE_p_values__ValueScalar3DCongruent swig_types[248]
#define SWIGTYPE_p_values__ValueScalar3DFunction swig_types[249]
#define SWIGTYPE_p_values__ValueScalar3DInterpolation swig_types[250]
#define SWIGTYPE_p_values__ValueString swig_types[251]
#define SWIGTYPE_p_values__ValueVector3D swig_types[252]
#define SWIGTYPE_p_values__ValueVector3DCongruent swig_types[253]
static swig_type_info *swig_types[255];
static swig_module_info swig_module = {swig_types, 254, 0, 0, 0, 0};
#define SWIG_TypeQuery(name) SWIG_TypeQueryModule(&swig_module, &swig_module, name)
#define SWIG_MangledTypeQuery(name) SWIG_MangledTypeQueryModule(&swig_module, &swig_module, name)

/* -------- TYPES TABLE (END) -------- */

#ifdef SWIG_TypeQuery
# undef SWIG_TypeQuery
#endif
#define SWIG_TypeQuery SWIG_Python_TypeQuery

/*-----------------------------------------------
              @(target):= _dive.so
  ------------------------------------------------*/
#if PY_VERSION_HEX >= 0x03000000
#  define SWIG_init    PyInit__dive

#else
#  define SWIG_init    init_dive

#endif
#define SWIG_name    "_dive"

#ifdef __cplusplus
#include <utility>
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigSmartPointer {
    T *ptr;
    SwigSmartPointer(T *p) : ptr(p) { }
    ~SwigSmartPointer() { delete ptr; }
    SwigSmartPointer& operator=(SwigSmartPointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
    void reset(T *p) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = p; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigSmartPointer tmp(new T(t)); pointer = tmp; return *this; }
#if __cplusplus >=201103L
  SwigValueWrapper& operator=(T&& t) { SwigSmartPointer tmp(new T(std::move(t))); pointer = tmp; return *this; }
  operator T&&() const { return std::move(*pointer.ptr); }
#else
  operator T&() const { return *pointer.ptr; }
#endif
  T *operator&() const { return pointer.ptr; }
  static void reset(SwigValueWrapper& t, T *p) { t.pointer.reset(p); }
};

/*
 * SwigValueInit() is a generic initialisation solution as the following approach:
 * 
 *       T c_result = T();
 * 
 * doesn't compile for all types for example:
 * 
 *       unsigned int c_result = unsigned int();
 */
template <typename T> T SwigValueInit() {
  return T();
}

#if __cplusplus >=201103L
# define SWIG_STD_MOVE(OBJ) std::move(OBJ)
#else
# define SWIG_STD_MOVE(OBJ) OBJ
#endif

#endif


#define SWIG_as_voidptr(a) const_cast< void * >(static_cast< const void * >(a)) 
#define SWIG_as_voidptrptr(a) ((void)SWIG_as_voidptr(*a),reinterpret_cast< void** >(a)) 


#include <stdexcept>


namespace swig {
  class SwigPtr_PyObject {
  protected:
    PyObject *_obj;

  public:
    SwigPtr_PyObject() :_obj(0)
    {
    }

    SwigPtr_PyObject(const SwigPtr_PyObject& item) : _obj(item._obj)
    {
      SWIG_PYTHON_THREAD_BEGIN_BLOCK;
      Py_XINCREF(_obj);      
      SWIG_PYTHON_THREAD_END_BLOCK;
    }
    
    SwigPtr_PyObject(PyObject *obj, bool initial_ref = true) :_obj(obj)
    {
      if (initial_ref) {
        SWIG_PYTHON_THREAD_BEGIN_BLOCK;
        Py_XINCREF(_obj);
        SWIG_PYTHON_THREAD_END_BLOCK;
      }
    }
    
    SwigPtr_PyObject & operator=(const SwigPtr_PyObject& item) 
    {
      SWIG_PYTHON_THREAD_BEGIN_BLOCK;
      Py_XINCREF(item._obj);
      Py_XDECREF(_obj);
      _obj = item._obj;
      SWIG_PYTHON_THREAD_END_BLOCK;
      return *this;      
    }
    
    ~SwigPtr_PyObject() 
    {
      SWIG_PYTHON_THREAD_BEGIN_BLOCK;
      Py_XDECREF(_obj);
      SWIG_PYTHON_THREAD_END_BLOCK;
    }
    
    operator PyObject *() const
    {
      return _obj;
    }

    PyObject *operator->() const
    {
      return _obj;
    }
  };
}


namespace swig {
  struct SwigVar_PyObject : SwigPtr_PyObject {
    SwigVar_PyObject(PyObject* obj = 0) : SwigPtr_PyObject(obj, false) { }
    
    SwigVar_PyObject & operator = (PyObject* obj)
    {
      Py_XDECREF(_obj);
      _obj = obj;
      return *this;      
    }
  };
}


	#define SWIG_PYTHON_EXTRA_NATIVE_CONTAINERS 


SWIGINTERNINLINE PyObject*
  SWIG_From_int  (int value)
{
  return PyInt_FromLong((long) value);
}


#include <string>


#include <iostream>

#if PY_VERSION_HEX >= 0x03020000
# define SWIGPY_SLICEOBJECT PyObject
#else
# define SWIGPY_SLICEOBJECT PySliceObject
#endif


#include <typeinfo>
#include <stdexcept>


#if defined(__GNUC__)
#  if __GNUC__ == 2 && __GNUC_MINOR <= 96
#     define SWIG_STD_NOMODERN_STL
#  endif
#endif


#include <stddef.h>


namespace swig {
  struct stop_iteration {
  };

  struct SwigPyIterator {
  private:
    SwigPtr_PyObject _seq;

  protected:
    SwigPyIterator(PyObject *seq) : _seq(seq)
    {
    }
      
  public:
    virtual ~SwigPyIterator() {}

    // Access iterator method, required by Python
    virtual PyObject *value() const = 0;

    // Forward iterator method, required by Python
    virtual SwigPyIterator *incr(size_t n = 1) = 0;
    
    // Backward iterator method, very common in C++, but not required in Python
    virtual SwigPyIterator *decr(size_t /*n*/ = 1)
    {
      throw stop_iteration();
    }

    // Random access iterator methods, but not required in Python
    virtual ptrdiff_t distance(const SwigPyIterator &/*x*/) const
    {
      throw std::invalid_argument("operation not supported");
    }

    virtual bool equal (const SwigPyIterator &/*x*/) const
    {
      throw std::invalid_argument("operation not supported");
    }
    
    // C++ common/needed methods
    virtual SwigPyIterator *copy() const = 0;

    PyObject *next()     
    {
      SWIG_PYTHON_THREAD_BEGIN_BLOCK; // disable threads       
      PyObject *obj = value();
      incr();       
      SWIG_PYTHON_THREAD_END_BLOCK; // re-enable threads
      return obj;     
    }

    /* Make an alias for Python 3.x */
    PyObject *__next__()
    {
      return next();
    }

    PyObject *previous()
    {
      SWIG_PYTHON_THREAD_BEGIN_BLOCK; // disable threads       
      decr();
      PyObject *obj = value();
      SWIG_PYTHON_THREAD_END_BLOCK; // re-enable threads       
      return obj;
    }

    SwigPyIterator *advance(ptrdiff_t n)
    {
      return  (n > 0) ?  incr(n) : decr(-n);
    }
      
    bool operator == (const SwigPyIterator& x)  const
    {
      return equal(x);
    }
      
    bool operator != (const SwigPyIterator& x) const
    {
      return ! operator==(x);
    }
      
    SwigPyIterator& operator += (ptrdiff_t n)
    {
      return *advance(n);
    }

    SwigPyIterator& operator -= (ptrdiff_t n)
    {
      return *advance(-n);
    }
      
    SwigPyIterator* operator + (ptrdiff_t n) const
    {
      return copy()->advance(n);
    }

    SwigPyIterator* operator - (ptrdiff_t n) const
    {
      return copy()->advance(-n);
    }
      
    ptrdiff_t operator - (const SwigPyIterator& x) const
    {
      return x.distance(*this);
    }
      
    static swig_type_info* descriptor() {
      static int init = 0;
      static swig_type_info* desc = 0;
      if (!init) {
	desc = SWIG_TypeQuery("swig::SwigPyIterator *");
	init = 1;
      }	
      return desc;
    }    
  };

#if defined(SWIGPYTHON_BUILTIN)
  inline PyObject* make_output_iterator_builtin (PyObject *pyself)
  {
    Py_INCREF(pyself);
    return pyself;
  }
#endif
}


SWIGINTERN int
SWIG_AsVal_double (PyObject *obj, double *val)
{
  int res = SWIG_TypeError;
  if (PyFloat_Check(obj)) {
    if (val) *val = PyFloat_AsDouble(obj);
    return SWIG_OK;
#if PY_VERSION_HEX < 0x03000000
  } else if (PyInt_Check(obj)) {
    if (val) *val = (double) PyInt_AsLong(obj);
    return SWIG_OK;
#endif
  } else if (PyLong_Check(obj)) {
    double v = PyLong_AsDouble(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return SWIG_OK;
    } else {
      PyErr_Clear();
    }
  }
#ifdef SWIG_PYTHON_CAST_MODE
  {
    int dispatch = 0;
    double d = PyFloat_AsDouble(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = d;
      return SWIG_AddCast(SWIG_OK);
    } else {
      PyErr_Clear();
    }
    if (!dispatch) {
      long v = PyLong_AsLong(obj);
      if (!PyErr_Occurred()) {
	if (val) *val = v;
	return SWIG_AddCast(SWIG_AddCast(SWIG_OK));
      } else {
	PyErr_Clear();
      }
    }
  }
#endif
  return res;
}


#include <float.h>


#include <math.h>


SWIGINTERNINLINE int
SWIG_CanCastAsInteger(double *d, double min, double max) {
  double x = *d;
  if ((min <= x && x <= max)) {
   double fx, cx, rd;
   errno = 0;
   fx = floor(x);
   cx = ceil(x);
   rd =  ((x - fx) < 0.5) ? fx : cx; /* simple rint */
   if ((errno == EDOM) || (errno == ERANGE)) {
     errno = 0;
   } else {
     double summ, reps, diff;
     if (rd < x) {
       diff = x - rd;
     } else if (rd > x) {
       diff = rd - x;
     } else {
       return 1;
     }
     summ = rd + x;
     reps = diff/summ;
     if (reps < 8*DBL_EPSILON) {
       *d = rd;
       return 1;
     }
   }
  }
  return 0;
}


SWIGINTERN int
SWIG_AsVal_unsigned_SS_long (PyObject *obj, unsigned long *val) 
{
#if PY_VERSION_HEX < 0x03000000
  if (PyInt_Check(obj)) {
    long v = PyInt_AsLong(obj);
    if (v >= 0) {
      if (val) *val = v;
      return SWIG_OK;
    } else {
      return SWIG_OverflowError;
    }
  } else
#endif
  if (PyLong_Check(obj)) {
    unsigned long v = PyLong_AsUnsignedLong(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return SWIG_OK;
    } else {
      PyErr_Clear();
      return SWIG_OverflowError;
    }
  }
#ifdef SWIG_PYTHON_CAST_MODE
  {
    int dispatch = 0;
    unsigned long v = PyLong_AsUnsignedLong(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return SWIG_AddCast(SWIG_OK);
    } else {
      PyErr_Clear();
    }
    if (!dispatch) {
      double d;
      int res = SWIG_AddCast(SWIG_AsVal_double (obj,&d));
      // Largest double not larger than ULONG_MAX (not portably calculated easily)
      // Note that double(ULONG_MAX) is stored in a double rounded up by one (for 64-bit unsigned long)
      // 0xfffffffffffff800ULL == (uint64_t)std::nextafter(double(__uint128_t(ULONG_MAX)+1), double(0))
      const double ulong_max = sizeof(unsigned long) == 8 ? 0xfffffffffffff800ULL : ULONG_MAX;
      if (SWIG_IsOK(res) && SWIG_CanCastAsInteger(&d, 0, ulong_max)) {
	if (val) *val = (unsigned long)(d);
	return res;
      }
    }
  }
#endif
  return SWIG_TypeError;
}


#include <limits.h>
#if !defined(SWIG_NO_LLONG_MAX)
# if !defined(LLONG_MAX) && defined(__GNUC__) && defined (__LONG_LONG_MAX__)
#   define LLONG_MAX __LONG_LONG_MAX__
#   define LLONG_MIN (-LLONG_MAX - 1LL)
#   define ULLONG_MAX (LLONG_MAX * 2ULL + 1ULL)
# endif
#endif


#if defined(LLONG_MAX) && !defined(SWIG_LONG_LONG_AVAILABLE)
#  define SWIG_LONG_LONG_AVAILABLE
#endif


#ifdef SWIG_LONG_LONG_AVAILABLE
SWIGINTERN int
SWIG_AsVal_unsigned_SS_long_SS_long (PyObject *obj, unsigned long long *val)
{
  int res = SWIG_TypeError;
  if (PyLong_Check(obj)) {
    unsigned long long v = PyLong_AsUnsignedLongLong(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return SWIG_OK;
    } else {
      PyErr_Clear();
      res = SWIG_OverflowError;
    }
  } else {
    unsigned long v;
    res = SWIG_AsVal_unsigned_SS_long (obj,&v);
    if (SWIG_IsOK(res)) {
      if (val) *val = v;
      return res;
    }
  }
#ifdef SWIG_PYTHON_CAST_MODE
  {
    const double mant_max = 1LL << DBL_MANT_DIG;
    double d;
    res = SWIG_AsVal_double (obj,&d);
    if (SWIG_IsOK(res) && !SWIG_CanCastAsInteger(&d, 0, mant_max))
      return SWIG_OverflowError;
    if (SWIG_IsOK(res) && SWIG_CanCastAsInteger(&d, 0, mant_max)) {
      if (val) *val = (unsigned long long)(d);
      return SWIG_AddCast(res);
    }
    res = SWIG_TypeError;
  }
#endif
  return res;
}
#endif


SWIGINTERNINLINE int
SWIG_AsVal_size_t (PyObject * obj, size_t *val)
{
  int res = SWIG_TypeError;
#ifdef SWIG_LONG_LONG_AVAILABLE
  if (sizeof(size_t) <= sizeof(unsigned long)) {
#endif
    unsigned long v;
    res = SWIG_AsVal_unsigned_SS_long (obj, val ? &v : 0);
    if (SWIG_IsOK(res) && val) *val = static_cast< size_t >(v);
#ifdef SWIG_LONG_LONG_AVAILABLE
  } else if (sizeof(size_t) <= sizeof(unsigned long long)) {
    unsigned long long v;
    res = SWIG_AsVal_unsigned_SS_long_SS_long (obj, val ? &v : 0);
    if (SWIG_IsOK(res) && val) *val = static_cast< size_t >(v);
  }
#endif
  return res;
}


  #define SWIG_From_long   PyInt_FromLong 


#ifdef SWIG_LONG_LONG_AVAILABLE
SWIGINTERNINLINE PyObject* 
SWIG_From_long_SS_long  (long long value)
{
  return ((value < LONG_MIN) || (value > LONG_MAX)) ?
    PyLong_FromLongLong(value) : PyInt_FromLong(static_cast< long >(value));
}
#endif


SWIGINTERNINLINE PyObject *
SWIG_From_ptrdiff_t  (ptrdiff_t value)
{    
#ifdef SWIG_LONG_LONG_AVAILABLE
  if (sizeof(ptrdiff_t) <= sizeof(long)) {
#endif
    return SWIG_From_long  (static_cast< long >(value));
#ifdef SWIG_LONG_LONG_AVAILABLE
  } else {
    /* assume sizeof(ptrdiff_t) <= sizeof(long long) */
    return SWIG_From_long_SS_long  (static_cast< long long >(value));
  }
#endif
}


SWIGINTERNINLINE PyObject*
  SWIG_From_bool  (bool value)
{
  return PyBool_FromLong(value ? 1 : 0);
}


SWIGINTERN int
SWIG_AsVal_long (PyObject *obj, long* val)
{
#if PY_VERSION_HEX < 0x03000000
  if (PyInt_Check(obj)) {
    if (val) *val = PyInt_AsLong(obj);
    return SWIG_OK;
  } else
#endif
  if (PyLong_Check(obj)) {
    long v = PyLong_AsLong(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return SWIG_OK;
    } else {
      PyErr_Clear();
      return SWIG_OverflowError;
    }
  }
#ifdef SWIG_PYTHON_CAST_MODE
  {
    int dispatch = 0;
    long v = PyInt_AsLong(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return SWIG_AddCast(SWIG_OK);
    } else {
      PyErr_Clear();
    }
    if (!dispatch) {
      double d;
      int res = SWIG_AddCast(SWIG_AsVal_double (obj,&d));
      // Largest double not larger than LONG_MAX (not portably calculated easily)
      // Note that double(LONG_MAX) is stored in a double rounded up by one (for 64-bit long)
      // 0x7ffffffffffffc00LL == (int64_t)std::nextafter(double(__uint128_t(LONG_MAX)+1), double(0))
      const double long_max = sizeof(long) == 8 ? 0x7ffffffffffffc00LL : LONG_MAX;
      // No equivalent needed for 64-bit double(LONG_MIN) is exactly LONG_MIN
      if (SWIG_IsOK(res) && SWIG_CanCastAsInteger(&d, LONG_MIN, long_max)) {
	if (val) *val = (long)(d);
	return res;
      }
    }
  }
#endif
  return SWIG_TypeError;
}


#ifdef SWIG_LONG_LONG_AVAILABLE
SWIGINTERN int
SWIG_AsVal_long_SS_long (PyObject *obj, long long *val)
{
  int res = SWIG_TypeError;
  if (PyLong_Check(obj)) {
    long long v = PyLong_AsLongLong(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return SWIG_OK;
    } else {
      PyErr_Clear();
      res = SWIG_OverflowError;
    }
  } else {
    long v;
    res = SWIG_AsVal_long (obj,&v);
    if (SWIG_IsOK(res)) {
      if (val) *val = v;
      return res;
    }
  }
#ifdef SWIG_PYTHON_CAST_MODE
  {
    const double mant_max = 1LL << DBL_MANT_DIG;
    const double mant_min = -mant_max;
    double d;
    res = SWIG_AsVal_double (obj,&d);
    if (SWIG_IsOK(res) && !SWIG_CanCastAsInteger(&d, mant_min, mant_max))
      return SWIG_OverflowError;
    if (SWIG_IsOK(res) && SWIG_CanCastAsInteger(&d, mant_min, mant_max)) {
      if (val) *val = (long long)(d);
      return SWIG_AddCast(res);
    }
    res = SWIG_TypeError;
  }
#endif
  return res;
}
#endif


SWIGINTERNINLINE int
SWIG_AsVal_ptrdiff_t (PyObject * obj, ptrdiff_t *val)
{
  int res = SWIG_TypeError;
#ifdef SWIG_LONG_LONG_AVAILABLE
  if (sizeof(ptrdiff_t) <= sizeof(long)) {
#endif
    long v;
    res = SWIG_AsVal_long (obj, val ? &v : 0);
    if (SWIG_IsOK(res) && val) *val = static_cast< ptrdiff_t >(v);
#ifdef SWIG_LONG_LONG_AVAILABLE
  } else if (sizeof(ptrdiff_t) <= sizeof(long long)) {
    long long v;
    res = SWIG_AsVal_long_SS_long (obj, val ? &v : 0);
    if (SWIG_IsOK(res) && val) *val = static_cast< ptrdiff_t >(v);
  }
#endif
  return res;
}


#include <algorithm>


#include <utility>


#include <set>


#include <vector>


	#include "eilig_types.hpp"
	#include "eilig_vector.hpp"
	#include "eilig_matrix.hpp"
	#include "eilig_matrix_ellpack.hpp"
	#include "eilig_routines.hpp"
	#include "eilig_transform.hpp"
	#include "eilig_status.hpp"

	using Scalar = double;
	using Status = long long int;
	using NumberRows = std::size_t;
	using NumberCols = std::size_t;
	using String = std::string;
	using Index = std::size_t;
	using Axis = std::size_t;
	
	using Indices = std::vector<Index>;
	using Scalars = std::vector<Scalar>;	


namespace swig {
  template <class Type>
  struct noconst_traits {
    typedef Type noconst_type;
  };

  template <class Type>
  struct noconst_traits<const Type> {
    typedef Type noconst_type;
  };

  /*
    type categories
  */
  struct pointer_category { };
  struct value_category { };

  /*
    General traits that provides type_name and type_info
  */
  template <class Type> struct traits { };

  template <class Type>
  inline const char* type_name() {
    return traits<typename noconst_traits<Type >::noconst_type >::type_name();
  }

  template <class Type> struct traits_info {
    static swig_type_info *type_query(std::string name) {
      name += " *";
      return SWIG_TypeQuery(name.c_str());
    }
    static swig_type_info *type_info() {
      static swig_type_info *info = type_query(type_name<Type>());
      return info;
    }
  };

  /*
    Partial specialization for pointers (traits_info)
  */
  template <class Type> struct traits_info<Type *> {
    static swig_type_info *type_query(std::string name) {
      name += " *";
      return SWIG_TypeQuery(name.c_str());
    }
    static swig_type_info *type_info() {
      static swig_type_info *info = type_query(type_name<Type>());
      return info;
    }
  };

  template <class Type>
  inline swig_type_info *type_info() {
    return traits_info<Type>::type_info();
  }

  /*
    Partial specialization for pointers (traits)
  */
  template <class Type> struct traits <Type *> {
    typedef pointer_category category;
    static std::string make_ptr_name(const char* name) {
      std::string ptrname = name;
      ptrname += " *";
      return ptrname;
    }
    static const char* type_name() {
      static std::string name = make_ptr_name(swig::type_name<Type>());
      return name.c_str();
    }
  };

  template <class Type, class Category>
  struct traits_as { };

  template <class Type, class Category>
  struct traits_check { };

}


namespace swig {  
  /*
    Traits that provides the from method
  */
  template <class Type> struct traits_from_ptr {
    static PyObject *from(Type *val, int owner = 0) {
      return SWIG_InternalNewPointerObj(val, type_info<Type>(), owner);
    }
  };

  template <class Type> struct traits_from {
    static PyObject *from(const Type& val) {
      return traits_from_ptr<Type>::from(new Type(val), 1);
    }
  };

  template <class Type> struct traits_from<Type *> {
    static PyObject *from(Type* val) {
      return traits_from_ptr<Type>::from(val, 0);
    }
  };

  template <class Type> struct traits_from<const Type *> {
    static PyObject *from(const Type* val) {
      return traits_from_ptr<Type>::from(const_cast<Type*>(val), 0);
    }
  };


  template <class Type>
  inline PyObject *from(const Type& val) {
    return traits_from<Type>::from(val);
  }

  template <class Type>
  inline PyObject *from_ptr(Type* val, int owner) {
    return traits_from_ptr<Type>::from(val, owner);
  }

  /*
    Traits that provides the asval/as/check method
  */
  template <class Type>
  struct traits_asptr {   
    static int asptr(PyObject *obj, Type **val) {
      int res = SWIG_ERROR;
      swig_type_info *descriptor = type_info<Type>();
      if (val) {
        Type *p = 0;
        int newmem = 0;
        res = descriptor ? SWIG_ConvertPtrAndOwn(obj, (void **)&p, descriptor, 0, &newmem) : SWIG_ERROR;
        if (SWIG_IsOK(res)) {
          if (newmem & SWIG_CAST_NEW_MEMORY) {
            res |= SWIG_NEWOBJMASK;
          }
          *val = p;
        }
      } else {
        res = descriptor ? SWIG_ConvertPtr(obj, 0, descriptor, 0) : SWIG_ERROR;
      }
      return res;
    }
  }; 

  template <class Type>
  inline int asptr(PyObject *obj, Type **vptr) {
    return traits_asptr<Type>::asptr(obj, vptr);
  }

  template <class Type> 
  struct traits_asval {
    static int asval(PyObject *obj, Type *val) {
      if (val) {
	Type *p = 0;
	int res = traits_asptr<Type>::asptr(obj, &p);
	if (!SWIG_IsOK(res)) return res;	
	if (p) {
	  typedef typename noconst_traits<Type>::noconst_type noconst_type;
	  *(const_cast<noconst_type*>(val)) = *p;
	  if (SWIG_IsNewObj(res)){
	    delete p;
	    res = SWIG_DelNewMask(res);
	  }
	  return res;
	} else {
	  return SWIG_ERROR;
	}
      } else {
	return traits_asptr<Type>::asptr(obj, (Type **)(0));
      }
    }
  };

  template <class Type> struct traits_asval<Type*> {
    static int asval(PyObject *obj, Type **val) {
      if (val) {
        typedef typename noconst_traits<Type>::noconst_type noconst_type;
        noconst_type *p = 0;
        int res = traits_asptr<noconst_type>::asptr(obj,  &p);
        if (SWIG_IsOK(res)) {
          *(const_cast<noconst_type**>(val)) = p;
	}
	return res;
      } else {
	return traits_asptr<Type>::asptr(obj, (Type **)(0));
      }
    }
  };
  
  template <class Type>
  inline int asval(PyObject *obj, Type *val) {
    return traits_asval<Type>::asval(obj, val);
  }

  template <class Type> 
  struct traits_as<Type, value_category> {
    static Type as(PyObject *obj) {
      Type v;
      int res = asval(obj, &v);
      if (!obj || !SWIG_IsOK(res)) {
	if (!PyErr_Occurred()) {
	  ::SWIG_Error(SWIG_TypeError,  swig::type_name<Type>());
	}
	throw std::invalid_argument("bad type");
      }
      return v;
    }
  };

  template <class Type> 
  struct traits_as<Type, pointer_category> {
    static Type as(PyObject *obj) {
      Type *v = 0;      
      int res = (obj ? traits_asptr<Type>::asptr(obj, &v) : SWIG_ERROR);
      if (SWIG_IsOK(res) && v) {
	if (SWIG_IsNewObj(res)) {
	  Type r(*v);
	  delete v;
	  return r;
	} else {
	  return *v;
	}
      } else {
	if (!PyErr_Occurred()) {
	  SWIG_Error(SWIG_TypeError,  swig::type_name<Type>());
	}
	throw std::invalid_argument("bad type");
      }
    }
  };

  template <class Type> 
  struct traits_as<Type*, pointer_category> {
    static Type* as(PyObject *obj) {
      Type *v = 0;      
      int res = (obj ? traits_asptr<Type>::asptr(obj, &v) : SWIG_ERROR);
      if (SWIG_IsOK(res)) {
	return v;
      } else {
	if (!PyErr_Occurred()) {
	  SWIG_Error(SWIG_TypeError,  swig::type_name<Type>());
	}
	throw std::invalid_argument("bad type");
      }
    }
  };
    
  template <class Type>
  inline Type as(PyObject *obj) {
    return traits_as<Type, typename traits<Type>::category>::as(obj);
  }

  template <class Type> 
  struct traits_check<Type, value_category> {
    static bool check(PyObject *obj) {
      int res = obj ? asval(obj, (Type *)(0)) : SWIG_ERROR;
      return SWIG_IsOK(res) ? true : false;
    }
  };

  template <class Type> 
  struct traits_check<Type, pointer_category> {
    static bool check(PyObject *obj) {
      int res = obj ? asptr(obj, (Type **)(0)) : SWIG_ERROR;
      return SWIG_IsOK(res) ? true : false;
    }
  };

  template <class Type>
  inline bool check(PyObject *obj) {
    return traits_check<Type, typename traits<Type>::category>::check(obj);
  }
}


#if defined(__SUNPRO_CC) && defined(_RWSTD_VER)
#  if !defined(SWIG_NO_STD_NOITERATOR_TRAITS_STL)
#    define SWIG_STD_NOITERATOR_TRAITS_STL
#  endif
#endif

#if !defined(SWIG_STD_NOITERATOR_TRAITS_STL)
#include <iterator>
#else
namespace std {
  template <class Iterator>
  struct iterator_traits {
    typedef ptrdiff_t difference_type;
    typedef typename Iterator::value_type value_type;
  };

  template <class Iterator, class Category,class T, class Reference, class Pointer, class Distance>
  struct iterator_traits<__reverse_bi_iterator<Iterator,Category,T,Reference,Pointer,Distance> > {
    typedef Distance difference_type;
    typedef T value_type;
  };

  template <class T>
  struct iterator_traits<T*> {
    typedef T value_type;
    typedef ptrdiff_t difference_type;
  };

  template<typename _InputIterator>
  inline typename iterator_traits<_InputIterator>::difference_type
  distance(_InputIterator __first, _InputIterator __last)
  {
    typename iterator_traits<_InputIterator>::difference_type __n = 0;
    while (__first != __last) {
      ++__first; ++__n;
    }
    return __n;
  }
}
#endif


namespace swig {
  template<typename OutIterator>
  class SwigPyIterator_T :  public SwigPyIterator
  {
  public:
    typedef OutIterator out_iterator;
    typedef typename std::iterator_traits<out_iterator>::value_type value_type;    
    typedef SwigPyIterator_T<out_iterator> self_type;

    SwigPyIterator_T(out_iterator curr, PyObject *seq)
      : SwigPyIterator(seq), current(curr)
    {
    }

    const out_iterator& get_current() const
    {
      return current;
    }

    
    bool equal (const SwigPyIterator &iter) const
    {
      const self_type *iters = dynamic_cast<const self_type *>(&iter);
      if (iters) {
	return (current == iters->get_current());
      } else {
	throw std::invalid_argument("bad iterator type");
      }
    }
    
    ptrdiff_t distance(const SwigPyIterator &iter) const
    {
      const self_type *iters = dynamic_cast<const self_type *>(&iter);
      if (iters) {
	return std::distance(current, iters->get_current());
      } else {
	throw std::invalid_argument("bad iterator type");
      }
    }    
    
  protected:
    out_iterator current;
  };
  
  template <class ValueType>
  struct from_oper 
  {
    typedef const ValueType& argument_type;
    typedef PyObject *result_type;
    result_type operator()(argument_type v) const
    {
      return swig::from(v);
    }
  };

  template<typename OutIterator, 
	   typename ValueType = typename std::iterator_traits<OutIterator>::value_type,
	   typename FromOper = from_oper<ValueType> >
  class SwigPyForwardIteratorOpen_T :  public SwigPyIterator_T<OutIterator>
  {
  public:
    FromOper from;
    typedef OutIterator out_iterator;
    typedef ValueType value_type;
    typedef SwigPyIterator_T<out_iterator>  base;
    typedef SwigPyForwardIteratorOpen_T<OutIterator, ValueType, FromOper> self_type;
    
    SwigPyForwardIteratorOpen_T(out_iterator curr, PyObject *seq)
      : SwigPyIterator_T<OutIterator>(curr, seq)
    {
    }
    
    PyObject *value() const {
      return from(static_cast<const value_type&>(*(base::current)));
    }
    
    SwigPyIterator *copy() const
    {
      return new self_type(*this);
    }

    SwigPyIterator *incr(size_t n = 1)
    {
      while (n--) {
	++base::current;
      }
      return this;
    }

  };

  template<typename OutIterator, 
	   typename ValueType = typename std::iterator_traits<OutIterator>::value_type,
	   typename FromOper = from_oper<ValueType> >
  class SwigPyIteratorOpen_T :  public SwigPyForwardIteratorOpen_T<OutIterator, ValueType, FromOper>
  {
  public:
    FromOper from;
    typedef OutIterator out_iterator;
    typedef ValueType value_type;
    typedef SwigPyIterator_T<out_iterator>  base;
    typedef SwigPyIteratorOpen_T<OutIterator, ValueType, FromOper> self_type;
    
    SwigPyIteratorOpen_T(out_iterator curr, PyObject *seq)
      : SwigPyForwardIteratorOpen_T<OutIterator>(curr, seq)
    {
    }

    SwigPyIterator *decr(size_t n = 1)
    {
      while (n--) {
	--base::current;
      }
      return this;
    }
  };

  template<typename OutIterator, 
	   typename ValueType = typename std::iterator_traits<OutIterator>::value_type,
	   typename FromOper = from_oper<ValueType> >
  class SwigPyForwardIteratorClosed_T :  public SwigPyIterator_T<OutIterator>
  {
  public:
    FromOper from;
    typedef OutIterator out_iterator;
    typedef ValueType value_type;
    typedef SwigPyIterator_T<out_iterator>  base;    
    typedef SwigPyForwardIteratorClosed_T<OutIterator, ValueType, FromOper> self_type;
    
    SwigPyForwardIteratorClosed_T(out_iterator curr, out_iterator first, out_iterator last, PyObject *seq)
      : SwigPyIterator_T<OutIterator>(curr, seq), begin(first), end(last)
    {
    }
    
    PyObject *value() const {
      if (base::current == end) {
	throw stop_iteration();
      } else {
	return from(static_cast<const value_type&>(*(base::current)));
      }
    }
    
    SwigPyIterator *copy() const
    {
      return new self_type(*this);
    }

    SwigPyIterator *incr(size_t n = 1)
    {
      while (n--) {
	if (base::current == end) {
	  throw stop_iteration();
	} else {
	  ++base::current;
	}
      }
      return this;
    }

  protected:
    out_iterator begin;
    out_iterator end;
  };

  template<typename OutIterator, 
	   typename ValueType = typename std::iterator_traits<OutIterator>::value_type,
	   typename FromOper = from_oper<ValueType> >
  class SwigPyIteratorClosed_T :  public SwigPyForwardIteratorClosed_T<OutIterator,ValueType,FromOper>
  {
  public:
    FromOper from;
    typedef OutIterator out_iterator;
    typedef ValueType value_type;
    typedef SwigPyIterator_T<out_iterator>  base;
    typedef SwigPyForwardIteratorClosed_T<OutIterator, ValueType, FromOper> base0;
    typedef SwigPyIteratorClosed_T<OutIterator, ValueType, FromOper> self_type;
    
    SwigPyIteratorClosed_T(out_iterator curr, out_iterator first, out_iterator last, PyObject *seq)
      : SwigPyForwardIteratorClosed_T<OutIterator,ValueType,FromOper>(curr, first, last, seq)
    {
    }

    SwigPyIterator *decr(size_t n = 1)
    {
      while (n--) {
	if (base::current == base0::begin) {
	  throw stop_iteration();
	} else {
	  --base::current;
	}
      }
      return this;
    }
  };


  template<typename OutIter>
  inline SwigPyIterator*
  make_output_forward_iterator(const OutIter& current, const OutIter& begin,const OutIter& end, PyObject *seq = 0)
  {
    return new SwigPyForwardIteratorClosed_T<OutIter>(current, begin, end, seq);
  }

  template<typename OutIter>
  inline SwigPyIterator*
  make_output_iterator(const OutIter& current, const OutIter& begin,const OutIter& end, PyObject *seq = 0)
  {
    return new SwigPyIteratorClosed_T<OutIter>(current, begin, end, seq);
  }

  template<typename OutIter>
  inline SwigPyIterator*
  make_output_forward_iterator(const OutIter& current, PyObject *seq = 0)
  {
    return new SwigPyForwardIteratorOpen_T<OutIter>(current, seq);
  }

  template<typename OutIter>
  inline SwigPyIterator*
  make_output_iterator(const OutIter& current, PyObject *seq = 0)
  {
    return new SwigPyIteratorOpen_T<OutIter>(current, seq);
  }

}


  namespace swig {
    template <>  struct traits< ::size_t > {
      typedef pointer_category category;
      static const char* type_name() { return"::size_t"; }
    };
  }


#include <functional>

namespace std {
  template <>
  struct less <PyObject *>
  {
    bool
    operator()(PyObject * v, PyObject *w) const
    { 
      bool res;
      SWIG_PYTHON_THREAD_BEGIN_BLOCK;
      res = PyObject_RichCompareBool(v, w, Py_LT) ? true : false;
      /* This may fall into a case of inconsistent
               eg. ObjA > ObjX > ObjB
               but ObjA < ObjB
      */
      if( PyErr_Occurred() && PyErr_ExceptionMatches(PyExc_TypeError) )
      {
        /* Objects can't be compared, this mostly occurred in Python 3.0 */
        /* Compare their ptr directly for a workaround */
        res = (v < w);
        PyErr_Clear();
      }
      SWIG_PYTHON_THREAD_END_BLOCK;
      return res;
    }
  };

  template <>
  struct less <swig::SwigPtr_PyObject>
  {
    bool
    operator()(const swig::SwigPtr_PyObject& v, const swig::SwigPtr_PyObject& w) const
    {
      return std::less<PyObject *>()(v, w);
    }
  };

  template <>
  struct less <swig::SwigVar_PyObject>
  {
    bool
    operator()(const swig::SwigVar_PyObject& v, const swig::SwigVar_PyObject& w) const
    {
      return std::less<PyObject *>()(v, w);
    }
  };

}

namespace swig {
  template <> struct traits<PyObject *> {
    typedef value_category category;
    static const char* type_name() { return "PyObject *"; }
  };  

  template <>  struct traits_asval<PyObject * > {   
    typedef PyObject * value_type;
    static int asval(PyObject *obj, value_type *val) {
      if (val) *val = obj;
      return SWIG_OK;
    }
  };

  template <> 
  struct traits_check<PyObject *, value_category> {
    static bool check(PyObject *) {
      return true;
    }
  };

  template <>  struct traits_from<PyObject *> {
    typedef PyObject * value_type;
    static PyObject *from(const value_type& val) {
      Py_XINCREF(val);
      return val;
    }
  };
  
}

namespace swig {
  template <class Difference>
  inline size_t
  check_index(Difference i, size_t size, bool insert = false) {
    if ( i < 0 ) {
      if ((size_t) (-i) <= size)
	return (size_t) (i + size);
    } else if ( (size_t) i < size ) {
      return (size_t) i;
    } else if (insert && ((size_t) i == size)) {
      return size;
    }
    throw std::out_of_range("index out of range");
  }

  template <class Difference>
  void
  slice_adjust(Difference i, Difference j, Py_ssize_t step, size_t size, Difference &ii, Difference &jj, bool insert = false) {
    if (step == 0) {
      throw std::invalid_argument("slice step cannot be zero");
    } else if (step > 0) {
      // Required range: 0 <= i < size, 0 <= j < size, i <= j
      if (i < 0) {
        ii = 0;
      } else if (i < (Difference)size) {
        ii = i;
      } else if (insert && (i >= (Difference)size)) {
        ii = (Difference)size;
      }
      if (j < 0) {
        jj = 0;
      } else {
        jj = (j < (Difference)size) ? j : (Difference)size;
      }
      if (jj < ii)
        jj = ii;
    } else {
      // Required range: -1 <= i < size-1, -1 <= j < size-1, i >= j
      if (i < -1) {
        ii = -1;
      } else if (i < (Difference) size) {
        ii = i;
      } else if (i >= (Difference)(size-1)) {
        ii = (Difference)(size-1);
      }
      if (j < -1) {
        jj = -1;
      } else {
        jj = (j < (Difference)size ) ? j : (Difference)(size-1);
      }
      if (ii < jj)
        ii = jj;
    }
  }

  template <class Sequence, class Difference>
  inline typename Sequence::iterator
  getpos(Sequence* self, Difference i)  {
    typename Sequence::iterator pos = self->begin();
    std::advance(pos, check_index(i,self->size()));
    return pos;
  }

  template <class Sequence, class Difference>
  inline typename Sequence::const_iterator
  cgetpos(const Sequence* self, Difference i)  {
    typename Sequence::const_iterator pos = self->begin();
    std::advance(pos, check_index(i,self->size()));
    return pos;
  }

  template <class Sequence>
  inline void
  erase(Sequence* seq, const typename Sequence::iterator& position) {
    seq->erase(position);
  }

  template <class Sequence>
  struct traits_reserve {
    static void reserve(Sequence & /*seq*/, typename Sequence::size_type /*n*/) {
      // This should be specialized for types that support reserve
    }
  };

  template <class Sequence, class Difference>
  inline Sequence*
  getslice(const Sequence* self, Difference i, Difference j, Py_ssize_t step) {
    typename Sequence::size_type size = self->size();
    Difference ii = 0;
    Difference jj = 0;
    swig::slice_adjust(i, j, step, size, ii, jj);

    if (step > 0) {
      typename Sequence::const_iterator sb = self->begin();
      typename Sequence::const_iterator se = self->begin();
      std::advance(sb,ii);
      std::advance(se,jj);
      if (step == 1) {
        return new Sequence(sb, se);
      } else {
        Sequence *sequence = new Sequence();
        swig::traits_reserve<Sequence>::reserve(*sequence, (jj - ii + step - 1) / step);
        typename Sequence::const_iterator it = sb;
        while (it!=se) {
          sequence->push_back(*it);
          for (Py_ssize_t c=0; c<step && it!=se; ++c)
            it++;
        }
        return sequence;
      } 
    } else {
      Sequence *sequence = new Sequence();
      swig::traits_reserve<Sequence>::reserve(*sequence, (ii - jj - step - 1) / -step);
      typename Sequence::const_reverse_iterator sb = self->rbegin();
      typename Sequence::const_reverse_iterator se = self->rbegin();
      std::advance(sb,size-ii-1);
      std::advance(se,size-jj-1);
      typename Sequence::const_reverse_iterator it = sb;
      while (it!=se) {
        sequence->push_back(*it);
        for (Py_ssize_t c=0; c<-step && it!=se; ++c)
          it++;
      }
      return sequence;
    }
  }

  template <class Sequence, class Difference, class InputSeq>
  inline void
  setslice(Sequence* self, Difference i, Difference j, Py_ssize_t step, const InputSeq& is = InputSeq()) {
    typename Sequence::size_type size = self->size();
    Difference ii = 0;
    Difference jj = 0;
    swig::slice_adjust(i, j, step, size, ii, jj, true);
    if (step > 0) {
      if (step == 1) {
        size_t ssize = jj - ii;
        if (ssize <= is.size()) {
          // expanding/staying the same size
          swig::traits_reserve<Sequence>::reserve(*self, self->size() - ssize + is.size());
          typename Sequence::iterator sb = self->begin();
          typename InputSeq::const_iterator isit = is.begin();
          std::advance(sb,ii);
          std::advance(isit, jj - ii);
          self->insert(std::copy(is.begin(), isit, sb), isit, is.end());
        } else {
          // shrinking
          typename Sequence::iterator sb = self->begin();
          typename Sequence::iterator se = self->begin();
          std::advance(sb,ii);
          std::advance(se,jj);
          self->erase(sb,se);
          sb = self->begin();
          std::advance(sb,ii);
          self->insert(sb, is.begin(), is.end());
        }
      } else {
        size_t replacecount = (jj - ii + step - 1) / step;
        if (is.size() != replacecount) {
          char msg[1024];
          PyOS_snprintf(msg, sizeof(msg), "attempt to assign sequence of size %lu to extended slice of size %lu", (unsigned long)is.size(), (unsigned long)replacecount);
          throw std::invalid_argument(msg);
        }
        typename Sequence::const_iterator isit = is.begin();
        typename Sequence::iterator it = self->begin();
        std::advance(it,ii);
        for (size_t rc=0; rc<replacecount && it != self->end(); ++rc) {
          *it++ = *isit++;
          for (Py_ssize_t c=0; c<(step-1) && it != self->end(); ++c)
            it++;
        }
      }
    } else {
      size_t replacecount = (ii - jj - step - 1) / -step;
      if (is.size() != replacecount) {
        char msg[1024];
        PyOS_snprintf(msg, sizeof(msg), "attempt to assign sequence of size %lu to extended slice of size %lu", (unsigned long)is.size(), (unsigned long)replacecount);
        throw std::invalid_argument(msg);
      }
      typename Sequence::const_iterator isit = is.begin();
      typename Sequence::reverse_iterator it = self->rbegin();
      std::advance(it,size-ii-1);
      for (size_t rc=0; rc<replacecount && it != self->rend(); ++rc) {
        *it++ = *isit++;
        for (Py_ssize_t c=0; c<(-step-1) && it != self->rend(); ++c)
          it++;
      }
    }
  }

  template <class Sequence, class Difference>
  inline void
  delslice(Sequence* self, Difference i, Difference j, Py_ssize_t step) {
    typename Sequence::size_type size = self->size();
    Difference ii = 0;
    Difference jj = 0;
    swig::slice_adjust(i, j, step, size, ii, jj, true);
    if (step > 0) {
      typename Sequence::iterator sb = self->begin();
      std::advance(sb,ii);
      if (step == 1) {
        typename Sequence::iterator se = self->begin();
        std::advance(se,jj);
        self->erase(sb,se);
      } else {
        typename Sequence::iterator it = sb;
        size_t delcount = (jj - ii + step - 1) / step;
        while (delcount) {
          it = self->erase(it);
          for (Py_ssize_t c=0; c<(step-1) && it != self->end(); ++c)
            it++;
          delcount--;
        }
      }
    } else {
      typename Sequence::reverse_iterator sb = self->rbegin();
      std::advance(sb,size-ii-1);
      typename Sequence::reverse_iterator it = sb;
      size_t delcount = (ii - jj - step - 1) / -step;
      while (delcount) {
        it = typename Sequence::reverse_iterator(self->erase((++it).base()));
        for (Py_ssize_t c=0; c<(-step-1) && it != self->rend(); ++c)
          it++;
        delcount--;
      }
    }
  }
}


namespace swig {
  template <class Seq, class T = typename Seq::value_type >
  struct IteratorProtocol {
    static void assign(PyObject *obj, Seq *seq) {
      SwigVar_PyObject iter = PyObject_GetIter(obj);
      if (iter) {
        SwigVar_PyObject item = PyIter_Next(iter);
        while (item) {
          seq->insert(seq->end(), swig::as<T>(item));
          item = PyIter_Next(iter);
        }
      }
    }

    static bool check(PyObject *obj) {
      bool ret = false;
      SwigVar_PyObject iter = PyObject_GetIter(obj);
      if (iter) {
        SwigVar_PyObject item = PyIter_Next(iter);
        ret = true;
        while (item) {
          ret = swig::check<T>(item);
          item = ret ? PyIter_Next(iter) : 0;
        }
      }
      return ret;
    }
  };

  template <class Seq, class T = typename Seq::value_type >
  struct traits_asptr_stdseq {
    typedef Seq sequence;
    typedef T value_type;

    static bool is_iterable(PyObject *obj) {
      SwigVar_PyObject iter = PyObject_GetIter(obj);
      PyErr_Clear();
      return iter != 0;
    }

    static int asptr(PyObject *obj, sequence **seq) {
      int ret = SWIG_ERROR;
      if (obj == Py_None || SWIG_Python_GetSwigThis(obj)) {
	sequence *p;
	swig_type_info *descriptor = swig::type_info<sequence>();
	if (descriptor && SWIG_IsOK(::SWIG_ConvertPtr(obj, (void **)&p, descriptor, 0))) {
	  if (seq) *seq = p;
	  return SWIG_OLDOBJ;
	}
      } else if (is_iterable(obj)) {
	try {
	  if (seq) {
	    *seq = new sequence();
            IteratorProtocol<Seq, T>::assign(obj, *seq);
            if (!PyErr_Occurred())
              return SWIG_NEWOBJ;
	  } else {
	    return IteratorProtocol<Seq, T>::check(obj) ? SWIG_OK : SWIG_ERROR;
	  }
	} catch (std::exception& e) {
          if (seq && !PyErr_Occurred())
            PyErr_SetString(PyExc_TypeError, e.what());
	}
        if (seq)
          delete *seq;
	return SWIG_ERROR;
      }
      return ret;
    }
  };

  template <class Seq, class T = typename Seq::value_type >
  struct traits_from_stdseq {
    typedef Seq sequence;
    typedef T value_type;
    typedef typename Seq::size_type size_type;
    typedef typename sequence::const_iterator const_iterator;

    static PyObject *from(const sequence& seq) {
#ifdef SWIG_PYTHON_EXTRA_NATIVE_CONTAINERS
      swig_type_info *desc = swig::type_info<sequence>();
      if (desc && desc->clientdata) {
	return SWIG_InternalNewPointerObj(new sequence(seq), desc, SWIG_POINTER_OWN);
      }
#endif
      size_type size = seq.size();
      if (size <= (size_type)INT_MAX) {
	PyObject *obj = PyTuple_New((Py_ssize_t)size);
	Py_ssize_t i = 0;
	for (const_iterator it = seq.begin(); it != seq.end(); ++it, ++i) {
	  PyTuple_SetItem(obj,i,swig::from<value_type>(*it));
	}
	return obj;
      } else {
	PyErr_SetString(PyExc_OverflowError,"sequence size not valid in python");
	return NULL;
      }
    }
  };
}


  namespace swig {
    template <class T>
    struct traits_reserve<std::vector<T> > {
      static void reserve(std::vector<T> &seq, typename std::vector<T>::size_type n) {
        seq.reserve(n);
      }
    };

    template <class T>
    struct traits_asptr<std::vector<T> >  {
      static int asptr(PyObject *obj, std::vector<T> **vec) {
	return traits_asptr_stdseq<std::vector<T> >::asptr(obj, vec);
      }
    };
    
    template <class T>
    struct traits_from<std::vector<T> > {
      static PyObject *from(const std::vector<T>& vec) {
	return traits_from_stdseq<std::vector<T> >::from(vec);
      }
    };
  }


      namespace swig {
	template <>  struct traits<std::vector< ::size_t, std::allocator< ::size_t > > > {
	  typedef pointer_category category;
	  static const char* type_name() {
	    return "std::vector<" "::size_t" "," "std::allocator< ::size_t >" " >";
	  }
	};
      }
    
SWIGINTERN swig::SwigPyIterator *std_vector_Sl_std_size_t_Sg__iterator(std::vector< std::size_t > *self,PyObject **PYTHON_SELF){
      return swig::make_output_iterator(self->begin(), self->begin(), self->end(), *PYTHON_SELF);
    }
SWIGINTERN bool std_vector_Sl_std_size_t_Sg____nonzero__(std::vector< std::size_t > const *self){
      return !(self->empty());
    }
SWIGINTERN bool std_vector_Sl_std_size_t_Sg____bool__(std::vector< std::size_t > const *self){
      return !(self->empty());
    }
SWIGINTERN std::vector< ::size_t >::size_type std_vector_Sl_std_size_t_Sg____len__(std::vector< std::size_t > const *self){
      return self->size();
    }

SWIGINTERNINLINE PyObject* 
SWIG_From_unsigned_SS_long  (unsigned long value)
{
  return (value > LONG_MAX) ?
    PyLong_FromUnsignedLong(value) : PyInt_FromLong(static_cast< long >(value));
}


#ifdef SWIG_LONG_LONG_AVAILABLE
SWIGINTERNINLINE PyObject* 
SWIG_From_unsigned_SS_long_SS_long  (unsigned long long value)
{
  return (value > LONG_MAX) ?
    PyLong_FromUnsignedLongLong(value) : PyInt_FromLong(static_cast< long >(value));
}
#endif


SWIGINTERNINLINE PyObject *
SWIG_From_size_t  (size_t value)
{    
#ifdef SWIG_LONG_LONG_AVAILABLE
  if (sizeof(size_t) <= sizeof(unsigned long)) {
#endif
    return SWIG_From_unsigned_SS_long  (static_cast< unsigned long >(value));
#ifdef SWIG_LONG_LONG_AVAILABLE
  } else {
    /* assume sizeof(size_t) <= sizeof(unsigned long long) */
    return SWIG_From_unsigned_SS_long_SS_long  (static_cast< unsigned long long >(value));
  }
#endif
}

SWIGINTERN std::vector< ::size_t,std::allocator< ::size_t > > *std_vector_Sl_std_size_t_Sg____getslice__(std::vector< std::size_t > *self,std::vector< ::size_t >::difference_type i,std::vector< ::size_t >::difference_type j){
      return swig::getslice(self, i, j, 1);
    }
SWIGINTERN void std_vector_Sl_std_size_t_Sg____setslice____SWIG_0(std::vector< std::size_t > *self,std::vector< ::size_t >::difference_type i,std::vector< ::size_t >::difference_type j){
      swig::setslice(self, i, j, 1, std::vector< ::size_t,std::allocator< ::size_t > >());
    }
SWIGINTERN void std_vector_Sl_std_size_t_Sg____setslice____SWIG_1(std::vector< std::size_t > *self,std::vector< ::size_t >::difference_type i,std::vector< ::size_t >::difference_type j,std::vector< ::size_t,std::allocator< ::size_t > > const &v){
      swig::setslice(self, i, j, 1, v);
    }
SWIGINTERN void std_vector_Sl_std_size_t_Sg____delslice__(std::vector< std::size_t > *self,std::vector< ::size_t >::difference_type i,std::vector< ::size_t >::difference_type j){
      swig::delslice(self, i, j, 1);
    }
SWIGINTERN void std_vector_Sl_std_size_t_Sg____delitem____SWIG_0(std::vector< std::size_t > *self,std::vector< ::size_t >::difference_type i){
      swig::erase(self, swig::getpos(self, i));
    }
SWIGINTERN std::vector< ::size_t,std::allocator< ::size_t > > *std_vector_Sl_std_size_t_Sg____getitem____SWIG_0(std::vector< std::size_t > *self,SWIGPY_SLICEOBJECT *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return NULL;
      }
      PySlice_GetIndices(slice, (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector< ::size_t,std::allocator< ::size_t > >::difference_type id = i;
      std::vector< ::size_t,std::allocator< ::size_t > >::difference_type jd = j;
      return swig::getslice(self, id, jd, step);
    }
SWIGINTERN void std_vector_Sl_std_size_t_Sg____setitem____SWIG_0(std::vector< std::size_t > *self,SWIGPY_SLICEOBJECT *slice,std::vector< ::size_t,std::allocator< ::size_t > > const &v){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(slice, (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector< ::size_t,std::allocator< ::size_t > >::difference_type id = i;
      std::vector< ::size_t,std::allocator< ::size_t > >::difference_type jd = j;
      swig::setslice(self, id, jd, step, v);
    }
SWIGINTERN void std_vector_Sl_std_size_t_Sg____setitem____SWIG_1(std::vector< std::size_t > *self,SWIGPY_SLICEOBJECT *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(slice, (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector< ::size_t,std::allocator< ::size_t > >::difference_type id = i;
      std::vector< ::size_t,std::allocator< ::size_t > >::difference_type jd = j;
      swig::delslice(self, id, jd, step);
    }
SWIGINTERN void std_vector_Sl_std_size_t_Sg____delitem____SWIG_1(std::vector< std::size_t > *self,SWIGPY_SLICEOBJECT *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(slice, (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector< ::size_t,std::allocator< ::size_t > >::difference_type id = i;
      std::vector< ::size_t,std::allocator< ::size_t > >::difference_type jd = j;
      swig::delslice(self, id, jd, step);
    }
SWIGINTERN std::vector< ::size_t >::value_type const &std_vector_Sl_std_size_t_Sg____getitem____SWIG_1(std::vector< std::size_t > const *self,std::vector< ::size_t >::difference_type i){
      return *(swig::cgetpos(self, i));
    }

namespace swig {
  static PyObject* container_owner_attribute() {
    static PyObject* attr = SWIG_Python_str_FromChar("__swig_container");
    return attr;
  }

  template <typename T>
  struct container_owner {
    // By default, do not add the back-reference (for value types)
    // Specialization below will check the reference for pointer types.
    static bool back_reference(PyObject* /*child*/, PyObject* /*owner*/) {
      return false;
    }
  };

  template <>
  struct container_owner<swig::pointer_category> {  
    /*
     * Call to add a back-reference to the owning object when returning a 
     * reference from a container.  Will only set the reference if child
     * is a SWIG wrapper object that does not own the pointer.
     *
     * returns whether the reference was set or not
     */
    static bool back_reference(PyObject* child, PyObject* owner) {
      SwigPyObject* swigThis = SWIG_Python_GetSwigThis(child);
      if (swigThis && (swigThis->own & SWIG_POINTER_OWN) != SWIG_POINTER_OWN) {
        return PyObject_SetAttr(child, container_owner_attribute(), owner) != -1;
      }
      return false;
    }
  };
}

SWIGINTERN void std_vector_Sl_std_size_t_Sg____setitem____SWIG_2(std::vector< std::size_t > *self,std::vector< ::size_t >::difference_type i,std::vector< ::size_t >::value_type const &x){
      *(swig::getpos(self,i)) = x;
    }
SWIGINTERN std::vector< ::size_t >::value_type std_vector_Sl_std_size_t_Sg__pop(std::vector< std::size_t > *self){
      if (self->size() == 0)
	throw std::out_of_range("pop from empty container");
      std::vector< ::size_t,std::allocator< ::size_t > >::value_type x = self->back();
      self->pop_back();
      return x;
    }
SWIGINTERN void std_vector_Sl_std_size_t_Sg__append(std::vector< std::size_t > *self,std::vector< ::size_t >::value_type const &x){
      self->push_back(x);
    }
SWIGINTERN std::vector< ::size_t >::iterator std_vector_Sl_std_size_t_Sg__erase__SWIG_0(std::vector< std::size_t > *self,std::vector< ::size_t >::iterator pos){ return self->erase(pos); }
SWIGINTERN std::vector< ::size_t >::iterator std_vector_Sl_std_size_t_Sg__erase__SWIG_1(std::vector< std::size_t > *self,std::vector< ::size_t >::iterator first,std::vector< ::size_t >::iterator last){ return self->erase(first, last); }
SWIGINTERN std::vector< ::size_t >::iterator std_vector_Sl_std_size_t_Sg__insert__SWIG_0(std::vector< std::size_t > *self,std::vector< ::size_t >::iterator pos,std::vector< ::size_t >::value_type const &x){ return self->insert(pos, x); }
SWIGINTERN void std_vector_Sl_std_size_t_Sg__insert__SWIG_1(std::vector< std::size_t > *self,std::vector< ::size_t >::iterator pos,std::vector< ::size_t >::size_type n,std::vector< ::size_t >::value_type const &x){ self->insert(pos, n, x); }

  #define SWIG_From_double   PyFloat_FromDouble 


namespace swig {
  template <> struct traits< double > {
    typedef value_category category;
    static const char* type_name() { return"double"; }
  };
  template <>  struct traits_asval< double > {
    typedef double value_type;
    static int asval(PyObject *obj, value_type *val) {
      return SWIG_AsVal_double (obj, val);
    }
  };
  template <>  struct traits_from< double > {
    typedef double value_type;
    static PyObject *from(const value_type& val) {
      return SWIG_From_double  (val);
    }
  };
}


      namespace swig {
	template <>  struct traits<std::vector< double, std::allocator< double > > > {
	  typedef pointer_category category;
	  static const char* type_name() {
	    return "std::vector<" "double" "," "std::allocator< double >" " >";
	  }
	};
      }
    
SWIGINTERN swig::SwigPyIterator *std_vector_Sl_double_Sg__iterator(std::vector< double > *self,PyObject **PYTHON_SELF){
      return swig::make_output_iterator(self->begin(), self->begin(), self->end(), *PYTHON_SELF);
    }
SWIGINTERN bool std_vector_Sl_double_Sg____nonzero__(std::vector< double > const *self){
      return !(self->empty());
    }
SWIGINTERN bool std_vector_Sl_double_Sg____bool__(std::vector< double > const *self){
      return !(self->empty());
    }
SWIGINTERN std::vector< double >::size_type std_vector_Sl_double_Sg____len__(std::vector< double > const *self){
      return self->size();
    }
SWIGINTERN std::vector< double,std::allocator< double > > *std_vector_Sl_double_Sg____getslice__(std::vector< double > *self,std::vector< double >::difference_type i,std::vector< double >::difference_type j){
      return swig::getslice(self, i, j, 1);
    }
SWIGINTERN void std_vector_Sl_double_Sg____setslice____SWIG_0(std::vector< double > *self,std::vector< double >::difference_type i,std::vector< double >::difference_type j){
      swig::setslice(self, i, j, 1, std::vector< double,std::allocator< double > >());
    }
SWIGINTERN void std_vector_Sl_double_Sg____setslice____SWIG_1(std::vector< double > *self,std::vector< double >::difference_type i,std::vector< double >::difference_type j,std::vector< double,std::allocator< double > > const &v){
      swig::setslice(self, i, j, 1, v);
    }
SWIGINTERN void std_vector_Sl_double_Sg____delslice__(std::vector< double > *self,std::vector< double >::difference_type i,std::vector< double >::difference_type j){
      swig::delslice(self, i, j, 1);
    }
SWIGINTERN void std_vector_Sl_double_Sg____delitem____SWIG_0(std::vector< double > *self,std::vector< double >::difference_type i){
      swig::erase(self, swig::getpos(self, i));
    }
SWIGINTERN std::vector< double,std::allocator< double > > *std_vector_Sl_double_Sg____getitem____SWIG_0(std::vector< double > *self,SWIGPY_SLICEOBJECT *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return NULL;
      }
      PySlice_GetIndices(slice, (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector< double,std::allocator< double > >::difference_type id = i;
      std::vector< double,std::allocator< double > >::difference_type jd = j;
      return swig::getslice(self, id, jd, step);
    }
SWIGINTERN void std_vector_Sl_double_Sg____setitem____SWIG_0(std::vector< double > *self,SWIGPY_SLICEOBJECT *slice,std::vector< double,std::allocator< double > > const &v){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(slice, (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector< double,std::allocator< double > >::difference_type id = i;
      std::vector< double,std::allocator< double > >::difference_type jd = j;
      swig::setslice(self, id, jd, step, v);
    }
SWIGINTERN void std_vector_Sl_double_Sg____setitem____SWIG_1(std::vector< double > *self,SWIGPY_SLICEOBJECT *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(slice, (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector< double,std::allocator< double > >::difference_type id = i;
      std::vector< double,std::allocator< double > >::difference_type jd = j;
      swig::delslice(self, id, jd, step);
    }
SWIGINTERN void std_vector_Sl_double_Sg____delitem____SWIG_1(std::vector< double > *self,SWIGPY_SLICEOBJECT *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(slice, (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector< double,std::allocator< double > >::difference_type id = i;
      std::vector< double,std::allocator< double > >::difference_type jd = j;
      swig::delslice(self, id, jd, step);
    }
SWIGINTERN std::vector< double >::value_type const &std_vector_Sl_double_Sg____getitem____SWIG_1(std::vector< double > const *self,std::vector< double >::difference_type i){
      return *(swig::cgetpos(self, i));
    }
SWIGINTERN void std_vector_Sl_double_Sg____setitem____SWIG_2(std::vector< double > *self,std::vector< double >::difference_type i,std::vector< double >::value_type const &x){
      *(swig::getpos(self,i)) = x;
    }
SWIGINTERN std::vector< double >::value_type std_vector_Sl_double_Sg__pop(std::vector< double > *self){
      if (self->size() == 0)
	throw std::out_of_range("pop from empty container");
      std::vector< double,std::allocator< double > >::value_type x = self->back();
      self->pop_back();
      return x;
    }
SWIGINTERN void std_vector_Sl_double_Sg__append(std::vector< double > *self,std::vector< double >::value_type const &x){
      self->push_back(x);
    }
SWIGINTERN std::vector< double >::iterator std_vector_Sl_double_Sg__erase__SWIG_0(std::vector< double > *self,std::vector< double >::iterator pos){ return self->erase(pos); }
SWIGINTERN std::vector< double >::iterator std_vector_Sl_double_Sg__erase__SWIG_1(std::vector< double > *self,std::vector< double >::iterator first,std::vector< double >::iterator last){ return self->erase(first, last); }
SWIGINTERN std::vector< double >::iterator std_vector_Sl_double_Sg__insert__SWIG_0(std::vector< double > *self,std::vector< double >::iterator pos,std::vector< double >::value_type const &x){ return self->insert(pos, x); }
SWIGINTERN void std_vector_Sl_double_Sg__insert__SWIG_1(std::vector< double > *self,std::vector< double >::iterator pos,std::vector< double >::size_type n,std::vector< double >::value_type const &x){ self->insert(pos, n, x); }

      namespace swig {
	template <>  struct traits<std::vector< std::vector< double,std::allocator< double > >, std::allocator< std::vector< double,std::allocator< double > > > > > {
	  typedef pointer_category category;
	  static const char* type_name() {
	    return "std::vector<" "std::vector< double,std::allocator< double > >" "," "std::allocator< std::vector< double,std::allocator< double > > >" " >";
	  }
	};
      }
    
SWIGINTERN swig::SwigPyIterator *std_vector_Sl_std_vector_Sl_double_Sg__Sg__iterator(std::vector< std::vector< double > > *self,PyObject **PYTHON_SELF){
      return swig::make_output_iterator(self->begin(), self->begin(), self->end(), *PYTHON_SELF);
    }
SWIGINTERN bool std_vector_Sl_std_vector_Sl_double_Sg__Sg____nonzero__(std::vector< std::vector< double > > const *self){
      return !(self->empty());
    }
SWIGINTERN bool std_vector_Sl_std_vector_Sl_double_Sg__Sg____bool__(std::vector< std::vector< double > > const *self){
      return !(self->empty());
    }
SWIGINTERN std::vector< std::vector< double > >::size_type std_vector_Sl_std_vector_Sl_double_Sg__Sg____len__(std::vector< std::vector< double > > const *self){
      return self->size();
    }
SWIGINTERN std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > > *std_vector_Sl_std_vector_Sl_double_Sg__Sg____getslice__(std::vector< std::vector< double > > *self,std::vector< std::vector< double > >::difference_type i,std::vector< std::vector< double > >::difference_type j){
      return swig::getslice(self, i, j, 1);
    }
SWIGINTERN void std_vector_Sl_std_vector_Sl_double_Sg__Sg____setslice____SWIG_0(std::vector< std::vector< double > > *self,std::vector< std::vector< double > >::difference_type i,std::vector< std::vector< double > >::difference_type j){
      swig::setslice(self, i, j, 1, std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > >());
    }
SWIGINTERN void std_vector_Sl_std_vector_Sl_double_Sg__Sg____setslice____SWIG_1(std::vector< std::vector< double > > *self,std::vector< std::vector< double > >::difference_type i,std::vector< std::vector< double > >::difference_type j,std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > > const &v){
      swig::setslice(self, i, j, 1, v);
    }
SWIGINTERN void std_vector_Sl_std_vector_Sl_double_Sg__Sg____delslice__(std::vector< std::vector< double > > *self,std::vector< std::vector< double > >::difference_type i,std::vector< std::vector< double > >::difference_type j){
      swig::delslice(self, i, j, 1);
    }
SWIGINTERN void std_vector_Sl_std_vector_Sl_double_Sg__Sg____delitem____SWIG_0(std::vector< std::vector< double > > *self,std::vector< std::vector< double > >::difference_type i){
      swig::erase(self, swig::getpos(self, i));
    }
SWIGINTERN std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > > *std_vector_Sl_std_vector_Sl_double_Sg__Sg____getitem____SWIG_0(std::vector< std::vector< double > > *self,SWIGPY_SLICEOBJECT *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return NULL;
      }
      PySlice_GetIndices(slice, (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > >::difference_type id = i;
      std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > >::difference_type jd = j;
      return swig::getslice(self, id, jd, step);
    }
SWIGINTERN void std_vector_Sl_std_vector_Sl_double_Sg__Sg____setitem____SWIG_0(std::vector< std::vector< double > > *self,SWIGPY_SLICEOBJECT *slice,std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > > const &v){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(slice, (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > >::difference_type id = i;
      std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > >::difference_type jd = j;
      swig::setslice(self, id, jd, step, v);
    }
SWIGINTERN void std_vector_Sl_std_vector_Sl_double_Sg__Sg____setitem____SWIG_1(std::vector< std::vector< double > > *self,SWIGPY_SLICEOBJECT *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(slice, (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > >::difference_type id = i;
      std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > >::difference_type jd = j;
      swig::delslice(self, id, jd, step);
    }
SWIGINTERN void std_vector_Sl_std_vector_Sl_double_Sg__Sg____delitem____SWIG_1(std::vector< std::vector< double > > *self,SWIGPY_SLICEOBJECT *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(slice, (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > >::difference_type id = i;
      std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > >::difference_type jd = j;
      swig::delslice(self, id, jd, step);
    }
SWIGINTERN std::vector< std::vector< double > >::value_type const &std_vector_Sl_std_vector_Sl_double_Sg__Sg____getitem____SWIG_1(std::vector< std::vector< double > > const *self,std::vector< std::vector< double > >::difference_type i){
      return *(swig::cgetpos(self, i));
    }
SWIGINTERN void std_vector_Sl_std_vector_Sl_double_Sg__Sg____setitem____SWIG_2(std::vector< std::vector< double > > *self,std::vector< std::vector< double > >::difference_type i,std::vector< std::vector< double > >::value_type const &x){
      *(swig::getpos(self,i)) = x;
    }
SWIGINTERN std::vector< std::vector< double > >::value_type std_vector_Sl_std_vector_Sl_double_Sg__Sg__pop(std::vector< std::vector< double > > *self){
      if (self->size() == 0)
	throw std::out_of_range("pop from empty container");
      std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > >::value_type x = self->back();
      self->pop_back();
      return x;
    }
SWIGINTERN void std_vector_Sl_std_vector_Sl_double_Sg__Sg__append(std::vector< std::vector< double > > *self,std::vector< std::vector< double > >::value_type const &x){
      self->push_back(x);
    }
SWIGINTERN std::vector< std::vector< double > >::iterator std_vector_Sl_std_vector_Sl_double_Sg__Sg__erase__SWIG_0(std::vector< std::vector< double > > *self,std::vector< std::vector< double > >::iterator pos){ return self->erase(pos); }
SWIGINTERN std::vector< std::vector< double > >::iterator std_vector_Sl_std_vector_Sl_double_Sg__Sg__erase__SWIG_1(std::vector< std::vector< double > > *self,std::vector< std::vector< double > >::iterator first,std::vector< std::vector< double > >::iterator last){ return self->erase(first, last); }
SWIGINTERN std::vector< std::vector< double > >::iterator std_vector_Sl_std_vector_Sl_double_Sg__Sg__insert__SWIG_0(std::vector< std::vector< double > > *self,std::vector< std::vector< double > >::iterator pos,std::vector< std::vector< double > >::value_type const &x){ return self->insert(pos, x); }
SWIGINTERN void std_vector_Sl_std_vector_Sl_double_Sg__Sg__insert__SWIG_1(std::vector< std::vector< double > > *self,std::vector< std::vector< double > >::iterator pos,std::vector< std::vector< double > >::size_type n,std::vector< std::vector< double > >::value_type const &x){ self->insert(pos, n, x); }

SWIGINTERN swig_type_info*
SWIG_pchar_descriptor(void)
{
  static int init = 0;
  static swig_type_info* info = 0;
  if (!init) {
    info = SWIG_TypeQuery("_p_char");
    init = 1;
  }
  return info;
}


SWIGINTERNINLINE PyObject *
SWIG_FromCharPtrAndSize(const char* carray, size_t size)
{
  if (carray) {
    if (size > INT_MAX) {
      swig_type_info* pchar_descriptor = SWIG_pchar_descriptor();
      return pchar_descriptor ? 
	SWIG_InternalNewPointerObj(const_cast< char * >(carray), pchar_descriptor, 0) : SWIG_Py_Void();
    } else {
#if PY_VERSION_HEX >= 0x03000000
#if defined(SWIG_PYTHON_STRICT_BYTE_CHAR)
      return PyBytes_FromStringAndSize(carray, static_cast< Py_ssize_t >(size));
#else
      return PyUnicode_DecodeUTF8(carray, static_cast< Py_ssize_t >(size), "surrogateescape");
#endif
#else
      return PyString_FromStringAndSize(carray, static_cast< Py_ssize_t >(size));
#endif
    }
  } else {
    return SWIG_Py_Void();
  }
}


SWIGINTERNINLINE PyObject *
SWIG_From_std_string  (const std::string& s)
{
  return SWIG_FromCharPtrAndSize(s.data(), s.size());
}


#include <memory>

SWIGINTERN eilig::String eilig_Vector___str__(eilig::Vector const *self){
        return eilig::ListVector(*self);
    }
SWIGINTERN eilig::Vector eilig_Vector___radd__(eilig::Vector const *self,eilig::Scalar value){
        return value + (*self);
    }
SWIGINTERN eilig::Vector eilig_Vector___rsub__(eilig::Vector const *self,eilig::Scalar value){
        return value - (*self);
    }
SWIGINTERN eilig::Vector eilig_Vector___rmul__(eilig::Vector const *self,eilig::Scalar value){
        return value * (*self);
    }

SWIGINTERN int
SWIG_AsVal_bool (PyObject *obj, bool *val)
{
  int r;
  if (!PyBool_Check(obj))
    return SWIG_ERROR;
  r = PyObject_IsTrue(obj);
  if (r == -1)
    return SWIG_ERROR;
  if (val) *val = r ? true : false;
  return SWIG_OK;
}

SWIGINTERN eilig::String eilig_Matrix___str__(eilig::Matrix const *self){
        return eilig::ListMatrix(*self);
    }
SWIGINTERN eilig::Matrix eilig_Matrix___radd__(eilig::Matrix const *self,eilig::Scalar value){
        return value + (*self);
    }
SWIGINTERN eilig::Matrix eilig_Matrix___rsub__(eilig::Matrix const *self,eilig::Scalar value){
        return value - (*self);
    }
SWIGINTERN eilig::Matrix eilig_Matrix___rmul__(eilig::Matrix const *self,eilig::Scalar value){
        return value * (*self);
    }
SWIGINTERN eilig::String eilig_Ellpack___str__(eilig::Ellpack const *self){
        return eilig::ListMatrix(*self);
    }
SWIGINTERN eilig::Ellpack eilig_Ellpack___radd__(eilig::Ellpack const *self,eilig::Scalar value){
        return value + (*self);
    }
SWIGINTERN eilig::Ellpack eilig_Ellpack___rsub__(eilig::Ellpack const *self,eilig::Scalar value){
        return value - (*self);
    }
SWIGINTERN eilig::Ellpack eilig_Ellpack___rmul__(eilig::Ellpack const *self,eilig::Scalar value){
        return value * (*self);
    }

/* Return string from Python obj. NOTE: obj must remain in scope in order
   to use the returned cptr (but only when alloc is set to SWIG_OLDOBJ) */
SWIGINTERN int
SWIG_AsCharPtrAndSize(PyObject *obj, char **cptr, size_t *psize, int *alloc)
{
#if PY_VERSION_HEX>=0x03000000
#if defined(SWIG_PYTHON_STRICT_BYTE_CHAR)
  if (PyBytes_Check(obj))
#else
  if (PyUnicode_Check(obj))
#endif
#else  
  if (PyString_Check(obj))
#endif
  {
    char *cstr; Py_ssize_t len;
    PyObject *bytes = NULL;
    int ret = SWIG_OK;
    if (alloc)
      *alloc = SWIG_OLDOBJ;
#if PY_VERSION_HEX>=0x03000000 && defined(SWIG_PYTHON_STRICT_BYTE_CHAR)
    if (PyBytes_AsStringAndSize(obj, &cstr, &len) == -1)
      return SWIG_TypeError;
#else
    cstr = (char *)SWIG_PyUnicode_AsUTF8AndSize(obj, &len, &bytes);
    if (!cstr)
      return SWIG_TypeError;
    /* The returned string is only duplicated if the char * returned is not owned and memory managed by obj */
    if (bytes && cptr) {
      if (alloc) {
        cstr = reinterpret_cast< char* >(memcpy(new char[len + 1], cstr, sizeof(char)*(len + 1)));
        *alloc = SWIG_NEWOBJ;
      } else {
        /* alloc must be set in order to clean up allocated memory */
        return SWIG_RuntimeError;
      }
    }
#endif
    if (cptr) *cptr = cstr;
    if (psize) *psize = len + 1;
    Py_XDECREF(bytes);
    return ret;
  } else {
#if defined(SWIG_PYTHON_2_UNICODE)
#if defined(SWIG_PYTHON_STRICT_BYTE_CHAR)
#error "Cannot use both SWIG_PYTHON_2_UNICODE and SWIG_PYTHON_STRICT_BYTE_CHAR at once"
#endif
#if PY_VERSION_HEX<0x03000000
    if (PyUnicode_Check(obj)) {
      char *cstr; Py_ssize_t len;
      if (!alloc && cptr) {
        return SWIG_RuntimeError;
      }
      obj = PyUnicode_AsUTF8String(obj);
      if (!obj)
        return SWIG_TypeError;
      if (PyString_AsStringAndSize(obj, &cstr, &len) != -1) {
        if (cptr) {
          if (alloc) *alloc = SWIG_NEWOBJ;
          *cptr = reinterpret_cast< char* >(memcpy(new char[len + 1], cstr, sizeof(char)*(len + 1)));
        }
        if (psize) *psize = len + 1;

        Py_XDECREF(obj);
        return SWIG_OK;
      } else {
        Py_XDECREF(obj);
      }
    }
#endif
#endif

    swig_type_info* pchar_descriptor = SWIG_pchar_descriptor();
    if (pchar_descriptor) {
      void* vptr = 0;
      if (SWIG_ConvertPtr(obj, &vptr, pchar_descriptor, 0) == SWIG_OK) {
	if (cptr) *cptr = (char *) vptr;
	if (psize) *psize = vptr ? (strlen((char *)vptr) + 1) : 0;
	if (alloc) *alloc = SWIG_OLDOBJ;
	return SWIG_OK;
      }
    }
  }
  return SWIG_TypeError;
}


SWIGINTERN int
SWIG_AsPtr_std_string (PyObject * obj, std::string **val) 
{
  char* buf = 0 ; size_t size = 0; int alloc = SWIG_OLDOBJ;
  if (SWIG_IsOK((SWIG_AsCharPtrAndSize(obj, &buf, &size, &alloc)))) {
    if (buf) {
      if (val) *val = new std::string(buf, size - 1);
      if (alloc == SWIG_NEWOBJ) delete[] buf;
      return SWIG_NEWOBJ;
    } else {
      if (val) *val = 0;
      return SWIG_OLDOBJ;
    }
  } else {
    static int init = 0;
    static swig_type_info* descriptor = 0;
    if (!init) {
      descriptor = SWIG_TypeQuery("std::string" " *");
      init = 1;
    }
    if (descriptor) {
      std::string *vptr;
      int res = SWIG_ConvertPtr(obj, (void**)&vptr, descriptor, 0);
      if (SWIG_IsOK(res) && val) *val = vptr;
      return res;
    }
  }
  return SWIG_ERROR;
}


	#include "basis_types.hpp"
	#include "basis_cartesian.hpp"		
	#include "basis_cylindrical.hpp"		
	
	typedef std::shared_ptr<basis::IBasis> IBasisPtr;
	typedef std::shared_ptr<const basis::IBasis> ConstIBasisPtr;

	typedef std::shared_ptr<basis::Cartesian> CartesianPtr;
	typedef std::shared_ptr<const basis::Cartesian> ConstCartesianPtr;

	typedef std::shared_ptr<basis::Cylindrical> CylindricalPtr;
	typedef std::shared_ptr<const basis::Cylindrical> ConstCylindricalPtr;


  namespace swig {
    template <>  struct traits< std::shared_ptr< basis::IBasis > > {
      typedef pointer_category category;
      static const char* type_name() { return"std::shared_ptr< basis::IBasis >"; }
    };
  }


      namespace swig {
	template <>  struct traits<std::vector< std::shared_ptr< basis::IBasis >, std::allocator< std::shared_ptr< basis::IBasis > > > > {
	  typedef pointer_category category;
	  static const char* type_name() {
	    return "std::vector<" "std::shared_ptr< basis::IBasis >" "," "std::allocator< std::shared_ptr< basis::IBasis > >" " >";
	  }
	};
      }
    
SWIGINTERN swig::SwigPyIterator *std_vector_Sl_std_shared_ptr_Sl_basis_IBasis_Sg__Sg__iterator(std::vector< std::shared_ptr< basis::IBasis > > *self,PyObject **PYTHON_SELF){
      return swig::make_output_iterator(self->begin(), self->begin(), self->end(), *PYTHON_SELF);
    }
SWIGINTERN bool std_vector_Sl_std_shared_ptr_Sl_basis_IBasis_Sg__Sg____nonzero__(std::vector< std::shared_ptr< basis::IBasis > > const *self){
      return !(self->empty());
    }
SWIGINTERN bool std_vector_Sl_std_shared_ptr_Sl_basis_IBasis_Sg__Sg____bool__(std::vector< std::shared_ptr< basis::IBasis > > const *self){
      return !(self->empty());
    }
SWIGINTERN std::vector< std::shared_ptr< basis::IBasis > >::size_type std_vector_Sl_std_shared_ptr_Sl_basis_IBasis_Sg__Sg____len__(std::vector< std::shared_ptr< basis::IBasis > > const *self){
      return self->size();
    }
SWIGINTERN std::vector< std::shared_ptr< basis::IBasis >,std::allocator< std::shared_ptr< basis::IBasis > > > *std_vector_Sl_std_shared_ptr_Sl_basis_IBasis_Sg__Sg____getslice__(std::vector< std::shared_ptr< basis::IBasis > > *self,std::vector< std::shared_ptr< basis::IBasis > >::difference_type i,std::vector< std::shared_ptr< basis::IBasis > >::difference_type j){
      return swig::getslice(self, i, j, 1);
    }
SWIGINTERN void std_vector_Sl_std_shared_ptr_Sl_basis_IBasis_Sg__Sg____setslice____SWIG_0(std::vector< std::shared_ptr< basis::IBasis > > *self,std::vector< std::shared_ptr< basis::IBasis > >::difference_type i,std::vector< std::shared_ptr< basis::IBasis > >::difference_type j){
      swig::setslice(self, i, j, 1, std::vector< std::shared_ptr< basis::IBasis >,std::allocator< std::shared_ptr< basis::IBasis > > >());
    }
SWIGINTERN void std_vector_Sl_std_shared_ptr_Sl_basis_IBasis_Sg__Sg____setslice____SWIG_1(std::vector< std::shared_ptr< basis::IBasis > > *self,std::vector< std::shared_ptr< basis::IBasis > >::difference_type i,std::vector< std::shared_ptr< basis::IBasis > >::difference_type j,std::vector< std::shared_ptr< basis::IBasis >,std::allocator< std::shared_ptr< basis::IBasis > > > const &v){
      swig::setslice(self, i, j, 1, v);
    }
SWIGINTERN void std_vector_Sl_std_shared_ptr_Sl_basis_IBasis_Sg__Sg____delslice__(std::vector< std::shared_ptr< basis::IBasis > > *self,std::vector< std::shared_ptr< basis::IBasis > >::difference_type i,std::vector< std::shared_ptr< basis::IBasis > >::difference_type j){
      swig::delslice(self, i, j, 1);
    }
SWIGINTERN void std_vector_Sl_std_shared_ptr_Sl_basis_IBasis_Sg__Sg____delitem____SWIG_0(std::vector< std::shared_ptr< basis::IBasis > > *self,std::vector< std::shared_ptr< basis::IBasis > >::difference_type i){
      swig::erase(self, swig::getpos(self, i));
    }
SWIGINTERN std::vector< std::shared_ptr< basis::IBasis >,std::allocator< std::shared_ptr< basis::IBasis > > > *std_vector_Sl_std_shared_ptr_Sl_basis_IBasis_Sg__Sg____getitem____SWIG_0(std::vector< std::shared_ptr< basis::IBasis > > *self,SWIGPY_SLICEOBJECT *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return NULL;
      }
      PySlice_GetIndices(slice, (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector< std::shared_ptr< basis::IBasis >,std::allocator< std::shared_ptr< basis::IBasis > > >::difference_type id = i;
      std::vector< std::shared_ptr< basis::IBasis >,std::allocator< std::shared_ptr< basis::IBasis > > >::difference_type jd = j;
      return swig::getslice(self, id, jd, step);
    }
SWIGINTERN void std_vector_Sl_std_shared_ptr_Sl_basis_IBasis_Sg__Sg____setitem____SWIG_0(std::vector< std::shared_ptr< basis::IBasis > > *self,SWIGPY_SLICEOBJECT *slice,std::vector< std::shared_ptr< basis::IBasis >,std::allocator< std::shared_ptr< basis::IBasis > > > const &v){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(slice, (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector< std::shared_ptr< basis::IBasis >,std::allocator< std::shared_ptr< basis::IBasis > > >::difference_type id = i;
      std::vector< std::shared_ptr< basis::IBasis >,std::allocator< std::shared_ptr< basis::IBasis > > >::difference_type jd = j;
      swig::setslice(self, id, jd, step, v);
    }
SWIGINTERN void std_vector_Sl_std_shared_ptr_Sl_basis_IBasis_Sg__Sg____setitem____SWIG_1(std::vector< std::shared_ptr< basis::IBasis > > *self,SWIGPY_SLICEOBJECT *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(slice, (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector< std::shared_ptr< basis::IBasis >,std::allocator< std::shared_ptr< basis::IBasis > > >::difference_type id = i;
      std::vector< std::shared_ptr< basis::IBasis >,std::allocator< std::shared_ptr< basis::IBasis > > >::difference_type jd = j;
      swig::delslice(self, id, jd, step);
    }
SWIGINTERN void std_vector_Sl_std_shared_ptr_Sl_basis_IBasis_Sg__Sg____delitem____SWIG_1(std::vector< std::shared_ptr< basis::IBasis > > *self,SWIGPY_SLICEOBJECT *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(slice, (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector< std::shared_ptr< basis::IBasis >,std::allocator< std::shared_ptr< basis::IBasis > > >::difference_type id = i;
      std::vector< std::shared_ptr< basis::IBasis >,std::allocator< std::shared_ptr< basis::IBasis > > >::difference_type jd = j;
      swig::delslice(self, id, jd, step);
    }
SWIGINTERN std::vector< std::shared_ptr< basis::IBasis > >::value_type const &std_vector_Sl_std_shared_ptr_Sl_basis_IBasis_Sg__Sg____getitem____SWIG_1(std::vector< std::shared_ptr< basis::IBasis > > const *self,std::vector< std::shared_ptr< basis::IBasis > >::difference_type i){
      return *(swig::cgetpos(self, i));
    }
SWIGINTERN void std_vector_Sl_std_shared_ptr_Sl_basis_IBasis_Sg__Sg____setitem____SWIG_2(std::vector< std::shared_ptr< basis::IBasis > > *self,std::vector< std::shared_ptr< basis::IBasis > >::difference_type i,std::vector< std::shared_ptr< basis::IBasis > >::value_type const &x){
      *(swig::getpos(self,i)) = x;
    }
SWIGINTERN std::vector< std::shared_ptr< basis::IBasis > >::value_type std_vector_Sl_std_shared_ptr_Sl_basis_IBasis_Sg__Sg__pop(std::vector< std::shared_ptr< basis::IBasis > > *self){
      if (self->size() == 0)
	throw std::out_of_range("pop from empty container");
      std::vector< std::shared_ptr< basis::IBasis >,std::allocator< std::shared_ptr< basis::IBasis > > >::value_type x = self->back();
      self->pop_back();
      return x;
    }
SWIGINTERN void std_vector_Sl_std_shared_ptr_Sl_basis_IBasis_Sg__Sg__append(std::vector< std::shared_ptr< basis::IBasis > > *self,std::vector< std::shared_ptr< basis::IBasis > >::value_type const &x){
      self->push_back(x);
    }
SWIGINTERN std::vector< std::shared_ptr< basis::IBasis > >::iterator std_vector_Sl_std_shared_ptr_Sl_basis_IBasis_Sg__Sg__erase__SWIG_0(std::vector< std::shared_ptr< basis::IBasis > > *self,std::vector< std::shared_ptr< basis::IBasis > >::iterator pos){ return self->erase(pos); }
SWIGINTERN std::vector< std::shared_ptr< basis::IBasis > >::iterator std_vector_Sl_std_shared_ptr_Sl_basis_IBasis_Sg__Sg__erase__SWIG_1(std::vector< std::shared_ptr< basis::IBasis > > *self,std::vector< std::shared_ptr< basis::IBasis > >::iterator first,std::vector< std::shared_ptr< basis::IBasis > >::iterator last){ return self->erase(first, last); }
SWIGINTERN std::vector< std::shared_ptr< basis::IBasis > >::iterator std_vector_Sl_std_shared_ptr_Sl_basis_IBasis_Sg__Sg__insert__SWIG_0(std::vector< std::shared_ptr< basis::IBasis > > *self,std::vector< std::shared_ptr< basis::IBasis > >::iterator pos,std::vector< std::shared_ptr< basis::IBasis > >::value_type const &x){ return self->insert(pos, x); }
SWIGINTERN void std_vector_Sl_std_shared_ptr_Sl_basis_IBasis_Sg__Sg__insert__SWIG_1(std::vector< std::shared_ptr< basis::IBasis > > *self,std::vector< std::shared_ptr< basis::IBasis > >::iterator pos,std::vector< std::shared_ptr< basis::IBasis > >::size_type n,std::vector< std::shared_ptr< basis::IBasis > >::value_type const &x){ self->insert(pos, n, x); }

	#include "dive_timers.hpp"
	#include "dive_timers_stationary.hpp"
	#include "dive_timers_stepped.hpp"

	typedef std::shared_ptr<dive::timers::ITimer> ITimerPtr;
	typedef std::shared_ptr<const dive::timers::ITimer> ConstITimerPtr;

	typedef std::shared_ptr<dive::timers::TimerStationary> TimerStationaryPtr;
	typedef std::shared_ptr<const dive::timers::TimerStationary> ConstTimerStationaryPtr;

	typedef std::shared_ptr<dive::timers::TimerStepped> TimerSteppedPtr;
	typedef std::shared_ptr<const dive::timers::TimerStepped> ConstTimerSteppedPtr;


	#include "values_types.hpp"
	#include "values_base.hpp"
	#include "values_bool.hpp"
	#include "values_scalar.hpp"
	#include "values_scalar_function.hpp"
	#include "values_scalar_interpolation.hpp"
	#include "values_vector.hpp"
	#include "values_matrix_interpolation.hpp"
	#include "values_string.hpp"

	#include "dive_values_scalar_congruent.hpp"
	#include "dive_values_matrix_congruent.hpp"
	#include "dive_values_vector_congruent.hpp"

	typedef std::shared_ptr<values::IValue> IValuePtr;
	typedef std::shared_ptr<values::IBool> IBoolPtr;
	typedef std::shared_ptr<values::IScalar> IScalarPtr;
	typedef std::shared_ptr<values::IScalar1D> IScalar1DPtr;
	typedef std::shared_ptr<values::IScalar2D> IScalar2DPtr;
	typedef std::shared_ptr<values::IScalar3D> IScalar3DPtr;
	typedef std::shared_ptr<values::IVector3D> IVector3DPtr;
	typedef std::shared_ptr<values::IMatrix3D> IMatrix3DPtr;
	typedef std::shared_ptr<values::IString> IStringPtr;
	
	typedef std::shared_ptr<values::ValueBool> ValueBoolPtr;
	typedef std::shared_ptr<values::ValueScalar> ValueScalarPtr;
	typedef std::shared_ptr<values::ValueScalar> ValueScalarPtr;
	typedef std::shared_ptr<values::ValueScalar1D> ValueScalar1DPtr;
	typedef std::shared_ptr<values::ValueScalar1DFunction> ValueScalar1DFunctionPtr;	
	typedef std::shared_ptr<values::ValueScalar2D> ValueScalar2DPtr;
	typedef std::shared_ptr<values::ValueScalar2DFunction> ValueScalar2DFunctionPtr;	
	typedef std::shared_ptr<values::ValueScalar3D> ValueScalar3DPtr;
	typedef std::shared_ptr<values::ValueScalar3DFunction> ValueScalar3DFunctionPtr;
	typedef std::shared_ptr<values::ValueScalar3DInterpolation> ValueScalar3DInterpolationPtr;
	typedef std::shared_ptr<values::ValueScalar3DCongruent> ValueScalar3DCongruentPtr;	
	typedef std::shared_ptr<values::ValueVector3D> ValueVector3DPtr;
	typedef std::shared_ptr<values::ValueVector3DCongruent> ValueVector3DCongruentPtr;
	typedef std::shared_ptr<values::ValueMatrix3DInterpolation> ValueMatrix3DInterpolationPtr;
	typedef std::shared_ptr<values::ValueMatrix3DCongruent> ValueMatrix3DCongruentPtr;	
	typedef std::shared_ptr<values::ValueString> ValueStringPtr;


	#include "quadrature_types.hpp"
	#include "quadrature_gauss.hpp"

	typedef std::shared_ptr<quadrature::IGauss> IGaussPtr;
	typedef std::shared_ptr<const quadrature::IGauss> ConstIGaussPtr;
	
	typedef std::shared_ptr<quadrature::GaussHexa> GaussHexaPtr;
	typedef std::shared_ptr<const quadrature::GaussHexa> ConstGaussHexaPtr;

	typedef std::shared_ptr<quadrature::GaussRect> GaussRectPtr;
	typedef std::shared_ptr<const quadrature::GaussRect> ConstGaussRectPtr;
	
	typedef std::shared_ptr<quadrature::GaussLine> GaussLinePtr;
	typedef std::shared_ptr<const quadrature::GaussLine> ConstGaussLinePtr;


	#include "interpolation_types.hpp"
	#include "interpolation_fixed.hpp"
	#include "interpolation_idw.hpp"
	#include "interpolation_nn.hpp"
	#include "interpolation_rbf.hpp"

	typedef std::shared_ptr<interpolation::IInterpolation> IInterpolationPtr;
	typedef std::shared_ptr<const interpolation::IInterpolation> ConstIInterpolationPtr;

	typedef std::shared_ptr<interpolation::InterpolationFixed> InterpolationFixedPtr;
	typedef std::shared_ptr<const interpolation::InterpolationFixed> ConstInterpolationFixedPtr;
	
	typedef std::shared_ptr<interpolation::InterpolationIDW> InterpolationIDWPtr;
	typedef std::shared_ptr<const interpolation::InterpolationIDW> ConstInterpolationIDWPtr;	
	
	typedef std::shared_ptr<interpolation::InterpolationNN> InterpolationNNPtr;
	typedef std::shared_ptr<const interpolation::InterpolationNN> ConstInterpolationNNPtr;		
	
	typedef std::shared_ptr<interpolation::InterpolationRBF> InterpolationRBFPtr;
	typedef std::shared_ptr<const interpolation::InterpolationRBF> ConstInterpolationRBFPtr;			


	#include "material_types.hpp"
	#include "material_base.hpp"
	#include "material_fluid.hpp"
	#include "material_solid.hpp"

	typedef std::shared_ptr<material::IBase> IBasePtr;
	typedef std::shared_ptr<const material::IBase> ConstIBasePtr;
	
	typedef std::shared_ptr<material::IMaterial> IMaterialPtr;
	typedef std::shared_ptr<const material::IMaterial> ConstIMaterialPtr;
	
	typedef std::shared_ptr<material::IMaterialFluid> IMaterialFluidPtr;
	typedef std::shared_ptr<const material::IMaterialFluid> ConstIMaterialFluidPtr;	
	
	typedef std::shared_ptr<material::IMaterialSolid> IMaterialSolidPtr;
	typedef std::shared_ptr<const material::IMaterialSolid> ConstIMaterialSolidPtr;	
	
	typedef std::shared_ptr<material::MaterialSolid> MaterialSolidPtr;
	typedef std::shared_ptr<const material::MaterialSolid> ConstMaterialSolidPtr;	
	
	typedef std::shared_ptr<material::MaterialFluid> MaterialFluidPtr;
	typedef std::shared_ptr<const material::MaterialFluid> ConstMaterialFluidPtr;		


	#include "dive_routines.hpp"


	#include "nodes_types.hpp"
	#include "nodes_basic.hpp"

	typedef std::shared_ptr<nodes::INode> INodePtr;
	typedef std::shared_ptr<const nodes::INode> ConstINodePtr;
	
	typedef std::shared_ptr<nodes::Node> NodePtr;
	typedef std::shared_ptr<const nodes::Node> ConstNodePtr;

	typedef std::vector<nodes::INodePtr> Nodes;	


  namespace swig {
    template <>  struct traits< std::shared_ptr< nodes::INode > > {
      typedef pointer_category category;
      static const char* type_name() { return"std::shared_ptr< nodes::INode >"; }
    };
  }


      namespace swig {
	template <>  struct traits<std::vector< std::shared_ptr< nodes::INode >, std::allocator< std::shared_ptr< nodes::INode > > > > {
	  typedef pointer_category category;
	  static const char* type_name() {
	    return "std::vector<" "std::shared_ptr< nodes::INode >" "," "std::allocator< std::shared_ptr< nodes::INode > >" " >";
	  }
	};
      }
    
SWIGINTERN swig::SwigPyIterator *std_vector_Sl_std_shared_ptr_Sl_nodes_INode_Sg__Sg__iterator(std::vector< std::shared_ptr< nodes::INode > > *self,PyObject **PYTHON_SELF){
      return swig::make_output_iterator(self->begin(), self->begin(), self->end(), *PYTHON_SELF);
    }
SWIGINTERN bool std_vector_Sl_std_shared_ptr_Sl_nodes_INode_Sg__Sg____nonzero__(std::vector< std::shared_ptr< nodes::INode > > const *self){
      return !(self->empty());
    }
SWIGINTERN bool std_vector_Sl_std_shared_ptr_Sl_nodes_INode_Sg__Sg____bool__(std::vector< std::shared_ptr< nodes::INode > > const *self){
      return !(self->empty());
    }
SWIGINTERN std::vector< std::shared_ptr< nodes::INode > >::size_type std_vector_Sl_std_shared_ptr_Sl_nodes_INode_Sg__Sg____len__(std::vector< std::shared_ptr< nodes::INode > > const *self){
      return self->size();
    }
SWIGINTERN std::vector< std::shared_ptr< nodes::INode >,std::allocator< std::shared_ptr< nodes::INode > > > *std_vector_Sl_std_shared_ptr_Sl_nodes_INode_Sg__Sg____getslice__(std::vector< std::shared_ptr< nodes::INode > > *self,std::vector< std::shared_ptr< nodes::INode > >::difference_type i,std::vector< std::shared_ptr< nodes::INode > >::difference_type j){
      return swig::getslice(self, i, j, 1);
    }
SWIGINTERN void std_vector_Sl_std_shared_ptr_Sl_nodes_INode_Sg__Sg____setslice____SWIG_0(std::vector< std::shared_ptr< nodes::INode > > *self,std::vector< std::shared_ptr< nodes::INode > >::difference_type i,std::vector< std::shared_ptr< nodes::INode > >::difference_type j){
      swig::setslice(self, i, j, 1, std::vector< std::shared_ptr< nodes::INode >,std::allocator< std::shared_ptr< nodes::INode > > >());
    }
SWIGINTERN void std_vector_Sl_std_shared_ptr_Sl_nodes_INode_Sg__Sg____setslice____SWIG_1(std::vector< std::shared_ptr< nodes::INode > > *self,std::vector< std::shared_ptr< nodes::INode > >::difference_type i,std::vector< std::shared_ptr< nodes::INode > >::difference_type j,std::vector< std::shared_ptr< nodes::INode >,std::allocator< std::shared_ptr< nodes::INode > > > const &v){
      swig::setslice(self, i, j, 1, v);
    }
SWIGINTERN void std_vector_Sl_std_shared_ptr_Sl_nodes_INode_Sg__Sg____delslice__(std::vector< std::shared_ptr< nodes::INode > > *self,std::vector< std::shared_ptr< nodes::INode > >::difference_type i,std::vector< std::shared_ptr< nodes::INode > >::difference_type j){
      swig::delslice(self, i, j, 1);
    }
SWIGINTERN void std_vector_Sl_std_shared_ptr_Sl_nodes_INode_Sg__Sg____delitem____SWIG_0(std::vector< std::shared_ptr< nodes::INode > > *self,std::vector< std::shared_ptr< nodes::INode > >::difference_type i){
      swig::erase(self, swig::getpos(self, i));
    }
SWIGINTERN std::vector< std::shared_ptr< nodes::INode >,std::allocator< std::shared_ptr< nodes::INode > > > *std_vector_Sl_std_shared_ptr_Sl_nodes_INode_Sg__Sg____getitem____SWIG_0(std::vector< std::shared_ptr< nodes::INode > > *self,SWIGPY_SLICEOBJECT *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return NULL;
      }
      PySlice_GetIndices(slice, (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector< std::shared_ptr< nodes::INode >,std::allocator< std::shared_ptr< nodes::INode > > >::difference_type id = i;
      std::vector< std::shared_ptr< nodes::INode >,std::allocator< std::shared_ptr< nodes::INode > > >::difference_type jd = j;
      return swig::getslice(self, id, jd, step);
    }
SWIGINTERN void std_vector_Sl_std_shared_ptr_Sl_nodes_INode_Sg__Sg____setitem____SWIG_0(std::vector< std::shared_ptr< nodes::INode > > *self,SWIGPY_SLICEOBJECT *slice,std::vector< std::shared_ptr< nodes::INode >,std::allocator< std::shared_ptr< nodes::INode > > > const &v){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(slice, (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector< std::shared_ptr< nodes::INode >,std::allocator< std::shared_ptr< nodes::INode > > >::difference_type id = i;
      std::vector< std::shared_ptr< nodes::INode >,std::allocator< std::shared_ptr< nodes::INode > > >::difference_type jd = j;
      swig::setslice(self, id, jd, step, v);
    }
SWIGINTERN void std_vector_Sl_std_shared_ptr_Sl_nodes_INode_Sg__Sg____setitem____SWIG_1(std::vector< std::shared_ptr< nodes::INode > > *self,SWIGPY_SLICEOBJECT *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(slice, (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector< std::shared_ptr< nodes::INode >,std::allocator< std::shared_ptr< nodes::INode > > >::difference_type id = i;
      std::vector< std::shared_ptr< nodes::INode >,std::allocator< std::shared_ptr< nodes::INode > > >::difference_type jd = j;
      swig::delslice(self, id, jd, step);
    }
SWIGINTERN void std_vector_Sl_std_shared_ptr_Sl_nodes_INode_Sg__Sg____delitem____SWIG_1(std::vector< std::shared_ptr< nodes::INode > > *self,SWIGPY_SLICEOBJECT *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(slice, (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector< std::shared_ptr< nodes::INode >,std::allocator< std::shared_ptr< nodes::INode > > >::difference_type id = i;
      std::vector< std::shared_ptr< nodes::INode >,std::allocator< std::shared_ptr< nodes::INode > > >::difference_type jd = j;
      swig::delslice(self, id, jd, step);
    }
SWIGINTERN std::vector< std::shared_ptr< nodes::INode > >::value_type const &std_vector_Sl_std_shared_ptr_Sl_nodes_INode_Sg__Sg____getitem____SWIG_1(std::vector< std::shared_ptr< nodes::INode > > const *self,std::vector< std::shared_ptr< nodes::INode > >::difference_type i){
      return *(swig::cgetpos(self, i));
    }
SWIGINTERN void std_vector_Sl_std_shared_ptr_Sl_nodes_INode_Sg__Sg____setitem____SWIG_2(std::vector< std::shared_ptr< nodes::INode > > *self,std::vector< std::shared_ptr< nodes::INode > >::difference_type i,std::vector< std::shared_ptr< nodes::INode > >::value_type const &x){
      *(swig::getpos(self,i)) = x;
    }
SWIGINTERN std::vector< std::shared_ptr< nodes::INode > >::value_type std_vector_Sl_std_shared_ptr_Sl_nodes_INode_Sg__Sg__pop(std::vector< std::shared_ptr< nodes::INode > > *self){
      if (self->size() == 0)
	throw std::out_of_range("pop from empty container");
      std::vector< std::shared_ptr< nodes::INode >,std::allocator< std::shared_ptr< nodes::INode > > >::value_type x = self->back();
      self->pop_back();
      return x;
    }
SWIGINTERN void std_vector_Sl_std_shared_ptr_Sl_nodes_INode_Sg__Sg__append(std::vector< std::shared_ptr< nodes::INode > > *self,std::vector< std::shared_ptr< nodes::INode > >::value_type const &x){
      self->push_back(x);
    }
SWIGINTERN std::vector< std::shared_ptr< nodes::INode > >::iterator std_vector_Sl_std_shared_ptr_Sl_nodes_INode_Sg__Sg__erase__SWIG_0(std::vector< std::shared_ptr< nodes::INode > > *self,std::vector< std::shared_ptr< nodes::INode > >::iterator pos){ return self->erase(pos); }
SWIGINTERN std::vector< std::shared_ptr< nodes::INode > >::iterator std_vector_Sl_std_shared_ptr_Sl_nodes_INode_Sg__Sg__erase__SWIG_1(std::vector< std::shared_ptr< nodes::INode > > *self,std::vector< std::shared_ptr< nodes::INode > >::iterator first,std::vector< std::shared_ptr< nodes::INode > >::iterator last){ return self->erase(first, last); }
SWIGINTERN std::vector< std::shared_ptr< nodes::INode > >::iterator std_vector_Sl_std_shared_ptr_Sl_nodes_INode_Sg__Sg__insert__SWIG_0(std::vector< std::shared_ptr< nodes::INode > > *self,std::vector< std::shared_ptr< nodes::INode > >::iterator pos,std::vector< std::shared_ptr< nodes::INode > >::value_type const &x){ return self->insert(pos, x); }
SWIGINTERN void std_vector_Sl_std_shared_ptr_Sl_nodes_INode_Sg__Sg__insert__SWIG_1(std::vector< std::shared_ptr< nodes::INode > > *self,std::vector< std::shared_ptr< nodes::INode > >::iterator pos,std::vector< std::shared_ptr< nodes::INode > >::size_type n,std::vector< std::shared_ptr< nodes::INode > >::value_type const &x){ self->insert(pos, n, x); }
SWIGINTERN String std_vector_Sl_std_shared_ptr_Sl_nodes_INode_Sg__Sg____str__(std::vector< std::shared_ptr< nodes::INode > > const *self){
         return dive::ListNodes(*self);
    }

	#include "dive_elements.hpp"
	#include "dive_elements_hexa.hpp"

	typedef std::shared_ptr<dive::elements::IElement> IElementPtr;
	typedef std::shared_ptr<const dive::elements::IElement> ConstIElementPtr;

	typedef std::shared_ptr<dive::elements::ElementHexa> ElementHexaPtr;
	typedef std::shared_ptr<const dive::elements::ElementHexa> ConstElementHexaPtr;
	
	typedef std::vector<dive::elements::IElementPtr> Elements;	



  namespace swig {
    template <>  struct traits< std::shared_ptr< dive::elements::IElement > > {
      typedef pointer_category category;
      static const char* type_name() { return"std::shared_ptr< dive::elements::IElement >"; }
    };
  }


      namespace swig {
	template <>  struct traits<std::vector< std::shared_ptr< dive::elements::IElement >, std::allocator< std::shared_ptr< dive::elements::IElement > > > > {
	  typedef pointer_category category;
	  static const char* type_name() {
	    return "std::vector<" "std::shared_ptr< dive::elements::IElement >" "," "std::allocator< std::shared_ptr< dive::elements::IElement > >" " >";
	  }
	};
      }
    
SWIGINTERN swig::SwigPyIterator *std_vector_Sl_std_shared_ptr_Sl_dive_elements_IElement_Sg__Sg__iterator(std::vector< std::shared_ptr< dive::elements::IElement > > *self,PyObject **PYTHON_SELF){
      return swig::make_output_iterator(self->begin(), self->begin(), self->end(), *PYTHON_SELF);
    }
SWIGINTERN bool std_vector_Sl_std_shared_ptr_Sl_dive_elements_IElement_Sg__Sg____nonzero__(std::vector< std::shared_ptr< dive::elements::IElement > > const *self){
      return !(self->empty());
    }
SWIGINTERN bool std_vector_Sl_std_shared_ptr_Sl_dive_elements_IElement_Sg__Sg____bool__(std::vector< std::shared_ptr< dive::elements::IElement > > const *self){
      return !(self->empty());
    }
SWIGINTERN std::vector< std::shared_ptr< dive::elements::IElement > >::size_type std_vector_Sl_std_shared_ptr_Sl_dive_elements_IElement_Sg__Sg____len__(std::vector< std::shared_ptr< dive::elements::IElement > > const *self){
      return self->size();
    }
SWIGINTERN std::vector< std::shared_ptr< dive::elements::IElement >,std::allocator< std::shared_ptr< dive::elements::IElement > > > *std_vector_Sl_std_shared_ptr_Sl_dive_elements_IElement_Sg__Sg____getslice__(std::vector< std::shared_ptr< dive::elements::IElement > > *self,std::vector< std::shared_ptr< dive::elements::IElement > >::difference_type i,std::vector< std::shared_ptr< dive::elements::IElement > >::difference_type j){
      return swig::getslice(self, i, j, 1);
    }
SWIGINTERN void std_vector_Sl_std_shared_ptr_Sl_dive_elements_IElement_Sg__Sg____setslice____SWIG_0(std::vector< std::shared_ptr< dive::elements::IElement > > *self,std::vector< std::shared_ptr< dive::elements::IElement > >::difference_type i,std::vector< std::shared_ptr< dive::elements::IElement > >::difference_type j){
      swig::setslice(self, i, j, 1, std::vector< std::shared_ptr< dive::elements::IElement >,std::allocator< std::shared_ptr< dive::elements::IElement > > >());
    }
SWIGINTERN void std_vector_Sl_std_shared_ptr_Sl_dive_elements_IElement_Sg__Sg____setslice____SWIG_1(std::vector< std::shared_ptr< dive::elements::IElement > > *self,std::vector< std::shared_ptr< dive::elements::IElement > >::difference_type i,std::vector< std::shared_ptr< dive::elements::IElement > >::difference_type j,std::vector< std::shared_ptr< dive::elements::IElement >,std::allocator< std::shared_ptr< dive::elements::IElement > > > const &v){
      swig::setslice(self, i, j, 1, v);
    }
SWIGINTERN void std_vector_Sl_std_shared_ptr_Sl_dive_elements_IElement_Sg__Sg____delslice__(std::vector< std::shared_ptr< dive::elements::IElement > > *self,std::vector< std::shared_ptr< dive::elements::IElement > >::difference_type i,std::vector< std::shared_ptr< dive::elements::IElement > >::difference_type j){
      swig::delslice(self, i, j, 1);
    }
SWIGINTERN void std_vector_Sl_std_shared_ptr_Sl_dive_elements_IElement_Sg__Sg____delitem____SWIG_0(std::vector< std::shared_ptr< dive::elements::IElement > > *self,std::vector< std::shared_ptr< dive::elements::IElement > >::difference_type i){
      swig::erase(self, swig::getpos(self, i));
    }
SWIGINTERN std::vector< std::shared_ptr< dive::elements::IElement >,std::allocator< std::shared_ptr< dive::elements::IElement > > > *std_vector_Sl_std_shared_ptr_Sl_dive_elements_IElement_Sg__Sg____getitem____SWIG_0(std::vector< std::shared_ptr< dive::elements::IElement > > *self,SWIGPY_SLICEOBJECT *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return NULL;
      }
      PySlice_GetIndices(slice, (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector< std::shared_ptr< dive::elements::IElement >,std::allocator< std::shared_ptr< dive::elements::IElement > > >::difference_type id = i;
      std::vector< std::shared_ptr< dive::elements::IElement >,std::allocator< std::shared_ptr< dive::elements::IElement > > >::difference_type jd = j;
      return swig::getslice(self, id, jd, step);
    }
SWIGINTERN void std_vector_Sl_std_shared_ptr_Sl_dive_elements_IElement_Sg__Sg____setitem____SWIG_0(std::vector< std::shared_ptr< dive::elements::IElement > > *self,SWIGPY_SLICEOBJECT *slice,std::vector< std::shared_ptr< dive::elements::IElement >,std::allocator< std::shared_ptr< dive::elements::IElement > > > const &v){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(slice, (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector< std::shared_ptr< dive::elements::IElement >,std::allocator< std::shared_ptr< dive::elements::IElement > > >::difference_type id = i;
      std::vector< std::shared_ptr< dive::elements::IElement >,std::allocator< std::shared_ptr< dive::elements::IElement > > >::difference_type jd = j;
      swig::setslice(self, id, jd, step, v);
    }
SWIGINTERN void std_vector_Sl_std_shared_ptr_Sl_dive_elements_IElement_Sg__Sg____setitem____SWIG_1(std::vector< std::shared_ptr< dive::elements::IElement > > *self,SWIGPY_SLICEOBJECT *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(slice, (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector< std::shared_ptr< dive::elements::IElement >,std::allocator< std::shared_ptr< dive::elements::IElement > > >::difference_type id = i;
      std::vector< std::shared_ptr< dive::elements::IElement >,std::allocator< std::shared_ptr< dive::elements::IElement > > >::difference_type jd = j;
      swig::delslice(self, id, jd, step);
    }
SWIGINTERN void std_vector_Sl_std_shared_ptr_Sl_dive_elements_IElement_Sg__Sg____delitem____SWIG_1(std::vector< std::shared_ptr< dive::elements::IElement > > *self,SWIGPY_SLICEOBJECT *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(slice, (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector< std::shared_ptr< dive::elements::IElement >,std::allocator< std::shared_ptr< dive::elements::IElement > > >::difference_type id = i;
      std::vector< std::shared_ptr< dive::elements::IElement >,std::allocator< std::shared_ptr< dive::elements::IElement > > >::difference_type jd = j;
      swig::delslice(self, id, jd, step);
    }
SWIGINTERN std::vector< std::shared_ptr< dive::elements::IElement > >::value_type const &std_vector_Sl_std_shared_ptr_Sl_dive_elements_IElement_Sg__Sg____getitem____SWIG_1(std::vector< std::shared_ptr< dive::elements::IElement > > const *self,std::vector< std::shared_ptr< dive::elements::IElement > >::difference_type i){
      return *(swig::cgetpos(self, i));
    }
SWIGINTERN void std_vector_Sl_std_shared_ptr_Sl_dive_elements_IElement_Sg__Sg____setitem____SWIG_2(std::vector< std::shared_ptr< dive::elements::IElement > > *self,std::vector< std::shared_ptr< dive::elements::IElement > >::difference_type i,std::vector< std::shared_ptr< dive::elements::IElement > >::value_type const &x){
      *(swig::getpos(self,i)) = x;
    }
SWIGINTERN std::vector< std::shared_ptr< dive::elements::IElement > >::value_type std_vector_Sl_std_shared_ptr_Sl_dive_elements_IElement_Sg__Sg__pop(std::vector< std::shared_ptr< dive::elements::IElement > > *self){
      if (self->size() == 0)
	throw std::out_of_range("pop from empty container");
      std::vector< std::shared_ptr< dive::elements::IElement >,std::allocator< std::shared_ptr< dive::elements::IElement > > >::value_type x = self->back();
      self->pop_back();
      return x;
    }
SWIGINTERN void std_vector_Sl_std_shared_ptr_Sl_dive_elements_IElement_Sg__Sg__append(std::vector< std::shared_ptr< dive::elements::IElement > > *self,std::vector< std::shared_ptr< dive::elements::IElement > >::value_type const &x){
      self->push_back(x);
    }
SWIGINTERN std::vector< std::shared_ptr< dive::elements::IElement > >::iterator std_vector_Sl_std_shared_ptr_Sl_dive_elements_IElement_Sg__Sg__erase__SWIG_0(std::vector< std::shared_ptr< dive::elements::IElement > > *self,std::vector< std::shared_ptr< dive::elements::IElement > >::iterator pos){ return self->erase(pos); }
SWIGINTERN std::vector< std::shared_ptr< dive::elements::IElement > >::iterator std_vector_Sl_std_shared_ptr_Sl_dive_elements_IElement_Sg__Sg__erase__SWIG_1(std::vector< std::shared_ptr< dive::elements::IElement > > *self,std::vector< std::shared_ptr< dive::elements::IElement > >::iterator first,std::vector< std::shared_ptr< dive::elements::IElement > >::iterator last){ return self->erase(first, last); }
SWIGINTERN std::vector< std::shared_ptr< dive::elements::IElement > >::iterator std_vector_Sl_std_shared_ptr_Sl_dive_elements_IElement_Sg__Sg__insert__SWIG_0(std::vector< std::shared_ptr< dive::elements::IElement > > *self,std::vector< std::shared_ptr< dive::elements::IElement > >::iterator pos,std::vector< std::shared_ptr< dive::elements::IElement > >::value_type const &x){ return self->insert(pos, x); }
SWIGINTERN void std_vector_Sl_std_shared_ptr_Sl_dive_elements_IElement_Sg__Sg__insert__SWIG_1(std::vector< std::shared_ptr< dive::elements::IElement > > *self,std::vector< std::shared_ptr< dive::elements::IElement > >::iterator pos,std::vector< std::shared_ptr< dive::elements::IElement > >::size_type n,std::vector< std::shared_ptr< dive::elements::IElement > >::value_type const &x){ self->insert(pos, n, x); }
SWIGINTERN String std_vector_Sl_std_shared_ptr_Sl_dive_elements_IElement_Sg__Sg____str__(std::vector< std::shared_ptr< dive::elements::IElement > > const *self){
         return dive::ListElements(*self);
    }

	#include "dive_loads.hpp"
	#include "dive_loads_dirichlet.hpp"
	#include "dive_loads_distributed_volume.hpp"
	#include "dive_loads_distributed_face.hpp"

	typedef std::shared_ptr<dive::loads::IDirichlet> IDirichletPtr;
	typedef std::shared_ptr<const dive::loads::IDirichlet> ConstIDirichletPtr;

	typedef std::shared_ptr<dive::loads::Dirichlet> DirichletPtr;
	typedef std::shared_ptr<const dive::loads::Dirichlet> ConstDirichletPtr;	
	
	typedef std::shared_ptr<dive::loads::ILoad> ILoadPtr;
	typedef std::shared_ptr<const dive::loads::ILoad> ConstILoadPtr;

	typedef std::shared_ptr<dive::loads::LoadDistributedVolume> LoadDistributedVolumePtr;
	typedef std::shared_ptr<const dive::loads::LoadDistributedVolume> ConstLoadDistributedVolumePtr;	
	
	typedef std::shared_ptr<dive::loads::LoadDistributedFace> LoadDistributedFacePtr;
	typedef std::shared_ptr<const dive::loads::LoadDistributedFace> ConstLoadDistributedFacePtr;
	
	
	typedef std::vector<dive::loads::IDirichletPtr> Dirichlets;
	typedef std::vector<dive::loads::ILoadPtr> Loads;	



  namespace swig {
    template <>  struct traits< std::shared_ptr< dive::loads::IDirichlet > > {
      typedef pointer_category category;
      static const char* type_name() { return"std::shared_ptr< dive::loads::IDirichlet >"; }
    };
  }


      namespace swig {
	template <>  struct traits<std::vector< std::shared_ptr< dive::loads::IDirichlet >, std::allocator< std::shared_ptr< dive::loads::IDirichlet > > > > {
	  typedef pointer_category category;
	  static const char* type_name() {
	    return "std::vector<" "std::shared_ptr< dive::loads::IDirichlet >" "," "std::allocator< std::shared_ptr< dive::loads::IDirichlet > >" " >";
	  }
	};
      }
    
SWIGINTERN swig::SwigPyIterator *std_vector_Sl_std_shared_ptr_Sl_dive_loads_IDirichlet_Sg__Sg__iterator(std::vector< std::shared_ptr< dive::loads::IDirichlet > > *self,PyObject **PYTHON_SELF){
      return swig::make_output_iterator(self->begin(), self->begin(), self->end(), *PYTHON_SELF);
    }
SWIGINTERN bool std_vector_Sl_std_shared_ptr_Sl_dive_loads_IDirichlet_Sg__Sg____nonzero__(std::vector< std::shared_ptr< dive::loads::IDirichlet > > const *self){
      return !(self->empty());
    }
SWIGINTERN bool std_vector_Sl_std_shared_ptr_Sl_dive_loads_IDirichlet_Sg__Sg____bool__(std::vector< std::shared_ptr< dive::loads::IDirichlet > > const *self){
      return !(self->empty());
    }
SWIGINTERN std::vector< std::shared_ptr< dive::loads::IDirichlet > >::size_type std_vector_Sl_std_shared_ptr_Sl_dive_loads_IDirichlet_Sg__Sg____len__(std::vector< std::shared_ptr< dive::loads::IDirichlet > > const *self){
      return self->size();
    }
SWIGINTERN std::vector< std::shared_ptr< dive::loads::IDirichlet >,std::allocator< std::shared_ptr< dive::loads::IDirichlet > > > *std_vector_Sl_std_shared_ptr_Sl_dive_loads_IDirichlet_Sg__Sg____getslice__(std::vector< std::shared_ptr< dive::loads::IDirichlet > > *self,std::vector< std::shared_ptr< dive::loads::IDirichlet > >::difference_type i,std::vector< std::shared_ptr< dive::loads::IDirichlet > >::difference_type j){
      return swig::getslice(self, i, j, 1);
    }
SWIGINTERN void std_vector_Sl_std_shared_ptr_Sl_dive_loads_IDirichlet_Sg__Sg____setslice____SWIG_0(std::vector< std::shared_ptr< dive::loads::IDirichlet > > *self,std::vector< std::shared_ptr< dive::loads::IDirichlet > >::difference_type i,std::vector< std::shared_ptr< dive::loads::IDirichlet > >::difference_type j){
      swig::setslice(self, i, j, 1, std::vector< std::shared_ptr< dive::loads::IDirichlet >,std::allocator< std::shared_ptr< dive::loads::IDirichlet > > >());
    }
SWIGINTERN void std_vector_Sl_std_shared_ptr_Sl_dive_loads_IDirichlet_Sg__Sg____setslice____SWIG_1(std::vector< std::shared_ptr< dive::loads::IDirichlet > > *self,std::vector< std::shared_ptr< dive::loads::IDirichlet > >::difference_type i,std::vector< std::shared_ptr< dive::loads::IDirichlet > >::difference_type j,std::vector< std::shared_ptr< dive::loads::IDirichlet >,std::allocator< std::shared_ptr< dive::loads::IDirichlet > > > const &v){
      swig::setslice(self, i, j, 1, v);
    }
SWIGINTERN void std_vector_Sl_std_shared_ptr_Sl_dive_loads_IDirichlet_Sg__Sg____delslice__(std::vector< std::shared_ptr< dive::loads::IDirichlet > > *self,std::vector< std::shared_ptr< dive::loads::IDirichlet > >::difference_type i,std::vector< std::shared_ptr< dive::loads::IDirichlet > >::difference_type j){
      swig::delslice(self, i, j, 1);
    }
SWIGINTERN void std_vector_Sl_std_shared_ptr_Sl_dive_loads_IDirichlet_Sg__Sg____delitem____SWIG_0(std::vector< std::shared_ptr< dive::loads::IDirichlet > > *self,std::vector< std::shared_ptr< dive::loads::IDirichlet > >::difference_type i){
      swig::erase(self, swig::getpos(self, i));
    }
SWIGINTERN std::vector< std::shared_ptr< dive::loads::IDirichlet >,std::allocator< std::shared_ptr< dive::loads::IDirichlet > > > *std_vector_Sl_std_shared_ptr_Sl_dive_loads_IDirichlet_Sg__Sg____getitem____SWIG_0(std::vector< std::shared_ptr< dive::loads::IDirichlet > > *self,SWIGPY_SLICEOBJECT *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return NULL;
      }
      PySlice_GetIndices(slice, (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector< std::shared_ptr< dive::loads::IDirichlet >,std::allocator< std::shared_ptr< dive::loads::IDirichlet > > >::difference_type id = i;
      std::vector< std::shared_ptr< dive::loads::IDirichlet >,std::allocator< std::shared_ptr< dive::loads::IDirichlet > > >::difference_type jd = j;
      return swig::getslice(self, id, jd, step);
    }
SWIGINTERN void std_vector_Sl_std_shared_ptr_Sl_dive_loads_IDirichlet_Sg__Sg____setitem____SWIG_0(std::vector< std::shared_ptr< dive::loads::IDirichlet > > *self,SWIGPY_SLICEOBJECT *slice,std::vector< std::shared_ptr< dive::loads::IDirichlet >,std::allocator< std::shared_ptr< dive::loads::IDirichlet > > > const &v){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(slice, (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector< std::shared_ptr< dive::loads::IDirichlet >,std::allocator< std::shared_ptr< dive::loads::IDirichlet > > >::difference_type id = i;
      std::vector< std::shared_ptr< dive::loads::IDirichlet >,std::allocator< std::shared_ptr< dive::loads::IDirichlet > > >::difference_type jd = j;
      swig::setslice(self, id, jd, step, v);
    }
SWIGINTERN void std_vector_Sl_std_shared_ptr_Sl_dive_loads_IDirichlet_Sg__Sg____setitem____SWIG_1(std::vector< std::shared_ptr< dive::loads::IDirichlet > > *self,SWIGPY_SLICEOBJECT *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(slice, (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector< std::shared_ptr< dive::loads::IDirichlet >,std::allocator< std::shared_ptr< dive::loads::IDirichlet > > >::difference_type id = i;
      std::vector< std::shared_ptr< dive::loads::IDirichlet >,std::allocator< std::shared_ptr< dive::loads::IDirichlet > > >::difference_type jd = j;
      swig::delslice(self, id, jd, step);
    }
SWIGINTERN void std_vector_Sl_std_shared_ptr_Sl_dive_loads_IDirichlet_Sg__Sg____delitem____SWIG_1(std::vector< std::shared_ptr< dive::loads::IDirichlet > > *self,SWIGPY_SLICEOBJECT *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(slice, (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector< std::shared_ptr< dive::loads::IDirichlet >,std::allocator< std::shared_ptr< dive::loads::IDirichlet > > >::difference_type id = i;
      std::vector< std::shared_ptr< dive::loads::IDirichlet >,std::allocator< std::shared_ptr< dive::loads::IDirichlet > > >::difference_type jd = j;
      swig::delslice(self, id, jd, step);
    }
SWIGINTERN std::vector< std::shared_ptr< dive::loads::IDirichlet > >::value_type const &std_vector_Sl_std_shared_ptr_Sl_dive_loads_IDirichlet_Sg__Sg____getitem____SWIG_1(std::vector< std::shared_ptr< dive::loads::IDirichlet > > const *self,std::vector< std::shared_ptr< dive::loads::IDirichlet > >::difference_type i){
      return *(swig::cgetpos(self, i));
    }
SWIGINTERN void std_vector_Sl_std_shared_ptr_Sl_dive_loads_IDirichlet_Sg__Sg____setitem____SWIG_2(std::vector< std::shared_ptr< dive::loads::IDirichlet > > *self,std::vector< std::shared_ptr< dive::loads::IDirichlet > >::difference_type i,std::vector< std::shared_ptr< dive::loads::IDirichlet > >::value_type const &x){
      *(swig::getpos(self,i)) = x;
    }
SWIGINTERN std::vector< std::shared_ptr< dive::loads::IDirichlet > >::value_type std_vector_Sl_std_shared_ptr_Sl_dive_loads_IDirichlet_Sg__Sg__pop(std::vector< std::shared_ptr< dive::loads::IDirichlet > > *self){
      if (self->size() == 0)
	throw std::out_of_range("pop from empty container");
      std::vector< std::shared_ptr< dive::loads::IDirichlet >,std::allocator< std::shared_ptr< dive::loads::IDirichlet > > >::value_type x = self->back();
      self->pop_back();
      return x;
    }
SWIGINTERN void std_vector_Sl_std_shared_ptr_Sl_dive_loads_IDirichlet_Sg__Sg__append(std::vector< std::shared_ptr< dive::loads::IDirichlet > > *self,std::vector< std::shared_ptr< dive::loads::IDirichlet > >::value_type const &x){
      self->push_back(x);
    }
SWIGINTERN std::vector< std::shared_ptr< dive::loads::IDirichlet > >::iterator std_vector_Sl_std_shared_ptr_Sl_dive_loads_IDirichlet_Sg__Sg__erase__SWIG_0(std::vector< std::shared_ptr< dive::loads::IDirichlet > > *self,std::vector< std::shared_ptr< dive::loads::IDirichlet > >::iterator pos){ return self->erase(pos); }
SWIGINTERN std::vector< std::shared_ptr< dive::loads::IDirichlet > >::iterator std_vector_Sl_std_shared_ptr_Sl_dive_loads_IDirichlet_Sg__Sg__erase__SWIG_1(std::vector< std::shared_ptr< dive::loads::IDirichlet > > *self,std::vector< std::shared_ptr< dive::loads::IDirichlet > >::iterator first,std::vector< std::shared_ptr< dive::loads::IDirichlet > >::iterator last){ return self->erase(first, last); }
SWIGINTERN std::vector< std::shared_ptr< dive::loads::IDirichlet > >::iterator std_vector_Sl_std_shared_ptr_Sl_dive_loads_IDirichlet_Sg__Sg__insert__SWIG_0(std::vector< std::shared_ptr< dive::loads::IDirichlet > > *self,std::vector< std::shared_ptr< dive::loads::IDirichlet > >::iterator pos,std::vector< std::shared_ptr< dive::loads::IDirichlet > >::value_type const &x){ return self->insert(pos, x); }
SWIGINTERN void std_vector_Sl_std_shared_ptr_Sl_dive_loads_IDirichlet_Sg__Sg__insert__SWIG_1(std::vector< std::shared_ptr< dive::loads::IDirichlet > > *self,std::vector< std::shared_ptr< dive::loads::IDirichlet > >::iterator pos,std::vector< std::shared_ptr< dive::loads::IDirichlet > >::size_type n,std::vector< std::shared_ptr< dive::loads::IDirichlet > >::value_type const &x){ self->insert(pos, n, x); }

  namespace swig {
    template <>  struct traits< std::shared_ptr< dive::loads::ILoad > > {
      typedef pointer_category category;
      static const char* type_name() { return"std::shared_ptr< dive::loads::ILoad >"; }
    };
  }


      namespace swig {
	template <>  struct traits<std::vector< std::shared_ptr< dive::loads::ILoad >, std::allocator< std::shared_ptr< dive::loads::ILoad > > > > {
	  typedef pointer_category category;
	  static const char* type_name() {
	    return "std::vector<" "std::shared_ptr< dive::loads::ILoad >" "," "std::allocator< std::shared_ptr< dive::loads::ILoad > >" " >";
	  }
	};
      }
    
SWIGINTERN swig::SwigPyIterator *std_vector_Sl_std_shared_ptr_Sl_dive_loads_ILoad_Sg__Sg__iterator(std::vector< std::shared_ptr< dive::loads::ILoad > > *self,PyObject **PYTHON_SELF){
      return swig::make_output_iterator(self->begin(), self->begin(), self->end(), *PYTHON_SELF);
    }
SWIGINTERN bool std_vector_Sl_std_shared_ptr_Sl_dive_loads_ILoad_Sg__Sg____nonzero__(std::vector< std::shared_ptr< dive::loads::ILoad > > const *self){
      return !(self->empty());
    }
SWIGINTERN bool std_vector_Sl_std_shared_ptr_Sl_dive_loads_ILoad_Sg__Sg____bool__(std::vector< std::shared_ptr< dive::loads::ILoad > > const *self){
      return !(self->empty());
    }
SWIGINTERN std::vector< std::shared_ptr< dive::loads::ILoad > >::size_type std_vector_Sl_std_shared_ptr_Sl_dive_loads_ILoad_Sg__Sg____len__(std::vector< std::shared_ptr< dive::loads::ILoad > > const *self){
      return self->size();
    }
SWIGINTERN std::vector< std::shared_ptr< dive::loads::ILoad >,std::allocator< std::shared_ptr< dive::loads::ILoad > > > *std_vector_Sl_std_shared_ptr_Sl_dive_loads_ILoad_Sg__Sg____getslice__(std::vector< std::shared_ptr< dive::loads::ILoad > > *self,std::vector< std::shared_ptr< dive::loads::ILoad > >::difference_type i,std::vector< std::shared_ptr< dive::loads::ILoad > >::difference_type j){
      return swig::getslice(self, i, j, 1);
    }
SWIGINTERN void std_vector_Sl_std_shared_ptr_Sl_dive_loads_ILoad_Sg__Sg____setslice____SWIG_0(std::vector< std::shared_ptr< dive::loads::ILoad > > *self,std::vector< std::shared_ptr< dive::loads::ILoad > >::difference_type i,std::vector< std::shared_ptr< dive::loads::ILoad > >::difference_type j){
      swig::setslice(self, i, j, 1, std::vector< std::shared_ptr< dive::loads::ILoad >,std::allocator< std::shared_ptr< dive::loads::ILoad > > >());
    }
SWIGINTERN void std_vector_Sl_std_shared_ptr_Sl_dive_loads_ILoad_Sg__Sg____setslice____SWIG_1(std::vector< std::shared_ptr< dive::loads::ILoad > > *self,std::vector< std::shared_ptr< dive::loads::ILoad > >::difference_type i,std::vector< std::shared_ptr< dive::loads::ILoad > >::difference_type j,std::vector< std::shared_ptr< dive::loads::ILoad >,std::allocator< std::shared_ptr< dive::loads::ILoad > > > const &v){
      swig::setslice(self, i, j, 1, v);
    }
SWIGINTERN void std_vector_Sl_std_shared_ptr_Sl_dive_loads_ILoad_Sg__Sg____delslice__(std::vector< std::shared_ptr< dive::loads::ILoad > > *self,std::vector< std::shared_ptr< dive::loads::ILoad > >::difference_type i,std::vector< std::shared_ptr< dive::loads::ILoad > >::difference_type j){
      swig::delslice(self, i, j, 1);
    }
SWIGINTERN void std_vector_Sl_std_shared_ptr_Sl_dive_loads_ILoad_Sg__Sg____delitem____SWIG_0(std::vector< std::shared_ptr< dive::loads::ILoad > > *self,std::vector< std::shared_ptr< dive::loads::ILoad > >::difference_type i){
      swig::erase(self, swig::getpos(self, i));
    }
SWIGINTERN std::vector< std::shared_ptr< dive::loads::ILoad >,std::allocator< std::shared_ptr< dive::loads::ILoad > > > *std_vector_Sl_std_shared_ptr_Sl_dive_loads_ILoad_Sg__Sg____getitem____SWIG_0(std::vector< std::shared_ptr< dive::loads::ILoad > > *self,SWIGPY_SLICEOBJECT *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return NULL;
      }
      PySlice_GetIndices(slice, (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector< std::shared_ptr< dive::loads::ILoad >,std::allocator< std::shared_ptr< dive::loads::ILoad > > >::difference_type id = i;
      std::vector< std::shared_ptr< dive::loads::ILoad >,std::allocator< std::shared_ptr< dive::loads::ILoad > > >::difference_type jd = j;
      return swig::getslice(self, id, jd, step);
    }
SWIGINTERN void std_vector_Sl_std_shared_ptr_Sl_dive_loads_ILoad_Sg__Sg____setitem____SWIG_0(std::vector< std::shared_ptr< dive::loads::ILoad > > *self,SWIGPY_SLICEOBJECT *slice,std::vector< std::shared_ptr< dive::loads::ILoad >,std::allocator< std::shared_ptr< dive::loads::ILoad > > > const &v){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(slice, (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector< std::shared_ptr< dive::loads::ILoad >,std::allocator< std::shared_ptr< dive::loads::ILoad > > >::difference_type id = i;
      std::vector< std::shared_ptr< dive::loads::ILoad >,std::allocator< std::shared_ptr< dive::loads::ILoad > > >::difference_type jd = j;
      swig::setslice(self, id, jd, step, v);
    }
SWIGINTERN void std_vector_Sl_std_shared_ptr_Sl_dive_loads_ILoad_Sg__Sg____setitem____SWIG_1(std::vector< std::shared_ptr< dive::loads::ILoad > > *self,SWIGPY_SLICEOBJECT *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(slice, (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector< std::shared_ptr< dive::loads::ILoad >,std::allocator< std::shared_ptr< dive::loads::ILoad > > >::difference_type id = i;
      std::vector< std::shared_ptr< dive::loads::ILoad >,std::allocator< std::shared_ptr< dive::loads::ILoad > > >::difference_type jd = j;
      swig::delslice(self, id, jd, step);
    }
SWIGINTERN void std_vector_Sl_std_shared_ptr_Sl_dive_loads_ILoad_Sg__Sg____delitem____SWIG_1(std::vector< std::shared_ptr< dive::loads::ILoad > > *self,SWIGPY_SLICEOBJECT *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(slice, (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector< std::shared_ptr< dive::loads::ILoad >,std::allocator< std::shared_ptr< dive::loads::ILoad > > >::difference_type id = i;
      std::vector< std::shared_ptr< dive::loads::ILoad >,std::allocator< std::shared_ptr< dive::loads::ILoad > > >::difference_type jd = j;
      swig::delslice(self, id, jd, step);
    }
SWIGINTERN std::vector< std::shared_ptr< dive::loads::ILoad > >::value_type const &std_vector_Sl_std_shared_ptr_Sl_dive_loads_ILoad_Sg__Sg____getitem____SWIG_1(std::vector< std::shared_ptr< dive::loads::ILoad > > const *self,std::vector< std::shared_ptr< dive::loads::ILoad > >::difference_type i){
      return *(swig::cgetpos(self, i));
    }
SWIGINTERN void std_vector_Sl_std_shared_ptr_Sl_dive_loads_ILoad_Sg__Sg____setitem____SWIG_2(std::vector< std::shared_ptr< dive::loads::ILoad > > *self,std::vector< std::shared_ptr< dive::loads::ILoad > >::difference_type i,std::vector< std::shared_ptr< dive::loads::ILoad > >::value_type const &x){
      *(swig::getpos(self,i)) = x;
    }
SWIGINTERN std::vector< std::shared_ptr< dive::loads::ILoad > >::value_type std_vector_Sl_std_shared_ptr_Sl_dive_loads_ILoad_Sg__Sg__pop(std::vector< std::shared_ptr< dive::loads::ILoad > > *self){
      if (self->size() == 0)
	throw std::out_of_range("pop from empty container");
      std::vector< std::shared_ptr< dive::loads::ILoad >,std::allocator< std::shared_ptr< dive::loads::ILoad > > >::value_type x = self->back();
      self->pop_back();
      return x;
    }
SWIGINTERN void std_vector_Sl_std_shared_ptr_Sl_dive_loads_ILoad_Sg__Sg__append(std::vector< std::shared_ptr< dive::loads::ILoad > > *self,std::vector< std::shared_ptr< dive::loads::ILoad > >::value_type const &x){
      self->push_back(x);
    }
SWIGINTERN std::vector< std::shared_ptr< dive::loads::ILoad > >::iterator std_vector_Sl_std_shared_ptr_Sl_dive_loads_ILoad_Sg__Sg__erase__SWIG_0(std::vector< std::shared_ptr< dive::loads::ILoad > > *self,std::vector< std::shared_ptr< dive::loads::ILoad > >::iterator pos){ return self->erase(pos); }
SWIGINTERN std::vector< std::shared_ptr< dive::loads::ILoad > >::iterator std_vector_Sl_std_shared_ptr_Sl_dive_loads_ILoad_Sg__Sg__erase__SWIG_1(std::vector< std::shared_ptr< dive::loads::ILoad > > *self,std::vector< std::shared_ptr< dive::loads::ILoad > >::iterator first,std::vector< std::shared_ptr< dive::loads::ILoad > >::iterator last){ return self->erase(first, last); }
SWIGINTERN std::vector< std::shared_ptr< dive::loads::ILoad > >::iterator std_vector_Sl_std_shared_ptr_Sl_dive_loads_ILoad_Sg__Sg__insert__SWIG_0(std::vector< std::shared_ptr< dive::loads::ILoad > > *self,std::vector< std::shared_ptr< dive::loads::ILoad > >::iterator pos,std::vector< std::shared_ptr< dive::loads::ILoad > >::value_type const &x){ return self->insert(pos, x); }
SWIGINTERN void std_vector_Sl_std_shared_ptr_Sl_dive_loads_ILoad_Sg__Sg__insert__SWIG_1(std::vector< std::shared_ptr< dive::loads::ILoad > > *self,std::vector< std::shared_ptr< dive::loads::ILoad > >::iterator pos,std::vector< std::shared_ptr< dive::loads::ILoad > >::size_type n,std::vector< std::shared_ptr< dive::loads::ILoad > >::value_type const &x){ self->insert(pos, n, x); }


	#include "dive_meshes.hpp"
	#include "dive_meshes_basic.hpp"

	typedef std::shared_ptr<dive::meshes::IMesh> IMeshPtr;
	typedef std::shared_ptr<const dive::meshes::IMesh> ConstIMeshPtr;

	typedef std::shared_ptr<dive::meshes::Mesh> MeshPtr;
	typedef std::shared_ptr<const dive::meshes::Mesh> ConstMeshPtr;
	
	typedef std::vector<dive::meshes::IMeshPtr> Meshes;	
	
	using DofMeshIndex = dive::DofMeshIndex;
	using DofMeshIndices = dive::DofMeshIndices;

	using NodeMeshIndex = dive::NodeMeshIndex;
	using NodeMeshIndices = dive::NodeMeshIndices;
	
	using DirichletMeshIndex = dive::DirichletMeshIndex;
	using DirichletMeshIndices = dive::DirichletMeshIndices;	
	


  namespace swig {
    template <>  struct traits< std::shared_ptr< dive::meshes::IMesh > > {
      typedef pointer_category category;
      static const char* type_name() { return"std::shared_ptr< dive::meshes::IMesh >"; }
    };
  }


      namespace swig {
	template <>  struct traits<std::vector< std::shared_ptr< dive::meshes::IMesh >, std::allocator< std::shared_ptr< dive::meshes::IMesh > > > > {
	  typedef pointer_category category;
	  static const char* type_name() {
	    return "std::vector<" "std::shared_ptr< dive::meshes::IMesh >" "," "std::allocator< std::shared_ptr< dive::meshes::IMesh > >" " >";
	  }
	};
      }
    
SWIGINTERN swig::SwigPyIterator *std_vector_Sl_std_shared_ptr_Sl_dive_meshes_IMesh_Sg__Sg__iterator(std::vector< std::shared_ptr< dive::meshes::IMesh > > *self,PyObject **PYTHON_SELF){
      return swig::make_output_iterator(self->begin(), self->begin(), self->end(), *PYTHON_SELF);
    }
SWIGINTERN bool std_vector_Sl_std_shared_ptr_Sl_dive_meshes_IMesh_Sg__Sg____nonzero__(std::vector< std::shared_ptr< dive::meshes::IMesh > > const *self){
      return !(self->empty());
    }
SWIGINTERN bool std_vector_Sl_std_shared_ptr_Sl_dive_meshes_IMesh_Sg__Sg____bool__(std::vector< std::shared_ptr< dive::meshes::IMesh > > const *self){
      return !(self->empty());
    }
SWIGINTERN std::vector< std::shared_ptr< dive::meshes::IMesh > >::size_type std_vector_Sl_std_shared_ptr_Sl_dive_meshes_IMesh_Sg__Sg____len__(std::vector< std::shared_ptr< dive::meshes::IMesh > > const *self){
      return self->size();
    }
SWIGINTERN std::vector< std::shared_ptr< dive::meshes::IMesh >,std::allocator< std::shared_ptr< dive::meshes::IMesh > > > *std_vector_Sl_std_shared_ptr_Sl_dive_meshes_IMesh_Sg__Sg____getslice__(std::vector< std::shared_ptr< dive::meshes::IMesh > > *self,std::vector< std::shared_ptr< dive::meshes::IMesh > >::difference_type i,std::vector< std::shared_ptr< dive::meshes::IMesh > >::difference_type j){
      return swig::getslice(self, i, j, 1);
    }
SWIGINTERN void std_vector_Sl_std_shared_ptr_Sl_dive_meshes_IMesh_Sg__Sg____setslice____SWIG_0(std::vector< std::shared_ptr< dive::meshes::IMesh > > *self,std::vector< std::shared_ptr< dive::meshes::IMesh > >::difference_type i,std::vector< std::shared_ptr< dive::meshes::IMesh > >::difference_type j){
      swig::setslice(self, i, j, 1, std::vector< std::shared_ptr< dive::meshes::IMesh >,std::allocator< std::shared_ptr< dive::meshes::IMesh > > >());
    }
SWIGINTERN void std_vector_Sl_std_shared_ptr_Sl_dive_meshes_IMesh_Sg__Sg____setslice____SWIG_1(std::vector< std::shared_ptr< dive::meshes::IMesh > > *self,std::vector< std::shared_ptr< dive::meshes::IMesh > >::difference_type i,std::vector< std::shared_ptr< dive::meshes::IMesh > >::difference_type j,std::vector< std::shared_ptr< dive::meshes::IMesh >,std::allocator< std::shared_ptr< dive::meshes::IMesh > > > const &v){
      swig::setslice(self, i, j, 1, v);
    }
SWIGINTERN void std_vector_Sl_std_shared_ptr_Sl_dive_meshes_IMesh_Sg__Sg____delslice__(std::vector< std::shared_ptr< dive::meshes::IMesh > > *self,std::vector< std::shared_ptr< dive::meshes::IMesh > >::difference_type i,std::vector< std::shared_ptr< dive::meshes::IMesh > >::difference_type j){
      swig::delslice(self, i, j, 1);
    }
SWIGINTERN void std_vector_Sl_std_shared_ptr_Sl_dive_meshes_IMesh_Sg__Sg____delitem____SWIG_0(std::vector< std::shared_ptr< dive::meshes::IMesh > > *self,std::vector< std::shared_ptr< dive::meshes::IMesh > >::difference_type i){
      swig::erase(self, swig::getpos(self, i));
    }
SWIGINTERN std::vector< std::shared_ptr< dive::meshes::IMesh >,std::allocator< std::shared_ptr< dive::meshes::IMesh > > > *std_vector_Sl_std_shared_ptr_Sl_dive_meshes_IMesh_Sg__Sg____getitem____SWIG_0(std::vector< std::shared_ptr< dive::meshes::IMesh > > *self,SWIGPY_SLICEOBJECT *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return NULL;
      }
      PySlice_GetIndices(slice, (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector< std::shared_ptr< dive::meshes::IMesh >,std::allocator< std::shared_ptr< dive::meshes::IMesh > > >::difference_type id = i;
      std::vector< std::shared_ptr< dive::meshes::IMesh >,std::allocator< std::shared_ptr< dive::meshes::IMesh > > >::difference_type jd = j;
      return swig::getslice(self, id, jd, step);
    }
SWIGINTERN void std_vector_Sl_std_shared_ptr_Sl_dive_meshes_IMesh_Sg__Sg____setitem____SWIG_0(std::vector< std::shared_ptr< dive::meshes::IMesh > > *self,SWIGPY_SLICEOBJECT *slice,std::vector< std::shared_ptr< dive::meshes::IMesh >,std::allocator< std::shared_ptr< dive::meshes::IMesh > > > const &v){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(slice, (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector< std::shared_ptr< dive::meshes::IMesh >,std::allocator< std::shared_ptr< dive::meshes::IMesh > > >::difference_type id = i;
      std::vector< std::shared_ptr< dive::meshes::IMesh >,std::allocator< std::shared_ptr< dive::meshes::IMesh > > >::difference_type jd = j;
      swig::setslice(self, id, jd, step, v);
    }
SWIGINTERN void std_vector_Sl_std_shared_ptr_Sl_dive_meshes_IMesh_Sg__Sg____setitem____SWIG_1(std::vector< std::shared_ptr< dive::meshes::IMesh > > *self,SWIGPY_SLICEOBJECT *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(slice, (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector< std::shared_ptr< dive::meshes::IMesh >,std::allocator< std::shared_ptr< dive::meshes::IMesh > > >::difference_type id = i;
      std::vector< std::shared_ptr< dive::meshes::IMesh >,std::allocator< std::shared_ptr< dive::meshes::IMesh > > >::difference_type jd = j;
      swig::delslice(self, id, jd, step);
    }
SWIGINTERN void std_vector_Sl_std_shared_ptr_Sl_dive_meshes_IMesh_Sg__Sg____delitem____SWIG_1(std::vector< std::shared_ptr< dive::meshes::IMesh > > *self,SWIGPY_SLICEOBJECT *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(slice, (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector< std::shared_ptr< dive::meshes::IMesh >,std::allocator< std::shared_ptr< dive::meshes::IMesh > > >::difference_type id = i;
      std::vector< std::shared_ptr< dive::meshes::IMesh >,std::allocator< std::shared_ptr< dive::meshes::IMesh > > >::difference_type jd = j;
      swig::delslice(self, id, jd, step);
    }
SWIGINTERN std::vector< std::shared_ptr< dive::meshes::IMesh > >::value_type const &std_vector_Sl_std_shared_ptr_Sl_dive_meshes_IMesh_Sg__Sg____getitem____SWIG_1(std::vector< std::shared_ptr< dive::meshes::IMesh > > const *self,std::vector< std::shared_ptr< dive::meshes::IMesh > >::difference_type i){
      return *(swig::cgetpos(self, i));
    }
SWIGINTERN void std_vector_Sl_std_shared_ptr_Sl_dive_meshes_IMesh_Sg__Sg____setitem____SWIG_2(std::vector< std::shared_ptr< dive::meshes::IMesh > > *self,std::vector< std::shared_ptr< dive::meshes::IMesh > >::difference_type i,std::vector< std::shared_ptr< dive::meshes::IMesh > >::value_type const &x){
      *(swig::getpos(self,i)) = x;
    }
SWIGINTERN std::vector< std::shared_ptr< dive::meshes::IMesh > >::value_type std_vector_Sl_std_shared_ptr_Sl_dive_meshes_IMesh_Sg__Sg__pop(std::vector< std::shared_ptr< dive::meshes::IMesh > > *self){
      if (self->size() == 0)
	throw std::out_of_range("pop from empty container");
      std::vector< std::shared_ptr< dive::meshes::IMesh >,std::allocator< std::shared_ptr< dive::meshes::IMesh > > >::value_type x = self->back();
      self->pop_back();
      return x;
    }
SWIGINTERN void std_vector_Sl_std_shared_ptr_Sl_dive_meshes_IMesh_Sg__Sg__append(std::vector< std::shared_ptr< dive::meshes::IMesh > > *self,std::vector< std::shared_ptr< dive::meshes::IMesh > >::value_type const &x){
      self->push_back(x);
    }
SWIGINTERN std::vector< std::shared_ptr< dive::meshes::IMesh > >::iterator std_vector_Sl_std_shared_ptr_Sl_dive_meshes_IMesh_Sg__Sg__erase__SWIG_0(std::vector< std::shared_ptr< dive::meshes::IMesh > > *self,std::vector< std::shared_ptr< dive::meshes::IMesh > >::iterator pos){ return self->erase(pos); }
SWIGINTERN std::vector< std::shared_ptr< dive::meshes::IMesh > >::iterator std_vector_Sl_std_shared_ptr_Sl_dive_meshes_IMesh_Sg__Sg__erase__SWIG_1(std::vector< std::shared_ptr< dive::meshes::IMesh > > *self,std::vector< std::shared_ptr< dive::meshes::IMesh > >::iterator first,std::vector< std::shared_ptr< dive::meshes::IMesh > >::iterator last){ return self->erase(first, last); }
SWIGINTERN std::vector< std::shared_ptr< dive::meshes::IMesh > >::iterator std_vector_Sl_std_shared_ptr_Sl_dive_meshes_IMesh_Sg__Sg__insert__SWIG_0(std::vector< std::shared_ptr< dive::meshes::IMesh > > *self,std::vector< std::shared_ptr< dive::meshes::IMesh > >::iterator pos,std::vector< std::shared_ptr< dive::meshes::IMesh > >::value_type const &x){ return self->insert(pos, x); }
SWIGINTERN void std_vector_Sl_std_shared_ptr_Sl_dive_meshes_IMesh_Sg__Sg__insert__SWIG_1(std::vector< std::shared_ptr< dive::meshes::IMesh > > *self,std::vector< std::shared_ptr< dive::meshes::IMesh > >::iterator pos,std::vector< std::shared_ptr< dive::meshes::IMesh > >::size_type n,std::vector< std::shared_ptr< dive::meshes::IMesh > >::value_type const &x){ self->insert(pos, n, x); }

  namespace swig {
    template <>  struct traits< dive::DofMeshIndex > {
      typedef pointer_category category;
      static const char* type_name() { return"dive::DofMeshIndex"; }
    };
  }


      namespace swig {
	template <>  struct traits<std::vector< dive::DofMeshIndex, std::allocator< dive::DofMeshIndex > > > {
	  typedef pointer_category category;
	  static const char* type_name() {
	    return "std::vector<" "dive::DofMeshIndex" "," "std::allocator< dive::DofMeshIndex >" " >";
	  }
	};
      }
    
SWIGINTERN swig::SwigPyIterator *std_vector_Sl_dive_DofMeshIndex_Sg__iterator(std::vector< dive::DofMeshIndex > *self,PyObject **PYTHON_SELF){
      return swig::make_output_iterator(self->begin(), self->begin(), self->end(), *PYTHON_SELF);
    }
SWIGINTERN bool std_vector_Sl_dive_DofMeshIndex_Sg____nonzero__(std::vector< dive::DofMeshIndex > const *self){
      return !(self->empty());
    }
SWIGINTERN bool std_vector_Sl_dive_DofMeshIndex_Sg____bool__(std::vector< dive::DofMeshIndex > const *self){
      return !(self->empty());
    }
SWIGINTERN std::vector< dive::DofMeshIndex >::size_type std_vector_Sl_dive_DofMeshIndex_Sg____len__(std::vector< dive::DofMeshIndex > const *self){
      return self->size();
    }
SWIGINTERN std::vector< dive::DofMeshIndex,std::allocator< dive::DofMeshIndex > > *std_vector_Sl_dive_DofMeshIndex_Sg____getslice__(std::vector< dive::DofMeshIndex > *self,std::vector< dive::DofMeshIndex >::difference_type i,std::vector< dive::DofMeshIndex >::difference_type j){
      return swig::getslice(self, i, j, 1);
    }
SWIGINTERN void std_vector_Sl_dive_DofMeshIndex_Sg____setslice____SWIG_0(std::vector< dive::DofMeshIndex > *self,std::vector< dive::DofMeshIndex >::difference_type i,std::vector< dive::DofMeshIndex >::difference_type j){
      swig::setslice(self, i, j, 1, std::vector< dive::DofMeshIndex,std::allocator< dive::DofMeshIndex > >());
    }
SWIGINTERN void std_vector_Sl_dive_DofMeshIndex_Sg____setslice____SWIG_1(std::vector< dive::DofMeshIndex > *self,std::vector< dive::DofMeshIndex >::difference_type i,std::vector< dive::DofMeshIndex >::difference_type j,std::vector< dive::DofMeshIndex,std::allocator< dive::DofMeshIndex > > const &v){
      swig::setslice(self, i, j, 1, v);
    }
SWIGINTERN void std_vector_Sl_dive_DofMeshIndex_Sg____delslice__(std::vector< dive::DofMeshIndex > *self,std::vector< dive::DofMeshIndex >::difference_type i,std::vector< dive::DofMeshIndex >::difference_type j){
      swig::delslice(self, i, j, 1);
    }
SWIGINTERN void std_vector_Sl_dive_DofMeshIndex_Sg____delitem____SWIG_0(std::vector< dive::DofMeshIndex > *self,std::vector< dive::DofMeshIndex >::difference_type i){
      swig::erase(self, swig::getpos(self, i));
    }
SWIGINTERN std::vector< dive::DofMeshIndex,std::allocator< dive::DofMeshIndex > > *std_vector_Sl_dive_DofMeshIndex_Sg____getitem____SWIG_0(std::vector< dive::DofMeshIndex > *self,SWIGPY_SLICEOBJECT *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return NULL;
      }
      PySlice_GetIndices(slice, (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector< dive::DofMeshIndex,std::allocator< dive::DofMeshIndex > >::difference_type id = i;
      std::vector< dive::DofMeshIndex,std::allocator< dive::DofMeshIndex > >::difference_type jd = j;
      return swig::getslice(self, id, jd, step);
    }
SWIGINTERN void std_vector_Sl_dive_DofMeshIndex_Sg____setitem____SWIG_0(std::vector< dive::DofMeshIndex > *self,SWIGPY_SLICEOBJECT *slice,std::vector< dive::DofMeshIndex,std::allocator< dive::DofMeshIndex > > const &v){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(slice, (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector< dive::DofMeshIndex,std::allocator< dive::DofMeshIndex > >::difference_type id = i;
      std::vector< dive::DofMeshIndex,std::allocator< dive::DofMeshIndex > >::difference_type jd = j;
      swig::setslice(self, id, jd, step, v);
    }
SWIGINTERN void std_vector_Sl_dive_DofMeshIndex_Sg____setitem____SWIG_1(std::vector< dive::DofMeshIndex > *self,SWIGPY_SLICEOBJECT *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(slice, (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector< dive::DofMeshIndex,std::allocator< dive::DofMeshIndex > >::difference_type id = i;
      std::vector< dive::DofMeshIndex,std::allocator< dive::DofMeshIndex > >::difference_type jd = j;
      swig::delslice(self, id, jd, step);
    }
SWIGINTERN void std_vector_Sl_dive_DofMeshIndex_Sg____delitem____SWIG_1(std::vector< dive::DofMeshIndex > *self,SWIGPY_SLICEOBJECT *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(slice, (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector< dive::DofMeshIndex,std::allocator< dive::DofMeshIndex > >::difference_type id = i;
      std::vector< dive::DofMeshIndex,std::allocator< dive::DofMeshIndex > >::difference_type jd = j;
      swig::delslice(self, id, jd, step);
    }
SWIGINTERN std::vector< dive::DofMeshIndex >::value_type const &std_vector_Sl_dive_DofMeshIndex_Sg____getitem____SWIG_1(std::vector< dive::DofMeshIndex > const *self,std::vector< dive::DofMeshIndex >::difference_type i){
      return *(swig::cgetpos(self, i));
    }
SWIGINTERN void std_vector_Sl_dive_DofMeshIndex_Sg____setitem____SWIG_2(std::vector< dive::DofMeshIndex > *self,std::vector< dive::DofMeshIndex >::difference_type i,std::vector< dive::DofMeshIndex >::value_type const &x){
      *(swig::getpos(self,i)) = x;
    }
SWIGINTERN std::vector< dive::DofMeshIndex >::value_type std_vector_Sl_dive_DofMeshIndex_Sg__pop(std::vector< dive::DofMeshIndex > *self){
      if (self->size() == 0)
	throw std::out_of_range("pop from empty container");
      std::vector< dive::DofMeshIndex,std::allocator< dive::DofMeshIndex > >::value_type x = self->back();
      self->pop_back();
      return x;
    }
SWIGINTERN void std_vector_Sl_dive_DofMeshIndex_Sg__append(std::vector< dive::DofMeshIndex > *self,std::vector< dive::DofMeshIndex >::value_type const &x){
      self->push_back(x);
    }
SWIGINTERN std::vector< dive::DofMeshIndex >::iterator std_vector_Sl_dive_DofMeshIndex_Sg__erase__SWIG_0(std::vector< dive::DofMeshIndex > *self,std::vector< dive::DofMeshIndex >::iterator pos){ return self->erase(pos); }
SWIGINTERN std::vector< dive::DofMeshIndex >::iterator std_vector_Sl_dive_DofMeshIndex_Sg__erase__SWIG_1(std::vector< dive::DofMeshIndex > *self,std::vector< dive::DofMeshIndex >::iterator first,std::vector< dive::DofMeshIndex >::iterator last){ return self->erase(first, last); }
SWIGINTERN std::vector< dive::DofMeshIndex >::iterator std_vector_Sl_dive_DofMeshIndex_Sg__insert__SWIG_0(std::vector< dive::DofMeshIndex > *self,std::vector< dive::DofMeshIndex >::iterator pos,std::vector< dive::DofMeshIndex >::value_type const &x){ return self->insert(pos, x); }
SWIGINTERN void std_vector_Sl_dive_DofMeshIndex_Sg__insert__SWIG_1(std::vector< dive::DofMeshIndex > *self,std::vector< dive::DofMeshIndex >::iterator pos,std::vector< dive::DofMeshIndex >::size_type n,std::vector< dive::DofMeshIndex >::value_type const &x){ self->insert(pos, n, x); }
SWIGINTERN String std_vector_Sl_dive_DofMeshIndex_Sg____str__(std::vector< dive::DofMeshIndex > const *self){
         return dive::ListDofMeshIndices(*self);
    }

  namespace swig {
    template <>  struct traits< dive::NodeMeshIndex > {
      typedef pointer_category category;
      static const char* type_name() { return"dive::NodeMeshIndex"; }
    };
  }


      namespace swig {
	template <>  struct traits<std::vector< dive::NodeMeshIndex, std::allocator< dive::NodeMeshIndex > > > {
	  typedef pointer_category category;
	  static const char* type_name() {
	    return "std::vector<" "dive::NodeMeshIndex" "," "std::allocator< dive::NodeMeshIndex >" " >";
	  }
	};
      }
    
SWIGINTERN swig::SwigPyIterator *std_vector_Sl_dive_NodeMeshIndex_Sg__iterator(std::vector< dive::NodeMeshIndex > *self,PyObject **PYTHON_SELF){
      return swig::make_output_iterator(self->begin(), self->begin(), self->end(), *PYTHON_SELF);
    }
SWIGINTERN bool std_vector_Sl_dive_NodeMeshIndex_Sg____nonzero__(std::vector< dive::NodeMeshIndex > const *self){
      return !(self->empty());
    }
SWIGINTERN bool std_vector_Sl_dive_NodeMeshIndex_Sg____bool__(std::vector< dive::NodeMeshIndex > const *self){
      return !(self->empty());
    }
SWIGINTERN std::vector< dive::NodeMeshIndex >::size_type std_vector_Sl_dive_NodeMeshIndex_Sg____len__(std::vector< dive::NodeMeshIndex > const *self){
      return self->size();
    }
SWIGINTERN std::vector< dive::NodeMeshIndex,std::allocator< dive::NodeMeshIndex > > *std_vector_Sl_dive_NodeMeshIndex_Sg____getslice__(std::vector< dive::NodeMeshIndex > *self,std::vector< dive::NodeMeshIndex >::difference_type i,std::vector< dive::NodeMeshIndex >::difference_type j){
      return swig::getslice(self, i, j, 1);
    }
SWIGINTERN void std_vector_Sl_dive_NodeMeshIndex_Sg____setslice____SWIG_0(std::vector< dive::NodeMeshIndex > *self,std::vector< dive::NodeMeshIndex >::difference_type i,std::vector< dive::NodeMeshIndex >::difference_type j){
      swig::setslice(self, i, j, 1, std::vector< dive::NodeMeshIndex,std::allocator< dive::NodeMeshIndex > >());
    }
SWIGINTERN void std_vector_Sl_dive_NodeMeshIndex_Sg____setslice____SWIG_1(std::vector< dive::NodeMeshIndex > *self,std::vector< dive::NodeMeshIndex >::difference_type i,std::vector< dive::NodeMeshIndex >::difference_type j,std::vector< dive::NodeMeshIndex,std::allocator< dive::NodeMeshIndex > > const &v){
      swig::setslice(self, i, j, 1, v);
    }
SWIGINTERN void std_vector_Sl_dive_NodeMeshIndex_Sg____delslice__(std::vector< dive::NodeMeshIndex > *self,std::vector< dive::NodeMeshIndex >::difference_type i,std::vector< dive::NodeMeshIndex >::difference_type j){
      swig::delslice(self, i, j, 1);
    }
SWIGINTERN void std_vector_Sl_dive_NodeMeshIndex_Sg____delitem____SWIG_0(std::vector< dive::NodeMeshIndex > *self,std::vector< dive::NodeMeshIndex >::difference_type i){
      swig::erase(self, swig::getpos(self, i));
    }
SWIGINTERN std::vector< dive::NodeMeshIndex,std::allocator< dive::NodeMeshIndex > > *std_vector_Sl_dive_NodeMeshIndex_Sg____getitem____SWIG_0(std::vector< dive::NodeMeshIndex > *self,SWIGPY_SLICEOBJECT *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return NULL;
      }
      PySlice_GetIndices(slice, (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector< dive::NodeMeshIndex,std::allocator< dive::NodeMeshIndex > >::difference_type id = i;
      std::vector< dive::NodeMeshIndex,std::allocator< dive::NodeMeshIndex > >::difference_type jd = j;
      return swig::getslice(self, id, jd, step);
    }
SWIGINTERN void std_vector_Sl_dive_NodeMeshIndex_Sg____setitem____SWIG_0(std::vector< dive::NodeMeshIndex > *self,SWIGPY_SLICEOBJECT *slice,std::vector< dive::NodeMeshIndex,std::allocator< dive::NodeMeshIndex > > const &v){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(slice, (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector< dive::NodeMeshIndex,std::allocator< dive::NodeMeshIndex > >::difference_type id = i;
      std::vector< dive::NodeMeshIndex,std::allocator< dive::NodeMeshIndex > >::difference_type jd = j;
      swig::setslice(self, id, jd, step, v);
    }
SWIGINTERN void std_vector_Sl_dive_NodeMeshIndex_Sg____setitem____SWIG_1(std::vector< dive::NodeMeshIndex > *self,SWIGPY_SLICEOBJECT *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(slice, (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector< dive::NodeMeshIndex,std::allocator< dive::NodeMeshIndex > >::difference_type id = i;
      std::vector< dive::NodeMeshIndex,std::allocator< dive::NodeMeshIndex > >::difference_type jd = j;
      swig::delslice(self, id, jd, step);
    }
SWIGINTERN void std_vector_Sl_dive_NodeMeshIndex_Sg____delitem____SWIG_1(std::vector< dive::NodeMeshIndex > *self,SWIGPY_SLICEOBJECT *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(slice, (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector< dive::NodeMeshIndex,std::allocator< dive::NodeMeshIndex > >::difference_type id = i;
      std::vector< dive::NodeMeshIndex,std::allocator< dive::NodeMeshIndex > >::difference_type jd = j;
      swig::delslice(self, id, jd, step);
    }
SWIGINTERN std::vector< dive::NodeMeshIndex >::value_type const &std_vector_Sl_dive_NodeMeshIndex_Sg____getitem____SWIG_1(std::vector< dive::NodeMeshIndex > const *self,std::vector< dive::NodeMeshIndex >::difference_type i){
      return *(swig::cgetpos(self, i));
    }
SWIGINTERN void std_vector_Sl_dive_NodeMeshIndex_Sg____setitem____SWIG_2(std::vector< dive::NodeMeshIndex > *self,std::vector< dive::NodeMeshIndex >::difference_type i,std::vector< dive::NodeMeshIndex >::value_type const &x){
      *(swig::getpos(self,i)) = x;
    }
SWIGINTERN std::vector< dive::NodeMeshIndex >::value_type std_vector_Sl_dive_NodeMeshIndex_Sg__pop(std::vector< dive::NodeMeshIndex > *self){
      if (self->size() == 0)
	throw std::out_of_range("pop from empty container");
      std::vector< dive::NodeMeshIndex,std::allocator< dive::NodeMeshIndex > >::value_type x = self->back();
      self->pop_back();
      return x;
    }
SWIGINTERN void std_vector_Sl_dive_NodeMeshIndex_Sg__append(std::vector< dive::NodeMeshIndex > *self,std::vector< dive::NodeMeshIndex >::value_type const &x){
      self->push_back(x);
    }
SWIGINTERN std::vector< dive::NodeMeshIndex >::iterator std_vector_Sl_dive_NodeMeshIndex_Sg__erase__SWIG_0(std::vector< dive::NodeMeshIndex > *self,std::vector< dive::NodeMeshIndex >::iterator pos){ return self->erase(pos); }
SWIGINTERN std::vector< dive::NodeMeshIndex >::iterator std_vector_Sl_dive_NodeMeshIndex_Sg__erase__SWIG_1(std::vector< dive::NodeMeshIndex > *self,std::vector< dive::NodeMeshIndex >::iterator first,std::vector< dive::NodeMeshIndex >::iterator last){ return self->erase(first, last); }
SWIGINTERN std::vector< dive::NodeMeshIndex >::iterator std_vector_Sl_dive_NodeMeshIndex_Sg__insert__SWIG_0(std::vector< dive::NodeMeshIndex > *self,std::vector< dive::NodeMeshIndex >::iterator pos,std::vector< dive::NodeMeshIndex >::value_type const &x){ return self->insert(pos, x); }
SWIGINTERN void std_vector_Sl_dive_NodeMeshIndex_Sg__insert__SWIG_1(std::vector< dive::NodeMeshIndex > *self,std::vector< dive::NodeMeshIndex >::iterator pos,std::vector< dive::NodeMeshIndex >::size_type n,std::vector< dive::NodeMeshIndex >::value_type const &x){ self->insert(pos, n, x); }

      namespace swig {
	template <>  struct traits<std::vector< std::vector< dive::NodeMeshIndex,std::allocator< dive::NodeMeshIndex > >, std::allocator< std::vector< dive::NodeMeshIndex,std::allocator< dive::NodeMeshIndex > > > > > {
	  typedef pointer_category category;
	  static const char* type_name() {
	    return "std::vector<" "std::vector< dive::NodeMeshIndex,std::allocator< dive::NodeMeshIndex > >" "," "std::allocator< std::vector< dive::NodeMeshIndex,std::allocator< dive::NodeMeshIndex > > >" " >";
	  }
	};
      }
    
SWIGINTERN swig::SwigPyIterator *std_vector_Sl_std_vector_Sl_dive_NodeMeshIndex_Sg__Sg__iterator(std::vector< std::vector< dive::NodeMeshIndex > > *self,PyObject **PYTHON_SELF){
      return swig::make_output_iterator(self->begin(), self->begin(), self->end(), *PYTHON_SELF);
    }
SWIGINTERN bool std_vector_Sl_std_vector_Sl_dive_NodeMeshIndex_Sg__Sg____nonzero__(std::vector< std::vector< dive::NodeMeshIndex > > const *self){
      return !(self->empty());
    }
SWIGINTERN bool std_vector_Sl_std_vector_Sl_dive_NodeMeshIndex_Sg__Sg____bool__(std::vector< std::vector< dive::NodeMeshIndex > > const *self){
      return !(self->empty());
    }
SWIGINTERN std::vector< std::vector< dive::NodeMeshIndex > >::size_type std_vector_Sl_std_vector_Sl_dive_NodeMeshIndex_Sg__Sg____len__(std::vector< std::vector< dive::NodeMeshIndex > > const *self){
      return self->size();
    }
SWIGINTERN std::vector< std::vector< dive::NodeMeshIndex,std::allocator< dive::NodeMeshIndex > >,std::allocator< std::vector< dive::NodeMeshIndex,std::allocator< dive::NodeMeshIndex > > > > *std_vector_Sl_std_vector_Sl_dive_NodeMeshIndex_Sg__Sg____getslice__(std::vector< std::vector< dive::NodeMeshIndex > > *self,std::vector< std::vector< dive::NodeMeshIndex > >::difference_type i,std::vector< std::vector< dive::NodeMeshIndex > >::difference_type j){
      return swig::getslice(self, i, j, 1);
    }
SWIGINTERN void std_vector_Sl_std_vector_Sl_dive_NodeMeshIndex_Sg__Sg____setslice____SWIG_0(std::vector< std::vector< dive::NodeMeshIndex > > *self,std::vector< std::vector< dive::NodeMeshIndex > >::difference_type i,std::vector< std::vector< dive::NodeMeshIndex > >::difference_type j){
      swig::setslice(self, i, j, 1, std::vector< std::vector< dive::NodeMeshIndex,std::allocator< dive::NodeMeshIndex > >,std::allocator< std::vector< dive::NodeMeshIndex,std::allocator< dive::NodeMeshIndex > > > >());
    }
SWIGINTERN void std_vector_Sl_std_vector_Sl_dive_NodeMeshIndex_Sg__Sg____setslice____SWIG_1(std::vector< std::vector< dive::NodeMeshIndex > > *self,std::vector< std::vector< dive::NodeMeshIndex > >::difference_type i,std::vector< std::vector< dive::NodeMeshIndex > >::difference_type j,std::vector< std::vector< dive::NodeMeshIndex,std::allocator< dive::NodeMeshIndex > >,std::allocator< std::vector< dive::NodeMeshIndex,std::allocator< dive::NodeMeshIndex > > > > const &v){
      swig::setslice(self, i, j, 1, v);
    }
SWIGINTERN void std_vector_Sl_std_vector_Sl_dive_NodeMeshIndex_Sg__Sg____delslice__(std::vector< std::vector< dive::NodeMeshIndex > > *self,std::vector< std::vector< dive::NodeMeshIndex > >::difference_type i,std::vector< std::vector< dive::NodeMeshIndex > >::difference_type j){
      swig::delslice(self, i, j, 1);
    }
SWIGINTERN void std_vector_Sl_std_vector_Sl_dive_NodeMeshIndex_Sg__Sg____delitem____SWIG_0(std::vector< std::vector< dive::NodeMeshIndex > > *self,std::vector< std::vector< dive::NodeMeshIndex > >::difference_type i){
      swig::erase(self, swig::getpos(self, i));
    }
SWIGINTERN std::vector< std::vector< dive::NodeMeshIndex,std::allocator< dive::NodeMeshIndex > >,std::allocator< std::vector< dive::NodeMeshIndex,std::allocator< dive::NodeMeshIndex > > > > *std_vector_Sl_std_vector_Sl_dive_NodeMeshIndex_Sg__Sg____getitem____SWIG_0(std::vector< std::vector< dive::NodeMeshIndex > > *self,SWIGPY_SLICEOBJECT *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return NULL;
      }
      PySlice_GetIndices(slice, (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector< std::vector< dive::NodeMeshIndex,std::allocator< dive::NodeMeshIndex > >,std::allocator< std::vector< dive::NodeMeshIndex,std::allocator< dive::NodeMeshIndex > > > >::difference_type id = i;
      std::vector< std::vector< dive::NodeMeshIndex,std::allocator< dive::NodeMeshIndex > >,std::allocator< std::vector< dive::NodeMeshIndex,std::allocator< dive::NodeMeshIndex > > > >::difference_type jd = j;
      return swig::getslice(self, id, jd, step);
    }
SWIGINTERN void std_vector_Sl_std_vector_Sl_dive_NodeMeshIndex_Sg__Sg____setitem____SWIG_0(std::vector< std::vector< dive::NodeMeshIndex > > *self,SWIGPY_SLICEOBJECT *slice,std::vector< std::vector< dive::NodeMeshIndex,std::allocator< dive::NodeMeshIndex > >,std::allocator< std::vector< dive::NodeMeshIndex,std::allocator< dive::NodeMeshIndex > > > > const &v){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(slice, (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector< std::vector< dive::NodeMeshIndex,std::allocator< dive::NodeMeshIndex > >,std::allocator< std::vector< dive::NodeMeshIndex,std::allocator< dive::NodeMeshIndex > > > >::difference_type id = i;
      std::vector< std::vector< dive::NodeMeshIndex,std::allocator< dive::NodeMeshIndex > >,std::allocator< std::vector< dive::NodeMeshIndex,std::allocator< dive::NodeMeshIndex > > > >::difference_type jd = j;
      swig::setslice(self, id, jd, step, v);
    }
SWIGINTERN void std_vector_Sl_std_vector_Sl_dive_NodeMeshIndex_Sg__Sg____setitem____SWIG_1(std::vector< std::vector< dive::NodeMeshIndex > > *self,SWIGPY_SLICEOBJECT *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(slice, (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector< std::vector< dive::NodeMeshIndex,std::allocator< dive::NodeMeshIndex > >,std::allocator< std::vector< dive::NodeMeshIndex,std::allocator< dive::NodeMeshIndex > > > >::difference_type id = i;
      std::vector< std::vector< dive::NodeMeshIndex,std::allocator< dive::NodeMeshIndex > >,std::allocator< std::vector< dive::NodeMeshIndex,std::allocator< dive::NodeMeshIndex > > > >::difference_type jd = j;
      swig::delslice(self, id, jd, step);
    }
SWIGINTERN void std_vector_Sl_std_vector_Sl_dive_NodeMeshIndex_Sg__Sg____delitem____SWIG_1(std::vector< std::vector< dive::NodeMeshIndex > > *self,SWIGPY_SLICEOBJECT *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(slice, (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector< std::vector< dive::NodeMeshIndex,std::allocator< dive::NodeMeshIndex > >,std::allocator< std::vector< dive::NodeMeshIndex,std::allocator< dive::NodeMeshIndex > > > >::difference_type id = i;
      std::vector< std::vector< dive::NodeMeshIndex,std::allocator< dive::NodeMeshIndex > >,std::allocator< std::vector< dive::NodeMeshIndex,std::allocator< dive::NodeMeshIndex > > > >::difference_type jd = j;
      swig::delslice(self, id, jd, step);
    }
SWIGINTERN std::vector< std::vector< dive::NodeMeshIndex > >::value_type const &std_vector_Sl_std_vector_Sl_dive_NodeMeshIndex_Sg__Sg____getitem____SWIG_1(std::vector< std::vector< dive::NodeMeshIndex > > const *self,std::vector< std::vector< dive::NodeMeshIndex > >::difference_type i){
      return *(swig::cgetpos(self, i));
    }
SWIGINTERN void std_vector_Sl_std_vector_Sl_dive_NodeMeshIndex_Sg__Sg____setitem____SWIG_2(std::vector< std::vector< dive::NodeMeshIndex > > *self,std::vector< std::vector< dive::NodeMeshIndex > >::difference_type i,std::vector< std::vector< dive::NodeMeshIndex > >::value_type const &x){
      *(swig::getpos(self,i)) = x;
    }
SWIGINTERN std::vector< std::vector< dive::NodeMeshIndex > >::value_type std_vector_Sl_std_vector_Sl_dive_NodeMeshIndex_Sg__Sg__pop(std::vector< std::vector< dive::NodeMeshIndex > > *self){
      if (self->size() == 0)
	throw std::out_of_range("pop from empty container");
      std::vector< std::vector< dive::NodeMeshIndex,std::allocator< dive::NodeMeshIndex > >,std::allocator< std::vector< dive::NodeMeshIndex,std::allocator< dive::NodeMeshIndex > > > >::value_type x = self->back();
      self->pop_back();
      return x;
    }
SWIGINTERN void std_vector_Sl_std_vector_Sl_dive_NodeMeshIndex_Sg__Sg__append(std::vector< std::vector< dive::NodeMeshIndex > > *self,std::vector< std::vector< dive::NodeMeshIndex > >::value_type const &x){
      self->push_back(x);
    }
SWIGINTERN std::vector< std::vector< dive::NodeMeshIndex > >::iterator std_vector_Sl_std_vector_Sl_dive_NodeMeshIndex_Sg__Sg__erase__SWIG_0(std::vector< std::vector< dive::NodeMeshIndex > > *self,std::vector< std::vector< dive::NodeMeshIndex > >::iterator pos){ return self->erase(pos); }
SWIGINTERN std::vector< std::vector< dive::NodeMeshIndex > >::iterator std_vector_Sl_std_vector_Sl_dive_NodeMeshIndex_Sg__Sg__erase__SWIG_1(std::vector< std::vector< dive::NodeMeshIndex > > *self,std::vector< std::vector< dive::NodeMeshIndex > >::iterator first,std::vector< std::vector< dive::NodeMeshIndex > >::iterator last){ return self->erase(first, last); }
SWIGINTERN std::vector< std::vector< dive::NodeMeshIndex > >::iterator std_vector_Sl_std_vector_Sl_dive_NodeMeshIndex_Sg__Sg__insert__SWIG_0(std::vector< std::vector< dive::NodeMeshIndex > > *self,std::vector< std::vector< dive::NodeMeshIndex > >::iterator pos,std::vector< std::vector< dive::NodeMeshIndex > >::value_type const &x){ return self->insert(pos, x); }
SWIGINTERN void std_vector_Sl_std_vector_Sl_dive_NodeMeshIndex_Sg__Sg__insert__SWIG_1(std::vector< std::vector< dive::NodeMeshIndex > > *self,std::vector< std::vector< dive::NodeMeshIndex > >::iterator pos,std::vector< std::vector< dive::NodeMeshIndex > >::size_type n,std::vector< std::vector< dive::NodeMeshIndex > >::value_type const &x){ self->insert(pos, n, x); }
SWIGINTERN String std_vector_Sl_std_vector_Sl_dive_NodeMeshIndex_Sg__Sg____str__(std::vector< std::vector< dive::NodeMeshIndex > > const *self){
         return dive::ListNodeMeshIndices(*self);
    }

  namespace swig {
    template <>  struct traits< dive::DirichletMeshIndex > {
      typedef pointer_category category;
      static const char* type_name() { return"dive::DirichletMeshIndex"; }
    };
  }


      namespace swig {
	template <>  struct traits<std::vector< dive::DirichletMeshIndex, std::allocator< dive::DirichletMeshIndex > > > {
	  typedef pointer_category category;
	  static const char* type_name() {
	    return "std::vector<" "dive::DirichletMeshIndex" "," "std::allocator< dive::DirichletMeshIndex >" " >";
	  }
	};
      }
    
SWIGINTERN swig::SwigPyIterator *std_vector_Sl_dive_DirichletMeshIndex_Sg__iterator(std::vector< dive::DirichletMeshIndex > *self,PyObject **PYTHON_SELF){
      return swig::make_output_iterator(self->begin(), self->begin(), self->end(), *PYTHON_SELF);
    }
SWIGINTERN bool std_vector_Sl_dive_DirichletMeshIndex_Sg____nonzero__(std::vector< dive::DirichletMeshIndex > const *self){
      return !(self->empty());
    }
SWIGINTERN bool std_vector_Sl_dive_DirichletMeshIndex_Sg____bool__(std::vector< dive::DirichletMeshIndex > const *self){
      return !(self->empty());
    }
SWIGINTERN std::vector< dive::DirichletMeshIndex >::size_type std_vector_Sl_dive_DirichletMeshIndex_Sg____len__(std::vector< dive::DirichletMeshIndex > const *self){
      return self->size();
    }
SWIGINTERN std::vector< dive::DirichletMeshIndex,std::allocator< dive::DirichletMeshIndex > > *std_vector_Sl_dive_DirichletMeshIndex_Sg____getslice__(std::vector< dive::DirichletMeshIndex > *self,std::vector< dive::DirichletMeshIndex >::difference_type i,std::vector< dive::DirichletMeshIndex >::difference_type j){
      return swig::getslice(self, i, j, 1);
    }
SWIGINTERN void std_vector_Sl_dive_DirichletMeshIndex_Sg____setslice____SWIG_0(std::vector< dive::DirichletMeshIndex > *self,std::vector< dive::DirichletMeshIndex >::difference_type i,std::vector< dive::DirichletMeshIndex >::difference_type j){
      swig::setslice(self, i, j, 1, std::vector< dive::DirichletMeshIndex,std::allocator< dive::DirichletMeshIndex > >());
    }
SWIGINTERN void std_vector_Sl_dive_DirichletMeshIndex_Sg____setslice____SWIG_1(std::vector< dive::DirichletMeshIndex > *self,std::vector< dive::DirichletMeshIndex >::difference_type i,std::vector< dive::DirichletMeshIndex >::difference_type j,std::vector< dive::DirichletMeshIndex,std::allocator< dive::DirichletMeshIndex > > const &v){
      swig::setslice(self, i, j, 1, v);
    }
SWIGINTERN void std_vector_Sl_dive_DirichletMeshIndex_Sg____delslice__(std::vector< dive::DirichletMeshIndex > *self,std::vector< dive::DirichletMeshIndex >::difference_type i,std::vector< dive::DirichletMeshIndex >::difference_type j){
      swig::delslice(self, i, j, 1);
    }
SWIGINTERN void std_vector_Sl_dive_DirichletMeshIndex_Sg____delitem____SWIG_0(std::vector< dive::DirichletMeshIndex > *self,std::vector< dive::DirichletMeshIndex >::difference_type i){
      swig::erase(self, swig::getpos(self, i));
    }
SWIGINTERN std::vector< dive::DirichletMeshIndex,std::allocator< dive::DirichletMeshIndex > > *std_vector_Sl_dive_DirichletMeshIndex_Sg____getitem____SWIG_0(std::vector< dive::DirichletMeshIndex > *self,SWIGPY_SLICEOBJECT *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return NULL;
      }
      PySlice_GetIndices(slice, (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector< dive::DirichletMeshIndex,std::allocator< dive::DirichletMeshIndex > >::difference_type id = i;
      std::vector< dive::DirichletMeshIndex,std::allocator< dive::DirichletMeshIndex > >::difference_type jd = j;
      return swig::getslice(self, id, jd, step);
    }
SWIGINTERN void std_vector_Sl_dive_DirichletMeshIndex_Sg____setitem____SWIG_0(std::vector< dive::DirichletMeshIndex > *self,SWIGPY_SLICEOBJECT *slice,std::vector< dive::DirichletMeshIndex,std::allocator< dive::DirichletMeshIndex > > const &v){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(slice, (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector< dive::DirichletMeshIndex,std::allocator< dive::DirichletMeshIndex > >::difference_type id = i;
      std::vector< dive::DirichletMeshIndex,std::allocator< dive::DirichletMeshIndex > >::difference_type jd = j;
      swig::setslice(self, id, jd, step, v);
    }
SWIGINTERN void std_vector_Sl_dive_DirichletMeshIndex_Sg____setitem____SWIG_1(std::vector< dive::DirichletMeshIndex > *self,SWIGPY_SLICEOBJECT *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(slice, (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector< dive::DirichletMeshIndex,std::allocator< dive::DirichletMeshIndex > >::difference_type id = i;
      std::vector< dive::DirichletMeshIndex,std::allocator< dive::DirichletMeshIndex > >::difference_type jd = j;
      swig::delslice(self, id, jd, step);
    }
SWIGINTERN void std_vector_Sl_dive_DirichletMeshIndex_Sg____delitem____SWIG_1(std::vector< dive::DirichletMeshIndex > *self,SWIGPY_SLICEOBJECT *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(slice, (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector< dive::DirichletMeshIndex,std::allocator< dive::DirichletMeshIndex > >::difference_type id = i;
      std::vector< dive::DirichletMeshIndex,std::allocator< dive::DirichletMeshIndex > >::difference_type jd = j;
      swig::delslice(self, id, jd, step);
    }
SWIGINTERN std::vector< dive::DirichletMeshIndex >::value_type const &std_vector_Sl_dive_DirichletMeshIndex_Sg____getitem____SWIG_1(std::vector< dive::DirichletMeshIndex > const *self,std::vector< dive::DirichletMeshIndex >::difference_type i){
      return *(swig::cgetpos(self, i));
    }
SWIGINTERN void std_vector_Sl_dive_DirichletMeshIndex_Sg____setitem____SWIG_2(std::vector< dive::DirichletMeshIndex > *self,std::vector< dive::DirichletMeshIndex >::difference_type i,std::vector< dive::DirichletMeshIndex >::value_type const &x){
      *(swig::getpos(self,i)) = x;
    }
SWIGINTERN std::vector< dive::DirichletMeshIndex >::value_type std_vector_Sl_dive_DirichletMeshIndex_Sg__pop(std::vector< dive::DirichletMeshIndex > *self){
      if (self->size() == 0)
	throw std::out_of_range("pop from empty container");
      std::vector< dive::DirichletMeshIndex,std::allocator< dive::DirichletMeshIndex > >::value_type x = self->back();
      self->pop_back();
      return x;
    }
SWIGINTERN void std_vector_Sl_dive_DirichletMeshIndex_Sg__append(std::vector< dive::DirichletMeshIndex > *self,std::vector< dive::DirichletMeshIndex >::value_type const &x){
      self->push_back(x);
    }
SWIGINTERN std::vector< dive::DirichletMeshIndex >::iterator std_vector_Sl_dive_DirichletMeshIndex_Sg__erase__SWIG_0(std::vector< dive::DirichletMeshIndex > *self,std::vector< dive::DirichletMeshIndex >::iterator pos){ return self->erase(pos); }
SWIGINTERN std::vector< dive::DirichletMeshIndex >::iterator std_vector_Sl_dive_DirichletMeshIndex_Sg__erase__SWIG_1(std::vector< dive::DirichletMeshIndex > *self,std::vector< dive::DirichletMeshIndex >::iterator first,std::vector< dive::DirichletMeshIndex >::iterator last){ return self->erase(first, last); }
SWIGINTERN std::vector< dive::DirichletMeshIndex >::iterator std_vector_Sl_dive_DirichletMeshIndex_Sg__insert__SWIG_0(std::vector< dive::DirichletMeshIndex > *self,std::vector< dive::DirichletMeshIndex >::iterator pos,std::vector< dive::DirichletMeshIndex >::value_type const &x){ return self->insert(pos, x); }
SWIGINTERN void std_vector_Sl_dive_DirichletMeshIndex_Sg__insert__SWIG_1(std::vector< dive::DirichletMeshIndex > *self,std::vector< dive::DirichletMeshIndex >::iterator pos,std::vector< dive::DirichletMeshIndex >::size_type n,std::vector< dive::DirichletMeshIndex >::value_type const &x){ self->insert(pos, n, x); }
SWIGINTERN String std_vector_Sl_dive_DirichletMeshIndex_Sg____str__(std::vector< dive::DirichletMeshIndex > const *self){
         return dive::ListDirichletMeshIndices(*self);
    }

	#include "dive_problems.hpp"
	#include "dive_problems_thermal.hpp"
	#include "dive_problems_fluid.hpp"
	#include "dive_problems_pressure.hpp"

	typedef std::shared_ptr<dive::problems::IProblem> IProblemPtr;
	typedef std::shared_ptr<const dive::problems::IProblem> ConstIProblemPtr;
	
	typedef std::shared_ptr<dive::problems::ProblemFluid> ProblemFluidPtr;
	typedef std::shared_ptr<const dive::problems::ProblemFluid> ConstProblemFluidPtr;	
	
	typedef std::shared_ptr<dive::problems::ProblemPressure> ProblemPressurePtr;
	typedef std::shared_ptr<const dive::problems::ProblemPressure> ConstProblemPressurePtr;

	typedef std::shared_ptr<dive::problems::ProblemThermal> ProblemThermalPtr;
	typedef std::shared_ptr<const dive::problems::ProblemThermal> ConstProblemThermalPtr;


	#include "dive_selection.hpp"


	using Axis = eilig::Axis;
	using Scalar = eilig::Scalar;
	using Vector = eilig::Vector;
	using Matrix = eilig::Matrix;
	using Sparse = eilig::Ellpack;
	
	using Status = long long int;
	using Tag = std::size_t;
	using Type = std::size_t;

	using Dimension = std::size_t;
	using Index = std::size_t;
	using DofIndex = Index;
	using NodeIndex = Index;
	using ElementIndex = Index;
	using FaceIndex = Index;
	using EdgeIndex = Index;
	using DirichletIndex = Index;
	using CacheIndex = Index;

	using Number = std::size_t;
	using NumberDof = Number;
	using NumberNodes = Number;
	using NumberFaces = Number;
	using NumberEdges = Number;
	
	using Indices = std::vector<size_t>;	
	using String = std::string;

#ifdef __cplusplus
extern "C" {
#endif
SWIGINTERN PyObject *_wrap_delete_SwigPyIterator(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_SwigPyIterator" "', argument " "1"" of type '" "swig::SwigPyIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_value(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  PyObject *result = 0 ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator_value" "', argument " "1"" of type '" "swig::SwigPyIterator const *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  try {
    result = (PyObject *)((swig::SwigPyIterator const *)arg1)->value();
  } catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_incr__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  swig::SwigPyIterator *result = 0 ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator_incr" "', argument " "1"" of type '" "swig::SwigPyIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SwigPyIterator_incr" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  try {
    result = (swig::SwigPyIterator *)(arg1)->incr(arg2);
  } catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_incr__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *result = 0 ;
  
  (void)self;
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator_incr" "', argument " "1"" of type '" "swig::SwigPyIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  try {
    result = (swig::SwigPyIterator *)(arg1)->incr();
  } catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_incr(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "SwigPyIterator_incr", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_swig__SwigPyIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_SwigPyIterator_incr__SWIG_1(self, argc, argv);
    }
  }
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_swig__SwigPyIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_SwigPyIterator_incr__SWIG_0(self, argc, argv);
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'SwigPyIterator_incr'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    swig::SwigPyIterator::incr(size_t)\n"
    "    swig::SwigPyIterator::incr()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_decr__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  swig::SwigPyIterator *result = 0 ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator_decr" "', argument " "1"" of type '" "swig::SwigPyIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SwigPyIterator_decr" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  try {
    result = (swig::SwigPyIterator *)(arg1)->decr(arg2);
  } catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_decr__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *result = 0 ;
  
  (void)self;
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator_decr" "', argument " "1"" of type '" "swig::SwigPyIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  try {
    result = (swig::SwigPyIterator *)(arg1)->decr();
  } catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_decr(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "SwigPyIterator_decr", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_swig__SwigPyIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_SwigPyIterator_decr__SWIG_1(self, argc, argv);
    }
  }
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_swig__SwigPyIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_SwigPyIterator_decr__SWIG_0(self, argc, argv);
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'SwigPyIterator_decr'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    swig::SwigPyIterator::decr(size_t)\n"
    "    swig::SwigPyIterator::decr()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_distance(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  swig::SwigPyIterator *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  ptrdiff_t result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "SwigPyIterator_distance", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator_distance" "', argument " "1"" of type '" "swig::SwigPyIterator const *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_swig__SwigPyIterator,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SwigPyIterator_distance" "', argument " "2"" of type '" "swig::SwigPyIterator const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SwigPyIterator_distance" "', argument " "2"" of type '" "swig::SwigPyIterator const &""'"); 
  }
  arg2 = reinterpret_cast< swig::SwigPyIterator * >(argp2);
  try {
    result = ((swig::SwigPyIterator const *)arg1)->distance((swig::SwigPyIterator const &)*arg2);
  } catch(std::invalid_argument &_e) {
    SWIG_Python_Raise(SWIG_NewPointerObj((new std::invalid_argument(static_cast< const std::invalid_argument& >(_e))),SWIGTYPE_p_std__invalid_argument,SWIG_POINTER_OWN), "std::invalid_argument", SWIGTYPE_p_std__invalid_argument); SWIG_fail;
  }
  resultobj = SWIG_From_ptrdiff_t(static_cast< ptrdiff_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_equal(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  swig::SwigPyIterator *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  bool result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "SwigPyIterator_equal", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator_equal" "', argument " "1"" of type '" "swig::SwigPyIterator const *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_swig__SwigPyIterator,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SwigPyIterator_equal" "', argument " "2"" of type '" "swig::SwigPyIterator const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SwigPyIterator_equal" "', argument " "2"" of type '" "swig::SwigPyIterator const &""'"); 
  }
  arg2 = reinterpret_cast< swig::SwigPyIterator * >(argp2);
  try {
    result = (bool)((swig::SwigPyIterator const *)arg1)->equal((swig::SwigPyIterator const &)*arg2);
  } catch(std::invalid_argument &_e) {
    SWIG_Python_Raise(SWIG_NewPointerObj((new std::invalid_argument(static_cast< const std::invalid_argument& >(_e))),SWIGTYPE_p_std__invalid_argument,SWIG_POINTER_OWN), "std::invalid_argument", SWIGTYPE_p_std__invalid_argument); SWIG_fail;
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_copy(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  swig::SwigPyIterator *result = 0 ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator_copy" "', argument " "1"" of type '" "swig::SwigPyIterator const *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  result = (swig::SwigPyIterator *)((swig::SwigPyIterator const *)arg1)->copy();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_next(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  PyObject *result = 0 ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator_next" "', argument " "1"" of type '" "swig::SwigPyIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  try {
    result = (PyObject *)(arg1)->next();
  } catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator___next__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  PyObject *result = 0 ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator___next__" "', argument " "1"" of type '" "swig::SwigPyIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  try {
    result = (PyObject *)(arg1)->__next__();
  } catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_previous(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  PyObject *result = 0 ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator_previous" "', argument " "1"" of type '" "swig::SwigPyIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  try {
    result = (PyObject *)(arg1)->previous();
  } catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_advance(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  ptrdiff_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  swig::SwigPyIterator *result = 0 ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "SwigPyIterator_advance", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator_advance" "', argument " "1"" of type '" "swig::SwigPyIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SwigPyIterator_advance" "', argument " "2"" of type '" "ptrdiff_t""'");
  } 
  arg2 = static_cast< ptrdiff_t >(val2);
  try {
    result = (swig::SwigPyIterator *)(arg1)->advance(arg2);
  } catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator___eq__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  swig::SwigPyIterator *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  bool result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "SwigPyIterator___eq__", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator___eq__" "', argument " "1"" of type '" "swig::SwigPyIterator const *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_swig__SwigPyIterator,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SwigPyIterator___eq__" "', argument " "2"" of type '" "swig::SwigPyIterator const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SwigPyIterator___eq__" "', argument " "2"" of type '" "swig::SwigPyIterator const &""'"); 
  }
  arg2 = reinterpret_cast< swig::SwigPyIterator * >(argp2);
  result = (bool)((swig::SwigPyIterator const *)arg1)->operator ==((swig::SwigPyIterator const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  if (PyErr_Occurred() && !PyErr_ExceptionMatches(PyExc_TypeError)) {
    return NULL;
  }
  PyErr_Clear();
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator___ne__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  swig::SwigPyIterator *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  bool result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "SwigPyIterator___ne__", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator___ne__" "', argument " "1"" of type '" "swig::SwigPyIterator const *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_swig__SwigPyIterator,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SwigPyIterator___ne__" "', argument " "2"" of type '" "swig::SwigPyIterator const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SwigPyIterator___ne__" "', argument " "2"" of type '" "swig::SwigPyIterator const &""'"); 
  }
  arg2 = reinterpret_cast< swig::SwigPyIterator * >(argp2);
  result = (bool)((swig::SwigPyIterator const *)arg1)->operator !=((swig::SwigPyIterator const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  if (PyErr_Occurred() && !PyErr_ExceptionMatches(PyExc_TypeError)) {
    return NULL;
  }
  PyErr_Clear();
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator___iadd__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  ptrdiff_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  swig::SwigPyIterator *result = 0 ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "SwigPyIterator___iadd__", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator___iadd__" "', argument " "1"" of type '" "swig::SwigPyIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SwigPyIterator___iadd__" "', argument " "2"" of type '" "ptrdiff_t""'");
  } 
  arg2 = static_cast< ptrdiff_t >(val2);
  try {
    result = (swig::SwigPyIterator *) &(arg1)->operator +=(arg2);
  } catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator___isub__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  ptrdiff_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  swig::SwigPyIterator *result = 0 ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "SwigPyIterator___isub__", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator___isub__" "', argument " "1"" of type '" "swig::SwigPyIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SwigPyIterator___isub__" "', argument " "2"" of type '" "ptrdiff_t""'");
  } 
  arg2 = static_cast< ptrdiff_t >(val2);
  try {
    result = (swig::SwigPyIterator *) &(arg1)->operator -=(arg2);
  } catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator___add__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  ptrdiff_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  swig::SwigPyIterator *result = 0 ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "SwigPyIterator___add__", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator___add__" "', argument " "1"" of type '" "swig::SwigPyIterator const *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SwigPyIterator___add__" "', argument " "2"" of type '" "ptrdiff_t""'");
  } 
  arg2 = static_cast< ptrdiff_t >(val2);
  try {
    result = (swig::SwigPyIterator *)((swig::SwigPyIterator const *)arg1)->operator +(arg2);
  } catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  if (PyErr_Occurred() && !PyErr_ExceptionMatches(PyExc_TypeError)) {
    return NULL;
  }
  PyErr_Clear();
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator___sub____SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  ptrdiff_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  swig::SwigPyIterator *result = 0 ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator___sub__" "', argument " "1"" of type '" "swig::SwigPyIterator const *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SwigPyIterator___sub__" "', argument " "2"" of type '" "ptrdiff_t""'");
  } 
  arg2 = static_cast< ptrdiff_t >(val2);
  try {
    result = (swig::SwigPyIterator *)((swig::SwigPyIterator const *)arg1)->operator -(arg2);
  } catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  if (PyErr_Occurred() && !PyErr_ExceptionMatches(PyExc_TypeError)) {
    return NULL;
  }
  PyErr_Clear();
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator___sub____SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  swig::SwigPyIterator *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  ptrdiff_t result;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator___sub__" "', argument " "1"" of type '" "swig::SwigPyIterator const *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_swig__SwigPyIterator,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SwigPyIterator___sub__" "', argument " "2"" of type '" "swig::SwigPyIterator const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SwigPyIterator___sub__" "', argument " "2"" of type '" "swig::SwigPyIterator const &""'"); 
  }
  arg2 = reinterpret_cast< swig::SwigPyIterator * >(argp2);
  result = ((swig::SwigPyIterator const *)arg1)->operator -((swig::SwigPyIterator const &)*arg2);
  resultobj = SWIG_From_ptrdiff_t(static_cast< ptrdiff_t >(result));
  return resultobj;
fail:
  if (PyErr_Occurred() && !PyErr_ExceptionMatches(PyExc_TypeError)) {
    return NULL;
  }
  PyErr_Clear();
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator___sub__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "SwigPyIterator___sub__", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_swig__SwigPyIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_NO_NULL | 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_SwigPyIterator___sub____SWIG_1(self, argc, argv);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_swig__SwigPyIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_SwigPyIterator___sub____SWIG_0(self, argc, argv);
      }
    }
  }
  
fail:
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *SwigPyIterator_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_swig__SwigPyIterator, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_vecSizeT_iterator(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::size_t > *arg1 = (std::vector< std::size_t > *) 0 ;
  PyObject **arg2 = (PyObject **) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  swig::SwigPyIterator *result = 0 ;
  
  arg2 = &swig_obj[0];
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__size_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vecSizeT_iterator" "', argument " "1"" of type '" "std::vector< std::size_t > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::size_t > * >(argp1);
  result = (swig::SwigPyIterator *)std_vector_Sl_std_size_t_Sg__iterator(arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vecSizeT___nonzero__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::size_t > *arg1 = (std::vector< std::size_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__size_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vecSizeT___nonzero__" "', argument " "1"" of type '" "std::vector< std::size_t > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::size_t > * >(argp1);
  result = (bool)std_vector_Sl_std_size_t_Sg____nonzero__((std::vector< ::size_t > const *)arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vecSizeT___bool__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::size_t > *arg1 = (std::vector< std::size_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__size_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vecSizeT___bool__" "', argument " "1"" of type '" "std::vector< std::size_t > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::size_t > * >(argp1);
  result = (bool)std_vector_Sl_std_size_t_Sg____bool__((std::vector< ::size_t > const *)arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vecSizeT___len__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::size_t > *arg1 = (std::vector< std::size_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< ::size_t >::size_type result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__size_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vecSizeT___len__" "', argument " "1"" of type '" "std::vector< std::size_t > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::size_t > * >(argp1);
  result = std_vector_Sl_std_size_t_Sg____len__((std::vector< ::size_t > const *)arg1);
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vecSizeT___getslice__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::size_t > *arg1 = (std::vector< std::size_t > *) 0 ;
  std::vector< ::size_t >::difference_type arg2 ;
  std::vector< ::size_t >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  std::vector< ::size_t,std::allocator< ::size_t > > *result = 0 ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "vecSizeT___getslice__", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__size_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vecSizeT___getslice__" "', argument " "1"" of type '" "std::vector< std::size_t > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::size_t > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vecSizeT___getslice__" "', argument " "2"" of type '" "std::vector< ::size_t >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< ::size_t >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "vecSizeT___getslice__" "', argument " "3"" of type '" "std::vector< ::size_t >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< ::size_t >::difference_type >(val3);
  try {
    result = (std::vector< ::size_t,std::allocator< ::size_t > > *)std_vector_Sl_std_size_t_Sg____getslice__(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3));
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__size_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vecSizeT___setslice____SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< std::size_t > *arg1 = (std::vector< std::size_t > *) 0 ;
  std::vector< ::size_t >::difference_type arg2 ;
  std::vector< ::size_t >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__size_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vecSizeT___setslice__" "', argument " "1"" of type '" "std::vector< std::size_t > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::size_t > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vecSizeT___setslice__" "', argument " "2"" of type '" "std::vector< ::size_t >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< ::size_t >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "vecSizeT___setslice__" "', argument " "3"" of type '" "std::vector< ::size_t >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< ::size_t >::difference_type >(val3);
  try {
    std_vector_Sl_std_size_t_Sg____setslice____SWIG_0(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3));
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vecSizeT___setslice____SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< std::size_t > *arg1 = (std::vector< std::size_t > *) 0 ;
  std::vector< ::size_t >::difference_type arg2 ;
  std::vector< ::size_t >::difference_type arg3 ;
  std::vector< ::size_t,std::allocator< ::size_t > > *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  
  (void)self;
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__size_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vecSizeT___setslice__" "', argument " "1"" of type '" "std::vector< std::size_t > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::size_t > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vecSizeT___setslice__" "', argument " "2"" of type '" "std::vector< ::size_t >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< ::size_t >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "vecSizeT___setslice__" "', argument " "3"" of type '" "std::vector< ::size_t >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< ::size_t >::difference_type >(val3);
  {
    std::vector< ::size_t,std::allocator< ::size_t > > *ptr = (std::vector< ::size_t,std::allocator< ::size_t > > *)0;
    res4 = swig::asptr(swig_obj[3], &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "vecSizeT___setslice__" "', argument " "4"" of type '" "std::vector< ::size_t,std::allocator< ::size_t > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vecSizeT___setslice__" "', argument " "4"" of type '" "std::vector< ::size_t,std::allocator< ::size_t > > const &""'"); 
    }
    arg4 = ptr;
  }
  try {
    std_vector_Sl_std_size_t_Sg____setslice____SWIG_1(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3),(std::vector< ::size_t,std::allocator< ::size_t > > const &)*arg4);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_vecSizeT___setslice__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "vecSizeT___setslice__", 0, 4, argv))) SWIG_fail;
  --argc;
  if (argc == 3) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< ::size_t,std::allocator< ::size_t > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_ptrdiff_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_vecSizeT___setslice____SWIG_0(self, argc, argv);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< ::size_t,std::allocator< ::size_t > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_ptrdiff_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = swig::asptr(argv[3], (std::vector< ::size_t,std::allocator< ::size_t > >**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_vecSizeT___setslice____SWIG_1(self, argc, argv);
          }
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'vecSizeT___setslice__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< std::size_t >::__setslice__(std::vector< ::size_t >::difference_type,std::vector< ::size_t >::difference_type)\n"
    "    std::vector< std::size_t >::__setslice__(std::vector< ::size_t >::difference_type,std::vector< ::size_t >::difference_type,std::vector< ::size_t,std::allocator< ::size_t > > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_vecSizeT___delslice__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::size_t > *arg1 = (std::vector< std::size_t > *) 0 ;
  std::vector< ::size_t >::difference_type arg2 ;
  std::vector< ::size_t >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "vecSizeT___delslice__", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__size_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vecSizeT___delslice__" "', argument " "1"" of type '" "std::vector< std::size_t > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::size_t > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vecSizeT___delslice__" "', argument " "2"" of type '" "std::vector< ::size_t >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< ::size_t >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "vecSizeT___delslice__" "', argument " "3"" of type '" "std::vector< ::size_t >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< ::size_t >::difference_type >(val3);
  try {
    std_vector_Sl_std_size_t_Sg____delslice__(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3));
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vecSizeT___delitem____SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< std::size_t > *arg1 = (std::vector< std::size_t > *) 0 ;
  std::vector< ::size_t >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__size_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vecSizeT___delitem__" "', argument " "1"" of type '" "std::vector< std::size_t > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::size_t > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vecSizeT___delitem__" "', argument " "2"" of type '" "std::vector< ::size_t >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< ::size_t >::difference_type >(val2);
  try {
    std_vector_Sl_std_size_t_Sg____delitem____SWIG_0(arg1,SWIG_STD_MOVE(arg2));
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vecSizeT___getitem____SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< std::size_t > *arg1 = (std::vector< std::size_t > *) 0 ;
  SWIGPY_SLICEOBJECT *arg2 = (SWIGPY_SLICEOBJECT *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< ::size_t,std::allocator< ::size_t > > *result = 0 ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__size_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vecSizeT___getitem__" "', argument " "1"" of type '" "std::vector< std::size_t > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::size_t > * >(argp1);
  {
    if (!PySlice_Check(swig_obj[1])) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vecSizeT___getitem__" "', argument " "2"" of type '" "SWIGPY_SLICEOBJECT *""'");
    }
    arg2 = (SWIGPY_SLICEOBJECT *) swig_obj[1];
  }
  try {
    result = (std::vector< ::size_t,std::allocator< ::size_t > > *)std_vector_Sl_std_size_t_Sg____getitem____SWIG_0(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__size_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vecSizeT___setitem____SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< std::size_t > *arg1 = (std::vector< std::size_t > *) 0 ;
  SWIGPY_SLICEOBJECT *arg2 = (SWIGPY_SLICEOBJECT *) 0 ;
  std::vector< ::size_t,std::allocator< ::size_t > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__size_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vecSizeT___setitem__" "', argument " "1"" of type '" "std::vector< std::size_t > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::size_t > * >(argp1);
  {
    if (!PySlice_Check(swig_obj[1])) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vecSizeT___setitem__" "', argument " "2"" of type '" "SWIGPY_SLICEOBJECT *""'");
    }
    arg2 = (SWIGPY_SLICEOBJECT *) swig_obj[1];
  }
  {
    std::vector< ::size_t,std::allocator< ::size_t > > *ptr = (std::vector< ::size_t,std::allocator< ::size_t > > *)0;
    res3 = swig::asptr(swig_obj[2], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "vecSizeT___setitem__" "', argument " "3"" of type '" "std::vector< ::size_t,std::allocator< ::size_t > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vecSizeT___setitem__" "', argument " "3"" of type '" "std::vector< ::size_t,std::allocator< ::size_t > > const &""'"); 
    }
    arg3 = ptr;
  }
  try {
    std_vector_Sl_std_size_t_Sg____setitem____SWIG_0(arg1,arg2,(std::vector< ::size_t,std::allocator< ::size_t > > const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_vecSizeT___setitem____SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< std::size_t > *arg1 = (std::vector< std::size_t > *) 0 ;
  SWIGPY_SLICEOBJECT *arg2 = (SWIGPY_SLICEOBJECT *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__size_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vecSizeT___setitem__" "', argument " "1"" of type '" "std::vector< std::size_t > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::size_t > * >(argp1);
  {
    if (!PySlice_Check(swig_obj[1])) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vecSizeT___setitem__" "', argument " "2"" of type '" "SWIGPY_SLICEOBJECT *""'");
    }
    arg2 = (SWIGPY_SLICEOBJECT *) swig_obj[1];
  }
  try {
    std_vector_Sl_std_size_t_Sg____setitem____SWIG_1(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vecSizeT___delitem____SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< std::size_t > *arg1 = (std::vector< std::size_t > *) 0 ;
  SWIGPY_SLICEOBJECT *arg2 = (SWIGPY_SLICEOBJECT *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__size_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vecSizeT___delitem__" "', argument " "1"" of type '" "std::vector< std::size_t > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::size_t > * >(argp1);
  {
    if (!PySlice_Check(swig_obj[1])) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vecSizeT___delitem__" "', argument " "2"" of type '" "SWIGPY_SLICEOBJECT *""'");
    }
    arg2 = (SWIGPY_SLICEOBJECT *) swig_obj[1];
  }
  try {
    std_vector_Sl_std_size_t_Sg____delitem____SWIG_1(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vecSizeT___delitem__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "vecSizeT___delitem__", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< ::size_t,std::allocator< ::size_t > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_vecSizeT___delitem____SWIG_1(self, argc, argv);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< ::size_t,std::allocator< ::size_t > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_vecSizeT___delitem____SWIG_0(self, argc, argv);
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'vecSizeT___delitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< std::size_t >::__delitem__(std::vector< ::size_t >::difference_type)\n"
    "    std::vector< std::size_t >::__delitem__(SWIGPY_SLICEOBJECT *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_vecSizeT___getitem____SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< std::size_t > *arg1 = (std::vector< std::size_t > *) 0 ;
  std::vector< ::size_t >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  std::vector< ::size_t >::value_type *result = 0 ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__size_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vecSizeT___getitem__" "', argument " "1"" of type '" "std::vector< std::size_t > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::size_t > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vecSizeT___getitem__" "', argument " "2"" of type '" "std::vector< ::size_t >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< ::size_t >::difference_type >(val2);
  try {
    result = (std::vector< ::size_t >::value_type *) &std_vector_Sl_std_size_t_Sg____getitem____SWIG_1((std::vector< ::size_t > const *)arg1,SWIG_STD_MOVE(arg2));
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(*result));
  (void)swig::container_owner<swig::traits<std::vector< ::size_t >::value_type>::category>::back_reference(resultobj, swig_obj[0]);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vecSizeT___getitem__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "vecSizeT___getitem__", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< ::size_t,std::allocator< ::size_t > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_vecSizeT___getitem____SWIG_0(self, argc, argv);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< ::size_t,std::allocator< ::size_t > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_vecSizeT___getitem____SWIG_1(self, argc, argv);
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'vecSizeT___getitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< std::size_t >::__getitem__(SWIGPY_SLICEOBJECT *)\n"
    "    std::vector< std::size_t >::__getitem__(std::vector< ::size_t >::difference_type) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_vecSizeT___setitem____SWIG_2(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< std::size_t > *arg1 = (std::vector< std::size_t > *) 0 ;
  std::vector< ::size_t >::difference_type arg2 ;
  std::vector< ::size_t >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  std::vector< ::size_t >::value_type temp3 ;
  size_t val3 ;
  int ecode3 = 0 ;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__size_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vecSizeT___setitem__" "', argument " "1"" of type '" "std::vector< std::size_t > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::size_t > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vecSizeT___setitem__" "', argument " "2"" of type '" "std::vector< ::size_t >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< ::size_t >::difference_type >(val2);
  ecode3 = SWIG_AsVal_size_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "vecSizeT___setitem__" "', argument " "3"" of type '" "std::vector< ::size_t >::value_type""'");
  } 
  temp3 = static_cast< std::vector< ::size_t >::value_type >(val3);
  arg3 = &temp3;
  try {
    std_vector_Sl_std_size_t_Sg____setitem____SWIG_2(arg1,SWIG_STD_MOVE(arg2),(::size_t const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vecSizeT___setitem__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "vecSizeT___setitem__", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< ::size_t,std::allocator< ::size_t > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_vecSizeT___setitem____SWIG_1(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< ::size_t,std::allocator< ::size_t > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        int res = swig::asptr(argv[2], (std::vector< ::size_t,std::allocator< ::size_t > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_vecSizeT___setitem____SWIG_0(self, argc, argv);
        }
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< ::size_t,std::allocator< ::size_t > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_vecSizeT___setitem____SWIG_2(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'vecSizeT___setitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< std::size_t >::__setitem__(SWIGPY_SLICEOBJECT *,std::vector< ::size_t,std::allocator< ::size_t > > const &)\n"
    "    std::vector< std::size_t >::__setitem__(SWIGPY_SLICEOBJECT *)\n"
    "    std::vector< std::size_t >::__setitem__(std::vector< ::size_t >::difference_type,std::vector< ::size_t >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_vecSizeT_pop(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::size_t > *arg1 = (std::vector< std::size_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< ::size_t >::value_type result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__size_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vecSizeT_pop" "', argument " "1"" of type '" "std::vector< std::size_t > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::size_t > * >(argp1);
  try {
    result = std_vector_Sl_std_size_t_Sg__pop(arg1);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vecSizeT_append(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::size_t > *arg1 = (std::vector< std::size_t > *) 0 ;
  std::vector< ::size_t >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< ::size_t >::value_type temp2 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "vecSizeT_append", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__size_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vecSizeT_append" "', argument " "1"" of type '" "std::vector< std::size_t > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::size_t > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vecSizeT_append" "', argument " "2"" of type '" "std::vector< ::size_t >::value_type""'");
  } 
  temp2 = static_cast< std::vector< ::size_t >::value_type >(val2);
  arg2 = &temp2;
  std_vector_Sl_std_size_t_Sg__append(arg1,(::size_t const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_vecSizeT__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **SWIGUNUSEDPARM(swig_obj)) {
  PyObject *resultobj = 0;
  std::vector< std::size_t > *result = 0 ;
  
  (void)self;
  if ((nobjs < 0) || (nobjs > 0)) SWIG_fail;
  result = (std::vector< std::size_t > *)new std::vector< std::size_t >();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__size_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_vecSizeT__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< std::size_t > *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  std::vector< std::size_t > *result = 0 ;
  
  (void)self;
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  {
    std::vector< ::size_t,std::allocator< ::size_t > > *ptr = (std::vector< ::size_t,std::allocator< ::size_t > > *)0;
    res1 = swig::asptr(swig_obj[0], &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_vecSizeT" "', argument " "1"" of type '" "std::vector< std::size_t > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_vecSizeT" "', argument " "1"" of type '" "std::vector< std::size_t > const &""'"); 
    }
    arg1 = ptr;
  }
  result = (std::vector< std::size_t > *)new std::vector< std::size_t >((std::vector< std::size_t > const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__size_t_t, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_vecSizeT_empty(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::size_t > *arg1 = (std::vector< std::size_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__size_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vecSizeT_empty" "', argument " "1"" of type '" "std::vector< std::size_t > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::size_t > * >(argp1);
  result = (bool)((std::vector< std::size_t > const *)arg1)->empty();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vecSizeT_size(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::size_t > *arg1 = (std::vector< std::size_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< ::size_t >::size_type result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__size_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vecSizeT_size" "', argument " "1"" of type '" "std::vector< std::size_t > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::size_t > * >(argp1);
  result = ((std::vector< std::size_t > const *)arg1)->size();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vecSizeT_swap(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::size_t > *arg1 = (std::vector< std::size_t > *) 0 ;
  std::vector< std::size_t > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "vecSizeT_swap", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__size_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vecSizeT_swap" "', argument " "1"" of type '" "std::vector< std::size_t > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::size_t > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_std__vectorT_std__size_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "vecSizeT_swap" "', argument " "2"" of type '" "std::vector< std::size_t > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vecSizeT_swap" "', argument " "2"" of type '" "std::vector< std::size_t > &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< std::size_t > * >(argp2);
  (arg1)->swap(*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vecSizeT_begin(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::size_t > *arg1 = (std::vector< std::size_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  SwigValueWrapper< std::vector< ::size_t >::iterator > result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__size_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vecSizeT_begin" "', argument " "1"" of type '" "std::vector< std::size_t > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::size_t > * >(argp1);
  result = (arg1)->begin();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< ::size_t >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vecSizeT_end(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::size_t > *arg1 = (std::vector< std::size_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  SwigValueWrapper< std::vector< ::size_t >::iterator > result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__size_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vecSizeT_end" "', argument " "1"" of type '" "std::vector< std::size_t > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::size_t > * >(argp1);
  result = (arg1)->end();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< ::size_t >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vecSizeT_rbegin(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::size_t > *arg1 = (std::vector< std::size_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  SwigValueWrapper< std::vector< ::size_t >::reverse_iterator > result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__size_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vecSizeT_rbegin" "', argument " "1"" of type '" "std::vector< std::size_t > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::size_t > * >(argp1);
  result = (arg1)->rbegin();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< ::size_t >::reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vecSizeT_rend(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::size_t > *arg1 = (std::vector< std::size_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  SwigValueWrapper< std::vector< ::size_t >::reverse_iterator > result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__size_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vecSizeT_rend" "', argument " "1"" of type '" "std::vector< std::size_t > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::size_t > * >(argp1);
  result = (arg1)->rend();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< ::size_t >::reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vecSizeT_clear(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::size_t > *arg1 = (std::vector< std::size_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__size_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vecSizeT_clear" "', argument " "1"" of type '" "std::vector< std::size_t > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::size_t > * >(argp1);
  (arg1)->clear();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vecSizeT_get_allocator(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::size_t > *arg1 = (std::vector< std::size_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  SwigValueWrapper< std::allocator< ::size_t > > result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__size_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vecSizeT_get_allocator" "', argument " "1"" of type '" "std::vector< std::size_t > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::size_t > * >(argp1);
  result = ((std::vector< std::size_t > const *)arg1)->get_allocator();
  resultobj = SWIG_NewPointerObj((new std::vector< ::size_t >::allocator_type(result)), SWIGTYPE_p_std__allocatorT_std__size_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_vecSizeT__SWIG_2(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< ::size_t >::size_type arg1 ;
  size_t val1 ;
  int ecode1 = 0 ;
  std::vector< std::size_t > *result = 0 ;
  
  (void)self;
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_vecSizeT" "', argument " "1"" of type '" "std::vector< ::size_t >::size_type""'");
  } 
  arg1 = static_cast< std::vector< ::size_t >::size_type >(val1);
  result = (std::vector< std::size_t > *)new std::vector< std::size_t >(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__size_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vecSizeT_pop_back(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::size_t > *arg1 = (std::vector< std::size_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__size_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vecSizeT_pop_back" "', argument " "1"" of type '" "std::vector< std::size_t > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::size_t > * >(argp1);
  (arg1)->pop_back();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vecSizeT_resize__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< std::size_t > *arg1 = (std::vector< std::size_t > *) 0 ;
  std::vector< ::size_t >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__size_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vecSizeT_resize" "', argument " "1"" of type '" "std::vector< std::size_t > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::size_t > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vecSizeT_resize" "', argument " "2"" of type '" "std::vector< ::size_t >::size_type""'");
  } 
  arg2 = static_cast< std::vector< ::size_t >::size_type >(val2);
  (arg1)->resize(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vecSizeT_erase__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< std::size_t > *arg1 = (std::vector< std::size_t > *) 0 ;
  SwigValueWrapper< std::vector< ::size_t >::iterator > arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  SwigValueWrapper< std::vector< ::size_t >::iterator > result;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__size_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vecSizeT_erase" "', argument " "1"" of type '" "std::vector< std::size_t > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::size_t > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vecSizeT_erase" "', argument " "2"" of type '" "std::vector< ::size_t >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< ::size_t >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< ::size_t >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vecSizeT_erase" "', argument " "2"" of type '" "std::vector< ::size_t >::iterator""'");
    }
  }
  result = std_vector_Sl_std_size_t_Sg__erase__SWIG_0(arg1,SWIG_STD_MOVE(arg2));
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< ::size_t >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vecSizeT_erase__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< std::size_t > *arg1 = (std::vector< std::size_t > *) 0 ;
  SwigValueWrapper< std::vector< ::size_t >::iterator > arg2 ;
  SwigValueWrapper< std::vector< ::size_t >::iterator > arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  swig::SwigPyIterator *iter3 = 0 ;
  int res3 ;
  SwigValueWrapper< std::vector< ::size_t >::iterator > result;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__size_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vecSizeT_erase" "', argument " "1"" of type '" "std::vector< std::size_t > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::size_t > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vecSizeT_erase" "', argument " "2"" of type '" "std::vector< ::size_t >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< ::size_t >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< ::size_t >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vecSizeT_erase" "', argument " "2"" of type '" "std::vector< ::size_t >::iterator""'");
    }
  }
  res3 = SWIG_ConvertPtr(swig_obj[2], SWIG_as_voidptrptr(&iter3), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res3) || !iter3) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vecSizeT_erase" "', argument " "3"" of type '" "std::vector< ::size_t >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< ::size_t >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< ::size_t >::iterator > *>(iter3);
    if (iter_t) {
      arg3 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vecSizeT_erase" "', argument " "3"" of type '" "std::vector< ::size_t >::iterator""'");
    }
  }
  result = std_vector_Sl_std_size_t_Sg__erase__SWIG_1(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3));
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< ::size_t >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vecSizeT_erase(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "vecSizeT_erase", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< ::size_t,std::allocator< ::size_t > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< ::size_t >::iterator > *>(iter) != 0));
      if (_v) {
        return _wrap_vecSizeT_erase__SWIG_0(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< ::size_t,std::allocator< ::size_t > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< ::size_t >::iterator > *>(iter) != 0));
      if (_v) {
        swig::SwigPyIterator *iter = 0;
        int res = SWIG_ConvertPtr(argv[2], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
        _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< ::size_t >::iterator > *>(iter) != 0));
        if (_v) {
          return _wrap_vecSizeT_erase__SWIG_1(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'vecSizeT_erase'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< std::size_t >::erase(std::vector< ::size_t >::iterator)\n"
    "    std::vector< std::size_t >::erase(std::vector< ::size_t >::iterator,std::vector< ::size_t >::iterator)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_new_vecSizeT__SWIG_3(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< ::size_t >::size_type arg1 ;
  std::vector< ::size_t >::value_type *arg2 = 0 ;
  size_t val1 ;
  int ecode1 = 0 ;
  std::vector< ::size_t >::value_type temp2 ;
  size_t val2 ;
  int ecode2 = 0 ;
  std::vector< std::size_t > *result = 0 ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_vecSizeT" "', argument " "1"" of type '" "std::vector< ::size_t >::size_type""'");
  } 
  arg1 = static_cast< std::vector< ::size_t >::size_type >(val1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_vecSizeT" "', argument " "2"" of type '" "std::vector< ::size_t >::value_type""'");
  } 
  temp2 = static_cast< std::vector< ::size_t >::value_type >(val2);
  arg2 = &temp2;
  result = (std::vector< std::size_t > *)new std::vector< std::size_t >(arg1,(std::vector< ::size_t >::value_type const &)*arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__size_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_vecSizeT(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "new_vecSizeT", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 0) {
    return _wrap_new_vecSizeT__SWIG_0(self, argc, argv);
  }
  if (argc == 1) {
    int _v = 0;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_vecSizeT__SWIG_2(self, argc, argv);
    }
  }
  if (argc == 1) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< ::size_t,std::allocator< ::size_t > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_vecSizeT__SWIG_1(self, argc, argv);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_vecSizeT__SWIG_3(self, argc, argv);
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'new_vecSizeT'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< std::size_t >::vector()\n"
    "    std::vector< std::size_t >::vector(std::vector< std::size_t > const &)\n"
    "    std::vector< std::size_t >::vector(std::vector< ::size_t >::size_type)\n"
    "    std::vector< std::size_t >::vector(std::vector< ::size_t >::size_type,std::vector< ::size_t >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_vecSizeT_push_back(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::size_t > *arg1 = (std::vector< std::size_t > *) 0 ;
  std::vector< ::size_t >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< ::size_t >::value_type temp2 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "vecSizeT_push_back", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__size_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vecSizeT_push_back" "', argument " "1"" of type '" "std::vector< std::size_t > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::size_t > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vecSizeT_push_back" "', argument " "2"" of type '" "std::vector< ::size_t >::value_type""'");
  } 
  temp2 = static_cast< std::vector< ::size_t >::value_type >(val2);
  arg2 = &temp2;
  (arg1)->push_back((std::vector< ::size_t >::value_type const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vecSizeT_front(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::size_t > *arg1 = (std::vector< std::size_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< ::size_t >::value_type *result = 0 ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__size_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vecSizeT_front" "', argument " "1"" of type '" "std::vector< std::size_t > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::size_t > * >(argp1);
  result = (std::vector< ::size_t >::value_type *) &((std::vector< std::size_t > const *)arg1)->front();
  resultobj = SWIG_From_size_t(static_cast< size_t >(*result));
  (void)swig::container_owner<swig::traits<std::vector< ::size_t >::value_type>::category>::back_reference(resultobj, swig_obj[0]);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vecSizeT_back(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::size_t > *arg1 = (std::vector< std::size_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< ::size_t >::value_type *result = 0 ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__size_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vecSizeT_back" "', argument " "1"" of type '" "std::vector< std::size_t > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::size_t > * >(argp1);
  result = (std::vector< ::size_t >::value_type *) &((std::vector< std::size_t > const *)arg1)->back();
  resultobj = SWIG_From_size_t(static_cast< size_t >(*result));
  (void)swig::container_owner<swig::traits<std::vector< ::size_t >::value_type>::category>::back_reference(resultobj, swig_obj[0]);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vecSizeT_assign(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::size_t > *arg1 = (std::vector< std::size_t > *) 0 ;
  std::vector< ::size_t >::size_type arg2 ;
  std::vector< ::size_t >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  std::vector< ::size_t >::value_type temp3 ;
  size_t val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "vecSizeT_assign", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__size_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vecSizeT_assign" "', argument " "1"" of type '" "std::vector< std::size_t > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::size_t > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vecSizeT_assign" "', argument " "2"" of type '" "std::vector< ::size_t >::size_type""'");
  } 
  arg2 = static_cast< std::vector< ::size_t >::size_type >(val2);
  ecode3 = SWIG_AsVal_size_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "vecSizeT_assign" "', argument " "3"" of type '" "std::vector< ::size_t >::value_type""'");
  } 
  temp3 = static_cast< std::vector< ::size_t >::value_type >(val3);
  arg3 = &temp3;
  (arg1)->assign(arg2,(std::vector< ::size_t >::value_type const &)*arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vecSizeT_resize__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< std::size_t > *arg1 = (std::vector< std::size_t > *) 0 ;
  std::vector< ::size_t >::size_type arg2 ;
  std::vector< ::size_t >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  std::vector< ::size_t >::value_type temp3 ;
  size_t val3 ;
  int ecode3 = 0 ;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__size_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vecSizeT_resize" "', argument " "1"" of type '" "std::vector< std::size_t > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::size_t > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vecSizeT_resize" "', argument " "2"" of type '" "std::vector< ::size_t >::size_type""'");
  } 
  arg2 = static_cast< std::vector< ::size_t >::size_type >(val2);
  ecode3 = SWIG_AsVal_size_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "vecSizeT_resize" "', argument " "3"" of type '" "std::vector< ::size_t >::value_type""'");
  } 
  temp3 = static_cast< std::vector< ::size_t >::value_type >(val3);
  arg3 = &temp3;
  (arg1)->resize(arg2,(std::vector< ::size_t >::value_type const &)*arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vecSizeT_resize(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "vecSizeT_resize", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< ::size_t,std::allocator< ::size_t > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_vecSizeT_resize__SWIG_0(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< ::size_t,std::allocator< ::size_t > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_vecSizeT_resize__SWIG_1(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'vecSizeT_resize'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< std::size_t >::resize(std::vector< ::size_t >::size_type)\n"
    "    std::vector< std::size_t >::resize(std::vector< ::size_t >::size_type,std::vector< ::size_t >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_vecSizeT_insert__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< std::size_t > *arg1 = (std::vector< std::size_t > *) 0 ;
  SwigValueWrapper< std::vector< ::size_t >::iterator > arg2 ;
  std::vector< ::size_t >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  std::vector< ::size_t >::value_type temp3 ;
  size_t val3 ;
  int ecode3 = 0 ;
  SwigValueWrapper< std::vector< ::size_t >::iterator > result;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__size_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vecSizeT_insert" "', argument " "1"" of type '" "std::vector< std::size_t > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::size_t > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vecSizeT_insert" "', argument " "2"" of type '" "std::vector< ::size_t >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< ::size_t >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< ::size_t >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vecSizeT_insert" "', argument " "2"" of type '" "std::vector< ::size_t >::iterator""'");
    }
  }
  ecode3 = SWIG_AsVal_size_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "vecSizeT_insert" "', argument " "3"" of type '" "std::vector< ::size_t >::value_type""'");
  } 
  temp3 = static_cast< std::vector< ::size_t >::value_type >(val3);
  arg3 = &temp3;
  result = std_vector_Sl_std_size_t_Sg__insert__SWIG_0(arg1,SWIG_STD_MOVE(arg2),(::size_t const &)*arg3);
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< ::size_t >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vecSizeT_insert__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< std::size_t > *arg1 = (std::vector< std::size_t > *) 0 ;
  SwigValueWrapper< std::vector< ::size_t >::iterator > arg2 ;
  std::vector< ::size_t >::size_type arg3 ;
  std::vector< ::size_t >::value_type *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  size_t val3 ;
  int ecode3 = 0 ;
  std::vector< ::size_t >::value_type temp4 ;
  size_t val4 ;
  int ecode4 = 0 ;
  
  (void)self;
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__size_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vecSizeT_insert" "', argument " "1"" of type '" "std::vector< std::size_t > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::size_t > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vecSizeT_insert" "', argument " "2"" of type '" "std::vector< ::size_t >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< ::size_t >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< ::size_t >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vecSizeT_insert" "', argument " "2"" of type '" "std::vector< ::size_t >::iterator""'");
    }
  }
  ecode3 = SWIG_AsVal_size_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "vecSizeT_insert" "', argument " "3"" of type '" "std::vector< ::size_t >::size_type""'");
  } 
  arg3 = static_cast< std::vector< ::size_t >::size_type >(val3);
  ecode4 = SWIG_AsVal_size_t(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "vecSizeT_insert" "', argument " "4"" of type '" "std::vector< ::size_t >::value_type""'");
  } 
  temp4 = static_cast< std::vector< ::size_t >::value_type >(val4);
  arg4 = &temp4;
  std_vector_Sl_std_size_t_Sg__insert__SWIG_1(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3),(::size_t const &)*arg4);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vecSizeT_insert(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "vecSizeT_insert", 0, 4, argv))) SWIG_fail;
  --argc;
  if (argc == 3) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< ::size_t,std::allocator< ::size_t > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< ::size_t >::iterator > *>(iter) != 0));
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_vecSizeT_insert__SWIG_0(self, argc, argv);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< ::size_t,std::allocator< ::size_t > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< ::size_t >::iterator > *>(iter) != 0));
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_size_t(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_vecSizeT_insert__SWIG_1(self, argc, argv);
          }
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'vecSizeT_insert'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< std::size_t >::insert(std::vector< ::size_t >::iterator,std::vector< ::size_t >::value_type const &)\n"
    "    std::vector< std::size_t >::insert(std::vector< ::size_t >::iterator,std::vector< ::size_t >::size_type,std::vector< ::size_t >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_vecSizeT_reserve(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::size_t > *arg1 = (std::vector< std::size_t > *) 0 ;
  std::vector< ::size_t >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "vecSizeT_reserve", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__size_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vecSizeT_reserve" "', argument " "1"" of type '" "std::vector< std::size_t > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::size_t > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vecSizeT_reserve" "', argument " "2"" of type '" "std::vector< ::size_t >::size_type""'");
  } 
  arg2 = static_cast< std::vector< ::size_t >::size_type >(val2);
  (arg1)->reserve(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vecSizeT_capacity(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::size_t > *arg1 = (std::vector< std::size_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< ::size_t >::size_type result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__size_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vecSizeT_capacity" "', argument " "1"" of type '" "std::vector< std::size_t > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::size_t > * >(argp1);
  result = ((std::vector< std::size_t > const *)arg1)->capacity();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_vecSizeT(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::size_t > *arg1 = (std::vector< std::size_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__size_t_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_vecSizeT" "', argument " "1"" of type '" "std::vector< std::size_t > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::size_t > * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *vecSizeT_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_std__vectorT_std__size_t_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *vecSizeT_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_vecDouble_iterator(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  PyObject **arg2 = (PyObject **) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  swig::SwigPyIterator *result = 0 ;
  
  arg2 = &swig_obj[0];
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vecDouble_iterator" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  result = (swig::SwigPyIterator *)std_vector_Sl_double_Sg__iterator(arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vecDouble___nonzero__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vecDouble___nonzero__" "', argument " "1"" of type '" "std::vector< double > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  result = (bool)std_vector_Sl_double_Sg____nonzero__((std::vector< double > const *)arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vecDouble___bool__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vecDouble___bool__" "', argument " "1"" of type '" "std::vector< double > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  result = (bool)std_vector_Sl_double_Sg____bool__((std::vector< double > const *)arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vecDouble___len__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< double >::size_type result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vecDouble___len__" "', argument " "1"" of type '" "std::vector< double > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  result = std_vector_Sl_double_Sg____len__((std::vector< double > const *)arg1);
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vecDouble___getslice__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double >::difference_type arg2 ;
  std::vector< double >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  std::vector< double,std::allocator< double > > *result = 0 ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "vecDouble___getslice__", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vecDouble___getslice__" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vecDouble___getslice__" "', argument " "2"" of type '" "std::vector< double >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< double >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "vecDouble___getslice__" "', argument " "3"" of type '" "std::vector< double >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< double >::difference_type >(val3);
  try {
    result = (std::vector< double,std::allocator< double > > *)std_vector_Sl_double_Sg____getslice__(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3));
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_double_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vecDouble___setslice____SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double >::difference_type arg2 ;
  std::vector< double >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vecDouble___setslice__" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vecDouble___setslice__" "', argument " "2"" of type '" "std::vector< double >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< double >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "vecDouble___setslice__" "', argument " "3"" of type '" "std::vector< double >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< double >::difference_type >(val3);
  try {
    std_vector_Sl_double_Sg____setslice____SWIG_0(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3));
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vecDouble___setslice____SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double >::difference_type arg2 ;
  std::vector< double >::difference_type arg3 ;
  std::vector< double,std::allocator< double > > *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  
  (void)self;
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vecDouble___setslice__" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vecDouble___setslice__" "', argument " "2"" of type '" "std::vector< double >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< double >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "vecDouble___setslice__" "', argument " "3"" of type '" "std::vector< double >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< double >::difference_type >(val3);
  {
    std::vector< double,std::allocator< double > > *ptr = (std::vector< double,std::allocator< double > > *)0;
    res4 = swig::asptr(swig_obj[3], &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "vecDouble___setslice__" "', argument " "4"" of type '" "std::vector< double,std::allocator< double > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vecDouble___setslice__" "', argument " "4"" of type '" "std::vector< double,std::allocator< double > > const &""'"); 
    }
    arg4 = ptr;
  }
  try {
    std_vector_Sl_double_Sg____setslice____SWIG_1(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3),(std::vector< double,std::allocator< double > > const &)*arg4);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_vecDouble___setslice__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "vecDouble___setslice__", 0, 4, argv))) SWIG_fail;
  --argc;
  if (argc == 3) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< double,std::allocator< double > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_ptrdiff_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_vecDouble___setslice____SWIG_0(self, argc, argv);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< double,std::allocator< double > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_ptrdiff_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = swig::asptr(argv[3], (std::vector< double,std::allocator< double > >**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_vecDouble___setslice____SWIG_1(self, argc, argv);
          }
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'vecDouble___setslice__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< double >::__setslice__(std::vector< double >::difference_type,std::vector< double >::difference_type)\n"
    "    std::vector< double >::__setslice__(std::vector< double >::difference_type,std::vector< double >::difference_type,std::vector< double,std::allocator< double > > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_vecDouble___delslice__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double >::difference_type arg2 ;
  std::vector< double >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "vecDouble___delslice__", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vecDouble___delslice__" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vecDouble___delslice__" "', argument " "2"" of type '" "std::vector< double >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< double >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "vecDouble___delslice__" "', argument " "3"" of type '" "std::vector< double >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< double >::difference_type >(val3);
  try {
    std_vector_Sl_double_Sg____delslice__(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3));
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vecDouble___delitem____SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vecDouble___delitem__" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vecDouble___delitem__" "', argument " "2"" of type '" "std::vector< double >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< double >::difference_type >(val2);
  try {
    std_vector_Sl_double_Sg____delitem____SWIG_0(arg1,SWIG_STD_MOVE(arg2));
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vecDouble___getitem____SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  SWIGPY_SLICEOBJECT *arg2 = (SWIGPY_SLICEOBJECT *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< double,std::allocator< double > > *result = 0 ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vecDouble___getitem__" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  {
    if (!PySlice_Check(swig_obj[1])) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vecDouble___getitem__" "', argument " "2"" of type '" "SWIGPY_SLICEOBJECT *""'");
    }
    arg2 = (SWIGPY_SLICEOBJECT *) swig_obj[1];
  }
  try {
    result = (std::vector< double,std::allocator< double > > *)std_vector_Sl_double_Sg____getitem____SWIG_0(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_double_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vecDouble___setitem____SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  SWIGPY_SLICEOBJECT *arg2 = (SWIGPY_SLICEOBJECT *) 0 ;
  std::vector< double,std::allocator< double > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vecDouble___setitem__" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  {
    if (!PySlice_Check(swig_obj[1])) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vecDouble___setitem__" "', argument " "2"" of type '" "SWIGPY_SLICEOBJECT *""'");
    }
    arg2 = (SWIGPY_SLICEOBJECT *) swig_obj[1];
  }
  {
    std::vector< double,std::allocator< double > > *ptr = (std::vector< double,std::allocator< double > > *)0;
    res3 = swig::asptr(swig_obj[2], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "vecDouble___setitem__" "', argument " "3"" of type '" "std::vector< double,std::allocator< double > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vecDouble___setitem__" "', argument " "3"" of type '" "std::vector< double,std::allocator< double > > const &""'"); 
    }
    arg3 = ptr;
  }
  try {
    std_vector_Sl_double_Sg____setitem____SWIG_0(arg1,arg2,(std::vector< double,std::allocator< double > > const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_vecDouble___setitem____SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  SWIGPY_SLICEOBJECT *arg2 = (SWIGPY_SLICEOBJECT *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vecDouble___setitem__" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  {
    if (!PySlice_Check(swig_obj[1])) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vecDouble___setitem__" "', argument " "2"" of type '" "SWIGPY_SLICEOBJECT *""'");
    }
    arg2 = (SWIGPY_SLICEOBJECT *) swig_obj[1];
  }
  try {
    std_vector_Sl_double_Sg____setitem____SWIG_1(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vecDouble___delitem____SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  SWIGPY_SLICEOBJECT *arg2 = (SWIGPY_SLICEOBJECT *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vecDouble___delitem__" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  {
    if (!PySlice_Check(swig_obj[1])) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vecDouble___delitem__" "', argument " "2"" of type '" "SWIGPY_SLICEOBJECT *""'");
    }
    arg2 = (SWIGPY_SLICEOBJECT *) swig_obj[1];
  }
  try {
    std_vector_Sl_double_Sg____delitem____SWIG_1(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vecDouble___delitem__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "vecDouble___delitem__", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< double,std::allocator< double > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_vecDouble___delitem____SWIG_1(self, argc, argv);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< double,std::allocator< double > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_vecDouble___delitem____SWIG_0(self, argc, argv);
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'vecDouble___delitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< double >::__delitem__(std::vector< double >::difference_type)\n"
    "    std::vector< double >::__delitem__(SWIGPY_SLICEOBJECT *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_vecDouble___getitem____SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  std::vector< double >::value_type *result = 0 ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vecDouble___getitem__" "', argument " "1"" of type '" "std::vector< double > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vecDouble___getitem__" "', argument " "2"" of type '" "std::vector< double >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< double >::difference_type >(val2);
  try {
    result = (std::vector< double >::value_type *) &std_vector_Sl_double_Sg____getitem____SWIG_1((std::vector< double > const *)arg1,SWIG_STD_MOVE(arg2));
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  resultobj = SWIG_From_double(static_cast< double >(*result));
  (void)swig::container_owner<swig::traits<std::vector< double >::value_type>::category>::back_reference(resultobj, swig_obj[0]);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vecDouble___getitem__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "vecDouble___getitem__", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< double,std::allocator< double > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_vecDouble___getitem____SWIG_0(self, argc, argv);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< double,std::allocator< double > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_vecDouble___getitem____SWIG_1(self, argc, argv);
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'vecDouble___getitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< double >::__getitem__(SWIGPY_SLICEOBJECT *)\n"
    "    std::vector< double >::__getitem__(std::vector< double >::difference_type) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_vecDouble___setitem____SWIG_2(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double >::difference_type arg2 ;
  std::vector< double >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  std::vector< double >::value_type temp3 ;
  double val3 ;
  int ecode3 = 0 ;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vecDouble___setitem__" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vecDouble___setitem__" "', argument " "2"" of type '" "std::vector< double >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< double >::difference_type >(val2);
  ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "vecDouble___setitem__" "', argument " "3"" of type '" "std::vector< double >::value_type""'");
  } 
  temp3 = static_cast< std::vector< double >::value_type >(val3);
  arg3 = &temp3;
  try {
    std_vector_Sl_double_Sg____setitem____SWIG_2(arg1,SWIG_STD_MOVE(arg2),(double const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vecDouble___setitem__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "vecDouble___setitem__", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< double,std::allocator< double > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_vecDouble___setitem____SWIG_1(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< double,std::allocator< double > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        int res = swig::asptr(argv[2], (std::vector< double,std::allocator< double > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_vecDouble___setitem____SWIG_0(self, argc, argv);
        }
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< double,std::allocator< double > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_vecDouble___setitem____SWIG_2(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'vecDouble___setitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< double >::__setitem__(SWIGPY_SLICEOBJECT *,std::vector< double,std::allocator< double > > const &)\n"
    "    std::vector< double >::__setitem__(SWIGPY_SLICEOBJECT *)\n"
    "    std::vector< double >::__setitem__(std::vector< double >::difference_type,std::vector< double >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_vecDouble_pop(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< double >::value_type result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vecDouble_pop" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  try {
    result = (std::vector< double >::value_type)std_vector_Sl_double_Sg__pop(arg1);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vecDouble_append(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< double >::value_type temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "vecDouble_append", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vecDouble_append" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vecDouble_append" "', argument " "2"" of type '" "std::vector< double >::value_type""'");
  } 
  temp2 = static_cast< std::vector< double >::value_type >(val2);
  arg2 = &temp2;
  std_vector_Sl_double_Sg__append(arg1,(double const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_vecDouble__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **SWIGUNUSEDPARM(swig_obj)) {
  PyObject *resultobj = 0;
  std::vector< double > *result = 0 ;
  
  (void)self;
  if ((nobjs < 0) || (nobjs > 0)) SWIG_fail;
  result = (std::vector< double > *)new std::vector< double >();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_double_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_vecDouble__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  std::vector< double > *result = 0 ;
  
  (void)self;
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  {
    std::vector< double,std::allocator< double > > *ptr = (std::vector< double,std::allocator< double > > *)0;
    res1 = swig::asptr(swig_obj[0], &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_vecDouble" "', argument " "1"" of type '" "std::vector< double > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_vecDouble" "', argument " "1"" of type '" "std::vector< double > const &""'"); 
    }
    arg1 = ptr;
  }
  result = (std::vector< double > *)new std::vector< double >((std::vector< double > const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_double_t, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_vecDouble_empty(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vecDouble_empty" "', argument " "1"" of type '" "std::vector< double > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  result = (bool)((std::vector< double > const *)arg1)->empty();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vecDouble_size(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< double >::size_type result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vecDouble_size" "', argument " "1"" of type '" "std::vector< double > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  result = ((std::vector< double > const *)arg1)->size();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vecDouble_swap(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "vecDouble_swap", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vecDouble_swap" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_std__vectorT_double_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "vecDouble_swap" "', argument " "2"" of type '" "std::vector< double > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vecDouble_swap" "', argument " "2"" of type '" "std::vector< double > &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< double > * >(argp2);
  (arg1)->swap(*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vecDouble_begin(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< double >::iterator result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vecDouble_begin" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  result = (arg1)->begin();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< double >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vecDouble_end(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< double >::iterator result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vecDouble_end" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  result = (arg1)->end();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< double >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vecDouble_rbegin(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< double >::reverse_iterator result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vecDouble_rbegin" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  result = (arg1)->rbegin();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< double >::reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vecDouble_rend(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< double >::reverse_iterator result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vecDouble_rend" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  result = (arg1)->rend();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< double >::reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vecDouble_clear(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vecDouble_clear" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  (arg1)->clear();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vecDouble_get_allocator(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  SwigValueWrapper< std::allocator< double > > result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vecDouble_get_allocator" "', argument " "1"" of type '" "std::vector< double > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  result = ((std::vector< double > const *)arg1)->get_allocator();
  resultobj = SWIG_NewPointerObj((new std::vector< double >::allocator_type(result)), SWIGTYPE_p_std__allocatorT_double_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_vecDouble__SWIG_2(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< double >::size_type arg1 ;
  size_t val1 ;
  int ecode1 = 0 ;
  std::vector< double > *result = 0 ;
  
  (void)self;
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_vecDouble" "', argument " "1"" of type '" "std::vector< double >::size_type""'");
  } 
  arg1 = static_cast< std::vector< double >::size_type >(val1);
  result = (std::vector< double > *)new std::vector< double >(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_double_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vecDouble_pop_back(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vecDouble_pop_back" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  (arg1)->pop_back();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vecDouble_resize__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vecDouble_resize" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vecDouble_resize" "', argument " "2"" of type '" "std::vector< double >::size_type""'");
  } 
  arg2 = static_cast< std::vector< double >::size_type >(val2);
  (arg1)->resize(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vecDouble_erase__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double >::iterator arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  std::vector< double >::iterator result;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vecDouble_erase" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vecDouble_erase" "', argument " "2"" of type '" "std::vector< double >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< double >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< double >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vecDouble_erase" "', argument " "2"" of type '" "std::vector< double >::iterator""'");
    }
  }
  result = std_vector_Sl_double_Sg__erase__SWIG_0(arg1,SWIG_STD_MOVE(arg2));
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< double >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vecDouble_erase__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double >::iterator arg2 ;
  std::vector< double >::iterator arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  swig::SwigPyIterator *iter3 = 0 ;
  int res3 ;
  std::vector< double >::iterator result;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vecDouble_erase" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vecDouble_erase" "', argument " "2"" of type '" "std::vector< double >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< double >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< double >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vecDouble_erase" "', argument " "2"" of type '" "std::vector< double >::iterator""'");
    }
  }
  res3 = SWIG_ConvertPtr(swig_obj[2], SWIG_as_voidptrptr(&iter3), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res3) || !iter3) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vecDouble_erase" "', argument " "3"" of type '" "std::vector< double >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< double >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< double >::iterator > *>(iter3);
    if (iter_t) {
      arg3 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vecDouble_erase" "', argument " "3"" of type '" "std::vector< double >::iterator""'");
    }
  }
  result = std_vector_Sl_double_Sg__erase__SWIG_1(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3));
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< double >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vecDouble_erase(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "vecDouble_erase", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< double,std::allocator< double > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< double >::iterator > *>(iter) != 0));
      if (_v) {
        return _wrap_vecDouble_erase__SWIG_0(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< double,std::allocator< double > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< double >::iterator > *>(iter) != 0));
      if (_v) {
        swig::SwigPyIterator *iter = 0;
        int res = SWIG_ConvertPtr(argv[2], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
        _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< double >::iterator > *>(iter) != 0));
        if (_v) {
          return _wrap_vecDouble_erase__SWIG_1(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'vecDouble_erase'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< double >::erase(std::vector< double >::iterator)\n"
    "    std::vector< double >::erase(std::vector< double >::iterator,std::vector< double >::iterator)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_new_vecDouble__SWIG_3(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< double >::size_type arg1 ;
  std::vector< double >::value_type *arg2 = 0 ;
  size_t val1 ;
  int ecode1 = 0 ;
  std::vector< double >::value_type temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  std::vector< double > *result = 0 ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_vecDouble" "', argument " "1"" of type '" "std::vector< double >::size_type""'");
  } 
  arg1 = static_cast< std::vector< double >::size_type >(val1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_vecDouble" "', argument " "2"" of type '" "std::vector< double >::value_type""'");
  } 
  temp2 = static_cast< std::vector< double >::value_type >(val2);
  arg2 = &temp2;
  result = (std::vector< double > *)new std::vector< double >(arg1,(std::vector< double >::value_type const &)*arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_double_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_vecDouble(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "new_vecDouble", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 0) {
    return _wrap_new_vecDouble__SWIG_0(self, argc, argv);
  }
  if (argc == 1) {
    int _v = 0;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_vecDouble__SWIG_2(self, argc, argv);
    }
  }
  if (argc == 1) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< double,std::allocator< double > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_vecDouble__SWIG_1(self, argc, argv);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_vecDouble__SWIG_3(self, argc, argv);
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'new_vecDouble'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< double >::vector()\n"
    "    std::vector< double >::vector(std::vector< double > const &)\n"
    "    std::vector< double >::vector(std::vector< double >::size_type)\n"
    "    std::vector< double >::vector(std::vector< double >::size_type,std::vector< double >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_vecDouble_push_back(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< double >::value_type temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "vecDouble_push_back", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vecDouble_push_back" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vecDouble_push_back" "', argument " "2"" of type '" "std::vector< double >::value_type""'");
  } 
  temp2 = static_cast< std::vector< double >::value_type >(val2);
  arg2 = &temp2;
  (arg1)->push_back((std::vector< double >::value_type const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vecDouble_front(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< double >::value_type *result = 0 ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vecDouble_front" "', argument " "1"" of type '" "std::vector< double > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  result = (std::vector< double >::value_type *) &((std::vector< double > const *)arg1)->front();
  resultobj = SWIG_From_double(static_cast< double >(*result));
  (void)swig::container_owner<swig::traits<std::vector< double >::value_type>::category>::back_reference(resultobj, swig_obj[0]);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vecDouble_back(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< double >::value_type *result = 0 ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vecDouble_back" "', argument " "1"" of type '" "std::vector< double > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  result = (std::vector< double >::value_type *) &((std::vector< double > const *)arg1)->back();
  resultobj = SWIG_From_double(static_cast< double >(*result));
  (void)swig::container_owner<swig::traits<std::vector< double >::value_type>::category>::back_reference(resultobj, swig_obj[0]);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vecDouble_assign(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double >::size_type arg2 ;
  std::vector< double >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  std::vector< double >::value_type temp3 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "vecDouble_assign", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vecDouble_assign" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vecDouble_assign" "', argument " "2"" of type '" "std::vector< double >::size_type""'");
  } 
  arg2 = static_cast< std::vector< double >::size_type >(val2);
  ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "vecDouble_assign" "', argument " "3"" of type '" "std::vector< double >::value_type""'");
  } 
  temp3 = static_cast< std::vector< double >::value_type >(val3);
  arg3 = &temp3;
  (arg1)->assign(arg2,(std::vector< double >::value_type const &)*arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vecDouble_resize__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double >::size_type arg2 ;
  std::vector< double >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  std::vector< double >::value_type temp3 ;
  double val3 ;
  int ecode3 = 0 ;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vecDouble_resize" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vecDouble_resize" "', argument " "2"" of type '" "std::vector< double >::size_type""'");
  } 
  arg2 = static_cast< std::vector< double >::size_type >(val2);
  ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "vecDouble_resize" "', argument " "3"" of type '" "std::vector< double >::value_type""'");
  } 
  temp3 = static_cast< std::vector< double >::value_type >(val3);
  arg3 = &temp3;
  (arg1)->resize(arg2,(std::vector< double >::value_type const &)*arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vecDouble_resize(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "vecDouble_resize", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< double,std::allocator< double > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_vecDouble_resize__SWIG_0(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< double,std::allocator< double > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_vecDouble_resize__SWIG_1(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'vecDouble_resize'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< double >::resize(std::vector< double >::size_type)\n"
    "    std::vector< double >::resize(std::vector< double >::size_type,std::vector< double >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_vecDouble_insert__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double >::iterator arg2 ;
  std::vector< double >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  std::vector< double >::value_type temp3 ;
  double val3 ;
  int ecode3 = 0 ;
  std::vector< double >::iterator result;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vecDouble_insert" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vecDouble_insert" "', argument " "2"" of type '" "std::vector< double >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< double >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< double >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vecDouble_insert" "', argument " "2"" of type '" "std::vector< double >::iterator""'");
    }
  }
  ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "vecDouble_insert" "', argument " "3"" of type '" "std::vector< double >::value_type""'");
  } 
  temp3 = static_cast< std::vector< double >::value_type >(val3);
  arg3 = &temp3;
  result = std_vector_Sl_double_Sg__insert__SWIG_0(arg1,SWIG_STD_MOVE(arg2),(double const &)*arg3);
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< double >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vecDouble_insert__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double >::iterator arg2 ;
  std::vector< double >::size_type arg3 ;
  std::vector< double >::value_type *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  size_t val3 ;
  int ecode3 = 0 ;
  std::vector< double >::value_type temp4 ;
  double val4 ;
  int ecode4 = 0 ;
  
  (void)self;
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vecDouble_insert" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vecDouble_insert" "', argument " "2"" of type '" "std::vector< double >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< double >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< double >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vecDouble_insert" "', argument " "2"" of type '" "std::vector< double >::iterator""'");
    }
  }
  ecode3 = SWIG_AsVal_size_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "vecDouble_insert" "', argument " "3"" of type '" "std::vector< double >::size_type""'");
  } 
  arg3 = static_cast< std::vector< double >::size_type >(val3);
  ecode4 = SWIG_AsVal_double(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "vecDouble_insert" "', argument " "4"" of type '" "std::vector< double >::value_type""'");
  } 
  temp4 = static_cast< std::vector< double >::value_type >(val4);
  arg4 = &temp4;
  std_vector_Sl_double_Sg__insert__SWIG_1(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3),(double const &)*arg4);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vecDouble_insert(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "vecDouble_insert", 0, 4, argv))) SWIG_fail;
  --argc;
  if (argc == 3) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< double,std::allocator< double > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< double >::iterator > *>(iter) != 0));
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_vecDouble_insert__SWIG_0(self, argc, argv);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< double,std::allocator< double > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< double >::iterator > *>(iter) != 0));
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_vecDouble_insert__SWIG_1(self, argc, argv);
          }
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'vecDouble_insert'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< double >::insert(std::vector< double >::iterator,std::vector< double >::value_type const &)\n"
    "    std::vector< double >::insert(std::vector< double >::iterator,std::vector< double >::size_type,std::vector< double >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_vecDouble_reserve(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "vecDouble_reserve", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vecDouble_reserve" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vecDouble_reserve" "', argument " "2"" of type '" "std::vector< double >::size_type""'");
  } 
  arg2 = static_cast< std::vector< double >::size_type >(val2);
  (arg1)->reserve(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vecDouble_capacity(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< double >::size_type result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vecDouble_capacity" "', argument " "1"" of type '" "std::vector< double > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  result = ((std::vector< double > const *)arg1)->capacity();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_vecDouble(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_double_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_vecDouble" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *vecDouble_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_std__vectorT_double_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *vecDouble_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_arrDouble_iterator(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< double > > *arg1 = (std::vector< std::vector< double > > *) 0 ;
  PyObject **arg2 = (PyObject **) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  swig::SwigPyIterator *result = 0 ;
  
  arg2 = &swig_obj[0];
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "arrDouble_iterator" "', argument " "1"" of type '" "std::vector< std::vector< double > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< double > > * >(argp1);
  result = (swig::SwigPyIterator *)std_vector_Sl_std_vector_Sl_double_Sg__Sg__iterator(arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_arrDouble___nonzero__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< double > > *arg1 = (std::vector< std::vector< double > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "arrDouble___nonzero__" "', argument " "1"" of type '" "std::vector< std::vector< double > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< double > > * >(argp1);
  result = (bool)std_vector_Sl_std_vector_Sl_double_Sg__Sg____nonzero__((std::vector< std::vector< double > > const *)arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_arrDouble___bool__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< double > > *arg1 = (std::vector< std::vector< double > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "arrDouble___bool__" "', argument " "1"" of type '" "std::vector< std::vector< double > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< double > > * >(argp1);
  result = (bool)std_vector_Sl_std_vector_Sl_double_Sg__Sg____bool__((std::vector< std::vector< double > > const *)arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_arrDouble___len__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< double > > *arg1 = (std::vector< std::vector< double > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< std::vector< double > >::size_type result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "arrDouble___len__" "', argument " "1"" of type '" "std::vector< std::vector< double > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< double > > * >(argp1);
  result = std_vector_Sl_std_vector_Sl_double_Sg__Sg____len__((std::vector< std::vector< double > > const *)arg1);
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_arrDouble___getslice__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< double > > *arg1 = (std::vector< std::vector< double > > *) 0 ;
  std::vector< std::vector< double > >::difference_type arg2 ;
  std::vector< std::vector< double > >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > > *result = 0 ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "arrDouble___getslice__", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "arrDouble___getslice__" "', argument " "1"" of type '" "std::vector< std::vector< double > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< double > > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "arrDouble___getslice__" "', argument " "2"" of type '" "std::vector< std::vector< double > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< std::vector< double > >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "arrDouble___getslice__" "', argument " "3"" of type '" "std::vector< std::vector< double > >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< std::vector< double > >::difference_type >(val3);
  try {
    result = (std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > > *)std_vector_Sl_std_vector_Sl_double_Sg__Sg____getslice__(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3));
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__vectorT_double_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_arrDouble___setslice____SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< std::vector< double > > *arg1 = (std::vector< std::vector< double > > *) 0 ;
  std::vector< std::vector< double > >::difference_type arg2 ;
  std::vector< std::vector< double > >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "arrDouble___setslice__" "', argument " "1"" of type '" "std::vector< std::vector< double > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< double > > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "arrDouble___setslice__" "', argument " "2"" of type '" "std::vector< std::vector< double > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< std::vector< double > >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "arrDouble___setslice__" "', argument " "3"" of type '" "std::vector< std::vector< double > >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< std::vector< double > >::difference_type >(val3);
  try {
    std_vector_Sl_std_vector_Sl_double_Sg__Sg____setslice____SWIG_0(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3));
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_arrDouble___setslice____SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< std::vector< double > > *arg1 = (std::vector< std::vector< double > > *) 0 ;
  std::vector< std::vector< double > >::difference_type arg2 ;
  std::vector< std::vector< double > >::difference_type arg3 ;
  std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > > *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  
  (void)self;
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "arrDouble___setslice__" "', argument " "1"" of type '" "std::vector< std::vector< double > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< double > > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "arrDouble___setslice__" "', argument " "2"" of type '" "std::vector< std::vector< double > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< std::vector< double > >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "arrDouble___setslice__" "', argument " "3"" of type '" "std::vector< std::vector< double > >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< std::vector< double > >::difference_type >(val3);
  {
    std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > > *ptr = (std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > > *)0;
    res4 = swig::asptr(swig_obj[3], &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "arrDouble___setslice__" "', argument " "4"" of type '" "std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "arrDouble___setslice__" "', argument " "4"" of type '" "std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > > const &""'"); 
    }
    arg4 = ptr;
  }
  try {
    std_vector_Sl_std_vector_Sl_double_Sg__Sg____setslice____SWIG_1(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3),(std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > > const &)*arg4);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_arrDouble___setslice__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "arrDouble___setslice__", 0, 4, argv))) SWIG_fail;
  --argc;
  if (argc == 3) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_ptrdiff_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_arrDouble___setslice____SWIG_0(self, argc, argv);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_ptrdiff_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = swig::asptr(argv[3], (std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > >**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_arrDouble___setslice____SWIG_1(self, argc, argv);
          }
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'arrDouble___setslice__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< std::vector< double > >::__setslice__(std::vector< std::vector< double > >::difference_type,std::vector< std::vector< double > >::difference_type)\n"
    "    std::vector< std::vector< double > >::__setslice__(std::vector< std::vector< double > >::difference_type,std::vector< std::vector< double > >::difference_type,std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_arrDouble___delslice__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< double > > *arg1 = (std::vector< std::vector< double > > *) 0 ;
  std::vector< std::vector< double > >::difference_type arg2 ;
  std::vector< std::vector< double > >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "arrDouble___delslice__", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "arrDouble___delslice__" "', argument " "1"" of type '" "std::vector< std::vector< double > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< double > > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "arrDouble___delslice__" "', argument " "2"" of type '" "std::vector< std::vector< double > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< std::vector< double > >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "arrDouble___delslice__" "', argument " "3"" of type '" "std::vector< std::vector< double > >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< std::vector< double > >::difference_type >(val3);
  try {
    std_vector_Sl_std_vector_Sl_double_Sg__Sg____delslice__(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3));
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_arrDouble___delitem____SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< std::vector< double > > *arg1 = (std::vector< std::vector< double > > *) 0 ;
  std::vector< std::vector< double > >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "arrDouble___delitem__" "', argument " "1"" of type '" "std::vector< std::vector< double > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< double > > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "arrDouble___delitem__" "', argument " "2"" of type '" "std::vector< std::vector< double > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< std::vector< double > >::difference_type >(val2);
  try {
    std_vector_Sl_std_vector_Sl_double_Sg__Sg____delitem____SWIG_0(arg1,SWIG_STD_MOVE(arg2));
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_arrDouble___getitem____SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< std::vector< double > > *arg1 = (std::vector< std::vector< double > > *) 0 ;
  SWIGPY_SLICEOBJECT *arg2 = (SWIGPY_SLICEOBJECT *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > > *result = 0 ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "arrDouble___getitem__" "', argument " "1"" of type '" "std::vector< std::vector< double > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< double > > * >(argp1);
  {
    if (!PySlice_Check(swig_obj[1])) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "arrDouble___getitem__" "', argument " "2"" of type '" "SWIGPY_SLICEOBJECT *""'");
    }
    arg2 = (SWIGPY_SLICEOBJECT *) swig_obj[1];
  }
  try {
    result = (std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > > *)std_vector_Sl_std_vector_Sl_double_Sg__Sg____getitem____SWIG_0(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__vectorT_double_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_arrDouble___setitem____SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< std::vector< double > > *arg1 = (std::vector< std::vector< double > > *) 0 ;
  SWIGPY_SLICEOBJECT *arg2 = (SWIGPY_SLICEOBJECT *) 0 ;
  std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "arrDouble___setitem__" "', argument " "1"" of type '" "std::vector< std::vector< double > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< double > > * >(argp1);
  {
    if (!PySlice_Check(swig_obj[1])) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "arrDouble___setitem__" "', argument " "2"" of type '" "SWIGPY_SLICEOBJECT *""'");
    }
    arg2 = (SWIGPY_SLICEOBJECT *) swig_obj[1];
  }
  {
    std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > > *ptr = (std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > > *)0;
    res3 = swig::asptr(swig_obj[2], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "arrDouble___setitem__" "', argument " "3"" of type '" "std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "arrDouble___setitem__" "', argument " "3"" of type '" "std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > > const &""'"); 
    }
    arg3 = ptr;
  }
  try {
    std_vector_Sl_std_vector_Sl_double_Sg__Sg____setitem____SWIG_0(arg1,arg2,(std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > > const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_arrDouble___setitem____SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< std::vector< double > > *arg1 = (std::vector< std::vector< double > > *) 0 ;
  SWIGPY_SLICEOBJECT *arg2 = (SWIGPY_SLICEOBJECT *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "arrDouble___setitem__" "', argument " "1"" of type '" "std::vector< std::vector< double > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< double > > * >(argp1);
  {
    if (!PySlice_Check(swig_obj[1])) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "arrDouble___setitem__" "', argument " "2"" of type '" "SWIGPY_SLICEOBJECT *""'");
    }
    arg2 = (SWIGPY_SLICEOBJECT *) swig_obj[1];
  }
  try {
    std_vector_Sl_std_vector_Sl_double_Sg__Sg____setitem____SWIG_1(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_arrDouble___delitem____SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< std::vector< double > > *arg1 = (std::vector< std::vector< double > > *) 0 ;
  SWIGPY_SLICEOBJECT *arg2 = (SWIGPY_SLICEOBJECT *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "arrDouble___delitem__" "', argument " "1"" of type '" "std::vector< std::vector< double > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< double > > * >(argp1);
  {
    if (!PySlice_Check(swig_obj[1])) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "arrDouble___delitem__" "', argument " "2"" of type '" "SWIGPY_SLICEOBJECT *""'");
    }
    arg2 = (SWIGPY_SLICEOBJECT *) swig_obj[1];
  }
  try {
    std_vector_Sl_std_vector_Sl_double_Sg__Sg____delitem____SWIG_1(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_arrDouble___delitem__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "arrDouble___delitem__", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_arrDouble___delitem____SWIG_1(self, argc, argv);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_arrDouble___delitem____SWIG_0(self, argc, argv);
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'arrDouble___delitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< std::vector< double > >::__delitem__(std::vector< std::vector< double > >::difference_type)\n"
    "    std::vector< std::vector< double > >::__delitem__(SWIGPY_SLICEOBJECT *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_arrDouble___getitem____SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< std::vector< double > > *arg1 = (std::vector< std::vector< double > > *) 0 ;
  std::vector< std::vector< double > >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  std::vector< std::vector< double > >::value_type *result = 0 ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "arrDouble___getitem__" "', argument " "1"" of type '" "std::vector< std::vector< double > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< double > > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "arrDouble___getitem__" "', argument " "2"" of type '" "std::vector< std::vector< double > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< std::vector< double > >::difference_type >(val2);
  try {
    result = (std::vector< std::vector< double > >::value_type *) &std_vector_Sl_std_vector_Sl_double_Sg__Sg____getitem____SWIG_1((std::vector< std::vector< double > > const *)arg1,SWIG_STD_MOVE(arg2));
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  resultobj = swig::from(static_cast< std::vector< double,std::allocator< double > > >(*result));
  (void)swig::container_owner<swig::traits<std::vector< std::vector< double > >::value_type>::category>::back_reference(resultobj, swig_obj[0]);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_arrDouble___getitem__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "arrDouble___getitem__", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_arrDouble___getitem____SWIG_0(self, argc, argv);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_arrDouble___getitem____SWIG_1(self, argc, argv);
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'arrDouble___getitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< std::vector< double > >::__getitem__(SWIGPY_SLICEOBJECT *)\n"
    "    std::vector< std::vector< double > >::__getitem__(std::vector< std::vector< double > >::difference_type) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_arrDouble___setitem____SWIG_2(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< std::vector< double > > *arg1 = (std::vector< std::vector< double > > *) 0 ;
  std::vector< std::vector< double > >::difference_type arg2 ;
  std::vector< std::vector< double > >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "arrDouble___setitem__" "', argument " "1"" of type '" "std::vector< std::vector< double > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< double > > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "arrDouble___setitem__" "', argument " "2"" of type '" "std::vector< std::vector< double > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< std::vector< double > >::difference_type >(val2);
  {
    std::vector< double,std::allocator< double > > *ptr = (std::vector< double,std::allocator< double > > *)0;
    res3 = swig::asptr(swig_obj[2], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "arrDouble___setitem__" "', argument " "3"" of type '" "std::vector< std::vector< double > >::value_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "arrDouble___setitem__" "', argument " "3"" of type '" "std::vector< std::vector< double > >::value_type const &""'"); 
    }
    arg3 = ptr;
  }
  try {
    std_vector_Sl_std_vector_Sl_double_Sg__Sg____setitem____SWIG_2(arg1,SWIG_STD_MOVE(arg2),(std::vector< double,std::allocator< double > > const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_arrDouble___setitem__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "arrDouble___setitem__", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_arrDouble___setitem____SWIG_1(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        int res = swig::asptr(argv[2], (std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_arrDouble___setitem____SWIG_0(self, argc, argv);
        }
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = swig::asptr(argv[2], (std::vector< double,std::allocator< double > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_arrDouble___setitem____SWIG_2(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'arrDouble___setitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< std::vector< double > >::__setitem__(SWIGPY_SLICEOBJECT *,std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > > const &)\n"
    "    std::vector< std::vector< double > >::__setitem__(SWIGPY_SLICEOBJECT *)\n"
    "    std::vector< std::vector< double > >::__setitem__(std::vector< std::vector< double > >::difference_type,std::vector< std::vector< double > >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_arrDouble_pop(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< double > > *arg1 = (std::vector< std::vector< double > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< std::vector< double > >::value_type result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "arrDouble_pop" "', argument " "1"" of type '" "std::vector< std::vector< double > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< double > > * >(argp1);
  try {
    result = std_vector_Sl_std_vector_Sl_double_Sg__Sg__pop(arg1);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  resultobj = swig::from(static_cast< std::vector< double,std::allocator< double > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_arrDouble_append(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< double > > *arg1 = (std::vector< std::vector< double > > *) 0 ;
  std::vector< std::vector< double > >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "arrDouble_append", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "arrDouble_append" "', argument " "1"" of type '" "std::vector< std::vector< double > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< double > > * >(argp1);
  {
    std::vector< double,std::allocator< double > > *ptr = (std::vector< double,std::allocator< double > > *)0;
    res2 = swig::asptr(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "arrDouble_append" "', argument " "2"" of type '" "std::vector< std::vector< double > >::value_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "arrDouble_append" "', argument " "2"" of type '" "std::vector< std::vector< double > >::value_type const &""'"); 
    }
    arg2 = ptr;
  }
  std_vector_Sl_std_vector_Sl_double_Sg__Sg__append(arg1,(std::vector< double,std::allocator< double > > const &)*arg2);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_arrDouble__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **SWIGUNUSEDPARM(swig_obj)) {
  PyObject *resultobj = 0;
  std::vector< std::vector< double > > *result = 0 ;
  
  (void)self;
  if ((nobjs < 0) || (nobjs > 0)) SWIG_fail;
  result = (std::vector< std::vector< double > > *)new std::vector< std::vector< double > >();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__vectorT_double_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_arrDouble__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< std::vector< double,std::allocator< double > > > *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  std::vector< std::vector< double > > *result = 0 ;
  
  (void)self;
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  {
    std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > > *ptr = (std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > > *)0;
    res1 = swig::asptr(swig_obj[0], &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_arrDouble" "', argument " "1"" of type '" "std::vector< std::vector< double,std::allocator< double > > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_arrDouble" "', argument " "1"" of type '" "std::vector< std::vector< double,std::allocator< double > > > const &""'"); 
    }
    arg1 = ptr;
  }
  result = (std::vector< std::vector< double > > *)new std::vector< std::vector< double > >((std::vector< std::vector< double,std::allocator< double > > > const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__vectorT_double_t_t, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_arrDouble_empty(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< double > > *arg1 = (std::vector< std::vector< double > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "arrDouble_empty" "', argument " "1"" of type '" "std::vector< std::vector< double > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< double > > * >(argp1);
  result = (bool)((std::vector< std::vector< double > > const *)arg1)->empty();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_arrDouble_size(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< double > > *arg1 = (std::vector< std::vector< double > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< std::vector< double > >::size_type result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "arrDouble_size" "', argument " "1"" of type '" "std::vector< std::vector< double > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< double > > * >(argp1);
  result = ((std::vector< std::vector< double > > const *)arg1)->size();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_arrDouble_swap(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< double > > *arg1 = (std::vector< std::vector< double > > *) 0 ;
  std::vector< std::vector< double,std::allocator< double > > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "arrDouble_swap", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "arrDouble_swap" "', argument " "1"" of type '" "std::vector< std::vector< double > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< double > > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_std__vectorT_std__vectorT_double_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "arrDouble_swap" "', argument " "2"" of type '" "std::vector< std::vector< double,std::allocator< double > > > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "arrDouble_swap" "', argument " "2"" of type '" "std::vector< std::vector< double,std::allocator< double > > > &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< std::vector< double,std::allocator< double > > > * >(argp2);
  (arg1)->swap(*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_arrDouble_begin(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< double > > *arg1 = (std::vector< std::vector< double > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< std::vector< double > >::iterator result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "arrDouble_begin" "', argument " "1"" of type '" "std::vector< std::vector< double > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< double > > * >(argp1);
  result = (arg1)->begin();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< std::vector< double > >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_arrDouble_end(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< double > > *arg1 = (std::vector< std::vector< double > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< std::vector< double > >::iterator result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "arrDouble_end" "', argument " "1"" of type '" "std::vector< std::vector< double > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< double > > * >(argp1);
  result = (arg1)->end();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< std::vector< double > >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_arrDouble_rbegin(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< double > > *arg1 = (std::vector< std::vector< double > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< std::vector< double > >::reverse_iterator result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "arrDouble_rbegin" "', argument " "1"" of type '" "std::vector< std::vector< double > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< double > > * >(argp1);
  result = (arg1)->rbegin();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< std::vector< double > >::reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_arrDouble_rend(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< double > > *arg1 = (std::vector< std::vector< double > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< std::vector< double > >::reverse_iterator result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "arrDouble_rend" "', argument " "1"" of type '" "std::vector< std::vector< double > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< double > > * >(argp1);
  result = (arg1)->rend();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< std::vector< double > >::reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_arrDouble_clear(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< double > > *arg1 = (std::vector< std::vector< double > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "arrDouble_clear" "', argument " "1"" of type '" "std::vector< std::vector< double > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< double > > * >(argp1);
  (arg1)->clear();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_arrDouble_get_allocator(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< double > > *arg1 = (std::vector< std::vector< double > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  SwigValueWrapper< std::allocator< std::vector< double,std::allocator< double > > > > result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "arrDouble_get_allocator" "', argument " "1"" of type '" "std::vector< std::vector< double > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< double > > * >(argp1);
  result = ((std::vector< std::vector< double > > const *)arg1)->get_allocator();
  resultobj = SWIG_NewPointerObj((new std::vector< std::vector< double > >::allocator_type(result)), SWIGTYPE_p_std__allocatorT_std__vectorT_double_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_arrDouble__SWIG_2(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< std::vector< double > >::size_type arg1 ;
  size_t val1 ;
  int ecode1 = 0 ;
  std::vector< std::vector< double > > *result = 0 ;
  
  (void)self;
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_arrDouble" "', argument " "1"" of type '" "std::vector< std::vector< double > >::size_type""'");
  } 
  arg1 = static_cast< std::vector< std::vector< double > >::size_type >(val1);
  result = (std::vector< std::vector< double > > *)new std::vector< std::vector< double > >(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__vectorT_double_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_arrDouble_pop_back(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< double > > *arg1 = (std::vector< std::vector< double > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "arrDouble_pop_back" "', argument " "1"" of type '" "std::vector< std::vector< double > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< double > > * >(argp1);
  (arg1)->pop_back();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_arrDouble_resize__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< std::vector< double > > *arg1 = (std::vector< std::vector< double > > *) 0 ;
  std::vector< std::vector< double > >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "arrDouble_resize" "', argument " "1"" of type '" "std::vector< std::vector< double > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< double > > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "arrDouble_resize" "', argument " "2"" of type '" "std::vector< std::vector< double > >::size_type""'");
  } 
  arg2 = static_cast< std::vector< std::vector< double > >::size_type >(val2);
  (arg1)->resize(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_arrDouble_erase__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< std::vector< double > > *arg1 = (std::vector< std::vector< double > > *) 0 ;
  std::vector< std::vector< double > >::iterator arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  std::vector< std::vector< double > >::iterator result;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "arrDouble_erase" "', argument " "1"" of type '" "std::vector< std::vector< double > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< double > > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "arrDouble_erase" "', argument " "2"" of type '" "std::vector< std::vector< double > >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< std::vector< double > >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< std::vector< double > >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "arrDouble_erase" "', argument " "2"" of type '" "std::vector< std::vector< double > >::iterator""'");
    }
  }
  result = std_vector_Sl_std_vector_Sl_double_Sg__Sg__erase__SWIG_0(arg1,SWIG_STD_MOVE(arg2));
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< std::vector< double > >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_arrDouble_erase__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< std::vector< double > > *arg1 = (std::vector< std::vector< double > > *) 0 ;
  std::vector< std::vector< double > >::iterator arg2 ;
  std::vector< std::vector< double > >::iterator arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  swig::SwigPyIterator *iter3 = 0 ;
  int res3 ;
  std::vector< std::vector< double > >::iterator result;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "arrDouble_erase" "', argument " "1"" of type '" "std::vector< std::vector< double > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< double > > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "arrDouble_erase" "', argument " "2"" of type '" "std::vector< std::vector< double > >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< std::vector< double > >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< std::vector< double > >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "arrDouble_erase" "', argument " "2"" of type '" "std::vector< std::vector< double > >::iterator""'");
    }
  }
  res3 = SWIG_ConvertPtr(swig_obj[2], SWIG_as_voidptrptr(&iter3), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res3) || !iter3) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "arrDouble_erase" "', argument " "3"" of type '" "std::vector< std::vector< double > >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< std::vector< double > >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< std::vector< double > >::iterator > *>(iter3);
    if (iter_t) {
      arg3 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "arrDouble_erase" "', argument " "3"" of type '" "std::vector< std::vector< double > >::iterator""'");
    }
  }
  result = std_vector_Sl_std_vector_Sl_double_Sg__Sg__erase__SWIG_1(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3));
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< std::vector< double > >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_arrDouble_erase(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "arrDouble_erase", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< std::vector< double > >::iterator > *>(iter) != 0));
      if (_v) {
        return _wrap_arrDouble_erase__SWIG_0(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< std::vector< double > >::iterator > *>(iter) != 0));
      if (_v) {
        swig::SwigPyIterator *iter = 0;
        int res = SWIG_ConvertPtr(argv[2], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
        _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< std::vector< double > >::iterator > *>(iter) != 0));
        if (_v) {
          return _wrap_arrDouble_erase__SWIG_1(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'arrDouble_erase'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< std::vector< double > >::erase(std::vector< std::vector< double > >::iterator)\n"
    "    std::vector< std::vector< double > >::erase(std::vector< std::vector< double > >::iterator,std::vector< std::vector< double > >::iterator)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_new_arrDouble__SWIG_3(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< std::vector< double > >::size_type arg1 ;
  std::vector< std::vector< double > >::value_type *arg2 = 0 ;
  size_t val1 ;
  int ecode1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  std::vector< std::vector< double > > *result = 0 ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_arrDouble" "', argument " "1"" of type '" "std::vector< std::vector< double > >::size_type""'");
  } 
  arg1 = static_cast< std::vector< std::vector< double > >::size_type >(val1);
  {
    std::vector< double,std::allocator< double > > *ptr = (std::vector< double,std::allocator< double > > *)0;
    res2 = swig::asptr(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_arrDouble" "', argument " "2"" of type '" "std::vector< std::vector< double > >::value_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_arrDouble" "', argument " "2"" of type '" "std::vector< std::vector< double > >::value_type const &""'"); 
    }
    arg2 = ptr;
  }
  result = (std::vector< std::vector< double > > *)new std::vector< std::vector< double > >(arg1,(std::vector< std::vector< double > >::value_type const &)*arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__vectorT_double_t_t, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_arrDouble(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "new_arrDouble", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 0) {
    return _wrap_new_arrDouble__SWIG_0(self, argc, argv);
  }
  if (argc == 1) {
    int _v = 0;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_arrDouble__SWIG_2(self, argc, argv);
    }
  }
  if (argc == 1) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_arrDouble__SWIG_1(self, argc, argv);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = swig::asptr(argv[1], (std::vector< double,std::allocator< double > >**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_arrDouble__SWIG_3(self, argc, argv);
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'new_arrDouble'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< std::vector< double > >::vector()\n"
    "    std::vector< std::vector< double > >::vector(std::vector< std::vector< double,std::allocator< double > > > const &)\n"
    "    std::vector< std::vector< double > >::vector(std::vector< std::vector< double > >::size_type)\n"
    "    std::vector< std::vector< double > >::vector(std::vector< std::vector< double > >::size_type,std::vector< std::vector< double > >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_arrDouble_push_back(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< double > > *arg1 = (std::vector< std::vector< double > > *) 0 ;
  std::vector< std::vector< double > >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "arrDouble_push_back", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "arrDouble_push_back" "', argument " "1"" of type '" "std::vector< std::vector< double > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< double > > * >(argp1);
  {
    std::vector< double,std::allocator< double > > *ptr = (std::vector< double,std::allocator< double > > *)0;
    res2 = swig::asptr(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "arrDouble_push_back" "', argument " "2"" of type '" "std::vector< std::vector< double > >::value_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "arrDouble_push_back" "', argument " "2"" of type '" "std::vector< std::vector< double > >::value_type const &""'"); 
    }
    arg2 = ptr;
  }
  (arg1)->push_back((std::vector< std::vector< double > >::value_type const &)*arg2);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_arrDouble_front(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< double > > *arg1 = (std::vector< std::vector< double > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< std::vector< double > >::value_type *result = 0 ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "arrDouble_front" "', argument " "1"" of type '" "std::vector< std::vector< double > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< double > > * >(argp1);
  result = (std::vector< std::vector< double > >::value_type *) &((std::vector< std::vector< double > > const *)arg1)->front();
  resultobj = swig::from(static_cast< std::vector< double,std::allocator< double > > >(*result));
  (void)swig::container_owner<swig::traits<std::vector< std::vector< double > >::value_type>::category>::back_reference(resultobj, swig_obj[0]);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_arrDouble_back(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< double > > *arg1 = (std::vector< std::vector< double > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< std::vector< double > >::value_type *result = 0 ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "arrDouble_back" "', argument " "1"" of type '" "std::vector< std::vector< double > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< double > > * >(argp1);
  result = (std::vector< std::vector< double > >::value_type *) &((std::vector< std::vector< double > > const *)arg1)->back();
  resultobj = swig::from(static_cast< std::vector< double,std::allocator< double > > >(*result));
  (void)swig::container_owner<swig::traits<std::vector< std::vector< double > >::value_type>::category>::back_reference(resultobj, swig_obj[0]);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_arrDouble_assign(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< double > > *arg1 = (std::vector< std::vector< double > > *) 0 ;
  std::vector< std::vector< double > >::size_type arg2 ;
  std::vector< std::vector< double > >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject *swig_obj[3] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "arrDouble_assign", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "arrDouble_assign" "', argument " "1"" of type '" "std::vector< std::vector< double > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< double > > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "arrDouble_assign" "', argument " "2"" of type '" "std::vector< std::vector< double > >::size_type""'");
  } 
  arg2 = static_cast< std::vector< std::vector< double > >::size_type >(val2);
  {
    std::vector< double,std::allocator< double > > *ptr = (std::vector< double,std::allocator< double > > *)0;
    res3 = swig::asptr(swig_obj[2], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "arrDouble_assign" "', argument " "3"" of type '" "std::vector< std::vector< double > >::value_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "arrDouble_assign" "', argument " "3"" of type '" "std::vector< std::vector< double > >::value_type const &""'"); 
    }
    arg3 = ptr;
  }
  (arg1)->assign(arg2,(std::vector< std::vector< double > >::value_type const &)*arg3);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_arrDouble_resize__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< std::vector< double > > *arg1 = (std::vector< std::vector< double > > *) 0 ;
  std::vector< std::vector< double > >::size_type arg2 ;
  std::vector< std::vector< double > >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "arrDouble_resize" "', argument " "1"" of type '" "std::vector< std::vector< double > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< double > > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "arrDouble_resize" "', argument " "2"" of type '" "std::vector< std::vector< double > >::size_type""'");
  } 
  arg2 = static_cast< std::vector< std::vector< double > >::size_type >(val2);
  {
    std::vector< double,std::allocator< double > > *ptr = (std::vector< double,std::allocator< double > > *)0;
    res3 = swig::asptr(swig_obj[2], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "arrDouble_resize" "', argument " "3"" of type '" "std::vector< std::vector< double > >::value_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "arrDouble_resize" "', argument " "3"" of type '" "std::vector< std::vector< double > >::value_type const &""'"); 
    }
    arg3 = ptr;
  }
  (arg1)->resize(arg2,(std::vector< std::vector< double > >::value_type const &)*arg3);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_arrDouble_resize(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "arrDouble_resize", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_arrDouble_resize__SWIG_0(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = swig::asptr(argv[2], (std::vector< double,std::allocator< double > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_arrDouble_resize__SWIG_1(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'arrDouble_resize'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< std::vector< double > >::resize(std::vector< std::vector< double > >::size_type)\n"
    "    std::vector< std::vector< double > >::resize(std::vector< std::vector< double > >::size_type,std::vector< std::vector< double > >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_arrDouble_insert__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< std::vector< double > > *arg1 = (std::vector< std::vector< double > > *) 0 ;
  std::vector< std::vector< double > >::iterator arg2 ;
  std::vector< std::vector< double > >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  int res3 = SWIG_OLDOBJ ;
  std::vector< std::vector< double > >::iterator result;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "arrDouble_insert" "', argument " "1"" of type '" "std::vector< std::vector< double > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< double > > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "arrDouble_insert" "', argument " "2"" of type '" "std::vector< std::vector< double > >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< std::vector< double > >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< std::vector< double > >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "arrDouble_insert" "', argument " "2"" of type '" "std::vector< std::vector< double > >::iterator""'");
    }
  }
  {
    std::vector< double,std::allocator< double > > *ptr = (std::vector< double,std::allocator< double > > *)0;
    res3 = swig::asptr(swig_obj[2], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "arrDouble_insert" "', argument " "3"" of type '" "std::vector< std::vector< double > >::value_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "arrDouble_insert" "', argument " "3"" of type '" "std::vector< std::vector< double > >::value_type const &""'"); 
    }
    arg3 = ptr;
  }
  result = std_vector_Sl_std_vector_Sl_double_Sg__Sg__insert__SWIG_0(arg1,SWIG_STD_MOVE(arg2),(std::vector< double,std::allocator< double > > const &)*arg3);
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< std::vector< double > >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_arrDouble_insert__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< std::vector< double > > *arg1 = (std::vector< std::vector< double > > *) 0 ;
  std::vector< std::vector< double > >::iterator arg2 ;
  std::vector< std::vector< double > >::size_type arg3 ;
  std::vector< std::vector< double > >::value_type *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  size_t val3 ;
  int ecode3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  
  (void)self;
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "arrDouble_insert" "', argument " "1"" of type '" "std::vector< std::vector< double > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< double > > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "arrDouble_insert" "', argument " "2"" of type '" "std::vector< std::vector< double > >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< std::vector< double > >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< std::vector< double > >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "arrDouble_insert" "', argument " "2"" of type '" "std::vector< std::vector< double > >::iterator""'");
    }
  }
  ecode3 = SWIG_AsVal_size_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "arrDouble_insert" "', argument " "3"" of type '" "std::vector< std::vector< double > >::size_type""'");
  } 
  arg3 = static_cast< std::vector< std::vector< double > >::size_type >(val3);
  {
    std::vector< double,std::allocator< double > > *ptr = (std::vector< double,std::allocator< double > > *)0;
    res4 = swig::asptr(swig_obj[3], &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "arrDouble_insert" "', argument " "4"" of type '" "std::vector< std::vector< double > >::value_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "arrDouble_insert" "', argument " "4"" of type '" "std::vector< std::vector< double > >::value_type const &""'"); 
    }
    arg4 = ptr;
  }
  std_vector_Sl_std_vector_Sl_double_Sg__Sg__insert__SWIG_1(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3),(std::vector< double,std::allocator< double > > const &)*arg4);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_arrDouble_insert(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "arrDouble_insert", 0, 4, argv))) SWIG_fail;
  --argc;
  if (argc == 3) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< std::vector< double > >::iterator > *>(iter) != 0));
      if (_v) {
        int res = swig::asptr(argv[2], (std::vector< double,std::allocator< double > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_arrDouble_insert__SWIG_0(self, argc, argv);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< std::vector< double > >::iterator > *>(iter) != 0));
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = swig::asptr(argv[3], (std::vector< double,std::allocator< double > >**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_arrDouble_insert__SWIG_1(self, argc, argv);
          }
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'arrDouble_insert'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< std::vector< double > >::insert(std::vector< std::vector< double > >::iterator,std::vector< std::vector< double > >::value_type const &)\n"
    "    std::vector< std::vector< double > >::insert(std::vector< std::vector< double > >::iterator,std::vector< std::vector< double > >::size_type,std::vector< std::vector< double > >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_arrDouble_reserve(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< double > > *arg1 = (std::vector< std::vector< double > > *) 0 ;
  std::vector< std::vector< double > >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "arrDouble_reserve", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "arrDouble_reserve" "', argument " "1"" of type '" "std::vector< std::vector< double > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< double > > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "arrDouble_reserve" "', argument " "2"" of type '" "std::vector< std::vector< double > >::size_type""'");
  } 
  arg2 = static_cast< std::vector< std::vector< double > >::size_type >(val2);
  (arg1)->reserve(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_arrDouble_capacity(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< double > > *arg1 = (std::vector< std::vector< double > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< std::vector< double > >::size_type result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "arrDouble_capacity" "', argument " "1"" of type '" "std::vector< std::vector< double > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< double > > * >(argp1);
  result = ((std::vector< std::vector< double > > const *)arg1)->capacity();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_arrDouble(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< double > > *arg1 = (std::vector< std::vector< double > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_double_t_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_arrDouble" "', argument " "1"" of type '" "std::vector< std::vector< double > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< double > > * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *arrDouble_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_std__vectorT_std__vectorT_double_t_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *arrDouble_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN int Swig_var_headerEilig_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable headerEilig is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_headerEilig_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_std_string(static_cast< std::string >(eilig::headerEilig));
  return pyobj;
}


SWIGINTERN int Swig_var_axis_x_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable axis_x is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_axis_x_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_size_t(static_cast< size_t >(eilig::axis_x));
  return pyobj;
}


SWIGINTERN int Swig_var_axis_y_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable axis_y is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_axis_y_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_size_t(static_cast< size_t >(eilig::axis_y));
  return pyobj;
}


SWIGINTERN int Swig_var_axis_z_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable axis_z is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_axis_z_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_size_t(static_cast< size_t >(eilig::axis_z));
  return pyobj;
}


SWIGINTERN PyObject *_wrap_new_Vector__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **SWIGUNUSEDPARM(swig_obj)) {
  PyObject *resultobj = 0;
  eilig::Vector *result = 0 ;
  
  (void)self;
  if ((nobjs < 0) || (nobjs > 0)) SWIG_fail;
  result = (eilig::Vector *)new eilig::Vector();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_eilig__Vector, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Vector__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  eilig::Vector *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  eilig::Vector *result = 0 ;
  
  (void)self;
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_eilig__Vector,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Vector" "', argument " "1"" of type '" "eilig::Vector const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Vector" "', argument " "1"" of type '" "eilig::Vector const &""'"); 
  }
  arg1 = reinterpret_cast< eilig::Vector * >(argp1);
  result = (eilig::Vector *)new eilig::Vector((eilig::Vector const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_eilig__Vector, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Vector__SWIG_2(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  eilig::Matrix *arg1 = 0 ;
  eilig::Index arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  eilig::Vector *result = 0 ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_eilig__Matrix,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Vector" "', argument " "1"" of type '" "eilig::Matrix const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Vector" "', argument " "1"" of type '" "eilig::Matrix const &""'"); 
  }
  arg1 = reinterpret_cast< eilig::Matrix * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_Vector" "', argument " "2"" of type '" "eilig::Index""'");
  } 
  arg2 = static_cast< eilig::Index >(val2);
  result = (eilig::Vector *)new eilig::Vector((eilig::Matrix const &)*arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_eilig__Vector, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Vector__SWIG_3(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  eilig::NumberRows arg1 ;
  size_t val1 ;
  int ecode1 = 0 ;
  eilig::Vector *result = 0 ;
  
  (void)self;
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_Vector" "', argument " "1"" of type '" "eilig::NumberRows""'");
  } 
  arg1 = static_cast< eilig::NumberRows >(val1);
  result = (eilig::Vector *)new eilig::Vector(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_eilig__Vector, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Vector__SWIG_4(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  eilig::NumberRows arg1 ;
  eilig::Scalar arg2 ;
  size_t val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  eilig::Vector *result = 0 ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_Vector" "', argument " "1"" of type '" "eilig::NumberRows""'");
  } 
  arg1 = static_cast< eilig::NumberRows >(val1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_Vector" "', argument " "2"" of type '" "eilig::Scalar""'");
  } 
  arg2 = static_cast< eilig::Scalar >(val2);
  result = (eilig::Vector *)new eilig::Vector(arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_eilig__Vector, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Vector__SWIG_5(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  eilig::Vector *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::unique_ptr< eilig::Vector > rvrdeleter1 ;
  eilig::Vector *result = 0 ;
  
  (void)self;
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_eilig__Vector, SWIG_POINTER_RELEASE |  0 );
  if (!SWIG_IsOK(res1)) {
    if (res1 == SWIG_ERROR_RELEASE_NOT_OWNED) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Vector" "', cannot release ownership as memory is not owned for argument " "1"" of type '" "eilig::Vector &&""'");
    } else {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Vector" "', argument " "1"" of type '" "eilig::Vector &&""'"); 
    }
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Vector" "', argument " "1"" of type '" "eilig::Vector &&""'"); 
  }
  arg1 = reinterpret_cast< eilig::Vector * >(argp1);
  rvrdeleter1.reset(arg1);
  result = (eilig::Vector *)new eilig::Vector((eilig::Vector &&)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_eilig__Vector, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Vector(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "new_Vector", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 0) {
    return _wrap_new_Vector__SWIG_0(self, argc, argv);
  }
  if (argc == 1) {
    int _v = 0;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_eilig__Vector, SWIG_POINTER_NO_NULL | 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_Vector__SWIG_1(self, argc, argv);
    }
  }
  if (argc == 1) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_eilig__Vector, SWIG_POINTER_NO_NULL);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_Vector__SWIG_5(self, argc, argv);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_Vector__SWIG_3(self, argc, argv);
    }
  }
  if (argc == 2) {
    int _v = 0;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_eilig__Matrix, SWIG_POINTER_NO_NULL | 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_Vector__SWIG_2(self, argc, argv);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_Vector__SWIG_4(self, argc, argv);
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'new_Vector'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    eilig::Vector::Vector()\n"
    "    eilig::Vector::Vector(eilig::Vector const &)\n"
    "    eilig::Vector::Vector(eilig::Matrix const &,eilig::Index)\n"
    "    eilig::Vector::Vector(eilig::NumberRows)\n"
    "    eilig::Vector::Vector(eilig::NumberRows,eilig::Scalar)\n"
    "    eilig::Vector::Vector(eilig::Vector &&)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_Vector(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  eilig::Vector *arg1 = (eilig::Vector *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_eilig__Vector, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Vector" "', argument " "1"" of type '" "eilig::Vector *""'"); 
  }
  arg1 = reinterpret_cast< eilig::Vector * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Vector_Resize__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  eilig::Vector *arg1 = (eilig::Vector *) 0 ;
  eilig::NumberRows arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_eilig__Vector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vector_Resize" "', argument " "1"" of type '" "eilig::Vector *""'"); 
  }
  arg1 = reinterpret_cast< eilig::Vector * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Vector_Resize" "', argument " "2"" of type '" "eilig::NumberRows""'");
  } 
  arg2 = static_cast< eilig::NumberRows >(val2);
  (arg1)->Resize(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Vector_Resize__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  eilig::Vector *arg1 = (eilig::Vector *) 0 ;
  eilig::NumberRows arg2 ;
  eilig::Scalar arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_eilig__Vector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vector_Resize" "', argument " "1"" of type '" "eilig::Vector *""'"); 
  }
  arg1 = reinterpret_cast< eilig::Vector * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Vector_Resize" "', argument " "2"" of type '" "eilig::NumberRows""'");
  } 
  arg2 = static_cast< eilig::NumberRows >(val2);
  ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Vector_Resize" "', argument " "3"" of type '" "eilig::Scalar""'");
  } 
  arg3 = static_cast< eilig::Scalar >(val3);
  (arg1)->Resize(arg2,arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Vector_Resize(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "Vector_Resize", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_eilig__Vector, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Vector_Resize__SWIG_0(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_eilig__Vector, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_Vector_Resize__SWIG_1(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'Vector_Resize'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    eilig::Vector::Resize(eilig::NumberRows)\n"
    "    eilig::Vector::Resize(eilig::NumberRows,eilig::Scalar)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Vector_Fill(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  eilig::Vector *arg1 = (eilig::Vector *) 0 ;
  eilig::Scalar arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "Vector_Fill", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_eilig__Vector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vector_Fill" "', argument " "1"" of type '" "eilig::Vector *""'"); 
  }
  arg1 = reinterpret_cast< eilig::Vector * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Vector_Fill" "', argument " "2"" of type '" "eilig::Scalar""'");
  } 
  arg2 = static_cast< eilig::Scalar >(val2);
  (arg1)->Fill(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Vector___call____SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  eilig::Vector *arg1 = (eilig::Vector *) 0 ;
  eilig::Index arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  eilig::Scalar result;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_eilig__Vector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vector___call__" "', argument " "1"" of type '" "eilig::Vector const *""'"); 
  }
  arg1 = reinterpret_cast< eilig::Vector * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Vector___call__" "', argument " "2"" of type '" "eilig::Index""'");
  } 
  arg2 = static_cast< eilig::Index >(val2);
  result = (eilig::Scalar)((eilig::Vector const *)arg1)->operator ()(arg2);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Vector___call____SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  eilig::Vector *arg1 = (eilig::Vector *) 0 ;
  eilig::Index arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  eilig::Scalar *result = 0 ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_eilig__Vector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vector___call__" "', argument " "1"" of type '" "eilig::Vector *""'"); 
  }
  arg1 = reinterpret_cast< eilig::Vector * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Vector___call__" "', argument " "2"" of type '" "eilig::Index""'");
  } 
  arg2 = static_cast< eilig::Index >(val2);
  result = (eilig::Scalar *) &(arg1)->operator ()(arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_double, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Vector___call__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "Vector___call__", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_eilig__Vector, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Vector___call____SWIG_0(self, argc, argv);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_eilig__Vector, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Vector___call____SWIG_1(self, argc, argv);
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'Vector___call__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    eilig::Vector::operator ()(eilig::Index) const\n"
    "    eilig::Vector::operator ()(eilig::Index)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Vector___add____SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  eilig::Vector *arg1 = (eilig::Vector *) 0 ;
  eilig::Scalar arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  eilig::Vector result;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_eilig__Vector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vector___add__" "', argument " "1"" of type '" "eilig::Vector const *""'"); 
  }
  arg1 = reinterpret_cast< eilig::Vector * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Vector___add__" "', argument " "2"" of type '" "eilig::Scalar""'");
  } 
  arg2 = static_cast< eilig::Scalar >(val2);
  result = ((eilig::Vector const *)arg1)->operator +(arg2);
  resultobj = SWIG_NewPointerObj((new eilig::Vector(result)), SWIGTYPE_p_eilig__Vector, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  if (PyErr_Occurred() && !PyErr_ExceptionMatches(PyExc_TypeError)) {
    return NULL;
  }
  PyErr_Clear();
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_Vector___add____SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  eilig::Vector *arg1 = (eilig::Vector *) 0 ;
  eilig::Vector *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  eilig::Vector result;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_eilig__Vector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vector___add__" "', argument " "1"" of type '" "eilig::Vector const *""'"); 
  }
  arg1 = reinterpret_cast< eilig::Vector * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_eilig__Vector,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Vector___add__" "', argument " "2"" of type '" "eilig::Vector const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Vector___add__" "', argument " "2"" of type '" "eilig::Vector const &""'"); 
  }
  arg2 = reinterpret_cast< eilig::Vector * >(argp2);
  result = ((eilig::Vector const *)arg1)->operator +((eilig::Vector const &)*arg2);
  resultobj = SWIG_NewPointerObj((new eilig::Vector(result)), SWIGTYPE_p_eilig__Vector, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  if (PyErr_Occurred() && !PyErr_ExceptionMatches(PyExc_TypeError)) {
    return NULL;
  }
  PyErr_Clear();
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_Vector___add__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "Vector___add__", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_eilig__Vector, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_eilig__Vector, SWIG_POINTER_NO_NULL | 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Vector___add____SWIG_1(self, argc, argv);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_eilig__Vector, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Vector___add____SWIG_0(self, argc, argv);
      }
    }
  }
  
fail:
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_Vector___pos__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  eilig::Vector *arg1 = (eilig::Vector *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  eilig::Vector result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_eilig__Vector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vector___pos__" "', argument " "1"" of type '" "eilig::Vector const *""'"); 
  }
  arg1 = reinterpret_cast< eilig::Vector * >(argp1);
  result = ((eilig::Vector const *)arg1)->operator +();
  resultobj = SWIG_NewPointerObj((new eilig::Vector(result)), SWIGTYPE_p_eilig__Vector, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  if (PyErr_Occurred() && !PyErr_ExceptionMatches(PyExc_TypeError)) {
    return NULL;
  }
  PyErr_Clear();
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_Vector___sub____SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  eilig::Vector *arg1 = (eilig::Vector *) 0 ;
  eilig::Scalar arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  eilig::Vector result;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_eilig__Vector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vector___sub__" "', argument " "1"" of type '" "eilig::Vector const *""'"); 
  }
  arg1 = reinterpret_cast< eilig::Vector * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Vector___sub__" "', argument " "2"" of type '" "eilig::Scalar""'");
  } 
  arg2 = static_cast< eilig::Scalar >(val2);
  result = ((eilig::Vector const *)arg1)->operator -(arg2);
  resultobj = SWIG_NewPointerObj((new eilig::Vector(result)), SWIGTYPE_p_eilig__Vector, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  if (PyErr_Occurred() && !PyErr_ExceptionMatches(PyExc_TypeError)) {
    return NULL;
  }
  PyErr_Clear();
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_Vector___sub____SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  eilig::Vector *arg1 = (eilig::Vector *) 0 ;
  eilig::Vector *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  eilig::Vector result;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_eilig__Vector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vector___sub__" "', argument " "1"" of type '" "eilig::Vector const *""'"); 
  }
  arg1 = reinterpret_cast< eilig::Vector * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_eilig__Vector,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Vector___sub__" "', argument " "2"" of type '" "eilig::Vector const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Vector___sub__" "', argument " "2"" of type '" "eilig::Vector const &""'"); 
  }
  arg2 = reinterpret_cast< eilig::Vector * >(argp2);
  result = ((eilig::Vector const *)arg1)->operator -((eilig::Vector const &)*arg2);
  resultobj = SWIG_NewPointerObj((new eilig::Vector(result)), SWIGTYPE_p_eilig__Vector, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  if (PyErr_Occurred() && !PyErr_ExceptionMatches(PyExc_TypeError)) {
    return NULL;
  }
  PyErr_Clear();
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_Vector___sub__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "Vector___sub__", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_eilig__Vector, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_eilig__Vector, SWIG_POINTER_NO_NULL | 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Vector___sub____SWIG_1(self, argc, argv);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_eilig__Vector, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Vector___sub____SWIG_0(self, argc, argv);
      }
    }
  }
  
fail:
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_Vector___neg__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  eilig::Vector *arg1 = (eilig::Vector *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  eilig::Vector result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_eilig__Vector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vector___neg__" "', argument " "1"" of type '" "eilig::Vector const *""'"); 
  }
  arg1 = reinterpret_cast< eilig::Vector * >(argp1);
  result = ((eilig::Vector const *)arg1)->operator -();
  resultobj = SWIG_NewPointerObj((new eilig::Vector(result)), SWIGTYPE_p_eilig__Vector, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  if (PyErr_Occurred() && !PyErr_ExceptionMatches(PyExc_TypeError)) {
    return NULL;
  }
  PyErr_Clear();
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_Vector___mul__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  eilig::Vector *arg1 = (eilig::Vector *) 0 ;
  eilig::Scalar arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  eilig::Vector result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "Vector___mul__", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_eilig__Vector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vector___mul__" "', argument " "1"" of type '" "eilig::Vector const *""'"); 
  }
  arg1 = reinterpret_cast< eilig::Vector * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Vector___mul__" "', argument " "2"" of type '" "eilig::Scalar""'");
  } 
  arg2 = static_cast< eilig::Scalar >(val2);
  result = ((eilig::Vector const *)arg1)->operator *(arg2);
  resultobj = SWIG_NewPointerObj((new eilig::Vector(result)), SWIGTYPE_p_eilig__Vector, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  if (PyErr_Occurred() && !PyErr_ExceptionMatches(PyExc_TypeError)) {
    return NULL;
  }
  PyErr_Clear();
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_Vector_SwapRows(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  eilig::Vector *arg1 = (eilig::Vector *) 0 ;
  eilig::Index arg2 ;
  eilig::Index arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  eilig::Vector *result = 0 ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "Vector_SwapRows", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_eilig__Vector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vector_SwapRows" "', argument " "1"" of type '" "eilig::Vector *""'"); 
  }
  arg1 = reinterpret_cast< eilig::Vector * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Vector_SwapRows" "', argument " "2"" of type '" "eilig::Index""'");
  } 
  arg2 = static_cast< eilig::Index >(val2);
  ecode3 = SWIG_AsVal_size_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Vector_SwapRows" "', argument " "3"" of type '" "eilig::Index""'");
  } 
  arg3 = static_cast< eilig::Index >(val3);
  result = (eilig::Vector *) &(arg1)->SwapRows(arg2,arg3);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_eilig__Vector, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Vector_Region__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  eilig::Vector *arg1 = (eilig::Vector *) 0 ;
  eilig::Index arg2 ;
  eilig::Index arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  eilig::Vector result;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_eilig__Vector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vector_Region" "', argument " "1"" of type '" "eilig::Vector *""'"); 
  }
  arg1 = reinterpret_cast< eilig::Vector * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Vector_Region" "', argument " "2"" of type '" "eilig::Index""'");
  } 
  arg2 = static_cast< eilig::Index >(val2);
  ecode3 = SWIG_AsVal_size_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Vector_Region" "', argument " "3"" of type '" "eilig::Index""'");
  } 
  arg3 = static_cast< eilig::Index >(val3);
  result = (arg1)->Region(arg2,arg3);
  resultobj = SWIG_NewPointerObj((new eilig::Vector(result)), SWIGTYPE_p_eilig__Vector, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Vector_Region__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  eilig::Vector *arg1 = (eilig::Vector *) 0 ;
  eilig::Index arg2 ;
  eilig::Index arg3 ;
  eilig::Vector *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  
  (void)self;
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_eilig__Vector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vector_Region" "', argument " "1"" of type '" "eilig::Vector *""'"); 
  }
  arg1 = reinterpret_cast< eilig::Vector * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Vector_Region" "', argument " "2"" of type '" "eilig::Index""'");
  } 
  arg2 = static_cast< eilig::Index >(val2);
  ecode3 = SWIG_AsVal_size_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Vector_Region" "', argument " "3"" of type '" "eilig::Index""'");
  } 
  arg3 = static_cast< eilig::Index >(val3);
  res4 = SWIG_ConvertPtr(swig_obj[3], &argp4, SWIGTYPE_p_eilig__Vector,  0  | 0);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "Vector_Region" "', argument " "4"" of type '" "eilig::Vector const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Vector_Region" "', argument " "4"" of type '" "eilig::Vector const &""'"); 
  }
  arg4 = reinterpret_cast< eilig::Vector * >(argp4);
  (arg1)->Region(arg2,arg3,(eilig::Vector const &)*arg4);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Vector_Region(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "Vector_Region", 0, 4, argv))) SWIG_fail;
  --argc;
  if (argc == 3) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_eilig__Vector, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_Vector_Region__SWIG_0(self, argc, argv);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_eilig__Vector, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = SWIG_ConvertPtr(argv[3], 0, SWIGTYPE_p_eilig__Vector, SWIG_POINTER_NO_NULL | 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_Vector_Region__SWIG_1(self, argc, argv);
          }
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'Vector_Region'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    eilig::Vector::Region(eilig::Index,eilig::Index)\n"
    "    eilig::Vector::Region(eilig::Index,eilig::Index,eilig::Vector const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Vector_GetRows(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  eilig::Vector *arg1 = (eilig::Vector *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  eilig::NumberRows result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_eilig__Vector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vector_GetRows" "', argument " "1"" of type '" "eilig::Vector const *""'"); 
  }
  arg1 = reinterpret_cast< eilig::Vector * >(argp1);
  result = ((eilig::Vector const *)arg1)->GetRows();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Vector_GetCols(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  eilig::Vector *arg1 = (eilig::Vector *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  eilig::NumberCols result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_eilig__Vector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vector_GetCols" "', argument " "1"" of type '" "eilig::Vector const *""'"); 
  }
  arg1 = reinterpret_cast< eilig::Vector * >(argp1);
  result = ((eilig::Vector const *)arg1)->GetCols();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Vector_GetValue(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  eilig::Vector *arg1 = (eilig::Vector *) 0 ;
  eilig::Index arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  eilig::Scalar result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "Vector_GetValue", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_eilig__Vector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vector_GetValue" "', argument " "1"" of type '" "eilig::Vector const *""'"); 
  }
  arg1 = reinterpret_cast< eilig::Vector * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Vector_GetValue" "', argument " "2"" of type '" "eilig::Index""'");
  } 
  arg2 = static_cast< eilig::Index >(val2);
  result = (eilig::Scalar)((eilig::Vector const *)arg1)->GetValue(arg2);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Vector_GetData(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  eilig::Vector *arg1 = (eilig::Vector *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  eilig::Scalars *result = 0 ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_eilig__Vector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vector_GetData" "', argument " "1"" of type '" "eilig::Vector const *""'"); 
  }
  arg1 = reinterpret_cast< eilig::Vector * >(argp1);
  result = (eilig::Scalars *) &((eilig::Vector const *)arg1)->GetData();
  resultobj = swig::from(static_cast< std::vector< double,std::allocator< double > > >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Vector_SetValue(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  eilig::Vector *arg1 = (eilig::Vector *) 0 ;
  eilig::Index arg2 ;
  eilig::Scalar arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "Vector_SetValue", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_eilig__Vector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vector_SetValue" "', argument " "1"" of type '" "eilig::Vector *""'"); 
  }
  arg1 = reinterpret_cast< eilig::Vector * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Vector_SetValue" "', argument " "2"" of type '" "eilig::Index""'");
  } 
  arg2 = static_cast< eilig::Index >(val2);
  ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Vector_SetValue" "', argument " "3"" of type '" "eilig::Scalar""'");
  } 
  arg3 = static_cast< eilig::Scalar >(val3);
  (arg1)->SetValue(arg2,arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Vector___str__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  eilig::Vector *arg1 = (eilig::Vector *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  eilig::String result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_eilig__Vector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vector___str__" "', argument " "1"" of type '" "eilig::Vector const *""'"); 
  }
  arg1 = reinterpret_cast< eilig::Vector * >(argp1);
  result = eilig_Vector___str__((eilig::Vector const *)arg1);
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Vector___radd__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  eilig::Vector *arg1 = (eilig::Vector *) 0 ;
  eilig::Scalar arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  eilig::Vector result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "Vector___radd__", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_eilig__Vector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vector___radd__" "', argument " "1"" of type '" "eilig::Vector const *""'"); 
  }
  arg1 = reinterpret_cast< eilig::Vector * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Vector___radd__" "', argument " "2"" of type '" "eilig::Scalar""'");
  } 
  arg2 = static_cast< eilig::Scalar >(val2);
  result = eilig_Vector___radd__((eilig::Vector const *)arg1,arg2);
  resultobj = SWIG_NewPointerObj((new eilig::Vector(result)), SWIGTYPE_p_eilig__Vector, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  if (PyErr_Occurred() && !PyErr_ExceptionMatches(PyExc_TypeError)) {
    return NULL;
  }
  PyErr_Clear();
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_Vector___rsub__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  eilig::Vector *arg1 = (eilig::Vector *) 0 ;
  eilig::Scalar arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  eilig::Vector result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "Vector___rsub__", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_eilig__Vector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vector___rsub__" "', argument " "1"" of type '" "eilig::Vector const *""'"); 
  }
  arg1 = reinterpret_cast< eilig::Vector * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Vector___rsub__" "', argument " "2"" of type '" "eilig::Scalar""'");
  } 
  arg2 = static_cast< eilig::Scalar >(val2);
  result = eilig_Vector___rsub__((eilig::Vector const *)arg1,arg2);
  resultobj = SWIG_NewPointerObj((new eilig::Vector(result)), SWIGTYPE_p_eilig__Vector, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  if (PyErr_Occurred() && !PyErr_ExceptionMatches(PyExc_TypeError)) {
    return NULL;
  }
  PyErr_Clear();
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_Vector___rmul__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  eilig::Vector *arg1 = (eilig::Vector *) 0 ;
  eilig::Scalar arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  eilig::Vector result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "Vector___rmul__", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_eilig__Vector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vector___rmul__" "', argument " "1"" of type '" "eilig::Vector const *""'"); 
  }
  arg1 = reinterpret_cast< eilig::Vector * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Vector___rmul__" "', argument " "2"" of type '" "eilig::Scalar""'");
  } 
  arg2 = static_cast< eilig::Scalar >(val2);
  result = eilig_Vector___rmul__((eilig::Vector const *)arg1,arg2);
  resultobj = SWIG_NewPointerObj((new eilig::Vector(result)), SWIGTYPE_p_eilig__Vector, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  if (PyErr_Occurred() && !PyErr_ExceptionMatches(PyExc_TypeError)) {
    return NULL;
  }
  PyErr_Clear();
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *Vector_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_eilig__Vector, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *Vector_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_Matrix__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **SWIGUNUSEDPARM(swig_obj)) {
  PyObject *resultobj = 0;
  eilig::Matrix *result = 0 ;
  
  (void)self;
  if ((nobjs < 0) || (nobjs > 0)) SWIG_fail;
  result = (eilig::Matrix *)new eilig::Matrix();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_eilig__Matrix, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Matrix__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  eilig::Matrix *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  eilig::Matrix *result = 0 ;
  
  (void)self;
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_eilig__Matrix,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Matrix" "', argument " "1"" of type '" "eilig::Matrix const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Matrix" "', argument " "1"" of type '" "eilig::Matrix const &""'"); 
  }
  arg1 = reinterpret_cast< eilig::Matrix * >(argp1);
  result = (eilig::Matrix *)new eilig::Matrix((eilig::Matrix const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_eilig__Matrix, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Matrix__SWIG_2(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  eilig::Vector *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  eilig::Matrix *result = 0 ;
  
  (void)self;
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_eilig__Vector,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Matrix" "', argument " "1"" of type '" "eilig::Vector const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Matrix" "', argument " "1"" of type '" "eilig::Vector const &""'"); 
  }
  arg1 = reinterpret_cast< eilig::Vector * >(argp1);
  result = (eilig::Matrix *)new eilig::Matrix((eilig::Vector const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_eilig__Matrix, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Matrix__SWIG_3(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  eilig::NumberRows arg1 ;
  eilig::NumberCols arg2 ;
  size_t val1 ;
  int ecode1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  eilig::Matrix *result = 0 ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_Matrix" "', argument " "1"" of type '" "eilig::NumberRows""'");
  } 
  arg1 = static_cast< eilig::NumberRows >(val1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_Matrix" "', argument " "2"" of type '" "eilig::NumberCols""'");
  } 
  arg2 = static_cast< eilig::NumberCols >(val2);
  result = (eilig::Matrix *)new eilig::Matrix(arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_eilig__Matrix, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Matrix__SWIG_4(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  eilig::NumberRows arg1 ;
  eilig::NumberCols arg2 ;
  eilig::Scalar arg3 ;
  size_t val1 ;
  int ecode1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  eilig::Matrix *result = 0 ;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_Matrix" "', argument " "1"" of type '" "eilig::NumberRows""'");
  } 
  arg1 = static_cast< eilig::NumberRows >(val1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_Matrix" "', argument " "2"" of type '" "eilig::NumberCols""'");
  } 
  arg2 = static_cast< eilig::NumberCols >(val2);
  ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_Matrix" "', argument " "3"" of type '" "eilig::Scalar""'");
  } 
  arg3 = static_cast< eilig::Scalar >(val3);
  result = (eilig::Matrix *)new eilig::Matrix(arg1,arg2,arg3);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_eilig__Matrix, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Matrix__SWIG_5(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  eilig::Matrix *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::unique_ptr< eilig::Matrix > rvrdeleter1 ;
  eilig::Matrix *result = 0 ;
  
  (void)self;
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_eilig__Matrix, SWIG_POINTER_RELEASE |  0 );
  if (!SWIG_IsOK(res1)) {
    if (res1 == SWIG_ERROR_RELEASE_NOT_OWNED) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Matrix" "', cannot release ownership as memory is not owned for argument " "1"" of type '" "eilig::Matrix &&""'");
    } else {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Matrix" "', argument " "1"" of type '" "eilig::Matrix &&""'"); 
    }
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Matrix" "', argument " "1"" of type '" "eilig::Matrix &&""'"); 
  }
  arg1 = reinterpret_cast< eilig::Matrix * >(argp1);
  rvrdeleter1.reset(arg1);
  result = (eilig::Matrix *)new eilig::Matrix((eilig::Matrix &&)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_eilig__Matrix, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Matrix(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "new_Matrix", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 0) {
    return _wrap_new_Matrix__SWIG_0(self, argc, argv);
  }
  if (argc == 1) {
    int _v = 0;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_eilig__Matrix, SWIG_POINTER_NO_NULL | 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_Matrix__SWIG_1(self, argc, argv);
    }
  }
  if (argc == 1) {
    int _v = 0;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_eilig__Vector, SWIG_POINTER_NO_NULL | 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_Matrix__SWIG_2(self, argc, argv);
    }
  }
  if (argc == 1) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_eilig__Matrix, SWIG_POINTER_NO_NULL);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_Matrix__SWIG_5(self, argc, argv);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_Matrix__SWIG_3(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_new_Matrix__SWIG_4(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'new_Matrix'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    eilig::Matrix::Matrix()\n"
    "    eilig::Matrix::Matrix(eilig::Matrix const &)\n"
    "    eilig::Matrix::Matrix(eilig::Vector const &)\n"
    "    eilig::Matrix::Matrix(eilig::NumberRows,eilig::NumberCols)\n"
    "    eilig::Matrix::Matrix(eilig::NumberRows,eilig::NumberCols,eilig::Scalar)\n"
    "    eilig::Matrix::Matrix(eilig::Matrix &&)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_Matrix(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  eilig::Matrix *arg1 = (eilig::Matrix *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_eilig__Matrix, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Matrix" "', argument " "1"" of type '" "eilig::Matrix *""'"); 
  }
  arg1 = reinterpret_cast< eilig::Matrix * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Matrix_Resize__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  eilig::Matrix *arg1 = (eilig::Matrix *) 0 ;
  eilig::NumberRows arg2 ;
  eilig::NumberCols arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_eilig__Matrix, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Matrix_Resize" "', argument " "1"" of type '" "eilig::Matrix *""'"); 
  }
  arg1 = reinterpret_cast< eilig::Matrix * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Matrix_Resize" "', argument " "2"" of type '" "eilig::NumberRows""'");
  } 
  arg2 = static_cast< eilig::NumberRows >(val2);
  ecode3 = SWIG_AsVal_size_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Matrix_Resize" "', argument " "3"" of type '" "eilig::NumberCols""'");
  } 
  arg3 = static_cast< eilig::NumberCols >(val3);
  (arg1)->Resize(arg2,arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Matrix_Resize__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  eilig::Matrix *arg1 = (eilig::Matrix *) 0 ;
  eilig::NumberRows arg2 ;
  eilig::NumberCols arg3 ;
  eilig::Scalar arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  
  (void)self;
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_eilig__Matrix, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Matrix_Resize" "', argument " "1"" of type '" "eilig::Matrix *""'"); 
  }
  arg1 = reinterpret_cast< eilig::Matrix * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Matrix_Resize" "', argument " "2"" of type '" "eilig::NumberRows""'");
  } 
  arg2 = static_cast< eilig::NumberRows >(val2);
  ecode3 = SWIG_AsVal_size_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Matrix_Resize" "', argument " "3"" of type '" "eilig::NumberCols""'");
  } 
  arg3 = static_cast< eilig::NumberCols >(val3);
  ecode4 = SWIG_AsVal_double(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Matrix_Resize" "', argument " "4"" of type '" "eilig::Scalar""'");
  } 
  arg4 = static_cast< eilig::Scalar >(val4);
  (arg1)->Resize(arg2,arg3,arg4);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Matrix_Resize(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "Matrix_Resize", 0, 4, argv))) SWIG_fail;
  --argc;
  if (argc == 3) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_eilig__Matrix, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_Matrix_Resize__SWIG_0(self, argc, argv);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_eilig__Matrix, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_Matrix_Resize__SWIG_1(self, argc, argv);
          }
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'Matrix_Resize'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    eilig::Matrix::Resize(eilig::NumberRows,eilig::NumberCols)\n"
    "    eilig::Matrix::Resize(eilig::NumberRows,eilig::NumberCols,eilig::Scalar)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Matrix_Fill(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  eilig::Matrix *arg1 = (eilig::Matrix *) 0 ;
  eilig::Scalar arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "Matrix_Fill", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_eilig__Matrix, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Matrix_Fill" "', argument " "1"" of type '" "eilig::Matrix *""'"); 
  }
  arg1 = reinterpret_cast< eilig::Matrix * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Matrix_Fill" "', argument " "2"" of type '" "eilig::Scalar""'");
  } 
  arg2 = static_cast< eilig::Scalar >(val2);
  (arg1)->Fill(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Matrix___call____SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  eilig::Matrix *arg1 = (eilig::Matrix *) 0 ;
  eilig::Index arg2 ;
  eilig::Index arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  eilig::Scalar result;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_eilig__Matrix, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Matrix___call__" "', argument " "1"" of type '" "eilig::Matrix const *""'"); 
  }
  arg1 = reinterpret_cast< eilig::Matrix * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Matrix___call__" "', argument " "2"" of type '" "eilig::Index""'");
  } 
  arg2 = static_cast< eilig::Index >(val2);
  ecode3 = SWIG_AsVal_size_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Matrix___call__" "', argument " "3"" of type '" "eilig::Index""'");
  } 
  arg3 = static_cast< eilig::Index >(val3);
  result = (eilig::Scalar)((eilig::Matrix const *)arg1)->operator ()(arg2,arg3);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Matrix___call____SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  eilig::Matrix *arg1 = (eilig::Matrix *) 0 ;
  eilig::Index arg2 ;
  eilig::Index arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  eilig::Scalar *result = 0 ;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_eilig__Matrix, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Matrix___call__" "', argument " "1"" of type '" "eilig::Matrix *""'"); 
  }
  arg1 = reinterpret_cast< eilig::Matrix * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Matrix___call__" "', argument " "2"" of type '" "eilig::Index""'");
  } 
  arg2 = static_cast< eilig::Index >(val2);
  ecode3 = SWIG_AsVal_size_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Matrix___call__" "', argument " "3"" of type '" "eilig::Index""'");
  } 
  arg3 = static_cast< eilig::Index >(val3);
  result = (eilig::Scalar *) &(arg1)->operator ()(arg2,arg3);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_double, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Matrix___call____SWIG_2(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  eilig::Matrix *arg1 = (eilig::Matrix *) 0 ;
  eilig::Index arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  eilig::Scalar result;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_eilig__Matrix, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Matrix___call__" "', argument " "1"" of type '" "eilig::Matrix const *""'"); 
  }
  arg1 = reinterpret_cast< eilig::Matrix * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Matrix___call__" "', argument " "2"" of type '" "eilig::Index""'");
  } 
  arg2 = static_cast< eilig::Index >(val2);
  result = (eilig::Scalar)((eilig::Matrix const *)arg1)->operator ()(arg2);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Matrix___call____SWIG_3(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  eilig::Matrix *arg1 = (eilig::Matrix *) 0 ;
  eilig::Index arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  eilig::Scalar *result = 0 ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_eilig__Matrix, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Matrix___call__" "', argument " "1"" of type '" "eilig::Matrix *""'"); 
  }
  arg1 = reinterpret_cast< eilig::Matrix * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Matrix___call__" "', argument " "2"" of type '" "eilig::Index""'");
  } 
  arg2 = static_cast< eilig::Index >(val2);
  result = (eilig::Scalar *) &(arg1)->operator ()(arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_double, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Matrix___call__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "Matrix___call__", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_eilig__Matrix, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Matrix___call____SWIG_2(self, argc, argv);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_eilig__Matrix, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Matrix___call____SWIG_3(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_eilig__Matrix, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_Matrix___call____SWIG_0(self, argc, argv);
        }
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_eilig__Matrix, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_Matrix___call____SWIG_1(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'Matrix___call__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    eilig::Matrix::operator ()(eilig::Index,eilig::Index) const\n"
    "    eilig::Matrix::operator ()(eilig::Index,eilig::Index)\n"
    "    eilig::Matrix::operator ()(eilig::Index) const\n"
    "    eilig::Matrix::operator ()(eilig::Index)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Matrix___add____SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  eilig::Matrix *arg1 = (eilig::Matrix *) 0 ;
  eilig::Scalar arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  eilig::Matrix result;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_eilig__Matrix, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Matrix___add__" "', argument " "1"" of type '" "eilig::Matrix const *""'"); 
  }
  arg1 = reinterpret_cast< eilig::Matrix * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Matrix___add__" "', argument " "2"" of type '" "eilig::Scalar""'");
  } 
  arg2 = static_cast< eilig::Scalar >(val2);
  result = ((eilig::Matrix const *)arg1)->operator +(arg2);
  resultobj = SWIG_NewPointerObj((new eilig::Matrix(result)), SWIGTYPE_p_eilig__Matrix, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  if (PyErr_Occurred() && !PyErr_ExceptionMatches(PyExc_TypeError)) {
    return NULL;
  }
  PyErr_Clear();
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_Matrix___add____SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  eilig::Matrix *arg1 = (eilig::Matrix *) 0 ;
  eilig::Matrix *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  eilig::Matrix result;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_eilig__Matrix, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Matrix___add__" "', argument " "1"" of type '" "eilig::Matrix const *""'"); 
  }
  arg1 = reinterpret_cast< eilig::Matrix * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_eilig__Matrix,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Matrix___add__" "', argument " "2"" of type '" "eilig::Matrix const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Matrix___add__" "', argument " "2"" of type '" "eilig::Matrix const &""'"); 
  }
  arg2 = reinterpret_cast< eilig::Matrix * >(argp2);
  result = ((eilig::Matrix const *)arg1)->operator +((eilig::Matrix const &)*arg2);
  resultobj = SWIG_NewPointerObj((new eilig::Matrix(result)), SWIGTYPE_p_eilig__Matrix, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  if (PyErr_Occurred() && !PyErr_ExceptionMatches(PyExc_TypeError)) {
    return NULL;
  }
  PyErr_Clear();
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_Matrix___add__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "Matrix___add__", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_eilig__Matrix, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_eilig__Matrix, SWIG_POINTER_NO_NULL | 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Matrix___add____SWIG_1(self, argc, argv);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_eilig__Matrix, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Matrix___add____SWIG_0(self, argc, argv);
      }
    }
  }
  
fail:
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_Matrix___pos__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  eilig::Matrix *arg1 = (eilig::Matrix *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  eilig::Matrix result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_eilig__Matrix, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Matrix___pos__" "', argument " "1"" of type '" "eilig::Matrix const *""'"); 
  }
  arg1 = reinterpret_cast< eilig::Matrix * >(argp1);
  result = ((eilig::Matrix const *)arg1)->operator +();
  resultobj = SWIG_NewPointerObj((new eilig::Matrix(result)), SWIGTYPE_p_eilig__Matrix, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  if (PyErr_Occurred() && !PyErr_ExceptionMatches(PyExc_TypeError)) {
    return NULL;
  }
  PyErr_Clear();
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_Matrix___sub____SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  eilig::Matrix *arg1 = (eilig::Matrix *) 0 ;
  eilig::Scalar arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  eilig::Matrix result;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_eilig__Matrix, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Matrix___sub__" "', argument " "1"" of type '" "eilig::Matrix const *""'"); 
  }
  arg1 = reinterpret_cast< eilig::Matrix * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Matrix___sub__" "', argument " "2"" of type '" "eilig::Scalar""'");
  } 
  arg2 = static_cast< eilig::Scalar >(val2);
  result = ((eilig::Matrix const *)arg1)->operator -(arg2);
  resultobj = SWIG_NewPointerObj((new eilig::Matrix(result)), SWIGTYPE_p_eilig__Matrix, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  if (PyErr_Occurred() && !PyErr_ExceptionMatches(PyExc_TypeError)) {
    return NULL;
  }
  PyErr_Clear();
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_Matrix___sub____SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  eilig::Matrix *arg1 = (eilig::Matrix *) 0 ;
  eilig::Matrix *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  eilig::Matrix result;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_eilig__Matrix, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Matrix___sub__" "', argument " "1"" of type '" "eilig::Matrix const *""'"); 
  }
  arg1 = reinterpret_cast< eilig::Matrix * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_eilig__Matrix,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Matrix___sub__" "', argument " "2"" of type '" "eilig::Matrix const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Matrix___sub__" "', argument " "2"" of type '" "eilig::Matrix const &""'"); 
  }
  arg2 = reinterpret_cast< eilig::Matrix * >(argp2);
  result = ((eilig::Matrix const *)arg1)->operator -((eilig::Matrix const &)*arg2);
  resultobj = SWIG_NewPointerObj((new eilig::Matrix(result)), SWIGTYPE_p_eilig__Matrix, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  if (PyErr_Occurred() && !PyErr_ExceptionMatches(PyExc_TypeError)) {
    return NULL;
  }
  PyErr_Clear();
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_Matrix___sub__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "Matrix___sub__", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_eilig__Matrix, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_eilig__Matrix, SWIG_POINTER_NO_NULL | 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Matrix___sub____SWIG_1(self, argc, argv);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_eilig__Matrix, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Matrix___sub____SWIG_0(self, argc, argv);
      }
    }
  }
  
fail:
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_Matrix___neg__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  eilig::Matrix *arg1 = (eilig::Matrix *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  eilig::Matrix result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_eilig__Matrix, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Matrix___neg__" "', argument " "1"" of type '" "eilig::Matrix const *""'"); 
  }
  arg1 = reinterpret_cast< eilig::Matrix * >(argp1);
  result = ((eilig::Matrix const *)arg1)->operator -();
  resultobj = SWIG_NewPointerObj((new eilig::Matrix(result)), SWIGTYPE_p_eilig__Matrix, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  if (PyErr_Occurred() && !PyErr_ExceptionMatches(PyExc_TypeError)) {
    return NULL;
  }
  PyErr_Clear();
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_Matrix___mul____SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  eilig::Matrix *arg1 = (eilig::Matrix *) 0 ;
  eilig::Scalar arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  eilig::Matrix result;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_eilig__Matrix, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Matrix___mul__" "', argument " "1"" of type '" "eilig::Matrix const *""'"); 
  }
  arg1 = reinterpret_cast< eilig::Matrix * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Matrix___mul__" "', argument " "2"" of type '" "eilig::Scalar""'");
  } 
  arg2 = static_cast< eilig::Scalar >(val2);
  result = ((eilig::Matrix const *)arg1)->operator *(arg2);
  resultobj = SWIG_NewPointerObj((new eilig::Matrix(result)), SWIGTYPE_p_eilig__Matrix, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  if (PyErr_Occurred() && !PyErr_ExceptionMatches(PyExc_TypeError)) {
    return NULL;
  }
  PyErr_Clear();
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_Matrix___mul____SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  eilig::Matrix *arg1 = (eilig::Matrix *) 0 ;
  eilig::Matrix *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  eilig::Matrix result;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_eilig__Matrix, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Matrix___mul__" "', argument " "1"" of type '" "eilig::Matrix const *""'"); 
  }
  arg1 = reinterpret_cast< eilig::Matrix * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_eilig__Matrix,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Matrix___mul__" "', argument " "2"" of type '" "eilig::Matrix const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Matrix___mul__" "', argument " "2"" of type '" "eilig::Matrix const &""'"); 
  }
  arg2 = reinterpret_cast< eilig::Matrix * >(argp2);
  result = ((eilig::Matrix const *)arg1)->operator *((eilig::Matrix const &)*arg2);
  resultobj = SWIG_NewPointerObj((new eilig::Matrix(result)), SWIGTYPE_p_eilig__Matrix, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  if (PyErr_Occurred() && !PyErr_ExceptionMatches(PyExc_TypeError)) {
    return NULL;
  }
  PyErr_Clear();
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_Matrix___mul____SWIG_2(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  eilig::Matrix *arg1 = (eilig::Matrix *) 0 ;
  eilig::Vector *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  eilig::Vector result;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_eilig__Matrix, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Matrix___mul__" "', argument " "1"" of type '" "eilig::Matrix const *""'"); 
  }
  arg1 = reinterpret_cast< eilig::Matrix * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_eilig__Vector,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Matrix___mul__" "', argument " "2"" of type '" "eilig::Vector const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Matrix___mul__" "', argument " "2"" of type '" "eilig::Vector const &""'"); 
  }
  arg2 = reinterpret_cast< eilig::Vector * >(argp2);
  result = ((eilig::Matrix const *)arg1)->operator *((eilig::Vector const &)*arg2);
  resultobj = SWIG_NewPointerObj((new eilig::Vector(result)), SWIGTYPE_p_eilig__Vector, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  if (PyErr_Occurred() && !PyErr_ExceptionMatches(PyExc_TypeError)) {
    return NULL;
  }
  PyErr_Clear();
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_Matrix___mul__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "Matrix___mul__", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_eilig__Matrix, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_eilig__Matrix, SWIG_POINTER_NO_NULL | 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Matrix___mul____SWIG_1(self, argc, argv);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_eilig__Matrix, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_eilig__Vector, SWIG_POINTER_NO_NULL | 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Matrix___mul____SWIG_2(self, argc, argv);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_eilig__Matrix, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Matrix___mul____SWIG_0(self, argc, argv);
      }
    }
  }
  
fail:
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_Matrix_SwapRows(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  eilig::Matrix *arg1 = (eilig::Matrix *) 0 ;
  eilig::Index arg2 ;
  eilig::Index arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  eilig::Matrix *result = 0 ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "Matrix_SwapRows", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_eilig__Matrix, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Matrix_SwapRows" "', argument " "1"" of type '" "eilig::Matrix *""'"); 
  }
  arg1 = reinterpret_cast< eilig::Matrix * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Matrix_SwapRows" "', argument " "2"" of type '" "eilig::Index""'");
  } 
  arg2 = static_cast< eilig::Index >(val2);
  ecode3 = SWIG_AsVal_size_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Matrix_SwapRows" "', argument " "3"" of type '" "eilig::Index""'");
  } 
  arg3 = static_cast< eilig::Index >(val3);
  result = (eilig::Matrix *) &(arg1)->SwapRows(arg2,arg3);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_eilig__Matrix, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Matrix_SwapCols(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  eilig::Matrix *arg1 = (eilig::Matrix *) 0 ;
  eilig::Index arg2 ;
  eilig::Index arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  eilig::Matrix *result = 0 ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "Matrix_SwapCols", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_eilig__Matrix, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Matrix_SwapCols" "', argument " "1"" of type '" "eilig::Matrix *""'"); 
  }
  arg1 = reinterpret_cast< eilig::Matrix * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Matrix_SwapCols" "', argument " "2"" of type '" "eilig::Index""'");
  } 
  arg2 = static_cast< eilig::Index >(val2);
  ecode3 = SWIG_AsVal_size_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Matrix_SwapCols" "', argument " "3"" of type '" "eilig::Index""'");
  } 
  arg3 = static_cast< eilig::Index >(val3);
  result = (eilig::Matrix *) &(arg1)->SwapCols(arg2,arg3);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_eilig__Matrix, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Matrix_Transpose(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  eilig::Matrix *arg1 = (eilig::Matrix *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  eilig::Matrix result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_eilig__Matrix, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Matrix_Transpose" "', argument " "1"" of type '" "eilig::Matrix const *""'"); 
  }
  arg1 = reinterpret_cast< eilig::Matrix * >(argp1);
  result = ((eilig::Matrix const *)arg1)->Transpose();
  resultobj = SWIG_NewPointerObj((new eilig::Matrix(result)), SWIGTYPE_p_eilig__Matrix, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Matrix_Diagonal(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  eilig::Matrix *arg1 = (eilig::Matrix *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  eilig::Matrix result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_eilig__Matrix, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Matrix_Diagonal" "', argument " "1"" of type '" "eilig::Matrix const *""'"); 
  }
  arg1 = reinterpret_cast< eilig::Matrix * >(argp1);
  result = ((eilig::Matrix const *)arg1)->Diagonal();
  resultobj = SWIG_NewPointerObj((new eilig::Matrix(result)), SWIGTYPE_p_eilig__Matrix, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Matrix_Lower(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  eilig::Matrix *arg1 = (eilig::Matrix *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  eilig::Matrix result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "Matrix_Lower", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_eilig__Matrix, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Matrix_Lower" "', argument " "1"" of type '" "eilig::Matrix const *""'"); 
  }
  arg1 = reinterpret_cast< eilig::Matrix * >(argp1);
  ecode2 = SWIG_AsVal_bool(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Matrix_Lower" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  result = ((eilig::Matrix const *)arg1)->Lower(arg2);
  resultobj = SWIG_NewPointerObj((new eilig::Matrix(result)), SWIGTYPE_p_eilig__Matrix, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Matrix_LowerWithDiagonal(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  eilig::Matrix *arg1 = (eilig::Matrix *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  eilig::Matrix result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_eilig__Matrix, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Matrix_LowerWithDiagonal" "', argument " "1"" of type '" "eilig::Matrix const *""'"); 
  }
  arg1 = reinterpret_cast< eilig::Matrix * >(argp1);
  result = ((eilig::Matrix const *)arg1)->LowerWithDiagonal();
  resultobj = SWIG_NewPointerObj((new eilig::Matrix(result)), SWIGTYPE_p_eilig__Matrix, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Matrix_LowerWithoutDiagonal(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  eilig::Matrix *arg1 = (eilig::Matrix *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  eilig::Matrix result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_eilig__Matrix, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Matrix_LowerWithoutDiagonal" "', argument " "1"" of type '" "eilig::Matrix const *""'"); 
  }
  arg1 = reinterpret_cast< eilig::Matrix * >(argp1);
  result = ((eilig::Matrix const *)arg1)->LowerWithoutDiagonal();
  resultobj = SWIG_NewPointerObj((new eilig::Matrix(result)), SWIGTYPE_p_eilig__Matrix, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Matrix_Upper(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  eilig::Matrix *arg1 = (eilig::Matrix *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  eilig::Matrix result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "Matrix_Upper", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_eilig__Matrix, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Matrix_Upper" "', argument " "1"" of type '" "eilig::Matrix const *""'"); 
  }
  arg1 = reinterpret_cast< eilig::Matrix * >(argp1);
  ecode2 = SWIG_AsVal_bool(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Matrix_Upper" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  result = ((eilig::Matrix const *)arg1)->Upper(arg2);
  resultobj = SWIG_NewPointerObj((new eilig::Matrix(result)), SWIGTYPE_p_eilig__Matrix, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Matrix_UpperWithDiagonal(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  eilig::Matrix *arg1 = (eilig::Matrix *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  eilig::Matrix result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_eilig__Matrix, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Matrix_UpperWithDiagonal" "', argument " "1"" of type '" "eilig::Matrix const *""'"); 
  }
  arg1 = reinterpret_cast< eilig::Matrix * >(argp1);
  result = ((eilig::Matrix const *)arg1)->UpperWithDiagonal();
  resultobj = SWIG_NewPointerObj((new eilig::Matrix(result)), SWIGTYPE_p_eilig__Matrix, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Matrix_UpperWithoutDiagonal(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  eilig::Matrix *arg1 = (eilig::Matrix *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  eilig::Matrix result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_eilig__Matrix, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Matrix_UpperWithoutDiagonal" "', argument " "1"" of type '" "eilig::Matrix const *""'"); 
  }
  arg1 = reinterpret_cast< eilig::Matrix * >(argp1);
  result = ((eilig::Matrix const *)arg1)->UpperWithoutDiagonal();
  resultobj = SWIG_NewPointerObj((new eilig::Matrix(result)), SWIGTYPE_p_eilig__Matrix, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Matrix_Region__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  eilig::Matrix *arg1 = (eilig::Matrix *) 0 ;
  eilig::Index arg2 ;
  eilig::Index arg3 ;
  eilig::Index arg4 ;
  eilig::Index arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  size_t val4 ;
  int ecode4 = 0 ;
  size_t val5 ;
  int ecode5 = 0 ;
  eilig::Matrix result;
  
  (void)self;
  if ((nobjs < 5) || (nobjs > 5)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_eilig__Matrix, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Matrix_Region" "', argument " "1"" of type '" "eilig::Matrix const *""'"); 
  }
  arg1 = reinterpret_cast< eilig::Matrix * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Matrix_Region" "', argument " "2"" of type '" "eilig::Index""'");
  } 
  arg2 = static_cast< eilig::Index >(val2);
  ecode3 = SWIG_AsVal_size_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Matrix_Region" "', argument " "3"" of type '" "eilig::Index""'");
  } 
  arg3 = static_cast< eilig::Index >(val3);
  ecode4 = SWIG_AsVal_size_t(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Matrix_Region" "', argument " "4"" of type '" "eilig::Index""'");
  } 
  arg4 = static_cast< eilig::Index >(val4);
  ecode5 = SWIG_AsVal_size_t(swig_obj[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "Matrix_Region" "', argument " "5"" of type '" "eilig::Index""'");
  } 
  arg5 = static_cast< eilig::Index >(val5);
  result = ((eilig::Matrix const *)arg1)->Region(arg2,arg3,arg4,arg5);
  resultobj = SWIG_NewPointerObj((new eilig::Matrix(result)), SWIGTYPE_p_eilig__Matrix, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Matrix_Region__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  eilig::Matrix *arg1 = (eilig::Matrix *) 0 ;
  eilig::Index arg2 ;
  eilig::Index arg3 ;
  eilig::Index arg4 ;
  eilig::Index arg5 ;
  eilig::Matrix *arg6 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  size_t val4 ;
  int ecode4 = 0 ;
  size_t val5 ;
  int ecode5 = 0 ;
  void *argp6 = 0 ;
  int res6 = 0 ;
  
  (void)self;
  if ((nobjs < 6) || (nobjs > 6)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_eilig__Matrix, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Matrix_Region" "', argument " "1"" of type '" "eilig::Matrix *""'"); 
  }
  arg1 = reinterpret_cast< eilig::Matrix * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Matrix_Region" "', argument " "2"" of type '" "eilig::Index""'");
  } 
  arg2 = static_cast< eilig::Index >(val2);
  ecode3 = SWIG_AsVal_size_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Matrix_Region" "', argument " "3"" of type '" "eilig::Index""'");
  } 
  arg3 = static_cast< eilig::Index >(val3);
  ecode4 = SWIG_AsVal_size_t(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Matrix_Region" "', argument " "4"" of type '" "eilig::Index""'");
  } 
  arg4 = static_cast< eilig::Index >(val4);
  ecode5 = SWIG_AsVal_size_t(swig_obj[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "Matrix_Region" "', argument " "5"" of type '" "eilig::Index""'");
  } 
  arg5 = static_cast< eilig::Index >(val5);
  res6 = SWIG_ConvertPtr(swig_obj[5], &argp6, SWIGTYPE_p_eilig__Matrix,  0  | 0);
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "Matrix_Region" "', argument " "6"" of type '" "eilig::Matrix const &""'"); 
  }
  if (!argp6) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Matrix_Region" "', argument " "6"" of type '" "eilig::Matrix const &""'"); 
  }
  arg6 = reinterpret_cast< eilig::Matrix * >(argp6);
  (arg1)->Region(arg2,arg3,arg4,arg5,(eilig::Matrix const &)*arg6);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Matrix_Region(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[7] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "Matrix_Region", 0, 6, argv))) SWIG_fail;
  --argc;
  if (argc == 5) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_eilig__Matrix, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_size_t(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_size_t(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_Matrix_Region__SWIG_0(self, argc, argv);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_eilig__Matrix, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_size_t(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_size_t(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              int res = SWIG_ConvertPtr(argv[5], 0, SWIGTYPE_p_eilig__Matrix, SWIG_POINTER_NO_NULL | 0);
              _v = SWIG_CheckState(res);
              if (_v) {
                return _wrap_Matrix_Region__SWIG_1(self, argc, argv);
              }
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'Matrix_Region'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    eilig::Matrix::Region(eilig::Index,eilig::Index,eilig::Index,eilig::Index) const\n"
    "    eilig::Matrix::Region(eilig::Index,eilig::Index,eilig::Index,eilig::Index,eilig::Matrix const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Matrix_GetRows(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  eilig::Matrix *arg1 = (eilig::Matrix *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  eilig::NumberRows result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_eilig__Matrix, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Matrix_GetRows" "', argument " "1"" of type '" "eilig::Matrix const *""'"); 
  }
  arg1 = reinterpret_cast< eilig::Matrix * >(argp1);
  result = ((eilig::Matrix const *)arg1)->GetRows();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Matrix_GetCols(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  eilig::Matrix *arg1 = (eilig::Matrix *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  eilig::NumberCols result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_eilig__Matrix, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Matrix_GetCols" "', argument " "1"" of type '" "eilig::Matrix const *""'"); 
  }
  arg1 = reinterpret_cast< eilig::Matrix * >(argp1);
  result = ((eilig::Matrix const *)arg1)->GetCols();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Matrix_GetValue(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  eilig::Matrix *arg1 = (eilig::Matrix *) 0 ;
  eilig::Index arg2 ;
  eilig::Index arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  eilig::Scalar result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "Matrix_GetValue", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_eilig__Matrix, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Matrix_GetValue" "', argument " "1"" of type '" "eilig::Matrix const *""'"); 
  }
  arg1 = reinterpret_cast< eilig::Matrix * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Matrix_GetValue" "', argument " "2"" of type '" "eilig::Index""'");
  } 
  arg2 = static_cast< eilig::Index >(val2);
  ecode3 = SWIG_AsVal_size_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Matrix_GetValue" "', argument " "3"" of type '" "eilig::Index""'");
  } 
  arg3 = static_cast< eilig::Index >(val3);
  result = (eilig::Scalar)((eilig::Matrix const *)arg1)->GetValue(arg2,arg3);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Matrix_GetData(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  eilig::Matrix *arg1 = (eilig::Matrix *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  eilig::Scalars *result = 0 ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_eilig__Matrix, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Matrix_GetData" "', argument " "1"" of type '" "eilig::Matrix const *""'"); 
  }
  arg1 = reinterpret_cast< eilig::Matrix * >(argp1);
  result = (eilig::Scalars *) &((eilig::Matrix const *)arg1)->GetData();
  resultobj = swig::from(static_cast< std::vector< double,std::allocator< double > > >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Matrix_SetValue(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  eilig::Matrix *arg1 = (eilig::Matrix *) 0 ;
  eilig::Index arg2 ;
  eilig::Index arg3 ;
  eilig::Scalar arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  PyObject *swig_obj[4] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "Matrix_SetValue", 4, 4, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_eilig__Matrix, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Matrix_SetValue" "', argument " "1"" of type '" "eilig::Matrix *""'"); 
  }
  arg1 = reinterpret_cast< eilig::Matrix * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Matrix_SetValue" "', argument " "2"" of type '" "eilig::Index""'");
  } 
  arg2 = static_cast< eilig::Index >(val2);
  ecode3 = SWIG_AsVal_size_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Matrix_SetValue" "', argument " "3"" of type '" "eilig::Index""'");
  } 
  arg3 = static_cast< eilig::Index >(val3);
  ecode4 = SWIG_AsVal_double(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Matrix_SetValue" "', argument " "4"" of type '" "eilig::Scalar""'");
  } 
  arg4 = static_cast< eilig::Scalar >(val4);
  (arg1)->SetValue(arg2,arg3,arg4);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Matrix___str__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  eilig::Matrix *arg1 = (eilig::Matrix *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  eilig::String result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_eilig__Matrix, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Matrix___str__" "', argument " "1"" of type '" "eilig::Matrix const *""'"); 
  }
  arg1 = reinterpret_cast< eilig::Matrix * >(argp1);
  result = eilig_Matrix___str__((eilig::Matrix const *)arg1);
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Matrix___radd__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  eilig::Matrix *arg1 = (eilig::Matrix *) 0 ;
  eilig::Scalar arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  eilig::Matrix result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "Matrix___radd__", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_eilig__Matrix, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Matrix___radd__" "', argument " "1"" of type '" "eilig::Matrix const *""'"); 
  }
  arg1 = reinterpret_cast< eilig::Matrix * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Matrix___radd__" "', argument " "2"" of type '" "eilig::Scalar""'");
  } 
  arg2 = static_cast< eilig::Scalar >(val2);
  result = eilig_Matrix___radd__((eilig::Matrix const *)arg1,arg2);
  resultobj = SWIG_NewPointerObj((new eilig::Matrix(result)), SWIGTYPE_p_eilig__Matrix, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  if (PyErr_Occurred() && !PyErr_ExceptionMatches(PyExc_TypeError)) {
    return NULL;
  }
  PyErr_Clear();
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_Matrix___rsub__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  eilig::Matrix *arg1 = (eilig::Matrix *) 0 ;
  eilig::Scalar arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  eilig::Matrix result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "Matrix___rsub__", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_eilig__Matrix, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Matrix___rsub__" "', argument " "1"" of type '" "eilig::Matrix const *""'"); 
  }
  arg1 = reinterpret_cast< eilig::Matrix * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Matrix___rsub__" "', argument " "2"" of type '" "eilig::Scalar""'");
  } 
  arg2 = static_cast< eilig::Scalar >(val2);
  result = eilig_Matrix___rsub__((eilig::Matrix const *)arg1,arg2);
  resultobj = SWIG_NewPointerObj((new eilig::Matrix(result)), SWIGTYPE_p_eilig__Matrix, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  if (PyErr_Occurred() && !PyErr_ExceptionMatches(PyExc_TypeError)) {
    return NULL;
  }
  PyErr_Clear();
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_Matrix___rmul__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  eilig::Matrix *arg1 = (eilig::Matrix *) 0 ;
  eilig::Scalar arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  eilig::Matrix result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "Matrix___rmul__", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_eilig__Matrix, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Matrix___rmul__" "', argument " "1"" of type '" "eilig::Matrix const *""'"); 
  }
  arg1 = reinterpret_cast< eilig::Matrix * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Matrix___rmul__" "', argument " "2"" of type '" "eilig::Scalar""'");
  } 
  arg2 = static_cast< eilig::Scalar >(val2);
  result = eilig_Matrix___rmul__((eilig::Matrix const *)arg1,arg2);
  resultobj = SWIG_NewPointerObj((new eilig::Matrix(result)), SWIGTYPE_p_eilig__Matrix, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  if (PyErr_Occurred() && !PyErr_ExceptionMatches(PyExc_TypeError)) {
    return NULL;
  }
  PyErr_Clear();
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *Matrix_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_eilig__Matrix, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *Matrix_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_Ellpack__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **SWIGUNUSEDPARM(swig_obj)) {
  PyObject *resultobj = 0;
  eilig::Ellpack *result = 0 ;
  
  (void)self;
  if ((nobjs < 0) || (nobjs > 0)) SWIG_fail;
  result = (eilig::Ellpack *)new eilig::Ellpack();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_eilig__Ellpack, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Ellpack__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  eilig::Ellpack *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  eilig::Ellpack *result = 0 ;
  
  (void)self;
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_eilig__Ellpack,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Ellpack" "', argument " "1"" of type '" "eilig::Ellpack const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Ellpack" "', argument " "1"" of type '" "eilig::Ellpack const &""'"); 
  }
  arg1 = reinterpret_cast< eilig::Ellpack * >(argp1);
  result = (eilig::Ellpack *)new eilig::Ellpack((eilig::Ellpack const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_eilig__Ellpack, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Ellpack__SWIG_2(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  eilig::Matrix *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  eilig::Ellpack *result = 0 ;
  
  (void)self;
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_eilig__Matrix,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Ellpack" "', argument " "1"" of type '" "eilig::Matrix const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Ellpack" "', argument " "1"" of type '" "eilig::Matrix const &""'"); 
  }
  arg1 = reinterpret_cast< eilig::Matrix * >(argp1);
  result = (eilig::Ellpack *)new eilig::Ellpack((eilig::Matrix const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_eilig__Ellpack, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Ellpack__SWIG_3(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  eilig::NumberRows arg1 ;
  eilig::NumberCols arg2 ;
  size_t val1 ;
  int ecode1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  eilig::Ellpack *result = 0 ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_Ellpack" "', argument " "1"" of type '" "eilig::NumberRows""'");
  } 
  arg1 = static_cast< eilig::NumberRows >(val1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_Ellpack" "', argument " "2"" of type '" "eilig::NumberCols""'");
  } 
  arg2 = static_cast< eilig::NumberCols >(val2);
  result = (eilig::Ellpack *)new eilig::Ellpack(arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_eilig__Ellpack, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Ellpack__SWIG_4(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  eilig::NumberRows arg1 ;
  eilig::NumberCols arg2 ;
  eilig::Scalar arg3 ;
  size_t val1 ;
  int ecode1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  eilig::Ellpack *result = 0 ;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_Ellpack" "', argument " "1"" of type '" "eilig::NumberRows""'");
  } 
  arg1 = static_cast< eilig::NumberRows >(val1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_Ellpack" "', argument " "2"" of type '" "eilig::NumberCols""'");
  } 
  arg2 = static_cast< eilig::NumberCols >(val2);
  ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_Ellpack" "', argument " "3"" of type '" "eilig::Scalar""'");
  } 
  arg3 = static_cast< eilig::Scalar >(val3);
  result = (eilig::Ellpack *)new eilig::Ellpack(arg1,arg2,arg3);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_eilig__Ellpack, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Ellpack__SWIG_5(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  eilig::Ellpack *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::unique_ptr< eilig::Ellpack > rvrdeleter1 ;
  eilig::Ellpack *result = 0 ;
  
  (void)self;
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_eilig__Ellpack, SWIG_POINTER_RELEASE |  0 );
  if (!SWIG_IsOK(res1)) {
    if (res1 == SWIG_ERROR_RELEASE_NOT_OWNED) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Ellpack" "', cannot release ownership as memory is not owned for argument " "1"" of type '" "eilig::Ellpack &&""'");
    } else {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Ellpack" "', argument " "1"" of type '" "eilig::Ellpack &&""'"); 
    }
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Ellpack" "', argument " "1"" of type '" "eilig::Ellpack &&""'"); 
  }
  arg1 = reinterpret_cast< eilig::Ellpack * >(argp1);
  rvrdeleter1.reset(arg1);
  result = (eilig::Ellpack *)new eilig::Ellpack((eilig::Ellpack &&)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_eilig__Ellpack, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Ellpack(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "new_Ellpack", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 0) {
    return _wrap_new_Ellpack__SWIG_0(self, argc, argv);
  }
  if (argc == 1) {
    int _v = 0;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_eilig__Ellpack, SWIG_POINTER_NO_NULL | 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_Ellpack__SWIG_1(self, argc, argv);
    }
  }
  if (argc == 1) {
    int _v = 0;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_eilig__Matrix, SWIG_POINTER_NO_NULL | 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_Ellpack__SWIG_2(self, argc, argv);
    }
  }
  if (argc == 1) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_eilig__Ellpack, SWIG_POINTER_NO_NULL);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_Ellpack__SWIG_5(self, argc, argv);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_Ellpack__SWIG_3(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_new_Ellpack__SWIG_4(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'new_Ellpack'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    eilig::Ellpack::Ellpack()\n"
    "    eilig::Ellpack::Ellpack(eilig::Ellpack const &)\n"
    "    eilig::Ellpack::Ellpack(eilig::Matrix const &)\n"
    "    eilig::Ellpack::Ellpack(eilig::NumberRows,eilig::NumberCols)\n"
    "    eilig::Ellpack::Ellpack(eilig::NumberRows,eilig::NumberCols,eilig::Scalar)\n"
    "    eilig::Ellpack::Ellpack(eilig::Ellpack &&)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_Ellpack(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  eilig::Ellpack *arg1 = (eilig::Ellpack *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_eilig__Ellpack, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Ellpack" "', argument " "1"" of type '" "eilig::Ellpack *""'"); 
  }
  arg1 = reinterpret_cast< eilig::Ellpack * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Ellpack_IsUsed__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  eilig::Ellpack *arg1 = (eilig::Ellpack *) 0 ;
  eilig::Index arg2 ;
  eilig::Index arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  bool result;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_eilig__Ellpack, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Ellpack_IsUsed" "', argument " "1"" of type '" "eilig::Ellpack const *""'"); 
  }
  arg1 = reinterpret_cast< eilig::Ellpack * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Ellpack_IsUsed" "', argument " "2"" of type '" "eilig::Index""'");
  } 
  arg2 = static_cast< eilig::Index >(val2);
  ecode3 = SWIG_AsVal_size_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Ellpack_IsUsed" "', argument " "3"" of type '" "eilig::Index""'");
  } 
  arg3 = static_cast< eilig::Index >(val3);
  result = (bool)((eilig::Ellpack const *)arg1)->IsUsed(arg2,arg3);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Ellpack_IsUsed__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  eilig::Ellpack *arg1 = (eilig::Ellpack *) 0 ;
  eilig::Index arg2 ;
  eilig::Index arg3 ;
  eilig::Index *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  bool result;
  
  (void)self;
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_eilig__Ellpack, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Ellpack_IsUsed" "', argument " "1"" of type '" "eilig::Ellpack const *""'"); 
  }
  arg1 = reinterpret_cast< eilig::Ellpack * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Ellpack_IsUsed" "', argument " "2"" of type '" "eilig::Index""'");
  } 
  arg2 = static_cast< eilig::Index >(val2);
  ecode3 = SWIG_AsVal_size_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Ellpack_IsUsed" "', argument " "3"" of type '" "eilig::Index""'");
  } 
  arg3 = static_cast< eilig::Index >(val3);
  res4 = SWIG_ConvertPtr(swig_obj[3], &argp4, SWIGTYPE_p_size_t,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "Ellpack_IsUsed" "', argument " "4"" of type '" "eilig::Index &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Ellpack_IsUsed" "', argument " "4"" of type '" "eilig::Index &""'"); 
  }
  arg4 = reinterpret_cast< eilig::Index * >(argp4);
  result = (bool)((eilig::Ellpack const *)arg1)->IsUsed(arg2,arg3,*arg4);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Ellpack_IsUsed(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "Ellpack_IsUsed", 0, 4, argv))) SWIG_fail;
  --argc;
  if (argc == 3) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_eilig__Ellpack, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_Ellpack_IsUsed__SWIG_0(self, argc, argv);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_eilig__Ellpack, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_size_t, SWIG_POINTER_NO_NULL);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_Ellpack_IsUsed__SWIG_1(self, argc, argv);
          }
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'Ellpack_IsUsed'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    eilig::Ellpack::IsUsed(eilig::Index,eilig::Index) const\n"
    "    eilig::Ellpack::IsUsed(eilig::Index,eilig::Index,eilig::Index &) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Ellpack_Add(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  eilig::Ellpack *arg1 = (eilig::Ellpack *) 0 ;
  eilig::Index arg2 ;
  eilig::Index arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  eilig::Index result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "Ellpack_Add", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_eilig__Ellpack, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Ellpack_Add" "', argument " "1"" of type '" "eilig::Ellpack *""'"); 
  }
  arg1 = reinterpret_cast< eilig::Ellpack * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Ellpack_Add" "', argument " "2"" of type '" "eilig::Index""'");
  } 
  arg2 = static_cast< eilig::Index >(val2);
  ecode3 = SWIG_AsVal_size_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Ellpack_Add" "', argument " "3"" of type '" "eilig::Index""'");
  } 
  arg3 = static_cast< eilig::Index >(val3);
  result = (arg1)->Add(arg2,arg3);
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Ellpack_Remove(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  eilig::Ellpack *arg1 = (eilig::Ellpack *) 0 ;
  eilig::Index arg2 ;
  eilig::Index arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "Ellpack_Remove", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_eilig__Ellpack, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Ellpack_Remove" "', argument " "1"" of type '" "eilig::Ellpack *""'"); 
  }
  arg1 = reinterpret_cast< eilig::Ellpack * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Ellpack_Remove" "', argument " "2"" of type '" "eilig::Index""'");
  } 
  arg2 = static_cast< eilig::Index >(val2);
  ecode3 = SWIG_AsVal_size_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Ellpack_Remove" "', argument " "3"" of type '" "eilig::Index""'");
  } 
  arg3 = static_cast< eilig::Index >(val3);
  (arg1)->Remove(arg2,arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Ellpack_Resize__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  eilig::Ellpack *arg1 = (eilig::Ellpack *) 0 ;
  eilig::NumberRows arg2 ;
  eilig::NumberCols arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_eilig__Ellpack, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Ellpack_Resize" "', argument " "1"" of type '" "eilig::Ellpack *""'"); 
  }
  arg1 = reinterpret_cast< eilig::Ellpack * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Ellpack_Resize" "', argument " "2"" of type '" "eilig::NumberRows""'");
  } 
  arg2 = static_cast< eilig::NumberRows >(val2);
  ecode3 = SWIG_AsVal_size_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Ellpack_Resize" "', argument " "3"" of type '" "eilig::NumberCols""'");
  } 
  arg3 = static_cast< eilig::NumberCols >(val3);
  (arg1)->Resize(arg2,arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Ellpack_Resize__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  eilig::Ellpack *arg1 = (eilig::Ellpack *) 0 ;
  eilig::NumberRows arg2 ;
  eilig::NumberCols arg3 ;
  eilig::Scalar arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  
  (void)self;
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_eilig__Ellpack, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Ellpack_Resize" "', argument " "1"" of type '" "eilig::Ellpack *""'"); 
  }
  arg1 = reinterpret_cast< eilig::Ellpack * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Ellpack_Resize" "', argument " "2"" of type '" "eilig::NumberRows""'");
  } 
  arg2 = static_cast< eilig::NumberRows >(val2);
  ecode3 = SWIG_AsVal_size_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Ellpack_Resize" "', argument " "3"" of type '" "eilig::NumberCols""'");
  } 
  arg3 = static_cast< eilig::NumberCols >(val3);
  ecode4 = SWIG_AsVal_double(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Ellpack_Resize" "', argument " "4"" of type '" "eilig::Scalar""'");
  } 
  arg4 = static_cast< eilig::Scalar >(val4);
  (arg1)->Resize(arg2,arg3,arg4);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Ellpack_Resize(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "Ellpack_Resize", 0, 4, argv))) SWIG_fail;
  --argc;
  if (argc == 3) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_eilig__Ellpack, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_Ellpack_Resize__SWIG_0(self, argc, argv);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_eilig__Ellpack, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_Ellpack_Resize__SWIG_1(self, argc, argv);
          }
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'Ellpack_Resize'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    eilig::Ellpack::Resize(eilig::NumberRows,eilig::NumberCols)\n"
    "    eilig::Ellpack::Resize(eilig::NumberRows,eilig::NumberCols,eilig::Scalar)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Ellpack_Fill(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  eilig::Ellpack *arg1 = (eilig::Ellpack *) 0 ;
  eilig::Scalar arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "Ellpack_Fill", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_eilig__Ellpack, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Ellpack_Fill" "', argument " "1"" of type '" "eilig::Ellpack *""'"); 
  }
  arg1 = reinterpret_cast< eilig::Ellpack * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Ellpack_Fill" "', argument " "2"" of type '" "eilig::Scalar""'");
  } 
  arg2 = static_cast< eilig::Scalar >(val2);
  (arg1)->Fill(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Ellpack_Dump(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  eilig::Ellpack *arg1 = (eilig::Ellpack *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_eilig__Ellpack, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Ellpack_Dump" "', argument " "1"" of type '" "eilig::Ellpack const *""'"); 
  }
  arg1 = reinterpret_cast< eilig::Ellpack * >(argp1);
  ((eilig::Ellpack const *)arg1)->Dump();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Ellpack___call____SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  eilig::Ellpack *arg1 = (eilig::Ellpack *) 0 ;
  eilig::Index arg2 ;
  eilig::Index arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  eilig::Scalar result;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_eilig__Ellpack, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Ellpack___call__" "', argument " "1"" of type '" "eilig::Ellpack const *""'"); 
  }
  arg1 = reinterpret_cast< eilig::Ellpack * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Ellpack___call__" "', argument " "2"" of type '" "eilig::Index""'");
  } 
  arg2 = static_cast< eilig::Index >(val2);
  ecode3 = SWIG_AsVal_size_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Ellpack___call__" "', argument " "3"" of type '" "eilig::Index""'");
  } 
  arg3 = static_cast< eilig::Index >(val3);
  result = (eilig::Scalar)((eilig::Ellpack const *)arg1)->operator ()(arg2,arg3);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Ellpack___call____SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  eilig::Ellpack *arg1 = (eilig::Ellpack *) 0 ;
  eilig::Index arg2 ;
  eilig::Index arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  eilig::Scalar *result = 0 ;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_eilig__Ellpack, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Ellpack___call__" "', argument " "1"" of type '" "eilig::Ellpack *""'"); 
  }
  arg1 = reinterpret_cast< eilig::Ellpack * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Ellpack___call__" "', argument " "2"" of type '" "eilig::Index""'");
  } 
  arg2 = static_cast< eilig::Index >(val2);
  ecode3 = SWIG_AsVal_size_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Ellpack___call__" "', argument " "3"" of type '" "eilig::Index""'");
  } 
  arg3 = static_cast< eilig::Index >(val3);
  result = (eilig::Scalar *) &(arg1)->operator ()(arg2,arg3);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_double, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Ellpack___call__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "Ellpack___call__", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 3) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_eilig__Ellpack, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_Ellpack___call____SWIG_0(self, argc, argv);
        }
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_eilig__Ellpack, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_Ellpack___call____SWIG_1(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'Ellpack___call__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    eilig::Ellpack::operator ()(eilig::Index,eilig::Index) const\n"
    "    eilig::Ellpack::operator ()(eilig::Index,eilig::Index)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Ellpack___add____SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  eilig::Ellpack *arg1 = (eilig::Ellpack *) 0 ;
  eilig::Scalar arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  eilig::Ellpack result;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_eilig__Ellpack, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Ellpack___add__" "', argument " "1"" of type '" "eilig::Ellpack const *""'"); 
  }
  arg1 = reinterpret_cast< eilig::Ellpack * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Ellpack___add__" "', argument " "2"" of type '" "eilig::Scalar""'");
  } 
  arg2 = static_cast< eilig::Scalar >(val2);
  result = ((eilig::Ellpack const *)arg1)->operator +(arg2);
  resultobj = SWIG_NewPointerObj((new eilig::Ellpack(result)), SWIGTYPE_p_eilig__Ellpack, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  if (PyErr_Occurred() && !PyErr_ExceptionMatches(PyExc_TypeError)) {
    return NULL;
  }
  PyErr_Clear();
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_Ellpack___add____SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  eilig::Ellpack *arg1 = (eilig::Ellpack *) 0 ;
  eilig::Ellpack *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  eilig::Ellpack result;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_eilig__Ellpack, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Ellpack___add__" "', argument " "1"" of type '" "eilig::Ellpack const *""'"); 
  }
  arg1 = reinterpret_cast< eilig::Ellpack * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_eilig__Ellpack,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Ellpack___add__" "', argument " "2"" of type '" "eilig::Ellpack const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Ellpack___add__" "', argument " "2"" of type '" "eilig::Ellpack const &""'"); 
  }
  arg2 = reinterpret_cast< eilig::Ellpack * >(argp2);
  result = ((eilig::Ellpack const *)arg1)->operator +((eilig::Ellpack const &)*arg2);
  resultobj = SWIG_NewPointerObj((new eilig::Ellpack(result)), SWIGTYPE_p_eilig__Ellpack, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  if (PyErr_Occurred() && !PyErr_ExceptionMatches(PyExc_TypeError)) {
    return NULL;
  }
  PyErr_Clear();
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_Ellpack___add__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "Ellpack___add__", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_eilig__Ellpack, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_eilig__Ellpack, SWIG_POINTER_NO_NULL | 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Ellpack___add____SWIG_1(self, argc, argv);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_eilig__Ellpack, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Ellpack___add____SWIG_0(self, argc, argv);
      }
    }
  }
  
fail:
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_Ellpack___pos__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  eilig::Ellpack *arg1 = (eilig::Ellpack *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  eilig::Ellpack result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_eilig__Ellpack, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Ellpack___pos__" "', argument " "1"" of type '" "eilig::Ellpack const *""'"); 
  }
  arg1 = reinterpret_cast< eilig::Ellpack * >(argp1);
  result = ((eilig::Ellpack const *)arg1)->operator +();
  resultobj = SWIG_NewPointerObj((new eilig::Ellpack(result)), SWIGTYPE_p_eilig__Ellpack, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  if (PyErr_Occurred() && !PyErr_ExceptionMatches(PyExc_TypeError)) {
    return NULL;
  }
  PyErr_Clear();
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_Ellpack___sub____SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  eilig::Ellpack *arg1 = (eilig::Ellpack *) 0 ;
  eilig::Scalar arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  eilig::Ellpack result;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_eilig__Ellpack, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Ellpack___sub__" "', argument " "1"" of type '" "eilig::Ellpack const *""'"); 
  }
  arg1 = reinterpret_cast< eilig::Ellpack * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Ellpack___sub__" "', argument " "2"" of type '" "eilig::Scalar""'");
  } 
  arg2 = static_cast< eilig::Scalar >(val2);
  result = ((eilig::Ellpack const *)arg1)->operator -(arg2);
  resultobj = SWIG_NewPointerObj((new eilig::Ellpack(result)), SWIGTYPE_p_eilig__Ellpack, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  if (PyErr_Occurred() && !PyErr_ExceptionMatches(PyExc_TypeError)) {
    return NULL;
  }
  PyErr_Clear();
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_Ellpack___sub____SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  eilig::Ellpack *arg1 = (eilig::Ellpack *) 0 ;
  eilig::Ellpack *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  eilig::Ellpack result;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_eilig__Ellpack, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Ellpack___sub__" "', argument " "1"" of type '" "eilig::Ellpack const *""'"); 
  }
  arg1 = reinterpret_cast< eilig::Ellpack * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_eilig__Ellpack,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Ellpack___sub__" "', argument " "2"" of type '" "eilig::Ellpack const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Ellpack___sub__" "', argument " "2"" of type '" "eilig::Ellpack const &""'"); 
  }
  arg2 = reinterpret_cast< eilig::Ellpack * >(argp2);
  result = ((eilig::Ellpack const *)arg1)->operator -((eilig::Ellpack const &)*arg2);
  resultobj = SWIG_NewPointerObj((new eilig::Ellpack(result)), SWIGTYPE_p_eilig__Ellpack, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  if (PyErr_Occurred() && !PyErr_ExceptionMatches(PyExc_TypeError)) {
    return NULL;
  }
  PyErr_Clear();
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_Ellpack___sub__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "Ellpack___sub__", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_eilig__Ellpack, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_eilig__Ellpack, SWIG_POINTER_NO_NULL | 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Ellpack___sub____SWIG_1(self, argc, argv);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_eilig__Ellpack, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Ellpack___sub____SWIG_0(self, argc, argv);
      }
    }
  }
  
fail:
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_Ellpack___neg__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  eilig::Ellpack *arg1 = (eilig::Ellpack *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  eilig::Ellpack result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_eilig__Ellpack, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Ellpack___neg__" "', argument " "1"" of type '" "eilig::Ellpack const *""'"); 
  }
  arg1 = reinterpret_cast< eilig::Ellpack * >(argp1);
  result = ((eilig::Ellpack const *)arg1)->operator -();
  resultobj = SWIG_NewPointerObj((new eilig::Ellpack(result)), SWIGTYPE_p_eilig__Ellpack, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  if (PyErr_Occurred() && !PyErr_ExceptionMatches(PyExc_TypeError)) {
    return NULL;
  }
  PyErr_Clear();
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_Ellpack___mul____SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  eilig::Ellpack *arg1 = (eilig::Ellpack *) 0 ;
  eilig::Scalar arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  eilig::Ellpack result;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_eilig__Ellpack, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Ellpack___mul__" "', argument " "1"" of type '" "eilig::Ellpack const *""'"); 
  }
  arg1 = reinterpret_cast< eilig::Ellpack * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Ellpack___mul__" "', argument " "2"" of type '" "eilig::Scalar""'");
  } 
  arg2 = static_cast< eilig::Scalar >(val2);
  result = ((eilig::Ellpack const *)arg1)->operator *(arg2);
  resultobj = SWIG_NewPointerObj((new eilig::Ellpack(result)), SWIGTYPE_p_eilig__Ellpack, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  if (PyErr_Occurred() && !PyErr_ExceptionMatches(PyExc_TypeError)) {
    return NULL;
  }
  PyErr_Clear();
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_Ellpack___mul____SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  eilig::Ellpack *arg1 = (eilig::Ellpack *) 0 ;
  eilig::Ellpack *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  eilig::Ellpack result;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_eilig__Ellpack, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Ellpack___mul__" "', argument " "1"" of type '" "eilig::Ellpack const *""'"); 
  }
  arg1 = reinterpret_cast< eilig::Ellpack * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_eilig__Ellpack,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Ellpack___mul__" "', argument " "2"" of type '" "eilig::Ellpack const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Ellpack___mul__" "', argument " "2"" of type '" "eilig::Ellpack const &""'"); 
  }
  arg2 = reinterpret_cast< eilig::Ellpack * >(argp2);
  result = ((eilig::Ellpack const *)arg1)->operator *((eilig::Ellpack const &)*arg2);
  resultobj = SWIG_NewPointerObj((new eilig::Ellpack(result)), SWIGTYPE_p_eilig__Ellpack, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  if (PyErr_Occurred() && !PyErr_ExceptionMatches(PyExc_TypeError)) {
    return NULL;
  }
  PyErr_Clear();
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_Ellpack___mul____SWIG_2(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  eilig::Ellpack *arg1 = (eilig::Ellpack *) 0 ;
  eilig::Vector *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  eilig::Vector result;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_eilig__Ellpack, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Ellpack___mul__" "', argument " "1"" of type '" "eilig::Ellpack const *""'"); 
  }
  arg1 = reinterpret_cast< eilig::Ellpack * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_eilig__Vector,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Ellpack___mul__" "', argument " "2"" of type '" "eilig::Vector const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Ellpack___mul__" "', argument " "2"" of type '" "eilig::Vector const &""'"); 
  }
  arg2 = reinterpret_cast< eilig::Vector * >(argp2);
  result = ((eilig::Ellpack const *)arg1)->operator *((eilig::Vector const &)*arg2);
  resultobj = SWIG_NewPointerObj((new eilig::Vector(result)), SWIGTYPE_p_eilig__Vector, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  if (PyErr_Occurred() && !PyErr_ExceptionMatches(PyExc_TypeError)) {
    return NULL;
  }
  PyErr_Clear();
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_Ellpack___mul__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "Ellpack___mul__", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_eilig__Ellpack, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_eilig__Ellpack, SWIG_POINTER_NO_NULL | 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Ellpack___mul____SWIG_1(self, argc, argv);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_eilig__Ellpack, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_eilig__Vector, SWIG_POINTER_NO_NULL | 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Ellpack___mul____SWIG_2(self, argc, argv);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_eilig__Ellpack, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Ellpack___mul____SWIG_0(self, argc, argv);
      }
    }
  }
  
fail:
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_Ellpack_SwapRows(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  eilig::Ellpack *arg1 = (eilig::Ellpack *) 0 ;
  eilig::Index arg2 ;
  eilig::Index arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  eilig::Ellpack *result = 0 ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "Ellpack_SwapRows", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_eilig__Ellpack, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Ellpack_SwapRows" "', argument " "1"" of type '" "eilig::Ellpack *""'"); 
  }
  arg1 = reinterpret_cast< eilig::Ellpack * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Ellpack_SwapRows" "', argument " "2"" of type '" "eilig::Index""'");
  } 
  arg2 = static_cast< eilig::Index >(val2);
  ecode3 = SWIG_AsVal_size_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Ellpack_SwapRows" "', argument " "3"" of type '" "eilig::Index""'");
  } 
  arg3 = static_cast< eilig::Index >(val3);
  result = (eilig::Ellpack *) &(arg1)->SwapRows(arg2,arg3);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_eilig__Ellpack, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Ellpack_SwapCols(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  eilig::Ellpack *arg1 = (eilig::Ellpack *) 0 ;
  eilig::Index arg2 ;
  eilig::Index arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  eilig::Ellpack *result = 0 ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "Ellpack_SwapCols", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_eilig__Ellpack, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Ellpack_SwapCols" "', argument " "1"" of type '" "eilig::Ellpack *""'"); 
  }
  arg1 = reinterpret_cast< eilig::Ellpack * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Ellpack_SwapCols" "', argument " "2"" of type '" "eilig::Index""'");
  } 
  arg2 = static_cast< eilig::Index >(val2);
  ecode3 = SWIG_AsVal_size_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Ellpack_SwapCols" "', argument " "3"" of type '" "eilig::Index""'");
  } 
  arg3 = static_cast< eilig::Index >(val3);
  result = (eilig::Ellpack *) &(arg1)->SwapCols(arg2,arg3);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_eilig__Ellpack, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Ellpack_Transpose(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  eilig::Ellpack *arg1 = (eilig::Ellpack *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  eilig::Ellpack result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_eilig__Ellpack, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Ellpack_Transpose" "', argument " "1"" of type '" "eilig::Ellpack const *""'"); 
  }
  arg1 = reinterpret_cast< eilig::Ellpack * >(argp1);
  result = ((eilig::Ellpack const *)arg1)->Transpose();
  resultobj = SWIG_NewPointerObj((new eilig::Ellpack(result)), SWIGTYPE_p_eilig__Ellpack, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Ellpack_Diagonal(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  eilig::Ellpack *arg1 = (eilig::Ellpack *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  eilig::Ellpack result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_eilig__Ellpack, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Ellpack_Diagonal" "', argument " "1"" of type '" "eilig::Ellpack const *""'"); 
  }
  arg1 = reinterpret_cast< eilig::Ellpack * >(argp1);
  result = ((eilig::Ellpack const *)arg1)->Diagonal();
  resultobj = SWIG_NewPointerObj((new eilig::Ellpack(result)), SWIGTYPE_p_eilig__Ellpack, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Ellpack_Lower(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  eilig::Ellpack *arg1 = (eilig::Ellpack *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  eilig::Ellpack result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "Ellpack_Lower", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_eilig__Ellpack, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Ellpack_Lower" "', argument " "1"" of type '" "eilig::Ellpack const *""'"); 
  }
  arg1 = reinterpret_cast< eilig::Ellpack * >(argp1);
  ecode2 = SWIG_AsVal_bool(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Ellpack_Lower" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  result = ((eilig::Ellpack const *)arg1)->Lower(arg2);
  resultobj = SWIG_NewPointerObj((new eilig::Ellpack(result)), SWIGTYPE_p_eilig__Ellpack, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Ellpack_LowerWithDiagonal(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  eilig::Ellpack *arg1 = (eilig::Ellpack *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  eilig::Ellpack result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_eilig__Ellpack, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Ellpack_LowerWithDiagonal" "', argument " "1"" of type '" "eilig::Ellpack const *""'"); 
  }
  arg1 = reinterpret_cast< eilig::Ellpack * >(argp1);
  result = ((eilig::Ellpack const *)arg1)->LowerWithDiagonal();
  resultobj = SWIG_NewPointerObj((new eilig::Ellpack(result)), SWIGTYPE_p_eilig__Ellpack, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Ellpack_LowerWithoutDiagonal(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  eilig::Ellpack *arg1 = (eilig::Ellpack *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  eilig::Ellpack result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_eilig__Ellpack, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Ellpack_LowerWithoutDiagonal" "', argument " "1"" of type '" "eilig::Ellpack const *""'"); 
  }
  arg1 = reinterpret_cast< eilig::Ellpack * >(argp1);
  result = ((eilig::Ellpack const *)arg1)->LowerWithoutDiagonal();
  resultobj = SWIG_NewPointerObj((new eilig::Ellpack(result)), SWIGTYPE_p_eilig__Ellpack, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Ellpack_Upper(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  eilig::Ellpack *arg1 = (eilig::Ellpack *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  eilig::Ellpack result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "Ellpack_Upper", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_eilig__Ellpack, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Ellpack_Upper" "', argument " "1"" of type '" "eilig::Ellpack const *""'"); 
  }
  arg1 = reinterpret_cast< eilig::Ellpack * >(argp1);
  ecode2 = SWIG_AsVal_bool(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Ellpack_Upper" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  result = ((eilig::Ellpack const *)arg1)->Upper(arg2);
  resultobj = SWIG_NewPointerObj((new eilig::Ellpack(result)), SWIGTYPE_p_eilig__Ellpack, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Ellpack_UpperWithDiagonal(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  eilig::Ellpack *arg1 = (eilig::Ellpack *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  eilig::Ellpack result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_eilig__Ellpack, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Ellpack_UpperWithDiagonal" "', argument " "1"" of type '" "eilig::Ellpack const *""'"); 
  }
  arg1 = reinterpret_cast< eilig::Ellpack * >(argp1);
  result = ((eilig::Ellpack const *)arg1)->UpperWithDiagonal();
  resultobj = SWIG_NewPointerObj((new eilig::Ellpack(result)), SWIGTYPE_p_eilig__Ellpack, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Ellpack_UpperWithoutDiagonal(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  eilig::Ellpack *arg1 = (eilig::Ellpack *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  eilig::Ellpack result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_eilig__Ellpack, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Ellpack_UpperWithoutDiagonal" "', argument " "1"" of type '" "eilig::Ellpack const *""'"); 
  }
  arg1 = reinterpret_cast< eilig::Ellpack * >(argp1);
  result = ((eilig::Ellpack const *)arg1)->UpperWithoutDiagonal();
  resultobj = SWIG_NewPointerObj((new eilig::Ellpack(result)), SWIGTYPE_p_eilig__Ellpack, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Ellpack_Region__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  eilig::Ellpack *arg1 = (eilig::Ellpack *) 0 ;
  eilig::Index arg2 ;
  eilig::Index arg3 ;
  eilig::Index arg4 ;
  eilig::Index arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  size_t val4 ;
  int ecode4 = 0 ;
  size_t val5 ;
  int ecode5 = 0 ;
  eilig::Ellpack result;
  
  (void)self;
  if ((nobjs < 5) || (nobjs > 5)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_eilig__Ellpack, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Ellpack_Region" "', argument " "1"" of type '" "eilig::Ellpack const *""'"); 
  }
  arg1 = reinterpret_cast< eilig::Ellpack * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Ellpack_Region" "', argument " "2"" of type '" "eilig::Index""'");
  } 
  arg2 = static_cast< eilig::Index >(val2);
  ecode3 = SWIG_AsVal_size_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Ellpack_Region" "', argument " "3"" of type '" "eilig::Index""'");
  } 
  arg3 = static_cast< eilig::Index >(val3);
  ecode4 = SWIG_AsVal_size_t(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Ellpack_Region" "', argument " "4"" of type '" "eilig::Index""'");
  } 
  arg4 = static_cast< eilig::Index >(val4);
  ecode5 = SWIG_AsVal_size_t(swig_obj[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "Ellpack_Region" "', argument " "5"" of type '" "eilig::Index""'");
  } 
  arg5 = static_cast< eilig::Index >(val5);
  result = ((eilig::Ellpack const *)arg1)->Region(arg2,arg3,arg4,arg5);
  resultobj = SWIG_NewPointerObj((new eilig::Ellpack(result)), SWIGTYPE_p_eilig__Ellpack, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Ellpack_Region__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  eilig::Ellpack *arg1 = (eilig::Ellpack *) 0 ;
  eilig::Index arg2 ;
  eilig::Index arg3 ;
  eilig::Index arg4 ;
  eilig::Index arg5 ;
  eilig::Ellpack *arg6 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  size_t val4 ;
  int ecode4 = 0 ;
  size_t val5 ;
  int ecode5 = 0 ;
  void *argp6 = 0 ;
  int res6 = 0 ;
  
  (void)self;
  if ((nobjs < 6) || (nobjs > 6)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_eilig__Ellpack, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Ellpack_Region" "', argument " "1"" of type '" "eilig::Ellpack *""'"); 
  }
  arg1 = reinterpret_cast< eilig::Ellpack * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Ellpack_Region" "', argument " "2"" of type '" "eilig::Index""'");
  } 
  arg2 = static_cast< eilig::Index >(val2);
  ecode3 = SWIG_AsVal_size_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Ellpack_Region" "', argument " "3"" of type '" "eilig::Index""'");
  } 
  arg3 = static_cast< eilig::Index >(val3);
  ecode4 = SWIG_AsVal_size_t(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Ellpack_Region" "', argument " "4"" of type '" "eilig::Index""'");
  } 
  arg4 = static_cast< eilig::Index >(val4);
  ecode5 = SWIG_AsVal_size_t(swig_obj[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "Ellpack_Region" "', argument " "5"" of type '" "eilig::Index""'");
  } 
  arg5 = static_cast< eilig::Index >(val5);
  res6 = SWIG_ConvertPtr(swig_obj[5], &argp6, SWIGTYPE_p_eilig__Ellpack,  0  | 0);
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "Ellpack_Region" "', argument " "6"" of type '" "eilig::Ellpack const &""'"); 
  }
  if (!argp6) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Ellpack_Region" "', argument " "6"" of type '" "eilig::Ellpack const &""'"); 
  }
  arg6 = reinterpret_cast< eilig::Ellpack * >(argp6);
  (arg1)->Region(arg2,arg3,arg4,arg5,(eilig::Ellpack const &)*arg6);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Ellpack_Region(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[7] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "Ellpack_Region", 0, 6, argv))) SWIG_fail;
  --argc;
  if (argc == 5) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_eilig__Ellpack, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_size_t(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_size_t(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_Ellpack_Region__SWIG_0(self, argc, argv);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_eilig__Ellpack, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_size_t(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_size_t(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              int res = SWIG_ConvertPtr(argv[5], 0, SWIGTYPE_p_eilig__Ellpack, SWIG_POINTER_NO_NULL | 0);
              _v = SWIG_CheckState(res);
              if (_v) {
                return _wrap_Ellpack_Region__SWIG_1(self, argc, argv);
              }
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'Ellpack_Region'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    eilig::Ellpack::Region(eilig::Index,eilig::Index,eilig::Index,eilig::Index) const\n"
    "    eilig::Ellpack::Region(eilig::Index,eilig::Index,eilig::Index,eilig::Index,eilig::Ellpack const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Ellpack_GetRows(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  eilig::Ellpack *arg1 = (eilig::Ellpack *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  eilig::NumberRows result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_eilig__Ellpack, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Ellpack_GetRows" "', argument " "1"" of type '" "eilig::Ellpack const *""'"); 
  }
  arg1 = reinterpret_cast< eilig::Ellpack * >(argp1);
  result = ((eilig::Ellpack const *)arg1)->GetRows();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Ellpack_GetCols(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  eilig::Ellpack *arg1 = (eilig::Ellpack *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  eilig::NumberCols result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_eilig__Ellpack, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Ellpack_GetCols" "', argument " "1"" of type '" "eilig::Ellpack const *""'"); 
  }
  arg1 = reinterpret_cast< eilig::Ellpack * >(argp1);
  result = ((eilig::Ellpack const *)arg1)->GetCols();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Ellpack_GetWidth(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  eilig::Ellpack *arg1 = (eilig::Ellpack *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  eilig::NumberCols result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_eilig__Ellpack, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Ellpack_GetWidth" "', argument " "1"" of type '" "eilig::Ellpack const *""'"); 
  }
  arg1 = reinterpret_cast< eilig::Ellpack * >(argp1);
  result = ((eilig::Ellpack const *)arg1)->GetWidth();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Ellpack_GetValue(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  eilig::Ellpack *arg1 = (eilig::Ellpack *) 0 ;
  eilig::Index arg2 ;
  eilig::Index arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  eilig::Scalar result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "Ellpack_GetValue", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_eilig__Ellpack, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Ellpack_GetValue" "', argument " "1"" of type '" "eilig::Ellpack const *""'"); 
  }
  arg1 = reinterpret_cast< eilig::Ellpack * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Ellpack_GetValue" "', argument " "2"" of type '" "eilig::Index""'");
  } 
  arg2 = static_cast< eilig::Index >(val2);
  ecode3 = SWIG_AsVal_size_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Ellpack_GetValue" "', argument " "3"" of type '" "eilig::Index""'");
  } 
  arg3 = static_cast< eilig::Index >(val3);
  result = (eilig::Scalar)((eilig::Ellpack const *)arg1)->GetValue(arg2,arg3);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Ellpack_GetCount(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  eilig::Ellpack *arg1 = (eilig::Ellpack *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  eilig::Indices *result = 0 ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_eilig__Ellpack, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Ellpack_GetCount" "', argument " "1"" of type '" "eilig::Ellpack const *""'"); 
  }
  arg1 = reinterpret_cast< eilig::Ellpack * >(argp1);
  result = (eilig::Indices *) &((eilig::Ellpack const *)arg1)->GetCount();
  resultobj = swig::from(static_cast< std::vector< ::size_t,std::allocator< ::size_t > > >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Ellpack_GetPosition(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  eilig::Ellpack *arg1 = (eilig::Ellpack *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  eilig::Indices *result = 0 ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_eilig__Ellpack, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Ellpack_GetPosition" "', argument " "1"" of type '" "eilig::Ellpack const *""'"); 
  }
  arg1 = reinterpret_cast< eilig::Ellpack * >(argp1);
  result = (eilig::Indices *) &((eilig::Ellpack const *)arg1)->GetPosition();
  resultobj = swig::from(static_cast< std::vector< ::size_t,std::allocator< ::size_t > > >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Ellpack_GetData(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  eilig::Ellpack *arg1 = (eilig::Ellpack *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  eilig::Scalars *result = 0 ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_eilig__Ellpack, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Ellpack_GetData" "', argument " "1"" of type '" "eilig::Ellpack const *""'"); 
  }
  arg1 = reinterpret_cast< eilig::Ellpack * >(argp1);
  result = (eilig::Scalars *) &((eilig::Ellpack const *)arg1)->GetData();
  resultobj = swig::from(static_cast< std::vector< double,std::allocator< double > > >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Ellpack_SetValue(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  eilig::Ellpack *arg1 = (eilig::Ellpack *) 0 ;
  eilig::Index arg2 ;
  eilig::Index arg3 ;
  eilig::Scalar arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  PyObject *swig_obj[4] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "Ellpack_SetValue", 4, 4, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_eilig__Ellpack, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Ellpack_SetValue" "', argument " "1"" of type '" "eilig::Ellpack *""'"); 
  }
  arg1 = reinterpret_cast< eilig::Ellpack * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Ellpack_SetValue" "', argument " "2"" of type '" "eilig::Index""'");
  } 
  arg2 = static_cast< eilig::Index >(val2);
  ecode3 = SWIG_AsVal_size_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Ellpack_SetValue" "', argument " "3"" of type '" "eilig::Index""'");
  } 
  arg3 = static_cast< eilig::Index >(val3);
  ecode4 = SWIG_AsVal_double(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Ellpack_SetValue" "', argument " "4"" of type '" "eilig::Scalar""'");
  } 
  arg4 = static_cast< eilig::Scalar >(val4);
  (arg1)->SetValue(arg2,arg3,arg4);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Ellpack___str__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  eilig::Ellpack *arg1 = (eilig::Ellpack *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  eilig::String result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_eilig__Ellpack, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Ellpack___str__" "', argument " "1"" of type '" "eilig::Ellpack const *""'"); 
  }
  arg1 = reinterpret_cast< eilig::Ellpack * >(argp1);
  result = eilig_Ellpack___str__((eilig::Ellpack const *)arg1);
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Ellpack___radd__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  eilig::Ellpack *arg1 = (eilig::Ellpack *) 0 ;
  eilig::Scalar arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  eilig::Ellpack result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "Ellpack___radd__", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_eilig__Ellpack, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Ellpack___radd__" "', argument " "1"" of type '" "eilig::Ellpack const *""'"); 
  }
  arg1 = reinterpret_cast< eilig::Ellpack * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Ellpack___radd__" "', argument " "2"" of type '" "eilig::Scalar""'");
  } 
  arg2 = static_cast< eilig::Scalar >(val2);
  result = eilig_Ellpack___radd__((eilig::Ellpack const *)arg1,arg2);
  resultobj = SWIG_NewPointerObj((new eilig::Ellpack(result)), SWIGTYPE_p_eilig__Ellpack, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  if (PyErr_Occurred() && !PyErr_ExceptionMatches(PyExc_TypeError)) {
    return NULL;
  }
  PyErr_Clear();
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_Ellpack___rsub__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  eilig::Ellpack *arg1 = (eilig::Ellpack *) 0 ;
  eilig::Scalar arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  eilig::Ellpack result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "Ellpack___rsub__", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_eilig__Ellpack, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Ellpack___rsub__" "', argument " "1"" of type '" "eilig::Ellpack const *""'"); 
  }
  arg1 = reinterpret_cast< eilig::Ellpack * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Ellpack___rsub__" "', argument " "2"" of type '" "eilig::Scalar""'");
  } 
  arg2 = static_cast< eilig::Scalar >(val2);
  result = eilig_Ellpack___rsub__((eilig::Ellpack const *)arg1,arg2);
  resultobj = SWIG_NewPointerObj((new eilig::Ellpack(result)), SWIGTYPE_p_eilig__Ellpack, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  if (PyErr_Occurred() && !PyErr_ExceptionMatches(PyExc_TypeError)) {
    return NULL;
  }
  PyErr_Clear();
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_Ellpack___rmul__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  eilig::Ellpack *arg1 = (eilig::Ellpack *) 0 ;
  eilig::Scalar arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  eilig::Ellpack result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "Ellpack___rmul__", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_eilig__Ellpack, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Ellpack___rmul__" "', argument " "1"" of type '" "eilig::Ellpack const *""'"); 
  }
  arg1 = reinterpret_cast< eilig::Ellpack * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Ellpack___rmul__" "', argument " "2"" of type '" "eilig::Scalar""'");
  } 
  arg2 = static_cast< eilig::Scalar >(val2);
  result = eilig_Ellpack___rmul__((eilig::Ellpack const *)arg1,arg2);
  resultobj = SWIG_NewPointerObj((new eilig::Ellpack(result)), SWIGTYPE_p_eilig__Ellpack, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  if (PyErr_Occurred() && !PyErr_ExceptionMatches(PyExc_TypeError)) {
    return NULL;
  }
  PyErr_Clear();
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *Ellpack_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_eilig__Ellpack, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *Ellpack_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_NormMax(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  eilig::Vector *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  eilig::Scalar result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_eilig__Vector,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NormMax" "', argument " "1"" of type '" "eilig::Vector const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NormMax" "', argument " "1"" of type '" "eilig::Vector const &""'"); 
  }
  arg1 = reinterpret_cast< eilig::Vector * >(argp1);
  result = (eilig::Scalar)eilig::NormMax((eilig::Vector const &)*arg1);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NormP__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  eilig::Vector *arg1 = 0 ;
  eilig::Scalar arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  eilig::Scalar result;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_eilig__Vector,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NormP" "', argument " "1"" of type '" "eilig::Vector const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NormP" "', argument " "1"" of type '" "eilig::Vector const &""'"); 
  }
  arg1 = reinterpret_cast< eilig::Vector * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "NormP" "', argument " "2"" of type '" "eilig::Scalar""'");
  } 
  arg2 = static_cast< eilig::Scalar >(val2);
  result = (eilig::Scalar)eilig::NormP((eilig::Vector const &)*arg1,arg2);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NormP__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  eilig::Matrix *arg1 = 0 ;
  eilig::Scalar arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  eilig::Scalar result;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_eilig__Matrix,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NormP" "', argument " "1"" of type '" "eilig::Matrix const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NormP" "', argument " "1"" of type '" "eilig::Matrix const &""'"); 
  }
  arg1 = reinterpret_cast< eilig::Matrix * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "NormP" "', argument " "2"" of type '" "eilig::Scalar""'");
  } 
  arg2 = static_cast< eilig::Scalar >(val2);
  result = (eilig::Scalar)eilig::NormP((eilig::Matrix const &)*arg1,arg2);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NormP__SWIG_2(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  eilig::Ellpack *arg1 = 0 ;
  eilig::Scalar arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  eilig::Scalar result;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_eilig__Ellpack,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NormP" "', argument " "1"" of type '" "eilig::Ellpack const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NormP" "', argument " "1"" of type '" "eilig::Ellpack const &""'"); 
  }
  arg1 = reinterpret_cast< eilig::Ellpack * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "NormP" "', argument " "2"" of type '" "eilig::Scalar""'");
  } 
  arg2 = static_cast< eilig::Scalar >(val2);
  result = (eilig::Scalar)eilig::NormP((eilig::Ellpack const &)*arg1,arg2);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NormP(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "NormP", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_eilig__Vector, SWIG_POINTER_NO_NULL | 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_NormP__SWIG_0(self, argc, argv);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_eilig__Matrix, SWIG_POINTER_NO_NULL | 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_NormP__SWIG_1(self, argc, argv);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_eilig__Ellpack, SWIG_POINTER_NO_NULL | 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_NormP__SWIG_2(self, argc, argv);
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'NormP'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    eilig::NormP(eilig::Vector const &,eilig::Scalar)\n"
    "    eilig::NormP(eilig::Matrix const &,eilig::Scalar)\n"
    "    eilig::NormP(eilig::Ellpack const &,eilig::Scalar)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_NormP2__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  eilig::Vector *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  eilig::Scalar result;
  
  (void)self;
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_eilig__Vector,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NormP2" "', argument " "1"" of type '" "eilig::Vector const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NormP2" "', argument " "1"" of type '" "eilig::Vector const &""'"); 
  }
  arg1 = reinterpret_cast< eilig::Vector * >(argp1);
  result = (eilig::Scalar)eilig::NormP2((eilig::Vector const &)*arg1);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NormP2__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  eilig::Matrix *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  eilig::Scalar result;
  
  (void)self;
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_eilig__Matrix,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NormP2" "', argument " "1"" of type '" "eilig::Matrix const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NormP2" "', argument " "1"" of type '" "eilig::Matrix const &""'"); 
  }
  arg1 = reinterpret_cast< eilig::Matrix * >(argp1);
  result = (eilig::Scalar)eilig::NormP2((eilig::Matrix const &)*arg1);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NormP2__SWIG_2(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  eilig::Ellpack *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  eilig::Scalar result;
  
  (void)self;
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_eilig__Ellpack,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NormP2" "', argument " "1"" of type '" "eilig::Ellpack const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NormP2" "', argument " "1"" of type '" "eilig::Ellpack const &""'"); 
  }
  arg1 = reinterpret_cast< eilig::Ellpack * >(argp1);
  result = (eilig::Scalar)eilig::NormP2((eilig::Ellpack const &)*arg1);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NormP2(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "NormP2", 0, 1, argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    int _v = 0;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_eilig__Vector, SWIG_POINTER_NO_NULL | 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_NormP2__SWIG_0(self, argc, argv);
    }
  }
  if (argc == 1) {
    int _v = 0;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_eilig__Matrix, SWIG_POINTER_NO_NULL | 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_NormP2__SWIG_1(self, argc, argv);
    }
  }
  if (argc == 1) {
    int _v = 0;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_eilig__Ellpack, SWIG_POINTER_NO_NULL | 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_NormP2__SWIG_2(self, argc, argv);
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'NormP2'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    eilig::NormP2(eilig::Vector const &)\n"
    "    eilig::NormP2(eilig::Matrix const &)\n"
    "    eilig::NormP2(eilig::Ellpack const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Dot(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  eilig::Vector *arg1 = 0 ;
  eilig::Vector *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  eilig::Scalar result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "Dot", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_eilig__Vector,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Dot" "', argument " "1"" of type '" "eilig::Vector const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Dot" "', argument " "1"" of type '" "eilig::Vector const &""'"); 
  }
  arg1 = reinterpret_cast< eilig::Vector * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_eilig__Vector,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Dot" "', argument " "2"" of type '" "eilig::Vector const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Dot" "', argument " "2"" of type '" "eilig::Vector const &""'"); 
  }
  arg2 = reinterpret_cast< eilig::Vector * >(argp2);
  result = (eilig::Scalar)eilig::Dot((eilig::Vector const &)*arg1,(eilig::Vector const &)*arg2);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Cross(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  eilig::Vector *arg1 = 0 ;
  eilig::Vector *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  eilig::Vector result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "Cross", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_eilig__Vector,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Cross" "', argument " "1"" of type '" "eilig::Vector const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Cross" "', argument " "1"" of type '" "eilig::Vector const &""'"); 
  }
  arg1 = reinterpret_cast< eilig::Vector * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_eilig__Vector,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Cross" "', argument " "2"" of type '" "eilig::Vector const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Cross" "', argument " "2"" of type '" "eilig::Vector const &""'"); 
  }
  arg2 = reinterpret_cast< eilig::Vector * >(argp2);
  result = eilig::Cross((eilig::Vector const &)*arg1,(eilig::Vector const &)*arg2);
  resultobj = SWIG_NewPointerObj((new eilig::Vector(result)), SWIGTYPE_p_eilig__Vector, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DeterminantLUP(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  eilig::Matrix *arg1 = 0 ;
  eilig::Indices *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject *swig_obj[2] ;
  eilig::Scalar result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "DeterminantLUP", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_eilig__Matrix,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DeterminantLUP" "', argument " "1"" of type '" "eilig::Matrix const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DeterminantLUP" "', argument " "1"" of type '" "eilig::Matrix const &""'"); 
  }
  arg1 = reinterpret_cast< eilig::Matrix * >(argp1);
  {
    std::vector< ::size_t,std::allocator< ::size_t > > *ptr = (std::vector< ::size_t,std::allocator< ::size_t > > *)0;
    res2 = swig::asptr(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DeterminantLUP" "', argument " "2"" of type '" "eilig::Indices const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DeterminantLUP" "', argument " "2"" of type '" "eilig::Indices const &""'"); 
    }
    arg2 = ptr;
  }
  result = (eilig::Scalar)eilig::DeterminantLUP((eilig::Matrix const &)*arg1,(std::vector< ::size_t,std::allocator< ::size_t > > const &)*arg2);
  resultobj = SWIG_From_double(static_cast< double >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Determinant(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  eilig::Matrix *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  eilig::Scalar result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_eilig__Matrix,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Determinant" "', argument " "1"" of type '" "eilig::Matrix const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Determinant" "', argument " "1"" of type '" "eilig::Matrix const &""'"); 
  }
  arg1 = reinterpret_cast< eilig::Matrix * >(argp1);
  result = (eilig::Scalar)eilig::Determinant((eilig::Matrix const &)*arg1);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Inverse(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  eilig::Matrix *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  eilig::Matrix result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_eilig__Matrix,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Inverse" "', argument " "1"" of type '" "eilig::Matrix const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Inverse" "', argument " "1"" of type '" "eilig::Matrix const &""'"); 
  }
  arg1 = reinterpret_cast< eilig::Matrix * >(argp1);
  result = eilig::Inverse((eilig::Matrix const &)*arg1);
  resultobj = SWIG_NewPointerObj((new eilig::Matrix(result)), SWIGTYPE_p_eilig__Matrix, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScaleByVector(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  eilig::Matrix *arg1 = 0 ;
  eilig::Vector *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  eilig::Matrix result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "ScaleByVector", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_eilig__Matrix,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScaleByVector" "', argument " "1"" of type '" "eilig::Matrix const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ScaleByVector" "', argument " "1"" of type '" "eilig::Matrix const &""'"); 
  }
  arg1 = reinterpret_cast< eilig::Matrix * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_eilig__Vector,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ScaleByVector" "', argument " "2"" of type '" "eilig::Vector const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ScaleByVector" "', argument " "2"" of type '" "eilig::Vector const &""'"); 
  }
  arg2 = reinterpret_cast< eilig::Vector * >(argp2);
  result = eilig::ScaleByVector((eilig::Matrix const &)*arg1,(eilig::Vector const &)*arg2);
  resultobj = SWIG_NewPointerObj((new eilig::Matrix(result)), SWIGTYPE_p_eilig__Matrix, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Solve(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  eilig::Matrix *arg1 = 0 ;
  eilig::Vector *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  eilig::Vector result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "Solve", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_eilig__Matrix,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Solve" "', argument " "1"" of type '" "eilig::Matrix const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Solve" "', argument " "1"" of type '" "eilig::Matrix const &""'"); 
  }
  arg1 = reinterpret_cast< eilig::Matrix * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_eilig__Vector,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Solve" "', argument " "2"" of type '" "eilig::Vector const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Solve" "', argument " "2"" of type '" "eilig::Vector const &""'"); 
  }
  arg2 = reinterpret_cast< eilig::Vector * >(argp2);
  result = eilig::Solve((eilig::Matrix const &)*arg1,(eilig::Vector const &)*arg2);
  resultobj = SWIG_NewPointerObj((new eilig::Vector(result)), SWIGTYPE_p_eilig__Vector, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DecomposeLUP(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  eilig::Matrix *arg1 = 0 ;
  eilig::Indices *arg2 = 0 ;
  eilig::Matrix *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject *swig_obj[3] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "DecomposeLUP", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_eilig__Matrix,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DecomposeLUP" "', argument " "1"" of type '" "eilig::Matrix &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DecomposeLUP" "', argument " "1"" of type '" "eilig::Matrix &""'"); 
  }
  arg1 = reinterpret_cast< eilig::Matrix * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_std__vectorT_std__size_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DecomposeLUP" "', argument " "2"" of type '" "eilig::Indices &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DecomposeLUP" "', argument " "2"" of type '" "eilig::Indices &""'"); 
  }
  arg2 = reinterpret_cast< eilig::Indices * >(argp2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_eilig__Matrix,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "DecomposeLUP" "', argument " "3"" of type '" "eilig::Matrix const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DecomposeLUP" "', argument " "3"" of type '" "eilig::Matrix const &""'"); 
  }
  arg3 = reinterpret_cast< eilig::Matrix * >(argp3);
  eilig::DecomposeLUP(*arg1,*arg2,(eilig::Matrix const &)*arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_InverseLUP(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  eilig::Matrix *arg1 = 0 ;
  eilig::Matrix *arg2 = 0 ;
  eilig::Indices *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject *swig_obj[3] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "InverseLUP", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_eilig__Matrix,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InverseLUP" "', argument " "1"" of type '" "eilig::Matrix &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "InverseLUP" "', argument " "1"" of type '" "eilig::Matrix &""'"); 
  }
  arg1 = reinterpret_cast< eilig::Matrix * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_eilig__Matrix,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "InverseLUP" "', argument " "2"" of type '" "eilig::Matrix const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "InverseLUP" "', argument " "2"" of type '" "eilig::Matrix const &""'"); 
  }
  arg2 = reinterpret_cast< eilig::Matrix * >(argp2);
  {
    std::vector< ::size_t,std::allocator< ::size_t > > *ptr = (std::vector< ::size_t,std::allocator< ::size_t > > *)0;
    res3 = swig::asptr(swig_obj[2], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "InverseLUP" "', argument " "3"" of type '" "eilig::Indices const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "InverseLUP" "', argument " "3"" of type '" "eilig::Indices const &""'"); 
    }
    arg3 = ptr;
  }
  eilig::InverseLUP(*arg1,(eilig::Matrix const &)*arg2,(std::vector< ::size_t,std::allocator< ::size_t > > const &)*arg3);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_DiagonalLinearSystem__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  eilig::Vector *arg1 = 0 ;
  eilig::Matrix *arg2 = 0 ;
  eilig::Vector *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_eilig__Vector,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DiagonalLinearSystem" "', argument " "1"" of type '" "eilig::Vector &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DiagonalLinearSystem" "', argument " "1"" of type '" "eilig::Vector &""'"); 
  }
  arg1 = reinterpret_cast< eilig::Vector * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_eilig__Matrix,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DiagonalLinearSystem" "', argument " "2"" of type '" "eilig::Matrix const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DiagonalLinearSystem" "', argument " "2"" of type '" "eilig::Matrix const &""'"); 
  }
  arg2 = reinterpret_cast< eilig::Matrix * >(argp2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_eilig__Vector,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "DiagonalLinearSystem" "', argument " "3"" of type '" "eilig::Vector const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DiagonalLinearSystem" "', argument " "3"" of type '" "eilig::Vector const &""'"); 
  }
  arg3 = reinterpret_cast< eilig::Vector * >(argp3);
  eilig::DiagonalLinearSystem(*arg1,(eilig::Matrix const &)*arg2,(eilig::Vector const &)*arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DiagonalLinearSystem__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  eilig::Vector *arg1 = 0 ;
  eilig::Ellpack *arg2 = 0 ;
  eilig::Vector *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_eilig__Vector,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DiagonalLinearSystem" "', argument " "1"" of type '" "eilig::Vector &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DiagonalLinearSystem" "', argument " "1"" of type '" "eilig::Vector &""'"); 
  }
  arg1 = reinterpret_cast< eilig::Vector * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_eilig__Ellpack,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DiagonalLinearSystem" "', argument " "2"" of type '" "eilig::Ellpack const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DiagonalLinearSystem" "', argument " "2"" of type '" "eilig::Ellpack const &""'"); 
  }
  arg2 = reinterpret_cast< eilig::Ellpack * >(argp2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_eilig__Vector,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "DiagonalLinearSystem" "', argument " "3"" of type '" "eilig::Vector const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DiagonalLinearSystem" "', argument " "3"" of type '" "eilig::Vector const &""'"); 
  }
  arg3 = reinterpret_cast< eilig::Vector * >(argp3);
  eilig::DiagonalLinearSystem(*arg1,(eilig::Ellpack const &)*arg2,(eilig::Vector const &)*arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DiagonalLinearSystem(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "DiagonalLinearSystem", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 3) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_eilig__Vector, SWIG_POINTER_NO_NULL);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_eilig__Matrix, SWIG_POINTER_NO_NULL | 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_eilig__Vector, SWIG_POINTER_NO_NULL | 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_DiagonalLinearSystem__SWIG_0(self, argc, argv);
        }
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_eilig__Vector, SWIG_POINTER_NO_NULL);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_eilig__Ellpack, SWIG_POINTER_NO_NULL | 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_eilig__Vector, SWIG_POINTER_NO_NULL | 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_DiagonalLinearSystem__SWIG_1(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'DiagonalLinearSystem'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    eilig::DiagonalLinearSystem(eilig::Vector &,eilig::Matrix const &,eilig::Vector const &)\n"
    "    eilig::DiagonalLinearSystem(eilig::Vector &,eilig::Ellpack const &,eilig::Vector const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ForwardLinearSystem__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  eilig::Vector *arg1 = 0 ;
  eilig::Matrix *arg2 = 0 ;
  eilig::Vector *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_eilig__Vector,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ForwardLinearSystem" "', argument " "1"" of type '" "eilig::Vector &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ForwardLinearSystem" "', argument " "1"" of type '" "eilig::Vector &""'"); 
  }
  arg1 = reinterpret_cast< eilig::Vector * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_eilig__Matrix,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ForwardLinearSystem" "', argument " "2"" of type '" "eilig::Matrix const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ForwardLinearSystem" "', argument " "2"" of type '" "eilig::Matrix const &""'"); 
  }
  arg2 = reinterpret_cast< eilig::Matrix * >(argp2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_eilig__Vector,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ForwardLinearSystem" "', argument " "3"" of type '" "eilig::Vector const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ForwardLinearSystem" "', argument " "3"" of type '" "eilig::Vector const &""'"); 
  }
  arg3 = reinterpret_cast< eilig::Vector * >(argp3);
  eilig::ForwardLinearSystem(*arg1,(eilig::Matrix const &)*arg2,(eilig::Vector const &)*arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ForwardLinearSystem__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  eilig::Vector *arg1 = 0 ;
  eilig::Ellpack *arg2 = 0 ;
  eilig::Vector *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_eilig__Vector,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ForwardLinearSystem" "', argument " "1"" of type '" "eilig::Vector &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ForwardLinearSystem" "', argument " "1"" of type '" "eilig::Vector &""'"); 
  }
  arg1 = reinterpret_cast< eilig::Vector * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_eilig__Ellpack,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ForwardLinearSystem" "', argument " "2"" of type '" "eilig::Ellpack const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ForwardLinearSystem" "', argument " "2"" of type '" "eilig::Ellpack const &""'"); 
  }
  arg2 = reinterpret_cast< eilig::Ellpack * >(argp2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_eilig__Vector,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ForwardLinearSystem" "', argument " "3"" of type '" "eilig::Vector const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ForwardLinearSystem" "', argument " "3"" of type '" "eilig::Vector const &""'"); 
  }
  arg3 = reinterpret_cast< eilig::Vector * >(argp3);
  eilig::ForwardLinearSystem(*arg1,(eilig::Ellpack const &)*arg2,(eilig::Vector const &)*arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ForwardLinearSystem(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "ForwardLinearSystem", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 3) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_eilig__Vector, SWIG_POINTER_NO_NULL);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_eilig__Matrix, SWIG_POINTER_NO_NULL | 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_eilig__Vector, SWIG_POINTER_NO_NULL | 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_ForwardLinearSystem__SWIG_0(self, argc, argv);
        }
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_eilig__Vector, SWIG_POINTER_NO_NULL);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_eilig__Ellpack, SWIG_POINTER_NO_NULL | 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_eilig__Vector, SWIG_POINTER_NO_NULL | 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_ForwardLinearSystem__SWIG_1(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'ForwardLinearSystem'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    eilig::ForwardLinearSystem(eilig::Vector &,eilig::Matrix const &,eilig::Vector const &)\n"
    "    eilig::ForwardLinearSystem(eilig::Vector &,eilig::Ellpack const &,eilig::Vector const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_DirectLUP(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  eilig::Vector *arg1 = 0 ;
  eilig::Matrix *arg2 = 0 ;
  eilig::Indices *arg3 = 0 ;
  eilig::Vector *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject *swig_obj[4] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "DirectLUP", 4, 4, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_eilig__Vector,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DirectLUP" "', argument " "1"" of type '" "eilig::Vector &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DirectLUP" "', argument " "1"" of type '" "eilig::Vector &""'"); 
  }
  arg1 = reinterpret_cast< eilig::Vector * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_eilig__Matrix,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DirectLUP" "', argument " "2"" of type '" "eilig::Matrix const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DirectLUP" "', argument " "2"" of type '" "eilig::Matrix const &""'"); 
  }
  arg2 = reinterpret_cast< eilig::Matrix * >(argp2);
  {
    std::vector< ::size_t,std::allocator< ::size_t > > *ptr = (std::vector< ::size_t,std::allocator< ::size_t > > *)0;
    res3 = swig::asptr(swig_obj[2], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "DirectLUP" "', argument " "3"" of type '" "eilig::Indices const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DirectLUP" "', argument " "3"" of type '" "eilig::Indices const &""'"); 
    }
    arg3 = ptr;
  }
  res4 = SWIG_ConvertPtr(swig_obj[3], &argp4, SWIGTYPE_p_eilig__Vector,  0  | 0);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "DirectLUP" "', argument " "4"" of type '" "eilig::Vector const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DirectLUP" "', argument " "4"" of type '" "eilig::Vector const &""'"); 
  }
  arg4 = reinterpret_cast< eilig::Vector * >(argp4);
  eilig::DirectLUP(*arg1,(eilig::Matrix const &)*arg2,(std::vector< ::size_t,std::allocator< ::size_t > > const &)*arg3,(eilig::Vector const &)*arg4);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_IterativeBiCGStab(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  eilig::Vector *arg1 = 0 ;
  eilig::Ellpack *arg2 = 0 ;
  eilig::Vector *arg3 = 0 ;
  eilig::Scalar arg4 ;
  CallbackIterative arg5 = (CallbackIterative) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  PyObject *swig_obj[5] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "IterativeBiCGStab", 5, 5, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_eilig__Vector,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IterativeBiCGStab" "', argument " "1"" of type '" "eilig::Vector &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "IterativeBiCGStab" "', argument " "1"" of type '" "eilig::Vector &""'"); 
  }
  arg1 = reinterpret_cast< eilig::Vector * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_eilig__Ellpack,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IterativeBiCGStab" "', argument " "2"" of type '" "eilig::Ellpack const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "IterativeBiCGStab" "', argument " "2"" of type '" "eilig::Ellpack const &""'"); 
  }
  arg2 = reinterpret_cast< eilig::Ellpack * >(argp2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_eilig__Vector,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "IterativeBiCGStab" "', argument " "3"" of type '" "eilig::Vector const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "IterativeBiCGStab" "', argument " "3"" of type '" "eilig::Vector const &""'"); 
  }
  arg3 = reinterpret_cast< eilig::Vector * >(argp3);
  ecode4 = SWIG_AsVal_double(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "IterativeBiCGStab" "', argument " "4"" of type '" "eilig::Scalar""'");
  } 
  arg4 = static_cast< eilig::Scalar >(val4);
  {
    arg5 = (long long int (*)(long long int, std::size_t, double))PyLong_AsVoidPtr(swig_obj[4]);
  }
  eilig::IterativeBiCGStab(*arg1,(eilig::Ellpack const &)*arg2,(eilig::Vector const &)*arg3,arg4,arg5);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_WriteToFile__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  eilig::Vector *arg1 = 0 ;
  eilig::String *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_eilig__Vector,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "WriteToFile" "', argument " "1"" of type '" "eilig::Vector const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "WriteToFile" "', argument " "1"" of type '" "eilig::Vector const &""'"); 
  }
  arg1 = reinterpret_cast< eilig::Vector * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "WriteToFile" "', argument " "2"" of type '" "eilig::String const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "WriteToFile" "', argument " "2"" of type '" "eilig::String const &""'"); 
    }
    arg2 = ptr;
  }
  eilig::WriteToFile((eilig::Vector const &)*arg1,(std::string const &)*arg2);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_WriteToFile__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  eilig::Matrix *arg1 = 0 ;
  eilig::String *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_eilig__Matrix,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "WriteToFile" "', argument " "1"" of type '" "eilig::Matrix const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "WriteToFile" "', argument " "1"" of type '" "eilig::Matrix const &""'"); 
  }
  arg1 = reinterpret_cast< eilig::Matrix * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "WriteToFile" "', argument " "2"" of type '" "eilig::String const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "WriteToFile" "', argument " "2"" of type '" "eilig::String const &""'"); 
    }
    arg2 = ptr;
  }
  eilig::WriteToFile((eilig::Matrix const &)*arg1,(std::string const &)*arg2);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_WriteToFile__SWIG_2(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  eilig::Ellpack *arg1 = 0 ;
  eilig::String *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_eilig__Ellpack,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "WriteToFile" "', argument " "1"" of type '" "eilig::Ellpack const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "WriteToFile" "', argument " "1"" of type '" "eilig::Ellpack const &""'"); 
  }
  arg1 = reinterpret_cast< eilig::Ellpack * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "WriteToFile" "', argument " "2"" of type '" "eilig::String const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "WriteToFile" "', argument " "2"" of type '" "eilig::String const &""'"); 
    }
    arg2 = ptr;
  }
  eilig::WriteToFile((eilig::Ellpack const &)*arg1,(std::string const &)*arg2);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_WriteToFile(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "WriteToFile", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_eilig__Vector, SWIG_POINTER_NO_NULL | 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_WriteToFile__SWIG_0(self, argc, argv);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_eilig__Matrix, SWIG_POINTER_NO_NULL | 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_WriteToFile__SWIG_1(self, argc, argv);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_eilig__Ellpack, SWIG_POINTER_NO_NULL | 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_WriteToFile__SWIG_2(self, argc, argv);
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'WriteToFile'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    eilig::WriteToFile(eilig::Vector const &,eilig::String const &)\n"
    "    eilig::WriteToFile(eilig::Matrix const &,eilig::String const &)\n"
    "    eilig::WriteToFile(eilig::Ellpack const &,eilig::String const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ReadFromFile__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  eilig::Vector *arg1 = 0 ;
  eilig::String *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  eilig::Status result;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_eilig__Vector,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ReadFromFile" "', argument " "1"" of type '" "eilig::Vector &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ReadFromFile" "', argument " "1"" of type '" "eilig::Vector &""'"); 
  }
  arg1 = reinterpret_cast< eilig::Vector * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ReadFromFile" "', argument " "2"" of type '" "eilig::String const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ReadFromFile" "', argument " "2"" of type '" "eilig::String const &""'"); 
    }
    arg2 = ptr;
  }
  result = (eilig::Status)eilig::ReadFromFile(*arg1,(std::string const &)*arg2);
  resultobj = SWIG_From_long_SS_long(static_cast< long long >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_ReadFromFile__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  eilig::Matrix *arg1 = 0 ;
  eilig::String *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  eilig::Status result;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_eilig__Matrix,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ReadFromFile" "', argument " "1"" of type '" "eilig::Matrix &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ReadFromFile" "', argument " "1"" of type '" "eilig::Matrix &""'"); 
  }
  arg1 = reinterpret_cast< eilig::Matrix * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ReadFromFile" "', argument " "2"" of type '" "eilig::String const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ReadFromFile" "', argument " "2"" of type '" "eilig::String const &""'"); 
    }
    arg2 = ptr;
  }
  result = (eilig::Status)eilig::ReadFromFile(*arg1,(std::string const &)*arg2);
  resultobj = SWIG_From_long_SS_long(static_cast< long long >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_ReadFromFile__SWIG_2(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  eilig::Ellpack *arg1 = 0 ;
  eilig::String *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  eilig::Status result;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_eilig__Ellpack,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ReadFromFile" "', argument " "1"" of type '" "eilig::Ellpack &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ReadFromFile" "', argument " "1"" of type '" "eilig::Ellpack &""'"); 
  }
  arg1 = reinterpret_cast< eilig::Ellpack * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ReadFromFile" "', argument " "2"" of type '" "eilig::String const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ReadFromFile" "', argument " "2"" of type '" "eilig::String const &""'"); 
    }
    arg2 = ptr;
  }
  result = (eilig::Status)eilig::ReadFromFile(*arg1,(std::string const &)*arg2);
  resultobj = SWIG_From_long_SS_long(static_cast< long long >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_ReadFromFile(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "ReadFromFile", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_eilig__Vector, SWIG_POINTER_NO_NULL);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ReadFromFile__SWIG_0(self, argc, argv);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_eilig__Matrix, SWIG_POINTER_NO_NULL);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ReadFromFile__SWIG_1(self, argc, argv);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_eilig__Ellpack, SWIG_POINTER_NO_NULL);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ReadFromFile__SWIG_2(self, argc, argv);
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'ReadFromFile'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    eilig::ReadFromFile(eilig::Vector &,eilig::String const &)\n"
    "    eilig::ReadFromFile(eilig::Matrix &,eilig::String const &)\n"
    "    eilig::ReadFromFile(eilig::Ellpack &,eilig::String const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ListVector(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  eilig::Vector *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  eilig::String result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_eilig__Vector,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ListVector" "', argument " "1"" of type '" "eilig::Vector const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ListVector" "', argument " "1"" of type '" "eilig::Vector const &""'"); 
  }
  arg1 = reinterpret_cast< eilig::Vector * >(argp1);
  result = eilig::ListVector((eilig::Vector const &)*arg1);
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ListMatrix__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  eilig::Matrix *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  eilig::String result;
  
  (void)self;
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_eilig__Matrix,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ListMatrix" "', argument " "1"" of type '" "eilig::Matrix const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ListMatrix" "', argument " "1"" of type '" "eilig::Matrix const &""'"); 
  }
  arg1 = reinterpret_cast< eilig::Matrix * >(argp1);
  result = eilig::ListMatrix((eilig::Matrix const &)*arg1);
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ListMatrix__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  eilig::Ellpack *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  eilig::String result;
  
  (void)self;
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_eilig__Ellpack,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ListMatrix" "', argument " "1"" of type '" "eilig::Ellpack const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ListMatrix" "', argument " "1"" of type '" "eilig::Ellpack const &""'"); 
  }
  arg1 = reinterpret_cast< eilig::Ellpack * >(argp1);
  result = eilig::ListMatrix((eilig::Ellpack const &)*arg1);
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ListMatrix(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "ListMatrix", 0, 1, argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    int _v = 0;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_eilig__Matrix, SWIG_POINTER_NO_NULL | 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_ListMatrix__SWIG_0(self, argc, argv);
    }
  }
  if (argc == 1) {
    int _v = 0;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_eilig__Ellpack, SWIG_POINTER_NO_NULL | 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_ListMatrix__SWIG_1(self, argc, argv);
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'ListMatrix'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    eilig::ListMatrix(eilig::Matrix const &)\n"
    "    eilig::ListMatrix(eilig::Ellpack const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_RotationMatrix__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  eilig::Vector *arg1 = 0 ;
  eilig::Scalar arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  eilig::Matrix result;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_eilig__Vector,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RotationMatrix" "', argument " "1"" of type '" "eilig::Vector const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RotationMatrix" "', argument " "1"" of type '" "eilig::Vector const &""'"); 
  }
  arg1 = reinterpret_cast< eilig::Vector * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RotationMatrix" "', argument " "2"" of type '" "eilig::Scalar""'");
  } 
  arg2 = static_cast< eilig::Scalar >(val2);
  result = eilig::transform::RotationMatrix((eilig::Vector const &)*arg1,arg2);
  resultobj = SWIG_NewPointerObj((new eilig::Matrix(result)), SWIGTYPE_p_eilig__Matrix, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RotationMatrix__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  eilig::Axis arg1 ;
  eilig::Scalar arg2 ;
  size_t val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  eilig::Matrix result;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "RotationMatrix" "', argument " "1"" of type '" "eilig::Axis""'");
  } 
  arg1 = static_cast< eilig::Axis >(val1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RotationMatrix" "', argument " "2"" of type '" "eilig::Scalar""'");
  } 
  arg2 = static_cast< eilig::Scalar >(val2);
  result = eilig::transform::RotationMatrix(SWIG_STD_MOVE(arg1),arg2);
  resultobj = SWIG_NewPointerObj((new eilig::Matrix(result)), SWIGTYPE_p_eilig__Matrix, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RotationMatrix(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "RotationMatrix", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_eilig__Vector, SWIG_POINTER_NO_NULL | 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_RotationMatrix__SWIG_0(self, argc, argv);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_RotationMatrix__SWIG_1(self, argc, argv);
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'RotationMatrix'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    eilig::transform::RotationMatrix(eilig::Vector const &,eilig::Scalar)\n"
    "    eilig::transform::RotationMatrix(eilig::Axis,eilig::Scalar)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Rotate__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  eilig::Vector *arg1 = 0 ;
  eilig::Vector *arg2 = 0 ;
  eilig::Scalar arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  eilig::Vector result;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_eilig__Vector,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Rotate" "', argument " "1"" of type '" "eilig::Vector const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Rotate" "', argument " "1"" of type '" "eilig::Vector const &""'"); 
  }
  arg1 = reinterpret_cast< eilig::Vector * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_eilig__Vector,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Rotate" "', argument " "2"" of type '" "eilig::Vector const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Rotate" "', argument " "2"" of type '" "eilig::Vector const &""'"); 
  }
  arg2 = reinterpret_cast< eilig::Vector * >(argp2);
  ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Rotate" "', argument " "3"" of type '" "eilig::Scalar""'");
  } 
  arg3 = static_cast< eilig::Scalar >(val3);
  result = eilig::transform::Rotate((eilig::Vector const &)*arg1,(eilig::Vector const &)*arg2,arg3);
  resultobj = SWIG_NewPointerObj((new eilig::Vector(result)), SWIGTYPE_p_eilig__Vector, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Rotate__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  eilig::Vector *arg1 = 0 ;
  eilig::Axis arg2 ;
  eilig::Scalar arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  eilig::Vector result;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_eilig__Vector,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Rotate" "', argument " "1"" of type '" "eilig::Vector const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Rotate" "', argument " "1"" of type '" "eilig::Vector const &""'"); 
  }
  arg1 = reinterpret_cast< eilig::Vector * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Rotate" "', argument " "2"" of type '" "eilig::Axis""'");
  } 
  arg2 = static_cast< eilig::Axis >(val2);
  ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Rotate" "', argument " "3"" of type '" "eilig::Scalar""'");
  } 
  arg3 = static_cast< eilig::Scalar >(val3);
  result = eilig::transform::Rotate((eilig::Vector const &)*arg1,SWIG_STD_MOVE(arg2),arg3);
  resultobj = SWIG_NewPointerObj((new eilig::Vector(result)), SWIGTYPE_p_eilig__Vector, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Rotate(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "Rotate", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 3) {
    int _v = 0;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_eilig__Vector, SWIG_POINTER_NO_NULL | 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_eilig__Vector, SWIG_POINTER_NO_NULL | 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_Rotate__SWIG_0(self, argc, argv);
        }
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_eilig__Vector, SWIG_POINTER_NO_NULL | 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_Rotate__SWIG_1(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'Rotate'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    eilig::transform::Rotate(eilig::Vector const &,eilig::Vector const &,eilig::Scalar)\n"
    "    eilig::transform::Rotate(eilig::Vector const &,eilig::Axis,eilig::Scalar)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Translate(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  eilig::Vector *arg1 = 0 ;
  eilig::Axis arg2 ;
  eilig::Scalar arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  eilig::Vector result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "Translate", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_eilig__Vector,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Translate" "', argument " "1"" of type '" "eilig::Vector const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Translate" "', argument " "1"" of type '" "eilig::Vector const &""'"); 
  }
  arg1 = reinterpret_cast< eilig::Vector * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Translate" "', argument " "2"" of type '" "eilig::Axis""'");
  } 
  arg2 = static_cast< eilig::Axis >(val2);
  ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Translate" "', argument " "3"" of type '" "eilig::Scalar""'");
  } 
  arg3 = static_cast< eilig::Scalar >(val3);
  result = eilig::transform::Translate((eilig::Vector const &)*arg1,SWIG_STD_MOVE(arg2),arg3);
  resultobj = SWIG_NewPointerObj((new eilig::Vector(result)), SWIGTYPE_p_eilig__Vector, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Mirror(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  eilig::Vector *arg1 = 0 ;
  eilig::Axis arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  eilig::Vector result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "Mirror", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_eilig__Vector,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Mirror" "', argument " "1"" of type '" "eilig::Vector const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Mirror" "', argument " "1"" of type '" "eilig::Vector const &""'"); 
  }
  arg1 = reinterpret_cast< eilig::Vector * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Mirror" "', argument " "2"" of type '" "eilig::Axis""'");
  } 
  arg2 = static_cast< eilig::Axis >(val2);
  result = eilig::transform::Mirror((eilig::Vector const &)*arg1,SWIG_STD_MOVE(arg2));
  resultobj = SWIG_NewPointerObj((new eilig::Vector(result)), SWIGTYPE_p_eilig__Vector, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Scale(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  eilig::Vector *arg1 = 0 ;
  eilig::Scalar arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  eilig::Vector result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "Scale", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_eilig__Vector,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Scale" "', argument " "1"" of type '" "eilig::Vector const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Scale" "', argument " "1"" of type '" "eilig::Vector const &""'"); 
  }
  arg1 = reinterpret_cast< eilig::Vector * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Scale" "', argument " "2"" of type '" "eilig::Scalar""'");
  } 
  arg2 = static_cast< eilig::Scalar >(val2);
  result = eilig::transform::Scale((eilig::Vector const &)*arg1,arg2);
  resultobj = SWIG_NewPointerObj((new eilig::Vector(result)), SWIGTYPE_p_eilig__Vector, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TablePointsRotate(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  eilig::Matrix *arg1 = 0 ;
  eilig::Axis arg2 ;
  eilig::Scalar arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  eilig::Matrix result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "TablePointsRotate", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_eilig__Matrix,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TablePointsRotate" "', argument " "1"" of type '" "eilig::Matrix const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TablePointsRotate" "', argument " "1"" of type '" "eilig::Matrix const &""'"); 
  }
  arg1 = reinterpret_cast< eilig::Matrix * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TablePointsRotate" "', argument " "2"" of type '" "eilig::Axis""'");
  } 
  arg2 = static_cast< eilig::Axis >(val2);
  ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "TablePointsRotate" "', argument " "3"" of type '" "eilig::Scalar""'");
  } 
  arg3 = static_cast< eilig::Scalar >(val3);
  result = eilig::transform::TablePointsRotate((eilig::Matrix const &)*arg1,SWIG_STD_MOVE(arg2),arg3);
  resultobj = SWIG_NewPointerObj((new eilig::Matrix(result)), SWIGTYPE_p_eilig__Matrix, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TablePointsTranslate(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  eilig::Matrix *arg1 = 0 ;
  eilig::Axis arg2 ;
  eilig::Scalar arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  eilig::Matrix result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "TablePointsTranslate", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_eilig__Matrix,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TablePointsTranslate" "', argument " "1"" of type '" "eilig::Matrix const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TablePointsTranslate" "', argument " "1"" of type '" "eilig::Matrix const &""'"); 
  }
  arg1 = reinterpret_cast< eilig::Matrix * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TablePointsTranslate" "', argument " "2"" of type '" "eilig::Axis""'");
  } 
  arg2 = static_cast< eilig::Axis >(val2);
  ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "TablePointsTranslate" "', argument " "3"" of type '" "eilig::Scalar""'");
  } 
  arg3 = static_cast< eilig::Scalar >(val3);
  result = eilig::transform::TablePointsTranslate((eilig::Matrix const &)*arg1,SWIG_STD_MOVE(arg2),arg3);
  resultobj = SWIG_NewPointerObj((new eilig::Matrix(result)), SWIGTYPE_p_eilig__Matrix, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TablePointsMirror(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  eilig::Matrix *arg1 = 0 ;
  eilig::Axis arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  eilig::Matrix result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "TablePointsMirror", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_eilig__Matrix,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TablePointsMirror" "', argument " "1"" of type '" "eilig::Matrix const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TablePointsMirror" "', argument " "1"" of type '" "eilig::Matrix const &""'"); 
  }
  arg1 = reinterpret_cast< eilig::Matrix * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TablePointsMirror" "', argument " "2"" of type '" "eilig::Axis""'");
  } 
  arg2 = static_cast< eilig::Axis >(val2);
  result = eilig::transform::TablePointsMirror((eilig::Matrix const &)*arg1,SWIG_STD_MOVE(arg2));
  resultobj = SWIG_NewPointerObj((new eilig::Matrix(result)), SWIGTYPE_p_eilig__Matrix, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TablePointsScale(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  eilig::Matrix *arg1 = 0 ;
  eilig::Scalar arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  eilig::Matrix result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "TablePointsScale", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_eilig__Matrix,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TablePointsScale" "', argument " "1"" of type '" "eilig::Matrix const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TablePointsScale" "', argument " "1"" of type '" "eilig::Matrix const &""'"); 
  }
  arg1 = reinterpret_cast< eilig::Matrix * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TablePointsScale" "', argument " "2"" of type '" "eilig::Scalar""'");
  } 
  arg2 = static_cast< eilig::Scalar >(val2);
  result = eilig::transform::TablePointsScale((eilig::Matrix const &)*arg1,arg2);
  resultobj = SWIG_NewPointerObj((new eilig::Matrix(result)), SWIGTYPE_p_eilig__Matrix, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TableValuesScale(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  eilig::Matrix *arg1 = 0 ;
  eilig::Scalar arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  eilig::Matrix result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "TableValuesScale", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_eilig__Matrix,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TableValuesScale" "', argument " "1"" of type '" "eilig::Matrix const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TableValuesScale" "', argument " "1"" of type '" "eilig::Matrix const &""'"); 
  }
  arg1 = reinterpret_cast< eilig::Matrix * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TableValuesScale" "', argument " "2"" of type '" "eilig::Scalar""'");
  } 
  arg2 = static_cast< eilig::Scalar >(val2);
  result = eilig::transform::TableValuesScale((eilig::Matrix const &)*arg1,arg2);
  resultobj = SWIG_NewPointerObj((new eilig::Matrix(result)), SWIGTYPE_p_eilig__Matrix, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TableValuesAdd(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  eilig::Matrix *arg1 = 0 ;
  eilig::Scalar arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  eilig::Matrix result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "TableValuesAdd", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_eilig__Matrix,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TableValuesAdd" "', argument " "1"" of type '" "eilig::Matrix const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TableValuesAdd" "', argument " "1"" of type '" "eilig::Matrix const &""'"); 
  }
  arg1 = reinterpret_cast< eilig::Matrix * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TableValuesAdd" "', argument " "2"" of type '" "eilig::Scalar""'");
  } 
  arg2 = static_cast< eilig::Scalar >(val2);
  result = eilig::transform::TableValuesAdd((eilig::Matrix const &)*arg1,arg2);
  resultobj = SWIG_NewPointerObj((new eilig::Matrix(result)), SWIGTYPE_p_eilig__Matrix, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TableValuesClipBiggerThan(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  eilig::Matrix *arg1 = 0 ;
  eilig::Scalar arg2 ;
  eilig::Index arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  eilig::Matrix result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "TableValuesClipBiggerThan", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_eilig__Matrix,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TableValuesClipBiggerThan" "', argument " "1"" of type '" "eilig::Matrix const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TableValuesClipBiggerThan" "', argument " "1"" of type '" "eilig::Matrix const &""'"); 
  }
  arg1 = reinterpret_cast< eilig::Matrix * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TableValuesClipBiggerThan" "', argument " "2"" of type '" "eilig::Scalar""'");
  } 
  arg2 = static_cast< eilig::Scalar >(val2);
  ecode3 = SWIG_AsVal_size_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "TableValuesClipBiggerThan" "', argument " "3"" of type '" "eilig::Index""'");
  } 
  arg3 = static_cast< eilig::Index >(val3);
  result = eilig::transform::TableValuesClipBiggerThan((eilig::Matrix const &)*arg1,arg2,SWIG_STD_MOVE(arg3));
  resultobj = SWIG_NewPointerObj((new eilig::Matrix(result)), SWIGTYPE_p_eilig__Matrix, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TableValuesClipSmallerThan(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  eilig::Matrix *arg1 = 0 ;
  eilig::Scalar arg2 ;
  eilig::Index arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  eilig::Matrix result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "TableValuesClipSmallerThan", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_eilig__Matrix,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TableValuesClipSmallerThan" "', argument " "1"" of type '" "eilig::Matrix const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TableValuesClipSmallerThan" "', argument " "1"" of type '" "eilig::Matrix const &""'"); 
  }
  arg1 = reinterpret_cast< eilig::Matrix * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TableValuesClipSmallerThan" "', argument " "2"" of type '" "eilig::Scalar""'");
  } 
  arg2 = static_cast< eilig::Scalar >(val2);
  ecode3 = SWIG_AsVal_size_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "TableValuesClipSmallerThan" "', argument " "3"" of type '" "eilig::Index""'");
  } 
  arg3 = static_cast< eilig::Index >(val3);
  result = eilig::transform::TableValuesClipSmallerThan((eilig::Matrix const &)*arg1,arg2,SWIG_STD_MOVE(arg3));
  resultobj = SWIG_NewPointerObj((new eilig::Matrix(result)), SWIGTYPE_p_eilig__Matrix, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TableAppend(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  eilig::Matrix *arg1 = 0 ;
  eilig::Matrix *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  eilig::Matrix result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "TableAppend", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_eilig__Matrix,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TableAppend" "', argument " "1"" of type '" "eilig::Matrix const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TableAppend" "', argument " "1"" of type '" "eilig::Matrix const &""'"); 
  }
  arg1 = reinterpret_cast< eilig::Matrix * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_eilig__Matrix,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TableAppend" "', argument " "2"" of type '" "eilig::Matrix const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TableAppend" "', argument " "2"" of type '" "eilig::Matrix const &""'"); 
  }
  arg2 = reinterpret_cast< eilig::Matrix * >(argp2);
  result = eilig::transform::TableAppend((eilig::Matrix const &)*arg1,(eilig::Matrix const &)*arg2);
  resultobj = SWIG_NewPointerObj((new eilig::Matrix(result)), SWIGTYPE_p_eilig__Matrix, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN int Swig_var_EILIG_STOP_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable EILIG_STOP is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_EILIG_STOP_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_long_SS_long(static_cast< long long >(eilig::EILIG_STOP));
  return pyobj;
}


SWIGINTERN int Swig_var_EILIG_CONTINUE_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable EILIG_CONTINUE is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_EILIG_CONTINUE_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_long_SS_long(static_cast< long long >(eilig::EILIG_CONTINUE));
  return pyobj;
}


SWIGINTERN int Swig_var_EILIG_RUNNING_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable EILIG_RUNNING is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_EILIG_RUNNING_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_long_SS_long(static_cast< long long >(eilig::EILIG_RUNNING));
  return pyobj;
}


SWIGINTERN int Swig_var_EILIG_SUCCESS_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable EILIG_SUCCESS is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_EILIG_SUCCESS_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_long_SS_long(static_cast< long long >(eilig::EILIG_SUCCESS));
  return pyobj;
}


SWIGINTERN int Swig_var_EILIG_NOT_CONVERGED_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable EILIG_NOT_CONVERGED is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_EILIG_NOT_CONVERGED_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_long_SS_long(static_cast< long long >(eilig::EILIG_NOT_CONVERGED));
  return pyobj;
}


SWIGINTERN int Swig_var_EILIG_INVALID_TOLERANCE_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable EILIG_INVALID_TOLERANCE is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_EILIG_INVALID_TOLERANCE_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_long_SS_long(static_cast< long long >(eilig::EILIG_INVALID_TOLERANCE));
  return pyobj;
}


SWIGINTERN int Swig_var_EILIG_INVALID_FILE_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable EILIG_INVALID_FILE is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_EILIG_INVALID_FILE_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_long_SS_long(static_cast< long long >(eilig::EILIG_INVALID_FILE));
  return pyobj;
}


SWIGINTERN int Swig_var_EILIG_NULLPTR_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable EILIG_NULLPTR is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_EILIG_NULLPTR_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_long_SS_long(static_cast< long long >(eilig::EILIG_NULLPTR));
  return pyobj;
}


SWIGINTERN int Swig_var_messages_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable messages is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_messages_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&eilig::messages), SWIGTYPE_p_std__mapT_long_long_std__string_t,  0 );
  return pyobj;
}


SWIGINTERN PyObject *_wrap_vecBasis_iterator(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::shared_ptr< basis::IBasis > > *arg1 = (std::vector< std::shared_ptr< basis::IBasis > > *) 0 ;
  PyObject **arg2 = (PyObject **) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  swig::SwigPyIterator *result = 0 ;
  
  arg2 = &swig_obj[0];
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__shared_ptrT_basis__IBasis_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vecBasis_iterator" "', argument " "1"" of type '" "std::vector< std::shared_ptr< basis::IBasis > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::shared_ptr< basis::IBasis > > * >(argp1);
  result = (swig::SwigPyIterator *)std_vector_Sl_std_shared_ptr_Sl_basis_IBasis_Sg__Sg__iterator(arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vecBasis___nonzero__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::shared_ptr< basis::IBasis > > *arg1 = (std::vector< std::shared_ptr< basis::IBasis > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__shared_ptrT_basis__IBasis_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vecBasis___nonzero__" "', argument " "1"" of type '" "std::vector< std::shared_ptr< basis::IBasis > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::shared_ptr< basis::IBasis > > * >(argp1);
  result = (bool)std_vector_Sl_std_shared_ptr_Sl_basis_IBasis_Sg__Sg____nonzero__((std::vector< std::shared_ptr< basis::IBasis > > const *)arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vecBasis___bool__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::shared_ptr< basis::IBasis > > *arg1 = (std::vector< std::shared_ptr< basis::IBasis > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__shared_ptrT_basis__IBasis_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vecBasis___bool__" "', argument " "1"" of type '" "std::vector< std::shared_ptr< basis::IBasis > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::shared_ptr< basis::IBasis > > * >(argp1);
  result = (bool)std_vector_Sl_std_shared_ptr_Sl_basis_IBasis_Sg__Sg____bool__((std::vector< std::shared_ptr< basis::IBasis > > const *)arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vecBasis___len__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::shared_ptr< basis::IBasis > > *arg1 = (std::vector< std::shared_ptr< basis::IBasis > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< std::shared_ptr< basis::IBasis > >::size_type result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__shared_ptrT_basis__IBasis_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vecBasis___len__" "', argument " "1"" of type '" "std::vector< std::shared_ptr< basis::IBasis > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::shared_ptr< basis::IBasis > > * >(argp1);
  result = std_vector_Sl_std_shared_ptr_Sl_basis_IBasis_Sg__Sg____len__((std::vector< std::shared_ptr< basis::IBasis > > const *)arg1);
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vecBasis___getslice__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::shared_ptr< basis::IBasis > > *arg1 = (std::vector< std::shared_ptr< basis::IBasis > > *) 0 ;
  std::vector< std::shared_ptr< basis::IBasis > >::difference_type arg2 ;
  std::vector< std::shared_ptr< basis::IBasis > >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  std::vector< std::shared_ptr< basis::IBasis >,std::allocator< std::shared_ptr< basis::IBasis > > > *result = 0 ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "vecBasis___getslice__", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__shared_ptrT_basis__IBasis_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vecBasis___getslice__" "', argument " "1"" of type '" "std::vector< std::shared_ptr< basis::IBasis > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::shared_ptr< basis::IBasis > > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vecBasis___getslice__" "', argument " "2"" of type '" "std::vector< std::shared_ptr< basis::IBasis > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< std::shared_ptr< basis::IBasis > >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "vecBasis___getslice__" "', argument " "3"" of type '" "std::vector< std::shared_ptr< basis::IBasis > >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< std::shared_ptr< basis::IBasis > >::difference_type >(val3);
  try {
    result = (std::vector< std::shared_ptr< basis::IBasis >,std::allocator< std::shared_ptr< basis::IBasis > > > *)std_vector_Sl_std_shared_ptr_Sl_basis_IBasis_Sg__Sg____getslice__(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3));
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__shared_ptrT_basis__IBasis_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vecBasis___setslice____SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< std::shared_ptr< basis::IBasis > > *arg1 = (std::vector< std::shared_ptr< basis::IBasis > > *) 0 ;
  std::vector< std::shared_ptr< basis::IBasis > >::difference_type arg2 ;
  std::vector< std::shared_ptr< basis::IBasis > >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__shared_ptrT_basis__IBasis_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vecBasis___setslice__" "', argument " "1"" of type '" "std::vector< std::shared_ptr< basis::IBasis > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::shared_ptr< basis::IBasis > > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vecBasis___setslice__" "', argument " "2"" of type '" "std::vector< std::shared_ptr< basis::IBasis > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< std::shared_ptr< basis::IBasis > >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "vecBasis___setslice__" "', argument " "3"" of type '" "std::vector< std::shared_ptr< basis::IBasis > >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< std::shared_ptr< basis::IBasis > >::difference_type >(val3);
  try {
    std_vector_Sl_std_shared_ptr_Sl_basis_IBasis_Sg__Sg____setslice____SWIG_0(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3));
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vecBasis___setslice____SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< std::shared_ptr< basis::IBasis > > *arg1 = (std::vector< std::shared_ptr< basis::IBasis > > *) 0 ;
  std::vector< std::shared_ptr< basis::IBasis > >::difference_type arg2 ;
  std::vector< std::shared_ptr< basis::IBasis > >::difference_type arg3 ;
  std::vector< std::shared_ptr< basis::IBasis >,std::allocator< std::shared_ptr< basis::IBasis > > > *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  
  (void)self;
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__shared_ptrT_basis__IBasis_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vecBasis___setslice__" "', argument " "1"" of type '" "std::vector< std::shared_ptr< basis::IBasis > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::shared_ptr< basis::IBasis > > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vecBasis___setslice__" "', argument " "2"" of type '" "std::vector< std::shared_ptr< basis::IBasis > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< std::shared_ptr< basis::IBasis > >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "vecBasis___setslice__" "', argument " "3"" of type '" "std::vector< std::shared_ptr< basis::IBasis > >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< std::shared_ptr< basis::IBasis > >::difference_type >(val3);
  {
    std::vector< std::shared_ptr< basis::IBasis >,std::allocator< std::shared_ptr< basis::IBasis > > > *ptr = (std::vector< std::shared_ptr< basis::IBasis >,std::allocator< std::shared_ptr< basis::IBasis > > > *)0;
    res4 = swig::asptr(swig_obj[3], &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "vecBasis___setslice__" "', argument " "4"" of type '" "std::vector< std::shared_ptr< basis::IBasis >,std::allocator< std::shared_ptr< basis::IBasis > > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vecBasis___setslice__" "', argument " "4"" of type '" "std::vector< std::shared_ptr< basis::IBasis >,std::allocator< std::shared_ptr< basis::IBasis > > > const &""'"); 
    }
    arg4 = ptr;
  }
  try {
    std_vector_Sl_std_shared_ptr_Sl_basis_IBasis_Sg__Sg____setslice____SWIG_1(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3),(std::vector< std::shared_ptr< basis::IBasis >,std::allocator< std::shared_ptr< basis::IBasis > > > const &)*arg4);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_vecBasis___setslice__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "vecBasis___setslice__", 0, 4, argv))) SWIG_fail;
  --argc;
  if (argc == 3) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< std::shared_ptr< basis::IBasis >,std::allocator< std::shared_ptr< basis::IBasis > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_ptrdiff_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_vecBasis___setslice____SWIG_0(self, argc, argv);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< std::shared_ptr< basis::IBasis >,std::allocator< std::shared_ptr< basis::IBasis > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_ptrdiff_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = swig::asptr(argv[3], (std::vector< std::shared_ptr< basis::IBasis >,std::allocator< std::shared_ptr< basis::IBasis > > >**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_vecBasis___setslice____SWIG_1(self, argc, argv);
          }
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'vecBasis___setslice__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< std::shared_ptr< basis::IBasis > >::__setslice__(std::vector< std::shared_ptr< basis::IBasis > >::difference_type,std::vector< std::shared_ptr< basis::IBasis > >::difference_type)\n"
    "    std::vector< std::shared_ptr< basis::IBasis > >::__setslice__(std::vector< std::shared_ptr< basis::IBasis > >::difference_type,std::vector< std::shared_ptr< basis::IBasis > >::difference_type,std::vector< std::shared_ptr< basis::IBasis >,std::allocator< std::shared_ptr< basis::IBasis > > > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_vecBasis___delslice__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::shared_ptr< basis::IBasis > > *arg1 = (std::vector< std::shared_ptr< basis::IBasis > > *) 0 ;
  std::vector< std::shared_ptr< basis::IBasis > >::difference_type arg2 ;
  std::vector< std::shared_ptr< basis::IBasis > >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "vecBasis___delslice__", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__shared_ptrT_basis__IBasis_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vecBasis___delslice__" "', argument " "1"" of type '" "std::vector< std::shared_ptr< basis::IBasis > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::shared_ptr< basis::IBasis > > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vecBasis___delslice__" "', argument " "2"" of type '" "std::vector< std::shared_ptr< basis::IBasis > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< std::shared_ptr< basis::IBasis > >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "vecBasis___delslice__" "', argument " "3"" of type '" "std::vector< std::shared_ptr< basis::IBasis > >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< std::shared_ptr< basis::IBasis > >::difference_type >(val3);
  try {
    std_vector_Sl_std_shared_ptr_Sl_basis_IBasis_Sg__Sg____delslice__(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3));
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vecBasis___delitem____SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< std::shared_ptr< basis::IBasis > > *arg1 = (std::vector< std::shared_ptr< basis::IBasis > > *) 0 ;
  std::vector< std::shared_ptr< basis::IBasis > >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__shared_ptrT_basis__IBasis_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vecBasis___delitem__" "', argument " "1"" of type '" "std::vector< std::shared_ptr< basis::IBasis > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::shared_ptr< basis::IBasis > > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vecBasis___delitem__" "', argument " "2"" of type '" "std::vector< std::shared_ptr< basis::IBasis > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< std::shared_ptr< basis::IBasis > >::difference_type >(val2);
  try {
    std_vector_Sl_std_shared_ptr_Sl_basis_IBasis_Sg__Sg____delitem____SWIG_0(arg1,SWIG_STD_MOVE(arg2));
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vecBasis___getitem____SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< std::shared_ptr< basis::IBasis > > *arg1 = (std::vector< std::shared_ptr< basis::IBasis > > *) 0 ;
  SWIGPY_SLICEOBJECT *arg2 = (SWIGPY_SLICEOBJECT *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< std::shared_ptr< basis::IBasis >,std::allocator< std::shared_ptr< basis::IBasis > > > *result = 0 ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__shared_ptrT_basis__IBasis_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vecBasis___getitem__" "', argument " "1"" of type '" "std::vector< std::shared_ptr< basis::IBasis > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::shared_ptr< basis::IBasis > > * >(argp1);
  {
    if (!PySlice_Check(swig_obj[1])) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vecBasis___getitem__" "', argument " "2"" of type '" "SWIGPY_SLICEOBJECT *""'");
    }
    arg2 = (SWIGPY_SLICEOBJECT *) swig_obj[1];
  }
  try {
    result = (std::vector< std::shared_ptr< basis::IBasis >,std::allocator< std::shared_ptr< basis::IBasis > > > *)std_vector_Sl_std_shared_ptr_Sl_basis_IBasis_Sg__Sg____getitem____SWIG_0(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__shared_ptrT_basis__IBasis_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vecBasis___setitem____SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< std::shared_ptr< basis::IBasis > > *arg1 = (std::vector< std::shared_ptr< basis::IBasis > > *) 0 ;
  SWIGPY_SLICEOBJECT *arg2 = (SWIGPY_SLICEOBJECT *) 0 ;
  std::vector< std::shared_ptr< basis::IBasis >,std::allocator< std::shared_ptr< basis::IBasis > > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__shared_ptrT_basis__IBasis_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vecBasis___setitem__" "', argument " "1"" of type '" "std::vector< std::shared_ptr< basis::IBasis > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::shared_ptr< basis::IBasis > > * >(argp1);
  {
    if (!PySlice_Check(swig_obj[1])) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vecBasis___setitem__" "', argument " "2"" of type '" "SWIGPY_SLICEOBJECT *""'");
    }
    arg2 = (SWIGPY_SLICEOBJECT *) swig_obj[1];
  }
  {
    std::vector< std::shared_ptr< basis::IBasis >,std::allocator< std::shared_ptr< basis::IBasis > > > *ptr = (std::vector< std::shared_ptr< basis::IBasis >,std::allocator< std::shared_ptr< basis::IBasis > > > *)0;
    res3 = swig::asptr(swig_obj[2], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "vecBasis___setitem__" "', argument " "3"" of type '" "std::vector< std::shared_ptr< basis::IBasis >,std::allocator< std::shared_ptr< basis::IBasis > > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vecBasis___setitem__" "', argument " "3"" of type '" "std::vector< std::shared_ptr< basis::IBasis >,std::allocator< std::shared_ptr< basis::IBasis > > > const &""'"); 
    }
    arg3 = ptr;
  }
  try {
    std_vector_Sl_std_shared_ptr_Sl_basis_IBasis_Sg__Sg____setitem____SWIG_0(arg1,arg2,(std::vector< std::shared_ptr< basis::IBasis >,std::allocator< std::shared_ptr< basis::IBasis > > > const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_vecBasis___setitem____SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< std::shared_ptr< basis::IBasis > > *arg1 = (std::vector< std::shared_ptr< basis::IBasis > > *) 0 ;
  SWIGPY_SLICEOBJECT *arg2 = (SWIGPY_SLICEOBJECT *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__shared_ptrT_basis__IBasis_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vecBasis___setitem__" "', argument " "1"" of type '" "std::vector< std::shared_ptr< basis::IBasis > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::shared_ptr< basis::IBasis > > * >(argp1);
  {
    if (!PySlice_Check(swig_obj[1])) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vecBasis___setitem__" "', argument " "2"" of type '" "SWIGPY_SLICEOBJECT *""'");
    }
    arg2 = (SWIGPY_SLICEOBJECT *) swig_obj[1];
  }
  try {
    std_vector_Sl_std_shared_ptr_Sl_basis_IBasis_Sg__Sg____setitem____SWIG_1(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vecBasis___delitem____SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< std::shared_ptr< basis::IBasis > > *arg1 = (std::vector< std::shared_ptr< basis::IBasis > > *) 0 ;
  SWIGPY_SLICEOBJECT *arg2 = (SWIGPY_SLICEOBJECT *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__shared_ptrT_basis__IBasis_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vecBasis___delitem__" "', argument " "1"" of type '" "std::vector< std::shared_ptr< basis::IBasis > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::shared_ptr< basis::IBasis > > * >(argp1);
  {
    if (!PySlice_Check(swig_obj[1])) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vecBasis___delitem__" "', argument " "2"" of type '" "SWIGPY_SLICEOBJECT *""'");
    }
    arg2 = (SWIGPY_SLICEOBJECT *) swig_obj[1];
  }
  try {
    std_vector_Sl_std_shared_ptr_Sl_basis_IBasis_Sg__Sg____delitem____SWIG_1(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vecBasis___delitem__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "vecBasis___delitem__", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< std::shared_ptr< basis::IBasis >,std::allocator< std::shared_ptr< basis::IBasis > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_vecBasis___delitem____SWIG_1(self, argc, argv);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< std::shared_ptr< basis::IBasis >,std::allocator< std::shared_ptr< basis::IBasis > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_vecBasis___delitem____SWIG_0(self, argc, argv);
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'vecBasis___delitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< std::shared_ptr< basis::IBasis > >::__delitem__(std::vector< std::shared_ptr< basis::IBasis > >::difference_type)\n"
    "    std::vector< std::shared_ptr< basis::IBasis > >::__delitem__(SWIGPY_SLICEOBJECT *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_vecBasis___getitem____SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< std::shared_ptr< basis::IBasis > > *arg1 = (std::vector< std::shared_ptr< basis::IBasis > > *) 0 ;
  std::vector< std::shared_ptr< basis::IBasis > >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  std::vector< std::shared_ptr< basis::IBasis > >::value_type *result = 0 ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__shared_ptrT_basis__IBasis_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vecBasis___getitem__" "', argument " "1"" of type '" "std::vector< std::shared_ptr< basis::IBasis > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::shared_ptr< basis::IBasis > > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vecBasis___getitem__" "', argument " "2"" of type '" "std::vector< std::shared_ptr< basis::IBasis > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< std::shared_ptr< basis::IBasis > >::difference_type >(val2);
  try {
    result = (std::vector< std::shared_ptr< basis::IBasis > >::value_type *) &std_vector_Sl_std_shared_ptr_Sl_basis_IBasis_Sg__Sg____getitem____SWIG_1((std::vector< std::shared_ptr< basis::IBasis > > const *)arg1,SWIG_STD_MOVE(arg2));
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  {
    std::shared_ptr<  basis::IBasis > *smartresult = *result ? new std::shared_ptr<  basis::IBasis >(*result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_std__shared_ptrT_basis__IBasis_t, SWIG_POINTER_OWN);
  }
  (void)swig::container_owner<swig::traits<std::vector< std::shared_ptr< basis::IBasis > >::value_type>::category>::back_reference(resultobj, swig_obj[0]);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vecBasis___getitem__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "vecBasis___getitem__", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< std::shared_ptr< basis::IBasis >,std::allocator< std::shared_ptr< basis::IBasis > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_vecBasis___getitem____SWIG_0(self, argc, argv);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< std::shared_ptr< basis::IBasis >,std::allocator< std::shared_ptr< basis::IBasis > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_vecBasis___getitem____SWIG_1(self, argc, argv);
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'vecBasis___getitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< std::shared_ptr< basis::IBasis > >::__getitem__(SWIGPY_SLICEOBJECT *)\n"
    "    std::vector< std::shared_ptr< basis::IBasis > >::__getitem__(std::vector< std::shared_ptr< basis::IBasis > >::difference_type) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_vecBasis___setitem____SWIG_2(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< std::shared_ptr< basis::IBasis > > *arg1 = (std::vector< std::shared_ptr< basis::IBasis > > *) 0 ;
  std::vector< std::shared_ptr< basis::IBasis > >::difference_type arg2 ;
  std::vector< std::shared_ptr< basis::IBasis > >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  std::vector< std::shared_ptr< basis::IBasis > >::value_type tempshared3 ;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__shared_ptrT_basis__IBasis_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vecBasis___setitem__" "', argument " "1"" of type '" "std::vector< std::shared_ptr< basis::IBasis > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::shared_ptr< basis::IBasis > > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vecBasis___setitem__" "', argument " "2"" of type '" "std::vector< std::shared_ptr< basis::IBasis > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< std::shared_ptr< basis::IBasis > >::difference_type >(val2);
  {
    int newmem = 0;
    res3 = SWIG_ConvertPtrAndOwn(swig_obj[2], &argp3, SWIGTYPE_p_std__shared_ptrT_basis__IBasis_t,  0 , &newmem);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "vecBasis___setitem__" "', argument " "3"" of type '" "std::vector< std::shared_ptr< basis::IBasis > >::value_type const &""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      if (argp3) tempshared3 = *reinterpret_cast< std::vector< std::shared_ptr< basis::IBasis > >::value_type * >(argp3);
      delete reinterpret_cast< std::vector< std::shared_ptr< basis::IBasis > >::value_type * >(argp3);
      arg3 = &tempshared3;
    } else {
      arg3 = (argp3) ? reinterpret_cast< std::vector< std::shared_ptr< basis::IBasis > >::value_type * >(argp3) : &tempshared3;
    }
  }
  try {
    std_vector_Sl_std_shared_ptr_Sl_basis_IBasis_Sg__Sg____setitem____SWIG_2(arg1,SWIG_STD_MOVE(arg2),(std::shared_ptr< basis::IBasis > const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vecBasis___setitem__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "vecBasis___setitem__", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< std::shared_ptr< basis::IBasis >,std::allocator< std::shared_ptr< basis::IBasis > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_vecBasis___setitem____SWIG_1(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< std::shared_ptr< basis::IBasis >,std::allocator< std::shared_ptr< basis::IBasis > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        int res = swig::asptr(argv[2], (std::vector< std::shared_ptr< basis::IBasis >,std::allocator< std::shared_ptr< basis::IBasis > > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_vecBasis___setitem____SWIG_0(self, argc, argv);
        }
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< std::shared_ptr< basis::IBasis >,std::allocator< std::shared_ptr< basis::IBasis > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_std__shared_ptrT_basis__IBasis_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_vecBasis___setitem____SWIG_2(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'vecBasis___setitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< std::shared_ptr< basis::IBasis > >::__setitem__(SWIGPY_SLICEOBJECT *,std::vector< std::shared_ptr< basis::IBasis >,std::allocator< std::shared_ptr< basis::IBasis > > > const &)\n"
    "    std::vector< std::shared_ptr< basis::IBasis > >::__setitem__(SWIGPY_SLICEOBJECT *)\n"
    "    std::vector< std::shared_ptr< basis::IBasis > >::__setitem__(std::vector< std::shared_ptr< basis::IBasis > >::difference_type,std::vector< std::shared_ptr< basis::IBasis > >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_vecBasis_pop(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::shared_ptr< basis::IBasis > > *arg1 = (std::vector< std::shared_ptr< basis::IBasis > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< std::shared_ptr< basis::IBasis > >::value_type result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__shared_ptrT_basis__IBasis_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vecBasis_pop" "', argument " "1"" of type '" "std::vector< std::shared_ptr< basis::IBasis > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::shared_ptr< basis::IBasis > > * >(argp1);
  try {
    result = std_vector_Sl_std_shared_ptr_Sl_basis_IBasis_Sg__Sg__pop(arg1);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  {
    std::shared_ptr<  basis::IBasis > *smartresult = result ? new std::shared_ptr<  basis::IBasis >(result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_std__shared_ptrT_basis__IBasis_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vecBasis_append(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::shared_ptr< basis::IBasis > > *arg1 = (std::vector< std::shared_ptr< basis::IBasis > > *) 0 ;
  std::vector< std::shared_ptr< basis::IBasis > >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  std::vector< std::shared_ptr< basis::IBasis > >::value_type tempshared2 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "vecBasis_append", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__shared_ptrT_basis__IBasis_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vecBasis_append" "', argument " "1"" of type '" "std::vector< std::shared_ptr< basis::IBasis > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::shared_ptr< basis::IBasis > > * >(argp1);
  {
    int newmem = 0;
    res2 = SWIG_ConvertPtrAndOwn(swig_obj[1], &argp2, SWIGTYPE_p_std__shared_ptrT_basis__IBasis_t,  0 , &newmem);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "vecBasis_append" "', argument " "2"" of type '" "std::vector< std::shared_ptr< basis::IBasis > >::value_type const &""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      if (argp2) tempshared2 = *reinterpret_cast< std::vector< std::shared_ptr< basis::IBasis > >::value_type * >(argp2);
      delete reinterpret_cast< std::vector< std::shared_ptr< basis::IBasis > >::value_type * >(argp2);
      arg2 = &tempshared2;
    } else {
      arg2 = (argp2) ? reinterpret_cast< std::vector< std::shared_ptr< basis::IBasis > >::value_type * >(argp2) : &tempshared2;
    }
  }
  std_vector_Sl_std_shared_ptr_Sl_basis_IBasis_Sg__Sg__append(arg1,(std::shared_ptr< basis::IBasis > const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_vecBasis__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **SWIGUNUSEDPARM(swig_obj)) {
  PyObject *resultobj = 0;
  std::vector< std::shared_ptr< basis::IBasis > > *result = 0 ;
  
  (void)self;
  if ((nobjs < 0) || (nobjs > 0)) SWIG_fail;
  result = (std::vector< std::shared_ptr< basis::IBasis > > *)new std::vector< std::shared_ptr< basis::IBasis > >();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__shared_ptrT_basis__IBasis_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_vecBasis__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< std::shared_ptr< basis::IBasis > > *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  std::vector< std::shared_ptr< basis::IBasis > > *result = 0 ;
  
  (void)self;
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  {
    std::vector< std::shared_ptr< basis::IBasis >,std::allocator< std::shared_ptr< basis::IBasis > > > *ptr = (std::vector< std::shared_ptr< basis::IBasis >,std::allocator< std::shared_ptr< basis::IBasis > > > *)0;
    res1 = swig::asptr(swig_obj[0], &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_vecBasis" "', argument " "1"" of type '" "std::vector< std::shared_ptr< basis::IBasis > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_vecBasis" "', argument " "1"" of type '" "std::vector< std::shared_ptr< basis::IBasis > > const &""'"); 
    }
    arg1 = ptr;
  }
  result = (std::vector< std::shared_ptr< basis::IBasis > > *)new std::vector< std::shared_ptr< basis::IBasis > >((std::vector< std::shared_ptr< basis::IBasis > > const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__shared_ptrT_basis__IBasis_t_t, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_vecBasis_empty(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::shared_ptr< basis::IBasis > > *arg1 = (std::vector< std::shared_ptr< basis::IBasis > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__shared_ptrT_basis__IBasis_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vecBasis_empty" "', argument " "1"" of type '" "std::vector< std::shared_ptr< basis::IBasis > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::shared_ptr< basis::IBasis > > * >(argp1);
  result = (bool)((std::vector< std::shared_ptr< basis::IBasis > > const *)arg1)->empty();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vecBasis_size(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::shared_ptr< basis::IBasis > > *arg1 = (std::vector< std::shared_ptr< basis::IBasis > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< std::shared_ptr< basis::IBasis > >::size_type result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__shared_ptrT_basis__IBasis_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vecBasis_size" "', argument " "1"" of type '" "std::vector< std::shared_ptr< basis::IBasis > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::shared_ptr< basis::IBasis > > * >(argp1);
  result = ((std::vector< std::shared_ptr< basis::IBasis > > const *)arg1)->size();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vecBasis_swap(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::shared_ptr< basis::IBasis > > *arg1 = (std::vector< std::shared_ptr< basis::IBasis > > *) 0 ;
  std::vector< std::shared_ptr< basis::IBasis > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "vecBasis_swap", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__shared_ptrT_basis__IBasis_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vecBasis_swap" "', argument " "1"" of type '" "std::vector< std::shared_ptr< basis::IBasis > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::shared_ptr< basis::IBasis > > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_std__vectorT_std__shared_ptrT_basis__IBasis_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "vecBasis_swap" "', argument " "2"" of type '" "std::vector< std::shared_ptr< basis::IBasis > > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vecBasis_swap" "', argument " "2"" of type '" "std::vector< std::shared_ptr< basis::IBasis > > &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< std::shared_ptr< basis::IBasis > > * >(argp2);
  (arg1)->swap(*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vecBasis_begin(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::shared_ptr< basis::IBasis > > *arg1 = (std::vector< std::shared_ptr< basis::IBasis > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< std::shared_ptr< basis::IBasis > >::iterator result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__shared_ptrT_basis__IBasis_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vecBasis_begin" "', argument " "1"" of type '" "std::vector< std::shared_ptr< basis::IBasis > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::shared_ptr< basis::IBasis > > * >(argp1);
  result = (arg1)->begin();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< std::shared_ptr< basis::IBasis > >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vecBasis_end(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::shared_ptr< basis::IBasis > > *arg1 = (std::vector< std::shared_ptr< basis::IBasis > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< std::shared_ptr< basis::IBasis > >::iterator result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__shared_ptrT_basis__IBasis_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vecBasis_end" "', argument " "1"" of type '" "std::vector< std::shared_ptr< basis::IBasis > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::shared_ptr< basis::IBasis > > * >(argp1);
  result = (arg1)->end();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< std::shared_ptr< basis::IBasis > >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vecBasis_rbegin(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::shared_ptr< basis::IBasis > > *arg1 = (std::vector< std::shared_ptr< basis::IBasis > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< std::shared_ptr< basis::IBasis > >::reverse_iterator result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__shared_ptrT_basis__IBasis_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vecBasis_rbegin" "', argument " "1"" of type '" "std::vector< std::shared_ptr< basis::IBasis > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::shared_ptr< basis::IBasis > > * >(argp1);
  result = (arg1)->rbegin();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< std::shared_ptr< basis::IBasis > >::reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vecBasis_rend(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::shared_ptr< basis::IBasis > > *arg1 = (std::vector< std::shared_ptr< basis::IBasis > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< std::shared_ptr< basis::IBasis > >::reverse_iterator result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__shared_ptrT_basis__IBasis_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vecBasis_rend" "', argument " "1"" of type '" "std::vector< std::shared_ptr< basis::IBasis > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::shared_ptr< basis::IBasis > > * >(argp1);
  result = (arg1)->rend();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< std::shared_ptr< basis::IBasis > >::reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vecBasis_clear(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::shared_ptr< basis::IBasis > > *arg1 = (std::vector< std::shared_ptr< basis::IBasis > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__shared_ptrT_basis__IBasis_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vecBasis_clear" "', argument " "1"" of type '" "std::vector< std::shared_ptr< basis::IBasis > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::shared_ptr< basis::IBasis > > * >(argp1);
  (arg1)->clear();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vecBasis_get_allocator(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::shared_ptr< basis::IBasis > > *arg1 = (std::vector< std::shared_ptr< basis::IBasis > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  SwigValueWrapper< std::allocator< std::shared_ptr< basis::IBasis > > > result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__shared_ptrT_basis__IBasis_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vecBasis_get_allocator" "', argument " "1"" of type '" "std::vector< std::shared_ptr< basis::IBasis > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::shared_ptr< basis::IBasis > > * >(argp1);
  result = ((std::vector< std::shared_ptr< basis::IBasis > > const *)arg1)->get_allocator();
  resultobj = SWIG_NewPointerObj((new std::vector< std::shared_ptr< basis::IBasis > >::allocator_type(result)), SWIGTYPE_p_std__allocatorT_std__shared_ptrT_basis__IBasis_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_vecBasis__SWIG_2(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< std::shared_ptr< basis::IBasis > >::size_type arg1 ;
  size_t val1 ;
  int ecode1 = 0 ;
  std::vector< std::shared_ptr< basis::IBasis > > *result = 0 ;
  
  (void)self;
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_vecBasis" "', argument " "1"" of type '" "std::vector< std::shared_ptr< basis::IBasis > >::size_type""'");
  } 
  arg1 = static_cast< std::vector< std::shared_ptr< basis::IBasis > >::size_type >(val1);
  result = (std::vector< std::shared_ptr< basis::IBasis > > *)new std::vector< std::shared_ptr< basis::IBasis > >(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__shared_ptrT_basis__IBasis_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vecBasis_pop_back(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::shared_ptr< basis::IBasis > > *arg1 = (std::vector< std::shared_ptr< basis::IBasis > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__shared_ptrT_basis__IBasis_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vecBasis_pop_back" "', argument " "1"" of type '" "std::vector< std::shared_ptr< basis::IBasis > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::shared_ptr< basis::IBasis > > * >(argp1);
  (arg1)->pop_back();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vecBasis_resize__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< std::shared_ptr< basis::IBasis > > *arg1 = (std::vector< std::shared_ptr< basis::IBasis > > *) 0 ;
  std::vector< std::shared_ptr< basis::IBasis > >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__shared_ptrT_basis__IBasis_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vecBasis_resize" "', argument " "1"" of type '" "std::vector< std::shared_ptr< basis::IBasis > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::shared_ptr< basis::IBasis > > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vecBasis_resize" "', argument " "2"" of type '" "std::vector< std::shared_ptr< basis::IBasis > >::size_type""'");
  } 
  arg2 = static_cast< std::vector< std::shared_ptr< basis::IBasis > >::size_type >(val2);
  (arg1)->resize(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vecBasis_erase__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< std::shared_ptr< basis::IBasis > > *arg1 = (std::vector< std::shared_ptr< basis::IBasis > > *) 0 ;
  std::vector< std::shared_ptr< basis::IBasis > >::iterator arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  std::vector< std::shared_ptr< basis::IBasis > >::iterator result;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__shared_ptrT_basis__IBasis_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vecBasis_erase" "', argument " "1"" of type '" "std::vector< std::shared_ptr< basis::IBasis > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::shared_ptr< basis::IBasis > > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vecBasis_erase" "', argument " "2"" of type '" "std::vector< std::shared_ptr< basis::IBasis > >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< std::shared_ptr< basis::IBasis > >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< std::shared_ptr< basis::IBasis > >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vecBasis_erase" "', argument " "2"" of type '" "std::vector< std::shared_ptr< basis::IBasis > >::iterator""'");
    }
  }
  result = std_vector_Sl_std_shared_ptr_Sl_basis_IBasis_Sg__Sg__erase__SWIG_0(arg1,SWIG_STD_MOVE(arg2));
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< std::shared_ptr< basis::IBasis > >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vecBasis_erase__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< std::shared_ptr< basis::IBasis > > *arg1 = (std::vector< std::shared_ptr< basis::IBasis > > *) 0 ;
  std::vector< std::shared_ptr< basis::IBasis > >::iterator arg2 ;
  std::vector< std::shared_ptr< basis::IBasis > >::iterator arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  swig::SwigPyIterator *iter3 = 0 ;
  int res3 ;
  std::vector< std::shared_ptr< basis::IBasis > >::iterator result;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__shared_ptrT_basis__IBasis_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vecBasis_erase" "', argument " "1"" of type '" "std::vector< std::shared_ptr< basis::IBasis > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::shared_ptr< basis::IBasis > > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vecBasis_erase" "', argument " "2"" of type '" "std::vector< std::shared_ptr< basis::IBasis > >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< std::shared_ptr< basis::IBasis > >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< std::shared_ptr< basis::IBasis > >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vecBasis_erase" "', argument " "2"" of type '" "std::vector< std::shared_ptr< basis::IBasis > >::iterator""'");
    }
  }
  res3 = SWIG_ConvertPtr(swig_obj[2], SWIG_as_voidptrptr(&iter3), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res3) || !iter3) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vecBasis_erase" "', argument " "3"" of type '" "std::vector< std::shared_ptr< basis::IBasis > >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< std::shared_ptr< basis::IBasis > >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< std::shared_ptr< basis::IBasis > >::iterator > *>(iter3);
    if (iter_t) {
      arg3 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vecBasis_erase" "', argument " "3"" of type '" "std::vector< std::shared_ptr< basis::IBasis > >::iterator""'");
    }
  }
  result = std_vector_Sl_std_shared_ptr_Sl_basis_IBasis_Sg__Sg__erase__SWIG_1(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3));
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< std::shared_ptr< basis::IBasis > >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vecBasis_erase(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "vecBasis_erase", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< std::shared_ptr< basis::IBasis >,std::allocator< std::shared_ptr< basis::IBasis > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< std::shared_ptr< basis::IBasis > >::iterator > *>(iter) != 0));
      if (_v) {
        return _wrap_vecBasis_erase__SWIG_0(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< std::shared_ptr< basis::IBasis >,std::allocator< std::shared_ptr< basis::IBasis > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< std::shared_ptr< basis::IBasis > >::iterator > *>(iter) != 0));
      if (_v) {
        swig::SwigPyIterator *iter = 0;
        int res = SWIG_ConvertPtr(argv[2], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
        _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< std::shared_ptr< basis::IBasis > >::iterator > *>(iter) != 0));
        if (_v) {
          return _wrap_vecBasis_erase__SWIG_1(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'vecBasis_erase'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< std::shared_ptr< basis::IBasis > >::erase(std::vector< std::shared_ptr< basis::IBasis > >::iterator)\n"
    "    std::vector< std::shared_ptr< basis::IBasis > >::erase(std::vector< std::shared_ptr< basis::IBasis > >::iterator,std::vector< std::shared_ptr< basis::IBasis > >::iterator)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_new_vecBasis__SWIG_3(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< std::shared_ptr< basis::IBasis > >::size_type arg1 ;
  std::vector< std::shared_ptr< basis::IBasis > >::value_type *arg2 = 0 ;
  size_t val1 ;
  int ecode1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  std::vector< std::shared_ptr< basis::IBasis > >::value_type tempshared2 ;
  std::vector< std::shared_ptr< basis::IBasis > > *result = 0 ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_vecBasis" "', argument " "1"" of type '" "std::vector< std::shared_ptr< basis::IBasis > >::size_type""'");
  } 
  arg1 = static_cast< std::vector< std::shared_ptr< basis::IBasis > >::size_type >(val1);
  {
    int newmem = 0;
    res2 = SWIG_ConvertPtrAndOwn(swig_obj[1], &argp2, SWIGTYPE_p_std__shared_ptrT_basis__IBasis_t,  0 , &newmem);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_vecBasis" "', argument " "2"" of type '" "std::vector< std::shared_ptr< basis::IBasis > >::value_type const &""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      if (argp2) tempshared2 = *reinterpret_cast< std::vector< std::shared_ptr< basis::IBasis > >::value_type * >(argp2);
      delete reinterpret_cast< std::vector< std::shared_ptr< basis::IBasis > >::value_type * >(argp2);
      arg2 = &tempshared2;
    } else {
      arg2 = (argp2) ? reinterpret_cast< std::vector< std::shared_ptr< basis::IBasis > >::value_type * >(argp2) : &tempshared2;
    }
  }
  result = (std::vector< std::shared_ptr< basis::IBasis > > *)new std::vector< std::shared_ptr< basis::IBasis > >(arg1,(std::vector< std::shared_ptr< basis::IBasis > >::value_type const &)*arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__shared_ptrT_basis__IBasis_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_vecBasis(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "new_vecBasis", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 0) {
    return _wrap_new_vecBasis__SWIG_0(self, argc, argv);
  }
  if (argc == 1) {
    int _v = 0;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_vecBasis__SWIG_2(self, argc, argv);
    }
  }
  if (argc == 1) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< std::shared_ptr< basis::IBasis >,std::allocator< std::shared_ptr< basis::IBasis > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_vecBasis__SWIG_1(self, argc, argv);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_std__shared_ptrT_basis__IBasis_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_vecBasis__SWIG_3(self, argc, argv);
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'new_vecBasis'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< std::shared_ptr< basis::IBasis > >::vector()\n"
    "    std::vector< std::shared_ptr< basis::IBasis > >::vector(std::vector< std::shared_ptr< basis::IBasis > > const &)\n"
    "    std::vector< std::shared_ptr< basis::IBasis > >::vector(std::vector< std::shared_ptr< basis::IBasis > >::size_type)\n"
    "    std::vector< std::shared_ptr< basis::IBasis > >::vector(std::vector< std::shared_ptr< basis::IBasis > >::size_type,std::vector< std::shared_ptr< basis::IBasis > >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_vecBasis_push_back(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::shared_ptr< basis::IBasis > > *arg1 = (std::vector< std::shared_ptr< basis::IBasis > > *) 0 ;
  std::vector< std::shared_ptr< basis::IBasis > >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  std::vector< std::shared_ptr< basis::IBasis > >::value_type tempshared2 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "vecBasis_push_back", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__shared_ptrT_basis__IBasis_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vecBasis_push_back" "', argument " "1"" of type '" "std::vector< std::shared_ptr< basis::IBasis > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::shared_ptr< basis::IBasis > > * >(argp1);
  {
    int newmem = 0;
    res2 = SWIG_ConvertPtrAndOwn(swig_obj[1], &argp2, SWIGTYPE_p_std__shared_ptrT_basis__IBasis_t,  0 , &newmem);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "vecBasis_push_back" "', argument " "2"" of type '" "std::vector< std::shared_ptr< basis::IBasis > >::value_type const &""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      if (argp2) tempshared2 = *reinterpret_cast< std::vector< std::shared_ptr< basis::IBasis > >::value_type * >(argp2);
      delete reinterpret_cast< std::vector< std::shared_ptr< basis::IBasis > >::value_type * >(argp2);
      arg2 = &tempshared2;
    } else {
      arg2 = (argp2) ? reinterpret_cast< std::vector< std::shared_ptr< basis::IBasis > >::value_type * >(argp2) : &tempshared2;
    }
  }
  (arg1)->push_back((std::vector< std::shared_ptr< basis::IBasis > >::value_type const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vecBasis_front(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::shared_ptr< basis::IBasis > > *arg1 = (std::vector< std::shared_ptr< basis::IBasis > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< std::shared_ptr< basis::IBasis > >::value_type *result = 0 ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__shared_ptrT_basis__IBasis_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vecBasis_front" "', argument " "1"" of type '" "std::vector< std::shared_ptr< basis::IBasis > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::shared_ptr< basis::IBasis > > * >(argp1);
  result = (std::vector< std::shared_ptr< basis::IBasis > >::value_type *) &((std::vector< std::shared_ptr< basis::IBasis > > const *)arg1)->front();
  {
    std::shared_ptr<  basis::IBasis > *smartresult = *result ? new std::shared_ptr<  basis::IBasis >(*result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_std__shared_ptrT_basis__IBasis_t, SWIG_POINTER_OWN);
  }
  (void)swig::container_owner<swig::traits<std::vector< std::shared_ptr< basis::IBasis > >::value_type>::category>::back_reference(resultobj, swig_obj[0]);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vecBasis_back(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::shared_ptr< basis::IBasis > > *arg1 = (std::vector< std::shared_ptr< basis::IBasis > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< std::shared_ptr< basis::IBasis > >::value_type *result = 0 ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__shared_ptrT_basis__IBasis_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vecBasis_back" "', argument " "1"" of type '" "std::vector< std::shared_ptr< basis::IBasis > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::shared_ptr< basis::IBasis > > * >(argp1);
  result = (std::vector< std::shared_ptr< basis::IBasis > >::value_type *) &((std::vector< std::shared_ptr< basis::IBasis > > const *)arg1)->back();
  {
    std::shared_ptr<  basis::IBasis > *smartresult = *result ? new std::shared_ptr<  basis::IBasis >(*result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_std__shared_ptrT_basis__IBasis_t, SWIG_POINTER_OWN);
  }
  (void)swig::container_owner<swig::traits<std::vector< std::shared_ptr< basis::IBasis > >::value_type>::category>::back_reference(resultobj, swig_obj[0]);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vecBasis_assign(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::shared_ptr< basis::IBasis > > *arg1 = (std::vector< std::shared_ptr< basis::IBasis > > *) 0 ;
  std::vector< std::shared_ptr< basis::IBasis > >::size_type arg2 ;
  std::vector< std::shared_ptr< basis::IBasis > >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  std::vector< std::shared_ptr< basis::IBasis > >::value_type tempshared3 ;
  PyObject *swig_obj[3] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "vecBasis_assign", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__shared_ptrT_basis__IBasis_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vecBasis_assign" "', argument " "1"" of type '" "std::vector< std::shared_ptr< basis::IBasis > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::shared_ptr< basis::IBasis > > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vecBasis_assign" "', argument " "2"" of type '" "std::vector< std::shared_ptr< basis::IBasis > >::size_type""'");
  } 
  arg2 = static_cast< std::vector< std::shared_ptr< basis::IBasis > >::size_type >(val2);
  {
    int newmem = 0;
    res3 = SWIG_ConvertPtrAndOwn(swig_obj[2], &argp3, SWIGTYPE_p_std__shared_ptrT_basis__IBasis_t,  0 , &newmem);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "vecBasis_assign" "', argument " "3"" of type '" "std::vector< std::shared_ptr< basis::IBasis > >::value_type const &""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      if (argp3) tempshared3 = *reinterpret_cast< std::vector< std::shared_ptr< basis::IBasis > >::value_type * >(argp3);
      delete reinterpret_cast< std::vector< std::shared_ptr< basis::IBasis > >::value_type * >(argp3);
      arg3 = &tempshared3;
    } else {
      arg3 = (argp3) ? reinterpret_cast< std::vector< std::shared_ptr< basis::IBasis > >::value_type * >(argp3) : &tempshared3;
    }
  }
  (arg1)->assign(arg2,(std::vector< std::shared_ptr< basis::IBasis > >::value_type const &)*arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vecBasis_resize__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< std::shared_ptr< basis::IBasis > > *arg1 = (std::vector< std::shared_ptr< basis::IBasis > > *) 0 ;
  std::vector< std::shared_ptr< basis::IBasis > >::size_type arg2 ;
  std::vector< std::shared_ptr< basis::IBasis > >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  std::vector< std::shared_ptr< basis::IBasis > >::value_type tempshared3 ;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__shared_ptrT_basis__IBasis_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vecBasis_resize" "', argument " "1"" of type '" "std::vector< std::shared_ptr< basis::IBasis > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::shared_ptr< basis::IBasis > > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vecBasis_resize" "', argument " "2"" of type '" "std::vector< std::shared_ptr< basis::IBasis > >::size_type""'");
  } 
  arg2 = static_cast< std::vector< std::shared_ptr< basis::IBasis > >::size_type >(val2);
  {
    int newmem = 0;
    res3 = SWIG_ConvertPtrAndOwn(swig_obj[2], &argp3, SWIGTYPE_p_std__shared_ptrT_basis__IBasis_t,  0 , &newmem);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "vecBasis_resize" "', argument " "3"" of type '" "std::vector< std::shared_ptr< basis::IBasis > >::value_type const &""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      if (argp3) tempshared3 = *reinterpret_cast< std::vector< std::shared_ptr< basis::IBasis > >::value_type * >(argp3);
      delete reinterpret_cast< std::vector< std::shared_ptr< basis::IBasis > >::value_type * >(argp3);
      arg3 = &tempshared3;
    } else {
      arg3 = (argp3) ? reinterpret_cast< std::vector< std::shared_ptr< basis::IBasis > >::value_type * >(argp3) : &tempshared3;
    }
  }
  (arg1)->resize(arg2,(std::vector< std::shared_ptr< basis::IBasis > >::value_type const &)*arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vecBasis_resize(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "vecBasis_resize", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< std::shared_ptr< basis::IBasis >,std::allocator< std::shared_ptr< basis::IBasis > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_vecBasis_resize__SWIG_0(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< std::shared_ptr< basis::IBasis >,std::allocator< std::shared_ptr< basis::IBasis > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_std__shared_ptrT_basis__IBasis_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_vecBasis_resize__SWIG_1(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'vecBasis_resize'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< std::shared_ptr< basis::IBasis > >::resize(std::vector< std::shared_ptr< basis::IBasis > >::size_type)\n"
    "    std::vector< std::shared_ptr< basis::IBasis > >::resize(std::vector< std::shared_ptr< basis::IBasis > >::size_type,std::vector< std::shared_ptr< basis::IBasis > >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_vecBasis_insert__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< std::shared_ptr< basis::IBasis > > *arg1 = (std::vector< std::shared_ptr< basis::IBasis > > *) 0 ;
  std::vector< std::shared_ptr< basis::IBasis > >::iterator arg2 ;
  std::vector< std::shared_ptr< basis::IBasis > >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  void *argp3 ;
  int res3 = 0 ;
  std::vector< std::shared_ptr< basis::IBasis > >::value_type tempshared3 ;
  std::vector< std::shared_ptr< basis::IBasis > >::iterator result;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__shared_ptrT_basis__IBasis_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vecBasis_insert" "', argument " "1"" of type '" "std::vector< std::shared_ptr< basis::IBasis > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::shared_ptr< basis::IBasis > > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vecBasis_insert" "', argument " "2"" of type '" "std::vector< std::shared_ptr< basis::IBasis > >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< std::shared_ptr< basis::IBasis > >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< std::shared_ptr< basis::IBasis > >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vecBasis_insert" "', argument " "2"" of type '" "std::vector< std::shared_ptr< basis::IBasis > >::iterator""'");
    }
  }
  {
    int newmem = 0;
    res3 = SWIG_ConvertPtrAndOwn(swig_obj[2], &argp3, SWIGTYPE_p_std__shared_ptrT_basis__IBasis_t,  0 , &newmem);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "vecBasis_insert" "', argument " "3"" of type '" "std::vector< std::shared_ptr< basis::IBasis > >::value_type const &""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      if (argp3) tempshared3 = *reinterpret_cast< std::vector< std::shared_ptr< basis::IBasis > >::value_type * >(argp3);
      delete reinterpret_cast< std::vector< std::shared_ptr< basis::IBasis > >::value_type * >(argp3);
      arg3 = &tempshared3;
    } else {
      arg3 = (argp3) ? reinterpret_cast< std::vector< std::shared_ptr< basis::IBasis > >::value_type * >(argp3) : &tempshared3;
    }
  }
  result = std_vector_Sl_std_shared_ptr_Sl_basis_IBasis_Sg__Sg__insert__SWIG_0(arg1,SWIG_STD_MOVE(arg2),(std::shared_ptr< basis::IBasis > const &)*arg3);
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< std::shared_ptr< basis::IBasis > >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vecBasis_insert__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< std::shared_ptr< basis::IBasis > > *arg1 = (std::vector< std::shared_ptr< basis::IBasis > > *) 0 ;
  std::vector< std::shared_ptr< basis::IBasis > >::iterator arg2 ;
  std::vector< std::shared_ptr< basis::IBasis > >::size_type arg3 ;
  std::vector< std::shared_ptr< basis::IBasis > >::value_type *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  size_t val3 ;
  int ecode3 = 0 ;
  void *argp4 ;
  int res4 = 0 ;
  std::vector< std::shared_ptr< basis::IBasis > >::value_type tempshared4 ;
  
  (void)self;
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__shared_ptrT_basis__IBasis_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vecBasis_insert" "', argument " "1"" of type '" "std::vector< std::shared_ptr< basis::IBasis > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::shared_ptr< basis::IBasis > > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vecBasis_insert" "', argument " "2"" of type '" "std::vector< std::shared_ptr< basis::IBasis > >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< std::shared_ptr< basis::IBasis > >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< std::shared_ptr< basis::IBasis > >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vecBasis_insert" "', argument " "2"" of type '" "std::vector< std::shared_ptr< basis::IBasis > >::iterator""'");
    }
  }
  ecode3 = SWIG_AsVal_size_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "vecBasis_insert" "', argument " "3"" of type '" "std::vector< std::shared_ptr< basis::IBasis > >::size_type""'");
  } 
  arg3 = static_cast< std::vector< std::shared_ptr< basis::IBasis > >::size_type >(val3);
  {
    int newmem = 0;
    res4 = SWIG_ConvertPtrAndOwn(swig_obj[3], &argp4, SWIGTYPE_p_std__shared_ptrT_basis__IBasis_t,  0 , &newmem);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "vecBasis_insert" "', argument " "4"" of type '" "std::vector< std::shared_ptr< basis::IBasis > >::value_type const &""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      if (argp4) tempshared4 = *reinterpret_cast< std::vector< std::shared_ptr< basis::IBasis > >::value_type * >(argp4);
      delete reinterpret_cast< std::vector< std::shared_ptr< basis::IBasis > >::value_type * >(argp4);
      arg4 = &tempshared4;
    } else {
      arg4 = (argp4) ? reinterpret_cast< std::vector< std::shared_ptr< basis::IBasis > >::value_type * >(argp4) : &tempshared4;
    }
  }
  std_vector_Sl_std_shared_ptr_Sl_basis_IBasis_Sg__Sg__insert__SWIG_1(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3),(std::shared_ptr< basis::IBasis > const &)*arg4);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vecBasis_insert(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "vecBasis_insert", 0, 4, argv))) SWIG_fail;
  --argc;
  if (argc == 3) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< std::shared_ptr< basis::IBasis >,std::allocator< std::shared_ptr< basis::IBasis > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< std::shared_ptr< basis::IBasis > >::iterator > *>(iter) != 0));
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_std__shared_ptrT_basis__IBasis_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_vecBasis_insert__SWIG_0(self, argc, argv);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< std::shared_ptr< basis::IBasis >,std::allocator< std::shared_ptr< basis::IBasis > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< std::shared_ptr< basis::IBasis > >::iterator > *>(iter) != 0));
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = SWIG_ConvertPtr(argv[3], 0, SWIGTYPE_p_std__shared_ptrT_basis__IBasis_t, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_vecBasis_insert__SWIG_1(self, argc, argv);
          }
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'vecBasis_insert'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< std::shared_ptr< basis::IBasis > >::insert(std::vector< std::shared_ptr< basis::IBasis > >::iterator,std::vector< std::shared_ptr< basis::IBasis > >::value_type const &)\n"
    "    std::vector< std::shared_ptr< basis::IBasis > >::insert(std::vector< std::shared_ptr< basis::IBasis > >::iterator,std::vector< std::shared_ptr< basis::IBasis > >::size_type,std::vector< std::shared_ptr< basis::IBasis > >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_vecBasis_reserve(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::shared_ptr< basis::IBasis > > *arg1 = (std::vector< std::shared_ptr< basis::IBasis > > *) 0 ;
  std::vector< std::shared_ptr< basis::IBasis > >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "vecBasis_reserve", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__shared_ptrT_basis__IBasis_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vecBasis_reserve" "', argument " "1"" of type '" "std::vector< std::shared_ptr< basis::IBasis > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::shared_ptr< basis::IBasis > > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vecBasis_reserve" "', argument " "2"" of type '" "std::vector< std::shared_ptr< basis::IBasis > >::size_type""'");
  } 
  arg2 = static_cast< std::vector< std::shared_ptr< basis::IBasis > >::size_type >(val2);
  (arg1)->reserve(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vecBasis_capacity(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::shared_ptr< basis::IBasis > > *arg1 = (std::vector< std::shared_ptr< basis::IBasis > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< std::shared_ptr< basis::IBasis > >::size_type result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__shared_ptrT_basis__IBasis_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vecBasis_capacity" "', argument " "1"" of type '" "std::vector< std::shared_ptr< basis::IBasis > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::shared_ptr< basis::IBasis > > * >(argp1);
  result = ((std::vector< std::shared_ptr< basis::IBasis > > const *)arg1)->capacity();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_vecBasis(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::shared_ptr< basis::IBasis > > *arg1 = (std::vector< std::shared_ptr< basis::IBasis > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__shared_ptrT_basis__IBasis_t_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_vecBasis" "', argument " "1"" of type '" "std::vector< std::shared_ptr< basis::IBasis > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::shared_ptr< basis::IBasis > > * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *vecBasis_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_std__vectorT_std__shared_ptrT_basis__IBasis_t_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *vecBasis_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN int Swig_var_basis_cartesian_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable basis_cartesian is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_basis_cartesian_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_size_t(static_cast< size_t >(basis::basis_cartesian));
  return pyobj;
}


SWIGINTERN int Swig_var_basis_cylindrical_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable basis_cylindrical is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_basis_cylindrical_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_size_t(static_cast< size_t >(basis::basis_cylindrical));
  return pyobj;
}


SWIGINTERN PyObject *_wrap_delete_IBasis(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  basis::IBasis *arg1 = (basis::IBasis *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< basis::IBasis > tempshared1 ;
  std::shared_ptr< basis::IBasis > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_basis__IBasis_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_IBasis" "', argument " "1"" of type '" "basis::IBasis *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  basis::IBasis > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  basis::IBasis > * >(argp1);
      arg1 = const_cast< basis::IBasis * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  basis::IBasis > * >(argp1);
      arg1 = const_cast< basis::IBasis * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  (void)arg1; delete smartarg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IBasis_Distance(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  basis::IBasis *arg1 = (basis::IBasis *) 0 ;
  basis::Vector *arg2 = 0 ;
  basis::Vector *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< basis::IBasis const > tempshared1 ;
  std::shared_ptr< basis::IBasis const > *smartarg1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject *swig_obj[3] ;
  basis::Scalar result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "IBasis_Distance", 3, 3, swig_obj)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_basis__IBasis_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IBasis_Distance" "', argument " "1"" of type '" "basis::IBasis const *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const basis::IBasis > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const basis::IBasis > * >(argp1);
      arg1 = const_cast< basis::IBasis * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const basis::IBasis > * >(argp1);
      arg1 = const_cast< basis::IBasis * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_eilig__Vector,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IBasis_Distance" "', argument " "2"" of type '" "basis::Vector const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "IBasis_Distance" "', argument " "2"" of type '" "basis::Vector const &""'"); 
  }
  arg2 = reinterpret_cast< basis::Vector * >(argp2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_eilig__Vector,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "IBasis_Distance" "', argument " "3"" of type '" "basis::Vector const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "IBasis_Distance" "', argument " "3"" of type '" "basis::Vector const &""'"); 
  }
  arg3 = reinterpret_cast< basis::Vector * >(argp3);
  result = (basis::Scalar)((basis::IBasis const *)arg1)->Distance((basis::Vector const &)*arg2,(basis::Vector const &)*arg3);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IBasis_DistanceSquared(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  basis::IBasis *arg1 = (basis::IBasis *) 0 ;
  basis::Vector *arg2 = 0 ;
  basis::Vector *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< basis::IBasis const > tempshared1 ;
  std::shared_ptr< basis::IBasis const > *smartarg1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject *swig_obj[3] ;
  basis::Scalar result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "IBasis_DistanceSquared", 3, 3, swig_obj)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_basis__IBasis_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IBasis_DistanceSquared" "', argument " "1"" of type '" "basis::IBasis const *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const basis::IBasis > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const basis::IBasis > * >(argp1);
      arg1 = const_cast< basis::IBasis * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const basis::IBasis > * >(argp1);
      arg1 = const_cast< basis::IBasis * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_eilig__Vector,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IBasis_DistanceSquared" "', argument " "2"" of type '" "basis::Vector const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "IBasis_DistanceSquared" "', argument " "2"" of type '" "basis::Vector const &""'"); 
  }
  arg2 = reinterpret_cast< basis::Vector * >(argp2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_eilig__Vector,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "IBasis_DistanceSquared" "', argument " "3"" of type '" "basis::Vector const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "IBasis_DistanceSquared" "', argument " "3"" of type '" "basis::Vector const &""'"); 
  }
  arg3 = reinterpret_cast< basis::Vector * >(argp3);
  result = (basis::Scalar)((basis::IBasis const *)arg1)->DistanceSquared((basis::Vector const &)*arg2,(basis::Vector const &)*arg3);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IBasis_LocalToGlobal(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  basis::IBasis *arg1 = (basis::IBasis *) 0 ;
  basis::Vector *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< basis::IBasis const > tempshared1 ;
  std::shared_ptr< basis::IBasis const > *smartarg1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  basis::Vector result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "IBasis_LocalToGlobal", 2, 2, swig_obj)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_basis__IBasis_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IBasis_LocalToGlobal" "', argument " "1"" of type '" "basis::IBasis const *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const basis::IBasis > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const basis::IBasis > * >(argp1);
      arg1 = const_cast< basis::IBasis * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const basis::IBasis > * >(argp1);
      arg1 = const_cast< basis::IBasis * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_eilig__Vector,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IBasis_LocalToGlobal" "', argument " "2"" of type '" "basis::Vector const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "IBasis_LocalToGlobal" "', argument " "2"" of type '" "basis::Vector const &""'"); 
  }
  arg2 = reinterpret_cast< basis::Vector * >(argp2);
  result = ((basis::IBasis const *)arg1)->LocalToGlobal((basis::Vector const &)*arg2);
  resultobj = SWIG_NewPointerObj((new basis::Vector(result)), SWIGTYPE_p_eilig__Vector, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IBasis_LocalToGlobalVector(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  basis::IBasis *arg1 = (basis::IBasis *) 0 ;
  basis::Vector *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< basis::IBasis const > tempshared1 ;
  std::shared_ptr< basis::IBasis const > *smartarg1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  basis::Vector result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "IBasis_LocalToGlobalVector", 2, 2, swig_obj)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_basis__IBasis_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IBasis_LocalToGlobalVector" "', argument " "1"" of type '" "basis::IBasis const *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const basis::IBasis > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const basis::IBasis > * >(argp1);
      arg1 = const_cast< basis::IBasis * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const basis::IBasis > * >(argp1);
      arg1 = const_cast< basis::IBasis * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_eilig__Vector,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IBasis_LocalToGlobalVector" "', argument " "2"" of type '" "basis::Vector const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "IBasis_LocalToGlobalVector" "', argument " "2"" of type '" "basis::Vector const &""'"); 
  }
  arg2 = reinterpret_cast< basis::Vector * >(argp2);
  result = ((basis::IBasis const *)arg1)->LocalToGlobalVector((basis::Vector const &)*arg2);
  resultobj = SWIG_NewPointerObj((new basis::Vector(result)), SWIGTYPE_p_eilig__Vector, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IBasis_GlobalToLocal(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  basis::IBasis *arg1 = (basis::IBasis *) 0 ;
  basis::Vector *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< basis::IBasis const > tempshared1 ;
  std::shared_ptr< basis::IBasis const > *smartarg1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  basis::Vector result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "IBasis_GlobalToLocal", 2, 2, swig_obj)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_basis__IBasis_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IBasis_GlobalToLocal" "', argument " "1"" of type '" "basis::IBasis const *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const basis::IBasis > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const basis::IBasis > * >(argp1);
      arg1 = const_cast< basis::IBasis * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const basis::IBasis > * >(argp1);
      arg1 = const_cast< basis::IBasis * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_eilig__Vector,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IBasis_GlobalToLocal" "', argument " "2"" of type '" "basis::Vector const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "IBasis_GlobalToLocal" "', argument " "2"" of type '" "basis::Vector const &""'"); 
  }
  arg2 = reinterpret_cast< basis::Vector * >(argp2);
  result = ((basis::IBasis const *)arg1)->GlobalToLocal((basis::Vector const &)*arg2);
  resultobj = SWIG_NewPointerObj((new basis::Vector(result)), SWIGTYPE_p_eilig__Vector, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IBasis_GlobalToLocalVector(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  basis::IBasis *arg1 = (basis::IBasis *) 0 ;
  basis::Vector *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< basis::IBasis const > tempshared1 ;
  std::shared_ptr< basis::IBasis const > *smartarg1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  basis::Vector result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "IBasis_GlobalToLocalVector", 2, 2, swig_obj)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_basis__IBasis_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IBasis_GlobalToLocalVector" "', argument " "1"" of type '" "basis::IBasis const *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const basis::IBasis > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const basis::IBasis > * >(argp1);
      arg1 = const_cast< basis::IBasis * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const basis::IBasis > * >(argp1);
      arg1 = const_cast< basis::IBasis * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_eilig__Vector,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IBasis_GlobalToLocalVector" "', argument " "2"" of type '" "basis::Vector const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "IBasis_GlobalToLocalVector" "', argument " "2"" of type '" "basis::Vector const &""'"); 
  }
  arg2 = reinterpret_cast< basis::Vector * >(argp2);
  result = ((basis::IBasis const *)arg1)->GlobalToLocalVector((basis::Vector const &)*arg2);
  resultobj = SWIG_NewPointerObj((new basis::Vector(result)), SWIGTYPE_p_eilig__Vector, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IBasis_GetBasis(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  basis::IBasis *arg1 = (basis::IBasis *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< basis::IBasis const > tempshared1 ;
  std::shared_ptr< basis::IBasis const > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  basis::Matrix *result = 0 ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_basis__IBasis_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IBasis_GetBasis" "', argument " "1"" of type '" "basis::IBasis const *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const basis::IBasis > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const basis::IBasis > * >(argp1);
      arg1 = const_cast< basis::IBasis * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const basis::IBasis > * >(argp1);
      arg1 = const_cast< basis::IBasis * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = (basis::Matrix *) &((basis::IBasis const *)arg1)->GetBasis();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_eilig__Matrix, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IBasis_GetOrigin(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  basis::IBasis *arg1 = (basis::IBasis *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< basis::IBasis const > tempshared1 ;
  std::shared_ptr< basis::IBasis const > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  basis::Vector *result = 0 ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_basis__IBasis_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IBasis_GetOrigin" "', argument " "1"" of type '" "basis::IBasis const *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const basis::IBasis > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const basis::IBasis > * >(argp1);
      arg1 = const_cast< basis::IBasis * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const basis::IBasis > * >(argp1);
      arg1 = const_cast< basis::IBasis * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = (basis::Vector *) &((basis::IBasis const *)arg1)->GetOrigin();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_eilig__Vector, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IBasis_GetTag(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  basis::IBasis *arg1 = (basis::IBasis *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< basis::IBasis const > tempshared1 ;
  std::shared_ptr< basis::IBasis const > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  basis::Tag result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_basis__IBasis_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IBasis_GetTag" "', argument " "1"" of type '" "basis::IBasis const *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const basis::IBasis > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const basis::IBasis > * >(argp1);
      arg1 = const_cast< basis::IBasis * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const basis::IBasis > * >(argp1);
      arg1 = const_cast< basis::IBasis * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = ((basis::IBasis const *)arg1)->GetTag();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IBasis_GetDim(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  basis::IBasis *arg1 = (basis::IBasis *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< basis::IBasis const > tempshared1 ;
  std::shared_ptr< basis::IBasis const > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  basis::Dimension result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_basis__IBasis_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IBasis_GetDim" "', argument " "1"" of type '" "basis::IBasis const *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const basis::IBasis > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const basis::IBasis > * >(argp1);
      arg1 = const_cast< basis::IBasis * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const basis::IBasis > * >(argp1);
      arg1 = const_cast< basis::IBasis * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = ((basis::IBasis const *)arg1)->GetDim();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IBasis_GetType(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  basis::IBasis *arg1 = (basis::IBasis *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< basis::IBasis const > tempshared1 ;
  std::shared_ptr< basis::IBasis const > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  basis::Type result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_basis__IBasis_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IBasis_GetType" "', argument " "1"" of type '" "basis::IBasis const *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const basis::IBasis > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const basis::IBasis > * >(argp1);
      arg1 = const_cast< basis::IBasis * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const basis::IBasis > * >(argp1);
      arg1 = const_cast< basis::IBasis * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = ((basis::IBasis const *)arg1)->GetType();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IBasis_Offset__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  basis::IBasis *arg1 = (basis::IBasis *) 0 ;
  basis::Vector *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< basis::IBasis > tempshared1 ;
  std::shared_ptr< basis::IBasis > *smartarg1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_basis__IBasis_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IBasis_Offset" "', argument " "1"" of type '" "basis::IBasis *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  basis::IBasis > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  basis::IBasis > * >(argp1);
      arg1 = const_cast< basis::IBasis * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  basis::IBasis > * >(argp1);
      arg1 = const_cast< basis::IBasis * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_eilig__Vector,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IBasis_Offset" "', argument " "2"" of type '" "basis::Vector const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "IBasis_Offset" "', argument " "2"" of type '" "basis::Vector const &""'"); 
  }
  arg2 = reinterpret_cast< basis::Vector * >(argp2);
  (arg1)->Offset((basis::Vector const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IBasis_Offset__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  basis::IBasis *arg1 = (basis::IBasis *) 0 ;
  basis::Axis *arg2 = 0 ;
  basis::Scalar arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< basis::IBasis > tempshared1 ;
  std::shared_ptr< basis::IBasis > *smartarg1 = 0 ;
  basis::Axis temp2 ;
  size_t val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_basis__IBasis_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IBasis_Offset" "', argument " "1"" of type '" "basis::IBasis *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  basis::IBasis > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  basis::IBasis > * >(argp1);
      arg1 = const_cast< basis::IBasis * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  basis::IBasis > * >(argp1);
      arg1 = const_cast< basis::IBasis * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IBasis_Offset" "', argument " "2"" of type '" "basis::Axis""'");
  } 
  temp2 = static_cast< basis::Axis >(val2);
  arg2 = &temp2;
  ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "IBasis_Offset" "', argument " "3"" of type '" "basis::Scalar""'");
  } 
  arg3 = static_cast< basis::Scalar >(val3);
  (arg1)->Offset((basis::Axis const &)*arg2,arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IBasis_Offset(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "IBasis_Offset", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_std__shared_ptrT_basis__IBasis_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_eilig__Vector, SWIG_POINTER_NO_NULL | 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_IBasis_Offset__SWIG_0(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_std__shared_ptrT_basis__IBasis_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_IBasis_Offset__SWIG_1(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'IBasis_Offset'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    basis::IBasis::Offset(basis::Vector const &)\n"
    "    basis::IBasis::Offset(basis::Axis const &,basis::Scalar)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_IBasis_Rotate(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  basis::IBasis *arg1 = (basis::IBasis *) 0 ;
  basis::Axis *arg2 = 0 ;
  basis::Scalar arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< basis::IBasis > tempshared1 ;
  std::shared_ptr< basis::IBasis > *smartarg1 = 0 ;
  basis::Axis temp2 ;
  size_t val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "IBasis_Rotate", 3, 3, swig_obj)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_basis__IBasis_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IBasis_Rotate" "', argument " "1"" of type '" "basis::IBasis *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  basis::IBasis > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  basis::IBasis > * >(argp1);
      arg1 = const_cast< basis::IBasis * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  basis::IBasis > * >(argp1);
      arg1 = const_cast< basis::IBasis * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IBasis_Rotate" "', argument " "2"" of type '" "basis::Axis""'");
  } 
  temp2 = static_cast< basis::Axis >(val2);
  arg2 = &temp2;
  ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "IBasis_Rotate" "', argument " "3"" of type '" "basis::Scalar""'");
  } 
  arg3 = static_cast< basis::Scalar >(val3);
  (arg1)->Rotate((basis::Axis const &)*arg2,arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IBasis_SetTag(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  basis::IBasis *arg1 = (basis::IBasis *) 0 ;
  basis::Tag arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< basis::IBasis > tempshared1 ;
  std::shared_ptr< basis::IBasis > *smartarg1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "IBasis_SetTag", 2, 2, swig_obj)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_basis__IBasis_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IBasis_SetTag" "', argument " "1"" of type '" "basis::IBasis *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  basis::IBasis > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  basis::IBasis > * >(argp1);
      arg1 = const_cast< basis::IBasis * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  basis::IBasis > * >(argp1);
      arg1 = const_cast< basis::IBasis * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IBasis_SetTag" "', argument " "2"" of type '" "basis::Tag""'");
  } 
  arg2 = static_cast< basis::Tag >(val2);
  (arg1)->SetTag(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *IBasis_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_std__shared_ptrT_basis__IBasis_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_CreateBasisCartesian__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **SWIGUNUSEDPARM(swig_obj)) {
  PyObject *resultobj = 0;
  basis::CartesianPtr result;
  
  (void)self;
  if ((nobjs < 0) || (nobjs > 0)) SWIG_fail;
  result = basis::CreateBasisCartesian();
  {
    std::shared_ptr<  basis::Cartesian > *smartresult = result ? new std::shared_ptr<  basis::Cartesian >(result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_std__shared_ptrT_basis__Cartesian_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CreateBasisCartesian__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  basis::Tag arg1 ;
  size_t val1 ;
  int ecode1 = 0 ;
  basis::CartesianPtr result;
  
  (void)self;
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "CreateBasisCartesian" "', argument " "1"" of type '" "basis::Tag""'");
  } 
  arg1 = static_cast< basis::Tag >(val1);
  result = basis::CreateBasisCartesian(SWIG_STD_MOVE(arg1));
  {
    std::shared_ptr<  basis::Cartesian > *smartresult = result ? new std::shared_ptr<  basis::Cartesian >(result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_std__shared_ptrT_basis__Cartesian_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CreateBasisCartesian(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "CreateBasisCartesian", 0, 1, argv))) SWIG_fail;
  --argc;
  if (argc == 0) {
    return _wrap_CreateBasisCartesian__SWIG_0(self, argc, argv);
  }
  if (argc == 1) {
    int _v = 0;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_CreateBasisCartesian__SWIG_1(self, argc, argv);
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'CreateBasisCartesian'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    basis::CreateBasisCartesian()\n"
    "    basis::CreateBasisCartesian(basis::Tag)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_Cartesian(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  basis::Cartesian *arg1 = (basis::Cartesian *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< basis::Cartesian > tempshared1 ;
  std::shared_ptr< basis::Cartesian > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_basis__Cartesian_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Cartesian" "', argument " "1"" of type '" "basis::Cartesian *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  basis::Cartesian > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  basis::Cartesian > * >(argp1);
      arg1 = const_cast< basis::Cartesian * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  basis::Cartesian > * >(argp1);
      arg1 = const_cast< basis::Cartesian * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  (void)arg1; delete smartarg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Cartesian_Create(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  basis::CartesianPtr result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "Cartesian_Create", 0, 0, 0)) SWIG_fail;
  result = basis::Cartesian::Create();
  {
    std::shared_ptr<  basis::Cartesian > *smartresult = result ? new std::shared_ptr<  basis::Cartesian >(result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_std__shared_ptrT_basis__Cartesian_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Cartesian_GetPtr__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  basis::Cartesian *arg1 = (basis::Cartesian *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< basis::Cartesian > tempshared1 ;
  std::shared_ptr< basis::Cartesian > *smartarg1 = 0 ;
  basis::CartesianPtr result;
  
  (void)self;
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_basis__Cartesian_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Cartesian_GetPtr" "', argument " "1"" of type '" "basis::Cartesian *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  basis::Cartesian > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  basis::Cartesian > * >(argp1);
      arg1 = const_cast< basis::Cartesian * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  basis::Cartesian > * >(argp1);
      arg1 = const_cast< basis::Cartesian * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = (arg1)->GetPtr();
  {
    std::shared_ptr<  basis::Cartesian > *smartresult = result ? new std::shared_ptr<  basis::Cartesian >(result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_std__shared_ptrT_basis__Cartesian_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Cartesian_GetPtr__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  basis::Cartesian *arg1 = (basis::Cartesian *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< basis::Cartesian const > tempshared1 ;
  std::shared_ptr< basis::Cartesian const > *smartarg1 = 0 ;
  basis::ConstCartesianPtr result;
  
  (void)self;
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_basis__Cartesian_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Cartesian_GetPtr" "', argument " "1"" of type '" "basis::Cartesian const *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const basis::Cartesian > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const basis::Cartesian > * >(argp1);
      arg1 = const_cast< basis::Cartesian * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const basis::Cartesian > * >(argp1);
      arg1 = const_cast< basis::Cartesian * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = ((basis::Cartesian const *)arg1)->GetPtr();
  {
    std::shared_ptr< const basis::Cartesian > *smartresult = result ? new std::shared_ptr< const basis::Cartesian >(result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_std__shared_ptrT_basis__Cartesian_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Cartesian_GetPtr(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "Cartesian_GetPtr", 0, 1, argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    int _v = 0;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_std__shared_ptrT_basis__Cartesian_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_Cartesian_GetPtr__SWIG_0(self, argc, argv);
    }
  }
  if (argc == 1) {
    int _v = 0;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_std__shared_ptrT_basis__Cartesian_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_Cartesian_GetPtr__SWIG_1(self, argc, argv);
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'Cartesian_GetPtr'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    basis::Cartesian::GetPtr()\n"
    "    basis::Cartesian::GetPtr() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Cartesian_Distance(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  basis::Cartesian *arg1 = (basis::Cartesian *) 0 ;
  basis::Vector *arg2 = 0 ;
  basis::Vector *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< basis::Cartesian const > tempshared1 ;
  std::shared_ptr< basis::Cartesian const > *smartarg1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject *swig_obj[3] ;
  basis::Scalar result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "Cartesian_Distance", 3, 3, swig_obj)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_basis__Cartesian_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Cartesian_Distance" "', argument " "1"" of type '" "basis::Cartesian const *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const basis::Cartesian > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const basis::Cartesian > * >(argp1);
      arg1 = const_cast< basis::Cartesian * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const basis::Cartesian > * >(argp1);
      arg1 = const_cast< basis::Cartesian * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_eilig__Vector,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Cartesian_Distance" "', argument " "2"" of type '" "basis::Vector const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Cartesian_Distance" "', argument " "2"" of type '" "basis::Vector const &""'"); 
  }
  arg2 = reinterpret_cast< basis::Vector * >(argp2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_eilig__Vector,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Cartesian_Distance" "', argument " "3"" of type '" "basis::Vector const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Cartesian_Distance" "', argument " "3"" of type '" "basis::Vector const &""'"); 
  }
  arg3 = reinterpret_cast< basis::Vector * >(argp3);
  result = (basis::Scalar)((basis::Cartesian const *)arg1)->Distance((basis::Vector const &)*arg2,(basis::Vector const &)*arg3);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Cartesian_DistanceSquared(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  basis::Cartesian *arg1 = (basis::Cartesian *) 0 ;
  basis::Vector *arg2 = 0 ;
  basis::Vector *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< basis::Cartesian const > tempshared1 ;
  std::shared_ptr< basis::Cartesian const > *smartarg1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject *swig_obj[3] ;
  basis::Scalar result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "Cartesian_DistanceSquared", 3, 3, swig_obj)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_basis__Cartesian_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Cartesian_DistanceSquared" "', argument " "1"" of type '" "basis::Cartesian const *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const basis::Cartesian > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const basis::Cartesian > * >(argp1);
      arg1 = const_cast< basis::Cartesian * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const basis::Cartesian > * >(argp1);
      arg1 = const_cast< basis::Cartesian * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_eilig__Vector,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Cartesian_DistanceSquared" "', argument " "2"" of type '" "basis::Vector const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Cartesian_DistanceSquared" "', argument " "2"" of type '" "basis::Vector const &""'"); 
  }
  arg2 = reinterpret_cast< basis::Vector * >(argp2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_eilig__Vector,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Cartesian_DistanceSquared" "', argument " "3"" of type '" "basis::Vector const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Cartesian_DistanceSquared" "', argument " "3"" of type '" "basis::Vector const &""'"); 
  }
  arg3 = reinterpret_cast< basis::Vector * >(argp3);
  result = (basis::Scalar)((basis::Cartesian const *)arg1)->DistanceSquared((basis::Vector const &)*arg2,(basis::Vector const &)*arg3);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Cartesian_LocalToGlobal(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  basis::Cartesian *arg1 = (basis::Cartesian *) 0 ;
  basis::Vector *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< basis::Cartesian const > tempshared1 ;
  std::shared_ptr< basis::Cartesian const > *smartarg1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  basis::Vector result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "Cartesian_LocalToGlobal", 2, 2, swig_obj)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_basis__Cartesian_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Cartesian_LocalToGlobal" "', argument " "1"" of type '" "basis::Cartesian const *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const basis::Cartesian > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const basis::Cartesian > * >(argp1);
      arg1 = const_cast< basis::Cartesian * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const basis::Cartesian > * >(argp1);
      arg1 = const_cast< basis::Cartesian * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_eilig__Vector,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Cartesian_LocalToGlobal" "', argument " "2"" of type '" "basis::Vector const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Cartesian_LocalToGlobal" "', argument " "2"" of type '" "basis::Vector const &""'"); 
  }
  arg2 = reinterpret_cast< basis::Vector * >(argp2);
  result = ((basis::Cartesian const *)arg1)->LocalToGlobal((basis::Vector const &)*arg2);
  resultobj = SWIG_NewPointerObj((new basis::Vector(result)), SWIGTYPE_p_eilig__Vector, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Cartesian_LocalToGlobalVector(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  basis::Cartesian *arg1 = (basis::Cartesian *) 0 ;
  basis::Vector *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< basis::Cartesian const > tempshared1 ;
  std::shared_ptr< basis::Cartesian const > *smartarg1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  basis::Vector result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "Cartesian_LocalToGlobalVector", 2, 2, swig_obj)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_basis__Cartesian_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Cartesian_LocalToGlobalVector" "', argument " "1"" of type '" "basis::Cartesian const *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const basis::Cartesian > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const basis::Cartesian > * >(argp1);
      arg1 = const_cast< basis::Cartesian * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const basis::Cartesian > * >(argp1);
      arg1 = const_cast< basis::Cartesian * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_eilig__Vector,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Cartesian_LocalToGlobalVector" "', argument " "2"" of type '" "basis::Vector const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Cartesian_LocalToGlobalVector" "', argument " "2"" of type '" "basis::Vector const &""'"); 
  }
  arg2 = reinterpret_cast< basis::Vector * >(argp2);
  result = ((basis::Cartesian const *)arg1)->LocalToGlobalVector((basis::Vector const &)*arg2);
  resultobj = SWIG_NewPointerObj((new basis::Vector(result)), SWIGTYPE_p_eilig__Vector, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Cartesian_GlobalToLocal(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  basis::Cartesian *arg1 = (basis::Cartesian *) 0 ;
  basis::Vector *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< basis::Cartesian const > tempshared1 ;
  std::shared_ptr< basis::Cartesian const > *smartarg1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  basis::Vector result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "Cartesian_GlobalToLocal", 2, 2, swig_obj)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_basis__Cartesian_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Cartesian_GlobalToLocal" "', argument " "1"" of type '" "basis::Cartesian const *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const basis::Cartesian > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const basis::Cartesian > * >(argp1);
      arg1 = const_cast< basis::Cartesian * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const basis::Cartesian > * >(argp1);
      arg1 = const_cast< basis::Cartesian * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_eilig__Vector,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Cartesian_GlobalToLocal" "', argument " "2"" of type '" "basis::Vector const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Cartesian_GlobalToLocal" "', argument " "2"" of type '" "basis::Vector const &""'"); 
  }
  arg2 = reinterpret_cast< basis::Vector * >(argp2);
  result = ((basis::Cartesian const *)arg1)->GlobalToLocal((basis::Vector const &)*arg2);
  resultobj = SWIG_NewPointerObj((new basis::Vector(result)), SWIGTYPE_p_eilig__Vector, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Cartesian_GlobalToLocalVector(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  basis::Cartesian *arg1 = (basis::Cartesian *) 0 ;
  basis::Vector *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< basis::Cartesian const > tempshared1 ;
  std::shared_ptr< basis::Cartesian const > *smartarg1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  basis::Vector result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "Cartesian_GlobalToLocalVector", 2, 2, swig_obj)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_basis__Cartesian_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Cartesian_GlobalToLocalVector" "', argument " "1"" of type '" "basis::Cartesian const *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const basis::Cartesian > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const basis::Cartesian > * >(argp1);
      arg1 = const_cast< basis::Cartesian * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const basis::Cartesian > * >(argp1);
      arg1 = const_cast< basis::Cartesian * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_eilig__Vector,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Cartesian_GlobalToLocalVector" "', argument " "2"" of type '" "basis::Vector const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Cartesian_GlobalToLocalVector" "', argument " "2"" of type '" "basis::Vector const &""'"); 
  }
  arg2 = reinterpret_cast< basis::Vector * >(argp2);
  result = ((basis::Cartesian const *)arg1)->GlobalToLocalVector((basis::Vector const &)*arg2);
  resultobj = SWIG_NewPointerObj((new basis::Vector(result)), SWIGTYPE_p_eilig__Vector, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Cartesian_GetBasis(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  basis::Cartesian *arg1 = (basis::Cartesian *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< basis::Cartesian const > tempshared1 ;
  std::shared_ptr< basis::Cartesian const > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  basis::Matrix *result = 0 ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_basis__Cartesian_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Cartesian_GetBasis" "', argument " "1"" of type '" "basis::Cartesian const *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const basis::Cartesian > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const basis::Cartesian > * >(argp1);
      arg1 = const_cast< basis::Cartesian * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const basis::Cartesian > * >(argp1);
      arg1 = const_cast< basis::Cartesian * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = (basis::Matrix *) &((basis::Cartesian const *)arg1)->GetBasis();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_eilig__Matrix, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Cartesian_GetOrigin(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  basis::Cartesian *arg1 = (basis::Cartesian *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< basis::Cartesian const > tempshared1 ;
  std::shared_ptr< basis::Cartesian const > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  basis::Vector *result = 0 ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_basis__Cartesian_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Cartesian_GetOrigin" "', argument " "1"" of type '" "basis::Cartesian const *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const basis::Cartesian > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const basis::Cartesian > * >(argp1);
      arg1 = const_cast< basis::Cartesian * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const basis::Cartesian > * >(argp1);
      arg1 = const_cast< basis::Cartesian * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = (basis::Vector *) &((basis::Cartesian const *)arg1)->GetOrigin();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_eilig__Vector, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Cartesian_GetTag(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  basis::Cartesian *arg1 = (basis::Cartesian *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< basis::Cartesian const > tempshared1 ;
  std::shared_ptr< basis::Cartesian const > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  basis::Tag result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_basis__Cartesian_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Cartesian_GetTag" "', argument " "1"" of type '" "basis::Cartesian const *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const basis::Cartesian > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const basis::Cartesian > * >(argp1);
      arg1 = const_cast< basis::Cartesian * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const basis::Cartesian > * >(argp1);
      arg1 = const_cast< basis::Cartesian * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = ((basis::Cartesian const *)arg1)->GetTag();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Cartesian_GetDim(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  basis::Cartesian *arg1 = (basis::Cartesian *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< basis::Cartesian const > tempshared1 ;
  std::shared_ptr< basis::Cartesian const > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  basis::Dimension result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_basis__Cartesian_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Cartesian_GetDim" "', argument " "1"" of type '" "basis::Cartesian const *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const basis::Cartesian > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const basis::Cartesian > * >(argp1);
      arg1 = const_cast< basis::Cartesian * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const basis::Cartesian > * >(argp1);
      arg1 = const_cast< basis::Cartesian * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = ((basis::Cartesian const *)arg1)->GetDim();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Cartesian_GetType(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  basis::Cartesian *arg1 = (basis::Cartesian *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< basis::Cartesian const > tempshared1 ;
  std::shared_ptr< basis::Cartesian const > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  basis::Type result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_basis__Cartesian_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Cartesian_GetType" "', argument " "1"" of type '" "basis::Cartesian const *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const basis::Cartesian > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const basis::Cartesian > * >(argp1);
      arg1 = const_cast< basis::Cartesian * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const basis::Cartesian > * >(argp1);
      arg1 = const_cast< basis::Cartesian * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = ((basis::Cartesian const *)arg1)->GetType();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Cartesian_Offset__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  basis::Cartesian *arg1 = (basis::Cartesian *) 0 ;
  basis::Vector *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< basis::Cartesian > tempshared1 ;
  std::shared_ptr< basis::Cartesian > *smartarg1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_basis__Cartesian_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Cartesian_Offset" "', argument " "1"" of type '" "basis::Cartesian *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  basis::Cartesian > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  basis::Cartesian > * >(argp1);
      arg1 = const_cast< basis::Cartesian * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  basis::Cartesian > * >(argp1);
      arg1 = const_cast< basis::Cartesian * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_eilig__Vector,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Cartesian_Offset" "', argument " "2"" of type '" "basis::Vector const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Cartesian_Offset" "', argument " "2"" of type '" "basis::Vector const &""'"); 
  }
  arg2 = reinterpret_cast< basis::Vector * >(argp2);
  (arg1)->Offset((basis::Vector const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Cartesian_Offset__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  basis::Cartesian *arg1 = (basis::Cartesian *) 0 ;
  basis::Axis *arg2 = 0 ;
  basis::Scalar arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< basis::Cartesian > tempshared1 ;
  std::shared_ptr< basis::Cartesian > *smartarg1 = 0 ;
  basis::Axis temp2 ;
  size_t val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_basis__Cartesian_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Cartesian_Offset" "', argument " "1"" of type '" "basis::Cartesian *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  basis::Cartesian > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  basis::Cartesian > * >(argp1);
      arg1 = const_cast< basis::Cartesian * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  basis::Cartesian > * >(argp1);
      arg1 = const_cast< basis::Cartesian * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Cartesian_Offset" "', argument " "2"" of type '" "basis::Axis""'");
  } 
  temp2 = static_cast< basis::Axis >(val2);
  arg2 = &temp2;
  ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Cartesian_Offset" "', argument " "3"" of type '" "basis::Scalar""'");
  } 
  arg3 = static_cast< basis::Scalar >(val3);
  (arg1)->Offset((basis::Axis const &)*arg2,arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Cartesian_Offset(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "Cartesian_Offset", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_std__shared_ptrT_basis__Cartesian_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_eilig__Vector, SWIG_POINTER_NO_NULL | 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Cartesian_Offset__SWIG_0(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_std__shared_ptrT_basis__Cartesian_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_Cartesian_Offset__SWIG_1(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'Cartesian_Offset'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    basis::Cartesian::Offset(basis::Vector const &)\n"
    "    basis::Cartesian::Offset(basis::Axis const &,basis::Scalar)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Cartesian_Rotate(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  basis::Cartesian *arg1 = (basis::Cartesian *) 0 ;
  basis::Axis *arg2 = 0 ;
  basis::Scalar arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< basis::Cartesian > tempshared1 ;
  std::shared_ptr< basis::Cartesian > *smartarg1 = 0 ;
  basis::Axis temp2 ;
  size_t val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "Cartesian_Rotate", 3, 3, swig_obj)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_basis__Cartesian_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Cartesian_Rotate" "', argument " "1"" of type '" "basis::Cartesian *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  basis::Cartesian > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  basis::Cartesian > * >(argp1);
      arg1 = const_cast< basis::Cartesian * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  basis::Cartesian > * >(argp1);
      arg1 = const_cast< basis::Cartesian * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Cartesian_Rotate" "', argument " "2"" of type '" "basis::Axis""'");
  } 
  temp2 = static_cast< basis::Axis >(val2);
  arg2 = &temp2;
  ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Cartesian_Rotate" "', argument " "3"" of type '" "basis::Scalar""'");
  } 
  arg3 = static_cast< basis::Scalar >(val3);
  (arg1)->Rotate((basis::Axis const &)*arg2,arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Cartesian_SetTag(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  basis::Cartesian *arg1 = (basis::Cartesian *) 0 ;
  basis::Tag arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< basis::Cartesian > tempshared1 ;
  std::shared_ptr< basis::Cartesian > *smartarg1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "Cartesian_SetTag", 2, 2, swig_obj)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_basis__Cartesian_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Cartesian_SetTag" "', argument " "1"" of type '" "basis::Cartesian *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  basis::Cartesian > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  basis::Cartesian > * >(argp1);
      arg1 = const_cast< basis::Cartesian * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  basis::Cartesian > * >(argp1);
      arg1 = const_cast< basis::Cartesian * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Cartesian_SetTag" "', argument " "2"" of type '" "basis::Tag""'");
  } 
  arg2 = static_cast< basis::Tag >(val2);
  (arg1)->SetTag(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *Cartesian_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_std__shared_ptrT_basis__Cartesian_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_CreateBasisCylindrical__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **SWIGUNUSEDPARM(swig_obj)) {
  PyObject *resultobj = 0;
  basis::CylindricalPtr result;
  
  (void)self;
  if ((nobjs < 0) || (nobjs > 0)) SWIG_fail;
  result = basis::CreateBasisCylindrical();
  {
    std::shared_ptr<  basis::Cylindrical > *smartresult = result ? new std::shared_ptr<  basis::Cylindrical >(result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_std__shared_ptrT_basis__Cylindrical_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CreateBasisCylindrical__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  basis::Tag arg1 ;
  size_t val1 ;
  int ecode1 = 0 ;
  basis::CylindricalPtr result;
  
  (void)self;
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "CreateBasisCylindrical" "', argument " "1"" of type '" "basis::Tag""'");
  } 
  arg1 = static_cast< basis::Tag >(val1);
  result = basis::CreateBasisCylindrical(SWIG_STD_MOVE(arg1));
  {
    std::shared_ptr<  basis::Cylindrical > *smartresult = result ? new std::shared_ptr<  basis::Cylindrical >(result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_std__shared_ptrT_basis__Cylindrical_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CreateBasisCylindrical(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "CreateBasisCylindrical", 0, 1, argv))) SWIG_fail;
  --argc;
  if (argc == 0) {
    return _wrap_CreateBasisCylindrical__SWIG_0(self, argc, argv);
  }
  if (argc == 1) {
    int _v = 0;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_CreateBasisCylindrical__SWIG_1(self, argc, argv);
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'CreateBasisCylindrical'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    basis::CreateBasisCylindrical()\n"
    "    basis::CreateBasisCylindrical(basis::Tag)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_Cylindrical(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  basis::Cylindrical *arg1 = (basis::Cylindrical *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< basis::Cylindrical > tempshared1 ;
  std::shared_ptr< basis::Cylindrical > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_basis__Cylindrical_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Cylindrical" "', argument " "1"" of type '" "basis::Cylindrical *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  basis::Cylindrical > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  basis::Cylindrical > * >(argp1);
      arg1 = const_cast< basis::Cylindrical * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  basis::Cylindrical > * >(argp1);
      arg1 = const_cast< basis::Cylindrical * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  (void)arg1; delete smartarg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Cylindrical_Create(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  basis::CylindricalPtr result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "Cylindrical_Create", 0, 0, 0)) SWIG_fail;
  result = basis::Cylindrical::Create();
  {
    std::shared_ptr<  basis::Cylindrical > *smartresult = result ? new std::shared_ptr<  basis::Cylindrical >(result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_std__shared_ptrT_basis__Cylindrical_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Cylindrical_GetPtr__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  basis::Cylindrical *arg1 = (basis::Cylindrical *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< basis::Cylindrical > tempshared1 ;
  std::shared_ptr< basis::Cylindrical > *smartarg1 = 0 ;
  basis::CylindricalPtr result;
  
  (void)self;
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_basis__Cylindrical_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Cylindrical_GetPtr" "', argument " "1"" of type '" "basis::Cylindrical *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  basis::Cylindrical > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  basis::Cylindrical > * >(argp1);
      arg1 = const_cast< basis::Cylindrical * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  basis::Cylindrical > * >(argp1);
      arg1 = const_cast< basis::Cylindrical * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = (arg1)->GetPtr();
  {
    std::shared_ptr<  basis::Cylindrical > *smartresult = result ? new std::shared_ptr<  basis::Cylindrical >(result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_std__shared_ptrT_basis__Cylindrical_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Cylindrical_GetPtr__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  basis::Cylindrical *arg1 = (basis::Cylindrical *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< basis::Cylindrical const > tempshared1 ;
  std::shared_ptr< basis::Cylindrical const > *smartarg1 = 0 ;
  basis::ConstCylindricalPtr result;
  
  (void)self;
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_basis__Cylindrical_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Cylindrical_GetPtr" "', argument " "1"" of type '" "basis::Cylindrical const *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const basis::Cylindrical > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const basis::Cylindrical > * >(argp1);
      arg1 = const_cast< basis::Cylindrical * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const basis::Cylindrical > * >(argp1);
      arg1 = const_cast< basis::Cylindrical * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = ((basis::Cylindrical const *)arg1)->GetPtr();
  {
    std::shared_ptr< const basis::Cylindrical > *smartresult = result ? new std::shared_ptr< const basis::Cylindrical >(result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_std__shared_ptrT_basis__Cylindrical_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Cylindrical_GetPtr(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "Cylindrical_GetPtr", 0, 1, argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    int _v = 0;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_std__shared_ptrT_basis__Cylindrical_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_Cylindrical_GetPtr__SWIG_0(self, argc, argv);
    }
  }
  if (argc == 1) {
    int _v = 0;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_std__shared_ptrT_basis__Cylindrical_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_Cylindrical_GetPtr__SWIG_1(self, argc, argv);
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'Cylindrical_GetPtr'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    basis::Cylindrical::GetPtr()\n"
    "    basis::Cylindrical::GetPtr() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Cylindrical_Distance(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  basis::Cylindrical *arg1 = (basis::Cylindrical *) 0 ;
  basis::Vector *arg2 = 0 ;
  basis::Vector *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< basis::Cylindrical const > tempshared1 ;
  std::shared_ptr< basis::Cylindrical const > *smartarg1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject *swig_obj[3] ;
  basis::Scalar result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "Cylindrical_Distance", 3, 3, swig_obj)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_basis__Cylindrical_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Cylindrical_Distance" "', argument " "1"" of type '" "basis::Cylindrical const *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const basis::Cylindrical > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const basis::Cylindrical > * >(argp1);
      arg1 = const_cast< basis::Cylindrical * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const basis::Cylindrical > * >(argp1);
      arg1 = const_cast< basis::Cylindrical * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_eilig__Vector,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Cylindrical_Distance" "', argument " "2"" of type '" "basis::Vector const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Cylindrical_Distance" "', argument " "2"" of type '" "basis::Vector const &""'"); 
  }
  arg2 = reinterpret_cast< basis::Vector * >(argp2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_eilig__Vector,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Cylindrical_Distance" "', argument " "3"" of type '" "basis::Vector const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Cylindrical_Distance" "', argument " "3"" of type '" "basis::Vector const &""'"); 
  }
  arg3 = reinterpret_cast< basis::Vector * >(argp3);
  result = (basis::Scalar)((basis::Cylindrical const *)arg1)->Distance((basis::Vector const &)*arg2,(basis::Vector const &)*arg3);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Cylindrical_DistanceSquared(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  basis::Cylindrical *arg1 = (basis::Cylindrical *) 0 ;
  basis::Vector *arg2 = 0 ;
  basis::Vector *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< basis::Cylindrical const > tempshared1 ;
  std::shared_ptr< basis::Cylindrical const > *smartarg1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject *swig_obj[3] ;
  basis::Scalar result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "Cylindrical_DistanceSquared", 3, 3, swig_obj)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_basis__Cylindrical_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Cylindrical_DistanceSquared" "', argument " "1"" of type '" "basis::Cylindrical const *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const basis::Cylindrical > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const basis::Cylindrical > * >(argp1);
      arg1 = const_cast< basis::Cylindrical * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const basis::Cylindrical > * >(argp1);
      arg1 = const_cast< basis::Cylindrical * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_eilig__Vector,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Cylindrical_DistanceSquared" "', argument " "2"" of type '" "basis::Vector const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Cylindrical_DistanceSquared" "', argument " "2"" of type '" "basis::Vector const &""'"); 
  }
  arg2 = reinterpret_cast< basis::Vector * >(argp2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_eilig__Vector,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Cylindrical_DistanceSquared" "', argument " "3"" of type '" "basis::Vector const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Cylindrical_DistanceSquared" "', argument " "3"" of type '" "basis::Vector const &""'"); 
  }
  arg3 = reinterpret_cast< basis::Vector * >(argp3);
  result = (basis::Scalar)((basis::Cylindrical const *)arg1)->DistanceSquared((basis::Vector const &)*arg2,(basis::Vector const &)*arg3);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Cylindrical_LocalToGlobal(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  basis::Cylindrical *arg1 = (basis::Cylindrical *) 0 ;
  basis::Vector *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< basis::Cylindrical const > tempshared1 ;
  std::shared_ptr< basis::Cylindrical const > *smartarg1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  basis::Vector result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "Cylindrical_LocalToGlobal", 2, 2, swig_obj)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_basis__Cylindrical_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Cylindrical_LocalToGlobal" "', argument " "1"" of type '" "basis::Cylindrical const *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const basis::Cylindrical > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const basis::Cylindrical > * >(argp1);
      arg1 = const_cast< basis::Cylindrical * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const basis::Cylindrical > * >(argp1);
      arg1 = const_cast< basis::Cylindrical * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_eilig__Vector,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Cylindrical_LocalToGlobal" "', argument " "2"" of type '" "basis::Vector const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Cylindrical_LocalToGlobal" "', argument " "2"" of type '" "basis::Vector const &""'"); 
  }
  arg2 = reinterpret_cast< basis::Vector * >(argp2);
  result = ((basis::Cylindrical const *)arg1)->LocalToGlobal((basis::Vector const &)*arg2);
  resultobj = SWIG_NewPointerObj((new basis::Vector(result)), SWIGTYPE_p_eilig__Vector, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Cylindrical_LocalToGlobalVector(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  basis::Cylindrical *arg1 = (basis::Cylindrical *) 0 ;
  basis::Vector *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< basis::Cylindrical const > tempshared1 ;
  std::shared_ptr< basis::Cylindrical const > *smartarg1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  basis::Vector result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "Cylindrical_LocalToGlobalVector", 2, 2, swig_obj)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_basis__Cylindrical_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Cylindrical_LocalToGlobalVector" "', argument " "1"" of type '" "basis::Cylindrical const *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const basis::Cylindrical > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const basis::Cylindrical > * >(argp1);
      arg1 = const_cast< basis::Cylindrical * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const basis::Cylindrical > * >(argp1);
      arg1 = const_cast< basis::Cylindrical * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_eilig__Vector,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Cylindrical_LocalToGlobalVector" "', argument " "2"" of type '" "basis::Vector const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Cylindrical_LocalToGlobalVector" "', argument " "2"" of type '" "basis::Vector const &""'"); 
  }
  arg2 = reinterpret_cast< basis::Vector * >(argp2);
  result = ((basis::Cylindrical const *)arg1)->LocalToGlobalVector((basis::Vector const &)*arg2);
  resultobj = SWIG_NewPointerObj((new basis::Vector(result)), SWIGTYPE_p_eilig__Vector, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Cylindrical_GlobalToLocal(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  basis::Cylindrical *arg1 = (basis::Cylindrical *) 0 ;
  basis::Vector *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< basis::Cylindrical const > tempshared1 ;
  std::shared_ptr< basis::Cylindrical const > *smartarg1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  basis::Vector result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "Cylindrical_GlobalToLocal", 2, 2, swig_obj)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_basis__Cylindrical_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Cylindrical_GlobalToLocal" "', argument " "1"" of type '" "basis::Cylindrical const *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const basis::Cylindrical > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const basis::Cylindrical > * >(argp1);
      arg1 = const_cast< basis::Cylindrical * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const basis::Cylindrical > * >(argp1);
      arg1 = const_cast< basis::Cylindrical * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_eilig__Vector,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Cylindrical_GlobalToLocal" "', argument " "2"" of type '" "basis::Vector const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Cylindrical_GlobalToLocal" "', argument " "2"" of type '" "basis::Vector const &""'"); 
  }
  arg2 = reinterpret_cast< basis::Vector * >(argp2);
  result = ((basis::Cylindrical const *)arg1)->GlobalToLocal((basis::Vector const &)*arg2);
  resultobj = SWIG_NewPointerObj((new basis::Vector(result)), SWIGTYPE_p_eilig__Vector, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Cylindrical_GlobalToLocalVector(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  basis::Cylindrical *arg1 = (basis::Cylindrical *) 0 ;
  basis::Vector *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< basis::Cylindrical const > tempshared1 ;
  std::shared_ptr< basis::Cylindrical const > *smartarg1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  basis::Vector result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "Cylindrical_GlobalToLocalVector", 2, 2, swig_obj)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_basis__Cylindrical_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Cylindrical_GlobalToLocalVector" "', argument " "1"" of type '" "basis::Cylindrical const *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const basis::Cylindrical > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const basis::Cylindrical > * >(argp1);
      arg1 = const_cast< basis::Cylindrical * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const basis::Cylindrical > * >(argp1);
      arg1 = const_cast< basis::Cylindrical * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_eilig__Vector,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Cylindrical_GlobalToLocalVector" "', argument " "2"" of type '" "basis::Vector const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Cylindrical_GlobalToLocalVector" "', argument " "2"" of type '" "basis::Vector const &""'"); 
  }
  arg2 = reinterpret_cast< basis::Vector * >(argp2);
  result = ((basis::Cylindrical const *)arg1)->GlobalToLocalVector((basis::Vector const &)*arg2);
  resultobj = SWIG_NewPointerObj((new basis::Vector(result)), SWIGTYPE_p_eilig__Vector, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Cylindrical_GetBasis(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  basis::Cylindrical *arg1 = (basis::Cylindrical *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< basis::Cylindrical const > tempshared1 ;
  std::shared_ptr< basis::Cylindrical const > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  basis::Matrix *result = 0 ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_basis__Cylindrical_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Cylindrical_GetBasis" "', argument " "1"" of type '" "basis::Cylindrical const *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const basis::Cylindrical > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const basis::Cylindrical > * >(argp1);
      arg1 = const_cast< basis::Cylindrical * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const basis::Cylindrical > * >(argp1);
      arg1 = const_cast< basis::Cylindrical * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = (basis::Matrix *) &((basis::Cylindrical const *)arg1)->GetBasis();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_eilig__Matrix, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Cylindrical_GetOrigin(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  basis::Cylindrical *arg1 = (basis::Cylindrical *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< basis::Cylindrical const > tempshared1 ;
  std::shared_ptr< basis::Cylindrical const > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  basis::Vector *result = 0 ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_basis__Cylindrical_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Cylindrical_GetOrigin" "', argument " "1"" of type '" "basis::Cylindrical const *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const basis::Cylindrical > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const basis::Cylindrical > * >(argp1);
      arg1 = const_cast< basis::Cylindrical * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const basis::Cylindrical > * >(argp1);
      arg1 = const_cast< basis::Cylindrical * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = (basis::Vector *) &((basis::Cylindrical const *)arg1)->GetOrigin();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_eilig__Vector, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Cylindrical_GetTag(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  basis::Cylindrical *arg1 = (basis::Cylindrical *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< basis::Cylindrical const > tempshared1 ;
  std::shared_ptr< basis::Cylindrical const > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  basis::Tag result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_basis__Cylindrical_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Cylindrical_GetTag" "', argument " "1"" of type '" "basis::Cylindrical const *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const basis::Cylindrical > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const basis::Cylindrical > * >(argp1);
      arg1 = const_cast< basis::Cylindrical * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const basis::Cylindrical > * >(argp1);
      arg1 = const_cast< basis::Cylindrical * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = ((basis::Cylindrical const *)arg1)->GetTag();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Cylindrical_GetDim(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  basis::Cylindrical *arg1 = (basis::Cylindrical *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< basis::Cylindrical const > tempshared1 ;
  std::shared_ptr< basis::Cylindrical const > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  basis::Dimension result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_basis__Cylindrical_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Cylindrical_GetDim" "', argument " "1"" of type '" "basis::Cylindrical const *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const basis::Cylindrical > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const basis::Cylindrical > * >(argp1);
      arg1 = const_cast< basis::Cylindrical * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const basis::Cylindrical > * >(argp1);
      arg1 = const_cast< basis::Cylindrical * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = ((basis::Cylindrical const *)arg1)->GetDim();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Cylindrical_GetType(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  basis::Cylindrical *arg1 = (basis::Cylindrical *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< basis::Cylindrical const > tempshared1 ;
  std::shared_ptr< basis::Cylindrical const > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  basis::Type result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_basis__Cylindrical_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Cylindrical_GetType" "', argument " "1"" of type '" "basis::Cylindrical const *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const basis::Cylindrical > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const basis::Cylindrical > * >(argp1);
      arg1 = const_cast< basis::Cylindrical * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const basis::Cylindrical > * >(argp1);
      arg1 = const_cast< basis::Cylindrical * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = ((basis::Cylindrical const *)arg1)->GetType();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Cylindrical_Offset__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  basis::Cylindrical *arg1 = (basis::Cylindrical *) 0 ;
  basis::Vector *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< basis::Cylindrical > tempshared1 ;
  std::shared_ptr< basis::Cylindrical > *smartarg1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_basis__Cylindrical_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Cylindrical_Offset" "', argument " "1"" of type '" "basis::Cylindrical *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  basis::Cylindrical > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  basis::Cylindrical > * >(argp1);
      arg1 = const_cast< basis::Cylindrical * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  basis::Cylindrical > * >(argp1);
      arg1 = const_cast< basis::Cylindrical * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_eilig__Vector,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Cylindrical_Offset" "', argument " "2"" of type '" "basis::Vector const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Cylindrical_Offset" "', argument " "2"" of type '" "basis::Vector const &""'"); 
  }
  arg2 = reinterpret_cast< basis::Vector * >(argp2);
  (arg1)->Offset((basis::Vector const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Cylindrical_Offset__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  basis::Cylindrical *arg1 = (basis::Cylindrical *) 0 ;
  basis::Axis *arg2 = 0 ;
  basis::Scalar arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< basis::Cylindrical > tempshared1 ;
  std::shared_ptr< basis::Cylindrical > *smartarg1 = 0 ;
  basis::Axis temp2 ;
  size_t val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_basis__Cylindrical_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Cylindrical_Offset" "', argument " "1"" of type '" "basis::Cylindrical *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  basis::Cylindrical > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  basis::Cylindrical > * >(argp1);
      arg1 = const_cast< basis::Cylindrical * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  basis::Cylindrical > * >(argp1);
      arg1 = const_cast< basis::Cylindrical * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Cylindrical_Offset" "', argument " "2"" of type '" "basis::Axis""'");
  } 
  temp2 = static_cast< basis::Axis >(val2);
  arg2 = &temp2;
  ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Cylindrical_Offset" "', argument " "3"" of type '" "basis::Scalar""'");
  } 
  arg3 = static_cast< basis::Scalar >(val3);
  (arg1)->Offset((basis::Axis const &)*arg2,arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Cylindrical_Offset(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "Cylindrical_Offset", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_std__shared_ptrT_basis__Cylindrical_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_eilig__Vector, SWIG_POINTER_NO_NULL | 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Cylindrical_Offset__SWIG_0(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_std__shared_ptrT_basis__Cylindrical_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_Cylindrical_Offset__SWIG_1(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'Cylindrical_Offset'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    basis::Cylindrical::Offset(basis::Vector const &)\n"
    "    basis::Cylindrical::Offset(basis::Axis const &,basis::Scalar)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Cylindrical_Rotate(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  basis::Cylindrical *arg1 = (basis::Cylindrical *) 0 ;
  basis::Axis *arg2 = 0 ;
  basis::Scalar arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< basis::Cylindrical > tempshared1 ;
  std::shared_ptr< basis::Cylindrical > *smartarg1 = 0 ;
  basis::Axis temp2 ;
  size_t val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "Cylindrical_Rotate", 3, 3, swig_obj)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_basis__Cylindrical_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Cylindrical_Rotate" "', argument " "1"" of type '" "basis::Cylindrical *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  basis::Cylindrical > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  basis::Cylindrical > * >(argp1);
      arg1 = const_cast< basis::Cylindrical * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  basis::Cylindrical > * >(argp1);
      arg1 = const_cast< basis::Cylindrical * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Cylindrical_Rotate" "', argument " "2"" of type '" "basis::Axis""'");
  } 
  temp2 = static_cast< basis::Axis >(val2);
  arg2 = &temp2;
  ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Cylindrical_Rotate" "', argument " "3"" of type '" "basis::Scalar""'");
  } 
  arg3 = static_cast< basis::Scalar >(val3);
  (arg1)->Rotate((basis::Axis const &)*arg2,arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Cylindrical_SetTag(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  basis::Cylindrical *arg1 = (basis::Cylindrical *) 0 ;
  basis::Tag arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< basis::Cylindrical > tempshared1 ;
  std::shared_ptr< basis::Cylindrical > *smartarg1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "Cylindrical_SetTag", 2, 2, swig_obj)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_basis__Cylindrical_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Cylindrical_SetTag" "', argument " "1"" of type '" "basis::Cylindrical *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  basis::Cylindrical > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  basis::Cylindrical > * >(argp1);
      arg1 = const_cast< basis::Cylindrical * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  basis::Cylindrical > * >(argp1);
      arg1 = const_cast< basis::Cylindrical * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Cylindrical_SetTag" "', argument " "2"" of type '" "basis::Tag""'");
  } 
  arg2 = static_cast< basis::Tag >(val2);
  (arg1)->SetTag(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *Cylindrical_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_std__shared_ptrT_basis__Cylindrical_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN int Swig_var_timer_stationary_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable timer_stationary is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_timer_stationary_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_size_t(static_cast< size_t >(dive::timers::timer_stationary));
  return pyobj;
}


SWIGINTERN int Swig_var_timer_stepped_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable timer_stepped is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_timer_stepped_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_size_t(static_cast< size_t >(dive::timers::timer_stepped));
  return pyobj;
}


SWIGINTERN PyObject *_wrap_delete_ITimer(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  dive::timers::ITimer *arg1 = (dive::timers::ITimer *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< dive::timers::ITimer > tempshared1 ;
  std::shared_ptr< dive::timers::ITimer > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_dive__timers__ITimer_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ITimer" "', argument " "1"" of type '" "dive::timers::ITimer *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  dive::timers::ITimer > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  dive::timers::ITimer > * >(argp1);
      arg1 = const_cast< dive::timers::ITimer * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  dive::timers::ITimer > * >(argp1);
      arg1 = const_cast< dive::timers::ITimer * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  (void)arg1; delete smartarg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ITimer_GetCurrentTime(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  dive::timers::ITimer *arg1 = (dive::timers::ITimer *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< dive::timers::ITimer const > tempshared1 ;
  std::shared_ptr< dive::timers::ITimer const > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  Scalar result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_dive__timers__ITimer_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ITimer_GetCurrentTime" "', argument " "1"" of type '" "dive::timers::ITimer const *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const dive::timers::ITimer > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const dive::timers::ITimer > * >(argp1);
      arg1 = const_cast< dive::timers::ITimer * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const dive::timers::ITimer > * >(argp1);
      arg1 = const_cast< dive::timers::ITimer * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = (Scalar)((dive::timers::ITimer const *)arg1)->GetCurrentTime();
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ITimer_GetInitialTime(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  dive::timers::ITimer *arg1 = (dive::timers::ITimer *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< dive::timers::ITimer const > tempshared1 ;
  std::shared_ptr< dive::timers::ITimer const > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  Scalar result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_dive__timers__ITimer_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ITimer_GetInitialTime" "', argument " "1"" of type '" "dive::timers::ITimer const *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const dive::timers::ITimer > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const dive::timers::ITimer > * >(argp1);
      arg1 = const_cast< dive::timers::ITimer * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const dive::timers::ITimer > * >(argp1);
      arg1 = const_cast< dive::timers::ITimer * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = (Scalar)((dive::timers::ITimer const *)arg1)->GetInitialTime();
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ITimer_GetEndTime(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  dive::timers::ITimer *arg1 = (dive::timers::ITimer *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< dive::timers::ITimer const > tempshared1 ;
  std::shared_ptr< dive::timers::ITimer const > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  Scalar result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_dive__timers__ITimer_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ITimer_GetEndTime" "', argument " "1"" of type '" "dive::timers::ITimer const *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const dive::timers::ITimer > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const dive::timers::ITimer > * >(argp1);
      arg1 = const_cast< dive::timers::ITimer * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const dive::timers::ITimer > * >(argp1);
      arg1 = const_cast< dive::timers::ITimer * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = (Scalar)((dive::timers::ITimer const *)arg1)->GetEndTime();
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ITimer_GetStepSize(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  dive::timers::ITimer *arg1 = (dive::timers::ITimer *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< dive::timers::ITimer const > tempshared1 ;
  std::shared_ptr< dive::timers::ITimer const > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  Scalar result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_dive__timers__ITimer_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ITimer_GetStepSize" "', argument " "1"" of type '" "dive::timers::ITimer const *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const dive::timers::ITimer > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const dive::timers::ITimer > * >(argp1);
      arg1 = const_cast< dive::timers::ITimer * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const dive::timers::ITimer > * >(argp1);
      arg1 = const_cast< dive::timers::ITimer * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = (Scalar)((dive::timers::ITimer const *)arg1)->GetStepSize();
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ITimer_GetStepNumber(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  dive::timers::ITimer *arg1 = (dive::timers::ITimer *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< dive::timers::ITimer const > tempshared1 ;
  std::shared_ptr< dive::timers::ITimer const > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  Number result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_dive__timers__ITimer_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ITimer_GetStepNumber" "', argument " "1"" of type '" "dive::timers::ITimer const *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const dive::timers::ITimer > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const dive::timers::ITimer > * >(argp1);
      arg1 = const_cast< dive::timers::ITimer * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const dive::timers::ITimer > * >(argp1);
      arg1 = const_cast< dive::timers::ITimer * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = ((dive::timers::ITimer const *)arg1)->GetStepNumber();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ITimer_GetType(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  dive::timers::ITimer *arg1 = (dive::timers::ITimer *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< dive::timers::ITimer const > tempshared1 ;
  std::shared_ptr< dive::timers::ITimer const > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  Type result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_dive__timers__ITimer_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ITimer_GetType" "', argument " "1"" of type '" "dive::timers::ITimer const *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const dive::timers::ITimer > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const dive::timers::ITimer > * >(argp1);
      arg1 = const_cast< dive::timers::ITimer * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const dive::timers::ITimer > * >(argp1);
      arg1 = const_cast< dive::timers::ITimer * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = ((dive::timers::ITimer const *)arg1)->GetType();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ITimer_GetTag(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  dive::timers::ITimer *arg1 = (dive::timers::ITimer *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< dive::timers::ITimer const > tempshared1 ;
  std::shared_ptr< dive::timers::ITimer const > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  Tag result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_dive__timers__ITimer_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ITimer_GetTag" "', argument " "1"" of type '" "dive::timers::ITimer const *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const dive::timers::ITimer > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const dive::timers::ITimer > * >(argp1);
      arg1 = const_cast< dive::timers::ITimer * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const dive::timers::ITimer > * >(argp1);
      arg1 = const_cast< dive::timers::ITimer * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = ((dive::timers::ITimer const *)arg1)->GetTag();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ITimer_SetNextStep(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  dive::timers::ITimer *arg1 = (dive::timers::ITimer *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< dive::timers::ITimer > tempshared1 ;
  std::shared_ptr< dive::timers::ITimer > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_dive__timers__ITimer_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ITimer_SetNextStep" "', argument " "1"" of type '" "dive::timers::ITimer *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  dive::timers::ITimer > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  dive::timers::ITimer > * >(argp1);
      arg1 = const_cast< dive::timers::ITimer * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  dive::timers::ITimer > * >(argp1);
      arg1 = const_cast< dive::timers::ITimer * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  (arg1)->SetNextStep();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ITimer_SetInitialTime(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  dive::timers::ITimer *arg1 = (dive::timers::ITimer *) 0 ;
  Scalar arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< dive::timers::ITimer > tempshared1 ;
  std::shared_ptr< dive::timers::ITimer > *smartarg1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "ITimer_SetInitialTime", 2, 2, swig_obj)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_dive__timers__ITimer_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ITimer_SetInitialTime" "', argument " "1"" of type '" "dive::timers::ITimer *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  dive::timers::ITimer > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  dive::timers::ITimer > * >(argp1);
      arg1 = const_cast< dive::timers::ITimer * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  dive::timers::ITimer > * >(argp1);
      arg1 = const_cast< dive::timers::ITimer * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ITimer_SetInitialTime" "', argument " "2"" of type '" "Scalar""'");
  } 
  arg2 = static_cast< Scalar >(val2);
  (arg1)->SetInitialTime(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ITimer_SetEndTime(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  dive::timers::ITimer *arg1 = (dive::timers::ITimer *) 0 ;
  Scalar arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< dive::timers::ITimer > tempshared1 ;
  std::shared_ptr< dive::timers::ITimer > *smartarg1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "ITimer_SetEndTime", 2, 2, swig_obj)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_dive__timers__ITimer_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ITimer_SetEndTime" "', argument " "1"" of type '" "dive::timers::ITimer *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  dive::timers::ITimer > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  dive::timers::ITimer > * >(argp1);
      arg1 = const_cast< dive::timers::ITimer * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  dive::timers::ITimer > * >(argp1);
      arg1 = const_cast< dive::timers::ITimer * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ITimer_SetEndTime" "', argument " "2"" of type '" "Scalar""'");
  } 
  arg2 = static_cast< Scalar >(val2);
  (arg1)->SetEndTime(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ITimer_SetStepSize(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  dive::timers::ITimer *arg1 = (dive::timers::ITimer *) 0 ;
  Scalar arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< dive::timers::ITimer > tempshared1 ;
  std::shared_ptr< dive::timers::ITimer > *smartarg1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "ITimer_SetStepSize", 2, 2, swig_obj)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_dive__timers__ITimer_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ITimer_SetStepSize" "', argument " "1"" of type '" "dive::timers::ITimer *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  dive::timers::ITimer > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  dive::timers::ITimer > * >(argp1);
      arg1 = const_cast< dive::timers::ITimer * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  dive::timers::ITimer > * >(argp1);
      arg1 = const_cast< dive::timers::ITimer * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ITimer_SetStepSize" "', argument " "2"" of type '" "Scalar""'");
  } 
  arg2 = static_cast< Scalar >(val2);
  (arg1)->SetStepSize(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ITimer_SetTag(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  dive::timers::ITimer *arg1 = (dive::timers::ITimer *) 0 ;
  Tag arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< dive::timers::ITimer > tempshared1 ;
  std::shared_ptr< dive::timers::ITimer > *smartarg1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "ITimer_SetTag", 2, 2, swig_obj)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_dive__timers__ITimer_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ITimer_SetTag" "', argument " "1"" of type '" "dive::timers::ITimer *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  dive::timers::ITimer > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  dive::timers::ITimer > * >(argp1);
      arg1 = const_cast< dive::timers::ITimer * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  dive::timers::ITimer > * >(argp1);
      arg1 = const_cast< dive::timers::ITimer * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ITimer_SetTag" "', argument " "2"" of type '" "Tag""'");
  } 
  arg2 = static_cast< Tag >(val2);
  (arg1)->SetTag(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *ITimer_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_std__shared_ptrT_dive__timers__ITimer_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_CreateTimerStationary__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **SWIGUNUSEDPARM(swig_obj)) {
  PyObject *resultobj = 0;
  TimerStationaryPtr result;
  
  (void)self;
  if ((nobjs < 0) || (nobjs > 0)) SWIG_fail;
  result = dive::timers::CreateTimerStationary();
  {
    std::shared_ptr<  dive::timers::TimerStationary > *smartresult = result ? new std::shared_ptr<  dive::timers::TimerStationary >(result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_std__shared_ptrT_dive__timers__TimerStationary_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CreateTimerStationary__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  Tag arg1 ;
  Scalar arg2 ;
  size_t val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  TimerStationaryPtr result;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "CreateTimerStationary" "', argument " "1"" of type '" "Tag""'");
  } 
  arg1 = static_cast< Tag >(val1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CreateTimerStationary" "', argument " "2"" of type '" "Scalar""'");
  } 
  arg2 = static_cast< Scalar >(val2);
  result = dive::timers::CreateTimerStationary(SWIG_STD_MOVE(arg1),arg2);
  {
    std::shared_ptr<  dive::timers::TimerStationary > *smartresult = result ? new std::shared_ptr<  dive::timers::TimerStationary >(result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_std__shared_ptrT_dive__timers__TimerStationary_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CreateTimerStationary(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "CreateTimerStationary", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 0) {
    return _wrap_CreateTimerStationary__SWIG_0(self, argc, argv);
  }
  if (argc == 2) {
    int _v = 0;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_CreateTimerStationary__SWIG_1(self, argc, argv);
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'CreateTimerStationary'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    dive::timers::CreateTimerStationary()\n"
    "    dive::timers::CreateTimerStationary(Tag,Scalar)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_TimerStationary(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  dive::timers::TimerStationary *arg1 = (dive::timers::TimerStationary *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< dive::timers::TimerStationary > tempshared1 ;
  std::shared_ptr< dive::timers::TimerStationary > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_dive__timers__TimerStationary_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_TimerStationary" "', argument " "1"" of type '" "dive::timers::TimerStationary *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  dive::timers::TimerStationary > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  dive::timers::TimerStationary > * >(argp1);
      arg1 = const_cast< dive::timers::TimerStationary * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  dive::timers::TimerStationary > * >(argp1);
      arg1 = const_cast< dive::timers::TimerStationary * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  (void)arg1; delete smartarg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TimerStationary_Create(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  TimerStationaryPtr result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "TimerStationary_Create", 0, 0, 0)) SWIG_fail;
  result = dive::timers::TimerStationary::Create();
  {
    std::shared_ptr<  dive::timers::TimerStationary > *smartresult = result ? new std::shared_ptr<  dive::timers::TimerStationary >(result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_std__shared_ptrT_dive__timers__TimerStationary_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TimerStationary_GetPtr__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  dive::timers::TimerStationary *arg1 = (dive::timers::TimerStationary *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< dive::timers::TimerStationary > tempshared1 ;
  std::shared_ptr< dive::timers::TimerStationary > *smartarg1 = 0 ;
  TimerStationaryPtr result;
  
  (void)self;
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_dive__timers__TimerStationary_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TimerStationary_GetPtr" "', argument " "1"" of type '" "dive::timers::TimerStationary *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  dive::timers::TimerStationary > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  dive::timers::TimerStationary > * >(argp1);
      arg1 = const_cast< dive::timers::TimerStationary * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  dive::timers::TimerStationary > * >(argp1);
      arg1 = const_cast< dive::timers::TimerStationary * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = (arg1)->GetPtr();
  {
    std::shared_ptr<  dive::timers::TimerStationary > *smartresult = result ? new std::shared_ptr<  dive::timers::TimerStationary >(result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_std__shared_ptrT_dive__timers__TimerStationary_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TimerStationary_GetPtr__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  dive::timers::TimerStationary *arg1 = (dive::timers::TimerStationary *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< dive::timers::TimerStationary const > tempshared1 ;
  std::shared_ptr< dive::timers::TimerStationary const > *smartarg1 = 0 ;
  ConstTimerStationaryPtr result;
  
  (void)self;
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_dive__timers__TimerStationary_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TimerStationary_GetPtr" "', argument " "1"" of type '" "dive::timers::TimerStationary const *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const dive::timers::TimerStationary > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const dive::timers::TimerStationary > * >(argp1);
      arg1 = const_cast< dive::timers::TimerStationary * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const dive::timers::TimerStationary > * >(argp1);
      arg1 = const_cast< dive::timers::TimerStationary * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = ((dive::timers::TimerStationary const *)arg1)->GetPtr();
  {
    std::shared_ptr< const dive::timers::TimerStationary > *smartresult = result ? new std::shared_ptr< const dive::timers::TimerStationary >(result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_std__shared_ptrT_dive__timers__TimerStationary_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TimerStationary_GetPtr(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "TimerStationary_GetPtr", 0, 1, argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    int _v = 0;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_std__shared_ptrT_dive__timers__TimerStationary_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_TimerStationary_GetPtr__SWIG_0(self, argc, argv);
    }
  }
  if (argc == 1) {
    int _v = 0;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_std__shared_ptrT_dive__timers__TimerStationary_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_TimerStationary_GetPtr__SWIG_1(self, argc, argv);
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'TimerStationary_GetPtr'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    dive::timers::TimerStationary::GetPtr()\n"
    "    dive::timers::TimerStationary::GetPtr() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_TimerStationary_GetCurrentTime(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  dive::timers::TimerStationary *arg1 = (dive::timers::TimerStationary *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< dive::timers::TimerStationary const > tempshared1 ;
  std::shared_ptr< dive::timers::TimerStationary const > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  Scalar result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_dive__timers__TimerStationary_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TimerStationary_GetCurrentTime" "', argument " "1"" of type '" "dive::timers::TimerStationary const *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const dive::timers::TimerStationary > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const dive::timers::TimerStationary > * >(argp1);
      arg1 = const_cast< dive::timers::TimerStationary * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const dive::timers::TimerStationary > * >(argp1);
      arg1 = const_cast< dive::timers::TimerStationary * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = (Scalar)((dive::timers::TimerStationary const *)arg1)->GetCurrentTime();
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TimerStationary_GetInitialTime(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  dive::timers::TimerStationary *arg1 = (dive::timers::TimerStationary *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< dive::timers::TimerStationary const > tempshared1 ;
  std::shared_ptr< dive::timers::TimerStationary const > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  Scalar result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_dive__timers__TimerStationary_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TimerStationary_GetInitialTime" "', argument " "1"" of type '" "dive::timers::TimerStationary const *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const dive::timers::TimerStationary > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const dive::timers::TimerStationary > * >(argp1);
      arg1 = const_cast< dive::timers::TimerStationary * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const dive::timers::TimerStationary > * >(argp1);
      arg1 = const_cast< dive::timers::TimerStationary * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = (Scalar)((dive::timers::TimerStationary const *)arg1)->GetInitialTime();
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TimerStationary_GetEndTime(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  dive::timers::TimerStationary *arg1 = (dive::timers::TimerStationary *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< dive::timers::TimerStationary const > tempshared1 ;
  std::shared_ptr< dive::timers::TimerStationary const > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  Scalar result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_dive__timers__TimerStationary_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TimerStationary_GetEndTime" "', argument " "1"" of type '" "dive::timers::TimerStationary const *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const dive::timers::TimerStationary > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const dive::timers::TimerStationary > * >(argp1);
      arg1 = const_cast< dive::timers::TimerStationary * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const dive::timers::TimerStationary > * >(argp1);
      arg1 = const_cast< dive::timers::TimerStationary * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = (Scalar)((dive::timers::TimerStationary const *)arg1)->GetEndTime();
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TimerStationary_GetStepSize(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  dive::timers::TimerStationary *arg1 = (dive::timers::TimerStationary *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< dive::timers::TimerStationary const > tempshared1 ;
  std::shared_ptr< dive::timers::TimerStationary const > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  Scalar result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_dive__timers__TimerStationary_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TimerStationary_GetStepSize" "', argument " "1"" of type '" "dive::timers::TimerStationary const *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const dive::timers::TimerStationary > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const dive::timers::TimerStationary > * >(argp1);
      arg1 = const_cast< dive::timers::TimerStationary * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const dive::timers::TimerStationary > * >(argp1);
      arg1 = const_cast< dive::timers::TimerStationary * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = (Scalar)((dive::timers::TimerStationary const *)arg1)->GetStepSize();
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TimerStationary_GetStepNumber(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  dive::timers::TimerStationary *arg1 = (dive::timers::TimerStationary *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< dive::timers::TimerStationary const > tempshared1 ;
  std::shared_ptr< dive::timers::TimerStationary const > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  Number result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_dive__timers__TimerStationary_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TimerStationary_GetStepNumber" "', argument " "1"" of type '" "dive::timers::TimerStationary const *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const dive::timers::TimerStationary > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const dive::timers::TimerStationary > * >(argp1);
      arg1 = const_cast< dive::timers::TimerStationary * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const dive::timers::TimerStationary > * >(argp1);
      arg1 = const_cast< dive::timers::TimerStationary * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = ((dive::timers::TimerStationary const *)arg1)->GetStepNumber();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TimerStationary_GetType(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  dive::timers::TimerStationary *arg1 = (dive::timers::TimerStationary *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< dive::timers::TimerStationary const > tempshared1 ;
  std::shared_ptr< dive::timers::TimerStationary const > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  Type result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_dive__timers__TimerStationary_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TimerStationary_GetType" "', argument " "1"" of type '" "dive::timers::TimerStationary const *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const dive::timers::TimerStationary > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const dive::timers::TimerStationary > * >(argp1);
      arg1 = const_cast< dive::timers::TimerStationary * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const dive::timers::TimerStationary > * >(argp1);
      arg1 = const_cast< dive::timers::TimerStationary * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = ((dive::timers::TimerStationary const *)arg1)->GetType();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TimerStationary_GetTag(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  dive::timers::TimerStationary *arg1 = (dive::timers::TimerStationary *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< dive::timers::TimerStationary const > tempshared1 ;
  std::shared_ptr< dive::timers::TimerStationary const > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  Tag result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_dive__timers__TimerStationary_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TimerStationary_GetTag" "', argument " "1"" of type '" "dive::timers::TimerStationary const *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const dive::timers::TimerStationary > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const dive::timers::TimerStationary > * >(argp1);
      arg1 = const_cast< dive::timers::TimerStationary * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const dive::timers::TimerStationary > * >(argp1);
      arg1 = const_cast< dive::timers::TimerStationary * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = ((dive::timers::TimerStationary const *)arg1)->GetTag();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TimerStationary_SetNextStep(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  dive::timers::TimerStationary *arg1 = (dive::timers::TimerStationary *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< dive::timers::TimerStationary > tempshared1 ;
  std::shared_ptr< dive::timers::TimerStationary > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_dive__timers__TimerStationary_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TimerStationary_SetNextStep" "', argument " "1"" of type '" "dive::timers::TimerStationary *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  dive::timers::TimerStationary > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  dive::timers::TimerStationary > * >(argp1);
      arg1 = const_cast< dive::timers::TimerStationary * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  dive::timers::TimerStationary > * >(argp1);
      arg1 = const_cast< dive::timers::TimerStationary * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  (arg1)->SetNextStep();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TimerStationary_SetInitialTime(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  dive::timers::TimerStationary *arg1 = (dive::timers::TimerStationary *) 0 ;
  Scalar arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< dive::timers::TimerStationary > tempshared1 ;
  std::shared_ptr< dive::timers::TimerStationary > *smartarg1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "TimerStationary_SetInitialTime", 2, 2, swig_obj)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_dive__timers__TimerStationary_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TimerStationary_SetInitialTime" "', argument " "1"" of type '" "dive::timers::TimerStationary *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  dive::timers::TimerStationary > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  dive::timers::TimerStationary > * >(argp1);
      arg1 = const_cast< dive::timers::TimerStationary * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  dive::timers::TimerStationary > * >(argp1);
      arg1 = const_cast< dive::timers::TimerStationary * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TimerStationary_SetInitialTime" "', argument " "2"" of type '" "Scalar""'");
  } 
  arg2 = static_cast< Scalar >(val2);
  (arg1)->SetInitialTime(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TimerStationary_SetEndTime(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  dive::timers::TimerStationary *arg1 = (dive::timers::TimerStationary *) 0 ;
  Scalar arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< dive::timers::TimerStationary > tempshared1 ;
  std::shared_ptr< dive::timers::TimerStationary > *smartarg1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "TimerStationary_SetEndTime", 2, 2, swig_obj)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_dive__timers__TimerStationary_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TimerStationary_SetEndTime" "', argument " "1"" of type '" "dive::timers::TimerStationary *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  dive::timers::TimerStationary > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  dive::timers::TimerStationary > * >(argp1);
      arg1 = const_cast< dive::timers::TimerStationary * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  dive::timers::TimerStationary > * >(argp1);
      arg1 = const_cast< dive::timers::TimerStationary * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TimerStationary_SetEndTime" "', argument " "2"" of type '" "Scalar""'");
  } 
  arg2 = static_cast< Scalar >(val2);
  (arg1)->SetEndTime(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TimerStationary_SetStepSize(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  dive::timers::TimerStationary *arg1 = (dive::timers::TimerStationary *) 0 ;
  Scalar arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< dive::timers::TimerStationary > tempshared1 ;
  std::shared_ptr< dive::timers::TimerStationary > *smartarg1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "TimerStationary_SetStepSize", 2, 2, swig_obj)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_dive__timers__TimerStationary_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TimerStationary_SetStepSize" "', argument " "1"" of type '" "dive::timers::TimerStationary *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  dive::timers::TimerStationary > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  dive::timers::TimerStationary > * >(argp1);
      arg1 = const_cast< dive::timers::TimerStationary * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  dive::timers::TimerStationary > * >(argp1);
      arg1 = const_cast< dive::timers::TimerStationary * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TimerStationary_SetStepSize" "', argument " "2"" of type '" "Scalar""'");
  } 
  arg2 = static_cast< Scalar >(val2);
  (arg1)->SetStepSize(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TimerStationary_SetTag(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  dive::timers::TimerStationary *arg1 = (dive::timers::TimerStationary *) 0 ;
  Tag arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< dive::timers::TimerStationary > tempshared1 ;
  std::shared_ptr< dive::timers::TimerStationary > *smartarg1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "TimerStationary_SetTag", 2, 2, swig_obj)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_dive__timers__TimerStationary_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TimerStationary_SetTag" "', argument " "1"" of type '" "dive::timers::TimerStationary *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  dive::timers::TimerStationary > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  dive::timers::TimerStationary > * >(argp1);
      arg1 = const_cast< dive::timers::TimerStationary * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  dive::timers::TimerStationary > * >(argp1);
      arg1 = const_cast< dive::timers::TimerStationary * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TimerStationary_SetTag" "', argument " "2"" of type '" "Tag""'");
  } 
  arg2 = static_cast< Tag >(val2);
  (arg1)->SetTag(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *TimerStationary_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_std__shared_ptrT_dive__timers__TimerStationary_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_CreateTimerStepped__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **SWIGUNUSEDPARM(swig_obj)) {
  PyObject *resultobj = 0;
  TimerSteppedPtr result;
  
  (void)self;
  if ((nobjs < 0) || (nobjs > 0)) SWIG_fail;
  result = dive::timers::CreateTimerStepped();
  {
    std::shared_ptr<  dive::timers::TimerStepped > *smartresult = result ? new std::shared_ptr<  dive::timers::TimerStepped >(result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_std__shared_ptrT_dive__timers__TimerStepped_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CreateTimerStepped__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  Tag arg1 ;
  Scalar arg2 ;
  Scalar arg3 ;
  Scalar arg4 ;
  size_t val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  TimerSteppedPtr result;
  
  (void)self;
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "CreateTimerStepped" "', argument " "1"" of type '" "Tag""'");
  } 
  arg1 = static_cast< Tag >(val1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CreateTimerStepped" "', argument " "2"" of type '" "Scalar""'");
  } 
  arg2 = static_cast< Scalar >(val2);
  ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "CreateTimerStepped" "', argument " "3"" of type '" "Scalar""'");
  } 
  arg3 = static_cast< Scalar >(val3);
  ecode4 = SWIG_AsVal_double(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "CreateTimerStepped" "', argument " "4"" of type '" "Scalar""'");
  } 
  arg4 = static_cast< Scalar >(val4);
  result = dive::timers::CreateTimerStepped(SWIG_STD_MOVE(arg1),arg2,arg3,arg4);
  {
    std::shared_ptr<  dive::timers::TimerStepped > *smartresult = result ? new std::shared_ptr<  dive::timers::TimerStepped >(result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_std__shared_ptrT_dive__timers__TimerStepped_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CreateTimerStepped(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "CreateTimerStepped", 0, 4, argv))) SWIG_fail;
  --argc;
  if (argc == 0) {
    return _wrap_CreateTimerStepped__SWIG_0(self, argc, argv);
  }
  if (argc == 4) {
    int _v = 0;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_CreateTimerStepped__SWIG_1(self, argc, argv);
          }
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'CreateTimerStepped'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    dive::timers::CreateTimerStepped()\n"
    "    dive::timers::CreateTimerStepped(Tag,Scalar,Scalar,Scalar)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_TimerStepped(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  dive::timers::TimerStepped *arg1 = (dive::timers::TimerStepped *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< dive::timers::TimerStepped > tempshared1 ;
  std::shared_ptr< dive::timers::TimerStepped > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_dive__timers__TimerStepped_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_TimerStepped" "', argument " "1"" of type '" "dive::timers::TimerStepped *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  dive::timers::TimerStepped > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  dive::timers::TimerStepped > * >(argp1);
      arg1 = const_cast< dive::timers::TimerStepped * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  dive::timers::TimerStepped > * >(argp1);
      arg1 = const_cast< dive::timers::TimerStepped * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  (void)arg1; delete smartarg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TimerStepped_Create(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  TimerSteppedPtr result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "TimerStepped_Create", 0, 0, 0)) SWIG_fail;
  result = dive::timers::TimerStepped::Create();
  {
    std::shared_ptr<  dive::timers::TimerStepped > *smartresult = result ? new std::shared_ptr<  dive::timers::TimerStepped >(result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_std__shared_ptrT_dive__timers__TimerStepped_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TimerStepped_GetPtr__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  dive::timers::TimerStepped *arg1 = (dive::timers::TimerStepped *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< dive::timers::TimerStepped > tempshared1 ;
  std::shared_ptr< dive::timers::TimerStepped > *smartarg1 = 0 ;
  TimerSteppedPtr result;
  
  (void)self;
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_dive__timers__TimerStepped_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TimerStepped_GetPtr" "', argument " "1"" of type '" "dive::timers::TimerStepped *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  dive::timers::TimerStepped > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  dive::timers::TimerStepped > * >(argp1);
      arg1 = const_cast< dive::timers::TimerStepped * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  dive::timers::TimerStepped > * >(argp1);
      arg1 = const_cast< dive::timers::TimerStepped * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = (arg1)->GetPtr();
  {
    std::shared_ptr<  dive::timers::TimerStepped > *smartresult = result ? new std::shared_ptr<  dive::timers::TimerStepped >(result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_std__shared_ptrT_dive__timers__TimerStepped_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TimerStepped_GetPtr__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  dive::timers::TimerStepped *arg1 = (dive::timers::TimerStepped *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< dive::timers::TimerStepped const > tempshared1 ;
  std::shared_ptr< dive::timers::TimerStepped const > *smartarg1 = 0 ;
  ConstTimerSteppedPtr result;
  
  (void)self;
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_dive__timers__TimerStepped_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TimerStepped_GetPtr" "', argument " "1"" of type '" "dive::timers::TimerStepped const *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const dive::timers::TimerStepped > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const dive::timers::TimerStepped > * >(argp1);
      arg1 = const_cast< dive::timers::TimerStepped * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const dive::timers::TimerStepped > * >(argp1);
      arg1 = const_cast< dive::timers::TimerStepped * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = ((dive::timers::TimerStepped const *)arg1)->GetPtr();
  {
    std::shared_ptr< const dive::timers::TimerStepped > *smartresult = result ? new std::shared_ptr< const dive::timers::TimerStepped >(result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_std__shared_ptrT_dive__timers__TimerStepped_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TimerStepped_GetPtr(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "TimerStepped_GetPtr", 0, 1, argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    int _v = 0;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_std__shared_ptrT_dive__timers__TimerStepped_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_TimerStepped_GetPtr__SWIG_0(self, argc, argv);
    }
  }
  if (argc == 1) {
    int _v = 0;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_std__shared_ptrT_dive__timers__TimerStepped_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_TimerStepped_GetPtr__SWIG_1(self, argc, argv);
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'TimerStepped_GetPtr'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    dive::timers::TimerStepped::GetPtr()\n"
    "    dive::timers::TimerStepped::GetPtr() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_TimerStepped_GetCurrentTime(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  dive::timers::TimerStepped *arg1 = (dive::timers::TimerStepped *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< dive::timers::TimerStepped const > tempshared1 ;
  std::shared_ptr< dive::timers::TimerStepped const > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  Scalar result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_dive__timers__TimerStepped_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TimerStepped_GetCurrentTime" "', argument " "1"" of type '" "dive::timers::TimerStepped const *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const dive::timers::TimerStepped > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const dive::timers::TimerStepped > * >(argp1);
      arg1 = const_cast< dive::timers::TimerStepped * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const dive::timers::TimerStepped > * >(argp1);
      arg1 = const_cast< dive::timers::TimerStepped * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = (Scalar)((dive::timers::TimerStepped const *)arg1)->GetCurrentTime();
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TimerStepped_GetInitialTime(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  dive::timers::TimerStepped *arg1 = (dive::timers::TimerStepped *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< dive::timers::TimerStepped const > tempshared1 ;
  std::shared_ptr< dive::timers::TimerStepped const > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  Scalar result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_dive__timers__TimerStepped_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TimerStepped_GetInitialTime" "', argument " "1"" of type '" "dive::timers::TimerStepped const *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const dive::timers::TimerStepped > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const dive::timers::TimerStepped > * >(argp1);
      arg1 = const_cast< dive::timers::TimerStepped * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const dive::timers::TimerStepped > * >(argp1);
      arg1 = const_cast< dive::timers::TimerStepped * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = (Scalar)((dive::timers::TimerStepped const *)arg1)->GetInitialTime();
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TimerStepped_GetEndTime(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  dive::timers::TimerStepped *arg1 = (dive::timers::TimerStepped *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< dive::timers::TimerStepped const > tempshared1 ;
  std::shared_ptr< dive::timers::TimerStepped const > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  Scalar result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_dive__timers__TimerStepped_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TimerStepped_GetEndTime" "', argument " "1"" of type '" "dive::timers::TimerStepped const *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const dive::timers::TimerStepped > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const dive::timers::TimerStepped > * >(argp1);
      arg1 = const_cast< dive::timers::TimerStepped * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const dive::timers::TimerStepped > * >(argp1);
      arg1 = const_cast< dive::timers::TimerStepped * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = (Scalar)((dive::timers::TimerStepped const *)arg1)->GetEndTime();
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TimerStepped_GetStepSize(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  dive::timers::TimerStepped *arg1 = (dive::timers::TimerStepped *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< dive::timers::TimerStepped const > tempshared1 ;
  std::shared_ptr< dive::timers::TimerStepped const > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  Scalar result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_dive__timers__TimerStepped_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TimerStepped_GetStepSize" "', argument " "1"" of type '" "dive::timers::TimerStepped const *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const dive::timers::TimerStepped > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const dive::timers::TimerStepped > * >(argp1);
      arg1 = const_cast< dive::timers::TimerStepped * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const dive::timers::TimerStepped > * >(argp1);
      arg1 = const_cast< dive::timers::TimerStepped * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = (Scalar)((dive::timers::TimerStepped const *)arg1)->GetStepSize();
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TimerStepped_GetStepNumber(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  dive::timers::TimerStepped *arg1 = (dive::timers::TimerStepped *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< dive::timers::TimerStepped const > tempshared1 ;
  std::shared_ptr< dive::timers::TimerStepped const > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  Number result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_dive__timers__TimerStepped_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TimerStepped_GetStepNumber" "', argument " "1"" of type '" "dive::timers::TimerStepped const *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const dive::timers::TimerStepped > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const dive::timers::TimerStepped > * >(argp1);
      arg1 = const_cast< dive::timers::TimerStepped * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const dive::timers::TimerStepped > * >(argp1);
      arg1 = const_cast< dive::timers::TimerStepped * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = ((dive::timers::TimerStepped const *)arg1)->GetStepNumber();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TimerStepped_GetType(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  dive::timers::TimerStepped *arg1 = (dive::timers::TimerStepped *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< dive::timers::TimerStepped const > tempshared1 ;
  std::shared_ptr< dive::timers::TimerStepped const > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  Type result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_dive__timers__TimerStepped_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TimerStepped_GetType" "', argument " "1"" of type '" "dive::timers::TimerStepped const *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const dive::timers::TimerStepped > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const dive::timers::TimerStepped > * >(argp1);
      arg1 = const_cast< dive::timers::TimerStepped * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const dive::timers::TimerStepped > * >(argp1);
      arg1 = const_cast< dive::timers::TimerStepped * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = ((dive::timers::TimerStepped const *)arg1)->GetType();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TimerStepped_GetTag(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  dive::timers::TimerStepped *arg1 = (dive::timers::TimerStepped *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< dive::timers::TimerStepped const > tempshared1 ;
  std::shared_ptr< dive::timers::TimerStepped const > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  Tag result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_dive__timers__TimerStepped_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TimerStepped_GetTag" "', argument " "1"" of type '" "dive::timers::TimerStepped const *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const dive::timers::TimerStepped > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const dive::timers::TimerStepped > * >(argp1);
      arg1 = const_cast< dive::timers::TimerStepped * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const dive::timers::TimerStepped > * >(argp1);
      arg1 = const_cast< dive::timers::TimerStepped * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = ((dive::timers::TimerStepped const *)arg1)->GetTag();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TimerStepped_SetNextStep(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  dive::timers::TimerStepped *arg1 = (dive::timers::TimerStepped *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< dive::timers::TimerStepped > tempshared1 ;
  std::shared_ptr< dive::timers::TimerStepped > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_dive__timers__TimerStepped_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TimerStepped_SetNextStep" "', argument " "1"" of type '" "dive::timers::TimerStepped *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  dive::timers::TimerStepped > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  dive::timers::TimerStepped > * >(argp1);
      arg1 = const_cast< dive::timers::TimerStepped * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  dive::timers::TimerStepped > * >(argp1);
      arg1 = const_cast< dive::timers::TimerStepped * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  (arg1)->SetNextStep();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TimerStepped_SetInitialTime(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  dive::timers::TimerStepped *arg1 = (dive::timers::TimerStepped *) 0 ;
  Scalar arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< dive::timers::TimerStepped > tempshared1 ;
  std::shared_ptr< dive::timers::TimerStepped > *smartarg1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "TimerStepped_SetInitialTime", 2, 2, swig_obj)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_dive__timers__TimerStepped_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TimerStepped_SetInitialTime" "', argument " "1"" of type '" "dive::timers::TimerStepped *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  dive::timers::TimerStepped > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  dive::timers::TimerStepped > * >(argp1);
      arg1 = const_cast< dive::timers::TimerStepped * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  dive::timers::TimerStepped > * >(argp1);
      arg1 = const_cast< dive::timers::TimerStepped * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TimerStepped_SetInitialTime" "', argument " "2"" of type '" "Scalar""'");
  } 
  arg2 = static_cast< Scalar >(val2);
  (arg1)->SetInitialTime(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TimerStepped_SetEndTime(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  dive::timers::TimerStepped *arg1 = (dive::timers::TimerStepped *) 0 ;
  Scalar arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< dive::timers::TimerStepped > tempshared1 ;
  std::shared_ptr< dive::timers::TimerStepped > *smartarg1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "TimerStepped_SetEndTime", 2, 2, swig_obj)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_dive__timers__TimerStepped_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TimerStepped_SetEndTime" "', argument " "1"" of type '" "dive::timers::TimerStepped *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  dive::timers::TimerStepped > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  dive::timers::TimerStepped > * >(argp1);
      arg1 = const_cast< dive::timers::TimerStepped * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  dive::timers::TimerStepped > * >(argp1);
      arg1 = const_cast< dive::timers::TimerStepped * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TimerStepped_SetEndTime" "', argument " "2"" of type '" "Scalar""'");
  } 
  arg2 = static_cast< Scalar >(val2);
  (arg1)->SetEndTime(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TimerStepped_SetStepSize(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  dive::timers::TimerStepped *arg1 = (dive::timers::TimerStepped *) 0 ;
  Scalar arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< dive::timers::TimerStepped > tempshared1 ;
  std::shared_ptr< dive::timers::TimerStepped > *smartarg1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "TimerStepped_SetStepSize", 2, 2, swig_obj)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_dive__timers__TimerStepped_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TimerStepped_SetStepSize" "', argument " "1"" of type '" "dive::timers::TimerStepped *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  dive::timers::TimerStepped > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  dive::timers::TimerStepped > * >(argp1);
      arg1 = const_cast< dive::timers::TimerStepped * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  dive::timers::TimerStepped > * >(argp1);
      arg1 = const_cast< dive::timers::TimerStepped * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TimerStepped_SetStepSize" "', argument " "2"" of type '" "Scalar""'");
  } 
  arg2 = static_cast< Scalar >(val2);
  (arg1)->SetStepSize(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TimerStepped_SetTag(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  dive::timers::TimerStepped *arg1 = (dive::timers::TimerStepped *) 0 ;
  Tag arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< dive::timers::TimerStepped > tempshared1 ;
  std::shared_ptr< dive::timers::TimerStepped > *smartarg1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "TimerStepped_SetTag", 2, 2, swig_obj)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_dive__timers__TimerStepped_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TimerStepped_SetTag" "', argument " "1"" of type '" "dive::timers::TimerStepped *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  dive::timers::TimerStepped > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  dive::timers::TimerStepped > * >(argp1);
      arg1 = const_cast< dive::timers::TimerStepped * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  dive::timers::TimerStepped > * >(argp1);
      arg1 = const_cast< dive::timers::TimerStepped * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TimerStepped_SetTag" "', argument " "2"" of type '" "Tag""'");
  } 
  arg2 = static_cast< Tag >(val2);
  (arg1)->SetTag(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *TimerStepped_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_std__shared_ptrT_dive__timers__TimerStepped_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN int Swig_var_valuesLogger_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable valuesLogger is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_valuesLogger_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_std_string(static_cast< std::string >(values::valuesLogger));
  return pyobj;
}


SWIGINTERN int Swig_var_value_bool_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable value_bool is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_value_bool_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_size_t(static_cast< size_t >(values::value_bool));
  return pyobj;
}


SWIGINTERN int Swig_var_value_string_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable value_string is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_value_string_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_size_t(static_cast< size_t >(values::value_string));
  return pyobj;
}


SWIGINTERN int Swig_var_value_scalar_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable value_scalar is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_value_scalar_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_size_t(static_cast< size_t >(values::value_scalar));
  return pyobj;
}


SWIGINTERN int Swig_var_value_scalar1D_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable value_scalar1D is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_value_scalar1D_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_size_t(static_cast< size_t >(values::value_scalar1D));
  return pyobj;
}


SWIGINTERN int Swig_var_value_scalar2D_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable value_scalar2D is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_value_scalar2D_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_size_t(static_cast< size_t >(values::value_scalar2D));
  return pyobj;
}


SWIGINTERN int Swig_var_value_scalar3D_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable value_scalar3D is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_value_scalar3D_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_size_t(static_cast< size_t >(values::value_scalar3D));
  return pyobj;
}


SWIGINTERN int Swig_var_value_scalar1D_function_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable value_scalar1D_function is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_value_scalar1D_function_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_size_t(static_cast< size_t >(values::value_scalar1D_function));
  return pyobj;
}


SWIGINTERN int Swig_var_value_scalar2D_function_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable value_scalar2D_function is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_value_scalar2D_function_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_size_t(static_cast< size_t >(values::value_scalar2D_function));
  return pyobj;
}


SWIGINTERN int Swig_var_value_scalar3D_function_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable value_scalar3D_function is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_value_scalar3D_function_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_size_t(static_cast< size_t >(values::value_scalar3D_function));
  return pyobj;
}


SWIGINTERN int Swig_var_value_scalar3D_congruent_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable value_scalar3D_congruent is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_value_scalar3D_congruent_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_size_t(static_cast< size_t >(values::value_scalar3D_congruent));
  return pyobj;
}


SWIGINTERN int Swig_var_value_scalar3D_interpolation_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable value_scalar3D_interpolation is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_value_scalar3D_interpolation_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_size_t(static_cast< size_t >(values::value_scalar3D_interpolation));
  return pyobj;
}


SWIGINTERN int Swig_var_value_vector3D_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable value_vector3D is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_value_vector3D_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_size_t(static_cast< size_t >(values::value_vector3D));
  return pyobj;
}


SWIGINTERN int Swig_var_value_vector3D_interpolation_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable value_vector3D_interpolation is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_value_vector3D_interpolation_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_size_t(static_cast< size_t >(values::value_vector3D_interpolation));
  return pyobj;
}


SWIGINTERN int Swig_var_value_vector3D_congruent_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable value_vector3D_congruent is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_value_vector3D_congruent_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_size_t(static_cast< size_t >(values::value_vector3D_congruent));
  return pyobj;
}


SWIGINTERN int Swig_var_value_matrix3D_interpolation_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable value_matrix3D_interpolation is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_value_matrix3D_interpolation_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_size_t(static_cast< size_t >(values::value_matrix3D_interpolation));
  return pyobj;
}


SWIGINTERN int Swig_var_value_matrix3D_congruent_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable value_matrix3D_congruent is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_value_matrix3D_congruent_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_size_t(static_cast< size_t >(values::value_matrix3D_congruent));
  return pyobj;
}


SWIGINTERN PyObject *_wrap_delete_IValue(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  values::IValue *arg1 = (values::IValue *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< values::IValue > tempshared1 ;
  std::shared_ptr< values::IValue > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_values__IValue_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_IValue" "', argument " "1"" of type '" "values::IValue *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  values::IValue > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  values::IValue > * >(argp1);
      arg1 = const_cast< values::IValue * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  values::IValue > * >(argp1);
      arg1 = const_cast< values::IValue * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  (void)arg1; delete smartarg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IValue_GetType(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  values::IValue *arg1 = (values::IValue *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< values::IValue const > tempshared1 ;
  std::shared_ptr< values::IValue const > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  values::Type result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_values__IValue_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IValue_GetType" "', argument " "1"" of type '" "values::IValue const *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const values::IValue > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const values::IValue > * >(argp1);
      arg1 = const_cast< values::IValue * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const values::IValue > * >(argp1);
      arg1 = const_cast< values::IValue * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = ((values::IValue const *)arg1)->GetType();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IValue_GetName(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  values::IValue *arg1 = (values::IValue *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< values::IValue const > tempshared1 ;
  std::shared_ptr< values::IValue const > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  values::String *result = 0 ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_values__IValue_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IValue_GetName" "', argument " "1"" of type '" "values::IValue const *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const values::IValue > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const values::IValue > * >(argp1);
      arg1 = const_cast< values::IValue * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const values::IValue > * >(argp1);
      arg1 = const_cast< values::IValue * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = (values::String *) &((values::IValue const *)arg1)->GetName();
  resultobj = SWIG_From_std_string(static_cast< std::string >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IValue_GetKey(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  values::IValue *arg1 = (values::IValue *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< values::IValue const > tempshared1 ;
  std::shared_ptr< values::IValue const > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  values::String *result = 0 ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_values__IValue_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IValue_GetKey" "', argument " "1"" of type '" "values::IValue const *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const values::IValue > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const values::IValue > * >(argp1);
      arg1 = const_cast< values::IValue * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const values::IValue > * >(argp1);
      arg1 = const_cast< values::IValue * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = (values::String *) &((values::IValue const *)arg1)->GetKey();
  resultobj = SWIG_From_std_string(static_cast< std::string >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IValue_SetName(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  values::IValue *arg1 = (values::IValue *) 0 ;
  values::String *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< values::IValue > tempshared1 ;
  std::shared_ptr< values::IValue > *smartarg1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "IValue_SetName", 2, 2, swig_obj)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_values__IValue_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IValue_SetName" "', argument " "1"" of type '" "values::IValue *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  values::IValue > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  values::IValue > * >(argp1);
      arg1 = const_cast< values::IValue * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  values::IValue > * >(argp1);
      arg1 = const_cast< values::IValue * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IValue_SetName" "', argument " "2"" of type '" "values::String const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "IValue_SetName" "', argument " "2"" of type '" "values::String const &""'"); 
    }
    arg2 = ptr;
  }
  (arg1)->SetName((values::String const &)*arg2);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_IValue_SetKey(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  values::IValue *arg1 = (values::IValue *) 0 ;
  values::String *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< values::IValue > tempshared1 ;
  std::shared_ptr< values::IValue > *smartarg1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "IValue_SetKey", 2, 2, swig_obj)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_values__IValue_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IValue_SetKey" "', argument " "1"" of type '" "values::IValue *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  values::IValue > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  values::IValue > * >(argp1);
      arg1 = const_cast< values::IValue * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  values::IValue > * >(argp1);
      arg1 = const_cast< values::IValue * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IValue_SetKey" "', argument " "2"" of type '" "values::String const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "IValue_SetKey" "', argument " "2"" of type '" "values::String const &""'"); 
    }
    arg2 = ptr;
  }
  (arg1)->SetKey((values::String const &)*arg2);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *IValue_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_std__shared_ptrT_values__IValue_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_delete_IBool(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  values::IBool *arg1 = (values::IBool *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< values::IBool > tempshared1 ;
  std::shared_ptr< values::IBool > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_values__IBool_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_IBool" "', argument " "1"" of type '" "values::IBool *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  values::IBool > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  values::IBool > * >(argp1);
      arg1 = const_cast< values::IBool * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  values::IBool > * >(argp1);
      arg1 = const_cast< values::IBool * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  (void)arg1; delete smartarg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IBool_GetValue(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  values::IBool *arg1 = (values::IBool *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< values::IBool const > tempshared1 ;
  std::shared_ptr< values::IBool const > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_values__IBool_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IBool_GetValue" "', argument " "1"" of type '" "values::IBool const *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const values::IBool > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const values::IBool > * >(argp1);
      arg1 = const_cast< values::IBool * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const values::IBool > * >(argp1);
      arg1 = const_cast< values::IBool * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = (bool)((values::IBool const *)arg1)->GetValue();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *IBool_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_std__shared_ptrT_values__IBool_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_delete_IString(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  values::IString *arg1 = (values::IString *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< values::IString > tempshared1 ;
  std::shared_ptr< values::IString > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_values__IString_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_IString" "', argument " "1"" of type '" "values::IString *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  values::IString > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  values::IString > * >(argp1);
      arg1 = const_cast< values::IString * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  values::IString > * >(argp1);
      arg1 = const_cast< values::IString * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  (void)arg1; delete smartarg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IString_GetValue(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  values::IString *arg1 = (values::IString *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< values::IString const > tempshared1 ;
  std::shared_ptr< values::IString const > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  values::String *result = 0 ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_values__IString_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IString_GetValue" "', argument " "1"" of type '" "values::IString const *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const values::IString > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const values::IString > * >(argp1);
      arg1 = const_cast< values::IString * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const values::IString > * >(argp1);
      arg1 = const_cast< values::IString * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = (values::String *) &((values::IString const *)arg1)->GetValue();
  resultobj = SWIG_From_std_string(static_cast< std::string >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *IString_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_std__shared_ptrT_values__IString_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_delete_IScalar(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  values::IScalar *arg1 = (values::IScalar *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< values::IScalar > tempshared1 ;
  std::shared_ptr< values::IScalar > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_values__IScalar_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_IScalar" "', argument " "1"" of type '" "values::IScalar *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  values::IScalar > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  values::IScalar > * >(argp1);
      arg1 = const_cast< values::IScalar * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  values::IScalar > * >(argp1);
      arg1 = const_cast< values::IScalar * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  (void)arg1; delete smartarg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IScalar_GetValue(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  values::IScalar *arg1 = (values::IScalar *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< values::IScalar const > tempshared1 ;
  std::shared_ptr< values::IScalar const > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  values::Scalar result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_values__IScalar_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IScalar_GetValue" "', argument " "1"" of type '" "values::IScalar const *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const values::IScalar > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const values::IScalar > * >(argp1);
      arg1 = const_cast< values::IScalar * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const values::IScalar > * >(argp1);
      arg1 = const_cast< values::IScalar * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = (values::Scalar)((values::IScalar const *)arg1)->GetValue();
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *IScalar_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_std__shared_ptrT_values__IScalar_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_delete_IScalar1D(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  values::IScalar1D *arg1 = (values::IScalar1D *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< values::IScalar1D > tempshared1 ;
  std::shared_ptr< values::IScalar1D > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_values__IScalar1D_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_IScalar1D" "', argument " "1"" of type '" "values::IScalar1D *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  values::IScalar1D > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  values::IScalar1D > * >(argp1);
      arg1 = const_cast< values::IScalar1D * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  values::IScalar1D > * >(argp1);
      arg1 = const_cast< values::IScalar1D * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  (void)arg1; delete smartarg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IScalar1D_GetValue__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  values::IScalar1D *arg1 = (values::IScalar1D *) 0 ;
  values::Scalar arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< values::IScalar1D const > tempshared1 ;
  std::shared_ptr< values::IScalar1D const > *smartarg1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  values::Scalar result;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_values__IScalar1D_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IScalar1D_GetValue" "', argument " "1"" of type '" "values::IScalar1D const *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const values::IScalar1D > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const values::IScalar1D > * >(argp1);
      arg1 = const_cast< values::IScalar1D * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const values::IScalar1D > * >(argp1);
      arg1 = const_cast< values::IScalar1D * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IScalar1D_GetValue" "', argument " "2"" of type '" "values::Scalar""'");
  } 
  arg2 = static_cast< values::Scalar >(val2);
  result = (values::Scalar)((values::IScalar1D const *)arg1)->GetValue(arg2);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IScalar1D_GetValue__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  values::IScalar1D *arg1 = (values::IScalar1D *) 0 ;
  values::Vector *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< values::IScalar1D const > tempshared1 ;
  std::shared_ptr< values::IScalar1D const > *smartarg1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  values::Scalar result;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_values__IScalar1D_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IScalar1D_GetValue" "', argument " "1"" of type '" "values::IScalar1D const *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const values::IScalar1D > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const values::IScalar1D > * >(argp1);
      arg1 = const_cast< values::IScalar1D * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const values::IScalar1D > * >(argp1);
      arg1 = const_cast< values::IScalar1D * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_eilig__Vector,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IScalar1D_GetValue" "', argument " "2"" of type '" "values::Vector const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "IScalar1D_GetValue" "', argument " "2"" of type '" "values::Vector const &""'"); 
  }
  arg2 = reinterpret_cast< values::Vector * >(argp2);
  result = (values::Scalar)((values::IScalar1D const *)arg1)->GetValue((values::Vector const &)*arg2);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IScalar1D_GetValue(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "IScalar1D_GetValue", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_std__shared_ptrT_values__IScalar1D_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_eilig__Vector, SWIG_POINTER_NO_NULL | 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_IScalar1D_GetValue__SWIG_1(self, argc, argv);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_std__shared_ptrT_values__IScalar1D_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_IScalar1D_GetValue__SWIG_0(self, argc, argv);
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'IScalar1D_GetValue'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    values::IScalar1D::GetValue(values::Scalar) const\n"
    "    values::IScalar1D::GetValue(values::Vector const &) const\n");
  return 0;
}


SWIGINTERN PyObject *IScalar1D_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_std__shared_ptrT_values__IScalar1D_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_delete_IScalar2D(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  values::IScalar2D *arg1 = (values::IScalar2D *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< values::IScalar2D > tempshared1 ;
  std::shared_ptr< values::IScalar2D > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_values__IScalar2D_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_IScalar2D" "', argument " "1"" of type '" "values::IScalar2D *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  values::IScalar2D > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  values::IScalar2D > * >(argp1);
      arg1 = const_cast< values::IScalar2D * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  values::IScalar2D > * >(argp1);
      arg1 = const_cast< values::IScalar2D * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  (void)arg1; delete smartarg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IScalar2D_GetValue__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  values::IScalar2D *arg1 = (values::IScalar2D *) 0 ;
  values::Scalar arg2 ;
  values::Scalar arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< values::IScalar2D const > tempshared1 ;
  std::shared_ptr< values::IScalar2D const > *smartarg1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  values::Scalar result;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_values__IScalar2D_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IScalar2D_GetValue" "', argument " "1"" of type '" "values::IScalar2D const *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const values::IScalar2D > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const values::IScalar2D > * >(argp1);
      arg1 = const_cast< values::IScalar2D * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const values::IScalar2D > * >(argp1);
      arg1 = const_cast< values::IScalar2D * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IScalar2D_GetValue" "', argument " "2"" of type '" "values::Scalar""'");
  } 
  arg2 = static_cast< values::Scalar >(val2);
  ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "IScalar2D_GetValue" "', argument " "3"" of type '" "values::Scalar""'");
  } 
  arg3 = static_cast< values::Scalar >(val3);
  result = (values::Scalar)((values::IScalar2D const *)arg1)->GetValue(arg2,arg3);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IScalar2D_GetValue__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  values::IScalar2D *arg1 = (values::IScalar2D *) 0 ;
  values::Vector *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< values::IScalar2D const > tempshared1 ;
  std::shared_ptr< values::IScalar2D const > *smartarg1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  values::Scalar result;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_values__IScalar2D_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IScalar2D_GetValue" "', argument " "1"" of type '" "values::IScalar2D const *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const values::IScalar2D > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const values::IScalar2D > * >(argp1);
      arg1 = const_cast< values::IScalar2D * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const values::IScalar2D > * >(argp1);
      arg1 = const_cast< values::IScalar2D * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_eilig__Vector,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IScalar2D_GetValue" "', argument " "2"" of type '" "values::Vector const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "IScalar2D_GetValue" "', argument " "2"" of type '" "values::Vector const &""'"); 
  }
  arg2 = reinterpret_cast< values::Vector * >(argp2);
  result = (values::Scalar)((values::IScalar2D const *)arg1)->GetValue((values::Vector const &)*arg2);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IScalar2D_GetValue(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "IScalar2D_GetValue", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_std__shared_ptrT_values__IScalar2D_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_eilig__Vector, SWIG_POINTER_NO_NULL | 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_IScalar2D_GetValue__SWIG_1(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_std__shared_ptrT_values__IScalar2D_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_IScalar2D_GetValue__SWIG_0(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'IScalar2D_GetValue'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    values::IScalar2D::GetValue(values::Scalar,values::Scalar) const\n"
    "    values::IScalar2D::GetValue(values::Vector const &) const\n");
  return 0;
}


SWIGINTERN PyObject *IScalar2D_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_std__shared_ptrT_values__IScalar2D_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_delete_IScalar3D(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  values::IScalar3D *arg1 = (values::IScalar3D *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< values::IScalar3D > tempshared1 ;
  std::shared_ptr< values::IScalar3D > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_values__IScalar3D_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_IScalar3D" "', argument " "1"" of type '" "values::IScalar3D *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  values::IScalar3D > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  values::IScalar3D > * >(argp1);
      arg1 = const_cast< values::IScalar3D * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  values::IScalar3D > * >(argp1);
      arg1 = const_cast< values::IScalar3D * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  (void)arg1; delete smartarg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IScalar3D_GetValue__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  values::IScalar3D *arg1 = (values::IScalar3D *) 0 ;
  values::Scalar arg2 ;
  values::Scalar arg3 ;
  values::Scalar arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< values::IScalar3D const > tempshared1 ;
  std::shared_ptr< values::IScalar3D const > *smartarg1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  values::Scalar result;
  
  (void)self;
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_values__IScalar3D_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IScalar3D_GetValue" "', argument " "1"" of type '" "values::IScalar3D const *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const values::IScalar3D > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const values::IScalar3D > * >(argp1);
      arg1 = const_cast< values::IScalar3D * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const values::IScalar3D > * >(argp1);
      arg1 = const_cast< values::IScalar3D * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IScalar3D_GetValue" "', argument " "2"" of type '" "values::Scalar""'");
  } 
  arg2 = static_cast< values::Scalar >(val2);
  ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "IScalar3D_GetValue" "', argument " "3"" of type '" "values::Scalar""'");
  } 
  arg3 = static_cast< values::Scalar >(val3);
  ecode4 = SWIG_AsVal_double(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "IScalar3D_GetValue" "', argument " "4"" of type '" "values::Scalar""'");
  } 
  arg4 = static_cast< values::Scalar >(val4);
  result = (values::Scalar)((values::IScalar3D const *)arg1)->GetValue(arg2,arg3,arg4);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IScalar3D_GetValue__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  values::IScalar3D *arg1 = (values::IScalar3D *) 0 ;
  values::Vector *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< values::IScalar3D const > tempshared1 ;
  std::shared_ptr< values::IScalar3D const > *smartarg1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  values::Scalar result;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_values__IScalar3D_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IScalar3D_GetValue" "', argument " "1"" of type '" "values::IScalar3D const *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const values::IScalar3D > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const values::IScalar3D > * >(argp1);
      arg1 = const_cast< values::IScalar3D * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const values::IScalar3D > * >(argp1);
      arg1 = const_cast< values::IScalar3D * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_eilig__Vector,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IScalar3D_GetValue" "', argument " "2"" of type '" "values::Vector const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "IScalar3D_GetValue" "', argument " "2"" of type '" "values::Vector const &""'"); 
  }
  arg2 = reinterpret_cast< values::Vector * >(argp2);
  result = (values::Scalar)((values::IScalar3D const *)arg1)->GetValue((values::Vector const &)*arg2);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IScalar3D_GetValue(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "IScalar3D_GetValue", 0, 4, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_std__shared_ptrT_values__IScalar3D_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_eilig__Vector, SWIG_POINTER_NO_NULL | 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_IScalar3D_GetValue__SWIG_1(self, argc, argv);
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_std__shared_ptrT_values__IScalar3D_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_IScalar3D_GetValue__SWIG_0(self, argc, argv);
          }
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'IScalar3D_GetValue'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    values::IScalar3D::GetValue(values::Scalar,values::Scalar,values::Scalar) const\n"
    "    values::IScalar3D::GetValue(values::Vector const &) const\n");
  return 0;
}


SWIGINTERN PyObject *IScalar3D_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_std__shared_ptrT_values__IScalar3D_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_delete_IVector3D(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  values::IVector3D *arg1 = (values::IVector3D *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< values::IVector3D > tempshared1 ;
  std::shared_ptr< values::IVector3D > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_values__IVector3D_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_IVector3D" "', argument " "1"" of type '" "values::IVector3D *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  values::IVector3D > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  values::IVector3D > * >(argp1);
      arg1 = const_cast< values::IVector3D * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  values::IVector3D > * >(argp1);
      arg1 = const_cast< values::IVector3D * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  (void)arg1; delete smartarg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IVector3D_GetValue__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  values::IVector3D *arg1 = (values::IVector3D *) 0 ;
  values::Scalar arg2 ;
  values::Scalar arg3 ;
  values::Scalar arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< values::IVector3D const > tempshared1 ;
  std::shared_ptr< values::IVector3D const > *smartarg1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  values::Vector result;
  
  (void)self;
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_values__IVector3D_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IVector3D_GetValue" "', argument " "1"" of type '" "values::IVector3D const *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const values::IVector3D > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const values::IVector3D > * >(argp1);
      arg1 = const_cast< values::IVector3D * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const values::IVector3D > * >(argp1);
      arg1 = const_cast< values::IVector3D * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IVector3D_GetValue" "', argument " "2"" of type '" "values::Scalar""'");
  } 
  arg2 = static_cast< values::Scalar >(val2);
  ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "IVector3D_GetValue" "', argument " "3"" of type '" "values::Scalar""'");
  } 
  arg3 = static_cast< values::Scalar >(val3);
  ecode4 = SWIG_AsVal_double(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "IVector3D_GetValue" "', argument " "4"" of type '" "values::Scalar""'");
  } 
  arg4 = static_cast< values::Scalar >(val4);
  result = ((values::IVector3D const *)arg1)->GetValue(arg2,arg3,arg4);
  resultobj = SWIG_NewPointerObj((new values::Vector(result)), SWIGTYPE_p_eilig__Vector, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IVector3D_GetValue__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  values::IVector3D *arg1 = (values::IVector3D *) 0 ;
  values::Vector *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< values::IVector3D const > tempshared1 ;
  std::shared_ptr< values::IVector3D const > *smartarg1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  values::Vector result;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_values__IVector3D_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IVector3D_GetValue" "', argument " "1"" of type '" "values::IVector3D const *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const values::IVector3D > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const values::IVector3D > * >(argp1);
      arg1 = const_cast< values::IVector3D * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const values::IVector3D > * >(argp1);
      arg1 = const_cast< values::IVector3D * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_eilig__Vector,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IVector3D_GetValue" "', argument " "2"" of type '" "values::Vector const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "IVector3D_GetValue" "', argument " "2"" of type '" "values::Vector const &""'"); 
  }
  arg2 = reinterpret_cast< values::Vector * >(argp2);
  result = ((values::IVector3D const *)arg1)->GetValue((values::Vector const &)*arg2);
  resultobj = SWIG_NewPointerObj((new values::Vector(result)), SWIGTYPE_p_eilig__Vector, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IVector3D_GetValue(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "IVector3D_GetValue", 0, 4, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_std__shared_ptrT_values__IVector3D_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_eilig__Vector, SWIG_POINTER_NO_NULL | 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_IVector3D_GetValue__SWIG_1(self, argc, argv);
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_std__shared_ptrT_values__IVector3D_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_IVector3D_GetValue__SWIG_0(self, argc, argv);
          }
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'IVector3D_GetValue'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    values::IVector3D::GetValue(values::Scalar,values::Scalar,values::Scalar) const\n"
    "    values::IVector3D::GetValue(values::Vector const &) const\n");
  return 0;
}


SWIGINTERN PyObject *IVector3D_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_std__shared_ptrT_values__IVector3D_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_delete_IMatrix3D(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  values::IMatrix3D *arg1 = (values::IMatrix3D *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< values::IMatrix3D > tempshared1 ;
  std::shared_ptr< values::IMatrix3D > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_values__IMatrix3D_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_IMatrix3D" "', argument " "1"" of type '" "values::IMatrix3D *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  values::IMatrix3D > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  values::IMatrix3D > * >(argp1);
      arg1 = const_cast< values::IMatrix3D * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  values::IMatrix3D > * >(argp1);
      arg1 = const_cast< values::IMatrix3D * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  (void)arg1; delete smartarg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IMatrix3D_GetValue__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  values::IMatrix3D *arg1 = (values::IMatrix3D *) 0 ;
  values::Scalar arg2 ;
  values::Scalar arg3 ;
  values::Scalar arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< values::IMatrix3D const > tempshared1 ;
  std::shared_ptr< values::IMatrix3D const > *smartarg1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  values::Matrix result;
  
  (void)self;
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_values__IMatrix3D_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IMatrix3D_GetValue" "', argument " "1"" of type '" "values::IMatrix3D const *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const values::IMatrix3D > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const values::IMatrix3D > * >(argp1);
      arg1 = const_cast< values::IMatrix3D * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const values::IMatrix3D > * >(argp1);
      arg1 = const_cast< values::IMatrix3D * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IMatrix3D_GetValue" "', argument " "2"" of type '" "values::Scalar""'");
  } 
  arg2 = static_cast< values::Scalar >(val2);
  ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "IMatrix3D_GetValue" "', argument " "3"" of type '" "values::Scalar""'");
  } 
  arg3 = static_cast< values::Scalar >(val3);
  ecode4 = SWIG_AsVal_double(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "IMatrix3D_GetValue" "', argument " "4"" of type '" "values::Scalar""'");
  } 
  arg4 = static_cast< values::Scalar >(val4);
  result = ((values::IMatrix3D const *)arg1)->GetValue(arg2,arg3,arg4);
  resultobj = SWIG_NewPointerObj((new values::Matrix(result)), SWIGTYPE_p_eilig__Matrix, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IMatrix3D_GetValue__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  values::IMatrix3D *arg1 = (values::IMatrix3D *) 0 ;
  values::Vector *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< values::IMatrix3D const > tempshared1 ;
  std::shared_ptr< values::IMatrix3D const > *smartarg1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  values::Matrix result;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_values__IMatrix3D_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IMatrix3D_GetValue" "', argument " "1"" of type '" "values::IMatrix3D const *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const values::IMatrix3D > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const values::IMatrix3D > * >(argp1);
      arg1 = const_cast< values::IMatrix3D * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const values::IMatrix3D > * >(argp1);
      arg1 = const_cast< values::IMatrix3D * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_eilig__Vector,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IMatrix3D_GetValue" "', argument " "2"" of type '" "values::Vector const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "IMatrix3D_GetValue" "', argument " "2"" of type '" "values::Vector const &""'"); 
  }
  arg2 = reinterpret_cast< values::Vector * >(argp2);
  result = ((values::IMatrix3D const *)arg1)->GetValue((values::Vector const &)*arg2);
  resultobj = SWIG_NewPointerObj((new values::Matrix(result)), SWIGTYPE_p_eilig__Matrix, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IMatrix3D_GetValue(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "IMatrix3D_GetValue", 0, 4, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_std__shared_ptrT_values__IMatrix3D_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_eilig__Vector, SWIG_POINTER_NO_NULL | 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_IMatrix3D_GetValue__SWIG_1(self, argc, argv);
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_std__shared_ptrT_values__IMatrix3D_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_IMatrix3D_GetValue__SWIG_0(self, argc, argv);
          }
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'IMatrix3D_GetValue'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    values::IMatrix3D::GetValue(values::Scalar,values::Scalar,values::Scalar) const\n"
    "    values::IMatrix3D::GetValue(values::Vector const &) const\n");
  return 0;
}


SWIGINTERN PyObject *IMatrix3D_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_std__shared_ptrT_values__IMatrix3D_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_CreateValueBool__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  bool arg1 ;
  bool val1 ;
  int ecode1 = 0 ;
  values::ValueBoolPtr result;
  
  (void)self;
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  ecode1 = SWIG_AsVal_bool(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "CreateValueBool" "', argument " "1"" of type '" "bool""'");
  } 
  arg1 = static_cast< bool >(val1);
  result = values::CreateValueBool(arg1);
  {
    std::shared_ptr<  values::ValueBool > *smartresult = result ? new std::shared_ptr<  values::ValueBool >(result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_std__shared_ptrT_values__ValueBool_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CreateValueBool__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  bool arg1 ;
  values::String arg2 ;
  values::String arg3 ;
  bool val1 ;
  int ecode1 = 0 ;
  values::ValueBoolPtr result;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  ecode1 = SWIG_AsVal_bool(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "CreateValueBool" "', argument " "1"" of type '" "bool""'");
  } 
  arg1 = static_cast< bool >(val1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "CreateValueBool" "', argument " "2"" of type '" "values::String""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(swig_obj[2], &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "CreateValueBool" "', argument " "3"" of type '" "values::String""'"); 
    }
    arg3 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  result = values::CreateValueBool(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3));
  {
    std::shared_ptr<  values::ValueBool > *smartresult = result ? new std::shared_ptr<  values::ValueBool >(result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_std__shared_ptrT_values__ValueBool_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CreateValueBool(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "CreateValueBool", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    int _v = 0;
    {
      int res = SWIG_AsVal_bool(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_CreateValueBool__SWIG_0(self, argc, argv);
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      int res = SWIG_AsVal_bool(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_CreateValueBool__SWIG_1(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'CreateValueBool'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    values::CreateValueBool(bool)\n"
    "    values::CreateValueBool(bool,values::String,values::String)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_ValueBool(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  values::ValueBool *arg1 = (values::ValueBool *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< values::ValueBool > tempshared1 ;
  std::shared_ptr< values::ValueBool > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_values__ValueBool_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ValueBool" "', argument " "1"" of type '" "values::ValueBool *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  values::ValueBool > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  values::ValueBool > * >(argp1);
      arg1 = const_cast< values::ValueBool * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  values::ValueBool > * >(argp1);
      arg1 = const_cast< values::ValueBool * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  (void)arg1; delete smartarg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ValueBool_Create(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  values::ValueBoolPtr result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "ValueBool_Create", 0, 0, 0)) SWIG_fail;
  result = values::ValueBool::Create();
  {
    std::shared_ptr<  values::ValueBool > *smartresult = result ? new std::shared_ptr<  values::ValueBool >(result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_std__shared_ptrT_values__ValueBool_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ValueBool_GetType(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  values::ValueBool *arg1 = (values::ValueBool *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< values::ValueBool const > tempshared1 ;
  std::shared_ptr< values::ValueBool const > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  values::Type result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_values__ValueBool_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ValueBool_GetType" "', argument " "1"" of type '" "values::ValueBool const *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const values::ValueBool > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const values::ValueBool > * >(argp1);
      arg1 = const_cast< values::ValueBool * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const values::ValueBool > * >(argp1);
      arg1 = const_cast< values::ValueBool * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = ((values::ValueBool const *)arg1)->GetType();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ValueBool_GetName(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  values::ValueBool *arg1 = (values::ValueBool *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< values::ValueBool const > tempshared1 ;
  std::shared_ptr< values::ValueBool const > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  values::String *result = 0 ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_values__ValueBool_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ValueBool_GetName" "', argument " "1"" of type '" "values::ValueBool const *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const values::ValueBool > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const values::ValueBool > * >(argp1);
      arg1 = const_cast< values::ValueBool * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const values::ValueBool > * >(argp1);
      arg1 = const_cast< values::ValueBool * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = (values::String *) &((values::ValueBool const *)arg1)->GetName();
  resultobj = SWIG_From_std_string(static_cast< std::string >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ValueBool_GetKey(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  values::ValueBool *arg1 = (values::ValueBool *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< values::ValueBool const > tempshared1 ;
  std::shared_ptr< values::ValueBool const > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  values::String *result = 0 ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_values__ValueBool_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ValueBool_GetKey" "', argument " "1"" of type '" "values::ValueBool const *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const values::ValueBool > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const values::ValueBool > * >(argp1);
      arg1 = const_cast< values::ValueBool * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const values::ValueBool > * >(argp1);
      arg1 = const_cast< values::ValueBool * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = (values::String *) &((values::ValueBool const *)arg1)->GetKey();
  resultobj = SWIG_From_std_string(static_cast< std::string >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ValueBool_GetValue(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  values::ValueBool *arg1 = (values::ValueBool *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< values::ValueBool const > tempshared1 ;
  std::shared_ptr< values::ValueBool const > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_values__ValueBool_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ValueBool_GetValue" "', argument " "1"" of type '" "values::ValueBool const *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const values::ValueBool > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const values::ValueBool > * >(argp1);
      arg1 = const_cast< values::ValueBool * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const values::ValueBool > * >(argp1);
      arg1 = const_cast< values::ValueBool * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = (bool)((values::ValueBool const *)arg1)->GetValue();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ValueBool_SetName(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  values::ValueBool *arg1 = (values::ValueBool *) 0 ;
  values::String *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< values::ValueBool > tempshared1 ;
  std::shared_ptr< values::ValueBool > *smartarg1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "ValueBool_SetName", 2, 2, swig_obj)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_values__ValueBool_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ValueBool_SetName" "', argument " "1"" of type '" "values::ValueBool *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  values::ValueBool > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  values::ValueBool > * >(argp1);
      arg1 = const_cast< values::ValueBool * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  values::ValueBool > * >(argp1);
      arg1 = const_cast< values::ValueBool * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ValueBool_SetName" "', argument " "2"" of type '" "values::String const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ValueBool_SetName" "', argument " "2"" of type '" "values::String const &""'"); 
    }
    arg2 = ptr;
  }
  (arg1)->SetName((values::String const &)*arg2);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_ValueBool_SetKey(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  values::ValueBool *arg1 = (values::ValueBool *) 0 ;
  values::String *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< values::ValueBool > tempshared1 ;
  std::shared_ptr< values::ValueBool > *smartarg1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "ValueBool_SetKey", 2, 2, swig_obj)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_values__ValueBool_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ValueBool_SetKey" "', argument " "1"" of type '" "values::ValueBool *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  values::ValueBool > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  values::ValueBool > * >(argp1);
      arg1 = const_cast< values::ValueBool * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  values::ValueBool > * >(argp1);
      arg1 = const_cast< values::ValueBool * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ValueBool_SetKey" "', argument " "2"" of type '" "values::String const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ValueBool_SetKey" "', argument " "2"" of type '" "values::String const &""'"); 
    }
    arg2 = ptr;
  }
  (arg1)->SetKey((values::String const &)*arg2);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_ValueBool_SetValue(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  values::ValueBool *arg1 = (values::ValueBool *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< values::ValueBool > tempshared1 ;
  std::shared_ptr< values::ValueBool > *smartarg1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "ValueBool_SetValue", 2, 2, swig_obj)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_values__ValueBool_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ValueBool_SetValue" "', argument " "1"" of type '" "values::ValueBool *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  values::ValueBool > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  values::ValueBool > * >(argp1);
      arg1 = const_cast< values::ValueBool * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  values::ValueBool > * >(argp1);
      arg1 = const_cast< values::ValueBool * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  ecode2 = SWIG_AsVal_bool(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ValueBool_SetValue" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  (arg1)->SetValue(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *ValueBool_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_std__shared_ptrT_values__ValueBool_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_CreateValueScalar__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  values::Scalar arg1 ;
  double val1 ;
  int ecode1 = 0 ;
  values::ValueScalarPtr result;
  
  (void)self;
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "CreateValueScalar" "', argument " "1"" of type '" "values::Scalar""'");
  } 
  arg1 = static_cast< values::Scalar >(val1);
  result = values::CreateValueScalar(arg1);
  {
    std::shared_ptr<  values::ValueScalar > *smartresult = result ? new std::shared_ptr<  values::ValueScalar >(result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_std__shared_ptrT_values__ValueScalar_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CreateValueScalar__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  values::Scalar arg1 ;
  values::String arg2 ;
  values::String arg3 ;
  double val1 ;
  int ecode1 = 0 ;
  values::ValueScalarPtr result;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "CreateValueScalar" "', argument " "1"" of type '" "values::Scalar""'");
  } 
  arg1 = static_cast< values::Scalar >(val1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "CreateValueScalar" "', argument " "2"" of type '" "values::String""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(swig_obj[2], &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "CreateValueScalar" "', argument " "3"" of type '" "values::String""'"); 
    }
    arg3 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  result = values::CreateValueScalar(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3));
  {
    std::shared_ptr<  values::ValueScalar > *smartresult = result ? new std::shared_ptr<  values::ValueScalar >(result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_std__shared_ptrT_values__ValueScalar_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CreateValueScalar(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "CreateValueScalar", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    int _v = 0;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_CreateValueScalar__SWIG_0(self, argc, argv);
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_CreateValueScalar__SWIG_1(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'CreateValueScalar'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    values::CreateValueScalar(values::Scalar)\n"
    "    values::CreateValueScalar(values::Scalar,values::String,values::String)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_ValueScalar(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  values::ValueScalar *arg1 = (values::ValueScalar *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< values::ValueScalar > tempshared1 ;
  std::shared_ptr< values::ValueScalar > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_values__ValueScalar_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ValueScalar" "', argument " "1"" of type '" "values::ValueScalar *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  values::ValueScalar > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  values::ValueScalar > * >(argp1);
      arg1 = const_cast< values::ValueScalar * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  values::ValueScalar > * >(argp1);
      arg1 = const_cast< values::ValueScalar * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  (void)arg1; delete smartarg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ValueScalar_Create(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  values::ValueScalarPtr result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "ValueScalar_Create", 0, 0, 0)) SWIG_fail;
  result = values::ValueScalar::Create();
  {
    std::shared_ptr<  values::ValueScalar > *smartresult = result ? new std::shared_ptr<  values::ValueScalar >(result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_std__shared_ptrT_values__ValueScalar_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ValueScalar_GetType(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  values::ValueScalar *arg1 = (values::ValueScalar *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< values::ValueScalar const > tempshared1 ;
  std::shared_ptr< values::ValueScalar const > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  values::Type result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_values__ValueScalar_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ValueScalar_GetType" "', argument " "1"" of type '" "values::ValueScalar const *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const values::ValueScalar > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const values::ValueScalar > * >(argp1);
      arg1 = const_cast< values::ValueScalar * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const values::ValueScalar > * >(argp1);
      arg1 = const_cast< values::ValueScalar * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = ((values::ValueScalar const *)arg1)->GetType();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ValueScalar_GetName(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  values::ValueScalar *arg1 = (values::ValueScalar *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< values::ValueScalar const > tempshared1 ;
  std::shared_ptr< values::ValueScalar const > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  values::String *result = 0 ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_values__ValueScalar_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ValueScalar_GetName" "', argument " "1"" of type '" "values::ValueScalar const *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const values::ValueScalar > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const values::ValueScalar > * >(argp1);
      arg1 = const_cast< values::ValueScalar * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const values::ValueScalar > * >(argp1);
      arg1 = const_cast< values::ValueScalar * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = (values::String *) &((values::ValueScalar const *)arg1)->GetName();
  resultobj = SWIG_From_std_string(static_cast< std::string >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ValueScalar_GetKey(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  values::ValueScalar *arg1 = (values::ValueScalar *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< values::ValueScalar const > tempshared1 ;
  std::shared_ptr< values::ValueScalar const > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  values::String *result = 0 ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_values__ValueScalar_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ValueScalar_GetKey" "', argument " "1"" of type '" "values::ValueScalar const *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const values::ValueScalar > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const values::ValueScalar > * >(argp1);
      arg1 = const_cast< values::ValueScalar * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const values::ValueScalar > * >(argp1);
      arg1 = const_cast< values::ValueScalar * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = (values::String *) &((values::ValueScalar const *)arg1)->GetKey();
  resultobj = SWIG_From_std_string(static_cast< std::string >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ValueScalar_GetValue(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  values::ValueScalar *arg1 = (values::ValueScalar *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< values::ValueScalar const > tempshared1 ;
  std::shared_ptr< values::ValueScalar const > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  values::Scalar result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_values__ValueScalar_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ValueScalar_GetValue" "', argument " "1"" of type '" "values::ValueScalar const *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const values::ValueScalar > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const values::ValueScalar > * >(argp1);
      arg1 = const_cast< values::ValueScalar * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const values::ValueScalar > * >(argp1);
      arg1 = const_cast< values::ValueScalar * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = (values::Scalar)((values::ValueScalar const *)arg1)->GetValue();
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ValueScalar_SetName(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  values::ValueScalar *arg1 = (values::ValueScalar *) 0 ;
  values::String *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< values::ValueScalar > tempshared1 ;
  std::shared_ptr< values::ValueScalar > *smartarg1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "ValueScalar_SetName", 2, 2, swig_obj)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_values__ValueScalar_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ValueScalar_SetName" "', argument " "1"" of type '" "values::ValueScalar *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  values::ValueScalar > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  values::ValueScalar > * >(argp1);
      arg1 = const_cast< values::ValueScalar * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  values::ValueScalar > * >(argp1);
      arg1 = const_cast< values::ValueScalar * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ValueScalar_SetName" "', argument " "2"" of type '" "values::String const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ValueScalar_SetName" "', argument " "2"" of type '" "values::String const &""'"); 
    }
    arg2 = ptr;
  }
  (arg1)->SetName((values::String const &)*arg2);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_ValueScalar_SetKey(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  values::ValueScalar *arg1 = (values::ValueScalar *) 0 ;
  values::String *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< values::ValueScalar > tempshared1 ;
  std::shared_ptr< values::ValueScalar > *smartarg1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "ValueScalar_SetKey", 2, 2, swig_obj)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_values__ValueScalar_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ValueScalar_SetKey" "', argument " "1"" of type '" "values::ValueScalar *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  values::ValueScalar > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  values::ValueScalar > * >(argp1);
      arg1 = const_cast< values::ValueScalar * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  values::ValueScalar > * >(argp1);
      arg1 = const_cast< values::ValueScalar * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ValueScalar_SetKey" "', argument " "2"" of type '" "values::String const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ValueScalar_SetKey" "', argument " "2"" of type '" "values::String const &""'"); 
    }
    arg2 = ptr;
  }
  (arg1)->SetKey((values::String const &)*arg2);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_ValueScalar_SetValue(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  values::ValueScalar *arg1 = (values::ValueScalar *) 0 ;
  values::Scalar arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< values::ValueScalar > tempshared1 ;
  std::shared_ptr< values::ValueScalar > *smartarg1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "ValueScalar_SetValue", 2, 2, swig_obj)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_values__ValueScalar_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ValueScalar_SetValue" "', argument " "1"" of type '" "values::ValueScalar *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  values::ValueScalar > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  values::ValueScalar > * >(argp1);
      arg1 = const_cast< values::ValueScalar * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  values::ValueScalar > * >(argp1);
      arg1 = const_cast< values::ValueScalar * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ValueScalar_SetValue" "', argument " "2"" of type '" "values::Scalar""'");
  } 
  arg2 = static_cast< values::Scalar >(val2);
  (arg1)->SetValue(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *ValueScalar_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_std__shared_ptrT_values__ValueScalar_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_CreateValueScalar1D__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  values::Scalar arg1 ;
  double val1 ;
  int ecode1 = 0 ;
  values::ValueScalar1DPtr result;
  
  (void)self;
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "CreateValueScalar1D" "', argument " "1"" of type '" "values::Scalar""'");
  } 
  arg1 = static_cast< values::Scalar >(val1);
  result = values::CreateValueScalar1D(arg1);
  {
    std::shared_ptr<  values::ValueScalar1D > *smartresult = result ? new std::shared_ptr<  values::ValueScalar1D >(result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_std__shared_ptrT_values__ValueScalar1D_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CreateValueScalar1D__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  values::Scalar arg1 ;
  values::String arg2 ;
  values::String arg3 ;
  double val1 ;
  int ecode1 = 0 ;
  values::ValueScalar1DPtr result;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "CreateValueScalar1D" "', argument " "1"" of type '" "values::Scalar""'");
  } 
  arg1 = static_cast< values::Scalar >(val1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "CreateValueScalar1D" "', argument " "2"" of type '" "values::String""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(swig_obj[2], &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "CreateValueScalar1D" "', argument " "3"" of type '" "values::String""'"); 
    }
    arg3 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  result = values::CreateValueScalar1D(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3));
  {
    std::shared_ptr<  values::ValueScalar1D > *smartresult = result ? new std::shared_ptr<  values::ValueScalar1D >(result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_std__shared_ptrT_values__ValueScalar1D_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CreateValueScalar1D(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "CreateValueScalar1D", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    int _v = 0;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_CreateValueScalar1D__SWIG_0(self, argc, argv);
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_CreateValueScalar1D__SWIG_1(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'CreateValueScalar1D'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    values::CreateValueScalar1D(values::Scalar)\n"
    "    values::CreateValueScalar1D(values::Scalar,values::String,values::String)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_ValueScalar1D(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  values::ValueScalar1D *arg1 = (values::ValueScalar1D *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< values::ValueScalar1D > tempshared1 ;
  std::shared_ptr< values::ValueScalar1D > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_values__ValueScalar1D_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ValueScalar1D" "', argument " "1"" of type '" "values::ValueScalar1D *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  values::ValueScalar1D > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  values::ValueScalar1D > * >(argp1);
      arg1 = const_cast< values::ValueScalar1D * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  values::ValueScalar1D > * >(argp1);
      arg1 = const_cast< values::ValueScalar1D * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  (void)arg1; delete smartarg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ValueScalar1D_Create(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  values::ValueScalar1DPtr result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "ValueScalar1D_Create", 0, 0, 0)) SWIG_fail;
  result = values::ValueScalar1D::Create();
  {
    std::shared_ptr<  values::ValueScalar1D > *smartresult = result ? new std::shared_ptr<  values::ValueScalar1D >(result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_std__shared_ptrT_values__ValueScalar1D_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ValueScalar1D_GetType(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  values::ValueScalar1D *arg1 = (values::ValueScalar1D *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< values::ValueScalar1D const > tempshared1 ;
  std::shared_ptr< values::ValueScalar1D const > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  values::Type result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_values__ValueScalar1D_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ValueScalar1D_GetType" "', argument " "1"" of type '" "values::ValueScalar1D const *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const values::ValueScalar1D > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const values::ValueScalar1D > * >(argp1);
      arg1 = const_cast< values::ValueScalar1D * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const values::ValueScalar1D > * >(argp1);
      arg1 = const_cast< values::ValueScalar1D * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = ((values::ValueScalar1D const *)arg1)->GetType();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ValueScalar1D_GetName(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  values::ValueScalar1D *arg1 = (values::ValueScalar1D *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< values::ValueScalar1D const > tempshared1 ;
  std::shared_ptr< values::ValueScalar1D const > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  values::String *result = 0 ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_values__ValueScalar1D_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ValueScalar1D_GetName" "', argument " "1"" of type '" "values::ValueScalar1D const *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const values::ValueScalar1D > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const values::ValueScalar1D > * >(argp1);
      arg1 = const_cast< values::ValueScalar1D * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const values::ValueScalar1D > * >(argp1);
      arg1 = const_cast< values::ValueScalar1D * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = (values::String *) &((values::ValueScalar1D const *)arg1)->GetName();
  resultobj = SWIG_From_std_string(static_cast< std::string >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ValueScalar1D_GetKey(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  values::ValueScalar1D *arg1 = (values::ValueScalar1D *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< values::ValueScalar1D const > tempshared1 ;
  std::shared_ptr< values::ValueScalar1D const > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  values::String *result = 0 ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_values__ValueScalar1D_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ValueScalar1D_GetKey" "', argument " "1"" of type '" "values::ValueScalar1D const *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const values::ValueScalar1D > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const values::ValueScalar1D > * >(argp1);
      arg1 = const_cast< values::ValueScalar1D * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const values::ValueScalar1D > * >(argp1);
      arg1 = const_cast< values::ValueScalar1D * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = (values::String *) &((values::ValueScalar1D const *)arg1)->GetKey();
  resultobj = SWIG_From_std_string(static_cast< std::string >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ValueScalar1D_GetValue__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  values::ValueScalar1D *arg1 = (values::ValueScalar1D *) 0 ;
  values::Scalar arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< values::ValueScalar1D const > tempshared1 ;
  std::shared_ptr< values::ValueScalar1D const > *smartarg1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  values::Scalar result;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_values__ValueScalar1D_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ValueScalar1D_GetValue" "', argument " "1"" of type '" "values::ValueScalar1D const *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const values::ValueScalar1D > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const values::ValueScalar1D > * >(argp1);
      arg1 = const_cast< values::ValueScalar1D * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const values::ValueScalar1D > * >(argp1);
      arg1 = const_cast< values::ValueScalar1D * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ValueScalar1D_GetValue" "', argument " "2"" of type '" "values::Scalar""'");
  } 
  arg2 = static_cast< values::Scalar >(val2);
  result = (values::Scalar)((values::ValueScalar1D const *)arg1)->GetValue(arg2);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ValueScalar1D_GetValue__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  values::ValueScalar1D *arg1 = (values::ValueScalar1D *) 0 ;
  values::Vector *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< values::ValueScalar1D const > tempshared1 ;
  std::shared_ptr< values::ValueScalar1D const > *smartarg1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  values::Scalar result;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_values__ValueScalar1D_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ValueScalar1D_GetValue" "', argument " "1"" of type '" "values::ValueScalar1D const *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const values::ValueScalar1D > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const values::ValueScalar1D > * >(argp1);
      arg1 = const_cast< values::ValueScalar1D * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const values::ValueScalar1D > * >(argp1);
      arg1 = const_cast< values::ValueScalar1D * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_eilig__Vector,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ValueScalar1D_GetValue" "', argument " "2"" of type '" "values::Vector const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ValueScalar1D_GetValue" "', argument " "2"" of type '" "values::Vector const &""'"); 
  }
  arg2 = reinterpret_cast< values::Vector * >(argp2);
  result = (values::Scalar)((values::ValueScalar1D const *)arg1)->GetValue((values::Vector const &)*arg2);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ValueScalar1D_GetValue(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "ValueScalar1D_GetValue", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_std__shared_ptrT_values__ValueScalar1D_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_eilig__Vector, SWIG_POINTER_NO_NULL | 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ValueScalar1D_GetValue__SWIG_1(self, argc, argv);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_std__shared_ptrT_values__ValueScalar1D_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_ValueScalar1D_GetValue__SWIG_0(self, argc, argv);
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'ValueScalar1D_GetValue'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    values::ValueScalar1D::GetValue(values::Scalar) const\n"
    "    values::ValueScalar1D::GetValue(values::Vector const &) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ValueScalar1D_SetName(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  values::ValueScalar1D *arg1 = (values::ValueScalar1D *) 0 ;
  values::String *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< values::ValueScalar1D > tempshared1 ;
  std::shared_ptr< values::ValueScalar1D > *smartarg1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "ValueScalar1D_SetName", 2, 2, swig_obj)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_values__ValueScalar1D_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ValueScalar1D_SetName" "', argument " "1"" of type '" "values::ValueScalar1D *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  values::ValueScalar1D > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  values::ValueScalar1D > * >(argp1);
      arg1 = const_cast< values::ValueScalar1D * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  values::ValueScalar1D > * >(argp1);
      arg1 = const_cast< values::ValueScalar1D * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ValueScalar1D_SetName" "', argument " "2"" of type '" "values::String const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ValueScalar1D_SetName" "', argument " "2"" of type '" "values::String const &""'"); 
    }
    arg2 = ptr;
  }
  (arg1)->SetName((values::String const &)*arg2);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_ValueScalar1D_SetKey(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  values::ValueScalar1D *arg1 = (values::ValueScalar1D *) 0 ;
  values::String *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< values::ValueScalar1D > tempshared1 ;
  std::shared_ptr< values::ValueScalar1D > *smartarg1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "ValueScalar1D_SetKey", 2, 2, swig_obj)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_values__ValueScalar1D_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ValueScalar1D_SetKey" "', argument " "1"" of type '" "values::ValueScalar1D *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  values::ValueScalar1D > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  values::ValueScalar1D > * >(argp1);
      arg1 = const_cast< values::ValueScalar1D * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  values::ValueScalar1D > * >(argp1);
      arg1 = const_cast< values::ValueScalar1D * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ValueScalar1D_SetKey" "', argument " "2"" of type '" "values::String const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ValueScalar1D_SetKey" "', argument " "2"" of type '" "values::String const &""'"); 
    }
    arg2 = ptr;
  }
  (arg1)->SetKey((values::String const &)*arg2);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_ValueScalar1D_SetValue(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  values::ValueScalar1D *arg1 = (values::ValueScalar1D *) 0 ;
  values::Scalar arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< values::ValueScalar1D > tempshared1 ;
  std::shared_ptr< values::ValueScalar1D > *smartarg1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "ValueScalar1D_SetValue", 2, 2, swig_obj)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_values__ValueScalar1D_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ValueScalar1D_SetValue" "', argument " "1"" of type '" "values::ValueScalar1D *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  values::ValueScalar1D > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  values::ValueScalar1D > * >(argp1);
      arg1 = const_cast< values::ValueScalar1D * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  values::ValueScalar1D > * >(argp1);
      arg1 = const_cast< values::ValueScalar1D * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ValueScalar1D_SetValue" "', argument " "2"" of type '" "values::Scalar""'");
  } 
  arg2 = static_cast< values::Scalar >(val2);
  (arg1)->SetValue(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *ValueScalar1D_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_std__shared_ptrT_values__ValueScalar1D_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_CreateValueScalar2D__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  values::Scalar arg1 ;
  double val1 ;
  int ecode1 = 0 ;
  values::ValueScalar2DPtr result;
  
  (void)self;
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "CreateValueScalar2D" "', argument " "1"" of type '" "values::Scalar""'");
  } 
  arg1 = static_cast< values::Scalar >(val1);
  result = values::CreateValueScalar2D(arg1);
  {
    std::shared_ptr<  values::ValueScalar2D > *smartresult = result ? new std::shared_ptr<  values::ValueScalar2D >(result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_std__shared_ptrT_values__ValueScalar2D_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CreateValueScalar2D__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  values::Scalar arg1 ;
  values::String arg2 ;
  values::String arg3 ;
  double val1 ;
  int ecode1 = 0 ;
  values::ValueScalar2DPtr result;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "CreateValueScalar2D" "', argument " "1"" of type '" "values::Scalar""'");
  } 
  arg1 = static_cast< values::Scalar >(val1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "CreateValueScalar2D" "', argument " "2"" of type '" "values::String""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(swig_obj[2], &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "CreateValueScalar2D" "', argument " "3"" of type '" "values::String""'"); 
    }
    arg3 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  result = values::CreateValueScalar2D(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3));
  {
    std::shared_ptr<  values::ValueScalar2D > *smartresult = result ? new std::shared_ptr<  values::ValueScalar2D >(result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_std__shared_ptrT_values__ValueScalar2D_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CreateValueScalar2D(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "CreateValueScalar2D", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    int _v = 0;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_CreateValueScalar2D__SWIG_0(self, argc, argv);
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_CreateValueScalar2D__SWIG_1(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'CreateValueScalar2D'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    values::CreateValueScalar2D(values::Scalar)\n"
    "    values::CreateValueScalar2D(values::Scalar,values::String,values::String)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_ValueScalar2D(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  values::ValueScalar2D *arg1 = (values::ValueScalar2D *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< values::ValueScalar2D > tempshared1 ;
  std::shared_ptr< values::ValueScalar2D > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_values__ValueScalar2D_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ValueScalar2D" "', argument " "1"" of type '" "values::ValueScalar2D *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  values::ValueScalar2D > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  values::ValueScalar2D > * >(argp1);
      arg1 = const_cast< values::ValueScalar2D * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  values::ValueScalar2D > * >(argp1);
      arg1 = const_cast< values::ValueScalar2D * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  (void)arg1; delete smartarg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ValueScalar2D_Create(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  values::ValueScalar2DPtr result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "ValueScalar2D_Create", 0, 0, 0)) SWIG_fail;
  result = values::ValueScalar2D::Create();
  {
    std::shared_ptr<  values::ValueScalar2D > *smartresult = result ? new std::shared_ptr<  values::ValueScalar2D >(result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_std__shared_ptrT_values__ValueScalar2D_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ValueScalar2D_GetType(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  values::ValueScalar2D *arg1 = (values::ValueScalar2D *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< values::ValueScalar2D const > tempshared1 ;
  std::shared_ptr< values::ValueScalar2D const > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  values::Type result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_values__ValueScalar2D_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ValueScalar2D_GetType" "', argument " "1"" of type '" "values::ValueScalar2D const *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const values::ValueScalar2D > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const values::ValueScalar2D > * >(argp1);
      arg1 = const_cast< values::ValueScalar2D * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const values::ValueScalar2D > * >(argp1);
      arg1 = const_cast< values::ValueScalar2D * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = ((values::ValueScalar2D const *)arg1)->GetType();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ValueScalar2D_GetName(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  values::ValueScalar2D *arg1 = (values::ValueScalar2D *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< values::ValueScalar2D const > tempshared1 ;
  std::shared_ptr< values::ValueScalar2D const > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  values::String *result = 0 ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_values__ValueScalar2D_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ValueScalar2D_GetName" "', argument " "1"" of type '" "values::ValueScalar2D const *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const values::ValueScalar2D > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const values::ValueScalar2D > * >(argp1);
      arg1 = const_cast< values::ValueScalar2D * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const values::ValueScalar2D > * >(argp1);
      arg1 = const_cast< values::ValueScalar2D * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = (values::String *) &((values::ValueScalar2D const *)arg1)->GetName();
  resultobj = SWIG_From_std_string(static_cast< std::string >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ValueScalar2D_GetKey(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  values::ValueScalar2D *arg1 = (values::ValueScalar2D *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< values::ValueScalar2D const > tempshared1 ;
  std::shared_ptr< values::ValueScalar2D const > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  values::String *result = 0 ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_values__ValueScalar2D_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ValueScalar2D_GetKey" "', argument " "1"" of type '" "values::ValueScalar2D const *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const values::ValueScalar2D > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const values::ValueScalar2D > * >(argp1);
      arg1 = const_cast< values::ValueScalar2D * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const values::ValueScalar2D > * >(argp1);
      arg1 = const_cast< values::ValueScalar2D * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = (values::String *) &((values::ValueScalar2D const *)arg1)->GetKey();
  resultobj = SWIG_From_std_string(static_cast< std::string >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ValueScalar2D_GetValue__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  values::ValueScalar2D *arg1 = (values::ValueScalar2D *) 0 ;
  values::Scalar arg2 ;
  values::Scalar arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< values::ValueScalar2D const > tempshared1 ;
  std::shared_ptr< values::ValueScalar2D const > *smartarg1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  values::Scalar result;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_values__ValueScalar2D_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ValueScalar2D_GetValue" "', argument " "1"" of type '" "values::ValueScalar2D const *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const values::ValueScalar2D > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const values::ValueScalar2D > * >(argp1);
      arg1 = const_cast< values::ValueScalar2D * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const values::ValueScalar2D > * >(argp1);
      arg1 = const_cast< values::ValueScalar2D * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ValueScalar2D_GetValue" "', argument " "2"" of type '" "values::Scalar""'");
  } 
  arg2 = static_cast< values::Scalar >(val2);
  ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ValueScalar2D_GetValue" "', argument " "3"" of type '" "values::Scalar""'");
  } 
  arg3 = static_cast< values::Scalar >(val3);
  result = (values::Scalar)((values::ValueScalar2D const *)arg1)->GetValue(arg2,arg3);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ValueScalar2D_GetValue__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  values::ValueScalar2D *arg1 = (values::ValueScalar2D *) 0 ;
  values::Vector *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< values::ValueScalar2D const > tempshared1 ;
  std::shared_ptr< values::ValueScalar2D const > *smartarg1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  values::Scalar result;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_values__ValueScalar2D_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ValueScalar2D_GetValue" "', argument " "1"" of type '" "values::ValueScalar2D const *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const values::ValueScalar2D > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const values::ValueScalar2D > * >(argp1);
      arg1 = const_cast< values::ValueScalar2D * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const values::ValueScalar2D > * >(argp1);
      arg1 = const_cast< values::ValueScalar2D * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_eilig__Vector,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ValueScalar2D_GetValue" "', argument " "2"" of type '" "values::Vector const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ValueScalar2D_GetValue" "', argument " "2"" of type '" "values::Vector const &""'"); 
  }
  arg2 = reinterpret_cast< values::Vector * >(argp2);
  result = (values::Scalar)((values::ValueScalar2D const *)arg1)->GetValue((values::Vector const &)*arg2);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ValueScalar2D_GetValue(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "ValueScalar2D_GetValue", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_std__shared_ptrT_values__ValueScalar2D_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_eilig__Vector, SWIG_POINTER_NO_NULL | 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ValueScalar2D_GetValue__SWIG_1(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_std__shared_ptrT_values__ValueScalar2D_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_ValueScalar2D_GetValue__SWIG_0(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'ValueScalar2D_GetValue'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    values::ValueScalar2D::GetValue(values::Scalar,values::Scalar) const\n"
    "    values::ValueScalar2D::GetValue(values::Vector const &) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ValueScalar2D_SetName(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  values::ValueScalar2D *arg1 = (values::ValueScalar2D *) 0 ;
  values::String *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< values::ValueScalar2D > tempshared1 ;
  std::shared_ptr< values::ValueScalar2D > *smartarg1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "ValueScalar2D_SetName", 2, 2, swig_obj)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_values__ValueScalar2D_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ValueScalar2D_SetName" "', argument " "1"" of type '" "values::ValueScalar2D *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  values::ValueScalar2D > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  values::ValueScalar2D > * >(argp1);
      arg1 = const_cast< values::ValueScalar2D * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  values::ValueScalar2D > * >(argp1);
      arg1 = const_cast< values::ValueScalar2D * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ValueScalar2D_SetName" "', argument " "2"" of type '" "values::String const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ValueScalar2D_SetName" "', argument " "2"" of type '" "values::String const &""'"); 
    }
    arg2 = ptr;
  }
  (arg1)->SetName((values::String const &)*arg2);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_ValueScalar2D_SetKey(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  values::ValueScalar2D *arg1 = (values::ValueScalar2D *) 0 ;
  values::String *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< values::ValueScalar2D > tempshared1 ;
  std::shared_ptr< values::ValueScalar2D > *smartarg1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "ValueScalar2D_SetKey", 2, 2, swig_obj)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_values__ValueScalar2D_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ValueScalar2D_SetKey" "', argument " "1"" of type '" "values::ValueScalar2D *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  values::ValueScalar2D > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  values::ValueScalar2D > * >(argp1);
      arg1 = const_cast< values::ValueScalar2D * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  values::ValueScalar2D > * >(argp1);
      arg1 = const_cast< values::ValueScalar2D * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ValueScalar2D_SetKey" "', argument " "2"" of type '" "values::String const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ValueScalar2D_SetKey" "', argument " "2"" of type '" "values::String const &""'"); 
    }
    arg2 = ptr;
  }
  (arg1)->SetKey((values::String const &)*arg2);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_ValueScalar2D_SetValue(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  values::ValueScalar2D *arg1 = (values::ValueScalar2D *) 0 ;
  values::Scalar arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< values::ValueScalar2D > tempshared1 ;
  std::shared_ptr< values::ValueScalar2D > *smartarg1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "ValueScalar2D_SetValue", 2, 2, swig_obj)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_values__ValueScalar2D_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ValueScalar2D_SetValue" "', argument " "1"" of type '" "values::ValueScalar2D *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  values::ValueScalar2D > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  values::ValueScalar2D > * >(argp1);
      arg1 = const_cast< values::ValueScalar2D * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  values::ValueScalar2D > * >(argp1);
      arg1 = const_cast< values::ValueScalar2D * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ValueScalar2D_SetValue" "', argument " "2"" of type '" "values::Scalar""'");
  } 
  arg2 = static_cast< values::Scalar >(val2);
  (arg1)->SetValue(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *ValueScalar2D_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_std__shared_ptrT_values__ValueScalar2D_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_CreateValueScalar3D__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  values::Scalar arg1 ;
  double val1 ;
  int ecode1 = 0 ;
  values::ValueScalar3DPtr result;
  
  (void)self;
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "CreateValueScalar3D" "', argument " "1"" of type '" "values::Scalar""'");
  } 
  arg1 = static_cast< values::Scalar >(val1);
  result = values::CreateValueScalar3D(arg1);
  {
    std::shared_ptr<  values::ValueScalar3D > *smartresult = result ? new std::shared_ptr<  values::ValueScalar3D >(result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_std__shared_ptrT_values__ValueScalar3D_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CreateValueScalar3D__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  values::Scalar arg1 ;
  values::String arg2 ;
  values::String arg3 ;
  double val1 ;
  int ecode1 = 0 ;
  values::ValueScalar3DPtr result;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "CreateValueScalar3D" "', argument " "1"" of type '" "values::Scalar""'");
  } 
  arg1 = static_cast< values::Scalar >(val1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "CreateValueScalar3D" "', argument " "2"" of type '" "values::String""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(swig_obj[2], &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "CreateValueScalar3D" "', argument " "3"" of type '" "values::String""'"); 
    }
    arg3 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  result = values::CreateValueScalar3D(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3));
  {
    std::shared_ptr<  values::ValueScalar3D > *smartresult = result ? new std::shared_ptr<  values::ValueScalar3D >(result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_std__shared_ptrT_values__ValueScalar3D_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CreateValueScalar3D(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "CreateValueScalar3D", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    int _v = 0;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_CreateValueScalar3D__SWIG_0(self, argc, argv);
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_CreateValueScalar3D__SWIG_1(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'CreateValueScalar3D'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    values::CreateValueScalar3D(values::Scalar)\n"
    "    values::CreateValueScalar3D(values::Scalar,values::String,values::String)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_ValueScalar3D(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  values::ValueScalar3D *arg1 = (values::ValueScalar3D *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< values::ValueScalar3D > tempshared1 ;
  std::shared_ptr< values::ValueScalar3D > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_values__ValueScalar3D_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ValueScalar3D" "', argument " "1"" of type '" "values::ValueScalar3D *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  values::ValueScalar3D > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  values::ValueScalar3D > * >(argp1);
      arg1 = const_cast< values::ValueScalar3D * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  values::ValueScalar3D > * >(argp1);
      arg1 = const_cast< values::ValueScalar3D * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  (void)arg1; delete smartarg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ValueScalar3D_Create(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  values::ValueScalar3DPtr result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "ValueScalar3D_Create", 0, 0, 0)) SWIG_fail;
  result = values::ValueScalar3D::Create();
  {
    std::shared_ptr<  values::ValueScalar3D > *smartresult = result ? new std::shared_ptr<  values::ValueScalar3D >(result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_std__shared_ptrT_values__ValueScalar3D_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ValueScalar3D_GetType(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  values::ValueScalar3D *arg1 = (values::ValueScalar3D *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< values::ValueScalar3D const > tempshared1 ;
  std::shared_ptr< values::ValueScalar3D const > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  values::Type result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_values__ValueScalar3D_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ValueScalar3D_GetType" "', argument " "1"" of type '" "values::ValueScalar3D const *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const values::ValueScalar3D > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const values::ValueScalar3D > * >(argp1);
      arg1 = const_cast< values::ValueScalar3D * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const values::ValueScalar3D > * >(argp1);
      arg1 = const_cast< values::ValueScalar3D * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = ((values::ValueScalar3D const *)arg1)->GetType();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ValueScalar3D_GetName(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  values::ValueScalar3D *arg1 = (values::ValueScalar3D *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< values::ValueScalar3D const > tempshared1 ;
  std::shared_ptr< values::ValueScalar3D const > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  values::String *result = 0 ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_values__ValueScalar3D_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ValueScalar3D_GetName" "', argument " "1"" of type '" "values::ValueScalar3D const *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const values::ValueScalar3D > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const values::ValueScalar3D > * >(argp1);
      arg1 = const_cast< values::ValueScalar3D * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const values::ValueScalar3D > * >(argp1);
      arg1 = const_cast< values::ValueScalar3D * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = (values::String *) &((values::ValueScalar3D const *)arg1)->GetName();
  resultobj = SWIG_From_std_string(static_cast< std::string >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ValueScalar3D_GetKey(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  values::ValueScalar3D *arg1 = (values::ValueScalar3D *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< values::ValueScalar3D const > tempshared1 ;
  std::shared_ptr< values::ValueScalar3D const > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  values::String *result = 0 ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_values__ValueScalar3D_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ValueScalar3D_GetKey" "', argument " "1"" of type '" "values::ValueScalar3D const *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const values::ValueScalar3D > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const values::ValueScalar3D > * >(argp1);
      arg1 = const_cast< values::ValueScalar3D * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const values::ValueScalar3D > * >(argp1);
      arg1 = const_cast< values::ValueScalar3D * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = (values::String *) &((values::ValueScalar3D const *)arg1)->GetKey();
  resultobj = SWIG_From_std_string(static_cast< std::string >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ValueScalar3D_GetValue__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  values::ValueScalar3D *arg1 = (values::ValueScalar3D *) 0 ;
  values::Scalar arg2 ;
  values::Scalar arg3 ;
  values::Scalar arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< values::ValueScalar3D const > tempshared1 ;
  std::shared_ptr< values::ValueScalar3D const > *smartarg1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  values::Scalar result;
  
  (void)self;
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_values__ValueScalar3D_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ValueScalar3D_GetValue" "', argument " "1"" of type '" "values::ValueScalar3D const *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const values::ValueScalar3D > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const values::ValueScalar3D > * >(argp1);
      arg1 = const_cast< values::ValueScalar3D * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const values::ValueScalar3D > * >(argp1);
      arg1 = const_cast< values::ValueScalar3D * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ValueScalar3D_GetValue" "', argument " "2"" of type '" "values::Scalar""'");
  } 
  arg2 = static_cast< values::Scalar >(val2);
  ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ValueScalar3D_GetValue" "', argument " "3"" of type '" "values::Scalar""'");
  } 
  arg3 = static_cast< values::Scalar >(val3);
  ecode4 = SWIG_AsVal_double(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "ValueScalar3D_GetValue" "', argument " "4"" of type '" "values::Scalar""'");
  } 
  arg4 = static_cast< values::Scalar >(val4);
  result = (values::Scalar)((values::ValueScalar3D const *)arg1)->GetValue(arg2,arg3,arg4);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ValueScalar3D_GetValue__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  values::ValueScalar3D *arg1 = (values::ValueScalar3D *) 0 ;
  values::Vector *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< values::ValueScalar3D const > tempshared1 ;
  std::shared_ptr< values::ValueScalar3D const > *smartarg1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  values::Scalar result;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_values__ValueScalar3D_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ValueScalar3D_GetValue" "', argument " "1"" of type '" "values::ValueScalar3D const *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const values::ValueScalar3D > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const values::ValueScalar3D > * >(argp1);
      arg1 = const_cast< values::ValueScalar3D * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const values::ValueScalar3D > * >(argp1);
      arg1 = const_cast< values::ValueScalar3D * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_eilig__Vector,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ValueScalar3D_GetValue" "', argument " "2"" of type '" "values::Vector const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ValueScalar3D_GetValue" "', argument " "2"" of type '" "values::Vector const &""'"); 
  }
  arg2 = reinterpret_cast< values::Vector * >(argp2);
  result = (values::Scalar)((values::ValueScalar3D const *)arg1)->GetValue((values::Vector const &)*arg2);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ValueScalar3D_GetValue(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "ValueScalar3D_GetValue", 0, 4, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_std__shared_ptrT_values__ValueScalar3D_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_eilig__Vector, SWIG_POINTER_NO_NULL | 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ValueScalar3D_GetValue__SWIG_1(self, argc, argv);
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_std__shared_ptrT_values__ValueScalar3D_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_ValueScalar3D_GetValue__SWIG_0(self, argc, argv);
          }
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'ValueScalar3D_GetValue'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    values::ValueScalar3D::GetValue(values::Scalar,values::Scalar,values::Scalar) const\n"
    "    values::ValueScalar3D::GetValue(values::Vector const &) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ValueScalar3D_SetName(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  values::ValueScalar3D *arg1 = (values::ValueScalar3D *) 0 ;
  values::String *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< values::ValueScalar3D > tempshared1 ;
  std::shared_ptr< values::ValueScalar3D > *smartarg1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "ValueScalar3D_SetName", 2, 2, swig_obj)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_values__ValueScalar3D_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ValueScalar3D_SetName" "', argument " "1"" of type '" "values::ValueScalar3D *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  values::ValueScalar3D > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  values::ValueScalar3D > * >(argp1);
      arg1 = const_cast< values::ValueScalar3D * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  values::ValueScalar3D > * >(argp1);
      arg1 = const_cast< values::ValueScalar3D * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ValueScalar3D_SetName" "', argument " "2"" of type '" "values::String const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ValueScalar3D_SetName" "', argument " "2"" of type '" "values::String const &""'"); 
    }
    arg2 = ptr;
  }
  (arg1)->SetName((values::String const &)*arg2);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_ValueScalar3D_SetKey(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  values::ValueScalar3D *arg1 = (values::ValueScalar3D *) 0 ;
  values::String *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< values::ValueScalar3D > tempshared1 ;
  std::shared_ptr< values::ValueScalar3D > *smartarg1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "ValueScalar3D_SetKey", 2, 2, swig_obj)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_values__ValueScalar3D_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ValueScalar3D_SetKey" "', argument " "1"" of type '" "values::ValueScalar3D *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  values::ValueScalar3D > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  values::ValueScalar3D > * >(argp1);
      arg1 = const_cast< values::ValueScalar3D * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  values::ValueScalar3D > * >(argp1);
      arg1 = const_cast< values::ValueScalar3D * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ValueScalar3D_SetKey" "', argument " "2"" of type '" "values::String const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ValueScalar3D_SetKey" "', argument " "2"" of type '" "values::String const &""'"); 
    }
    arg2 = ptr;
  }
  (arg1)->SetKey((values::String const &)*arg2);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_ValueScalar3D_SetValue(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  values::ValueScalar3D *arg1 = (values::ValueScalar3D *) 0 ;
  values::Scalar arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< values::ValueScalar3D > tempshared1 ;
  std::shared_ptr< values::ValueScalar3D > *smartarg1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "ValueScalar3D_SetValue", 2, 2, swig_obj)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_values__ValueScalar3D_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ValueScalar3D_SetValue" "', argument " "1"" of type '" "values::ValueScalar3D *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  values::ValueScalar3D > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  values::ValueScalar3D > * >(argp1);
      arg1 = const_cast< values::ValueScalar3D * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  values::ValueScalar3D > * >(argp1);
      arg1 = const_cast< values::ValueScalar3D * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ValueScalar3D_SetValue" "', argument " "2"" of type '" "values::Scalar""'");
  } 
  arg2 = static_cast< values::Scalar >(val2);
  (arg1)->SetValue(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *ValueScalar3D_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_std__shared_ptrT_values__ValueScalar3D_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_CreateValueScalar1DFunction__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  values::Scalar (*arg1)(values::Scalar) = (values::Scalar (*)(values::Scalar)) 0 ;
  values::ValueScalar1DFunctionPtr result;
  
  (void)self;
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  {
    int res = SWIG_ConvertFunctionPtr(swig_obj[0], (void**)(&arg1), SWIGTYPE_p_f_double__double);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in method '" "CreateValueScalar1DFunction" "', argument " "1"" of type '" "values::Scalar (*)(values::Scalar)""'"); 
    }
  }
  result = values::CreateValueScalar1DFunction(arg1);
  {
    std::shared_ptr<  values::ValueScalar1DFunction > *smartresult = result ? new std::shared_ptr<  values::ValueScalar1DFunction >(result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_std__shared_ptrT_values__ValueScalar1DFunction_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CreateValueScalar1DFunction__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  values::Scalar (*arg1)(values::Scalar) = (values::Scalar (*)(values::Scalar)) 0 ;
  values::String arg2 ;
  values::String arg3 ;
  values::ValueScalar1DFunctionPtr result;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  {
    int res = SWIG_ConvertFunctionPtr(swig_obj[0], (void**)(&arg1), SWIGTYPE_p_f_double__double);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in method '" "CreateValueScalar1DFunction" "', argument " "1"" of type '" "values::Scalar (*)(values::Scalar)""'"); 
    }
  }
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "CreateValueScalar1DFunction" "', argument " "2"" of type '" "values::String""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(swig_obj[2], &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "CreateValueScalar1DFunction" "', argument " "3"" of type '" "values::String""'"); 
    }
    arg3 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  result = values::CreateValueScalar1DFunction(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3));
  {
    std::shared_ptr<  values::ValueScalar1DFunction > *smartresult = result ? new std::shared_ptr<  values::ValueScalar1DFunction >(result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_std__shared_ptrT_values__ValueScalar1DFunction_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CreateValueScalar1DFunction(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "CreateValueScalar1DFunction", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    int _v = 0;
    void *ptr = 0;
    int res = SWIG_ConvertFunctionPtr(argv[0], &ptr, SWIGTYPE_p_f_double__double);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_CreateValueScalar1DFunction__SWIG_0(self, argc, argv);
    }
  }
  if (argc == 3) {
    int _v = 0;
    void *ptr = 0;
    int res = SWIG_ConvertFunctionPtr(argv[0], &ptr, SWIGTYPE_p_f_double__double);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_CreateValueScalar1DFunction__SWIG_1(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'CreateValueScalar1DFunction'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    values::CreateValueScalar1DFunction(values::Scalar (*)(values::Scalar))\n"
    "    values::CreateValueScalar1DFunction(values::Scalar (*)(values::Scalar),values::String,values::String)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_ValueScalar1DFunction(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  values::ValueScalar1DFunction *arg1 = (values::ValueScalar1DFunction *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< values::ValueScalar1DFunction > tempshared1 ;
  std::shared_ptr< values::ValueScalar1DFunction > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_values__ValueScalar1DFunction_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ValueScalar1DFunction" "', argument " "1"" of type '" "values::ValueScalar1DFunction *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  values::ValueScalar1DFunction > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  values::ValueScalar1DFunction > * >(argp1);
      arg1 = const_cast< values::ValueScalar1DFunction * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  values::ValueScalar1DFunction > * >(argp1);
      arg1 = const_cast< values::ValueScalar1DFunction * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  (void)arg1; delete smartarg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ValueScalar1DFunction_Create(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  values::ValueScalar1DFunctionPtr result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "ValueScalar1DFunction_Create", 0, 0, 0)) SWIG_fail;
  result = values::ValueScalar1DFunction::Create();
  {
    std::shared_ptr<  values::ValueScalar1DFunction > *smartresult = result ? new std::shared_ptr<  values::ValueScalar1DFunction >(result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_std__shared_ptrT_values__ValueScalar1DFunction_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ValueScalar1DFunction_GetType(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  values::ValueScalar1DFunction *arg1 = (values::ValueScalar1DFunction *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< values::ValueScalar1DFunction const > tempshared1 ;
  std::shared_ptr< values::ValueScalar1DFunction const > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  values::Type result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_values__ValueScalar1DFunction_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ValueScalar1DFunction_GetType" "', argument " "1"" of type '" "values::ValueScalar1DFunction const *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const values::ValueScalar1DFunction > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const values::ValueScalar1DFunction > * >(argp1);
      arg1 = const_cast< values::ValueScalar1DFunction * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const values::ValueScalar1DFunction > * >(argp1);
      arg1 = const_cast< values::ValueScalar1DFunction * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = ((values::ValueScalar1DFunction const *)arg1)->GetType();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ValueScalar1DFunction_GetName(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  values::ValueScalar1DFunction *arg1 = (values::ValueScalar1DFunction *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< values::ValueScalar1DFunction const > tempshared1 ;
  std::shared_ptr< values::ValueScalar1DFunction const > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  values::String *result = 0 ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_values__ValueScalar1DFunction_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ValueScalar1DFunction_GetName" "', argument " "1"" of type '" "values::ValueScalar1DFunction const *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const values::ValueScalar1DFunction > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const values::ValueScalar1DFunction > * >(argp1);
      arg1 = const_cast< values::ValueScalar1DFunction * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const values::ValueScalar1DFunction > * >(argp1);
      arg1 = const_cast< values::ValueScalar1DFunction * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = (values::String *) &((values::ValueScalar1DFunction const *)arg1)->GetName();
  resultobj = SWIG_From_std_string(static_cast< std::string >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ValueScalar1DFunction_GetKey(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  values::ValueScalar1DFunction *arg1 = (values::ValueScalar1DFunction *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< values::ValueScalar1DFunction const > tempshared1 ;
  std::shared_ptr< values::ValueScalar1DFunction const > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  values::String *result = 0 ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_values__ValueScalar1DFunction_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ValueScalar1DFunction_GetKey" "', argument " "1"" of type '" "values::ValueScalar1DFunction const *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const values::ValueScalar1DFunction > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const values::ValueScalar1DFunction > * >(argp1);
      arg1 = const_cast< values::ValueScalar1DFunction * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const values::ValueScalar1DFunction > * >(argp1);
      arg1 = const_cast< values::ValueScalar1DFunction * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = (values::String *) &((values::ValueScalar1DFunction const *)arg1)->GetKey();
  resultobj = SWIG_From_std_string(static_cast< std::string >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ValueScalar1DFunction_GetValue__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  values::ValueScalar1DFunction *arg1 = (values::ValueScalar1DFunction *) 0 ;
  values::Scalar arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< values::ValueScalar1DFunction const > tempshared1 ;
  std::shared_ptr< values::ValueScalar1DFunction const > *smartarg1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  values::Scalar result;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_values__ValueScalar1DFunction_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ValueScalar1DFunction_GetValue" "', argument " "1"" of type '" "values::ValueScalar1DFunction const *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const values::ValueScalar1DFunction > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const values::ValueScalar1DFunction > * >(argp1);
      arg1 = const_cast< values::ValueScalar1DFunction * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const values::ValueScalar1DFunction > * >(argp1);
      arg1 = const_cast< values::ValueScalar1DFunction * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ValueScalar1DFunction_GetValue" "', argument " "2"" of type '" "values::Scalar""'");
  } 
  arg2 = static_cast< values::Scalar >(val2);
  result = (values::Scalar)((values::ValueScalar1DFunction const *)arg1)->GetValue(arg2);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ValueScalar1DFunction_GetValue__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  values::ValueScalar1DFunction *arg1 = (values::ValueScalar1DFunction *) 0 ;
  values::Vector *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< values::ValueScalar1DFunction const > tempshared1 ;
  std::shared_ptr< values::ValueScalar1DFunction const > *smartarg1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  values::Scalar result;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_values__ValueScalar1DFunction_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ValueScalar1DFunction_GetValue" "', argument " "1"" of type '" "values::ValueScalar1DFunction const *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const values::ValueScalar1DFunction > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const values::ValueScalar1DFunction > * >(argp1);
      arg1 = const_cast< values::ValueScalar1DFunction * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const values::ValueScalar1DFunction > * >(argp1);
      arg1 = const_cast< values::ValueScalar1DFunction * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_eilig__Vector,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ValueScalar1DFunction_GetValue" "', argument " "2"" of type '" "values::Vector const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ValueScalar1DFunction_GetValue" "', argument " "2"" of type '" "values::Vector const &""'"); 
  }
  arg2 = reinterpret_cast< values::Vector * >(argp2);
  result = (values::Scalar)((values::ValueScalar1DFunction const *)arg1)->GetValue((values::Vector const &)*arg2);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ValueScalar1DFunction_GetValue(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "ValueScalar1DFunction_GetValue", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_std__shared_ptrT_values__ValueScalar1DFunction_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_eilig__Vector, SWIG_POINTER_NO_NULL | 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ValueScalar1DFunction_GetValue__SWIG_1(self, argc, argv);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_std__shared_ptrT_values__ValueScalar1DFunction_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_ValueScalar1DFunction_GetValue__SWIG_0(self, argc, argv);
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'ValueScalar1DFunction_GetValue'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    values::ValueScalar1DFunction::GetValue(values::Scalar) const\n"
    "    values::ValueScalar1DFunction::GetValue(values::Vector const &) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ValueScalar1DFunction_SetName(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  values::ValueScalar1DFunction *arg1 = (values::ValueScalar1DFunction *) 0 ;
  values::String *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< values::ValueScalar1DFunction > tempshared1 ;
  std::shared_ptr< values::ValueScalar1DFunction > *smartarg1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "ValueScalar1DFunction_SetName", 2, 2, swig_obj)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_values__ValueScalar1DFunction_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ValueScalar1DFunction_SetName" "', argument " "1"" of type '" "values::ValueScalar1DFunction *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  values::ValueScalar1DFunction > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  values::ValueScalar1DFunction > * >(argp1);
      arg1 = const_cast< values::ValueScalar1DFunction * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  values::ValueScalar1DFunction > * >(argp1);
      arg1 = const_cast< values::ValueScalar1DFunction * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ValueScalar1DFunction_SetName" "', argument " "2"" of type '" "values::String const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ValueScalar1DFunction_SetName" "', argument " "2"" of type '" "values::String const &""'"); 
    }
    arg2 = ptr;
  }
  (arg1)->SetName((values::String const &)*arg2);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_ValueScalar1DFunction_SetKey(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  values::ValueScalar1DFunction *arg1 = (values::ValueScalar1DFunction *) 0 ;
  values::String *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< values::ValueScalar1DFunction > tempshared1 ;
  std::shared_ptr< values::ValueScalar1DFunction > *smartarg1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "ValueScalar1DFunction_SetKey", 2, 2, swig_obj)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_values__ValueScalar1DFunction_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ValueScalar1DFunction_SetKey" "', argument " "1"" of type '" "values::ValueScalar1DFunction *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  values::ValueScalar1DFunction > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  values::ValueScalar1DFunction > * >(argp1);
      arg1 = const_cast< values::ValueScalar1DFunction * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  values::ValueScalar1DFunction > * >(argp1);
      arg1 = const_cast< values::ValueScalar1DFunction * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ValueScalar1DFunction_SetKey" "', argument " "2"" of type '" "values::String const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ValueScalar1DFunction_SetKey" "', argument " "2"" of type '" "values::String const &""'"); 
    }
    arg2 = ptr;
  }
  (arg1)->SetKey((values::String const &)*arg2);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_ValueScalar1DFunction_SetFunction(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  values::ValueScalar1DFunction *arg1 = (values::ValueScalar1DFunction *) 0 ;
  values::Function_S_S arg2 = (values::Function_S_S) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< values::ValueScalar1DFunction > tempshared1 ;
  std::shared_ptr< values::ValueScalar1DFunction > *smartarg1 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "ValueScalar1DFunction_SetFunction", 2, 2, swig_obj)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_values__ValueScalar1DFunction_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ValueScalar1DFunction_SetFunction" "', argument " "1"" of type '" "values::ValueScalar1DFunction *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  values::ValueScalar1DFunction > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  values::ValueScalar1DFunction > * >(argp1);
      arg1 = const_cast< values::ValueScalar1DFunction * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  values::ValueScalar1DFunction > * >(argp1);
      arg1 = const_cast< values::ValueScalar1DFunction * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    int res = SWIG_ConvertFunctionPtr(swig_obj[1], (void**)(&arg2), SWIGTYPE_p_f_double__double);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in method '" "ValueScalar1DFunction_SetFunction" "', argument " "2"" of type '" "values::Function_S_S""'"); 
    }
  }
  (arg1)->SetFunction(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *ValueScalar1DFunction_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_std__shared_ptrT_values__ValueScalar1DFunction_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_CreateValueScalar2DFunction__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  values::Scalar (*arg1)(values::Scalar,values::Scalar) = (values::Scalar (*)(values::Scalar,values::Scalar)) 0 ;
  values::ValueScalar2DFunctionPtr result;
  
  (void)self;
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  {
    int res = SWIG_ConvertFunctionPtr(swig_obj[0], (void**)(&arg1), SWIGTYPE_p_f_double_double__double);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in method '" "CreateValueScalar2DFunction" "', argument " "1"" of type '" "values::Scalar (*)(values::Scalar,values::Scalar)""'"); 
    }
  }
  result = values::CreateValueScalar2DFunction(arg1);
  {
    std::shared_ptr<  values::ValueScalar2DFunction > *smartresult = result ? new std::shared_ptr<  values::ValueScalar2DFunction >(result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_std__shared_ptrT_values__ValueScalar2DFunction_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CreateValueScalar2DFunction__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  values::Scalar (*arg1)(values::Scalar,values::Scalar) = (values::Scalar (*)(values::Scalar,values::Scalar)) 0 ;
  values::String arg2 ;
  values::String arg3 ;
  values::ValueScalar2DFunctionPtr result;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  {
    int res = SWIG_ConvertFunctionPtr(swig_obj[0], (void**)(&arg1), SWIGTYPE_p_f_double_double__double);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in method '" "CreateValueScalar2DFunction" "', argument " "1"" of type '" "values::Scalar (*)(values::Scalar,values::Scalar)""'"); 
    }
  }
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "CreateValueScalar2DFunction" "', argument " "2"" of type '" "values::String""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(swig_obj[2], &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "CreateValueScalar2DFunction" "', argument " "3"" of type '" "values::String""'"); 
    }
    arg3 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  result = values::CreateValueScalar2DFunction(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3));
  {
    std::shared_ptr<  values::ValueScalar2DFunction > *smartresult = result ? new std::shared_ptr<  values::ValueScalar2DFunction >(result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_std__shared_ptrT_values__ValueScalar2DFunction_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CreateValueScalar2DFunction(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "CreateValueScalar2DFunction", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    int _v = 0;
    void *ptr = 0;
    int res = SWIG_ConvertFunctionPtr(argv[0], &ptr, SWIGTYPE_p_f_double_double__double);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_CreateValueScalar2DFunction__SWIG_0(self, argc, argv);
    }
  }
  if (argc == 3) {
    int _v = 0;
    void *ptr = 0;
    int res = SWIG_ConvertFunctionPtr(argv[0], &ptr, SWIGTYPE_p_f_double_double__double);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_CreateValueScalar2DFunction__SWIG_1(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'CreateValueScalar2DFunction'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    values::CreateValueScalar2DFunction(values::Scalar (*)(values::Scalar,values::Scalar))\n"
    "    values::CreateValueScalar2DFunction(values::Scalar (*)(values::Scalar,values::Scalar),values::String,values::String)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_ValueScalar2DFunction(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  values::ValueScalar2DFunction *arg1 = (values::ValueScalar2DFunction *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< values::ValueScalar2DFunction > tempshared1 ;
  std::shared_ptr< values::ValueScalar2DFunction > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_values__ValueScalar2DFunction_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ValueScalar2DFunction" "', argument " "1"" of type '" "values::ValueScalar2DFunction *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  values::ValueScalar2DFunction > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  values::ValueScalar2DFunction > * >(argp1);
      arg1 = const_cast< values::ValueScalar2DFunction * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  values::ValueScalar2DFunction > * >(argp1);
      arg1 = const_cast< values::ValueScalar2DFunction * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  (void)arg1; delete smartarg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ValueScalar2DFunction_Create(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  values::ValueScalar2DFunctionPtr result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "ValueScalar2DFunction_Create", 0, 0, 0)) SWIG_fail;
  result = values::ValueScalar2DFunction::Create();
  {
    std::shared_ptr<  values::ValueScalar2DFunction > *smartresult = result ? new std::shared_ptr<  values::ValueScalar2DFunction >(result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_std__shared_ptrT_values__ValueScalar2DFunction_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ValueScalar2DFunction_GetType(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  values::ValueScalar2DFunction *arg1 = (values::ValueScalar2DFunction *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< values::ValueScalar2DFunction const > tempshared1 ;
  std::shared_ptr< values::ValueScalar2DFunction const > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  values::Type result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_values__ValueScalar2DFunction_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ValueScalar2DFunction_GetType" "', argument " "1"" of type '" "values::ValueScalar2DFunction const *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const values::ValueScalar2DFunction > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const values::ValueScalar2DFunction > * >(argp1);
      arg1 = const_cast< values::ValueScalar2DFunction * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const values::ValueScalar2DFunction > * >(argp1);
      arg1 = const_cast< values::ValueScalar2DFunction * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = ((values::ValueScalar2DFunction const *)arg1)->GetType();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ValueScalar2DFunction_GetName(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  values::ValueScalar2DFunction *arg1 = (values::ValueScalar2DFunction *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< values::ValueScalar2DFunction const > tempshared1 ;
  std::shared_ptr< values::ValueScalar2DFunction const > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  values::String *result = 0 ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_values__ValueScalar2DFunction_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ValueScalar2DFunction_GetName" "', argument " "1"" of type '" "values::ValueScalar2DFunction const *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const values::ValueScalar2DFunction > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const values::ValueScalar2DFunction > * >(argp1);
      arg1 = const_cast< values::ValueScalar2DFunction * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const values::ValueScalar2DFunction > * >(argp1);
      arg1 = const_cast< values::ValueScalar2DFunction * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = (values::String *) &((values::ValueScalar2DFunction const *)arg1)->GetName();
  resultobj = SWIG_From_std_string(static_cast< std::string >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ValueScalar2DFunction_GetKey(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  values::ValueScalar2DFunction *arg1 = (values::ValueScalar2DFunction *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< values::ValueScalar2DFunction const > tempshared1 ;
  std::shared_ptr< values::ValueScalar2DFunction const > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  values::String *result = 0 ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_values__ValueScalar2DFunction_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ValueScalar2DFunction_GetKey" "', argument " "1"" of type '" "values::ValueScalar2DFunction const *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const values::ValueScalar2DFunction > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const values::ValueScalar2DFunction > * >(argp1);
      arg1 = const_cast< values::ValueScalar2DFunction * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const values::ValueScalar2DFunction > * >(argp1);
      arg1 = const_cast< values::ValueScalar2DFunction * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = (values::String *) &((values::ValueScalar2DFunction const *)arg1)->GetKey();
  resultobj = SWIG_From_std_string(static_cast< std::string >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ValueScalar2DFunction_GetValue__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  values::ValueScalar2DFunction *arg1 = (values::ValueScalar2DFunction *) 0 ;
  values::Scalar arg2 ;
  values::Scalar arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< values::ValueScalar2DFunction const > tempshared1 ;
  std::shared_ptr< values::ValueScalar2DFunction const > *smartarg1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  values::Scalar result;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_values__ValueScalar2DFunction_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ValueScalar2DFunction_GetValue" "', argument " "1"" of type '" "values::ValueScalar2DFunction const *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const values::ValueScalar2DFunction > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const values::ValueScalar2DFunction > * >(argp1);
      arg1 = const_cast< values::ValueScalar2DFunction * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const values::ValueScalar2DFunction > * >(argp1);
      arg1 = const_cast< values::ValueScalar2DFunction * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ValueScalar2DFunction_GetValue" "', argument " "2"" of type '" "values::Scalar""'");
  } 
  arg2 = static_cast< values::Scalar >(val2);
  ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ValueScalar2DFunction_GetValue" "', argument " "3"" of type '" "values::Scalar""'");
  } 
  arg3 = static_cast< values::Scalar >(val3);
  result = (values::Scalar)((values::ValueScalar2DFunction const *)arg1)->GetValue(arg2,arg3);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ValueScalar2DFunction_GetValue__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  values::ValueScalar2DFunction *arg1 = (values::ValueScalar2DFunction *) 0 ;
  values::Vector *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< values::ValueScalar2DFunction const > tempshared1 ;
  std::shared_ptr< values::ValueScalar2DFunction const > *smartarg1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  values::Scalar result;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_values__ValueScalar2DFunction_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ValueScalar2DFunction_GetValue" "', argument " "1"" of type '" "values::ValueScalar2DFunction const *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const values::ValueScalar2DFunction > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const values::ValueScalar2DFunction > * >(argp1);
      arg1 = const_cast< values::ValueScalar2DFunction * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const values::ValueScalar2DFunction > * >(argp1);
      arg1 = const_cast< values::ValueScalar2DFunction * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_eilig__Vector,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ValueScalar2DFunction_GetValue" "', argument " "2"" of type '" "values::Vector const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ValueScalar2DFunction_GetValue" "', argument " "2"" of type '" "values::Vector const &""'"); 
  }
  arg2 = reinterpret_cast< values::Vector * >(argp2);
  result = (values::Scalar)((values::ValueScalar2DFunction const *)arg1)->GetValue((values::Vector const &)*arg2);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ValueScalar2DFunction_GetValue(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "ValueScalar2DFunction_GetValue", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_std__shared_ptrT_values__ValueScalar2DFunction_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_eilig__Vector, SWIG_POINTER_NO_NULL | 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ValueScalar2DFunction_GetValue__SWIG_1(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_std__shared_ptrT_values__ValueScalar2DFunction_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_ValueScalar2DFunction_GetValue__SWIG_0(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'ValueScalar2DFunction_GetValue'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    values::ValueScalar2DFunction::GetValue(values::Scalar,values::Scalar) const\n"
    "    values::ValueScalar2DFunction::GetValue(values::Vector const &) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ValueScalar2DFunction_SetName(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  values::ValueScalar2DFunction *arg1 = (values::ValueScalar2DFunction *) 0 ;
  values::String *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< values::ValueScalar2DFunction > tempshared1 ;
  std::shared_ptr< values::ValueScalar2DFunction > *smartarg1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "ValueScalar2DFunction_SetName", 2, 2, swig_obj)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_values__ValueScalar2DFunction_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ValueScalar2DFunction_SetName" "', argument " "1"" of type '" "values::ValueScalar2DFunction *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  values::ValueScalar2DFunction > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  values::ValueScalar2DFunction > * >(argp1);
      arg1 = const_cast< values::ValueScalar2DFunction * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  values::ValueScalar2DFunction > * >(argp1);
      arg1 = const_cast< values::ValueScalar2DFunction * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ValueScalar2DFunction_SetName" "', argument " "2"" of type '" "values::String const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ValueScalar2DFunction_SetName" "', argument " "2"" of type '" "values::String const &""'"); 
    }
    arg2 = ptr;
  }
  (arg1)->SetName((values::String const &)*arg2);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_ValueScalar2DFunction_SetKey(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  values::ValueScalar2DFunction *arg1 = (values::ValueScalar2DFunction *) 0 ;
  values::String *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< values::ValueScalar2DFunction > tempshared1 ;
  std::shared_ptr< values::ValueScalar2DFunction > *smartarg1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "ValueScalar2DFunction_SetKey", 2, 2, swig_obj)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_values__ValueScalar2DFunction_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ValueScalar2DFunction_SetKey" "', argument " "1"" of type '" "values::ValueScalar2DFunction *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  values::ValueScalar2DFunction > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  values::ValueScalar2DFunction > * >(argp1);
      arg1 = const_cast< values::ValueScalar2DFunction * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  values::ValueScalar2DFunction > * >(argp1);
      arg1 = const_cast< values::ValueScalar2DFunction * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ValueScalar2DFunction_SetKey" "', argument " "2"" of type '" "values::String const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ValueScalar2DFunction_SetKey" "', argument " "2"" of type '" "values::String const &""'"); 
    }
    arg2 = ptr;
  }
  (arg1)->SetKey((values::String const &)*arg2);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_ValueScalar2DFunction_SetFunction(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  values::ValueScalar2DFunction *arg1 = (values::ValueScalar2DFunction *) 0 ;
  values::Function_S_SS arg2 = (values::Function_S_SS) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< values::ValueScalar2DFunction > tempshared1 ;
  std::shared_ptr< values::ValueScalar2DFunction > *smartarg1 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "ValueScalar2DFunction_SetFunction", 2, 2, swig_obj)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_values__ValueScalar2DFunction_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ValueScalar2DFunction_SetFunction" "', argument " "1"" of type '" "values::ValueScalar2DFunction *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  values::ValueScalar2DFunction > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  values::ValueScalar2DFunction > * >(argp1);
      arg1 = const_cast< values::ValueScalar2DFunction * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  values::ValueScalar2DFunction > * >(argp1);
      arg1 = const_cast< values::ValueScalar2DFunction * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    int res = SWIG_ConvertFunctionPtr(swig_obj[1], (void**)(&arg2), SWIGTYPE_p_f_double_double__double);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in method '" "ValueScalar2DFunction_SetFunction" "', argument " "2"" of type '" "values::Function_S_SS""'"); 
    }
  }
  (arg1)->SetFunction(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *ValueScalar2DFunction_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_std__shared_ptrT_values__ValueScalar2DFunction_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_CreateValueScalar3DFunction__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  values::Scalar (*arg1)(values::Scalar,values::Scalar,values::Scalar) = (values::Scalar (*)(values::Scalar,values::Scalar,values::Scalar)) 0 ;
  values::ValueScalar3DFunctionPtr result;
  
  (void)self;
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  {
    int res = SWIG_ConvertFunctionPtr(swig_obj[0], (void**)(&arg1), SWIGTYPE_p_f_double_double_double__double);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in method '" "CreateValueScalar3DFunction" "', argument " "1"" of type '" "values::Scalar (*)(values::Scalar,values::Scalar,values::Scalar)""'"); 
    }
  }
  result = values::CreateValueScalar3DFunction(arg1);
  {
    std::shared_ptr<  values::ValueScalar3DFunction > *smartresult = result ? new std::shared_ptr<  values::ValueScalar3DFunction >(result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_std__shared_ptrT_values__ValueScalar3DFunction_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CreateValueScalar3DFunction__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  values::Scalar (*arg1)(values::Scalar,values::Scalar,values::Scalar) = (values::Scalar (*)(values::Scalar,values::Scalar,values::Scalar)) 0 ;
  values::String arg2 ;
  values::String arg3 ;
  values::ValueScalar3DFunctionPtr result;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  {
    int res = SWIG_ConvertFunctionPtr(swig_obj[0], (void**)(&arg1), SWIGTYPE_p_f_double_double_double__double);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in method '" "CreateValueScalar3DFunction" "', argument " "1"" of type '" "values::Scalar (*)(values::Scalar,values::Scalar,values::Scalar)""'"); 
    }
  }
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "CreateValueScalar3DFunction" "', argument " "2"" of type '" "values::String""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(swig_obj[2], &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "CreateValueScalar3DFunction" "', argument " "3"" of type '" "values::String""'"); 
    }
    arg3 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  result = values::CreateValueScalar3DFunction(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3));
  {
    std::shared_ptr<  values::ValueScalar3DFunction > *smartresult = result ? new std::shared_ptr<  values::ValueScalar3DFunction >(result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_std__shared_ptrT_values__ValueScalar3DFunction_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CreateValueScalar3DFunction(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "CreateValueScalar3DFunction", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    int _v = 0;
    void *ptr = 0;
    int res = SWIG_ConvertFunctionPtr(argv[0], &ptr, SWIGTYPE_p_f_double_double_double__double);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_CreateValueScalar3DFunction__SWIG_0(self, argc, argv);
    }
  }
  if (argc == 3) {
    int _v = 0;
    void *ptr = 0;
    int res = SWIG_ConvertFunctionPtr(argv[0], &ptr, SWIGTYPE_p_f_double_double_double__double);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_CreateValueScalar3DFunction__SWIG_1(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'CreateValueScalar3DFunction'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    values::CreateValueScalar3DFunction(values::Scalar (*)(values::Scalar,values::Scalar,values::Scalar))\n"
    "    values::CreateValueScalar3DFunction(values::Scalar (*)(values::Scalar,values::Scalar,values::Scalar),values::String,values::String)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_ValueScalar3DFunction(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  values::ValueScalar3DFunction *arg1 = (values::ValueScalar3DFunction *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< values::ValueScalar3DFunction > tempshared1 ;
  std::shared_ptr< values::ValueScalar3DFunction > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_values__ValueScalar3DFunction_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ValueScalar3DFunction" "', argument " "1"" of type '" "values::ValueScalar3DFunction *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  values::ValueScalar3DFunction > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  values::ValueScalar3DFunction > * >(argp1);
      arg1 = const_cast< values::ValueScalar3DFunction * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  values::ValueScalar3DFunction > * >(argp1);
      arg1 = const_cast< values::ValueScalar3DFunction * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  (void)arg1; delete smartarg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ValueScalar3DFunction_Create(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  values::ValueScalar3DFunctionPtr result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "ValueScalar3DFunction_Create", 0, 0, 0)) SWIG_fail;
  result = values::ValueScalar3DFunction::Create();
  {
    std::shared_ptr<  values::ValueScalar3DFunction > *smartresult = result ? new std::shared_ptr<  values::ValueScalar3DFunction >(result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_std__shared_ptrT_values__ValueScalar3DFunction_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ValueScalar3DFunction_GetType(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  values::ValueScalar3DFunction *arg1 = (values::ValueScalar3DFunction *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< values::ValueScalar3DFunction const > tempshared1 ;
  std::shared_ptr< values::ValueScalar3DFunction const > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  values::Type result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_values__ValueScalar3DFunction_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ValueScalar3DFunction_GetType" "', argument " "1"" of type '" "values::ValueScalar3DFunction const *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const values::ValueScalar3DFunction > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const values::ValueScalar3DFunction > * >(argp1);
      arg1 = const_cast< values::ValueScalar3DFunction * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const values::ValueScalar3DFunction > * >(argp1);
      arg1 = const_cast< values::ValueScalar3DFunction * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = ((values::ValueScalar3DFunction const *)arg1)->GetType();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ValueScalar3DFunction_GetName(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  values::ValueScalar3DFunction *arg1 = (values::ValueScalar3DFunction *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< values::ValueScalar3DFunction const > tempshared1 ;
  std::shared_ptr< values::ValueScalar3DFunction const > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  values::String *result = 0 ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_values__ValueScalar3DFunction_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ValueScalar3DFunction_GetName" "', argument " "1"" of type '" "values::ValueScalar3DFunction const *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const values::ValueScalar3DFunction > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const values::ValueScalar3DFunction > * >(argp1);
      arg1 = const_cast< values::ValueScalar3DFunction * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const values::ValueScalar3DFunction > * >(argp1);
      arg1 = const_cast< values::ValueScalar3DFunction * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = (values::String *) &((values::ValueScalar3DFunction const *)arg1)->GetName();
  resultobj = SWIG_From_std_string(static_cast< std::string >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ValueScalar3DFunction_GetKey(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  values::ValueScalar3DFunction *arg1 = (values::ValueScalar3DFunction *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< values::ValueScalar3DFunction const > tempshared1 ;
  std::shared_ptr< values::ValueScalar3DFunction const > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  values::String *result = 0 ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_values__ValueScalar3DFunction_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ValueScalar3DFunction_GetKey" "', argument " "1"" of type '" "values::ValueScalar3DFunction const *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const values::ValueScalar3DFunction > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const values::ValueScalar3DFunction > * >(argp1);
      arg1 = const_cast< values::ValueScalar3DFunction * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const values::ValueScalar3DFunction > * >(argp1);
      arg1 = const_cast< values::ValueScalar3DFunction * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = (values::String *) &((values::ValueScalar3DFunction const *)arg1)->GetKey();
  resultobj = SWIG_From_std_string(static_cast< std::string >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ValueScalar3DFunction_GetValue__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  values::ValueScalar3DFunction *arg1 = (values::ValueScalar3DFunction *) 0 ;
  values::Scalar arg2 ;
  values::Scalar arg3 ;
  values::Scalar arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< values::ValueScalar3DFunction const > tempshared1 ;
  std::shared_ptr< values::ValueScalar3DFunction const > *smartarg1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  values::Scalar result;
  
  (void)self;
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_values__ValueScalar3DFunction_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ValueScalar3DFunction_GetValue" "', argument " "1"" of type '" "values::ValueScalar3DFunction const *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const values::ValueScalar3DFunction > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const values::ValueScalar3DFunction > * >(argp1);
      arg1 = const_cast< values::ValueScalar3DFunction * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const values::ValueScalar3DFunction > * >(argp1);
      arg1 = const_cast< values::ValueScalar3DFunction * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ValueScalar3DFunction_GetValue" "', argument " "2"" of type '" "values::Scalar""'");
  } 
  arg2 = static_cast< values::Scalar >(val2);
  ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ValueScalar3DFunction_GetValue" "', argument " "3"" of type '" "values::Scalar""'");
  } 
  arg3 = static_cast< values::Scalar >(val3);
  ecode4 = SWIG_AsVal_double(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "ValueScalar3DFunction_GetValue" "', argument " "4"" of type '" "values::Scalar""'");
  } 
  arg4 = static_cast< values::Scalar >(val4);
  result = (values::Scalar)((values::ValueScalar3DFunction const *)arg1)->GetValue(arg2,arg3,arg4);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ValueScalar3DFunction_GetValue__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  values::ValueScalar3DFunction *arg1 = (values::ValueScalar3DFunction *) 0 ;
  values::Vector *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< values::ValueScalar3DFunction const > tempshared1 ;
  std::shared_ptr< values::ValueScalar3DFunction const > *smartarg1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  values::Scalar result;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_values__ValueScalar3DFunction_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ValueScalar3DFunction_GetValue" "', argument " "1"" of type '" "values::ValueScalar3DFunction const *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const values::ValueScalar3DFunction > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const values::ValueScalar3DFunction > * >(argp1);
      arg1 = const_cast< values::ValueScalar3DFunction * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const values::ValueScalar3DFunction > * >(argp1);
      arg1 = const_cast< values::ValueScalar3DFunction * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_eilig__Vector,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ValueScalar3DFunction_GetValue" "', argument " "2"" of type '" "values::Vector const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ValueScalar3DFunction_GetValue" "', argument " "2"" of type '" "values::Vector const &""'"); 
  }
  arg2 = reinterpret_cast< values::Vector * >(argp2);
  result = (values::Scalar)((values::ValueScalar3DFunction const *)arg1)->GetValue((values::Vector const &)*arg2);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ValueScalar3DFunction_GetValue(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "ValueScalar3DFunction_GetValue", 0, 4, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_std__shared_ptrT_values__ValueScalar3DFunction_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_eilig__Vector, SWIG_POINTER_NO_NULL | 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ValueScalar3DFunction_GetValue__SWIG_1(self, argc, argv);
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_std__shared_ptrT_values__ValueScalar3DFunction_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_ValueScalar3DFunction_GetValue__SWIG_0(self, argc, argv);
          }
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'ValueScalar3DFunction_GetValue'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    values::ValueScalar3DFunction::GetValue(values::Scalar,values::Scalar,values::Scalar) const\n"
    "    values::ValueScalar3DFunction::GetValue(values::Vector const &) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ValueScalar3DFunction_SetName(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  values::ValueScalar3DFunction *arg1 = (values::ValueScalar3DFunction *) 0 ;
  values::String *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< values::ValueScalar3DFunction > tempshared1 ;
  std::shared_ptr< values::ValueScalar3DFunction > *smartarg1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "ValueScalar3DFunction_SetName", 2, 2, swig_obj)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_values__ValueScalar3DFunction_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ValueScalar3DFunction_SetName" "', argument " "1"" of type '" "values::ValueScalar3DFunction *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  values::ValueScalar3DFunction > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  values::ValueScalar3DFunction > * >(argp1);
      arg1 = const_cast< values::ValueScalar3DFunction * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  values::ValueScalar3DFunction > * >(argp1);
      arg1 = const_cast< values::ValueScalar3DFunction * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ValueScalar3DFunction_SetName" "', argument " "2"" of type '" "values::String const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ValueScalar3DFunction_SetName" "', argument " "2"" of type '" "values::String const &""'"); 
    }
    arg2 = ptr;
  }
  (arg1)->SetName((values::String const &)*arg2);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_ValueScalar3DFunction_SetKey(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  values::ValueScalar3DFunction *arg1 = (values::ValueScalar3DFunction *) 0 ;
  values::String *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< values::ValueScalar3DFunction > tempshared1 ;
  std::shared_ptr< values::ValueScalar3DFunction > *smartarg1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "ValueScalar3DFunction_SetKey", 2, 2, swig_obj)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_values__ValueScalar3DFunction_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ValueScalar3DFunction_SetKey" "', argument " "1"" of type '" "values::ValueScalar3DFunction *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  values::ValueScalar3DFunction > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  values::ValueScalar3DFunction > * >(argp1);
      arg1 = const_cast< values::ValueScalar3DFunction * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  values::ValueScalar3DFunction > * >(argp1);
      arg1 = const_cast< values::ValueScalar3DFunction * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ValueScalar3DFunction_SetKey" "', argument " "2"" of type '" "values::String const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ValueScalar3DFunction_SetKey" "', argument " "2"" of type '" "values::String const &""'"); 
    }
    arg2 = ptr;
  }
  (arg1)->SetKey((values::String const &)*arg2);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_ValueScalar3DFunction_SetFunction(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  values::ValueScalar3DFunction *arg1 = (values::ValueScalar3DFunction *) 0 ;
  values::Function_S_SSS arg2 = (values::Function_S_SSS) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< values::ValueScalar3DFunction > tempshared1 ;
  std::shared_ptr< values::ValueScalar3DFunction > *smartarg1 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "ValueScalar3DFunction_SetFunction", 2, 2, swig_obj)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_values__ValueScalar3DFunction_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ValueScalar3DFunction_SetFunction" "', argument " "1"" of type '" "values::ValueScalar3DFunction *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  values::ValueScalar3DFunction > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  values::ValueScalar3DFunction > * >(argp1);
      arg1 = const_cast< values::ValueScalar3DFunction * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  values::ValueScalar3DFunction > * >(argp1);
      arg1 = const_cast< values::ValueScalar3DFunction * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    int res = SWIG_ConvertFunctionPtr(swig_obj[1], (void**)(&arg2), SWIGTYPE_p_f_double_double_double__double);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in method '" "ValueScalar3DFunction_SetFunction" "', argument " "2"" of type '" "values::Function_S_SSS""'"); 
    }
  }
  (arg1)->SetFunction(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *ValueScalar3DFunction_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_std__shared_ptrT_values__ValueScalar3DFunction_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_CreateValueScalar3DInterpolation__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  values::Nodes arg1 ;
  values::Type arg2 ;
  void *argp1 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  values::ValueScalar3DInterpolationPtr result;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  {
    res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_std__vectorT_std__shared_ptrT_nodes__INode_t_t,  0  | 0);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CreateValueScalar3DInterpolation" "', argument " "1"" of type '" "values::Nodes""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CreateValueScalar3DInterpolation" "', argument " "1"" of type '" "values::Nodes""'");
    } else {
      values::Nodes * temp = reinterpret_cast< values::Nodes * >(argp1);
      arg1 = *temp;
      if (SWIG_IsNewObj(res1)) delete temp;
    }
  }
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CreateValueScalar3DInterpolation" "', argument " "2"" of type '" "values::Type""'");
  } 
  arg2 = static_cast< values::Type >(val2);
  result = values::CreateValueScalar3DInterpolation(SWIG_STD_MOVE(arg1),SWIG_STD_MOVE(arg2));
  {
    std::shared_ptr<  values::ValueScalar3DInterpolation > *smartresult = result ? new std::shared_ptr<  values::ValueScalar3DInterpolation >(result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_std__shared_ptrT_values__ValueScalar3DInterpolation_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CreateValueScalar3DInterpolation__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  values::Nodes arg1 ;
  values::Type arg2 ;
  values::String arg3 ;
  values::String arg4 ;
  void *argp1 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  values::ValueScalar3DInterpolationPtr result;
  
  (void)self;
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  {
    res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_std__vectorT_std__shared_ptrT_nodes__INode_t_t,  0  | 0);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CreateValueScalar3DInterpolation" "', argument " "1"" of type '" "values::Nodes""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CreateValueScalar3DInterpolation" "', argument " "1"" of type '" "values::Nodes""'");
    } else {
      values::Nodes * temp = reinterpret_cast< values::Nodes * >(argp1);
      arg1 = *temp;
      if (SWIG_IsNewObj(res1)) delete temp;
    }
  }
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CreateValueScalar3DInterpolation" "', argument " "2"" of type '" "values::Type""'");
  } 
  arg2 = static_cast< values::Type >(val2);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(swig_obj[2], &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "CreateValueScalar3DInterpolation" "', argument " "3"" of type '" "values::String""'"); 
    }
    arg3 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(swig_obj[3], &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "CreateValueScalar3DInterpolation" "', argument " "4"" of type '" "values::String""'"); 
    }
    arg4 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  result = values::CreateValueScalar3DInterpolation(SWIG_STD_MOVE(arg1),SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3),SWIG_STD_MOVE(arg4));
  {
    std::shared_ptr<  values::ValueScalar3DInterpolation > *smartresult = result ? new std::shared_ptr<  values::ValueScalar3DInterpolation >(result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_std__shared_ptrT_values__ValueScalar3DInterpolation_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CreateValueScalar3DInterpolation(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "CreateValueScalar3DInterpolation", 0, 4, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_std__vectorT_std__shared_ptrT_nodes__INode_t_t, SWIG_POINTER_NO_NULL | 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_CreateValueScalar3DInterpolation__SWIG_0(self, argc, argv);
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_std__vectorT_std__shared_ptrT_nodes__INode_t_t, SWIG_POINTER_NO_NULL | 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = SWIG_AsPtr_std_string(argv[3], (std::string**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_CreateValueScalar3DInterpolation__SWIG_1(self, argc, argv);
          }
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'CreateValueScalar3DInterpolation'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    values::CreateValueScalar3DInterpolation(values::Nodes,values::Type)\n"
    "    values::CreateValueScalar3DInterpolation(values::Nodes,values::Type,values::String,values::String)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_ValueScalar3DInterpolation(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  values::ValueScalar3DInterpolation *arg1 = (values::ValueScalar3DInterpolation *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< values::ValueScalar3DInterpolation > tempshared1 ;
  std::shared_ptr< values::ValueScalar3DInterpolation > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_values__ValueScalar3DInterpolation_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ValueScalar3DInterpolation" "', argument " "1"" of type '" "values::ValueScalar3DInterpolation *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  values::ValueScalar3DInterpolation > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  values::ValueScalar3DInterpolation > * >(argp1);
      arg1 = const_cast< values::ValueScalar3DInterpolation * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  values::ValueScalar3DInterpolation > * >(argp1);
      arg1 = const_cast< values::ValueScalar3DInterpolation * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  (void)arg1; delete smartarg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ValueScalar3DInterpolation_Create(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  values::ValueScalar3DInterpolationPtr result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "ValueScalar3DInterpolation_Create", 0, 0, 0)) SWIG_fail;
  result = values::ValueScalar3DInterpolation::Create();
  {
    std::shared_ptr<  values::ValueScalar3DInterpolation > *smartresult = result ? new std::shared_ptr<  values::ValueScalar3DInterpolation >(result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_std__shared_ptrT_values__ValueScalar3DInterpolation_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ValueScalar3DInterpolation_GetType(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  values::ValueScalar3DInterpolation *arg1 = (values::ValueScalar3DInterpolation *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< values::ValueScalar3DInterpolation const > tempshared1 ;
  std::shared_ptr< values::ValueScalar3DInterpolation const > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  values::Type result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_values__ValueScalar3DInterpolation_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ValueScalar3DInterpolation_GetType" "', argument " "1"" of type '" "values::ValueScalar3DInterpolation const *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const values::ValueScalar3DInterpolation > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const values::ValueScalar3DInterpolation > * >(argp1);
      arg1 = const_cast< values::ValueScalar3DInterpolation * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const values::ValueScalar3DInterpolation > * >(argp1);
      arg1 = const_cast< values::ValueScalar3DInterpolation * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = ((values::ValueScalar3DInterpolation const *)arg1)->GetType();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ValueScalar3DInterpolation_GetName(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  values::ValueScalar3DInterpolation *arg1 = (values::ValueScalar3DInterpolation *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< values::ValueScalar3DInterpolation const > tempshared1 ;
  std::shared_ptr< values::ValueScalar3DInterpolation const > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  values::String *result = 0 ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_values__ValueScalar3DInterpolation_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ValueScalar3DInterpolation_GetName" "', argument " "1"" of type '" "values::ValueScalar3DInterpolation const *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const values::ValueScalar3DInterpolation > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const values::ValueScalar3DInterpolation > * >(argp1);
      arg1 = const_cast< values::ValueScalar3DInterpolation * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const values::ValueScalar3DInterpolation > * >(argp1);
      arg1 = const_cast< values::ValueScalar3DInterpolation * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = (values::String *) &((values::ValueScalar3DInterpolation const *)arg1)->GetName();
  resultobj = SWIG_From_std_string(static_cast< std::string >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ValueScalar3DInterpolation_GetKey(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  values::ValueScalar3DInterpolation *arg1 = (values::ValueScalar3DInterpolation *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< values::ValueScalar3DInterpolation const > tempshared1 ;
  std::shared_ptr< values::ValueScalar3DInterpolation const > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  values::String *result = 0 ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_values__ValueScalar3DInterpolation_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ValueScalar3DInterpolation_GetKey" "', argument " "1"" of type '" "values::ValueScalar3DInterpolation const *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const values::ValueScalar3DInterpolation > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const values::ValueScalar3DInterpolation > * >(argp1);
      arg1 = const_cast< values::ValueScalar3DInterpolation * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const values::ValueScalar3DInterpolation > * >(argp1);
      arg1 = const_cast< values::ValueScalar3DInterpolation * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = (values::String *) &((values::ValueScalar3DInterpolation const *)arg1)->GetKey();
  resultobj = SWIG_From_std_string(static_cast< std::string >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ValueScalar3DInterpolation_GetValue__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  values::ValueScalar3DInterpolation *arg1 = (values::ValueScalar3DInterpolation *) 0 ;
  values::Scalar arg2 ;
  values::Scalar arg3 ;
  values::Scalar arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< values::ValueScalar3DInterpolation const > tempshared1 ;
  std::shared_ptr< values::ValueScalar3DInterpolation const > *smartarg1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  values::Scalar result;
  
  (void)self;
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_values__ValueScalar3DInterpolation_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ValueScalar3DInterpolation_GetValue" "', argument " "1"" of type '" "values::ValueScalar3DInterpolation const *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const values::ValueScalar3DInterpolation > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const values::ValueScalar3DInterpolation > * >(argp1);
      arg1 = const_cast< values::ValueScalar3DInterpolation * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const values::ValueScalar3DInterpolation > * >(argp1);
      arg1 = const_cast< values::ValueScalar3DInterpolation * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ValueScalar3DInterpolation_GetValue" "', argument " "2"" of type '" "values::Scalar""'");
  } 
  arg2 = static_cast< values::Scalar >(val2);
  ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ValueScalar3DInterpolation_GetValue" "', argument " "3"" of type '" "values::Scalar""'");
  } 
  arg3 = static_cast< values::Scalar >(val3);
  ecode4 = SWIG_AsVal_double(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "ValueScalar3DInterpolation_GetValue" "', argument " "4"" of type '" "values::Scalar""'");
  } 
  arg4 = static_cast< values::Scalar >(val4);
  result = (values::Scalar)((values::ValueScalar3DInterpolation const *)arg1)->GetValue(arg2,arg3,arg4);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ValueScalar3DInterpolation_GetValue__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  values::ValueScalar3DInterpolation *arg1 = (values::ValueScalar3DInterpolation *) 0 ;
  values::Vector *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< values::ValueScalar3DInterpolation const > tempshared1 ;
  std::shared_ptr< values::ValueScalar3DInterpolation const > *smartarg1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  values::Scalar result;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_values__ValueScalar3DInterpolation_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ValueScalar3DInterpolation_GetValue" "', argument " "1"" of type '" "values::ValueScalar3DInterpolation const *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const values::ValueScalar3DInterpolation > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const values::ValueScalar3DInterpolation > * >(argp1);
      arg1 = const_cast< values::ValueScalar3DInterpolation * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const values::ValueScalar3DInterpolation > * >(argp1);
      arg1 = const_cast< values::ValueScalar3DInterpolation * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_eilig__Vector,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ValueScalar3DInterpolation_GetValue" "', argument " "2"" of type '" "values::Vector const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ValueScalar3DInterpolation_GetValue" "', argument " "2"" of type '" "values::Vector const &""'"); 
  }
  arg2 = reinterpret_cast< values::Vector * >(argp2);
  result = (values::Scalar)((values::ValueScalar3DInterpolation const *)arg1)->GetValue((values::Vector const &)*arg2);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ValueScalar3DInterpolation_GetValue(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "ValueScalar3DInterpolation_GetValue", 0, 4, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_std__shared_ptrT_values__ValueScalar3DInterpolation_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_eilig__Vector, SWIG_POINTER_NO_NULL | 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ValueScalar3DInterpolation_GetValue__SWIG_1(self, argc, argv);
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_std__shared_ptrT_values__ValueScalar3DInterpolation_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_ValueScalar3DInterpolation_GetValue__SWIG_0(self, argc, argv);
          }
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'ValueScalar3DInterpolation_GetValue'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    values::ValueScalar3DInterpolation::GetValue(values::Scalar,values::Scalar,values::Scalar) const\n"
    "    values::ValueScalar3DInterpolation::GetValue(values::Vector const &) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ValueScalar3DInterpolation_GetInterpolation(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  values::ValueScalar3DInterpolation *arg1 = (values::ValueScalar3DInterpolation *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< values::ValueScalar3DInterpolation const > tempshared1 ;
  std::shared_ptr< values::ValueScalar3DInterpolation const > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  values::IInterpolationPtr result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_values__ValueScalar3DInterpolation_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ValueScalar3DInterpolation_GetInterpolation" "', argument " "1"" of type '" "values::ValueScalar3DInterpolation const *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const values::ValueScalar3DInterpolation > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const values::ValueScalar3DInterpolation > * >(argp1);
      arg1 = const_cast< values::ValueScalar3DInterpolation * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const values::ValueScalar3DInterpolation > * >(argp1);
      arg1 = const_cast< values::ValueScalar3DInterpolation * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = ((values::ValueScalar3DInterpolation const *)arg1)->GetInterpolation();
  resultobj = SWIG_NewPointerObj((new values::IInterpolationPtr(result)), SWIGTYPE_p_std__shared_ptrT_interpolation__IInterpolation_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ValueScalar3DInterpolation_SetName(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  values::ValueScalar3DInterpolation *arg1 = (values::ValueScalar3DInterpolation *) 0 ;
  values::String *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< values::ValueScalar3DInterpolation > tempshared1 ;
  std::shared_ptr< values::ValueScalar3DInterpolation > *smartarg1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "ValueScalar3DInterpolation_SetName", 2, 2, swig_obj)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_values__ValueScalar3DInterpolation_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ValueScalar3DInterpolation_SetName" "', argument " "1"" of type '" "values::ValueScalar3DInterpolation *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  values::ValueScalar3DInterpolation > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  values::ValueScalar3DInterpolation > * >(argp1);
      arg1 = const_cast< values::ValueScalar3DInterpolation * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  values::ValueScalar3DInterpolation > * >(argp1);
      arg1 = const_cast< values::ValueScalar3DInterpolation * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ValueScalar3DInterpolation_SetName" "', argument " "2"" of type '" "values::String const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ValueScalar3DInterpolation_SetName" "', argument " "2"" of type '" "values::String const &""'"); 
    }
    arg2 = ptr;
  }
  (arg1)->SetName((values::String const &)*arg2);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_ValueScalar3DInterpolation_SetKey(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  values::ValueScalar3DInterpolation *arg1 = (values::ValueScalar3DInterpolation *) 0 ;
  values::String *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< values::ValueScalar3DInterpolation > tempshared1 ;
  std::shared_ptr< values::ValueScalar3DInterpolation > *smartarg1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "ValueScalar3DInterpolation_SetKey", 2, 2, swig_obj)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_values__ValueScalar3DInterpolation_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ValueScalar3DInterpolation_SetKey" "', argument " "1"" of type '" "values::ValueScalar3DInterpolation *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  values::ValueScalar3DInterpolation > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  values::ValueScalar3DInterpolation > * >(argp1);
      arg1 = const_cast< values::ValueScalar3DInterpolation * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  values::ValueScalar3DInterpolation > * >(argp1);
      arg1 = const_cast< values::ValueScalar3DInterpolation * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ValueScalar3DInterpolation_SetKey" "', argument " "2"" of type '" "values::String const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ValueScalar3DInterpolation_SetKey" "', argument " "2"" of type '" "values::String const &""'"); 
    }
    arg2 = ptr;
  }
  (arg1)->SetKey((values::String const &)*arg2);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_ValueScalar3DInterpolation_SetNodes(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  values::ValueScalar3DInterpolation *arg1 = (values::ValueScalar3DInterpolation *) 0 ;
  values::Nodes arg2 ;
  values::Type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< values::ValueScalar3DInterpolation > tempshared1 ;
  std::shared_ptr< values::ValueScalar3DInterpolation > *smartarg1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "ValueScalar3DInterpolation_SetNodes", 3, 3, swig_obj)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_values__ValueScalar3DInterpolation_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ValueScalar3DInterpolation_SetNodes" "', argument " "1"" of type '" "values::ValueScalar3DInterpolation *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  values::ValueScalar3DInterpolation > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  values::ValueScalar3DInterpolation > * >(argp1);
      arg1 = const_cast< values::ValueScalar3DInterpolation * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  values::ValueScalar3DInterpolation > * >(argp1);
      arg1 = const_cast< values::ValueScalar3DInterpolation * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_std__vectorT_std__shared_ptrT_nodes__INode_t_t,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ValueScalar3DInterpolation_SetNodes" "', argument " "2"" of type '" "values::Nodes""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ValueScalar3DInterpolation_SetNodes" "', argument " "2"" of type '" "values::Nodes""'");
    } else {
      values::Nodes * temp = reinterpret_cast< values::Nodes * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  ecode3 = SWIG_AsVal_size_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ValueScalar3DInterpolation_SetNodes" "', argument " "3"" of type '" "values::Type""'");
  } 
  arg3 = static_cast< values::Type >(val3);
  (arg1)->SetNodes(arg2,arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *ValueScalar3DInterpolation_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_std__shared_ptrT_values__ValueScalar3DInterpolation_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_CreateValueVector3D__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  values::Vector *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  values::ValueVector3DPtr result;
  
  (void)self;
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_eilig__Vector,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CreateValueVector3D" "', argument " "1"" of type '" "values::Vector const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CreateValueVector3D" "', argument " "1"" of type '" "values::Vector const &""'"); 
  }
  arg1 = reinterpret_cast< values::Vector * >(argp1);
  result = values::CreateValueVector3D((eilig::Vector const &)*arg1);
  {
    std::shared_ptr<  values::ValueVector3D > *smartresult = result ? new std::shared_ptr<  values::ValueVector3D >(result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_std__shared_ptrT_values__ValueVector3D_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CreateValueVector3D__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  values::Vector *arg1 = 0 ;
  values::String arg2 ;
  values::String arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  values::ValueVector3DPtr result;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_eilig__Vector,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CreateValueVector3D" "', argument " "1"" of type '" "values::Vector const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CreateValueVector3D" "', argument " "1"" of type '" "values::Vector const &""'"); 
  }
  arg1 = reinterpret_cast< values::Vector * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "CreateValueVector3D" "', argument " "2"" of type '" "values::String""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(swig_obj[2], &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "CreateValueVector3D" "', argument " "3"" of type '" "values::String""'"); 
    }
    arg3 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  result = values::CreateValueVector3D((eilig::Vector const &)*arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3));
  {
    std::shared_ptr<  values::ValueVector3D > *smartresult = result ? new std::shared_ptr<  values::ValueVector3D >(result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_std__shared_ptrT_values__ValueVector3D_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CreateValueVector3D(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "CreateValueVector3D", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    int _v = 0;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_eilig__Vector, SWIG_POINTER_NO_NULL | 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_CreateValueVector3D__SWIG_0(self, argc, argv);
    }
  }
  if (argc == 3) {
    int _v = 0;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_eilig__Vector, SWIG_POINTER_NO_NULL | 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_CreateValueVector3D__SWIG_1(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'CreateValueVector3D'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    values::CreateValueVector3D(values::Vector const &)\n"
    "    values::CreateValueVector3D(values::Vector const &,values::String,values::String)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_ValueVector3D(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  values::ValueVector3D *arg1 = (values::ValueVector3D *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< values::ValueVector3D > tempshared1 ;
  std::shared_ptr< values::ValueVector3D > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_values__ValueVector3D_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ValueVector3D" "', argument " "1"" of type '" "values::ValueVector3D *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  values::ValueVector3D > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  values::ValueVector3D > * >(argp1);
      arg1 = const_cast< values::ValueVector3D * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  values::ValueVector3D > * >(argp1);
      arg1 = const_cast< values::ValueVector3D * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  (void)arg1; delete smartarg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ValueVector3D_Create(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  values::ValueVector3DPtr result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "ValueVector3D_Create", 0, 0, 0)) SWIG_fail;
  result = values::ValueVector3D::Create();
  {
    std::shared_ptr<  values::ValueVector3D > *smartresult = result ? new std::shared_ptr<  values::ValueVector3D >(result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_std__shared_ptrT_values__ValueVector3D_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ValueVector3D_GetType(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  values::ValueVector3D *arg1 = (values::ValueVector3D *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< values::ValueVector3D const > tempshared1 ;
  std::shared_ptr< values::ValueVector3D const > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  values::Type result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_values__ValueVector3D_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ValueVector3D_GetType" "', argument " "1"" of type '" "values::ValueVector3D const *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const values::ValueVector3D > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const values::ValueVector3D > * >(argp1);
      arg1 = const_cast< values::ValueVector3D * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const values::ValueVector3D > * >(argp1);
      arg1 = const_cast< values::ValueVector3D * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = ((values::ValueVector3D const *)arg1)->GetType();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ValueVector3D_GetName(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  values::ValueVector3D *arg1 = (values::ValueVector3D *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< values::ValueVector3D const > tempshared1 ;
  std::shared_ptr< values::ValueVector3D const > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  values::String *result = 0 ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_values__ValueVector3D_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ValueVector3D_GetName" "', argument " "1"" of type '" "values::ValueVector3D const *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const values::ValueVector3D > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const values::ValueVector3D > * >(argp1);
      arg1 = const_cast< values::ValueVector3D * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const values::ValueVector3D > * >(argp1);
      arg1 = const_cast< values::ValueVector3D * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = (values::String *) &((values::ValueVector3D const *)arg1)->GetName();
  resultobj = SWIG_From_std_string(static_cast< std::string >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ValueVector3D_GetKey(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  values::ValueVector3D *arg1 = (values::ValueVector3D *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< values::ValueVector3D const > tempshared1 ;
  std::shared_ptr< values::ValueVector3D const > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  values::String *result = 0 ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_values__ValueVector3D_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ValueVector3D_GetKey" "', argument " "1"" of type '" "values::ValueVector3D const *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const values::ValueVector3D > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const values::ValueVector3D > * >(argp1);
      arg1 = const_cast< values::ValueVector3D * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const values::ValueVector3D > * >(argp1);
      arg1 = const_cast< values::ValueVector3D * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = (values::String *) &((values::ValueVector3D const *)arg1)->GetKey();
  resultobj = SWIG_From_std_string(static_cast< std::string >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ValueVector3D_GetValue__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  values::ValueVector3D *arg1 = (values::ValueVector3D *) 0 ;
  values::Scalar arg2 ;
  values::Scalar arg3 ;
  values::Scalar arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< values::ValueVector3D const > tempshared1 ;
  std::shared_ptr< values::ValueVector3D const > *smartarg1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  values::Vector result;
  
  (void)self;
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_values__ValueVector3D_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ValueVector3D_GetValue" "', argument " "1"" of type '" "values::ValueVector3D const *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const values::ValueVector3D > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const values::ValueVector3D > * >(argp1);
      arg1 = const_cast< values::ValueVector3D * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const values::ValueVector3D > * >(argp1);
      arg1 = const_cast< values::ValueVector3D * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ValueVector3D_GetValue" "', argument " "2"" of type '" "values::Scalar""'");
  } 
  arg2 = static_cast< values::Scalar >(val2);
  ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ValueVector3D_GetValue" "', argument " "3"" of type '" "values::Scalar""'");
  } 
  arg3 = static_cast< values::Scalar >(val3);
  ecode4 = SWIG_AsVal_double(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "ValueVector3D_GetValue" "', argument " "4"" of type '" "values::Scalar""'");
  } 
  arg4 = static_cast< values::Scalar >(val4);
  result = ((values::ValueVector3D const *)arg1)->GetValue(arg2,arg3,arg4);
  resultobj = SWIG_NewPointerObj((new values::Vector(result)), SWIGTYPE_p_eilig__Vector, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ValueVector3D_GetValue__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  values::ValueVector3D *arg1 = (values::ValueVector3D *) 0 ;
  values::Vector *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< values::ValueVector3D const > tempshared1 ;
  std::shared_ptr< values::ValueVector3D const > *smartarg1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  values::Vector result;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_values__ValueVector3D_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ValueVector3D_GetValue" "', argument " "1"" of type '" "values::ValueVector3D const *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const values::ValueVector3D > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const values::ValueVector3D > * >(argp1);
      arg1 = const_cast< values::ValueVector3D * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const values::ValueVector3D > * >(argp1);
      arg1 = const_cast< values::ValueVector3D * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_eilig__Vector,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ValueVector3D_GetValue" "', argument " "2"" of type '" "values::Vector const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ValueVector3D_GetValue" "', argument " "2"" of type '" "values::Vector const &""'"); 
  }
  arg2 = reinterpret_cast< values::Vector * >(argp2);
  result = ((values::ValueVector3D const *)arg1)->GetValue((values::Vector const &)*arg2);
  resultobj = SWIG_NewPointerObj((new values::Vector(result)), SWIGTYPE_p_eilig__Vector, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ValueVector3D_GetValue(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "ValueVector3D_GetValue", 0, 4, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_std__shared_ptrT_values__ValueVector3D_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_eilig__Vector, SWIG_POINTER_NO_NULL | 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ValueVector3D_GetValue__SWIG_1(self, argc, argv);
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_std__shared_ptrT_values__ValueVector3D_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_ValueVector3D_GetValue__SWIG_0(self, argc, argv);
          }
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'ValueVector3D_GetValue'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    values::ValueVector3D::GetValue(values::Scalar,values::Scalar,values::Scalar) const\n"
    "    values::ValueVector3D::GetValue(values::Vector const &) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ValueVector3D_SetName(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  values::ValueVector3D *arg1 = (values::ValueVector3D *) 0 ;
  values::String *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< values::ValueVector3D > tempshared1 ;
  std::shared_ptr< values::ValueVector3D > *smartarg1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "ValueVector3D_SetName", 2, 2, swig_obj)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_values__ValueVector3D_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ValueVector3D_SetName" "', argument " "1"" of type '" "values::ValueVector3D *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  values::ValueVector3D > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  values::ValueVector3D > * >(argp1);
      arg1 = const_cast< values::ValueVector3D * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  values::ValueVector3D > * >(argp1);
      arg1 = const_cast< values::ValueVector3D * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ValueVector3D_SetName" "', argument " "2"" of type '" "values::String const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ValueVector3D_SetName" "', argument " "2"" of type '" "values::String const &""'"); 
    }
    arg2 = ptr;
  }
  (arg1)->SetName((values::String const &)*arg2);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_ValueVector3D_SetKey(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  values::ValueVector3D *arg1 = (values::ValueVector3D *) 0 ;
  values::String *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< values::ValueVector3D > tempshared1 ;
  std::shared_ptr< values::ValueVector3D > *smartarg1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "ValueVector3D_SetKey", 2, 2, swig_obj)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_values__ValueVector3D_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ValueVector3D_SetKey" "', argument " "1"" of type '" "values::ValueVector3D *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  values::ValueVector3D > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  values::ValueVector3D > * >(argp1);
      arg1 = const_cast< values::ValueVector3D * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  values::ValueVector3D > * >(argp1);
      arg1 = const_cast< values::ValueVector3D * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ValueVector3D_SetKey" "', argument " "2"" of type '" "values::String const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ValueVector3D_SetKey" "', argument " "2"" of type '" "values::String const &""'"); 
    }
    arg2 = ptr;
  }
  (arg1)->SetKey((values::String const &)*arg2);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_ValueVector3D_SetValue(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  values::ValueVector3D *arg1 = (values::ValueVector3D *) 0 ;
  values::Vector *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< values::ValueVector3D > tempshared1 ;
  std::shared_ptr< values::ValueVector3D > *smartarg1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "ValueVector3D_SetValue", 2, 2, swig_obj)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_values__ValueVector3D_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ValueVector3D_SetValue" "', argument " "1"" of type '" "values::ValueVector3D *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  values::ValueVector3D > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  values::ValueVector3D > * >(argp1);
      arg1 = const_cast< values::ValueVector3D * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  values::ValueVector3D > * >(argp1);
      arg1 = const_cast< values::ValueVector3D * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_eilig__Vector,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ValueVector3D_SetValue" "', argument " "2"" of type '" "values::Vector const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ValueVector3D_SetValue" "', argument " "2"" of type '" "values::Vector const &""'"); 
  }
  arg2 = reinterpret_cast< values::Vector * >(argp2);
  (arg1)->SetValue((values::Vector const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *ValueVector3D_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_std__shared_ptrT_values__ValueVector3D_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_CreateValueMatrix3DInterpolation__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  values::Nodes arg1 ;
  values::Type arg2 ;
  void *argp1 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  values::ValueMatrix3DInterpolationPtr result;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  {
    res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_std__vectorT_std__shared_ptrT_nodes__INode_t_t,  0  | 0);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CreateValueMatrix3DInterpolation" "', argument " "1"" of type '" "values::Nodes""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CreateValueMatrix3DInterpolation" "', argument " "1"" of type '" "values::Nodes""'");
    } else {
      values::Nodes * temp = reinterpret_cast< values::Nodes * >(argp1);
      arg1 = *temp;
      if (SWIG_IsNewObj(res1)) delete temp;
    }
  }
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CreateValueMatrix3DInterpolation" "', argument " "2"" of type '" "values::Type""'");
  } 
  arg2 = static_cast< values::Type >(val2);
  result = values::CreateValueMatrix3DInterpolation(SWIG_STD_MOVE(arg1),SWIG_STD_MOVE(arg2));
  {
    std::shared_ptr<  values::ValueMatrix3DInterpolation > *smartresult = result ? new std::shared_ptr<  values::ValueMatrix3DInterpolation >(result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_std__shared_ptrT_values__ValueMatrix3DInterpolation_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CreateValueMatrix3DInterpolation__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  values::Nodes arg1 ;
  values::Type arg2 ;
  values::String arg3 ;
  values::String arg4 ;
  void *argp1 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  values::ValueMatrix3DInterpolationPtr result;
  
  (void)self;
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  {
    res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_std__vectorT_std__shared_ptrT_nodes__INode_t_t,  0  | 0);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CreateValueMatrix3DInterpolation" "', argument " "1"" of type '" "values::Nodes""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CreateValueMatrix3DInterpolation" "', argument " "1"" of type '" "values::Nodes""'");
    } else {
      values::Nodes * temp = reinterpret_cast< values::Nodes * >(argp1);
      arg1 = *temp;
      if (SWIG_IsNewObj(res1)) delete temp;
    }
  }
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CreateValueMatrix3DInterpolation" "', argument " "2"" of type '" "values::Type""'");
  } 
  arg2 = static_cast< values::Type >(val2);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(swig_obj[2], &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "CreateValueMatrix3DInterpolation" "', argument " "3"" of type '" "values::String""'"); 
    }
    arg3 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(swig_obj[3], &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "CreateValueMatrix3DInterpolation" "', argument " "4"" of type '" "values::String""'"); 
    }
    arg4 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  result = values::CreateValueMatrix3DInterpolation(SWIG_STD_MOVE(arg1),SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3),SWIG_STD_MOVE(arg4));
  {
    std::shared_ptr<  values::ValueMatrix3DInterpolation > *smartresult = result ? new std::shared_ptr<  values::ValueMatrix3DInterpolation >(result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_std__shared_ptrT_values__ValueMatrix3DInterpolation_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CreateValueMatrix3DInterpolation(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "CreateValueMatrix3DInterpolation", 0, 4, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_std__vectorT_std__shared_ptrT_nodes__INode_t_t, SWIG_POINTER_NO_NULL | 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_CreateValueMatrix3DInterpolation__SWIG_0(self, argc, argv);
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_std__vectorT_std__shared_ptrT_nodes__INode_t_t, SWIG_POINTER_NO_NULL | 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = SWIG_AsPtr_std_string(argv[3], (std::string**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_CreateValueMatrix3DInterpolation__SWIG_1(self, argc, argv);
          }
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'CreateValueMatrix3DInterpolation'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    values::CreateValueMatrix3DInterpolation(values::Nodes,values::Type)\n"
    "    values::CreateValueMatrix3DInterpolation(values::Nodes,values::Type,values::String,values::String)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_ValueMatrix3DInterpolation(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  values::ValueMatrix3DInterpolation *arg1 = (values::ValueMatrix3DInterpolation *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< values::ValueMatrix3DInterpolation > tempshared1 ;
  std::shared_ptr< values::ValueMatrix3DInterpolation > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_values__ValueMatrix3DInterpolation_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ValueMatrix3DInterpolation" "', argument " "1"" of type '" "values::ValueMatrix3DInterpolation *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  values::ValueMatrix3DInterpolation > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  values::ValueMatrix3DInterpolation > * >(argp1);
      arg1 = const_cast< values::ValueMatrix3DInterpolation * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  values::ValueMatrix3DInterpolation > * >(argp1);
      arg1 = const_cast< values::ValueMatrix3DInterpolation * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  (void)arg1; delete smartarg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ValueMatrix3DInterpolation_Create(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  values::ValueMatrix3DInterpolationPtr result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "ValueMatrix3DInterpolation_Create", 0, 0, 0)) SWIG_fail;
  result = values::ValueMatrix3DInterpolation::Create();
  {
    std::shared_ptr<  values::ValueMatrix3DInterpolation > *smartresult = result ? new std::shared_ptr<  values::ValueMatrix3DInterpolation >(result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_std__shared_ptrT_values__ValueMatrix3DInterpolation_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ValueMatrix3DInterpolation_GetType(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  values::ValueMatrix3DInterpolation *arg1 = (values::ValueMatrix3DInterpolation *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< values::ValueMatrix3DInterpolation const > tempshared1 ;
  std::shared_ptr< values::ValueMatrix3DInterpolation const > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  values::Type result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_values__ValueMatrix3DInterpolation_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ValueMatrix3DInterpolation_GetType" "', argument " "1"" of type '" "values::ValueMatrix3DInterpolation const *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const values::ValueMatrix3DInterpolation > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const values::ValueMatrix3DInterpolation > * >(argp1);
      arg1 = const_cast< values::ValueMatrix3DInterpolation * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const values::ValueMatrix3DInterpolation > * >(argp1);
      arg1 = const_cast< values::ValueMatrix3DInterpolation * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = ((values::ValueMatrix3DInterpolation const *)arg1)->GetType();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ValueMatrix3DInterpolation_GetName(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  values::ValueMatrix3DInterpolation *arg1 = (values::ValueMatrix3DInterpolation *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< values::ValueMatrix3DInterpolation const > tempshared1 ;
  std::shared_ptr< values::ValueMatrix3DInterpolation const > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  values::String *result = 0 ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_values__ValueMatrix3DInterpolation_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ValueMatrix3DInterpolation_GetName" "', argument " "1"" of type '" "values::ValueMatrix3DInterpolation const *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const values::ValueMatrix3DInterpolation > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const values::ValueMatrix3DInterpolation > * >(argp1);
      arg1 = const_cast< values::ValueMatrix3DInterpolation * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const values::ValueMatrix3DInterpolation > * >(argp1);
      arg1 = const_cast< values::ValueMatrix3DInterpolation * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = (values::String *) &((values::ValueMatrix3DInterpolation const *)arg1)->GetName();
  resultobj = SWIG_From_std_string(static_cast< std::string >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ValueMatrix3DInterpolation_GetKey(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  values::ValueMatrix3DInterpolation *arg1 = (values::ValueMatrix3DInterpolation *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< values::ValueMatrix3DInterpolation const > tempshared1 ;
  std::shared_ptr< values::ValueMatrix3DInterpolation const > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  values::String *result = 0 ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_values__ValueMatrix3DInterpolation_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ValueMatrix3DInterpolation_GetKey" "', argument " "1"" of type '" "values::ValueMatrix3DInterpolation const *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const values::ValueMatrix3DInterpolation > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const values::ValueMatrix3DInterpolation > * >(argp1);
      arg1 = const_cast< values::ValueMatrix3DInterpolation * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const values::ValueMatrix3DInterpolation > * >(argp1);
      arg1 = const_cast< values::ValueMatrix3DInterpolation * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = (values::String *) &((values::ValueMatrix3DInterpolation const *)arg1)->GetKey();
  resultobj = SWIG_From_std_string(static_cast< std::string >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ValueMatrix3DInterpolation_GetValue__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  values::ValueMatrix3DInterpolation *arg1 = (values::ValueMatrix3DInterpolation *) 0 ;
  values::Scalar arg2 ;
  values::Scalar arg3 ;
  values::Scalar arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< values::ValueMatrix3DInterpolation const > tempshared1 ;
  std::shared_ptr< values::ValueMatrix3DInterpolation const > *smartarg1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  values::Matrix result;
  
  (void)self;
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_values__ValueMatrix3DInterpolation_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ValueMatrix3DInterpolation_GetValue" "', argument " "1"" of type '" "values::ValueMatrix3DInterpolation const *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const values::ValueMatrix3DInterpolation > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const values::ValueMatrix3DInterpolation > * >(argp1);
      arg1 = const_cast< values::ValueMatrix3DInterpolation * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const values::ValueMatrix3DInterpolation > * >(argp1);
      arg1 = const_cast< values::ValueMatrix3DInterpolation * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ValueMatrix3DInterpolation_GetValue" "', argument " "2"" of type '" "values::Scalar""'");
  } 
  arg2 = static_cast< values::Scalar >(val2);
  ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ValueMatrix3DInterpolation_GetValue" "', argument " "3"" of type '" "values::Scalar""'");
  } 
  arg3 = static_cast< values::Scalar >(val3);
  ecode4 = SWIG_AsVal_double(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "ValueMatrix3DInterpolation_GetValue" "', argument " "4"" of type '" "values::Scalar""'");
  } 
  arg4 = static_cast< values::Scalar >(val4);
  result = ((values::ValueMatrix3DInterpolation const *)arg1)->GetValue(arg2,arg3,arg4);
  resultobj = SWIG_NewPointerObj((new values::Matrix(result)), SWIGTYPE_p_eilig__Matrix, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ValueMatrix3DInterpolation_GetValue__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  values::ValueMatrix3DInterpolation *arg1 = (values::ValueMatrix3DInterpolation *) 0 ;
  values::Vector *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< values::ValueMatrix3DInterpolation const > tempshared1 ;
  std::shared_ptr< values::ValueMatrix3DInterpolation const > *smartarg1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  values::Matrix result;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_values__ValueMatrix3DInterpolation_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ValueMatrix3DInterpolation_GetValue" "', argument " "1"" of type '" "values::ValueMatrix3DInterpolation const *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const values::ValueMatrix3DInterpolation > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const values::ValueMatrix3DInterpolation > * >(argp1);
      arg1 = const_cast< values::ValueMatrix3DInterpolation * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const values::ValueMatrix3DInterpolation > * >(argp1);
      arg1 = const_cast< values::ValueMatrix3DInterpolation * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_eilig__Vector,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ValueMatrix3DInterpolation_GetValue" "', argument " "2"" of type '" "values::Vector const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ValueMatrix3DInterpolation_GetValue" "', argument " "2"" of type '" "values::Vector const &""'"); 
  }
  arg2 = reinterpret_cast< values::Vector * >(argp2);
  result = ((values::ValueMatrix3DInterpolation const *)arg1)->GetValue((values::Vector const &)*arg2);
  resultobj = SWIG_NewPointerObj((new values::Matrix(result)), SWIGTYPE_p_eilig__Matrix, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ValueMatrix3DInterpolation_GetValue(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "ValueMatrix3DInterpolation_GetValue", 0, 4, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_std__shared_ptrT_values__ValueMatrix3DInterpolation_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_eilig__Vector, SWIG_POINTER_NO_NULL | 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ValueMatrix3DInterpolation_GetValue__SWIG_1(self, argc, argv);
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_std__shared_ptrT_values__ValueMatrix3DInterpolation_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_ValueMatrix3DInterpolation_GetValue__SWIG_0(self, argc, argv);
          }
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'ValueMatrix3DInterpolation_GetValue'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    values::ValueMatrix3DInterpolation::GetValue(values::Scalar,values::Scalar,values::Scalar) const\n"
    "    values::ValueMatrix3DInterpolation::GetValue(values::Vector const &) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ValueMatrix3DInterpolation_GetInterpolation(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  values::ValueMatrix3DInterpolation *arg1 = (values::ValueMatrix3DInterpolation *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< values::ValueMatrix3DInterpolation const > tempshared1 ;
  std::shared_ptr< values::ValueMatrix3DInterpolation const > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  values::IInterpolationPtr result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_values__ValueMatrix3DInterpolation_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ValueMatrix3DInterpolation_GetInterpolation" "', argument " "1"" of type '" "values::ValueMatrix3DInterpolation const *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const values::ValueMatrix3DInterpolation > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const values::ValueMatrix3DInterpolation > * >(argp1);
      arg1 = const_cast< values::ValueMatrix3DInterpolation * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const values::ValueMatrix3DInterpolation > * >(argp1);
      arg1 = const_cast< values::ValueMatrix3DInterpolation * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = ((values::ValueMatrix3DInterpolation const *)arg1)->GetInterpolation();
  resultobj = SWIG_NewPointerObj((new values::IInterpolationPtr(result)), SWIGTYPE_p_std__shared_ptrT_interpolation__IInterpolation_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ValueMatrix3DInterpolation_SetName(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  values::ValueMatrix3DInterpolation *arg1 = (values::ValueMatrix3DInterpolation *) 0 ;
  values::String *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< values::ValueMatrix3DInterpolation > tempshared1 ;
  std::shared_ptr< values::ValueMatrix3DInterpolation > *smartarg1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "ValueMatrix3DInterpolation_SetName", 2, 2, swig_obj)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_values__ValueMatrix3DInterpolation_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ValueMatrix3DInterpolation_SetName" "', argument " "1"" of type '" "values::ValueMatrix3DInterpolation *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  values::ValueMatrix3DInterpolation > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  values::ValueMatrix3DInterpolation > * >(argp1);
      arg1 = const_cast< values::ValueMatrix3DInterpolation * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  values::ValueMatrix3DInterpolation > * >(argp1);
      arg1 = const_cast< values::ValueMatrix3DInterpolation * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ValueMatrix3DInterpolation_SetName" "', argument " "2"" of type '" "values::String const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ValueMatrix3DInterpolation_SetName" "', argument " "2"" of type '" "values::String const &""'"); 
    }
    arg2 = ptr;
  }
  (arg1)->SetName((values::String const &)*arg2);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_ValueMatrix3DInterpolation_SetKey(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  values::ValueMatrix3DInterpolation *arg1 = (values::ValueMatrix3DInterpolation *) 0 ;
  values::String *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< values::ValueMatrix3DInterpolation > tempshared1 ;
  std::shared_ptr< values::ValueMatrix3DInterpolation > *smartarg1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "ValueMatrix3DInterpolation_SetKey", 2, 2, swig_obj)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_values__ValueMatrix3DInterpolation_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ValueMatrix3DInterpolation_SetKey" "', argument " "1"" of type '" "values::ValueMatrix3DInterpolation *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  values::ValueMatrix3DInterpolation > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  values::ValueMatrix3DInterpolation > * >(argp1);
      arg1 = const_cast< values::ValueMatrix3DInterpolation * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  values::ValueMatrix3DInterpolation > * >(argp1);
      arg1 = const_cast< values::ValueMatrix3DInterpolation * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ValueMatrix3DInterpolation_SetKey" "', argument " "2"" of type '" "values::String const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ValueMatrix3DInterpolation_SetKey" "', argument " "2"" of type '" "values::String const &""'"); 
    }
    arg2 = ptr;
  }
  (arg1)->SetKey((values::String const &)*arg2);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_ValueMatrix3DInterpolation_SetNodes(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  values::ValueMatrix3DInterpolation *arg1 = (values::ValueMatrix3DInterpolation *) 0 ;
  values::Nodes arg2 ;
  values::Type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< values::ValueMatrix3DInterpolation > tempshared1 ;
  std::shared_ptr< values::ValueMatrix3DInterpolation > *smartarg1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "ValueMatrix3DInterpolation_SetNodes", 3, 3, swig_obj)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_values__ValueMatrix3DInterpolation_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ValueMatrix3DInterpolation_SetNodes" "', argument " "1"" of type '" "values::ValueMatrix3DInterpolation *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  values::ValueMatrix3DInterpolation > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  values::ValueMatrix3DInterpolation > * >(argp1);
      arg1 = const_cast< values::ValueMatrix3DInterpolation * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  values::ValueMatrix3DInterpolation > * >(argp1);
      arg1 = const_cast< values::ValueMatrix3DInterpolation * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_std__vectorT_std__shared_ptrT_nodes__INode_t_t,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ValueMatrix3DInterpolation_SetNodes" "', argument " "2"" of type '" "values::Nodes""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ValueMatrix3DInterpolation_SetNodes" "', argument " "2"" of type '" "values::Nodes""'");
    } else {
      values::Nodes * temp = reinterpret_cast< values::Nodes * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  ecode3 = SWIG_AsVal_size_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ValueMatrix3DInterpolation_SetNodes" "', argument " "3"" of type '" "values::Type""'");
  } 
  arg3 = static_cast< values::Type >(val3);
  (arg1)->SetNodes(arg2,arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *ValueMatrix3DInterpolation_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_std__shared_ptrT_values__ValueMatrix3DInterpolation_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_CreateValueString__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  values::String arg1 ;
  values::ValueStringPtr result;
  
  (void)self;
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(swig_obj[0], &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "CreateValueString" "', argument " "1"" of type '" "values::String""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  result = values::CreateValueString(SWIG_STD_MOVE(arg1));
  {
    std::shared_ptr<  values::ValueString > *smartresult = result ? new std::shared_ptr<  values::ValueString >(result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_std__shared_ptrT_values__ValueString_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CreateValueString__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  values::String arg1 ;
  values::String arg2 ;
  values::String arg3 ;
  values::ValueStringPtr result;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(swig_obj[0], &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "CreateValueString" "', argument " "1"" of type '" "values::String""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "CreateValueString" "', argument " "2"" of type '" "values::String""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(swig_obj[2], &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "CreateValueString" "', argument " "3"" of type '" "values::String""'"); 
    }
    arg3 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  result = values::CreateValueString(SWIG_STD_MOVE(arg1),SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3));
  {
    std::shared_ptr<  values::ValueString > *smartresult = result ? new std::shared_ptr<  values::ValueString >(result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_std__shared_ptrT_values__ValueString_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CreateValueString(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "CreateValueString", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    int _v = 0;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_CreateValueString__SWIG_0(self, argc, argv);
    }
  }
  if (argc == 3) {
    int _v = 0;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_CreateValueString__SWIG_1(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'CreateValueString'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    values::CreateValueString(values::String)\n"
    "    values::CreateValueString(values::String,values::String,values::String)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_ValueString(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  values::ValueString *arg1 = (values::ValueString *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< values::ValueString > tempshared1 ;
  std::shared_ptr< values::ValueString > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_values__ValueString_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ValueString" "', argument " "1"" of type '" "values::ValueString *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  values::ValueString > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  values::ValueString > * >(argp1);
      arg1 = const_cast< values::ValueString * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  values::ValueString > * >(argp1);
      arg1 = const_cast< values::ValueString * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  (void)arg1; delete smartarg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ValueString_Create(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  values::ValueStringPtr result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "ValueString_Create", 0, 0, 0)) SWIG_fail;
  result = values::ValueString::Create();
  {
    std::shared_ptr<  values::ValueString > *smartresult = result ? new std::shared_ptr<  values::ValueString >(result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_std__shared_ptrT_values__ValueString_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ValueString_GetType(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  values::ValueString *arg1 = (values::ValueString *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< values::ValueString const > tempshared1 ;
  std::shared_ptr< values::ValueString const > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  values::Type result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_values__ValueString_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ValueString_GetType" "', argument " "1"" of type '" "values::ValueString const *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const values::ValueString > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const values::ValueString > * >(argp1);
      arg1 = const_cast< values::ValueString * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const values::ValueString > * >(argp1);
      arg1 = const_cast< values::ValueString * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = ((values::ValueString const *)arg1)->GetType();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ValueString_GetName(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  values::ValueString *arg1 = (values::ValueString *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< values::ValueString const > tempshared1 ;
  std::shared_ptr< values::ValueString const > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  values::String *result = 0 ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_values__ValueString_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ValueString_GetName" "', argument " "1"" of type '" "values::ValueString const *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const values::ValueString > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const values::ValueString > * >(argp1);
      arg1 = const_cast< values::ValueString * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const values::ValueString > * >(argp1);
      arg1 = const_cast< values::ValueString * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = (values::String *) &((values::ValueString const *)arg1)->GetName();
  resultobj = SWIG_From_std_string(static_cast< std::string >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ValueString_GetKey(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  values::ValueString *arg1 = (values::ValueString *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< values::ValueString const > tempshared1 ;
  std::shared_ptr< values::ValueString const > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  values::String *result = 0 ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_values__ValueString_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ValueString_GetKey" "', argument " "1"" of type '" "values::ValueString const *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const values::ValueString > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const values::ValueString > * >(argp1);
      arg1 = const_cast< values::ValueString * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const values::ValueString > * >(argp1);
      arg1 = const_cast< values::ValueString * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = (values::String *) &((values::ValueString const *)arg1)->GetKey();
  resultobj = SWIG_From_std_string(static_cast< std::string >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ValueString_GetValue(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  values::ValueString *arg1 = (values::ValueString *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< values::ValueString const > tempshared1 ;
  std::shared_ptr< values::ValueString const > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  values::String *result = 0 ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_values__ValueString_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ValueString_GetValue" "', argument " "1"" of type '" "values::ValueString const *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const values::ValueString > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const values::ValueString > * >(argp1);
      arg1 = const_cast< values::ValueString * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const values::ValueString > * >(argp1);
      arg1 = const_cast< values::ValueString * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = (values::String *) &((values::ValueString const *)arg1)->GetValue();
  resultobj = SWIG_From_std_string(static_cast< std::string >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ValueString_SetName(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  values::ValueString *arg1 = (values::ValueString *) 0 ;
  values::String *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< values::ValueString > tempshared1 ;
  std::shared_ptr< values::ValueString > *smartarg1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "ValueString_SetName", 2, 2, swig_obj)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_values__ValueString_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ValueString_SetName" "', argument " "1"" of type '" "values::ValueString *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  values::ValueString > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  values::ValueString > * >(argp1);
      arg1 = const_cast< values::ValueString * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  values::ValueString > * >(argp1);
      arg1 = const_cast< values::ValueString * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ValueString_SetName" "', argument " "2"" of type '" "values::String const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ValueString_SetName" "', argument " "2"" of type '" "values::String const &""'"); 
    }
    arg2 = ptr;
  }
  (arg1)->SetName((values::String const &)*arg2);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_ValueString_SetKey(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  values::ValueString *arg1 = (values::ValueString *) 0 ;
  values::String *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< values::ValueString > tempshared1 ;
  std::shared_ptr< values::ValueString > *smartarg1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "ValueString_SetKey", 2, 2, swig_obj)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_values__ValueString_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ValueString_SetKey" "', argument " "1"" of type '" "values::ValueString *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  values::ValueString > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  values::ValueString > * >(argp1);
      arg1 = const_cast< values::ValueString * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  values::ValueString > * >(argp1);
      arg1 = const_cast< values::ValueString * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ValueString_SetKey" "', argument " "2"" of type '" "values::String const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ValueString_SetKey" "', argument " "2"" of type '" "values::String const &""'"); 
    }
    arg2 = ptr;
  }
  (arg1)->SetKey((values::String const &)*arg2);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_ValueString_SetValue(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  values::ValueString *arg1 = (values::ValueString *) 0 ;
  values::String arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< values::ValueString > tempshared1 ;
  std::shared_ptr< values::ValueString > *smartarg1 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "ValueString_SetValue", 2, 2, swig_obj)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_values__ValueString_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ValueString_SetValue" "', argument " "1"" of type '" "values::ValueString *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  values::ValueString > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  values::ValueString > * >(argp1);
      arg1 = const_cast< values::ValueString * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  values::ValueString > * >(argp1);
      arg1 = const_cast< values::ValueString * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "ValueString_SetValue" "', argument " "2"" of type '" "values::String""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  (arg1)->SetValue(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *ValueString_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_std__shared_ptrT_values__ValueString_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_GetValue(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  values::IScalar3DPtr arg1 ;
  values::Vector *arg2 = 0 ;
  values::IElementPtr arg3 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  PyObject *swig_obj[3] ;
  values::Scalar result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "GetValue", 3, 3, swig_obj)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_values__IScalar3D_t,  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GetValue" "', argument " "1"" of type '" "values::IScalar3DPtr""'");
    }
    if (argp1) arg1 = *(reinterpret_cast< values::IScalar3DPtr * >(argp1));
    if (newmem & SWIG_CAST_NEW_MEMORY) delete reinterpret_cast< values::IScalar3DPtr * >(argp1);
  }
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_eilig__Vector,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GetValue" "', argument " "2"" of type '" "values::Vector const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GetValue" "', argument " "2"" of type '" "values::Vector const &""'"); 
  }
  arg2 = reinterpret_cast< values::Vector * >(argp2);
  {
    res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_std__shared_ptrT_dive__elements__IElement_t,  0  | 0);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "GetValue" "', argument " "3"" of type '" "values::IElementPtr""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GetValue" "', argument " "3"" of type '" "values::IElementPtr""'");
    } else {
      values::IElementPtr * temp = reinterpret_cast< values::IElementPtr * >(argp3);
      arg3 = *temp;
      if (SWIG_IsNewObj(res3)) delete temp;
    }
  }
  result = (values::Scalar)values::GetValue(SWIG_STD_MOVE(arg1),(eilig::Vector const &)*arg2,SWIG_STD_MOVE(arg3));
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CreateValueScalar3DCongruent__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  values::IMeshPtr arg1 ;
  void *argp1 ;
  int res1 = 0 ;
  values::ValueScalar3DCongruentPtr result;
  
  (void)self;
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  {
    res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_dive__meshes__IMesh_t,  0  | 0);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CreateValueScalar3DCongruent" "', argument " "1"" of type '" "values::IMeshPtr""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CreateValueScalar3DCongruent" "', argument " "1"" of type '" "values::IMeshPtr""'");
    } else {
      values::IMeshPtr * temp = reinterpret_cast< values::IMeshPtr * >(argp1);
      arg1 = *temp;
      if (SWIG_IsNewObj(res1)) delete temp;
    }
  }
  result = values::CreateValueScalar3DCongruent(SWIG_STD_MOVE(arg1));
  {
    std::shared_ptr<  values::ValueScalar3DCongruent > *smartresult = result ? new std::shared_ptr<  values::ValueScalar3DCongruent >(result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_std__shared_ptrT_values__ValueScalar3DCongruent_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CreateValueScalar3DCongruent__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  values::IMeshPtr arg1 ;
  values::String arg2 ;
  values::String arg3 ;
  void *argp1 ;
  int res1 = 0 ;
  values::ValueScalar3DCongruentPtr result;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  {
    res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_dive__meshes__IMesh_t,  0  | 0);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CreateValueScalar3DCongruent" "', argument " "1"" of type '" "values::IMeshPtr""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CreateValueScalar3DCongruent" "', argument " "1"" of type '" "values::IMeshPtr""'");
    } else {
      values::IMeshPtr * temp = reinterpret_cast< values::IMeshPtr * >(argp1);
      arg1 = *temp;
      if (SWIG_IsNewObj(res1)) delete temp;
    }
  }
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "CreateValueScalar3DCongruent" "', argument " "2"" of type '" "values::String""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(swig_obj[2], &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "CreateValueScalar3DCongruent" "', argument " "3"" of type '" "values::String""'"); 
    }
    arg3 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  result = values::CreateValueScalar3DCongruent(SWIG_STD_MOVE(arg1),SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3));
  {
    std::shared_ptr<  values::ValueScalar3DCongruent > *smartresult = result ? new std::shared_ptr<  values::ValueScalar3DCongruent >(result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_std__shared_ptrT_values__ValueScalar3DCongruent_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CreateValueScalar3DCongruent(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "CreateValueScalar3DCongruent", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    int _v = 0;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_std__shared_ptrT_dive__meshes__IMesh_t, SWIG_POINTER_NO_NULL | 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_CreateValueScalar3DCongruent__SWIG_0(self, argc, argv);
    }
  }
  if (argc == 3) {
    int _v = 0;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_std__shared_ptrT_dive__meshes__IMesh_t, SWIG_POINTER_NO_NULL | 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_CreateValueScalar3DCongruent__SWIG_1(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'CreateValueScalar3DCongruent'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    values::CreateValueScalar3DCongruent(values::IMeshPtr)\n"
    "    values::CreateValueScalar3DCongruent(values::IMeshPtr,values::String,values::String)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_ValueScalar3DCongruent(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  values::ValueScalar3DCongruent *arg1 = (values::ValueScalar3DCongruent *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< values::ValueScalar3DCongruent > tempshared1 ;
  std::shared_ptr< values::ValueScalar3DCongruent > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_values__ValueScalar3DCongruent_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ValueScalar3DCongruent" "', argument " "1"" of type '" "values::ValueScalar3DCongruent *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  values::ValueScalar3DCongruent > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  values::ValueScalar3DCongruent > * >(argp1);
      arg1 = const_cast< values::ValueScalar3DCongruent * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  values::ValueScalar3DCongruent > * >(argp1);
      arg1 = const_cast< values::ValueScalar3DCongruent * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  (void)arg1; delete smartarg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ValueScalar3DCongruent_Create(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  values::ValueScalar3DCongruentPtr result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "ValueScalar3DCongruent_Create", 0, 0, 0)) SWIG_fail;
  result = values::ValueScalar3DCongruent::Create();
  {
    std::shared_ptr<  values::ValueScalar3DCongruent > *smartresult = result ? new std::shared_ptr<  values::ValueScalar3DCongruent >(result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_std__shared_ptrT_values__ValueScalar3DCongruent_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ValueScalar3DCongruent_GetType(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  values::ValueScalar3DCongruent *arg1 = (values::ValueScalar3DCongruent *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< values::ValueScalar3DCongruent const > tempshared1 ;
  std::shared_ptr< values::ValueScalar3DCongruent const > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  values::Type result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_values__ValueScalar3DCongruent_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ValueScalar3DCongruent_GetType" "', argument " "1"" of type '" "values::ValueScalar3DCongruent const *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const values::ValueScalar3DCongruent > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const values::ValueScalar3DCongruent > * >(argp1);
      arg1 = const_cast< values::ValueScalar3DCongruent * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const values::ValueScalar3DCongruent > * >(argp1);
      arg1 = const_cast< values::ValueScalar3DCongruent * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = ((values::ValueScalar3DCongruent const *)arg1)->GetType();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ValueScalar3DCongruent_GetName(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  values::ValueScalar3DCongruent *arg1 = (values::ValueScalar3DCongruent *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< values::ValueScalar3DCongruent const > tempshared1 ;
  std::shared_ptr< values::ValueScalar3DCongruent const > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  values::String *result = 0 ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_values__ValueScalar3DCongruent_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ValueScalar3DCongruent_GetName" "', argument " "1"" of type '" "values::ValueScalar3DCongruent const *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const values::ValueScalar3DCongruent > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const values::ValueScalar3DCongruent > * >(argp1);
      arg1 = const_cast< values::ValueScalar3DCongruent * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const values::ValueScalar3DCongruent > * >(argp1);
      arg1 = const_cast< values::ValueScalar3DCongruent * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = (values::String *) &((values::ValueScalar3DCongruent const *)arg1)->GetName();
  resultobj = SWIG_From_std_string(static_cast< std::string >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ValueScalar3DCongruent_GetKey(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  values::ValueScalar3DCongruent *arg1 = (values::ValueScalar3DCongruent *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< values::ValueScalar3DCongruent const > tempshared1 ;
  std::shared_ptr< values::ValueScalar3DCongruent const > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  values::String *result = 0 ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_values__ValueScalar3DCongruent_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ValueScalar3DCongruent_GetKey" "', argument " "1"" of type '" "values::ValueScalar3DCongruent const *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const values::ValueScalar3DCongruent > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const values::ValueScalar3DCongruent > * >(argp1);
      arg1 = const_cast< values::ValueScalar3DCongruent * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const values::ValueScalar3DCongruent > * >(argp1);
      arg1 = const_cast< values::ValueScalar3DCongruent * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = (values::String *) &((values::ValueScalar3DCongruent const *)arg1)->GetKey();
  resultobj = SWIG_From_std_string(static_cast< std::string >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ValueScalar3DCongruent_GetValue__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  values::ValueScalar3DCongruent *arg1 = (values::ValueScalar3DCongruent *) 0 ;
  values::Scalar arg2 ;
  values::Scalar arg3 ;
  values::Scalar arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< values::ValueScalar3DCongruent const > tempshared1 ;
  std::shared_ptr< values::ValueScalar3DCongruent const > *smartarg1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  values::Scalar result;
  
  (void)self;
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_values__ValueScalar3DCongruent_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ValueScalar3DCongruent_GetValue" "', argument " "1"" of type '" "values::ValueScalar3DCongruent const *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const values::ValueScalar3DCongruent > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const values::ValueScalar3DCongruent > * >(argp1);
      arg1 = const_cast< values::ValueScalar3DCongruent * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const values::ValueScalar3DCongruent > * >(argp1);
      arg1 = const_cast< values::ValueScalar3DCongruent * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ValueScalar3DCongruent_GetValue" "', argument " "2"" of type '" "values::Scalar""'");
  } 
  arg2 = static_cast< values::Scalar >(val2);
  ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ValueScalar3DCongruent_GetValue" "', argument " "3"" of type '" "values::Scalar""'");
  } 
  arg3 = static_cast< values::Scalar >(val3);
  ecode4 = SWIG_AsVal_double(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "ValueScalar3DCongruent_GetValue" "', argument " "4"" of type '" "values::Scalar""'");
  } 
  arg4 = static_cast< values::Scalar >(val4);
  result = (values::Scalar)((values::ValueScalar3DCongruent const *)arg1)->GetValue(arg2,arg3,arg4);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ValueScalar3DCongruent_GetValue__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  values::ValueScalar3DCongruent *arg1 = (values::ValueScalar3DCongruent *) 0 ;
  values::Scalar arg2 ;
  values::Scalar arg3 ;
  values::Scalar arg4 ;
  values::ElementIndex arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< values::ValueScalar3DCongruent const > tempshared1 ;
  std::shared_ptr< values::ValueScalar3DCongruent const > *smartarg1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  size_t val5 ;
  int ecode5 = 0 ;
  values::Scalar result;
  
  (void)self;
  if ((nobjs < 5) || (nobjs > 5)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_values__ValueScalar3DCongruent_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ValueScalar3DCongruent_GetValue" "', argument " "1"" of type '" "values::ValueScalar3DCongruent const *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const values::ValueScalar3DCongruent > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const values::ValueScalar3DCongruent > * >(argp1);
      arg1 = const_cast< values::ValueScalar3DCongruent * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const values::ValueScalar3DCongruent > * >(argp1);
      arg1 = const_cast< values::ValueScalar3DCongruent * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ValueScalar3DCongruent_GetValue" "', argument " "2"" of type '" "values::Scalar""'");
  } 
  arg2 = static_cast< values::Scalar >(val2);
  ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ValueScalar3DCongruent_GetValue" "', argument " "3"" of type '" "values::Scalar""'");
  } 
  arg3 = static_cast< values::Scalar >(val3);
  ecode4 = SWIG_AsVal_double(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "ValueScalar3DCongruent_GetValue" "', argument " "4"" of type '" "values::Scalar""'");
  } 
  arg4 = static_cast< values::Scalar >(val4);
  ecode5 = SWIG_AsVal_size_t(swig_obj[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "ValueScalar3DCongruent_GetValue" "', argument " "5"" of type '" "values::ElementIndex""'");
  } 
  arg5 = static_cast< values::ElementIndex >(val5);
  result = (values::Scalar)((values::ValueScalar3DCongruent const *)arg1)->GetValue(arg2,arg3,arg4,arg5);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ValueScalar3DCongruent_GetValue__SWIG_2(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  values::ValueScalar3DCongruent *arg1 = (values::ValueScalar3DCongruent *) 0 ;
  values::Vector *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< values::ValueScalar3DCongruent const > tempshared1 ;
  std::shared_ptr< values::ValueScalar3DCongruent const > *smartarg1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  values::Scalar result;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_values__ValueScalar3DCongruent_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ValueScalar3DCongruent_GetValue" "', argument " "1"" of type '" "values::ValueScalar3DCongruent const *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const values::ValueScalar3DCongruent > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const values::ValueScalar3DCongruent > * >(argp1);
      arg1 = const_cast< values::ValueScalar3DCongruent * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const values::ValueScalar3DCongruent > * >(argp1);
      arg1 = const_cast< values::ValueScalar3DCongruent * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_eilig__Vector,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ValueScalar3DCongruent_GetValue" "', argument " "2"" of type '" "values::Vector const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ValueScalar3DCongruent_GetValue" "', argument " "2"" of type '" "values::Vector const &""'"); 
  }
  arg2 = reinterpret_cast< values::Vector * >(argp2);
  result = (values::Scalar)((values::ValueScalar3DCongruent const *)arg1)->GetValue((values::Vector const &)*arg2);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ValueScalar3DCongruent_GetValue__SWIG_3(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  values::ValueScalar3DCongruent *arg1 = (values::ValueScalar3DCongruent *) 0 ;
  values::Vector *arg2 = 0 ;
  values::ElementIndex arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< values::ValueScalar3DCongruent const > tempshared1 ;
  std::shared_ptr< values::ValueScalar3DCongruent const > *smartarg1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  values::Scalar result;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_values__ValueScalar3DCongruent_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ValueScalar3DCongruent_GetValue" "', argument " "1"" of type '" "values::ValueScalar3DCongruent const *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const values::ValueScalar3DCongruent > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const values::ValueScalar3DCongruent > * >(argp1);
      arg1 = const_cast< values::ValueScalar3DCongruent * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const values::ValueScalar3DCongruent > * >(argp1);
      arg1 = const_cast< values::ValueScalar3DCongruent * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_eilig__Vector,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ValueScalar3DCongruent_GetValue" "', argument " "2"" of type '" "values::Vector const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ValueScalar3DCongruent_GetValue" "', argument " "2"" of type '" "values::Vector const &""'"); 
  }
  arg2 = reinterpret_cast< values::Vector * >(argp2);
  ecode3 = SWIG_AsVal_size_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ValueScalar3DCongruent_GetValue" "', argument " "3"" of type '" "values::ElementIndex""'");
  } 
  arg3 = static_cast< values::ElementIndex >(val3);
  result = (values::Scalar)((values::ValueScalar3DCongruent const *)arg1)->GetValue((values::Vector const &)*arg2,arg3);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ValueScalar3DCongruent_GetValue(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[6] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "ValueScalar3DCongruent_GetValue", 0, 5, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_std__shared_ptrT_values__ValueScalar3DCongruent_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_eilig__Vector, SWIG_POINTER_NO_NULL | 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ValueScalar3DCongruent_GetValue__SWIG_2(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_std__shared_ptrT_values__ValueScalar3DCongruent_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_eilig__Vector, SWIG_POINTER_NO_NULL | 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_ValueScalar3DCongruent_GetValue__SWIG_3(self, argc, argv);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_std__shared_ptrT_values__ValueScalar3DCongruent_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_ValueScalar3DCongruent_GetValue__SWIG_0(self, argc, argv);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v = 0;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_std__shared_ptrT_values__ValueScalar3DCongruent_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_size_t(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_ValueScalar3DCongruent_GetValue__SWIG_1(self, argc, argv);
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'ValueScalar3DCongruent_GetValue'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    values::ValueScalar3DCongruent::GetValue(values::Scalar,values::Scalar,values::Scalar) const\n"
    "    values::ValueScalar3DCongruent::GetValue(values::Scalar,values::Scalar,values::Scalar,values::ElementIndex) const\n"
    "    values::ValueScalar3DCongruent::GetValue(values::Vector const &) const\n"
    "    values::ValueScalar3DCongruent::GetValue(values::Vector const &,values::ElementIndex) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ValueScalar3DCongruent_GetMesh(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  values::ValueScalar3DCongruent *arg1 = (values::ValueScalar3DCongruent *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< values::ValueScalar3DCongruent const > tempshared1 ;
  std::shared_ptr< values::ValueScalar3DCongruent const > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  values::IMeshPtr result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_values__ValueScalar3DCongruent_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ValueScalar3DCongruent_GetMesh" "', argument " "1"" of type '" "values::ValueScalar3DCongruent const *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const values::ValueScalar3DCongruent > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const values::ValueScalar3DCongruent > * >(argp1);
      arg1 = const_cast< values::ValueScalar3DCongruent * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const values::ValueScalar3DCongruent > * >(argp1);
      arg1 = const_cast< values::ValueScalar3DCongruent * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = ((values::ValueScalar3DCongruent const *)arg1)->GetMesh();
  resultobj = SWIG_NewPointerObj((new values::IMeshPtr(result)), SWIGTYPE_p_std__shared_ptrT_dive__meshes__IMesh_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ValueScalar3DCongruent_SetName(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  values::ValueScalar3DCongruent *arg1 = (values::ValueScalar3DCongruent *) 0 ;
  values::String *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< values::ValueScalar3DCongruent > tempshared1 ;
  std::shared_ptr< values::ValueScalar3DCongruent > *smartarg1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "ValueScalar3DCongruent_SetName", 2, 2, swig_obj)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_values__ValueScalar3DCongruent_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ValueScalar3DCongruent_SetName" "', argument " "1"" of type '" "values::ValueScalar3DCongruent *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  values::ValueScalar3DCongruent > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  values::ValueScalar3DCongruent > * >(argp1);
      arg1 = const_cast< values::ValueScalar3DCongruent * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  values::ValueScalar3DCongruent > * >(argp1);
      arg1 = const_cast< values::ValueScalar3DCongruent * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ValueScalar3DCongruent_SetName" "', argument " "2"" of type '" "values::String const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ValueScalar3DCongruent_SetName" "', argument " "2"" of type '" "values::String const &""'"); 
    }
    arg2 = ptr;
  }
  (arg1)->SetName((values::String const &)*arg2);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_ValueScalar3DCongruent_SetKey(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  values::ValueScalar3DCongruent *arg1 = (values::ValueScalar3DCongruent *) 0 ;
  values::String *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< values::ValueScalar3DCongruent > tempshared1 ;
  std::shared_ptr< values::ValueScalar3DCongruent > *smartarg1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "ValueScalar3DCongruent_SetKey", 2, 2, swig_obj)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_values__ValueScalar3DCongruent_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ValueScalar3DCongruent_SetKey" "', argument " "1"" of type '" "values::ValueScalar3DCongruent *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  values::ValueScalar3DCongruent > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  values::ValueScalar3DCongruent > * >(argp1);
      arg1 = const_cast< values::ValueScalar3DCongruent * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  values::ValueScalar3DCongruent > * >(argp1);
      arg1 = const_cast< values::ValueScalar3DCongruent * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ValueScalar3DCongruent_SetKey" "', argument " "2"" of type '" "values::String const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ValueScalar3DCongruent_SetKey" "', argument " "2"" of type '" "values::String const &""'"); 
    }
    arg2 = ptr;
  }
  (arg1)->SetKey((values::String const &)*arg2);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_ValueScalar3DCongruent_SetMesh(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  values::ValueScalar3DCongruent *arg1 = (values::ValueScalar3DCongruent *) 0 ;
  values::IMeshPtr arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< values::ValueScalar3DCongruent > tempshared1 ;
  std::shared_ptr< values::ValueScalar3DCongruent > *smartarg1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "ValueScalar3DCongruent_SetMesh", 2, 2, swig_obj)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_values__ValueScalar3DCongruent_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ValueScalar3DCongruent_SetMesh" "', argument " "1"" of type '" "values::ValueScalar3DCongruent *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  values::ValueScalar3DCongruent > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  values::ValueScalar3DCongruent > * >(argp1);
      arg1 = const_cast< values::ValueScalar3DCongruent * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  values::ValueScalar3DCongruent > * >(argp1);
      arg1 = const_cast< values::ValueScalar3DCongruent * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_std__shared_ptrT_dive__meshes__IMesh_t,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ValueScalar3DCongruent_SetMesh" "', argument " "2"" of type '" "values::IMeshPtr""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ValueScalar3DCongruent_SetMesh" "', argument " "2"" of type '" "values::IMeshPtr""'");
    } else {
      values::IMeshPtr * temp = reinterpret_cast< values::IMeshPtr * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  (arg1)->SetMesh(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ValueScalar3DCongruent_SetElementIndex(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  values::ValueScalar3DCongruent *arg1 = (values::ValueScalar3DCongruent *) 0 ;
  values::ElementIndex arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< values::ValueScalar3DCongruent > tempshared1 ;
  std::shared_ptr< values::ValueScalar3DCongruent > *smartarg1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "ValueScalar3DCongruent_SetElementIndex", 2, 2, swig_obj)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_values__ValueScalar3DCongruent_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ValueScalar3DCongruent_SetElementIndex" "', argument " "1"" of type '" "values::ValueScalar3DCongruent *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  values::ValueScalar3DCongruent > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  values::ValueScalar3DCongruent > * >(argp1);
      arg1 = const_cast< values::ValueScalar3DCongruent * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  values::ValueScalar3DCongruent > * >(argp1);
      arg1 = const_cast< values::ValueScalar3DCongruent * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ValueScalar3DCongruent_SetElementIndex" "', argument " "2"" of type '" "values::ElementIndex""'");
  } 
  arg2 = static_cast< values::ElementIndex >(val2);
  (arg1)->SetElementIndex(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *ValueScalar3DCongruent_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_std__shared_ptrT_values__ValueScalar3DCongruent_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_GetValueVector3D(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  values::IVector3DPtr arg1 ;
  values::Vector *arg2 = 0 ;
  values::IElementPtr arg3 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  PyObject *swig_obj[3] ;
  values::Vector result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "GetValueVector3D", 3, 3, swig_obj)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_values__IVector3D_t,  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GetValueVector3D" "', argument " "1"" of type '" "values::IVector3DPtr""'");
    }
    if (argp1) arg1 = *(reinterpret_cast< values::IVector3DPtr * >(argp1));
    if (newmem & SWIG_CAST_NEW_MEMORY) delete reinterpret_cast< values::IVector3DPtr * >(argp1);
  }
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_eilig__Vector,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GetValueVector3D" "', argument " "2"" of type '" "values::Vector const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GetValueVector3D" "', argument " "2"" of type '" "values::Vector const &""'"); 
  }
  arg2 = reinterpret_cast< values::Vector * >(argp2);
  {
    res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_std__shared_ptrT_dive__elements__IElement_t,  0  | 0);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "GetValueVector3D" "', argument " "3"" of type '" "values::IElementPtr""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GetValueVector3D" "', argument " "3"" of type '" "values::IElementPtr""'");
    } else {
      values::IElementPtr * temp = reinterpret_cast< values::IElementPtr * >(argp3);
      arg3 = *temp;
      if (SWIG_IsNewObj(res3)) delete temp;
    }
  }
  result = values::GetValueVector3D(SWIG_STD_MOVE(arg1),(eilig::Vector const &)*arg2,SWIG_STD_MOVE(arg3));
  resultobj = SWIG_NewPointerObj((new values::Vector(result)), SWIGTYPE_p_eilig__Vector, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CreateValueVector3DCongruent__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  values::IMeshPtr arg1 ;
  void *argp1 ;
  int res1 = 0 ;
  values::ValueVector3DCongruentPtr result;
  
  (void)self;
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  {
    res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_dive__meshes__IMesh_t,  0  | 0);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CreateValueVector3DCongruent" "', argument " "1"" of type '" "values::IMeshPtr""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CreateValueVector3DCongruent" "', argument " "1"" of type '" "values::IMeshPtr""'");
    } else {
      values::IMeshPtr * temp = reinterpret_cast< values::IMeshPtr * >(argp1);
      arg1 = *temp;
      if (SWIG_IsNewObj(res1)) delete temp;
    }
  }
  result = values::CreateValueVector3DCongruent(SWIG_STD_MOVE(arg1));
  {
    std::shared_ptr<  values::ValueVector3DCongruent > *smartresult = result ? new std::shared_ptr<  values::ValueVector3DCongruent >(result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_std__shared_ptrT_values__ValueVector3DCongruent_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CreateValueVector3DCongruent__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  values::IMeshPtr arg1 ;
  values::String arg2 ;
  values::String arg3 ;
  void *argp1 ;
  int res1 = 0 ;
  values::ValueVector3DCongruentPtr result;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  {
    res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_dive__meshes__IMesh_t,  0  | 0);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CreateValueVector3DCongruent" "', argument " "1"" of type '" "values::IMeshPtr""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CreateValueVector3DCongruent" "', argument " "1"" of type '" "values::IMeshPtr""'");
    } else {
      values::IMeshPtr * temp = reinterpret_cast< values::IMeshPtr * >(argp1);
      arg1 = *temp;
      if (SWIG_IsNewObj(res1)) delete temp;
    }
  }
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "CreateValueVector3DCongruent" "', argument " "2"" of type '" "values::String""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(swig_obj[2], &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "CreateValueVector3DCongruent" "', argument " "3"" of type '" "values::String""'"); 
    }
    arg3 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  result = values::CreateValueVector3DCongruent(SWIG_STD_MOVE(arg1),SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3));
  {
    std::shared_ptr<  values::ValueVector3DCongruent > *smartresult = result ? new std::shared_ptr<  values::ValueVector3DCongruent >(result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_std__shared_ptrT_values__ValueVector3DCongruent_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CreateValueVector3DCongruent(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "CreateValueVector3DCongruent", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    int _v = 0;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_std__shared_ptrT_dive__meshes__IMesh_t, SWIG_POINTER_NO_NULL | 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_CreateValueVector3DCongruent__SWIG_0(self, argc, argv);
    }
  }
  if (argc == 3) {
    int _v = 0;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_std__shared_ptrT_dive__meshes__IMesh_t, SWIG_POINTER_NO_NULL | 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_CreateValueVector3DCongruent__SWIG_1(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'CreateValueVector3DCongruent'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    values::CreateValueVector3DCongruent(values::IMeshPtr)\n"
    "    values::CreateValueVector3DCongruent(values::IMeshPtr,values::String,values::String)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_ValueVector3DCongruent(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  values::ValueVector3DCongruent *arg1 = (values::ValueVector3DCongruent *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< values::ValueVector3DCongruent > tempshared1 ;
  std::shared_ptr< values::ValueVector3DCongruent > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_values__ValueVector3DCongruent_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ValueVector3DCongruent" "', argument " "1"" of type '" "values::ValueVector3DCongruent *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  values::ValueVector3DCongruent > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  values::ValueVector3DCongruent > * >(argp1);
      arg1 = const_cast< values::ValueVector3DCongruent * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  values::ValueVector3DCongruent > * >(argp1);
      arg1 = const_cast< values::ValueVector3DCongruent * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  (void)arg1; delete smartarg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ValueVector3DCongruent_Create(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  values::ValueVector3DCongruentPtr result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "ValueVector3DCongruent_Create", 0, 0, 0)) SWIG_fail;
  result = values::ValueVector3DCongruent::Create();
  {
    std::shared_ptr<  values::ValueVector3DCongruent > *smartresult = result ? new std::shared_ptr<  values::ValueVector3DCongruent >(result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_std__shared_ptrT_values__ValueVector3DCongruent_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ValueVector3DCongruent_GetType(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  values::ValueVector3DCongruent *arg1 = (values::ValueVector3DCongruent *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< values::ValueVector3DCongruent const > tempshared1 ;
  std::shared_ptr< values::ValueVector3DCongruent const > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  values::Type result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_values__ValueVector3DCongruent_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ValueVector3DCongruent_GetType" "', argument " "1"" of type '" "values::ValueVector3DCongruent const *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const values::ValueVector3DCongruent > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const values::ValueVector3DCongruent > * >(argp1);
      arg1 = const_cast< values::ValueVector3DCongruent * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const values::ValueVector3DCongruent > * >(argp1);
      arg1 = const_cast< values::ValueVector3DCongruent * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = ((values::ValueVector3DCongruent const *)arg1)->GetType();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ValueVector3DCongruent_GetName(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  values::ValueVector3DCongruent *arg1 = (values::ValueVector3DCongruent *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< values::ValueVector3DCongruent const > tempshared1 ;
  std::shared_ptr< values::ValueVector3DCongruent const > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  values::String *result = 0 ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_values__ValueVector3DCongruent_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ValueVector3DCongruent_GetName" "', argument " "1"" of type '" "values::ValueVector3DCongruent const *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const values::ValueVector3DCongruent > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const values::ValueVector3DCongruent > * >(argp1);
      arg1 = const_cast< values::ValueVector3DCongruent * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const values::ValueVector3DCongruent > * >(argp1);
      arg1 = const_cast< values::ValueVector3DCongruent * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = (values::String *) &((values::ValueVector3DCongruent const *)arg1)->GetName();
  resultobj = SWIG_From_std_string(static_cast< std::string >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ValueVector3DCongruent_GetKey(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  values::ValueVector3DCongruent *arg1 = (values::ValueVector3DCongruent *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< values::ValueVector3DCongruent const > tempshared1 ;
  std::shared_ptr< values::ValueVector3DCongruent const > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  values::String *result = 0 ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_values__ValueVector3DCongruent_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ValueVector3DCongruent_GetKey" "', argument " "1"" of type '" "values::ValueVector3DCongruent const *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const values::ValueVector3DCongruent > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const values::ValueVector3DCongruent > * >(argp1);
      arg1 = const_cast< values::ValueVector3DCongruent * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const values::ValueVector3DCongruent > * >(argp1);
      arg1 = const_cast< values::ValueVector3DCongruent * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = (values::String *) &((values::ValueVector3DCongruent const *)arg1)->GetKey();
  resultobj = SWIG_From_std_string(static_cast< std::string >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ValueVector3DCongruent_GetValue__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  values::ValueVector3DCongruent *arg1 = (values::ValueVector3DCongruent *) 0 ;
  values::Scalar arg2 ;
  values::Scalar arg3 ;
  values::Scalar arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< values::ValueVector3DCongruent const > tempshared1 ;
  std::shared_ptr< values::ValueVector3DCongruent const > *smartarg1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  values::Vector result;
  
  (void)self;
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_values__ValueVector3DCongruent_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ValueVector3DCongruent_GetValue" "', argument " "1"" of type '" "values::ValueVector3DCongruent const *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const values::ValueVector3DCongruent > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const values::ValueVector3DCongruent > * >(argp1);
      arg1 = const_cast< values::ValueVector3DCongruent * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const values::ValueVector3DCongruent > * >(argp1);
      arg1 = const_cast< values::ValueVector3DCongruent * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ValueVector3DCongruent_GetValue" "', argument " "2"" of type '" "values::Scalar""'");
  } 
  arg2 = static_cast< values::Scalar >(val2);
  ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ValueVector3DCongruent_GetValue" "', argument " "3"" of type '" "values::Scalar""'");
  } 
  arg3 = static_cast< values::Scalar >(val3);
  ecode4 = SWIG_AsVal_double(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "ValueVector3DCongruent_GetValue" "', argument " "4"" of type '" "values::Scalar""'");
  } 
  arg4 = static_cast< values::Scalar >(val4);
  result = ((values::ValueVector3DCongruent const *)arg1)->GetValue(arg2,arg3,arg4);
  resultobj = SWIG_NewPointerObj((new values::Vector(result)), SWIGTYPE_p_eilig__Vector, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ValueVector3DCongruent_GetValue__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  values::ValueVector3DCongruent *arg1 = (values::ValueVector3DCongruent *) 0 ;
  values::Scalar arg2 ;
  values::Scalar arg3 ;
  values::Scalar arg4 ;
  values::ElementIndex arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< values::ValueVector3DCongruent const > tempshared1 ;
  std::shared_ptr< values::ValueVector3DCongruent const > *smartarg1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  size_t val5 ;
  int ecode5 = 0 ;
  values::Vector result;
  
  (void)self;
  if ((nobjs < 5) || (nobjs > 5)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_values__ValueVector3DCongruent_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ValueVector3DCongruent_GetValue" "', argument " "1"" of type '" "values::ValueVector3DCongruent const *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const values::ValueVector3DCongruent > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const values::ValueVector3DCongruent > * >(argp1);
      arg1 = const_cast< values::ValueVector3DCongruent * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const values::ValueVector3DCongruent > * >(argp1);
      arg1 = const_cast< values::ValueVector3DCongruent * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ValueVector3DCongruent_GetValue" "', argument " "2"" of type '" "values::Scalar""'");
  } 
  arg2 = static_cast< values::Scalar >(val2);
  ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ValueVector3DCongruent_GetValue" "', argument " "3"" of type '" "values::Scalar""'");
  } 
  arg3 = static_cast< values::Scalar >(val3);
  ecode4 = SWIG_AsVal_double(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "ValueVector3DCongruent_GetValue" "', argument " "4"" of type '" "values::Scalar""'");
  } 
  arg4 = static_cast< values::Scalar >(val4);
  ecode5 = SWIG_AsVal_size_t(swig_obj[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "ValueVector3DCongruent_GetValue" "', argument " "5"" of type '" "values::ElementIndex""'");
  } 
  arg5 = static_cast< values::ElementIndex >(val5);
  result = ((values::ValueVector3DCongruent const *)arg1)->GetValue(arg2,arg3,arg4,arg5);
  resultobj = SWIG_NewPointerObj((new values::Vector(result)), SWIGTYPE_p_eilig__Vector, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ValueVector3DCongruent_GetValue__SWIG_2(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  values::ValueVector3DCongruent *arg1 = (values::ValueVector3DCongruent *) 0 ;
  values::Vector *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< values::ValueVector3DCongruent const > tempshared1 ;
  std::shared_ptr< values::ValueVector3DCongruent const > *smartarg1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  values::Vector result;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_values__ValueVector3DCongruent_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ValueVector3DCongruent_GetValue" "', argument " "1"" of type '" "values::ValueVector3DCongruent const *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const values::ValueVector3DCongruent > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const values::ValueVector3DCongruent > * >(argp1);
      arg1 = const_cast< values::ValueVector3DCongruent * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const values::ValueVector3DCongruent > * >(argp1);
      arg1 = const_cast< values::ValueVector3DCongruent * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_eilig__Vector,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ValueVector3DCongruent_GetValue" "', argument " "2"" of type '" "values::Vector const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ValueVector3DCongruent_GetValue" "', argument " "2"" of type '" "values::Vector const &""'"); 
  }
  arg2 = reinterpret_cast< values::Vector * >(argp2);
  result = ((values::ValueVector3DCongruent const *)arg1)->GetValue((values::Vector const &)*arg2);
  resultobj = SWIG_NewPointerObj((new values::Vector(result)), SWIGTYPE_p_eilig__Vector, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ValueVector3DCongruent_GetValue__SWIG_3(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  values::ValueVector3DCongruent *arg1 = (values::ValueVector3DCongruent *) 0 ;
  values::Vector *arg2 = 0 ;
  values::ElementIndex arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< values::ValueVector3DCongruent const > tempshared1 ;
  std::shared_ptr< values::ValueVector3DCongruent const > *smartarg1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  values::Vector result;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_values__ValueVector3DCongruent_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ValueVector3DCongruent_GetValue" "', argument " "1"" of type '" "values::ValueVector3DCongruent const *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const values::ValueVector3DCongruent > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const values::ValueVector3DCongruent > * >(argp1);
      arg1 = const_cast< values::ValueVector3DCongruent * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const values::ValueVector3DCongruent > * >(argp1);
      arg1 = const_cast< values::ValueVector3DCongruent * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_eilig__Vector,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ValueVector3DCongruent_GetValue" "', argument " "2"" of type '" "values::Vector const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ValueVector3DCongruent_GetValue" "', argument " "2"" of type '" "values::Vector const &""'"); 
  }
  arg2 = reinterpret_cast< values::Vector * >(argp2);
  ecode3 = SWIG_AsVal_size_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ValueVector3DCongruent_GetValue" "', argument " "3"" of type '" "values::ElementIndex""'");
  } 
  arg3 = static_cast< values::ElementIndex >(val3);
  result = ((values::ValueVector3DCongruent const *)arg1)->GetValue((values::Vector const &)*arg2,arg3);
  resultobj = SWIG_NewPointerObj((new values::Vector(result)), SWIGTYPE_p_eilig__Vector, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ValueVector3DCongruent_GetValue(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[6] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "ValueVector3DCongruent_GetValue", 0, 5, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_std__shared_ptrT_values__ValueVector3DCongruent_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_eilig__Vector, SWIG_POINTER_NO_NULL | 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ValueVector3DCongruent_GetValue__SWIG_2(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_std__shared_ptrT_values__ValueVector3DCongruent_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_eilig__Vector, SWIG_POINTER_NO_NULL | 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_ValueVector3DCongruent_GetValue__SWIG_3(self, argc, argv);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_std__shared_ptrT_values__ValueVector3DCongruent_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_ValueVector3DCongruent_GetValue__SWIG_0(self, argc, argv);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v = 0;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_std__shared_ptrT_values__ValueVector3DCongruent_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_size_t(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_ValueVector3DCongruent_GetValue__SWIG_1(self, argc, argv);
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'ValueVector3DCongruent_GetValue'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    values::ValueVector3DCongruent::GetValue(values::Scalar,values::Scalar,values::Scalar) const\n"
    "    values::ValueVector3DCongruent::GetValue(values::Scalar,values::Scalar,values::Scalar,values::ElementIndex) const\n"
    "    values::ValueVector3DCongruent::GetValue(values::Vector const &) const\n"
    "    values::ValueVector3DCongruent::GetValue(values::Vector const &,values::ElementIndex) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ValueVector3DCongruent_GetMesh(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  values::ValueVector3DCongruent *arg1 = (values::ValueVector3DCongruent *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< values::ValueVector3DCongruent const > tempshared1 ;
  std::shared_ptr< values::ValueVector3DCongruent const > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  values::IMeshPtr result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_values__ValueVector3DCongruent_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ValueVector3DCongruent_GetMesh" "', argument " "1"" of type '" "values::ValueVector3DCongruent const *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const values::ValueVector3DCongruent > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const values::ValueVector3DCongruent > * >(argp1);
      arg1 = const_cast< values::ValueVector3DCongruent * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const values::ValueVector3DCongruent > * >(argp1);
      arg1 = const_cast< values::ValueVector3DCongruent * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = ((values::ValueVector3DCongruent const *)arg1)->GetMesh();
  resultobj = SWIG_NewPointerObj((new values::IMeshPtr(result)), SWIGTYPE_p_std__shared_ptrT_dive__meshes__IMesh_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ValueVector3DCongruent_SetName(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  values::ValueVector3DCongruent *arg1 = (values::ValueVector3DCongruent *) 0 ;
  values::String *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< values::ValueVector3DCongruent > tempshared1 ;
  std::shared_ptr< values::ValueVector3DCongruent > *smartarg1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "ValueVector3DCongruent_SetName", 2, 2, swig_obj)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_values__ValueVector3DCongruent_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ValueVector3DCongruent_SetName" "', argument " "1"" of type '" "values::ValueVector3DCongruent *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  values::ValueVector3DCongruent > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  values::ValueVector3DCongruent > * >(argp1);
      arg1 = const_cast< values::ValueVector3DCongruent * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  values::ValueVector3DCongruent > * >(argp1);
      arg1 = const_cast< values::ValueVector3DCongruent * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ValueVector3DCongruent_SetName" "', argument " "2"" of type '" "values::String const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ValueVector3DCongruent_SetName" "', argument " "2"" of type '" "values::String const &""'"); 
    }
    arg2 = ptr;
  }
  (arg1)->SetName((values::String const &)*arg2);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_ValueVector3DCongruent_SetKey(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  values::ValueVector3DCongruent *arg1 = (values::ValueVector3DCongruent *) 0 ;
  values::String *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< values::ValueVector3DCongruent > tempshared1 ;
  std::shared_ptr< values::ValueVector3DCongruent > *smartarg1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "ValueVector3DCongruent_SetKey", 2, 2, swig_obj)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_values__ValueVector3DCongruent_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ValueVector3DCongruent_SetKey" "', argument " "1"" of type '" "values::ValueVector3DCongruent *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  values::ValueVector3DCongruent > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  values::ValueVector3DCongruent > * >(argp1);
      arg1 = const_cast< values::ValueVector3DCongruent * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  values::ValueVector3DCongruent > * >(argp1);
      arg1 = const_cast< values::ValueVector3DCongruent * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ValueVector3DCongruent_SetKey" "', argument " "2"" of type '" "values::String const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ValueVector3DCongruent_SetKey" "', argument " "2"" of type '" "values::String const &""'"); 
    }
    arg2 = ptr;
  }
  (arg1)->SetKey((values::String const &)*arg2);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_ValueVector3DCongruent_SetMesh(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  values::ValueVector3DCongruent *arg1 = (values::ValueVector3DCongruent *) 0 ;
  values::IMeshPtr arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< values::ValueVector3DCongruent > tempshared1 ;
  std::shared_ptr< values::ValueVector3DCongruent > *smartarg1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "ValueVector3DCongruent_SetMesh", 2, 2, swig_obj)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_values__ValueVector3DCongruent_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ValueVector3DCongruent_SetMesh" "', argument " "1"" of type '" "values::ValueVector3DCongruent *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  values::ValueVector3DCongruent > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  values::ValueVector3DCongruent > * >(argp1);
      arg1 = const_cast< values::ValueVector3DCongruent * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  values::ValueVector3DCongruent > * >(argp1);
      arg1 = const_cast< values::ValueVector3DCongruent * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_std__shared_ptrT_dive__meshes__IMesh_t,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ValueVector3DCongruent_SetMesh" "', argument " "2"" of type '" "values::IMeshPtr""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ValueVector3DCongruent_SetMesh" "', argument " "2"" of type '" "values::IMeshPtr""'");
    } else {
      values::IMeshPtr * temp = reinterpret_cast< values::IMeshPtr * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  (arg1)->SetMesh(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ValueVector3DCongruent_SetElementIndex(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  values::ValueVector3DCongruent *arg1 = (values::ValueVector3DCongruent *) 0 ;
  values::ElementIndex arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< values::ValueVector3DCongruent > tempshared1 ;
  std::shared_ptr< values::ValueVector3DCongruent > *smartarg1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "ValueVector3DCongruent_SetElementIndex", 2, 2, swig_obj)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_values__ValueVector3DCongruent_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ValueVector3DCongruent_SetElementIndex" "', argument " "1"" of type '" "values::ValueVector3DCongruent *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  values::ValueVector3DCongruent > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  values::ValueVector3DCongruent > * >(argp1);
      arg1 = const_cast< values::ValueVector3DCongruent * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  values::ValueVector3DCongruent > * >(argp1);
      arg1 = const_cast< values::ValueVector3DCongruent * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ValueVector3DCongruent_SetElementIndex" "', argument " "2"" of type '" "values::ElementIndex""'");
  } 
  arg2 = static_cast< values::ElementIndex >(val2);
  (arg1)->SetElementIndex(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *ValueVector3DCongruent_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_std__shared_ptrT_values__ValueVector3DCongruent_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_GetValueMatrix3D(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  values::IMatrix3DPtr arg1 ;
  values::Vector *arg2 = 0 ;
  values::IElementPtr arg3 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  PyObject *swig_obj[3] ;
  values::Matrix result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "GetValueMatrix3D", 3, 3, swig_obj)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_values__IMatrix3D_t,  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GetValueMatrix3D" "', argument " "1"" of type '" "values::IMatrix3DPtr""'");
    }
    if (argp1) arg1 = *(reinterpret_cast< values::IMatrix3DPtr * >(argp1));
    if (newmem & SWIG_CAST_NEW_MEMORY) delete reinterpret_cast< values::IMatrix3DPtr * >(argp1);
  }
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_eilig__Vector,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GetValueMatrix3D" "', argument " "2"" of type '" "values::Vector const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GetValueMatrix3D" "', argument " "2"" of type '" "values::Vector const &""'"); 
  }
  arg2 = reinterpret_cast< values::Vector * >(argp2);
  {
    res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_std__shared_ptrT_dive__elements__IElement_t,  0  | 0);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "GetValueMatrix3D" "', argument " "3"" of type '" "values::IElementPtr""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GetValueMatrix3D" "', argument " "3"" of type '" "values::IElementPtr""'");
    } else {
      values::IElementPtr * temp = reinterpret_cast< values::IElementPtr * >(argp3);
      arg3 = *temp;
      if (SWIG_IsNewObj(res3)) delete temp;
    }
  }
  result = values::GetValueMatrix3D(SWIG_STD_MOVE(arg1),(eilig::Vector const &)*arg2,SWIG_STD_MOVE(arg3));
  resultobj = SWIG_NewPointerObj((new values::Matrix(result)), SWIGTYPE_p_eilig__Matrix, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CreateValueMatrix3DCongruent__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  values::IMeshPtr arg1 ;
  void *argp1 ;
  int res1 = 0 ;
  values::ValueMatrix3DCongruentPtr result;
  
  (void)self;
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  {
    res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_dive__meshes__IMesh_t,  0  | 0);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CreateValueMatrix3DCongruent" "', argument " "1"" of type '" "values::IMeshPtr""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CreateValueMatrix3DCongruent" "', argument " "1"" of type '" "values::IMeshPtr""'");
    } else {
      values::IMeshPtr * temp = reinterpret_cast< values::IMeshPtr * >(argp1);
      arg1 = *temp;
      if (SWIG_IsNewObj(res1)) delete temp;
    }
  }
  result = values::CreateValueMatrix3DCongruent(SWIG_STD_MOVE(arg1));
  {
    std::shared_ptr<  values::ValueMatrix3DCongruent > *smartresult = result ? new std::shared_ptr<  values::ValueMatrix3DCongruent >(result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_std__shared_ptrT_values__ValueMatrix3DCongruent_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CreateValueMatrix3DCongruent__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  values::IMeshPtr arg1 ;
  values::String arg2 ;
  values::String arg3 ;
  void *argp1 ;
  int res1 = 0 ;
  values::ValueMatrix3DCongruentPtr result;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  {
    res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_dive__meshes__IMesh_t,  0  | 0);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CreateValueMatrix3DCongruent" "', argument " "1"" of type '" "values::IMeshPtr""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CreateValueMatrix3DCongruent" "', argument " "1"" of type '" "values::IMeshPtr""'");
    } else {
      values::IMeshPtr * temp = reinterpret_cast< values::IMeshPtr * >(argp1);
      arg1 = *temp;
      if (SWIG_IsNewObj(res1)) delete temp;
    }
  }
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "CreateValueMatrix3DCongruent" "', argument " "2"" of type '" "values::String""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(swig_obj[2], &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "CreateValueMatrix3DCongruent" "', argument " "3"" of type '" "values::String""'"); 
    }
    arg3 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  result = values::CreateValueMatrix3DCongruent(SWIG_STD_MOVE(arg1),SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3));
  {
    std::shared_ptr<  values::ValueMatrix3DCongruent > *smartresult = result ? new std::shared_ptr<  values::ValueMatrix3DCongruent >(result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_std__shared_ptrT_values__ValueMatrix3DCongruent_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CreateValueMatrix3DCongruent(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "CreateValueMatrix3DCongruent", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    int _v = 0;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_std__shared_ptrT_dive__meshes__IMesh_t, SWIG_POINTER_NO_NULL | 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_CreateValueMatrix3DCongruent__SWIG_0(self, argc, argv);
    }
  }
  if (argc == 3) {
    int _v = 0;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_std__shared_ptrT_dive__meshes__IMesh_t, SWIG_POINTER_NO_NULL | 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_CreateValueMatrix3DCongruent__SWIG_1(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'CreateValueMatrix3DCongruent'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    values::CreateValueMatrix3DCongruent(values::IMeshPtr)\n"
    "    values::CreateValueMatrix3DCongruent(values::IMeshPtr,values::String,values::String)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_ValueMatrix3DCongruent(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  values::ValueMatrix3DCongruent *arg1 = (values::ValueMatrix3DCongruent *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< values::ValueMatrix3DCongruent > tempshared1 ;
  std::shared_ptr< values::ValueMatrix3DCongruent > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_values__ValueMatrix3DCongruent_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ValueMatrix3DCongruent" "', argument " "1"" of type '" "values::ValueMatrix3DCongruent *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  values::ValueMatrix3DCongruent > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  values::ValueMatrix3DCongruent > * >(argp1);
      arg1 = const_cast< values::ValueMatrix3DCongruent * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  values::ValueMatrix3DCongruent > * >(argp1);
      arg1 = const_cast< values::ValueMatrix3DCongruent * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  (void)arg1; delete smartarg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ValueMatrix3DCongruent_Create(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  values::ValueMatrix3DCongruentPtr result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "ValueMatrix3DCongruent_Create", 0, 0, 0)) SWIG_fail;
  result = values::ValueMatrix3DCongruent::Create();
  {
    std::shared_ptr<  values::ValueMatrix3DCongruent > *smartresult = result ? new std::shared_ptr<  values::ValueMatrix3DCongruent >(result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_std__shared_ptrT_values__ValueMatrix3DCongruent_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ValueMatrix3DCongruent_GetType(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  values::ValueMatrix3DCongruent *arg1 = (values::ValueMatrix3DCongruent *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< values::ValueMatrix3DCongruent const > tempshared1 ;
  std::shared_ptr< values::ValueMatrix3DCongruent const > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  values::Type result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_values__ValueMatrix3DCongruent_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ValueMatrix3DCongruent_GetType" "', argument " "1"" of type '" "values::ValueMatrix3DCongruent const *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const values::ValueMatrix3DCongruent > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const values::ValueMatrix3DCongruent > * >(argp1);
      arg1 = const_cast< values::ValueMatrix3DCongruent * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const values::ValueMatrix3DCongruent > * >(argp1);
      arg1 = const_cast< values::ValueMatrix3DCongruent * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = ((values::ValueMatrix3DCongruent const *)arg1)->GetType();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ValueMatrix3DCongruent_GetName(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  values::ValueMatrix3DCongruent *arg1 = (values::ValueMatrix3DCongruent *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< values::ValueMatrix3DCongruent const > tempshared1 ;
  std::shared_ptr< values::ValueMatrix3DCongruent const > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  values::String *result = 0 ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_values__ValueMatrix3DCongruent_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ValueMatrix3DCongruent_GetName" "', argument " "1"" of type '" "values::ValueMatrix3DCongruent const *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const values::ValueMatrix3DCongruent > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const values::ValueMatrix3DCongruent > * >(argp1);
      arg1 = const_cast< values::ValueMatrix3DCongruent * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const values::ValueMatrix3DCongruent > * >(argp1);
      arg1 = const_cast< values::ValueMatrix3DCongruent * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = (values::String *) &((values::ValueMatrix3DCongruent const *)arg1)->GetName();
  resultobj = SWIG_From_std_string(static_cast< std::string >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ValueMatrix3DCongruent_GetKey(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  values::ValueMatrix3DCongruent *arg1 = (values::ValueMatrix3DCongruent *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< values::ValueMatrix3DCongruent const > tempshared1 ;
  std::shared_ptr< values::ValueMatrix3DCongruent const > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  values::String *result = 0 ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_values__ValueMatrix3DCongruent_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ValueMatrix3DCongruent_GetKey" "', argument " "1"" of type '" "values::ValueMatrix3DCongruent const *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const values::ValueMatrix3DCongruent > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const values::ValueMatrix3DCongruent > * >(argp1);
      arg1 = const_cast< values::ValueMatrix3DCongruent * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const values::ValueMatrix3DCongruent > * >(argp1);
      arg1 = const_cast< values::ValueMatrix3DCongruent * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = (values::String *) &((values::ValueMatrix3DCongruent const *)arg1)->GetKey();
  resultobj = SWIG_From_std_string(static_cast< std::string >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ValueMatrix3DCongruent_GetValue__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  values::ValueMatrix3DCongruent *arg1 = (values::ValueMatrix3DCongruent *) 0 ;
  values::Scalar arg2 ;
  values::Scalar arg3 ;
  values::Scalar arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< values::ValueMatrix3DCongruent const > tempshared1 ;
  std::shared_ptr< values::ValueMatrix3DCongruent const > *smartarg1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  values::Matrix result;
  
  (void)self;
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_values__ValueMatrix3DCongruent_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ValueMatrix3DCongruent_GetValue" "', argument " "1"" of type '" "values::ValueMatrix3DCongruent const *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const values::ValueMatrix3DCongruent > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const values::ValueMatrix3DCongruent > * >(argp1);
      arg1 = const_cast< values::ValueMatrix3DCongruent * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const values::ValueMatrix3DCongruent > * >(argp1);
      arg1 = const_cast< values::ValueMatrix3DCongruent * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ValueMatrix3DCongruent_GetValue" "', argument " "2"" of type '" "values::Scalar""'");
  } 
  arg2 = static_cast< values::Scalar >(val2);
  ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ValueMatrix3DCongruent_GetValue" "', argument " "3"" of type '" "values::Scalar""'");
  } 
  arg3 = static_cast< values::Scalar >(val3);
  ecode4 = SWIG_AsVal_double(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "ValueMatrix3DCongruent_GetValue" "', argument " "4"" of type '" "values::Scalar""'");
  } 
  arg4 = static_cast< values::Scalar >(val4);
  result = ((values::ValueMatrix3DCongruent const *)arg1)->GetValue(arg2,arg3,arg4);
  resultobj = SWIG_NewPointerObj((new values::Matrix(result)), SWIGTYPE_p_eilig__Matrix, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ValueMatrix3DCongruent_GetValue__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  values::ValueMatrix3DCongruent *arg1 = (values::ValueMatrix3DCongruent *) 0 ;
  values::Scalar arg2 ;
  values::Scalar arg3 ;
  values::Scalar arg4 ;
  values::ElementIndex arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< values::ValueMatrix3DCongruent const > tempshared1 ;
  std::shared_ptr< values::ValueMatrix3DCongruent const > *smartarg1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  size_t val5 ;
  int ecode5 = 0 ;
  values::Matrix result;
  
  (void)self;
  if ((nobjs < 5) || (nobjs > 5)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_values__ValueMatrix3DCongruent_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ValueMatrix3DCongruent_GetValue" "', argument " "1"" of type '" "values::ValueMatrix3DCongruent const *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const values::ValueMatrix3DCongruent > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const values::ValueMatrix3DCongruent > * >(argp1);
      arg1 = const_cast< values::ValueMatrix3DCongruent * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const values::ValueMatrix3DCongruent > * >(argp1);
      arg1 = const_cast< values::ValueMatrix3DCongruent * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ValueMatrix3DCongruent_GetValue" "', argument " "2"" of type '" "values::Scalar""'");
  } 
  arg2 = static_cast< values::Scalar >(val2);
  ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ValueMatrix3DCongruent_GetValue" "', argument " "3"" of type '" "values::Scalar""'");
  } 
  arg3 = static_cast< values::Scalar >(val3);
  ecode4 = SWIG_AsVal_double(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "ValueMatrix3DCongruent_GetValue" "', argument " "4"" of type '" "values::Scalar""'");
  } 
  arg4 = static_cast< values::Scalar >(val4);
  ecode5 = SWIG_AsVal_size_t(swig_obj[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "ValueMatrix3DCongruent_GetValue" "', argument " "5"" of type '" "values::ElementIndex""'");
  } 
  arg5 = static_cast< values::ElementIndex >(val5);
  result = ((values::ValueMatrix3DCongruent const *)arg1)->GetValue(arg2,arg3,arg4,arg5);
  resultobj = SWIG_NewPointerObj((new values::Matrix(result)), SWIGTYPE_p_eilig__Matrix, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ValueMatrix3DCongruent_GetValue__SWIG_2(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  values::ValueMatrix3DCongruent *arg1 = (values::ValueMatrix3DCongruent *) 0 ;
  values::Vector *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< values::ValueMatrix3DCongruent const > tempshared1 ;
  std::shared_ptr< values::ValueMatrix3DCongruent const > *smartarg1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  values::Matrix result;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_values__ValueMatrix3DCongruent_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ValueMatrix3DCongruent_GetValue" "', argument " "1"" of type '" "values::ValueMatrix3DCongruent const *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const values::ValueMatrix3DCongruent > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const values::ValueMatrix3DCongruent > * >(argp1);
      arg1 = const_cast< values::ValueMatrix3DCongruent * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const values::ValueMatrix3DCongruent > * >(argp1);
      arg1 = const_cast< values::ValueMatrix3DCongruent * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_eilig__Vector,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ValueMatrix3DCongruent_GetValue" "', argument " "2"" of type '" "values::Vector const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ValueMatrix3DCongruent_GetValue" "', argument " "2"" of type '" "values::Vector const &""'"); 
  }
  arg2 = reinterpret_cast< values::Vector * >(argp2);
  result = ((values::ValueMatrix3DCongruent const *)arg1)->GetValue((values::Vector const &)*arg2);
  resultobj = SWIG_NewPointerObj((new values::Matrix(result)), SWIGTYPE_p_eilig__Matrix, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ValueMatrix3DCongruent_GetValue__SWIG_3(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  values::ValueMatrix3DCongruent *arg1 = (values::ValueMatrix3DCongruent *) 0 ;
  values::Vector *arg2 = 0 ;
  values::ElementIndex arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< values::ValueMatrix3DCongruent const > tempshared1 ;
  std::shared_ptr< values::ValueMatrix3DCongruent const > *smartarg1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  values::Matrix result;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_values__ValueMatrix3DCongruent_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ValueMatrix3DCongruent_GetValue" "', argument " "1"" of type '" "values::ValueMatrix3DCongruent const *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const values::ValueMatrix3DCongruent > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const values::ValueMatrix3DCongruent > * >(argp1);
      arg1 = const_cast< values::ValueMatrix3DCongruent * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const values::ValueMatrix3DCongruent > * >(argp1);
      arg1 = const_cast< values::ValueMatrix3DCongruent * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_eilig__Vector,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ValueMatrix3DCongruent_GetValue" "', argument " "2"" of type '" "values::Vector const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ValueMatrix3DCongruent_GetValue" "', argument " "2"" of type '" "values::Vector const &""'"); 
  }
  arg2 = reinterpret_cast< values::Vector * >(argp2);
  ecode3 = SWIG_AsVal_size_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ValueMatrix3DCongruent_GetValue" "', argument " "3"" of type '" "values::ElementIndex""'");
  } 
  arg3 = static_cast< values::ElementIndex >(val3);
  result = ((values::ValueMatrix3DCongruent const *)arg1)->GetValue((values::Vector const &)*arg2,arg3);
  resultobj = SWIG_NewPointerObj((new values::Matrix(result)), SWIGTYPE_p_eilig__Matrix, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ValueMatrix3DCongruent_GetValue(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[6] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "ValueMatrix3DCongruent_GetValue", 0, 5, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_std__shared_ptrT_values__ValueMatrix3DCongruent_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_eilig__Vector, SWIG_POINTER_NO_NULL | 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ValueMatrix3DCongruent_GetValue__SWIG_2(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_std__shared_ptrT_values__ValueMatrix3DCongruent_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_eilig__Vector, SWIG_POINTER_NO_NULL | 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_ValueMatrix3DCongruent_GetValue__SWIG_3(self, argc, argv);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_std__shared_ptrT_values__ValueMatrix3DCongruent_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_ValueMatrix3DCongruent_GetValue__SWIG_0(self, argc, argv);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v = 0;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_std__shared_ptrT_values__ValueMatrix3DCongruent_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_size_t(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_ValueMatrix3DCongruent_GetValue__SWIG_1(self, argc, argv);
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'ValueMatrix3DCongruent_GetValue'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    values::ValueMatrix3DCongruent::GetValue(values::Scalar,values::Scalar,values::Scalar) const\n"
    "    values::ValueMatrix3DCongruent::GetValue(values::Scalar,values::Scalar,values::Scalar,values::ElementIndex) const\n"
    "    values::ValueMatrix3DCongruent::GetValue(values::Vector const &) const\n"
    "    values::ValueMatrix3DCongruent::GetValue(values::Vector const &,values::ElementIndex) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ValueMatrix3DCongruent_GetMesh(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  values::ValueMatrix3DCongruent *arg1 = (values::ValueMatrix3DCongruent *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< values::ValueMatrix3DCongruent const > tempshared1 ;
  std::shared_ptr< values::ValueMatrix3DCongruent const > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  values::IMeshPtr result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_values__ValueMatrix3DCongruent_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ValueMatrix3DCongruent_GetMesh" "', argument " "1"" of type '" "values::ValueMatrix3DCongruent const *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const values::ValueMatrix3DCongruent > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const values::ValueMatrix3DCongruent > * >(argp1);
      arg1 = const_cast< values::ValueMatrix3DCongruent * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const values::ValueMatrix3DCongruent > * >(argp1);
      arg1 = const_cast< values::ValueMatrix3DCongruent * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = ((values::ValueMatrix3DCongruent const *)arg1)->GetMesh();
  resultobj = SWIG_NewPointerObj((new values::IMeshPtr(result)), SWIGTYPE_p_std__shared_ptrT_dive__meshes__IMesh_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ValueMatrix3DCongruent_SetName(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  values::ValueMatrix3DCongruent *arg1 = (values::ValueMatrix3DCongruent *) 0 ;
  values::String *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< values::ValueMatrix3DCongruent > tempshared1 ;
  std::shared_ptr< values::ValueMatrix3DCongruent > *smartarg1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "ValueMatrix3DCongruent_SetName", 2, 2, swig_obj)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_values__ValueMatrix3DCongruent_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ValueMatrix3DCongruent_SetName" "', argument " "1"" of type '" "values::ValueMatrix3DCongruent *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  values::ValueMatrix3DCongruent > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  values::ValueMatrix3DCongruent > * >(argp1);
      arg1 = const_cast< values::ValueMatrix3DCongruent * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  values::ValueMatrix3DCongruent > * >(argp1);
      arg1 = const_cast< values::ValueMatrix3DCongruent * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ValueMatrix3DCongruent_SetName" "', argument " "2"" of type '" "values::String const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ValueMatrix3DCongruent_SetName" "', argument " "2"" of type '" "values::String const &""'"); 
    }
    arg2 = ptr;
  }
  (arg1)->SetName((values::String const &)*arg2);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_ValueMatrix3DCongruent_SetKey(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  values::ValueMatrix3DCongruent *arg1 = (values::ValueMatrix3DCongruent *) 0 ;
  values::String *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< values::ValueMatrix3DCongruent > tempshared1 ;
  std::shared_ptr< values::ValueMatrix3DCongruent > *smartarg1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "ValueMatrix3DCongruent_SetKey", 2, 2, swig_obj)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_values__ValueMatrix3DCongruent_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ValueMatrix3DCongruent_SetKey" "', argument " "1"" of type '" "values::ValueMatrix3DCongruent *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  values::ValueMatrix3DCongruent > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  values::ValueMatrix3DCongruent > * >(argp1);
      arg1 = const_cast< values::ValueMatrix3DCongruent * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  values::ValueMatrix3DCongruent > * >(argp1);
      arg1 = const_cast< values::ValueMatrix3DCongruent * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ValueMatrix3DCongruent_SetKey" "', argument " "2"" of type '" "values::String const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ValueMatrix3DCongruent_SetKey" "', argument " "2"" of type '" "values::String const &""'"); 
    }
    arg2 = ptr;
  }
  (arg1)->SetKey((values::String const &)*arg2);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_ValueMatrix3DCongruent_SetMesh(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  values::ValueMatrix3DCongruent *arg1 = (values::ValueMatrix3DCongruent *) 0 ;
  values::IMeshPtr arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< values::ValueMatrix3DCongruent > tempshared1 ;
  std::shared_ptr< values::ValueMatrix3DCongruent > *smartarg1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "ValueMatrix3DCongruent_SetMesh", 2, 2, swig_obj)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_values__ValueMatrix3DCongruent_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ValueMatrix3DCongruent_SetMesh" "', argument " "1"" of type '" "values::ValueMatrix3DCongruent *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  values::ValueMatrix3DCongruent > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  values::ValueMatrix3DCongruent > * >(argp1);
      arg1 = const_cast< values::ValueMatrix3DCongruent * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  values::ValueMatrix3DCongruent > * >(argp1);
      arg1 = const_cast< values::ValueMatrix3DCongruent * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_std__shared_ptrT_dive__meshes__IMesh_t,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ValueMatrix3DCongruent_SetMesh" "', argument " "2"" of type '" "values::IMeshPtr""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ValueMatrix3DCongruent_SetMesh" "', argument " "2"" of type '" "values::IMeshPtr""'");
    } else {
      values::IMeshPtr * temp = reinterpret_cast< values::IMeshPtr * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  (arg1)->SetMesh(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ValueMatrix3DCongruent_SetElementIndex(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  values::ValueMatrix3DCongruent *arg1 = (values::ValueMatrix3DCongruent *) 0 ;
  values::ElementIndex arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< values::ValueMatrix3DCongruent > tempshared1 ;
  std::shared_ptr< values::ValueMatrix3DCongruent > *smartarg1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "ValueMatrix3DCongruent_SetElementIndex", 2, 2, swig_obj)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_values__ValueMatrix3DCongruent_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ValueMatrix3DCongruent_SetElementIndex" "', argument " "1"" of type '" "values::ValueMatrix3DCongruent *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  values::ValueMatrix3DCongruent > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  values::ValueMatrix3DCongruent > * >(argp1);
      arg1 = const_cast< values::ValueMatrix3DCongruent * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  values::ValueMatrix3DCongruent > * >(argp1);
      arg1 = const_cast< values::ValueMatrix3DCongruent * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ValueMatrix3DCongruent_SetElementIndex" "', argument " "2"" of type '" "values::ElementIndex""'");
  } 
  arg2 = static_cast< values::ElementIndex >(val2);
  (arg1)->SetElementIndex(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *ValueMatrix3DCongruent_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_std__shared_ptrT_values__ValueMatrix3DCongruent_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN int Swig_var_GaussTable_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable GaussTable is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_GaussTable_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(quadrature::GaussTable), SWIGTYPE_p_a_2__double,  0 );
  return pyobj;
}


SWIGINTERN PyObject *_wrap_delete_IGauss(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  quadrature::IGauss *arg1 = (quadrature::IGauss *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< quadrature::IGauss > tempshared1 ;
  std::shared_ptr< quadrature::IGauss > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_quadrature__IGauss_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_IGauss" "', argument " "1"" of type '" "quadrature::IGauss *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  quadrature::IGauss > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  quadrature::IGauss > * >(argp1);
      arg1 = const_cast< quadrature::IGauss * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  quadrature::IGauss > * >(argp1);
      arg1 = const_cast< quadrature::IGauss * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  (void)arg1; delete smartarg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IGauss_GetPoints(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  quadrature::IGauss *arg1 = (quadrature::IGauss *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< quadrature::IGauss const > tempshared1 ;
  std::shared_ptr< quadrature::IGauss const > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  quadrature::Points *result = 0 ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_quadrature__IGauss_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IGauss_GetPoints" "', argument " "1"" of type '" "quadrature::IGauss const *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const quadrature::IGauss > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const quadrature::IGauss > * >(argp1);
      arg1 = const_cast< quadrature::IGauss * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const quadrature::IGauss > * >(argp1);
      arg1 = const_cast< quadrature::IGauss * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = (quadrature::Points *) &((quadrature::IGauss const *)arg1)->GetPoints();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_eilig__Vector_std__allocatorT_eilig__Vector_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IGauss_GetWeights(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  quadrature::IGauss *arg1 = (quadrature::IGauss *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< quadrature::IGauss const > tempshared1 ;
  std::shared_ptr< quadrature::IGauss const > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  quadrature::Weights *result = 0 ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_quadrature__IGauss_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IGauss_GetWeights" "', argument " "1"" of type '" "quadrature::IGauss const *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const quadrature::IGauss > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const quadrature::IGauss > * >(argp1);
      arg1 = const_cast< quadrature::IGauss * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const quadrature::IGauss > * >(argp1);
      arg1 = const_cast< quadrature::IGauss * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = (quadrature::Weights *) &((quadrature::IGauss const *)arg1)->GetWeights();
  resultobj = swig::from(static_cast< std::vector< double,std::allocator< double > > >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IGauss_GetCounter(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  quadrature::IGauss *arg1 = (quadrature::IGauss *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< quadrature::IGauss const > tempshared1 ;
  std::shared_ptr< quadrature::IGauss const > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  quadrature::Counter *result = 0 ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_quadrature__IGauss_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IGauss_GetCounter" "', argument " "1"" of type '" "quadrature::IGauss const *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const quadrature::IGauss > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const quadrature::IGauss > * >(argp1);
      arg1 = const_cast< quadrature::IGauss * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const quadrature::IGauss > * >(argp1);
      arg1 = const_cast< quadrature::IGauss * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = (quadrature::Counter *) &((quadrature::IGauss const *)arg1)->GetCounter();
  resultobj = SWIG_From_size_t(static_cast< size_t >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IGauss_GetQuadrature(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  quadrature::IGauss *arg1 = (quadrature::IGauss *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< quadrature::IGauss const > tempshared1 ;
  std::shared_ptr< quadrature::IGauss const > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  quadrature::Quadrature *result = 0 ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_quadrature__IGauss_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IGauss_GetQuadrature" "', argument " "1"" of type '" "quadrature::IGauss const *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const quadrature::IGauss > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const quadrature::IGauss > * >(argp1);
      arg1 = const_cast< quadrature::IGauss * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const quadrature::IGauss > * >(argp1);
      arg1 = const_cast< quadrature::IGauss * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = (quadrature::Quadrature *) &((quadrature::IGauss const *)arg1)->GetQuadrature();
  resultobj = SWIG_From_size_t(static_cast< size_t >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IGauss_SetQuadrature(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  quadrature::IGauss *arg1 = (quadrature::IGauss *) 0 ;
  quadrature::Quadrature *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< quadrature::IGauss > tempshared1 ;
  std::shared_ptr< quadrature::IGauss > *smartarg1 = 0 ;
  quadrature::Quadrature temp2 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "IGauss_SetQuadrature", 2, 2, swig_obj)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_quadrature__IGauss_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IGauss_SetQuadrature" "', argument " "1"" of type '" "quadrature::IGauss *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  quadrature::IGauss > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  quadrature::IGauss > * >(argp1);
      arg1 = const_cast< quadrature::IGauss * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  quadrature::IGauss > * >(argp1);
      arg1 = const_cast< quadrature::IGauss * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IGauss_SetQuadrature" "', argument " "2"" of type '" "quadrature::Quadrature""'");
  } 
  temp2 = static_cast< quadrature::Quadrature >(val2);
  arg2 = &temp2;
  (arg1)->SetQuadrature((quadrature::Quadrature const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *IGauss_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_std__shared_ptrT_quadrature__IGauss_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_CreateGaussHexa(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  quadrature::GaussHexaPtr result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "CreateGaussHexa", 0, 0, 0)) SWIG_fail;
  result = quadrature::CreateGaussHexa();
  {
    std::shared_ptr<  quadrature::GaussHexa > *smartresult = result ? new std::shared_ptr<  quadrature::GaussHexa >(result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_std__shared_ptrT_quadrature__GaussHexa_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_GaussHexa(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  quadrature::GaussHexa *arg1 = (quadrature::GaussHexa *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< quadrature::GaussHexa > tempshared1 ;
  std::shared_ptr< quadrature::GaussHexa > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_quadrature__GaussHexa_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_GaussHexa" "', argument " "1"" of type '" "quadrature::GaussHexa *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  quadrature::GaussHexa > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  quadrature::GaussHexa > * >(argp1);
      arg1 = const_cast< quadrature::GaussHexa * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  quadrature::GaussHexa > * >(argp1);
      arg1 = const_cast< quadrature::GaussHexa * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  (void)arg1; delete smartarg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GaussHexa_Create(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  quadrature::GaussHexaPtr result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "GaussHexa_Create", 0, 0, 0)) SWIG_fail;
  result = quadrature::GaussHexa::Create();
  {
    std::shared_ptr<  quadrature::GaussHexa > *smartresult = result ? new std::shared_ptr<  quadrature::GaussHexa >(result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_std__shared_ptrT_quadrature__GaussHexa_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GaussHexa_GetPtr__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  quadrature::GaussHexa *arg1 = (quadrature::GaussHexa *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< quadrature::GaussHexa > tempshared1 ;
  std::shared_ptr< quadrature::GaussHexa > *smartarg1 = 0 ;
  quadrature::GaussHexaPtr result;
  
  (void)self;
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_quadrature__GaussHexa_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GaussHexa_GetPtr" "', argument " "1"" of type '" "quadrature::GaussHexa *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  quadrature::GaussHexa > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  quadrature::GaussHexa > * >(argp1);
      arg1 = const_cast< quadrature::GaussHexa * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  quadrature::GaussHexa > * >(argp1);
      arg1 = const_cast< quadrature::GaussHexa * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = (arg1)->GetPtr();
  {
    std::shared_ptr<  quadrature::GaussHexa > *smartresult = result ? new std::shared_ptr<  quadrature::GaussHexa >(result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_std__shared_ptrT_quadrature__GaussHexa_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GaussHexa_GetPtr__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  quadrature::GaussHexa *arg1 = (quadrature::GaussHexa *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< quadrature::GaussHexa const > tempshared1 ;
  std::shared_ptr< quadrature::GaussHexa const > *smartarg1 = 0 ;
  quadrature::ConstGaussHexaPtr result;
  
  (void)self;
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_quadrature__GaussHexa_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GaussHexa_GetPtr" "', argument " "1"" of type '" "quadrature::GaussHexa const *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const quadrature::GaussHexa > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const quadrature::GaussHexa > * >(argp1);
      arg1 = const_cast< quadrature::GaussHexa * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const quadrature::GaussHexa > * >(argp1);
      arg1 = const_cast< quadrature::GaussHexa * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = ((quadrature::GaussHexa const *)arg1)->GetPtr();
  {
    std::shared_ptr< const quadrature::GaussHexa > *smartresult = result ? new std::shared_ptr< const quadrature::GaussHexa >(result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_std__shared_ptrT_quadrature__GaussHexa_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GaussHexa_GetPtr(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "GaussHexa_GetPtr", 0, 1, argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    int _v = 0;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_std__shared_ptrT_quadrature__GaussHexa_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_GaussHexa_GetPtr__SWIG_0(self, argc, argv);
    }
  }
  if (argc == 1) {
    int _v = 0;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_std__shared_ptrT_quadrature__GaussHexa_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_GaussHexa_GetPtr__SWIG_1(self, argc, argv);
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'GaussHexa_GetPtr'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    quadrature::GaussHexa::GetPtr()\n"
    "    quadrature::GaussHexa::GetPtr() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_GaussHexa_GetPoints(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  quadrature::GaussHexa *arg1 = (quadrature::GaussHexa *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< quadrature::GaussHexa const > tempshared1 ;
  std::shared_ptr< quadrature::GaussHexa const > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  quadrature::Points *result = 0 ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_quadrature__GaussHexa_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GaussHexa_GetPoints" "', argument " "1"" of type '" "quadrature::GaussHexa const *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const quadrature::GaussHexa > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const quadrature::GaussHexa > * >(argp1);
      arg1 = const_cast< quadrature::GaussHexa * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const quadrature::GaussHexa > * >(argp1);
      arg1 = const_cast< quadrature::GaussHexa * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = (quadrature::Points *) &((quadrature::GaussHexa const *)arg1)->GetPoints();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_eilig__Vector_std__allocatorT_eilig__Vector_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GaussHexa_GetWeights(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  quadrature::GaussHexa *arg1 = (quadrature::GaussHexa *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< quadrature::GaussHexa const > tempshared1 ;
  std::shared_ptr< quadrature::GaussHexa const > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  quadrature::Weights *result = 0 ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_quadrature__GaussHexa_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GaussHexa_GetWeights" "', argument " "1"" of type '" "quadrature::GaussHexa const *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const quadrature::GaussHexa > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const quadrature::GaussHexa > * >(argp1);
      arg1 = const_cast< quadrature::GaussHexa * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const quadrature::GaussHexa > * >(argp1);
      arg1 = const_cast< quadrature::GaussHexa * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = (quadrature::Weights *) &((quadrature::GaussHexa const *)arg1)->GetWeights();
  resultobj = swig::from(static_cast< std::vector< double,std::allocator< double > > >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GaussHexa_GetCounter(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  quadrature::GaussHexa *arg1 = (quadrature::GaussHexa *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< quadrature::GaussHexa const > tempshared1 ;
  std::shared_ptr< quadrature::GaussHexa const > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  quadrature::Counter *result = 0 ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_quadrature__GaussHexa_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GaussHexa_GetCounter" "', argument " "1"" of type '" "quadrature::GaussHexa const *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const quadrature::GaussHexa > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const quadrature::GaussHexa > * >(argp1);
      arg1 = const_cast< quadrature::GaussHexa * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const quadrature::GaussHexa > * >(argp1);
      arg1 = const_cast< quadrature::GaussHexa * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = (quadrature::Counter *) &((quadrature::GaussHexa const *)arg1)->GetCounter();
  resultobj = SWIG_From_size_t(static_cast< size_t >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GaussHexa_GetQuadrature(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  quadrature::GaussHexa *arg1 = (quadrature::GaussHexa *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< quadrature::GaussHexa const > tempshared1 ;
  std::shared_ptr< quadrature::GaussHexa const > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  quadrature::Quadrature *result = 0 ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_quadrature__GaussHexa_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GaussHexa_GetQuadrature" "', argument " "1"" of type '" "quadrature::GaussHexa const *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const quadrature::GaussHexa > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const quadrature::GaussHexa > * >(argp1);
      arg1 = const_cast< quadrature::GaussHexa * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const quadrature::GaussHexa > * >(argp1);
      arg1 = const_cast< quadrature::GaussHexa * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = (quadrature::Quadrature *) &((quadrature::GaussHexa const *)arg1)->GetQuadrature();
  resultobj = SWIG_From_size_t(static_cast< size_t >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GaussHexa_SetQuadrature(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  quadrature::GaussHexa *arg1 = (quadrature::GaussHexa *) 0 ;
  quadrature::Quadrature *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< quadrature::GaussHexa > tempshared1 ;
  std::shared_ptr< quadrature::GaussHexa > *smartarg1 = 0 ;
  quadrature::Quadrature temp2 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "GaussHexa_SetQuadrature", 2, 2, swig_obj)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_quadrature__GaussHexa_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GaussHexa_SetQuadrature" "', argument " "1"" of type '" "quadrature::GaussHexa *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  quadrature::GaussHexa > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  quadrature::GaussHexa > * >(argp1);
      arg1 = const_cast< quadrature::GaussHexa * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  quadrature::GaussHexa > * >(argp1);
      arg1 = const_cast< quadrature::GaussHexa * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "GaussHexa_SetQuadrature" "', argument " "2"" of type '" "quadrature::Quadrature""'");
  } 
  temp2 = static_cast< quadrature::Quadrature >(val2);
  arg2 = &temp2;
  (arg1)->SetQuadrature((quadrature::Quadrature const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *GaussHexa_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_std__shared_ptrT_quadrature__GaussHexa_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_CreateGaussRect(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  quadrature::GaussRectPtr result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "CreateGaussRect", 0, 0, 0)) SWIG_fail;
  result = quadrature::CreateGaussRect();
  {
    std::shared_ptr<  quadrature::GaussRect > *smartresult = result ? new std::shared_ptr<  quadrature::GaussRect >(result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_std__shared_ptrT_quadrature__GaussRect_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_GaussRect(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  quadrature::GaussRect *arg1 = (quadrature::GaussRect *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< quadrature::GaussRect > tempshared1 ;
  std::shared_ptr< quadrature::GaussRect > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_quadrature__GaussRect_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_GaussRect" "', argument " "1"" of type '" "quadrature::GaussRect *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  quadrature::GaussRect > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  quadrature::GaussRect > * >(argp1);
      arg1 = const_cast< quadrature::GaussRect * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  quadrature::GaussRect > * >(argp1);
      arg1 = const_cast< quadrature::GaussRect * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  (void)arg1; delete smartarg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GaussRect_Create(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  quadrature::GaussRectPtr result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "GaussRect_Create", 0, 0, 0)) SWIG_fail;
  result = quadrature::GaussRect::Create();
  {
    std::shared_ptr<  quadrature::GaussRect > *smartresult = result ? new std::shared_ptr<  quadrature::GaussRect >(result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_std__shared_ptrT_quadrature__GaussRect_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GaussRect_GetPtr__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  quadrature::GaussRect *arg1 = (quadrature::GaussRect *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< quadrature::GaussRect > tempshared1 ;
  std::shared_ptr< quadrature::GaussRect > *smartarg1 = 0 ;
  quadrature::GaussRectPtr result;
  
  (void)self;
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_quadrature__GaussRect_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GaussRect_GetPtr" "', argument " "1"" of type '" "quadrature::GaussRect *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  quadrature::GaussRect > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  quadrature::GaussRect > * >(argp1);
      arg1 = const_cast< quadrature::GaussRect * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  quadrature::GaussRect > * >(argp1);
      arg1 = const_cast< quadrature::GaussRect * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = (arg1)->GetPtr();
  {
    std::shared_ptr<  quadrature::GaussRect > *smartresult = result ? new std::shared_ptr<  quadrature::GaussRect >(result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_std__shared_ptrT_quadrature__GaussRect_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GaussRect_GetPtr__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  quadrature::GaussRect *arg1 = (quadrature::GaussRect *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< quadrature::GaussRect const > tempshared1 ;
  std::shared_ptr< quadrature::GaussRect const > *smartarg1 = 0 ;
  quadrature::ConstGaussRectPtr result;
  
  (void)self;
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_quadrature__GaussRect_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GaussRect_GetPtr" "', argument " "1"" of type '" "quadrature::GaussRect const *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const quadrature::GaussRect > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const quadrature::GaussRect > * >(argp1);
      arg1 = const_cast< quadrature::GaussRect * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const quadrature::GaussRect > * >(argp1);
      arg1 = const_cast< quadrature::GaussRect * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = ((quadrature::GaussRect const *)arg1)->GetPtr();
  {
    std::shared_ptr< const quadrature::GaussRect > *smartresult = result ? new std::shared_ptr< const quadrature::GaussRect >(result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_std__shared_ptrT_quadrature__GaussRect_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GaussRect_GetPtr(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "GaussRect_GetPtr", 0, 1, argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    int _v = 0;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_std__shared_ptrT_quadrature__GaussRect_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_GaussRect_GetPtr__SWIG_0(self, argc, argv);
    }
  }
  if (argc == 1) {
    int _v = 0;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_std__shared_ptrT_quadrature__GaussRect_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_GaussRect_GetPtr__SWIG_1(self, argc, argv);
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'GaussRect_GetPtr'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    quadrature::GaussRect::GetPtr()\n"
    "    quadrature::GaussRect::GetPtr() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_GaussRect_GetPoints(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  quadrature::GaussRect *arg1 = (quadrature::GaussRect *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< quadrature::GaussRect const > tempshared1 ;
  std::shared_ptr< quadrature::GaussRect const > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  quadrature::Points *result = 0 ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_quadrature__GaussRect_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GaussRect_GetPoints" "', argument " "1"" of type '" "quadrature::GaussRect const *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const quadrature::GaussRect > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const quadrature::GaussRect > * >(argp1);
      arg1 = const_cast< quadrature::GaussRect * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const quadrature::GaussRect > * >(argp1);
      arg1 = const_cast< quadrature::GaussRect * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = (quadrature::Points *) &((quadrature::GaussRect const *)arg1)->GetPoints();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_eilig__Vector_std__allocatorT_eilig__Vector_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GaussRect_GetWeights(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  quadrature::GaussRect *arg1 = (quadrature::GaussRect *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< quadrature::GaussRect const > tempshared1 ;
  std::shared_ptr< quadrature::GaussRect const > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  quadrature::Weights *result = 0 ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_quadrature__GaussRect_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GaussRect_GetWeights" "', argument " "1"" of type '" "quadrature::GaussRect const *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const quadrature::GaussRect > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const quadrature::GaussRect > * >(argp1);
      arg1 = const_cast< quadrature::GaussRect * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const quadrature::GaussRect > * >(argp1);
      arg1 = const_cast< quadrature::GaussRect * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = (quadrature::Weights *) &((quadrature::GaussRect const *)arg1)->GetWeights();
  resultobj = swig::from(static_cast< std::vector< double,std::allocator< double > > >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GaussRect_GetCounter(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  quadrature::GaussRect *arg1 = (quadrature::GaussRect *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< quadrature::GaussRect const > tempshared1 ;
  std::shared_ptr< quadrature::GaussRect const > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  quadrature::Counter *result = 0 ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_quadrature__GaussRect_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GaussRect_GetCounter" "', argument " "1"" of type '" "quadrature::GaussRect const *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const quadrature::GaussRect > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const quadrature::GaussRect > * >(argp1);
      arg1 = const_cast< quadrature::GaussRect * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const quadrature::GaussRect > * >(argp1);
      arg1 = const_cast< quadrature::GaussRect * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = (quadrature::Counter *) &((quadrature::GaussRect const *)arg1)->GetCounter();
  resultobj = SWIG_From_size_t(static_cast< size_t >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GaussRect_GetQuadrature(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  quadrature::GaussRect *arg1 = (quadrature::GaussRect *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< quadrature::GaussRect const > tempshared1 ;
  std::shared_ptr< quadrature::GaussRect const > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  quadrature::Quadrature *result = 0 ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_quadrature__GaussRect_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GaussRect_GetQuadrature" "', argument " "1"" of type '" "quadrature::GaussRect const *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const quadrature::GaussRect > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const quadrature::GaussRect > * >(argp1);
      arg1 = const_cast< quadrature::GaussRect * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const quadrature::GaussRect > * >(argp1);
      arg1 = const_cast< quadrature::GaussRect * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = (quadrature::Quadrature *) &((quadrature::GaussRect const *)arg1)->GetQuadrature();
  resultobj = SWIG_From_size_t(static_cast< size_t >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GaussRect_SetQuadrature(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  quadrature::GaussRect *arg1 = (quadrature::GaussRect *) 0 ;
  quadrature::Quadrature *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< quadrature::GaussRect > tempshared1 ;
  std::shared_ptr< quadrature::GaussRect > *smartarg1 = 0 ;
  quadrature::Quadrature temp2 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "GaussRect_SetQuadrature", 2, 2, swig_obj)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_quadrature__GaussRect_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GaussRect_SetQuadrature" "', argument " "1"" of type '" "quadrature::GaussRect *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  quadrature::GaussRect > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  quadrature::GaussRect > * >(argp1);
      arg1 = const_cast< quadrature::GaussRect * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  quadrature::GaussRect > * >(argp1);
      arg1 = const_cast< quadrature::GaussRect * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "GaussRect_SetQuadrature" "', argument " "2"" of type '" "quadrature::Quadrature""'");
  } 
  temp2 = static_cast< quadrature::Quadrature >(val2);
  arg2 = &temp2;
  (arg1)->SetQuadrature((quadrature::Quadrature const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *GaussRect_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_std__shared_ptrT_quadrature__GaussRect_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_CreateGaussLine(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  quadrature::GaussLinePtr result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "CreateGaussLine", 0, 0, 0)) SWIG_fail;
  result = quadrature::CreateGaussLine();
  {
    std::shared_ptr<  quadrature::GaussLine > *smartresult = result ? new std::shared_ptr<  quadrature::GaussLine >(result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_std__shared_ptrT_quadrature__GaussLine_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_GaussLine(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  quadrature::GaussLine *arg1 = (quadrature::GaussLine *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< quadrature::GaussLine > tempshared1 ;
  std::shared_ptr< quadrature::GaussLine > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_quadrature__GaussLine_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_GaussLine" "', argument " "1"" of type '" "quadrature::GaussLine *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  quadrature::GaussLine > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  quadrature::GaussLine > * >(argp1);
      arg1 = const_cast< quadrature::GaussLine * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  quadrature::GaussLine > * >(argp1);
      arg1 = const_cast< quadrature::GaussLine * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  (void)arg1; delete smartarg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GaussLine_Create(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  quadrature::GaussLinePtr result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "GaussLine_Create", 0, 0, 0)) SWIG_fail;
  result = quadrature::GaussLine::Create();
  {
    std::shared_ptr<  quadrature::GaussLine > *smartresult = result ? new std::shared_ptr<  quadrature::GaussLine >(result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_std__shared_ptrT_quadrature__GaussLine_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GaussLine_GetPtr__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  quadrature::GaussLine *arg1 = (quadrature::GaussLine *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< quadrature::GaussLine > tempshared1 ;
  std::shared_ptr< quadrature::GaussLine > *smartarg1 = 0 ;
  quadrature::GaussLinePtr result;
  
  (void)self;
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_quadrature__GaussLine_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GaussLine_GetPtr" "', argument " "1"" of type '" "quadrature::GaussLine *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  quadrature::GaussLine > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  quadrature::GaussLine > * >(argp1);
      arg1 = const_cast< quadrature::GaussLine * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  quadrature::GaussLine > * >(argp1);
      arg1 = const_cast< quadrature::GaussLine * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = (arg1)->GetPtr();
  {
    std::shared_ptr<  quadrature::GaussLine > *smartresult = result ? new std::shared_ptr<  quadrature::GaussLine >(result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_std__shared_ptrT_quadrature__GaussLine_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GaussLine_GetPtr__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  quadrature::GaussLine *arg1 = (quadrature::GaussLine *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< quadrature::GaussLine const > tempshared1 ;
  std::shared_ptr< quadrature::GaussLine const > *smartarg1 = 0 ;
  quadrature::ConstGaussLinePtr result;
  
  (void)self;
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_quadrature__GaussLine_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GaussLine_GetPtr" "', argument " "1"" of type '" "quadrature::GaussLine const *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const quadrature::GaussLine > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const quadrature::GaussLine > * >(argp1);
      arg1 = const_cast< quadrature::GaussLine * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const quadrature::GaussLine > * >(argp1);
      arg1 = const_cast< quadrature::GaussLine * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = ((quadrature::GaussLine const *)arg1)->GetPtr();
  {
    std::shared_ptr< const quadrature::GaussLine > *smartresult = result ? new std::shared_ptr< const quadrature::GaussLine >(result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_std__shared_ptrT_quadrature__GaussLine_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GaussLine_GetPtr(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "GaussLine_GetPtr", 0, 1, argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    int _v = 0;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_std__shared_ptrT_quadrature__GaussLine_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_GaussLine_GetPtr__SWIG_0(self, argc, argv);
    }
  }
  if (argc == 1) {
    int _v = 0;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_std__shared_ptrT_quadrature__GaussLine_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_GaussLine_GetPtr__SWIG_1(self, argc, argv);
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'GaussLine_GetPtr'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    quadrature::GaussLine::GetPtr()\n"
    "    quadrature::GaussLine::GetPtr() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_GaussLine_GetPoints(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  quadrature::GaussLine *arg1 = (quadrature::GaussLine *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< quadrature::GaussLine const > tempshared1 ;
  std::shared_ptr< quadrature::GaussLine const > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  quadrature::Points *result = 0 ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_quadrature__GaussLine_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GaussLine_GetPoints" "', argument " "1"" of type '" "quadrature::GaussLine const *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const quadrature::GaussLine > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const quadrature::GaussLine > * >(argp1);
      arg1 = const_cast< quadrature::GaussLine * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const quadrature::GaussLine > * >(argp1);
      arg1 = const_cast< quadrature::GaussLine * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = (quadrature::Points *) &((quadrature::GaussLine const *)arg1)->GetPoints();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_eilig__Vector_std__allocatorT_eilig__Vector_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GaussLine_GetWeights(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  quadrature::GaussLine *arg1 = (quadrature::GaussLine *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< quadrature::GaussLine const > tempshared1 ;
  std::shared_ptr< quadrature::GaussLine const > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  quadrature::Weights *result = 0 ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_quadrature__GaussLine_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GaussLine_GetWeights" "', argument " "1"" of type '" "quadrature::GaussLine const *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const quadrature::GaussLine > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const quadrature::GaussLine > * >(argp1);
      arg1 = const_cast< quadrature::GaussLine * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const quadrature::GaussLine > * >(argp1);
      arg1 = const_cast< quadrature::GaussLine * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = (quadrature::Weights *) &((quadrature::GaussLine const *)arg1)->GetWeights();
  resultobj = swig::from(static_cast< std::vector< double,std::allocator< double > > >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GaussLine_GetCounter(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  quadrature::GaussLine *arg1 = (quadrature::GaussLine *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< quadrature::GaussLine const > tempshared1 ;
  std::shared_ptr< quadrature::GaussLine const > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  quadrature::Counter *result = 0 ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_quadrature__GaussLine_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GaussLine_GetCounter" "', argument " "1"" of type '" "quadrature::GaussLine const *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const quadrature::GaussLine > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const quadrature::GaussLine > * >(argp1);
      arg1 = const_cast< quadrature::GaussLine * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const quadrature::GaussLine > * >(argp1);
      arg1 = const_cast< quadrature::GaussLine * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = (quadrature::Counter *) &((quadrature::GaussLine const *)arg1)->GetCounter();
  resultobj = SWIG_From_size_t(static_cast< size_t >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GaussLine_GetQuadrature(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  quadrature::GaussLine *arg1 = (quadrature::GaussLine *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< quadrature::GaussLine const > tempshared1 ;
  std::shared_ptr< quadrature::GaussLine const > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  quadrature::Quadrature *result = 0 ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_quadrature__GaussLine_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GaussLine_GetQuadrature" "', argument " "1"" of type '" "quadrature::GaussLine const *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const quadrature::GaussLine > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const quadrature::GaussLine > * >(argp1);
      arg1 = const_cast< quadrature::GaussLine * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const quadrature::GaussLine > * >(argp1);
      arg1 = const_cast< quadrature::GaussLine * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = (quadrature::Quadrature *) &((quadrature::GaussLine const *)arg1)->GetQuadrature();
  resultobj = SWIG_From_size_t(static_cast< size_t >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GaussLine_SetQuadrature(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  quadrature::GaussLine *arg1 = (quadrature::GaussLine *) 0 ;
  quadrature::Quadrature *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< quadrature::GaussLine > tempshared1 ;
  std::shared_ptr< quadrature::GaussLine > *smartarg1 = 0 ;
  quadrature::Quadrature temp2 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "GaussLine_SetQuadrature", 2, 2, swig_obj)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_quadrature__GaussLine_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GaussLine_SetQuadrature" "', argument " "1"" of type '" "quadrature::GaussLine *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  quadrature::GaussLine > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  quadrature::GaussLine > * >(argp1);
      arg1 = const_cast< quadrature::GaussLine * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  quadrature::GaussLine > * >(argp1);
      arg1 = const_cast< quadrature::GaussLine * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "GaussLine_SetQuadrature" "', argument " "2"" of type '" "quadrature::Quadrature""'");
  } 
  temp2 = static_cast< quadrature::Quadrature >(val2);
  arg2 = &temp2;
  (arg1)->SetQuadrature((quadrature::Quadrature const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *GaussLine_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_std__shared_ptrT_quadrature__GaussLine_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN int Swig_var_headerInterpolation_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable headerInterpolation is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_headerInterpolation_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_std_string(static_cast< std::string >(interpolation::headerInterpolation));
  return pyobj;
}


SWIGINTERN int Swig_var_interpolation_fixed_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable interpolation_fixed is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_interpolation_fixed_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_size_t(static_cast< size_t >(interpolation::interpolation_fixed));
  return pyobj;
}


SWIGINTERN int Swig_var_interpolation_idw_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable interpolation_idw is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_interpolation_idw_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_size_t(static_cast< size_t >(interpolation::interpolation_idw));
  return pyobj;
}


SWIGINTERN int Swig_var_interpolation_nn_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable interpolation_nn is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_interpolation_nn_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_size_t(static_cast< size_t >(interpolation::interpolation_nn));
  return pyobj;
}


SWIGINTERN int Swig_var_interpolation_rbf_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable interpolation_rbf is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_interpolation_rbf_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_size_t(static_cast< size_t >(interpolation::interpolation_rbf));
  return pyobj;
}


SWIGINTERN PyObject *_wrap_delete_IInterpolation(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  interpolation::IInterpolation *arg1 = (interpolation::IInterpolation *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< interpolation::IInterpolation > tempshared1 ;
  std::shared_ptr< interpolation::IInterpolation > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_interpolation__IInterpolation_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_IInterpolation" "', argument " "1"" of type '" "interpolation::IInterpolation *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  interpolation::IInterpolation > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  interpolation::IInterpolation > * >(argp1);
      arg1 = const_cast< interpolation::IInterpolation * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  interpolation::IInterpolation > * >(argp1);
      arg1 = const_cast< interpolation::IInterpolation * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  (void)arg1; delete smartarg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IInterpolation_GetType(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  interpolation::IInterpolation *arg1 = (interpolation::IInterpolation *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< interpolation::IInterpolation const > tempshared1 ;
  std::shared_ptr< interpolation::IInterpolation const > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  interpolation::Type result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_interpolation__IInterpolation_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IInterpolation_GetType" "', argument " "1"" of type '" "interpolation::IInterpolation const *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const interpolation::IInterpolation > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const interpolation::IInterpolation > * >(argp1);
      arg1 = const_cast< interpolation::IInterpolation * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const interpolation::IInterpolation > * >(argp1);
      arg1 = const_cast< interpolation::IInterpolation * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = ((interpolation::IInterpolation const *)arg1)->GetType();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IInterpolation_GetValue__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  interpolation::IInterpolation *arg1 = (interpolation::IInterpolation *) 0 ;
  interpolation::Scalar arg2 ;
  interpolation::Scalar arg3 ;
  interpolation::Scalar arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< interpolation::IInterpolation const > tempshared1 ;
  std::shared_ptr< interpolation::IInterpolation const > *smartarg1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  interpolation::Matrix result;
  
  (void)self;
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_interpolation__IInterpolation_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IInterpolation_GetValue" "', argument " "1"" of type '" "interpolation::IInterpolation const *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const interpolation::IInterpolation > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const interpolation::IInterpolation > * >(argp1);
      arg1 = const_cast< interpolation::IInterpolation * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const interpolation::IInterpolation > * >(argp1);
      arg1 = const_cast< interpolation::IInterpolation * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IInterpolation_GetValue" "', argument " "2"" of type '" "interpolation::Scalar""'");
  } 
  arg2 = static_cast< interpolation::Scalar >(val2);
  ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "IInterpolation_GetValue" "', argument " "3"" of type '" "interpolation::Scalar""'");
  } 
  arg3 = static_cast< interpolation::Scalar >(val3);
  ecode4 = SWIG_AsVal_double(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "IInterpolation_GetValue" "', argument " "4"" of type '" "interpolation::Scalar""'");
  } 
  arg4 = static_cast< interpolation::Scalar >(val4);
  result = ((interpolation::IInterpolation const *)arg1)->GetValue(arg2,arg3,arg4);
  resultobj = SWIG_NewPointerObj((new interpolation::Matrix(result)), SWIGTYPE_p_eilig__Matrix, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IInterpolation_GetValue__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  interpolation::IInterpolation *arg1 = (interpolation::IInterpolation *) 0 ;
  interpolation::INodePtr arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< interpolation::IInterpolation const > tempshared1 ;
  std::shared_ptr< interpolation::IInterpolation const > *smartarg1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_interpolation__IInterpolation_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IInterpolation_GetValue" "', argument " "1"" of type '" "interpolation::IInterpolation const *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const interpolation::IInterpolation > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const interpolation::IInterpolation > * >(argp1);
      arg1 = const_cast< interpolation::IInterpolation * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const interpolation::IInterpolation > * >(argp1);
      arg1 = const_cast< interpolation::IInterpolation * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_std__shared_ptrT_nodes__INode_t,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IInterpolation_GetValue" "', argument " "2"" of type '" "interpolation::INodePtr""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "IInterpolation_GetValue" "', argument " "2"" of type '" "interpolation::INodePtr""'");
    } else {
      interpolation::INodePtr * temp = reinterpret_cast< interpolation::INodePtr * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  ((interpolation::IInterpolation const *)arg1)->GetValue(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IInterpolation_GetValue(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "IInterpolation_GetValue", 0, 4, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_std__shared_ptrT_interpolation__IInterpolation_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_std__shared_ptrT_nodes__INode_t, SWIG_POINTER_NO_NULL | 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_IInterpolation_GetValue__SWIG_1(self, argc, argv);
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_std__shared_ptrT_interpolation__IInterpolation_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_IInterpolation_GetValue__SWIG_0(self, argc, argv);
          }
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'IInterpolation_GetValue'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    interpolation::IInterpolation::GetValue(interpolation::Scalar,interpolation::Scalar,interpolation::Scalar) const\n"
    "    interpolation::IInterpolation::GetValue(interpolation::INodePtr) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_IInterpolation_SetNodes(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  interpolation::IInterpolation *arg1 = (interpolation::IInterpolation *) 0 ;
  interpolation::Nodes *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< interpolation::IInterpolation > tempshared1 ;
  std::shared_ptr< interpolation::IInterpolation > *smartarg1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "IInterpolation_SetNodes", 2, 2, swig_obj)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_interpolation__IInterpolation_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IInterpolation_SetNodes" "', argument " "1"" of type '" "interpolation::IInterpolation *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  interpolation::IInterpolation > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  interpolation::IInterpolation > * >(argp1);
      arg1 = const_cast< interpolation::IInterpolation * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  interpolation::IInterpolation > * >(argp1);
      arg1 = const_cast< interpolation::IInterpolation * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_std__vectorT_std__shared_ptrT_nodes__INode_t_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IInterpolation_SetNodes" "', argument " "2"" of type '" "interpolation::Nodes const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "IInterpolation_SetNodes" "', argument " "2"" of type '" "interpolation::Nodes const &""'"); 
  }
  arg2 = reinterpret_cast< interpolation::Nodes * >(argp2);
  (arg1)->SetNodes((interpolation::Nodes const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IInterpolation_SetBasis(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  interpolation::IInterpolation *arg1 = (interpolation::IInterpolation *) 0 ;
  interpolation::IBasisPtr arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< interpolation::IInterpolation > tempshared1 ;
  std::shared_ptr< interpolation::IInterpolation > *smartarg1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "IInterpolation_SetBasis", 2, 2, swig_obj)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_interpolation__IInterpolation_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IInterpolation_SetBasis" "', argument " "1"" of type '" "interpolation::IInterpolation *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  interpolation::IInterpolation > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  interpolation::IInterpolation > * >(argp1);
      arg1 = const_cast< interpolation::IInterpolation * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  interpolation::IInterpolation > * >(argp1);
      arg1 = const_cast< interpolation::IInterpolation * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    int newmem = 0;
    res2 = SWIG_ConvertPtrAndOwn(swig_obj[1], &argp2, SWIGTYPE_p_std__shared_ptrT_basis__IBasis_t,  0 , &newmem);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IInterpolation_SetBasis" "', argument " "2"" of type '" "interpolation::IBasisPtr""'");
    }
    if (argp2) arg2 = *(reinterpret_cast< interpolation::IBasisPtr * >(argp2));
    if (newmem & SWIG_CAST_NEW_MEMORY) delete reinterpret_cast< interpolation::IBasisPtr * >(argp2);
  }
  (arg1)->SetBasis(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *IInterpolation_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_std__shared_ptrT_interpolation__IInterpolation_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_CreateInterpolationFixed(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  interpolation::InterpolationFixedPtr result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "CreateInterpolationFixed", 0, 0, 0)) SWIG_fail;
  result = interpolation::CreateInterpolationFixed();
  {
    std::shared_ptr<  interpolation::InterpolationFixed > *smartresult = result ? new std::shared_ptr<  interpolation::InterpolationFixed >(result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_std__shared_ptrT_interpolation__InterpolationFixed_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_InterpolationFixed_Create(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  interpolation::InterpolationFixedPtr result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "InterpolationFixed_Create", 0, 0, 0)) SWIG_fail;
  result = interpolation::InterpolationFixed::Create();
  {
    std::shared_ptr<  interpolation::InterpolationFixed > *smartresult = result ? new std::shared_ptr<  interpolation::InterpolationFixed >(result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_std__shared_ptrT_interpolation__InterpolationFixed_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_InterpolationFixed_GetPtr__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  interpolation::InterpolationFixed *arg1 = (interpolation::InterpolationFixed *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< interpolation::InterpolationFixed > tempshared1 ;
  std::shared_ptr< interpolation::InterpolationFixed > *smartarg1 = 0 ;
  interpolation::InterpolationFixedPtr result;
  
  (void)self;
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_interpolation__InterpolationFixed_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InterpolationFixed_GetPtr" "', argument " "1"" of type '" "interpolation::InterpolationFixed *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  interpolation::InterpolationFixed > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  interpolation::InterpolationFixed > * >(argp1);
      arg1 = const_cast< interpolation::InterpolationFixed * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  interpolation::InterpolationFixed > * >(argp1);
      arg1 = const_cast< interpolation::InterpolationFixed * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = (arg1)->GetPtr();
  {
    std::shared_ptr<  interpolation::InterpolationFixed > *smartresult = result ? new std::shared_ptr<  interpolation::InterpolationFixed >(result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_std__shared_ptrT_interpolation__InterpolationFixed_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_InterpolationFixed_GetPtr__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  interpolation::InterpolationFixed *arg1 = (interpolation::InterpolationFixed *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< interpolation::InterpolationFixed const > tempshared1 ;
  std::shared_ptr< interpolation::InterpolationFixed const > *smartarg1 = 0 ;
  interpolation::ConstInterpolationFixedPtr result;
  
  (void)self;
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_interpolation__InterpolationFixed_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InterpolationFixed_GetPtr" "', argument " "1"" of type '" "interpolation::InterpolationFixed const *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const interpolation::InterpolationFixed > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const interpolation::InterpolationFixed > * >(argp1);
      arg1 = const_cast< interpolation::InterpolationFixed * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const interpolation::InterpolationFixed > * >(argp1);
      arg1 = const_cast< interpolation::InterpolationFixed * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = ((interpolation::InterpolationFixed const *)arg1)->GetPtr();
  {
    std::shared_ptr< const interpolation::InterpolationFixed > *smartresult = result ? new std::shared_ptr< const interpolation::InterpolationFixed >(result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_std__shared_ptrT_interpolation__InterpolationFixed_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_InterpolationFixed_GetPtr(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "InterpolationFixed_GetPtr", 0, 1, argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    int _v = 0;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_std__shared_ptrT_interpolation__InterpolationFixed_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_InterpolationFixed_GetPtr__SWIG_0(self, argc, argv);
    }
  }
  if (argc == 1) {
    int _v = 0;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_std__shared_ptrT_interpolation__InterpolationFixed_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_InterpolationFixed_GetPtr__SWIG_1(self, argc, argv);
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'InterpolationFixed_GetPtr'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    interpolation::InterpolationFixed::GetPtr()\n"
    "    interpolation::InterpolationFixed::GetPtr() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_InterpolationFixed(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  interpolation::InterpolationFixed *arg1 = (interpolation::InterpolationFixed *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< interpolation::InterpolationFixed > tempshared1 ;
  std::shared_ptr< interpolation::InterpolationFixed > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_interpolation__InterpolationFixed_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_InterpolationFixed" "', argument " "1"" of type '" "interpolation::InterpolationFixed *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  interpolation::InterpolationFixed > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  interpolation::InterpolationFixed > * >(argp1);
      arg1 = const_cast< interpolation::InterpolationFixed * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  interpolation::InterpolationFixed > * >(argp1);
      arg1 = const_cast< interpolation::InterpolationFixed * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  (void)arg1; delete smartarg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_InterpolationFixed_GetType(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  interpolation::InterpolationFixed *arg1 = (interpolation::InterpolationFixed *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< interpolation::InterpolationFixed const > tempshared1 ;
  std::shared_ptr< interpolation::InterpolationFixed const > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  interpolation::Type result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_interpolation__InterpolationFixed_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InterpolationFixed_GetType" "', argument " "1"" of type '" "interpolation::InterpolationFixed const *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const interpolation::InterpolationFixed > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const interpolation::InterpolationFixed > * >(argp1);
      arg1 = const_cast< interpolation::InterpolationFixed * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const interpolation::InterpolationFixed > * >(argp1);
      arg1 = const_cast< interpolation::InterpolationFixed * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = ((interpolation::InterpolationFixed const *)arg1)->GetType();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_InterpolationFixed_GetValue__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  interpolation::InterpolationFixed *arg1 = (interpolation::InterpolationFixed *) 0 ;
  interpolation::Scalar arg2 ;
  interpolation::Scalar arg3 ;
  interpolation::Scalar arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< interpolation::InterpolationFixed const > tempshared1 ;
  std::shared_ptr< interpolation::InterpolationFixed const > *smartarg1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  interpolation::Matrix result;
  
  (void)self;
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_interpolation__InterpolationFixed_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InterpolationFixed_GetValue" "', argument " "1"" of type '" "interpolation::InterpolationFixed const *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const interpolation::InterpolationFixed > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const interpolation::InterpolationFixed > * >(argp1);
      arg1 = const_cast< interpolation::InterpolationFixed * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const interpolation::InterpolationFixed > * >(argp1);
      arg1 = const_cast< interpolation::InterpolationFixed * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "InterpolationFixed_GetValue" "', argument " "2"" of type '" "interpolation::Scalar""'");
  } 
  arg2 = static_cast< interpolation::Scalar >(val2);
  ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "InterpolationFixed_GetValue" "', argument " "3"" of type '" "interpolation::Scalar""'");
  } 
  arg3 = static_cast< interpolation::Scalar >(val3);
  ecode4 = SWIG_AsVal_double(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "InterpolationFixed_GetValue" "', argument " "4"" of type '" "interpolation::Scalar""'");
  } 
  arg4 = static_cast< interpolation::Scalar >(val4);
  result = ((interpolation::InterpolationFixed const *)arg1)->GetValue(arg2,arg3,arg4);
  resultobj = SWIG_NewPointerObj((new interpolation::Matrix(result)), SWIGTYPE_p_eilig__Matrix, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_InterpolationFixed_GetValue__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  interpolation::InterpolationFixed *arg1 = (interpolation::InterpolationFixed *) 0 ;
  interpolation::INodePtr arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< interpolation::InterpolationFixed const > tempshared1 ;
  std::shared_ptr< interpolation::InterpolationFixed const > *smartarg1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_interpolation__InterpolationFixed_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InterpolationFixed_GetValue" "', argument " "1"" of type '" "interpolation::InterpolationFixed const *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const interpolation::InterpolationFixed > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const interpolation::InterpolationFixed > * >(argp1);
      arg1 = const_cast< interpolation::InterpolationFixed * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const interpolation::InterpolationFixed > * >(argp1);
      arg1 = const_cast< interpolation::InterpolationFixed * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_std__shared_ptrT_nodes__INode_t,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "InterpolationFixed_GetValue" "', argument " "2"" of type '" "interpolation::INodePtr""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "InterpolationFixed_GetValue" "', argument " "2"" of type '" "interpolation::INodePtr""'");
    } else {
      interpolation::INodePtr * temp = reinterpret_cast< interpolation::INodePtr * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  ((interpolation::InterpolationFixed const *)arg1)->GetValue(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_InterpolationFixed_GetValue(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "InterpolationFixed_GetValue", 0, 4, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_std__shared_ptrT_interpolation__InterpolationFixed_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_std__shared_ptrT_nodes__INode_t, SWIG_POINTER_NO_NULL | 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_InterpolationFixed_GetValue__SWIG_1(self, argc, argv);
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_std__shared_ptrT_interpolation__InterpolationFixed_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_InterpolationFixed_GetValue__SWIG_0(self, argc, argv);
          }
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'InterpolationFixed_GetValue'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    interpolation::InterpolationFixed::GetValue(interpolation::Scalar,interpolation::Scalar,interpolation::Scalar) const\n"
    "    interpolation::InterpolationFixed::GetValue(interpolation::INodePtr) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_InterpolationFixed_SetNodes(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  interpolation::InterpolationFixed *arg1 = (interpolation::InterpolationFixed *) 0 ;
  interpolation::Nodes *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< interpolation::InterpolationFixed > tempshared1 ;
  std::shared_ptr< interpolation::InterpolationFixed > *smartarg1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "InterpolationFixed_SetNodes", 2, 2, swig_obj)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_interpolation__InterpolationFixed_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InterpolationFixed_SetNodes" "', argument " "1"" of type '" "interpolation::InterpolationFixed *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  interpolation::InterpolationFixed > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  interpolation::InterpolationFixed > * >(argp1);
      arg1 = const_cast< interpolation::InterpolationFixed * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  interpolation::InterpolationFixed > * >(argp1);
      arg1 = const_cast< interpolation::InterpolationFixed * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_std__vectorT_std__shared_ptrT_nodes__INode_t_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "InterpolationFixed_SetNodes" "', argument " "2"" of type '" "interpolation::Nodes const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "InterpolationFixed_SetNodes" "', argument " "2"" of type '" "interpolation::Nodes const &""'"); 
  }
  arg2 = reinterpret_cast< interpolation::Nodes * >(argp2);
  (arg1)->SetNodes((interpolation::Nodes const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_InterpolationFixed_SetBasis(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  interpolation::InterpolationFixed *arg1 = (interpolation::InterpolationFixed *) 0 ;
  interpolation::IBasisPtr arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< interpolation::InterpolationFixed > tempshared1 ;
  std::shared_ptr< interpolation::InterpolationFixed > *smartarg1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "InterpolationFixed_SetBasis", 2, 2, swig_obj)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_interpolation__InterpolationFixed_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InterpolationFixed_SetBasis" "', argument " "1"" of type '" "interpolation::InterpolationFixed *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  interpolation::InterpolationFixed > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  interpolation::InterpolationFixed > * >(argp1);
      arg1 = const_cast< interpolation::InterpolationFixed * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  interpolation::InterpolationFixed > * >(argp1);
      arg1 = const_cast< interpolation::InterpolationFixed * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    int newmem = 0;
    res2 = SWIG_ConvertPtrAndOwn(swig_obj[1], &argp2, SWIGTYPE_p_std__shared_ptrT_basis__IBasis_t,  0 , &newmem);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "InterpolationFixed_SetBasis" "', argument " "2"" of type '" "interpolation::IBasisPtr""'");
    }
    if (argp2) arg2 = *(reinterpret_cast< interpolation::IBasisPtr * >(argp2));
    if (newmem & SWIG_CAST_NEW_MEMORY) delete reinterpret_cast< interpolation::IBasisPtr * >(argp2);
  }
  (arg1)->SetBasis(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_InterpolationFixed_SetNodeIndex(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  interpolation::InterpolationFixed *arg1 = (interpolation::InterpolationFixed *) 0 ;
  interpolation::Index arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< interpolation::InterpolationFixed > tempshared1 ;
  std::shared_ptr< interpolation::InterpolationFixed > *smartarg1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "InterpolationFixed_SetNodeIndex", 2, 2, swig_obj)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_interpolation__InterpolationFixed_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InterpolationFixed_SetNodeIndex" "', argument " "1"" of type '" "interpolation::InterpolationFixed *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  interpolation::InterpolationFixed > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  interpolation::InterpolationFixed > * >(argp1);
      arg1 = const_cast< interpolation::InterpolationFixed * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  interpolation::InterpolationFixed > * >(argp1);
      arg1 = const_cast< interpolation::InterpolationFixed * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "InterpolationFixed_SetNodeIndex" "', argument " "2"" of type '" "interpolation::Index""'");
  } 
  arg2 = static_cast< interpolation::Index >(val2);
  (arg1)->SetNodeIndex(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *InterpolationFixed_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_std__shared_ptrT_interpolation__InterpolationFixed_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_CreateInterpolationIDW(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  interpolation::InterpolationIDWPtr result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "CreateInterpolationIDW", 0, 0, 0)) SWIG_fail;
  result = interpolation::CreateInterpolationIDW();
  {
    std::shared_ptr<  interpolation::InterpolationIDW > *smartresult = result ? new std::shared_ptr<  interpolation::InterpolationIDW >(result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_std__shared_ptrT_interpolation__InterpolationIDW_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_InterpolationIDW(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  interpolation::InterpolationIDW *arg1 = (interpolation::InterpolationIDW *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< interpolation::InterpolationIDW > tempshared1 ;
  std::shared_ptr< interpolation::InterpolationIDW > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_interpolation__InterpolationIDW_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_InterpolationIDW" "', argument " "1"" of type '" "interpolation::InterpolationIDW *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  interpolation::InterpolationIDW > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  interpolation::InterpolationIDW > * >(argp1);
      arg1 = const_cast< interpolation::InterpolationIDW * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  interpolation::InterpolationIDW > * >(argp1);
      arg1 = const_cast< interpolation::InterpolationIDW * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  (void)arg1; delete smartarg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_InterpolationIDW_Create(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  interpolation::InterpolationIDWPtr result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "InterpolationIDW_Create", 0, 0, 0)) SWIG_fail;
  result = interpolation::InterpolationIDW::Create();
  {
    std::shared_ptr<  interpolation::InterpolationIDW > *smartresult = result ? new std::shared_ptr<  interpolation::InterpolationIDW >(result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_std__shared_ptrT_interpolation__InterpolationIDW_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_InterpolationIDW_GetPtr__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  interpolation::InterpolationIDW *arg1 = (interpolation::InterpolationIDW *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< interpolation::InterpolationIDW > tempshared1 ;
  std::shared_ptr< interpolation::InterpolationIDW > *smartarg1 = 0 ;
  interpolation::InterpolationIDWPtr result;
  
  (void)self;
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_interpolation__InterpolationIDW_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InterpolationIDW_GetPtr" "', argument " "1"" of type '" "interpolation::InterpolationIDW *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  interpolation::InterpolationIDW > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  interpolation::InterpolationIDW > * >(argp1);
      arg1 = const_cast< interpolation::InterpolationIDW * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  interpolation::InterpolationIDW > * >(argp1);
      arg1 = const_cast< interpolation::InterpolationIDW * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = (arg1)->GetPtr();
  {
    std::shared_ptr<  interpolation::InterpolationIDW > *smartresult = result ? new std::shared_ptr<  interpolation::InterpolationIDW >(result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_std__shared_ptrT_interpolation__InterpolationIDW_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_InterpolationIDW_GetPtr__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  interpolation::InterpolationIDW *arg1 = (interpolation::InterpolationIDW *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< interpolation::InterpolationIDW const > tempshared1 ;
  std::shared_ptr< interpolation::InterpolationIDW const > *smartarg1 = 0 ;
  interpolation::ConstInterpolationIDWPtr result;
  
  (void)self;
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_interpolation__InterpolationIDW_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InterpolationIDW_GetPtr" "', argument " "1"" of type '" "interpolation::InterpolationIDW const *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const interpolation::InterpolationIDW > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const interpolation::InterpolationIDW > * >(argp1);
      arg1 = const_cast< interpolation::InterpolationIDW * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const interpolation::InterpolationIDW > * >(argp1);
      arg1 = const_cast< interpolation::InterpolationIDW * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = ((interpolation::InterpolationIDW const *)arg1)->GetPtr();
  {
    std::shared_ptr< const interpolation::InterpolationIDW > *smartresult = result ? new std::shared_ptr< const interpolation::InterpolationIDW >(result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_std__shared_ptrT_interpolation__InterpolationIDW_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_InterpolationIDW_GetPtr(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "InterpolationIDW_GetPtr", 0, 1, argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    int _v = 0;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_std__shared_ptrT_interpolation__InterpolationIDW_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_InterpolationIDW_GetPtr__SWIG_0(self, argc, argv);
    }
  }
  if (argc == 1) {
    int _v = 0;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_std__shared_ptrT_interpolation__InterpolationIDW_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_InterpolationIDW_GetPtr__SWIG_1(self, argc, argv);
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'InterpolationIDW_GetPtr'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    interpolation::InterpolationIDW::GetPtr()\n"
    "    interpolation::InterpolationIDW::GetPtr() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_InterpolationIDW_GetType(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  interpolation::InterpolationIDW *arg1 = (interpolation::InterpolationIDW *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< interpolation::InterpolationIDW const > tempshared1 ;
  std::shared_ptr< interpolation::InterpolationIDW const > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  interpolation::Type result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_interpolation__InterpolationIDW_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InterpolationIDW_GetType" "', argument " "1"" of type '" "interpolation::InterpolationIDW const *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const interpolation::InterpolationIDW > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const interpolation::InterpolationIDW > * >(argp1);
      arg1 = const_cast< interpolation::InterpolationIDW * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const interpolation::InterpolationIDW > * >(argp1);
      arg1 = const_cast< interpolation::InterpolationIDW * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = ((interpolation::InterpolationIDW const *)arg1)->GetType();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_InterpolationIDW_GetValue__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  interpolation::InterpolationIDW *arg1 = (interpolation::InterpolationIDW *) 0 ;
  interpolation::Scalar arg2 ;
  interpolation::Scalar arg3 ;
  interpolation::Scalar arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< interpolation::InterpolationIDW const > tempshared1 ;
  std::shared_ptr< interpolation::InterpolationIDW const > *smartarg1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  interpolation::Matrix result;
  
  (void)self;
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_interpolation__InterpolationIDW_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InterpolationIDW_GetValue" "', argument " "1"" of type '" "interpolation::InterpolationIDW const *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const interpolation::InterpolationIDW > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const interpolation::InterpolationIDW > * >(argp1);
      arg1 = const_cast< interpolation::InterpolationIDW * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const interpolation::InterpolationIDW > * >(argp1);
      arg1 = const_cast< interpolation::InterpolationIDW * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "InterpolationIDW_GetValue" "', argument " "2"" of type '" "interpolation::Scalar""'");
  } 
  arg2 = static_cast< interpolation::Scalar >(val2);
  ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "InterpolationIDW_GetValue" "', argument " "3"" of type '" "interpolation::Scalar""'");
  } 
  arg3 = static_cast< interpolation::Scalar >(val3);
  ecode4 = SWIG_AsVal_double(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "InterpolationIDW_GetValue" "', argument " "4"" of type '" "interpolation::Scalar""'");
  } 
  arg4 = static_cast< interpolation::Scalar >(val4);
  result = ((interpolation::InterpolationIDW const *)arg1)->GetValue(arg2,arg3,arg4);
  resultobj = SWIG_NewPointerObj((new interpolation::Matrix(result)), SWIGTYPE_p_eilig__Matrix, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_InterpolationIDW_GetValue__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  interpolation::InterpolationIDW *arg1 = (interpolation::InterpolationIDW *) 0 ;
  interpolation::INodePtr arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< interpolation::InterpolationIDW const > tempshared1 ;
  std::shared_ptr< interpolation::InterpolationIDW const > *smartarg1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_interpolation__InterpolationIDW_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InterpolationIDW_GetValue" "', argument " "1"" of type '" "interpolation::InterpolationIDW const *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const interpolation::InterpolationIDW > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const interpolation::InterpolationIDW > * >(argp1);
      arg1 = const_cast< interpolation::InterpolationIDW * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const interpolation::InterpolationIDW > * >(argp1);
      arg1 = const_cast< interpolation::InterpolationIDW * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_std__shared_ptrT_nodes__INode_t,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "InterpolationIDW_GetValue" "', argument " "2"" of type '" "interpolation::INodePtr""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "InterpolationIDW_GetValue" "', argument " "2"" of type '" "interpolation::INodePtr""'");
    } else {
      interpolation::INodePtr * temp = reinterpret_cast< interpolation::INodePtr * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  ((interpolation::InterpolationIDW const *)arg1)->GetValue(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_InterpolationIDW_GetValue(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "InterpolationIDW_GetValue", 0, 4, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_std__shared_ptrT_interpolation__InterpolationIDW_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_std__shared_ptrT_nodes__INode_t, SWIG_POINTER_NO_NULL | 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_InterpolationIDW_GetValue__SWIG_1(self, argc, argv);
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_std__shared_ptrT_interpolation__InterpolationIDW_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_InterpolationIDW_GetValue__SWIG_0(self, argc, argv);
          }
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'InterpolationIDW_GetValue'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    interpolation::InterpolationIDW::GetValue(interpolation::Scalar,interpolation::Scalar,interpolation::Scalar) const\n"
    "    interpolation::InterpolationIDW::GetValue(interpolation::INodePtr) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_InterpolationIDW_SetNodes(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  interpolation::InterpolationIDW *arg1 = (interpolation::InterpolationIDW *) 0 ;
  interpolation::Nodes *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< interpolation::InterpolationIDW > tempshared1 ;
  std::shared_ptr< interpolation::InterpolationIDW > *smartarg1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "InterpolationIDW_SetNodes", 2, 2, swig_obj)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_interpolation__InterpolationIDW_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InterpolationIDW_SetNodes" "', argument " "1"" of type '" "interpolation::InterpolationIDW *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  interpolation::InterpolationIDW > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  interpolation::InterpolationIDW > * >(argp1);
      arg1 = const_cast< interpolation::InterpolationIDW * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  interpolation::InterpolationIDW > * >(argp1);
      arg1 = const_cast< interpolation::InterpolationIDW * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_std__vectorT_std__shared_ptrT_nodes__INode_t_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "InterpolationIDW_SetNodes" "', argument " "2"" of type '" "interpolation::Nodes const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "InterpolationIDW_SetNodes" "', argument " "2"" of type '" "interpolation::Nodes const &""'"); 
  }
  arg2 = reinterpret_cast< interpolation::Nodes * >(argp2);
  (arg1)->SetNodes((interpolation::Nodes const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_InterpolationIDW_SetBasis(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  interpolation::InterpolationIDW *arg1 = (interpolation::InterpolationIDW *) 0 ;
  interpolation::IBasisPtr arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< interpolation::InterpolationIDW > tempshared1 ;
  std::shared_ptr< interpolation::InterpolationIDW > *smartarg1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "InterpolationIDW_SetBasis", 2, 2, swig_obj)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_interpolation__InterpolationIDW_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InterpolationIDW_SetBasis" "', argument " "1"" of type '" "interpolation::InterpolationIDW *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  interpolation::InterpolationIDW > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  interpolation::InterpolationIDW > * >(argp1);
      arg1 = const_cast< interpolation::InterpolationIDW * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  interpolation::InterpolationIDW > * >(argp1);
      arg1 = const_cast< interpolation::InterpolationIDW * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    int newmem = 0;
    res2 = SWIG_ConvertPtrAndOwn(swig_obj[1], &argp2, SWIGTYPE_p_std__shared_ptrT_basis__IBasis_t,  0 , &newmem);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "InterpolationIDW_SetBasis" "', argument " "2"" of type '" "interpolation::IBasisPtr""'");
    }
    if (argp2) arg2 = *(reinterpret_cast< interpolation::IBasisPtr * >(argp2));
    if (newmem & SWIG_CAST_NEW_MEMORY) delete reinterpret_cast< interpolation::IBasisPtr * >(argp2);
  }
  (arg1)->SetBasis(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_InterpolationIDW_SetShape(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  interpolation::InterpolationIDW *arg1 = (interpolation::InterpolationIDW *) 0 ;
  interpolation::Scalar arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< interpolation::InterpolationIDW > tempshared1 ;
  std::shared_ptr< interpolation::InterpolationIDW > *smartarg1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "InterpolationIDW_SetShape", 2, 2, swig_obj)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_interpolation__InterpolationIDW_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InterpolationIDW_SetShape" "', argument " "1"" of type '" "interpolation::InterpolationIDW *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  interpolation::InterpolationIDW > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  interpolation::InterpolationIDW > * >(argp1);
      arg1 = const_cast< interpolation::InterpolationIDW * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  interpolation::InterpolationIDW > * >(argp1);
      arg1 = const_cast< interpolation::InterpolationIDW * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "InterpolationIDW_SetShape" "', argument " "2"" of type '" "interpolation::Scalar""'");
  } 
  arg2 = static_cast< interpolation::Scalar >(val2);
  (arg1)->SetShape(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_InterpolationIDW_SetNumberNodes(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  interpolation::InterpolationIDW *arg1 = (interpolation::InterpolationIDW *) 0 ;
  interpolation::NumberNodes arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< interpolation::InterpolationIDW > tempshared1 ;
  std::shared_ptr< interpolation::InterpolationIDW > *smartarg1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "InterpolationIDW_SetNumberNodes", 2, 2, swig_obj)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_interpolation__InterpolationIDW_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InterpolationIDW_SetNumberNodes" "', argument " "1"" of type '" "interpolation::InterpolationIDW *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  interpolation::InterpolationIDW > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  interpolation::InterpolationIDW > * >(argp1);
      arg1 = const_cast< interpolation::InterpolationIDW * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  interpolation::InterpolationIDW > * >(argp1);
      arg1 = const_cast< interpolation::InterpolationIDW * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "InterpolationIDW_SetNumberNodes" "', argument " "2"" of type '" "interpolation::NumberNodes""'");
  } 
  arg2 = static_cast< interpolation::NumberNodes >(val2);
  (arg1)->SetNumberNodes(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *InterpolationIDW_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_std__shared_ptrT_interpolation__InterpolationIDW_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_CreateInterpolationNN(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  interpolation::InterpolationNNPtr result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "CreateInterpolationNN", 0, 0, 0)) SWIG_fail;
  result = interpolation::CreateInterpolationNN();
  {
    std::shared_ptr<  interpolation::InterpolationNN > *smartresult = result ? new std::shared_ptr<  interpolation::InterpolationNN >(result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_std__shared_ptrT_interpolation__InterpolationNN_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_InterpolationNN_Create(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  interpolation::InterpolationNNPtr result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "InterpolationNN_Create", 0, 0, 0)) SWIG_fail;
  result = interpolation::InterpolationNN::Create();
  {
    std::shared_ptr<  interpolation::InterpolationNN > *smartresult = result ? new std::shared_ptr<  interpolation::InterpolationNN >(result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_std__shared_ptrT_interpolation__InterpolationNN_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_InterpolationNN_GetPtr__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  interpolation::InterpolationNN *arg1 = (interpolation::InterpolationNN *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< interpolation::InterpolationNN > tempshared1 ;
  std::shared_ptr< interpolation::InterpolationNN > *smartarg1 = 0 ;
  interpolation::InterpolationNNPtr result;
  
  (void)self;
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_interpolation__InterpolationNN_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InterpolationNN_GetPtr" "', argument " "1"" of type '" "interpolation::InterpolationNN *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  interpolation::InterpolationNN > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  interpolation::InterpolationNN > * >(argp1);
      arg1 = const_cast< interpolation::InterpolationNN * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  interpolation::InterpolationNN > * >(argp1);
      arg1 = const_cast< interpolation::InterpolationNN * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = (arg1)->GetPtr();
  {
    std::shared_ptr<  interpolation::InterpolationNN > *smartresult = result ? new std::shared_ptr<  interpolation::InterpolationNN >(result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_std__shared_ptrT_interpolation__InterpolationNN_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_InterpolationNN_GetPtr__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  interpolation::InterpolationNN *arg1 = (interpolation::InterpolationNN *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< interpolation::InterpolationNN const > tempshared1 ;
  std::shared_ptr< interpolation::InterpolationNN const > *smartarg1 = 0 ;
  interpolation::ConstInterpolationNNPtr result;
  
  (void)self;
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_interpolation__InterpolationNN_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InterpolationNN_GetPtr" "', argument " "1"" of type '" "interpolation::InterpolationNN const *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const interpolation::InterpolationNN > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const interpolation::InterpolationNN > * >(argp1);
      arg1 = const_cast< interpolation::InterpolationNN * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const interpolation::InterpolationNN > * >(argp1);
      arg1 = const_cast< interpolation::InterpolationNN * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = ((interpolation::InterpolationNN const *)arg1)->GetPtr();
  {
    std::shared_ptr< const interpolation::InterpolationNN > *smartresult = result ? new std::shared_ptr< const interpolation::InterpolationNN >(result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_std__shared_ptrT_interpolation__InterpolationNN_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_InterpolationNN_GetPtr(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "InterpolationNN_GetPtr", 0, 1, argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    int _v = 0;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_std__shared_ptrT_interpolation__InterpolationNN_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_InterpolationNN_GetPtr__SWIG_0(self, argc, argv);
    }
  }
  if (argc == 1) {
    int _v = 0;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_std__shared_ptrT_interpolation__InterpolationNN_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_InterpolationNN_GetPtr__SWIG_1(self, argc, argv);
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'InterpolationNN_GetPtr'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    interpolation::InterpolationNN::GetPtr()\n"
    "    interpolation::InterpolationNN::GetPtr() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_InterpolationNN(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  interpolation::InterpolationNN *arg1 = (interpolation::InterpolationNN *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< interpolation::InterpolationNN > tempshared1 ;
  std::shared_ptr< interpolation::InterpolationNN > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_interpolation__InterpolationNN_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_InterpolationNN" "', argument " "1"" of type '" "interpolation::InterpolationNN *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  interpolation::InterpolationNN > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  interpolation::InterpolationNN > * >(argp1);
      arg1 = const_cast< interpolation::InterpolationNN * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  interpolation::InterpolationNN > * >(argp1);
      arg1 = const_cast< interpolation::InterpolationNN * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  (void)arg1; delete smartarg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_InterpolationNN_GetType(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  interpolation::InterpolationNN *arg1 = (interpolation::InterpolationNN *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< interpolation::InterpolationNN const > tempshared1 ;
  std::shared_ptr< interpolation::InterpolationNN const > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  interpolation::Type result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_interpolation__InterpolationNN_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InterpolationNN_GetType" "', argument " "1"" of type '" "interpolation::InterpolationNN const *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const interpolation::InterpolationNN > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const interpolation::InterpolationNN > * >(argp1);
      arg1 = const_cast< interpolation::InterpolationNN * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const interpolation::InterpolationNN > * >(argp1);
      arg1 = const_cast< interpolation::InterpolationNN * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = ((interpolation::InterpolationNN const *)arg1)->GetType();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_InterpolationNN_GetValue__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  interpolation::InterpolationNN *arg1 = (interpolation::InterpolationNN *) 0 ;
  interpolation::Scalar arg2 ;
  interpolation::Scalar arg3 ;
  interpolation::Scalar arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< interpolation::InterpolationNN const > tempshared1 ;
  std::shared_ptr< interpolation::InterpolationNN const > *smartarg1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  interpolation::Matrix result;
  
  (void)self;
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_interpolation__InterpolationNN_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InterpolationNN_GetValue" "', argument " "1"" of type '" "interpolation::InterpolationNN const *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const interpolation::InterpolationNN > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const interpolation::InterpolationNN > * >(argp1);
      arg1 = const_cast< interpolation::InterpolationNN * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const interpolation::InterpolationNN > * >(argp1);
      arg1 = const_cast< interpolation::InterpolationNN * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "InterpolationNN_GetValue" "', argument " "2"" of type '" "interpolation::Scalar""'");
  } 
  arg2 = static_cast< interpolation::Scalar >(val2);
  ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "InterpolationNN_GetValue" "', argument " "3"" of type '" "interpolation::Scalar""'");
  } 
  arg3 = static_cast< interpolation::Scalar >(val3);
  ecode4 = SWIG_AsVal_double(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "InterpolationNN_GetValue" "', argument " "4"" of type '" "interpolation::Scalar""'");
  } 
  arg4 = static_cast< interpolation::Scalar >(val4);
  result = ((interpolation::InterpolationNN const *)arg1)->GetValue(arg2,arg3,arg4);
  resultobj = SWIG_NewPointerObj((new interpolation::Matrix(result)), SWIGTYPE_p_eilig__Matrix, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_InterpolationNN_GetValue__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  interpolation::InterpolationNN *arg1 = (interpolation::InterpolationNN *) 0 ;
  interpolation::INodePtr arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< interpolation::InterpolationNN const > tempshared1 ;
  std::shared_ptr< interpolation::InterpolationNN const > *smartarg1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_interpolation__InterpolationNN_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InterpolationNN_GetValue" "', argument " "1"" of type '" "interpolation::InterpolationNN const *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const interpolation::InterpolationNN > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const interpolation::InterpolationNN > * >(argp1);
      arg1 = const_cast< interpolation::InterpolationNN * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const interpolation::InterpolationNN > * >(argp1);
      arg1 = const_cast< interpolation::InterpolationNN * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_std__shared_ptrT_nodes__INode_t,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "InterpolationNN_GetValue" "', argument " "2"" of type '" "interpolation::INodePtr""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "InterpolationNN_GetValue" "', argument " "2"" of type '" "interpolation::INodePtr""'");
    } else {
      interpolation::INodePtr * temp = reinterpret_cast< interpolation::INodePtr * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  ((interpolation::InterpolationNN const *)arg1)->GetValue(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_InterpolationNN_GetValue(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "InterpolationNN_GetValue", 0, 4, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_std__shared_ptrT_interpolation__InterpolationNN_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_std__shared_ptrT_nodes__INode_t, SWIG_POINTER_NO_NULL | 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_InterpolationNN_GetValue__SWIG_1(self, argc, argv);
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_std__shared_ptrT_interpolation__InterpolationNN_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_InterpolationNN_GetValue__SWIG_0(self, argc, argv);
          }
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'InterpolationNN_GetValue'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    interpolation::InterpolationNN::GetValue(interpolation::Scalar,interpolation::Scalar,interpolation::Scalar) const\n"
    "    interpolation::InterpolationNN::GetValue(interpolation::INodePtr) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_InterpolationNN_SetNodes(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  interpolation::InterpolationNN *arg1 = (interpolation::InterpolationNN *) 0 ;
  interpolation::Nodes *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< interpolation::InterpolationNN > tempshared1 ;
  std::shared_ptr< interpolation::InterpolationNN > *smartarg1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "InterpolationNN_SetNodes", 2, 2, swig_obj)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_interpolation__InterpolationNN_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InterpolationNN_SetNodes" "', argument " "1"" of type '" "interpolation::InterpolationNN *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  interpolation::InterpolationNN > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  interpolation::InterpolationNN > * >(argp1);
      arg1 = const_cast< interpolation::InterpolationNN * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  interpolation::InterpolationNN > * >(argp1);
      arg1 = const_cast< interpolation::InterpolationNN * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_std__vectorT_std__shared_ptrT_nodes__INode_t_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "InterpolationNN_SetNodes" "', argument " "2"" of type '" "interpolation::Nodes const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "InterpolationNN_SetNodes" "', argument " "2"" of type '" "interpolation::Nodes const &""'"); 
  }
  arg2 = reinterpret_cast< interpolation::Nodes * >(argp2);
  (arg1)->SetNodes((interpolation::Nodes const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_InterpolationNN_SetBasis(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  interpolation::InterpolationNN *arg1 = (interpolation::InterpolationNN *) 0 ;
  interpolation::IBasisPtr arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< interpolation::InterpolationNN > tempshared1 ;
  std::shared_ptr< interpolation::InterpolationNN > *smartarg1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "InterpolationNN_SetBasis", 2, 2, swig_obj)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_interpolation__InterpolationNN_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InterpolationNN_SetBasis" "', argument " "1"" of type '" "interpolation::InterpolationNN *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  interpolation::InterpolationNN > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  interpolation::InterpolationNN > * >(argp1);
      arg1 = const_cast< interpolation::InterpolationNN * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  interpolation::InterpolationNN > * >(argp1);
      arg1 = const_cast< interpolation::InterpolationNN * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    int newmem = 0;
    res2 = SWIG_ConvertPtrAndOwn(swig_obj[1], &argp2, SWIGTYPE_p_std__shared_ptrT_basis__IBasis_t,  0 , &newmem);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "InterpolationNN_SetBasis" "', argument " "2"" of type '" "interpolation::IBasisPtr""'");
    }
    if (argp2) arg2 = *(reinterpret_cast< interpolation::IBasisPtr * >(argp2));
    if (newmem & SWIG_CAST_NEW_MEMORY) delete reinterpret_cast< interpolation::IBasisPtr * >(argp2);
  }
  (arg1)->SetBasis(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *InterpolationNN_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_std__shared_ptrT_interpolation__InterpolationNN_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN int Swig_var_interpolation_function_TPS_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable interpolation_function_TPS is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_interpolation_function_TPS_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_size_t(static_cast< size_t >(interpolation::interpolation_function_TPS));
  return pyobj;
}


SWIGINTERN int Swig_var_interpolation_function_MQB_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable interpolation_function_MQB is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_interpolation_function_MQB_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_size_t(static_cast< size_t >(interpolation::interpolation_function_MQB));
  return pyobj;
}


SWIGINTERN PyObject *_wrap_CreateInterpolationRBF(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  interpolation::InterpolationRBFPtr result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "CreateInterpolationRBF", 0, 0, 0)) SWIG_fail;
  result = interpolation::CreateInterpolationRBF();
  {
    std::shared_ptr<  interpolation::InterpolationRBF > *smartresult = result ? new std::shared_ptr<  interpolation::InterpolationRBF >(result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_std__shared_ptrT_interpolation__InterpolationRBF_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_InterpolationRBF(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  interpolation::InterpolationRBF *arg1 = (interpolation::InterpolationRBF *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< interpolation::InterpolationRBF > tempshared1 ;
  std::shared_ptr< interpolation::InterpolationRBF > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_interpolation__InterpolationRBF_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_InterpolationRBF" "', argument " "1"" of type '" "interpolation::InterpolationRBF *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  interpolation::InterpolationRBF > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  interpolation::InterpolationRBF > * >(argp1);
      arg1 = const_cast< interpolation::InterpolationRBF * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  interpolation::InterpolationRBF > * >(argp1);
      arg1 = const_cast< interpolation::InterpolationRBF * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  (void)arg1; delete smartarg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_InterpolationRBF_Create(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  interpolation::InterpolationRBFPtr result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "InterpolationRBF_Create", 0, 0, 0)) SWIG_fail;
  result = interpolation::InterpolationRBF::Create();
  {
    std::shared_ptr<  interpolation::InterpolationRBF > *smartresult = result ? new std::shared_ptr<  interpolation::InterpolationRBF >(result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_std__shared_ptrT_interpolation__InterpolationRBF_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_InterpolationRBF_GetPtr__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  interpolation::InterpolationRBF *arg1 = (interpolation::InterpolationRBF *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< interpolation::InterpolationRBF > tempshared1 ;
  std::shared_ptr< interpolation::InterpolationRBF > *smartarg1 = 0 ;
  interpolation::InterpolationRBFPtr result;
  
  (void)self;
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_interpolation__InterpolationRBF_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InterpolationRBF_GetPtr" "', argument " "1"" of type '" "interpolation::InterpolationRBF *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  interpolation::InterpolationRBF > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  interpolation::InterpolationRBF > * >(argp1);
      arg1 = const_cast< interpolation::InterpolationRBF * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  interpolation::InterpolationRBF > * >(argp1);
      arg1 = const_cast< interpolation::InterpolationRBF * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = (arg1)->GetPtr();
  {
    std::shared_ptr<  interpolation::InterpolationRBF > *smartresult = result ? new std::shared_ptr<  interpolation::InterpolationRBF >(result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_std__shared_ptrT_interpolation__InterpolationRBF_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_InterpolationRBF_GetPtr__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  interpolation::InterpolationRBF *arg1 = (interpolation::InterpolationRBF *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< interpolation::InterpolationRBF const > tempshared1 ;
  std::shared_ptr< interpolation::InterpolationRBF const > *smartarg1 = 0 ;
  interpolation::ConstInterpolationRBFPtr result;
  
  (void)self;
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_interpolation__InterpolationRBF_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InterpolationRBF_GetPtr" "', argument " "1"" of type '" "interpolation::InterpolationRBF const *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const interpolation::InterpolationRBF > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const interpolation::InterpolationRBF > * >(argp1);
      arg1 = const_cast< interpolation::InterpolationRBF * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const interpolation::InterpolationRBF > * >(argp1);
      arg1 = const_cast< interpolation::InterpolationRBF * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = ((interpolation::InterpolationRBF const *)arg1)->GetPtr();
  {
    std::shared_ptr< const interpolation::InterpolationRBF > *smartresult = result ? new std::shared_ptr< const interpolation::InterpolationRBF >(result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_std__shared_ptrT_interpolation__InterpolationRBF_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_InterpolationRBF_GetPtr(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "InterpolationRBF_GetPtr", 0, 1, argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    int _v = 0;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_std__shared_ptrT_interpolation__InterpolationRBF_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_InterpolationRBF_GetPtr__SWIG_0(self, argc, argv);
    }
  }
  if (argc == 1) {
    int _v = 0;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_std__shared_ptrT_interpolation__InterpolationRBF_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_InterpolationRBF_GetPtr__SWIG_1(self, argc, argv);
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'InterpolationRBF_GetPtr'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    interpolation::InterpolationRBF::GetPtr()\n"
    "    interpolation::InterpolationRBF::GetPtr() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_InterpolationRBF_GetType(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  interpolation::InterpolationRBF *arg1 = (interpolation::InterpolationRBF *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< interpolation::InterpolationRBF const > tempshared1 ;
  std::shared_ptr< interpolation::InterpolationRBF const > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  interpolation::Type result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_interpolation__InterpolationRBF_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InterpolationRBF_GetType" "', argument " "1"" of type '" "interpolation::InterpolationRBF const *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const interpolation::InterpolationRBF > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const interpolation::InterpolationRBF > * >(argp1);
      arg1 = const_cast< interpolation::InterpolationRBF * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const interpolation::InterpolationRBF > * >(argp1);
      arg1 = const_cast< interpolation::InterpolationRBF * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = ((interpolation::InterpolationRBF const *)arg1)->GetType();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_InterpolationRBF_GetValue__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  interpolation::InterpolationRBF *arg1 = (interpolation::InterpolationRBF *) 0 ;
  interpolation::Scalar arg2 ;
  interpolation::Scalar arg3 ;
  interpolation::Scalar arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< interpolation::InterpolationRBF const > tempshared1 ;
  std::shared_ptr< interpolation::InterpolationRBF const > *smartarg1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  interpolation::Matrix result;
  
  (void)self;
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_interpolation__InterpolationRBF_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InterpolationRBF_GetValue" "', argument " "1"" of type '" "interpolation::InterpolationRBF const *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const interpolation::InterpolationRBF > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const interpolation::InterpolationRBF > * >(argp1);
      arg1 = const_cast< interpolation::InterpolationRBF * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const interpolation::InterpolationRBF > * >(argp1);
      arg1 = const_cast< interpolation::InterpolationRBF * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "InterpolationRBF_GetValue" "', argument " "2"" of type '" "interpolation::Scalar""'");
  } 
  arg2 = static_cast< interpolation::Scalar >(val2);
  ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "InterpolationRBF_GetValue" "', argument " "3"" of type '" "interpolation::Scalar""'");
  } 
  arg3 = static_cast< interpolation::Scalar >(val3);
  ecode4 = SWIG_AsVal_double(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "InterpolationRBF_GetValue" "', argument " "4"" of type '" "interpolation::Scalar""'");
  } 
  arg4 = static_cast< interpolation::Scalar >(val4);
  result = ((interpolation::InterpolationRBF const *)arg1)->GetValue(arg2,arg3,arg4);
  resultobj = SWIG_NewPointerObj((new interpolation::Matrix(result)), SWIGTYPE_p_eilig__Matrix, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_InterpolationRBF_GetValue__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  interpolation::InterpolationRBF *arg1 = (interpolation::InterpolationRBF *) 0 ;
  interpolation::INodePtr arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< interpolation::InterpolationRBF const > tempshared1 ;
  std::shared_ptr< interpolation::InterpolationRBF const > *smartarg1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_interpolation__InterpolationRBF_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InterpolationRBF_GetValue" "', argument " "1"" of type '" "interpolation::InterpolationRBF const *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const interpolation::InterpolationRBF > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const interpolation::InterpolationRBF > * >(argp1);
      arg1 = const_cast< interpolation::InterpolationRBF * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const interpolation::InterpolationRBF > * >(argp1);
      arg1 = const_cast< interpolation::InterpolationRBF * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_std__shared_ptrT_nodes__INode_t,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "InterpolationRBF_GetValue" "', argument " "2"" of type '" "interpolation::INodePtr""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "InterpolationRBF_GetValue" "', argument " "2"" of type '" "interpolation::INodePtr""'");
    } else {
      interpolation::INodePtr * temp = reinterpret_cast< interpolation::INodePtr * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  ((interpolation::InterpolationRBF const *)arg1)->GetValue(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_InterpolationRBF_GetValue(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "InterpolationRBF_GetValue", 0, 4, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_std__shared_ptrT_interpolation__InterpolationRBF_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_std__shared_ptrT_nodes__INode_t, SWIG_POINTER_NO_NULL | 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_InterpolationRBF_GetValue__SWIG_1(self, argc, argv);
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_std__shared_ptrT_interpolation__InterpolationRBF_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_InterpolationRBF_GetValue__SWIG_0(self, argc, argv);
          }
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'InterpolationRBF_GetValue'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    interpolation::InterpolationRBF::GetValue(interpolation::Scalar,interpolation::Scalar,interpolation::Scalar) const\n"
    "    interpolation::InterpolationRBF::GetValue(interpolation::INodePtr) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_InterpolationRBF_SetNodes(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  interpolation::InterpolationRBF *arg1 = (interpolation::InterpolationRBF *) 0 ;
  interpolation::Nodes *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< interpolation::InterpolationRBF > tempshared1 ;
  std::shared_ptr< interpolation::InterpolationRBF > *smartarg1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "InterpolationRBF_SetNodes", 2, 2, swig_obj)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_interpolation__InterpolationRBF_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InterpolationRBF_SetNodes" "', argument " "1"" of type '" "interpolation::InterpolationRBF *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  interpolation::InterpolationRBF > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  interpolation::InterpolationRBF > * >(argp1);
      arg1 = const_cast< interpolation::InterpolationRBF * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  interpolation::InterpolationRBF > * >(argp1);
      arg1 = const_cast< interpolation::InterpolationRBF * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_std__vectorT_std__shared_ptrT_nodes__INode_t_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "InterpolationRBF_SetNodes" "', argument " "2"" of type '" "interpolation::Nodes const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "InterpolationRBF_SetNodes" "', argument " "2"" of type '" "interpolation::Nodes const &""'"); 
  }
  arg2 = reinterpret_cast< interpolation::Nodes * >(argp2);
  (arg1)->SetNodes((interpolation::Nodes const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_InterpolationRBF_SetBasis(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  interpolation::InterpolationRBF *arg1 = (interpolation::InterpolationRBF *) 0 ;
  interpolation::IBasisPtr arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< interpolation::InterpolationRBF > tempshared1 ;
  std::shared_ptr< interpolation::InterpolationRBF > *smartarg1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "InterpolationRBF_SetBasis", 2, 2, swig_obj)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_interpolation__InterpolationRBF_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InterpolationRBF_SetBasis" "', argument " "1"" of type '" "interpolation::InterpolationRBF *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  interpolation::InterpolationRBF > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  interpolation::InterpolationRBF > * >(argp1);
      arg1 = const_cast< interpolation::InterpolationRBF * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  interpolation::InterpolationRBF > * >(argp1);
      arg1 = const_cast< interpolation::InterpolationRBF * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    int newmem = 0;
    res2 = SWIG_ConvertPtrAndOwn(swig_obj[1], &argp2, SWIGTYPE_p_std__shared_ptrT_basis__IBasis_t,  0 , &newmem);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "InterpolationRBF_SetBasis" "', argument " "2"" of type '" "interpolation::IBasisPtr""'");
    }
    if (argp2) arg2 = *(reinterpret_cast< interpolation::IBasisPtr * >(argp2));
    if (newmem & SWIG_CAST_NEW_MEMORY) delete reinterpret_cast< interpolation::IBasisPtr * >(argp2);
  }
  (arg1)->SetBasis(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_InterpolationRBF_SetShape(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  interpolation::InterpolationRBF *arg1 = (interpolation::InterpolationRBF *) 0 ;
  interpolation::Scalar arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< interpolation::InterpolationRBF > tempshared1 ;
  std::shared_ptr< interpolation::InterpolationRBF > *smartarg1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "InterpolationRBF_SetShape", 2, 2, swig_obj)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_interpolation__InterpolationRBF_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InterpolationRBF_SetShape" "', argument " "1"" of type '" "interpolation::InterpolationRBF *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  interpolation::InterpolationRBF > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  interpolation::InterpolationRBF > * >(argp1);
      arg1 = const_cast< interpolation::InterpolationRBF * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  interpolation::InterpolationRBF > * >(argp1);
      arg1 = const_cast< interpolation::InterpolationRBF * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "InterpolationRBF_SetShape" "', argument " "2"" of type '" "interpolation::Scalar""'");
  } 
  arg2 = static_cast< interpolation::Scalar >(val2);
  (arg1)->SetShape(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_InterpolationRBF_SetFunction(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  interpolation::InterpolationRBF *arg1 = (interpolation::InterpolationRBF *) 0 ;
  interpolation::Type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< interpolation::InterpolationRBF > tempshared1 ;
  std::shared_ptr< interpolation::InterpolationRBF > *smartarg1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "InterpolationRBF_SetFunction", 2, 2, swig_obj)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_interpolation__InterpolationRBF_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InterpolationRBF_SetFunction" "', argument " "1"" of type '" "interpolation::InterpolationRBF *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  interpolation::InterpolationRBF > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  interpolation::InterpolationRBF > * >(argp1);
      arg1 = const_cast< interpolation::InterpolationRBF * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  interpolation::InterpolationRBF > * >(argp1);
      arg1 = const_cast< interpolation::InterpolationRBF * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "InterpolationRBF_SetFunction" "', argument " "2"" of type '" "interpolation::Type""'");
  } 
  arg2 = static_cast< interpolation::Type >(val2);
  (arg1)->SetFunction(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *InterpolationRBF_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_std__shared_ptrT_interpolation__InterpolationRBF_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN int Swig_var_materialLogger_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable materialLogger is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_materialLogger_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_std_string(static_cast< std::string >(material::materialLogger));
  return pyobj;
}


SWIGINTERN int Swig_var_material_solid_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable material_solid is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_material_solid_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_size_t(static_cast< size_t >(material::material_solid));
  return pyobj;
}


SWIGINTERN int Swig_var_material_fluid_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable material_fluid is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_material_fluid_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_size_t(static_cast< size_t >(material::material_fluid));
  return pyobj;
}


SWIGINTERN PyObject *_wrap_delete_IBase(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  material::IBase *arg1 = (material::IBase *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< material::IBase > tempshared1 ;
  std::shared_ptr< material::IBase > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_material__IBase_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_IBase" "', argument " "1"" of type '" "material::IBase *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  material::IBase > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  material::IBase > * >(argp1);
      arg1 = const_cast< material::IBase * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  material::IBase > * >(argp1);
      arg1 = const_cast< material::IBase * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  (void)arg1; delete smartarg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IBase_GetTag(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  material::IBase *arg1 = (material::IBase *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< material::IBase const > tempshared1 ;
  std::shared_ptr< material::IBase const > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  material::Tag result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_material__IBase_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IBase_GetTag" "', argument " "1"" of type '" "material::IBase const *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const material::IBase > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const material::IBase > * >(argp1);
      arg1 = const_cast< material::IBase * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const material::IBase > * >(argp1);
      arg1 = const_cast< material::IBase * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = ((material::IBase const *)arg1)->GetTag();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IBase_GetType(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  material::IBase *arg1 = (material::IBase *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< material::IBase const > tempshared1 ;
  std::shared_ptr< material::IBase const > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  material::Type result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_material__IBase_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IBase_GetType" "', argument " "1"" of type '" "material::IBase const *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const material::IBase > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const material::IBase > * >(argp1);
      arg1 = const_cast< material::IBase * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const material::IBase > * >(argp1);
      arg1 = const_cast< material::IBase * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = ((material::IBase const *)arg1)->GetType();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IBase_GetClass(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  material::IBase *arg1 = (material::IBase *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< material::IBase const > tempshared1 ;
  std::shared_ptr< material::IBase const > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  material::String result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_material__IBase_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IBase_GetClass" "', argument " "1"" of type '" "material::IBase const *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const material::IBase > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const material::IBase > * >(argp1);
      arg1 = const_cast< material::IBase * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const material::IBase > * >(argp1);
      arg1 = const_cast< material::IBase * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = ((material::IBase const *)arg1)->GetClass();
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IBase_GetGroup(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  material::IBase *arg1 = (material::IBase *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< material::IBase const > tempshared1 ;
  std::shared_ptr< material::IBase const > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  material::String result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_material__IBase_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IBase_GetGroup" "', argument " "1"" of type '" "material::IBase const *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const material::IBase > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const material::IBase > * >(argp1);
      arg1 = const_cast< material::IBase * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const material::IBase > * >(argp1);
      arg1 = const_cast< material::IBase * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = ((material::IBase const *)arg1)->GetGroup();
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IBase_GetDescription(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  material::IBase *arg1 = (material::IBase *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< material::IBase const > tempshared1 ;
  std::shared_ptr< material::IBase const > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  material::String result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_material__IBase_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IBase_GetDescription" "', argument " "1"" of type '" "material::IBase const *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const material::IBase > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const material::IBase > * >(argp1);
      arg1 = const_cast< material::IBase * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const material::IBase > * >(argp1);
      arg1 = const_cast< material::IBase * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = ((material::IBase const *)arg1)->GetDescription();
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IBase_GetName(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  material::IBase *arg1 = (material::IBase *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< material::IBase const > tempshared1 ;
  std::shared_ptr< material::IBase const > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  material::String result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_material__IBase_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IBase_GetName" "', argument " "1"" of type '" "material::IBase const *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const material::IBase > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const material::IBase > * >(argp1);
      arg1 = const_cast< material::IBase * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const material::IBase > * >(argp1);
      arg1 = const_cast< material::IBase * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = ((material::IBase const *)arg1)->GetName();
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IBase_SetClass(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  material::IBase *arg1 = (material::IBase *) 0 ;
  material::IStringPtr arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< material::IBase > tempshared1 ;
  std::shared_ptr< material::IBase > *smartarg1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "IBase_SetClass", 2, 2, swig_obj)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_material__IBase_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IBase_SetClass" "', argument " "1"" of type '" "material::IBase *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  material::IBase > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  material::IBase > * >(argp1);
      arg1 = const_cast< material::IBase * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  material::IBase > * >(argp1);
      arg1 = const_cast< material::IBase * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    int newmem = 0;
    res2 = SWIG_ConvertPtrAndOwn(swig_obj[1], &argp2, SWIGTYPE_p_std__shared_ptrT_values__IString_t,  0 , &newmem);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IBase_SetClass" "', argument " "2"" of type '" "material::IStringPtr""'");
    }
    if (argp2) arg2 = *(reinterpret_cast< material::IStringPtr * >(argp2));
    if (newmem & SWIG_CAST_NEW_MEMORY) delete reinterpret_cast< material::IStringPtr * >(argp2);
  }
  (arg1)->SetClass(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IBase_SetGroup(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  material::IBase *arg1 = (material::IBase *) 0 ;
  material::IStringPtr arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< material::IBase > tempshared1 ;
  std::shared_ptr< material::IBase > *smartarg1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "IBase_SetGroup", 2, 2, swig_obj)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_material__IBase_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IBase_SetGroup" "', argument " "1"" of type '" "material::IBase *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  material::IBase > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  material::IBase > * >(argp1);
      arg1 = const_cast< material::IBase * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  material::IBase > * >(argp1);
      arg1 = const_cast< material::IBase * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    int newmem = 0;
    res2 = SWIG_ConvertPtrAndOwn(swig_obj[1], &argp2, SWIGTYPE_p_std__shared_ptrT_values__IString_t,  0 , &newmem);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IBase_SetGroup" "', argument " "2"" of type '" "material::IStringPtr""'");
    }
    if (argp2) arg2 = *(reinterpret_cast< material::IStringPtr * >(argp2));
    if (newmem & SWIG_CAST_NEW_MEMORY) delete reinterpret_cast< material::IStringPtr * >(argp2);
  }
  (arg1)->SetGroup(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IBase_SetDescription(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  material::IBase *arg1 = (material::IBase *) 0 ;
  material::IStringPtr arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< material::IBase > tempshared1 ;
  std::shared_ptr< material::IBase > *smartarg1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "IBase_SetDescription", 2, 2, swig_obj)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_material__IBase_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IBase_SetDescription" "', argument " "1"" of type '" "material::IBase *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  material::IBase > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  material::IBase > * >(argp1);
      arg1 = const_cast< material::IBase * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  material::IBase > * >(argp1);
      arg1 = const_cast< material::IBase * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    int newmem = 0;
    res2 = SWIG_ConvertPtrAndOwn(swig_obj[1], &argp2, SWIGTYPE_p_std__shared_ptrT_values__IString_t,  0 , &newmem);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IBase_SetDescription" "', argument " "2"" of type '" "material::IStringPtr""'");
    }
    if (argp2) arg2 = *(reinterpret_cast< material::IStringPtr * >(argp2));
    if (newmem & SWIG_CAST_NEW_MEMORY) delete reinterpret_cast< material::IStringPtr * >(argp2);
  }
  (arg1)->SetDescription(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IBase_SetName(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  material::IBase *arg1 = (material::IBase *) 0 ;
  material::IStringPtr arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< material::IBase > tempshared1 ;
  std::shared_ptr< material::IBase > *smartarg1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "IBase_SetName", 2, 2, swig_obj)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_material__IBase_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IBase_SetName" "', argument " "1"" of type '" "material::IBase *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  material::IBase > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  material::IBase > * >(argp1);
      arg1 = const_cast< material::IBase * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  material::IBase > * >(argp1);
      arg1 = const_cast< material::IBase * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    int newmem = 0;
    res2 = SWIG_ConvertPtrAndOwn(swig_obj[1], &argp2, SWIGTYPE_p_std__shared_ptrT_values__IString_t,  0 , &newmem);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IBase_SetName" "', argument " "2"" of type '" "material::IStringPtr""'");
    }
    if (argp2) arg2 = *(reinterpret_cast< material::IStringPtr * >(argp2));
    if (newmem & SWIG_CAST_NEW_MEMORY) delete reinterpret_cast< material::IStringPtr * >(argp2);
  }
  (arg1)->SetName(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IBase_SetTag(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  material::IBase *arg1 = (material::IBase *) 0 ;
  material::Tag *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< material::IBase > tempshared1 ;
  std::shared_ptr< material::IBase > *smartarg1 = 0 ;
  material::Tag temp2 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "IBase_SetTag", 2, 2, swig_obj)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_material__IBase_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IBase_SetTag" "', argument " "1"" of type '" "material::IBase *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  material::IBase > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  material::IBase > * >(argp1);
      arg1 = const_cast< material::IBase * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  material::IBase > * >(argp1);
      arg1 = const_cast< material::IBase * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IBase_SetTag" "', argument " "2"" of type '" "material::Tag""'");
  } 
  temp2 = static_cast< material::Tag >(val2);
  arg2 = &temp2;
  (arg1)->SetTag((material::Tag const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *IBase_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_std__shared_ptrT_material__IBase_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_delete_IMaterial(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  material::IMaterial *arg1 = (material::IMaterial *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< material::IMaterial > tempshared1 ;
  std::shared_ptr< material::IMaterial > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_material__IMaterial_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_IMaterial" "', argument " "1"" of type '" "material::IMaterial *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  material::IMaterial > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  material::IMaterial > * >(argp1);
      arg1 = const_cast< material::IMaterial * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  material::IMaterial > * >(argp1);
      arg1 = const_cast< material::IMaterial * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  (void)arg1; delete smartarg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IMaterial_GetDensity(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  material::IMaterial *arg1 = (material::IMaterial *) 0 ;
  material::Scalar arg2 ;
  material::Scalar arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< material::IMaterial const > tempshared1 ;
  std::shared_ptr< material::IMaterial const > *smartarg1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  material::Scalar result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "IMaterial_GetDensity", 3, 3, swig_obj)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_material__IMaterial_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IMaterial_GetDensity" "', argument " "1"" of type '" "material::IMaterial const *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const material::IMaterial > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const material::IMaterial > * >(argp1);
      arg1 = const_cast< material::IMaterial * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const material::IMaterial > * >(argp1);
      arg1 = const_cast< material::IMaterial * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IMaterial_GetDensity" "', argument " "2"" of type '" "material::Scalar""'");
  } 
  arg2 = static_cast< material::Scalar >(val2);
  ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "IMaterial_GetDensity" "', argument " "3"" of type '" "material::Scalar""'");
  } 
  arg3 = static_cast< material::Scalar >(val3);
  result = (material::Scalar)((material::IMaterial const *)arg1)->GetDensity(arg2,arg3);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IMaterial_GetSpecificHeat(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  material::IMaterial *arg1 = (material::IMaterial *) 0 ;
  material::Scalar arg2 ;
  material::Scalar arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< material::IMaterial const > tempshared1 ;
  std::shared_ptr< material::IMaterial const > *smartarg1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  material::Scalar result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "IMaterial_GetSpecificHeat", 3, 3, swig_obj)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_material__IMaterial_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IMaterial_GetSpecificHeat" "', argument " "1"" of type '" "material::IMaterial const *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const material::IMaterial > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const material::IMaterial > * >(argp1);
      arg1 = const_cast< material::IMaterial * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const material::IMaterial > * >(argp1);
      arg1 = const_cast< material::IMaterial * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IMaterial_GetSpecificHeat" "', argument " "2"" of type '" "material::Scalar""'");
  } 
  arg2 = static_cast< material::Scalar >(val2);
  ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "IMaterial_GetSpecificHeat" "', argument " "3"" of type '" "material::Scalar""'");
  } 
  arg3 = static_cast< material::Scalar >(val3);
  result = (material::Scalar)((material::IMaterial const *)arg1)->GetSpecificHeat(arg2,arg3);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IMaterial_GetThermalConductivity(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  material::IMaterial *arg1 = (material::IMaterial *) 0 ;
  material::Scalar arg2 ;
  material::Scalar arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< material::IMaterial const > tempshared1 ;
  std::shared_ptr< material::IMaterial const > *smartarg1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  material::Scalar result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "IMaterial_GetThermalConductivity", 3, 3, swig_obj)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_material__IMaterial_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IMaterial_GetThermalConductivity" "', argument " "1"" of type '" "material::IMaterial const *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const material::IMaterial > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const material::IMaterial > * >(argp1);
      arg1 = const_cast< material::IMaterial * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const material::IMaterial > * >(argp1);
      arg1 = const_cast< material::IMaterial * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IMaterial_GetThermalConductivity" "', argument " "2"" of type '" "material::Scalar""'");
  } 
  arg2 = static_cast< material::Scalar >(val2);
  ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "IMaterial_GetThermalConductivity" "', argument " "3"" of type '" "material::Scalar""'");
  } 
  arg3 = static_cast< material::Scalar >(val3);
  result = (material::Scalar)((material::IMaterial const *)arg1)->GetThermalConductivity(arg2,arg3);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IMaterial_SetDensity(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  material::IMaterial *arg1 = (material::IMaterial *) 0 ;
  material::IScalar2DPtr arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< material::IMaterial > tempshared1 ;
  std::shared_ptr< material::IMaterial > *smartarg1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "IMaterial_SetDensity", 2, 2, swig_obj)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_material__IMaterial_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IMaterial_SetDensity" "', argument " "1"" of type '" "material::IMaterial *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  material::IMaterial > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  material::IMaterial > * >(argp1);
      arg1 = const_cast< material::IMaterial * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  material::IMaterial > * >(argp1);
      arg1 = const_cast< material::IMaterial * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    int newmem = 0;
    res2 = SWIG_ConvertPtrAndOwn(swig_obj[1], &argp2, SWIGTYPE_p_std__shared_ptrT_values__IScalar2D_t,  0 , &newmem);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IMaterial_SetDensity" "', argument " "2"" of type '" "material::IScalar2DPtr""'");
    }
    if (argp2) arg2 = *(reinterpret_cast< material::IScalar2DPtr * >(argp2));
    if (newmem & SWIG_CAST_NEW_MEMORY) delete reinterpret_cast< material::IScalar2DPtr * >(argp2);
  }
  (arg1)->SetDensity(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IMaterial_SetSpecificHeat(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  material::IMaterial *arg1 = (material::IMaterial *) 0 ;
  material::IScalar2DPtr arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< material::IMaterial > tempshared1 ;
  std::shared_ptr< material::IMaterial > *smartarg1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "IMaterial_SetSpecificHeat", 2, 2, swig_obj)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_material__IMaterial_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IMaterial_SetSpecificHeat" "', argument " "1"" of type '" "material::IMaterial *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  material::IMaterial > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  material::IMaterial > * >(argp1);
      arg1 = const_cast< material::IMaterial * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  material::IMaterial > * >(argp1);
      arg1 = const_cast< material::IMaterial * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    int newmem = 0;
    res2 = SWIG_ConvertPtrAndOwn(swig_obj[1], &argp2, SWIGTYPE_p_std__shared_ptrT_values__IScalar2D_t,  0 , &newmem);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IMaterial_SetSpecificHeat" "', argument " "2"" of type '" "material::IScalar2DPtr""'");
    }
    if (argp2) arg2 = *(reinterpret_cast< material::IScalar2DPtr * >(argp2));
    if (newmem & SWIG_CAST_NEW_MEMORY) delete reinterpret_cast< material::IScalar2DPtr * >(argp2);
  }
  (arg1)->SetSpecificHeat(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IMaterial_SetThermalConductivity(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  material::IMaterial *arg1 = (material::IMaterial *) 0 ;
  material::IScalar2DPtr arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< material::IMaterial > tempshared1 ;
  std::shared_ptr< material::IMaterial > *smartarg1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "IMaterial_SetThermalConductivity", 2, 2, swig_obj)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_material__IMaterial_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IMaterial_SetThermalConductivity" "', argument " "1"" of type '" "material::IMaterial *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  material::IMaterial > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  material::IMaterial > * >(argp1);
      arg1 = const_cast< material::IMaterial * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  material::IMaterial > * >(argp1);
      arg1 = const_cast< material::IMaterial * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    int newmem = 0;
    res2 = SWIG_ConvertPtrAndOwn(swig_obj[1], &argp2, SWIGTYPE_p_std__shared_ptrT_values__IScalar2D_t,  0 , &newmem);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IMaterial_SetThermalConductivity" "', argument " "2"" of type '" "material::IScalar2DPtr""'");
    }
    if (argp2) arg2 = *(reinterpret_cast< material::IScalar2DPtr * >(argp2));
    if (newmem & SWIG_CAST_NEW_MEMORY) delete reinterpret_cast< material::IScalar2DPtr * >(argp2);
  }
  (arg1)->SetThermalConductivity(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IMaterial_K(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  material::IMaterial *arg1 = (material::IMaterial *) 0 ;
  material::Scalar arg2 ;
  material::Scalar arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< material::IMaterial const > tempshared1 ;
  std::shared_ptr< material::IMaterial const > *smartarg1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  material::Matrix result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "IMaterial_K", 3, 3, swig_obj)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_material__IMaterial_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IMaterial_K" "', argument " "1"" of type '" "material::IMaterial const *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const material::IMaterial > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const material::IMaterial > * >(argp1);
      arg1 = const_cast< material::IMaterial * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const material::IMaterial > * >(argp1);
      arg1 = const_cast< material::IMaterial * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IMaterial_K" "', argument " "2"" of type '" "material::Scalar""'");
  } 
  arg2 = static_cast< material::Scalar >(val2);
  ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "IMaterial_K" "', argument " "3"" of type '" "material::Scalar""'");
  } 
  arg3 = static_cast< material::Scalar >(val3);
  result = ((material::IMaterial const *)arg1)->K(arg2,arg3);
  resultobj = SWIG_NewPointerObj((new material::Matrix(result)), SWIGTYPE_p_eilig__Matrix, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *IMaterial_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_std__shared_ptrT_material__IMaterial_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_delete_IMaterialFluid(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  material::IMaterialFluid *arg1 = (material::IMaterialFluid *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< material::IMaterialFluid > tempshared1 ;
  std::shared_ptr< material::IMaterialFluid > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_material__IMaterialFluid_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_IMaterialFluid" "', argument " "1"" of type '" "material::IMaterialFluid *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  material::IMaterialFluid > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  material::IMaterialFluid > * >(argp1);
      arg1 = const_cast< material::IMaterialFluid * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  material::IMaterialFluid > * >(argp1);
      arg1 = const_cast< material::IMaterialFluid * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  (void)arg1; delete smartarg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IMaterialFluid_GetDynamicViscosity(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  material::IMaterialFluid *arg1 = (material::IMaterialFluid *) 0 ;
  material::Scalar arg2 ;
  material::Scalar arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< material::IMaterialFluid const > tempshared1 ;
  std::shared_ptr< material::IMaterialFluid const > *smartarg1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  material::Scalar result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "IMaterialFluid_GetDynamicViscosity", 3, 3, swig_obj)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_material__IMaterialFluid_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IMaterialFluid_GetDynamicViscosity" "', argument " "1"" of type '" "material::IMaterialFluid const *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const material::IMaterialFluid > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const material::IMaterialFluid > * >(argp1);
      arg1 = const_cast< material::IMaterialFluid * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const material::IMaterialFluid > * >(argp1);
      arg1 = const_cast< material::IMaterialFluid * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IMaterialFluid_GetDynamicViscosity" "', argument " "2"" of type '" "material::Scalar""'");
  } 
  arg2 = static_cast< material::Scalar >(val2);
  ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "IMaterialFluid_GetDynamicViscosity" "', argument " "3"" of type '" "material::Scalar""'");
  } 
  arg3 = static_cast< material::Scalar >(val3);
  result = (material::Scalar)((material::IMaterialFluid const *)arg1)->GetDynamicViscosity(arg2,arg3);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IMaterialFluid_SetDynamicViscosity(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  material::IMaterialFluid *arg1 = (material::IMaterialFluid *) 0 ;
  material::IScalar2DPtr arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< material::IMaterialFluid > tempshared1 ;
  std::shared_ptr< material::IMaterialFluid > *smartarg1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "IMaterialFluid_SetDynamicViscosity", 2, 2, swig_obj)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_material__IMaterialFluid_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IMaterialFluid_SetDynamicViscosity" "', argument " "1"" of type '" "material::IMaterialFluid *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  material::IMaterialFluid > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  material::IMaterialFluid > * >(argp1);
      arg1 = const_cast< material::IMaterialFluid * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  material::IMaterialFluid > * >(argp1);
      arg1 = const_cast< material::IMaterialFluid * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    int newmem = 0;
    res2 = SWIG_ConvertPtrAndOwn(swig_obj[1], &argp2, SWIGTYPE_p_std__shared_ptrT_values__IScalar2D_t,  0 , &newmem);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IMaterialFluid_SetDynamicViscosity" "', argument " "2"" of type '" "material::IScalar2DPtr""'");
    }
    if (argp2) arg2 = *(reinterpret_cast< material::IScalar2DPtr * >(argp2));
    if (newmem & SWIG_CAST_NEW_MEMORY) delete reinterpret_cast< material::IScalar2DPtr * >(argp2);
  }
  (arg1)->SetDynamicViscosity(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IMaterialFluid_D(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  material::IMaterialFluid *arg1 = (material::IMaterialFluid *) 0 ;
  material::Scalar arg2 ;
  material::Scalar arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< material::IMaterialFluid const > tempshared1 ;
  std::shared_ptr< material::IMaterialFluid const > *smartarg1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  material::Matrix result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "IMaterialFluid_D", 3, 3, swig_obj)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_material__IMaterialFluid_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IMaterialFluid_D" "', argument " "1"" of type '" "material::IMaterialFluid const *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const material::IMaterialFluid > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const material::IMaterialFluid > * >(argp1);
      arg1 = const_cast< material::IMaterialFluid * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const material::IMaterialFluid > * >(argp1);
      arg1 = const_cast< material::IMaterialFluid * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IMaterialFluid_D" "', argument " "2"" of type '" "material::Scalar""'");
  } 
  arg2 = static_cast< material::Scalar >(val2);
  ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "IMaterialFluid_D" "', argument " "3"" of type '" "material::Scalar""'");
  } 
  arg3 = static_cast< material::Scalar >(val3);
  result = ((material::IMaterialFluid const *)arg1)->D(arg2,arg3);
  resultobj = SWIG_NewPointerObj((new material::Matrix(result)), SWIGTYPE_p_eilig__Matrix, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *IMaterialFluid_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_std__shared_ptrT_material__IMaterialFluid_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_delete_IMaterialSolid(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  material::IMaterialSolid *arg1 = (material::IMaterialSolid *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< material::IMaterialSolid > tempshared1 ;
  std::shared_ptr< material::IMaterialSolid > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_material__IMaterialSolid_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_IMaterialSolid" "', argument " "1"" of type '" "material::IMaterialSolid *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  material::IMaterialSolid > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  material::IMaterialSolid > * >(argp1);
      arg1 = const_cast< material::IMaterialSolid * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  material::IMaterialSolid > * >(argp1);
      arg1 = const_cast< material::IMaterialSolid * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  (void)arg1; delete smartarg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IMaterialSolid_GetPoissonRatio(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  material::IMaterialSolid *arg1 = (material::IMaterialSolid *) 0 ;
  material::Scalar arg2 ;
  material::Scalar arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< material::IMaterialSolid const > tempshared1 ;
  std::shared_ptr< material::IMaterialSolid const > *smartarg1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  material::Scalar result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "IMaterialSolid_GetPoissonRatio", 3, 3, swig_obj)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_material__IMaterialSolid_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IMaterialSolid_GetPoissonRatio" "', argument " "1"" of type '" "material::IMaterialSolid const *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const material::IMaterialSolid > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const material::IMaterialSolid > * >(argp1);
      arg1 = const_cast< material::IMaterialSolid * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const material::IMaterialSolid > * >(argp1);
      arg1 = const_cast< material::IMaterialSolid * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IMaterialSolid_GetPoissonRatio" "', argument " "2"" of type '" "material::Scalar""'");
  } 
  arg2 = static_cast< material::Scalar >(val2);
  ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "IMaterialSolid_GetPoissonRatio" "', argument " "3"" of type '" "material::Scalar""'");
  } 
  arg3 = static_cast< material::Scalar >(val3);
  result = (material::Scalar)((material::IMaterialSolid const *)arg1)->GetPoissonRatio(arg2,arg3);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IMaterialSolid_GetThermalExpansion(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  material::IMaterialSolid *arg1 = (material::IMaterialSolid *) 0 ;
  material::Scalar arg2 ;
  material::Scalar arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< material::IMaterialSolid const > tempshared1 ;
  std::shared_ptr< material::IMaterialSolid const > *smartarg1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  material::Scalar result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "IMaterialSolid_GetThermalExpansion", 3, 3, swig_obj)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_material__IMaterialSolid_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IMaterialSolid_GetThermalExpansion" "', argument " "1"" of type '" "material::IMaterialSolid const *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const material::IMaterialSolid > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const material::IMaterialSolid > * >(argp1);
      arg1 = const_cast< material::IMaterialSolid * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const material::IMaterialSolid > * >(argp1);
      arg1 = const_cast< material::IMaterialSolid * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IMaterialSolid_GetThermalExpansion" "', argument " "2"" of type '" "material::Scalar""'");
  } 
  arg2 = static_cast< material::Scalar >(val2);
  ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "IMaterialSolid_GetThermalExpansion" "', argument " "3"" of type '" "material::Scalar""'");
  } 
  arg3 = static_cast< material::Scalar >(val3);
  result = (material::Scalar)((material::IMaterialSolid const *)arg1)->GetThermalExpansion(arg2,arg3);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IMaterialSolid_GetElasticModulus(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  material::IMaterialSolid *arg1 = (material::IMaterialSolid *) 0 ;
  material::Scalar arg2 ;
  material::Scalar arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< material::IMaterialSolid const > tempshared1 ;
  std::shared_ptr< material::IMaterialSolid const > *smartarg1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  material::Scalar result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "IMaterialSolid_GetElasticModulus", 3, 3, swig_obj)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_material__IMaterialSolid_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IMaterialSolid_GetElasticModulus" "', argument " "1"" of type '" "material::IMaterialSolid const *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const material::IMaterialSolid > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const material::IMaterialSolid > * >(argp1);
      arg1 = const_cast< material::IMaterialSolid * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const material::IMaterialSolid > * >(argp1);
      arg1 = const_cast< material::IMaterialSolid * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IMaterialSolid_GetElasticModulus" "', argument " "2"" of type '" "material::Scalar""'");
  } 
  arg2 = static_cast< material::Scalar >(val2);
  ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "IMaterialSolid_GetElasticModulus" "', argument " "3"" of type '" "material::Scalar""'");
  } 
  arg3 = static_cast< material::Scalar >(val3);
  result = (material::Scalar)((material::IMaterialSolid const *)arg1)->GetElasticModulus(arg2,arg3);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IMaterialSolid_GetTensileStrength(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  material::IMaterialSolid *arg1 = (material::IMaterialSolid *) 0 ;
  material::Scalar arg2 ;
  material::Scalar arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< material::IMaterialSolid const > tempshared1 ;
  std::shared_ptr< material::IMaterialSolid const > *smartarg1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  material::Scalar result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "IMaterialSolid_GetTensileStrength", 3, 3, swig_obj)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_material__IMaterialSolid_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IMaterialSolid_GetTensileStrength" "', argument " "1"" of type '" "material::IMaterialSolid const *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const material::IMaterialSolid > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const material::IMaterialSolid > * >(argp1);
      arg1 = const_cast< material::IMaterialSolid * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const material::IMaterialSolid > * >(argp1);
      arg1 = const_cast< material::IMaterialSolid * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IMaterialSolid_GetTensileStrength" "', argument " "2"" of type '" "material::Scalar""'");
  } 
  arg2 = static_cast< material::Scalar >(val2);
  ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "IMaterialSolid_GetTensileStrength" "', argument " "3"" of type '" "material::Scalar""'");
  } 
  arg3 = static_cast< material::Scalar >(val3);
  result = (material::Scalar)((material::IMaterialSolid const *)arg1)->GetTensileStrength(arg2,arg3);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IMaterialSolid_GetYieldStrength(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  material::IMaterialSolid *arg1 = (material::IMaterialSolid *) 0 ;
  material::Scalar arg2 ;
  material::Scalar arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< material::IMaterialSolid const > tempshared1 ;
  std::shared_ptr< material::IMaterialSolid const > *smartarg1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  material::Scalar result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "IMaterialSolid_GetYieldStrength", 3, 3, swig_obj)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_material__IMaterialSolid_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IMaterialSolid_GetYieldStrength" "', argument " "1"" of type '" "material::IMaterialSolid const *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const material::IMaterialSolid > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const material::IMaterialSolid > * >(argp1);
      arg1 = const_cast< material::IMaterialSolid * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const material::IMaterialSolid > * >(argp1);
      arg1 = const_cast< material::IMaterialSolid * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IMaterialSolid_GetYieldStrength" "', argument " "2"" of type '" "material::Scalar""'");
  } 
  arg2 = static_cast< material::Scalar >(val2);
  ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "IMaterialSolid_GetYieldStrength" "', argument " "3"" of type '" "material::Scalar""'");
  } 
  arg3 = static_cast< material::Scalar >(val3);
  result = (material::Scalar)((material::IMaterialSolid const *)arg1)->GetYieldStrength(arg2,arg3);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IMaterialSolid_GetShearStrength(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  material::IMaterialSolid *arg1 = (material::IMaterialSolid *) 0 ;
  material::Scalar arg2 ;
  material::Scalar arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< material::IMaterialSolid const > tempshared1 ;
  std::shared_ptr< material::IMaterialSolid const > *smartarg1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  material::Scalar result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "IMaterialSolid_GetShearStrength", 3, 3, swig_obj)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_material__IMaterialSolid_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IMaterialSolid_GetShearStrength" "', argument " "1"" of type '" "material::IMaterialSolid const *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const material::IMaterialSolid > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const material::IMaterialSolid > * >(argp1);
      arg1 = const_cast< material::IMaterialSolid * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const material::IMaterialSolid > * >(argp1);
      arg1 = const_cast< material::IMaterialSolid * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IMaterialSolid_GetShearStrength" "', argument " "2"" of type '" "material::Scalar""'");
  } 
  arg2 = static_cast< material::Scalar >(val2);
  ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "IMaterialSolid_GetShearStrength" "', argument " "3"" of type '" "material::Scalar""'");
  } 
  arg3 = static_cast< material::Scalar >(val3);
  result = (material::Scalar)((material::IMaterialSolid const *)arg1)->GetShearStrength(arg2,arg3);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IMaterialSolid_GetLimitingSurfacePressure(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  material::IMaterialSolid *arg1 = (material::IMaterialSolid *) 0 ;
  material::Scalar arg2 ;
  material::Scalar arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< material::IMaterialSolid const > tempshared1 ;
  std::shared_ptr< material::IMaterialSolid const > *smartarg1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  material::Scalar result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "IMaterialSolid_GetLimitingSurfacePressure", 3, 3, swig_obj)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_material__IMaterialSolid_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IMaterialSolid_GetLimitingSurfacePressure" "', argument " "1"" of type '" "material::IMaterialSolid const *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const material::IMaterialSolid > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const material::IMaterialSolid > * >(argp1);
      arg1 = const_cast< material::IMaterialSolid * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const material::IMaterialSolid > * >(argp1);
      arg1 = const_cast< material::IMaterialSolid * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IMaterialSolid_GetLimitingSurfacePressure" "', argument " "2"" of type '" "material::Scalar""'");
  } 
  arg2 = static_cast< material::Scalar >(val2);
  ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "IMaterialSolid_GetLimitingSurfacePressure" "', argument " "3"" of type '" "material::Scalar""'");
  } 
  arg3 = static_cast< material::Scalar >(val3);
  result = (material::Scalar)((material::IMaterialSolid const *)arg1)->GetLimitingSurfacePressure(arg2,arg3);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IMaterialSolid_SetPoissonRatio(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  material::IMaterialSolid *arg1 = (material::IMaterialSolid *) 0 ;
  material::IScalar2DPtr arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< material::IMaterialSolid > tempshared1 ;
  std::shared_ptr< material::IMaterialSolid > *smartarg1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "IMaterialSolid_SetPoissonRatio", 2, 2, swig_obj)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_material__IMaterialSolid_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IMaterialSolid_SetPoissonRatio" "', argument " "1"" of type '" "material::IMaterialSolid *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  material::IMaterialSolid > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  material::IMaterialSolid > * >(argp1);
      arg1 = const_cast< material::IMaterialSolid * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  material::IMaterialSolid > * >(argp1);
      arg1 = const_cast< material::IMaterialSolid * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    int newmem = 0;
    res2 = SWIG_ConvertPtrAndOwn(swig_obj[1], &argp2, SWIGTYPE_p_std__shared_ptrT_values__IScalar2D_t,  0 , &newmem);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IMaterialSolid_SetPoissonRatio" "', argument " "2"" of type '" "material::IScalar2DPtr""'");
    }
    if (argp2) arg2 = *(reinterpret_cast< material::IScalar2DPtr * >(argp2));
    if (newmem & SWIG_CAST_NEW_MEMORY) delete reinterpret_cast< material::IScalar2DPtr * >(argp2);
  }
  (arg1)->SetPoissonRatio(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IMaterialSolid_SetThermalExpansion(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  material::IMaterialSolid *arg1 = (material::IMaterialSolid *) 0 ;
  material::IScalar2DPtr arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< material::IMaterialSolid > tempshared1 ;
  std::shared_ptr< material::IMaterialSolid > *smartarg1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "IMaterialSolid_SetThermalExpansion", 2, 2, swig_obj)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_material__IMaterialSolid_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IMaterialSolid_SetThermalExpansion" "', argument " "1"" of type '" "material::IMaterialSolid *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  material::IMaterialSolid > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  material::IMaterialSolid > * >(argp1);
      arg1 = const_cast< material::IMaterialSolid * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  material::IMaterialSolid > * >(argp1);
      arg1 = const_cast< material::IMaterialSolid * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    int newmem = 0;
    res2 = SWIG_ConvertPtrAndOwn(swig_obj[1], &argp2, SWIGTYPE_p_std__shared_ptrT_values__IScalar2D_t,  0 , &newmem);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IMaterialSolid_SetThermalExpansion" "', argument " "2"" of type '" "material::IScalar2DPtr""'");
    }
    if (argp2) arg2 = *(reinterpret_cast< material::IScalar2DPtr * >(argp2));
    if (newmem & SWIG_CAST_NEW_MEMORY) delete reinterpret_cast< material::IScalar2DPtr * >(argp2);
  }
  (arg1)->SetThermalExpansion(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IMaterialSolid_SetElasticModulus(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  material::IMaterialSolid *arg1 = (material::IMaterialSolid *) 0 ;
  material::IScalar2DPtr arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< material::IMaterialSolid > tempshared1 ;
  std::shared_ptr< material::IMaterialSolid > *smartarg1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "IMaterialSolid_SetElasticModulus", 2, 2, swig_obj)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_material__IMaterialSolid_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IMaterialSolid_SetElasticModulus" "', argument " "1"" of type '" "material::IMaterialSolid *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  material::IMaterialSolid > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  material::IMaterialSolid > * >(argp1);
      arg1 = const_cast< material::IMaterialSolid * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  material::IMaterialSolid > * >(argp1);
      arg1 = const_cast< material::IMaterialSolid * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    int newmem = 0;
    res2 = SWIG_ConvertPtrAndOwn(swig_obj[1], &argp2, SWIGTYPE_p_std__shared_ptrT_values__IScalar2D_t,  0 , &newmem);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IMaterialSolid_SetElasticModulus" "', argument " "2"" of type '" "material::IScalar2DPtr""'");
    }
    if (argp2) arg2 = *(reinterpret_cast< material::IScalar2DPtr * >(argp2));
    if (newmem & SWIG_CAST_NEW_MEMORY) delete reinterpret_cast< material::IScalar2DPtr * >(argp2);
  }
  (arg1)->SetElasticModulus(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IMaterialSolid_SetTensileStrength(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  material::IMaterialSolid *arg1 = (material::IMaterialSolid *) 0 ;
  material::IScalar2DPtr arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< material::IMaterialSolid > tempshared1 ;
  std::shared_ptr< material::IMaterialSolid > *smartarg1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "IMaterialSolid_SetTensileStrength", 2, 2, swig_obj)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_material__IMaterialSolid_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IMaterialSolid_SetTensileStrength" "', argument " "1"" of type '" "material::IMaterialSolid *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  material::IMaterialSolid > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  material::IMaterialSolid > * >(argp1);
      arg1 = const_cast< material::IMaterialSolid * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  material::IMaterialSolid > * >(argp1);
      arg1 = const_cast< material::IMaterialSolid * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    int newmem = 0;
    res2 = SWIG_ConvertPtrAndOwn(swig_obj[1], &argp2, SWIGTYPE_p_std__shared_ptrT_values__IScalar2D_t,  0 , &newmem);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IMaterialSolid_SetTensileStrength" "', argument " "2"" of type '" "material::IScalar2DPtr""'");
    }
    if (argp2) arg2 = *(reinterpret_cast< material::IScalar2DPtr * >(argp2));
    if (newmem & SWIG_CAST_NEW_MEMORY) delete reinterpret_cast< material::IScalar2DPtr * >(argp2);
  }
  (arg1)->SetTensileStrength(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IMaterialSolid_SetYieldStrength(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  material::IMaterialSolid *arg1 = (material::IMaterialSolid *) 0 ;
  material::IScalar2DPtr arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< material::IMaterialSolid > tempshared1 ;
  std::shared_ptr< material::IMaterialSolid > *smartarg1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "IMaterialSolid_SetYieldStrength", 2, 2, swig_obj)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_material__IMaterialSolid_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IMaterialSolid_SetYieldStrength" "', argument " "1"" of type '" "material::IMaterialSolid *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  material::IMaterialSolid > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  material::IMaterialSolid > * >(argp1);
      arg1 = const_cast< material::IMaterialSolid * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  material::IMaterialSolid > * >(argp1);
      arg1 = const_cast< material::IMaterialSolid * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    int newmem = 0;
    res2 = SWIG_ConvertPtrAndOwn(swig_obj[1], &argp2, SWIGTYPE_p_std__shared_ptrT_values__IScalar2D_t,  0 , &newmem);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IMaterialSolid_SetYieldStrength" "', argument " "2"" of type '" "material::IScalar2DPtr""'");
    }
    if (argp2) arg2 = *(reinterpret_cast< material::IScalar2DPtr * >(argp2));
    if (newmem & SWIG_CAST_NEW_MEMORY) delete reinterpret_cast< material::IScalar2DPtr * >(argp2);
  }
  (arg1)->SetYieldStrength(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IMaterialSolid_SetShearStrength(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  material::IMaterialSolid *arg1 = (material::IMaterialSolid *) 0 ;
  material::IScalar2DPtr arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< material::IMaterialSolid > tempshared1 ;
  std::shared_ptr< material::IMaterialSolid > *smartarg1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "IMaterialSolid_SetShearStrength", 2, 2, swig_obj)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_material__IMaterialSolid_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IMaterialSolid_SetShearStrength" "', argument " "1"" of type '" "material::IMaterialSolid *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  material::IMaterialSolid > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  material::IMaterialSolid > * >(argp1);
      arg1 = const_cast< material::IMaterialSolid * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  material::IMaterialSolid > * >(argp1);
      arg1 = const_cast< material::IMaterialSolid * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    int newmem = 0;
    res2 = SWIG_ConvertPtrAndOwn(swig_obj[1], &argp2, SWIGTYPE_p_std__shared_ptrT_values__IScalar2D_t,  0 , &newmem);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IMaterialSolid_SetShearStrength" "', argument " "2"" of type '" "material::IScalar2DPtr""'");
    }
    if (argp2) arg2 = *(reinterpret_cast< material::IScalar2DPtr * >(argp2));
    if (newmem & SWIG_CAST_NEW_MEMORY) delete reinterpret_cast< material::IScalar2DPtr * >(argp2);
  }
  (arg1)->SetShearStrength(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IMaterialSolid_SetLimitingSurfacePressure(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  material::IMaterialSolid *arg1 = (material::IMaterialSolid *) 0 ;
  material::IScalar2DPtr arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< material::IMaterialSolid > tempshared1 ;
  std::shared_ptr< material::IMaterialSolid > *smartarg1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "IMaterialSolid_SetLimitingSurfacePressure", 2, 2, swig_obj)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_material__IMaterialSolid_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IMaterialSolid_SetLimitingSurfacePressure" "', argument " "1"" of type '" "material::IMaterialSolid *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  material::IMaterialSolid > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  material::IMaterialSolid > * >(argp1);
      arg1 = const_cast< material::IMaterialSolid * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  material::IMaterialSolid > * >(argp1);
      arg1 = const_cast< material::IMaterialSolid * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    int newmem = 0;
    res2 = SWIG_ConvertPtrAndOwn(swig_obj[1], &argp2, SWIGTYPE_p_std__shared_ptrT_values__IScalar2D_t,  0 , &newmem);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IMaterialSolid_SetLimitingSurfacePressure" "', argument " "2"" of type '" "material::IScalar2DPtr""'");
    }
    if (argp2) arg2 = *(reinterpret_cast< material::IScalar2DPtr * >(argp2));
    if (newmem & SWIG_CAST_NEW_MEMORY) delete reinterpret_cast< material::IScalar2DPtr * >(argp2);
  }
  (arg1)->SetLimitingSurfacePressure(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IMaterialSolid_A(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  material::IMaterialSolid *arg1 = (material::IMaterialSolid *) 0 ;
  material::Scalar arg2 ;
  material::Scalar arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< material::IMaterialSolid const > tempshared1 ;
  std::shared_ptr< material::IMaterialSolid const > *smartarg1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  material::Matrix result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "IMaterialSolid_A", 3, 3, swig_obj)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_material__IMaterialSolid_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IMaterialSolid_A" "', argument " "1"" of type '" "material::IMaterialSolid const *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const material::IMaterialSolid > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const material::IMaterialSolid > * >(argp1);
      arg1 = const_cast< material::IMaterialSolid * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const material::IMaterialSolid > * >(argp1);
      arg1 = const_cast< material::IMaterialSolid * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IMaterialSolid_A" "', argument " "2"" of type '" "material::Scalar""'");
  } 
  arg2 = static_cast< material::Scalar >(val2);
  ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "IMaterialSolid_A" "', argument " "3"" of type '" "material::Scalar""'");
  } 
  arg3 = static_cast< material::Scalar >(val3);
  result = ((material::IMaterialSolid const *)arg1)->A(arg2,arg3);
  resultobj = SWIG_NewPointerObj((new material::Matrix(result)), SWIGTYPE_p_eilig__Matrix, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IMaterialSolid_D(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  material::IMaterialSolid *arg1 = (material::IMaterialSolid *) 0 ;
  material::Scalar arg2 ;
  material::Scalar arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< material::IMaterialSolid const > tempshared1 ;
  std::shared_ptr< material::IMaterialSolid const > *smartarg1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  material::Matrix result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "IMaterialSolid_D", 3, 3, swig_obj)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_material__IMaterialSolid_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IMaterialSolid_D" "', argument " "1"" of type '" "material::IMaterialSolid const *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const material::IMaterialSolid > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const material::IMaterialSolid > * >(argp1);
      arg1 = const_cast< material::IMaterialSolid * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const material::IMaterialSolid > * >(argp1);
      arg1 = const_cast< material::IMaterialSolid * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IMaterialSolid_D" "', argument " "2"" of type '" "material::Scalar""'");
  } 
  arg2 = static_cast< material::Scalar >(val2);
  ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "IMaterialSolid_D" "', argument " "3"" of type '" "material::Scalar""'");
  } 
  arg3 = static_cast< material::Scalar >(val3);
  result = ((material::IMaterialSolid const *)arg1)->D(arg2,arg3);
  resultobj = SWIG_NewPointerObj((new material::Matrix(result)), SWIGTYPE_p_eilig__Matrix, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *IMaterialSolid_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_std__shared_ptrT_material__IMaterialSolid_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_CreateMaterialFluid(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  material::Tag arg1 ;
  size_t val1 ;
  int ecode1 = 0 ;
  PyObject *swig_obj[1] ;
  material::MaterialFluidPtr result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  ecode1 = SWIG_AsVal_size_t(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "CreateMaterialFluid" "', argument " "1"" of type '" "material::Tag""'");
  } 
  arg1 = static_cast< material::Tag >(val1);
  result = material::CreateMaterialFluid(SWIG_STD_MOVE(arg1));
  {
    std::shared_ptr<  material::MaterialFluid > *smartresult = result ? new std::shared_ptr<  material::MaterialFluid >(result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_std__shared_ptrT_material__MaterialFluid_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_MaterialFluid(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  material::MaterialFluid *arg1 = (material::MaterialFluid *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< material::MaterialFluid > tempshared1 ;
  std::shared_ptr< material::MaterialFluid > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_material__MaterialFluid_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_MaterialFluid" "', argument " "1"" of type '" "material::MaterialFluid *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  material::MaterialFluid > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  material::MaterialFluid > * >(argp1);
      arg1 = const_cast< material::MaterialFluid * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  material::MaterialFluid > * >(argp1);
      arg1 = const_cast< material::MaterialFluid * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  (void)arg1; delete smartarg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MaterialFluid_Create(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  material::MaterialFluidPtr result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "MaterialFluid_Create", 0, 0, 0)) SWIG_fail;
  result = material::MaterialFluid::Create();
  {
    std::shared_ptr<  material::MaterialFluid > *smartresult = result ? new std::shared_ptr<  material::MaterialFluid >(result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_std__shared_ptrT_material__MaterialFluid_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MaterialFluid_GetPtr__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  material::MaterialFluid *arg1 = (material::MaterialFluid *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< material::MaterialFluid > tempshared1 ;
  std::shared_ptr< material::MaterialFluid > *smartarg1 = 0 ;
  material::MaterialFluidPtr result;
  
  (void)self;
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_material__MaterialFluid_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MaterialFluid_GetPtr" "', argument " "1"" of type '" "material::MaterialFluid *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  material::MaterialFluid > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  material::MaterialFluid > * >(argp1);
      arg1 = const_cast< material::MaterialFluid * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  material::MaterialFluid > * >(argp1);
      arg1 = const_cast< material::MaterialFluid * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = (arg1)->GetPtr();
  {
    std::shared_ptr<  material::MaterialFluid > *smartresult = result ? new std::shared_ptr<  material::MaterialFluid >(result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_std__shared_ptrT_material__MaterialFluid_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MaterialFluid_GetPtr__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  material::MaterialFluid *arg1 = (material::MaterialFluid *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< material::MaterialFluid const > tempshared1 ;
  std::shared_ptr< material::MaterialFluid const > *smartarg1 = 0 ;
  material::ConstMaterialFluidPtr result;
  
  (void)self;
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_material__MaterialFluid_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MaterialFluid_GetPtr" "', argument " "1"" of type '" "material::MaterialFluid const *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const material::MaterialFluid > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const material::MaterialFluid > * >(argp1);
      arg1 = const_cast< material::MaterialFluid * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const material::MaterialFluid > * >(argp1);
      arg1 = const_cast< material::MaterialFluid * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = ((material::MaterialFluid const *)arg1)->GetPtr();
  {
    std::shared_ptr< const material::MaterialFluid > *smartresult = result ? new std::shared_ptr< const material::MaterialFluid >(result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_std__shared_ptrT_material__MaterialFluid_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MaterialFluid_GetPtr(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "MaterialFluid_GetPtr", 0, 1, argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    int _v = 0;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_std__shared_ptrT_material__MaterialFluid_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_MaterialFluid_GetPtr__SWIG_0(self, argc, argv);
    }
  }
  if (argc == 1) {
    int _v = 0;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_std__shared_ptrT_material__MaterialFluid_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_MaterialFluid_GetPtr__SWIG_1(self, argc, argv);
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'MaterialFluid_GetPtr'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    material::MaterialFluid::GetPtr()\n"
    "    material::MaterialFluid::GetPtr() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_MaterialFluid_GetTag(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  material::MaterialFluid *arg1 = (material::MaterialFluid *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< material::MaterialFluid const > tempshared1 ;
  std::shared_ptr< material::MaterialFluid const > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  material::Tag result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_material__MaterialFluid_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MaterialFluid_GetTag" "', argument " "1"" of type '" "material::MaterialFluid const *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const material::MaterialFluid > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const material::MaterialFluid > * >(argp1);
      arg1 = const_cast< material::MaterialFluid * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const material::MaterialFluid > * >(argp1);
      arg1 = const_cast< material::MaterialFluid * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = ((material::MaterialFluid const *)arg1)->GetTag();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MaterialFluid_GetType(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  material::MaterialFluid *arg1 = (material::MaterialFluid *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< material::MaterialFluid const > tempshared1 ;
  std::shared_ptr< material::MaterialFluid const > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  material::Type result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_material__MaterialFluid_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MaterialFluid_GetType" "', argument " "1"" of type '" "material::MaterialFluid const *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const material::MaterialFluid > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const material::MaterialFluid > * >(argp1);
      arg1 = const_cast< material::MaterialFluid * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const material::MaterialFluid > * >(argp1);
      arg1 = const_cast< material::MaterialFluid * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = ((material::MaterialFluid const *)arg1)->GetType();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MaterialFluid_GetClass(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  material::MaterialFluid *arg1 = (material::MaterialFluid *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< material::MaterialFluid const > tempshared1 ;
  std::shared_ptr< material::MaterialFluid const > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  material::String result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_material__MaterialFluid_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MaterialFluid_GetClass" "', argument " "1"" of type '" "material::MaterialFluid const *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const material::MaterialFluid > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const material::MaterialFluid > * >(argp1);
      arg1 = const_cast< material::MaterialFluid * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const material::MaterialFluid > * >(argp1);
      arg1 = const_cast< material::MaterialFluid * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = ((material::MaterialFluid const *)arg1)->GetClass();
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MaterialFluid_GetGroup(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  material::MaterialFluid *arg1 = (material::MaterialFluid *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< material::MaterialFluid const > tempshared1 ;
  std::shared_ptr< material::MaterialFluid const > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  material::String result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_material__MaterialFluid_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MaterialFluid_GetGroup" "', argument " "1"" of type '" "material::MaterialFluid const *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const material::MaterialFluid > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const material::MaterialFluid > * >(argp1);
      arg1 = const_cast< material::MaterialFluid * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const material::MaterialFluid > * >(argp1);
      arg1 = const_cast< material::MaterialFluid * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = ((material::MaterialFluid const *)arg1)->GetGroup();
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MaterialFluid_GetDescription(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  material::MaterialFluid *arg1 = (material::MaterialFluid *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< material::MaterialFluid const > tempshared1 ;
  std::shared_ptr< material::MaterialFluid const > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  material::String result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_material__MaterialFluid_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MaterialFluid_GetDescription" "', argument " "1"" of type '" "material::MaterialFluid const *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const material::MaterialFluid > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const material::MaterialFluid > * >(argp1);
      arg1 = const_cast< material::MaterialFluid * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const material::MaterialFluid > * >(argp1);
      arg1 = const_cast< material::MaterialFluid * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = ((material::MaterialFluid const *)arg1)->GetDescription();
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MaterialFluid_GetName(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  material::MaterialFluid *arg1 = (material::MaterialFluid *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< material::MaterialFluid const > tempshared1 ;
  std::shared_ptr< material::MaterialFluid const > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  material::String result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_material__MaterialFluid_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MaterialFluid_GetName" "', argument " "1"" of type '" "material::MaterialFluid const *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const material::MaterialFluid > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const material::MaterialFluid > * >(argp1);
      arg1 = const_cast< material::MaterialFluid * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const material::MaterialFluid > * >(argp1);
      arg1 = const_cast< material::MaterialFluid * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = ((material::MaterialFluid const *)arg1)->GetName();
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MaterialFluid_SetClass(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  material::MaterialFluid *arg1 = (material::MaterialFluid *) 0 ;
  material::IStringPtr arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< material::MaterialFluid > tempshared1 ;
  std::shared_ptr< material::MaterialFluid > *smartarg1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "MaterialFluid_SetClass", 2, 2, swig_obj)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_material__MaterialFluid_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MaterialFluid_SetClass" "', argument " "1"" of type '" "material::MaterialFluid *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  material::MaterialFluid > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  material::MaterialFluid > * >(argp1);
      arg1 = const_cast< material::MaterialFluid * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  material::MaterialFluid > * >(argp1);
      arg1 = const_cast< material::MaterialFluid * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    int newmem = 0;
    res2 = SWIG_ConvertPtrAndOwn(swig_obj[1], &argp2, SWIGTYPE_p_std__shared_ptrT_values__IString_t,  0 , &newmem);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MaterialFluid_SetClass" "', argument " "2"" of type '" "material::IStringPtr""'");
    }
    if (argp2) arg2 = *(reinterpret_cast< material::IStringPtr * >(argp2));
    if (newmem & SWIG_CAST_NEW_MEMORY) delete reinterpret_cast< material::IStringPtr * >(argp2);
  }
  (arg1)->SetClass(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MaterialFluid_SetGroup(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  material::MaterialFluid *arg1 = (material::MaterialFluid *) 0 ;
  material::IStringPtr arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< material::MaterialFluid > tempshared1 ;
  std::shared_ptr< material::MaterialFluid > *smartarg1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "MaterialFluid_SetGroup", 2, 2, swig_obj)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_material__MaterialFluid_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MaterialFluid_SetGroup" "', argument " "1"" of type '" "material::MaterialFluid *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  material::MaterialFluid > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  material::MaterialFluid > * >(argp1);
      arg1 = const_cast< material::MaterialFluid * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  material::MaterialFluid > * >(argp1);
      arg1 = const_cast< material::MaterialFluid * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    int newmem = 0;
    res2 = SWIG_ConvertPtrAndOwn(swig_obj[1], &argp2, SWIGTYPE_p_std__shared_ptrT_values__IString_t,  0 , &newmem);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MaterialFluid_SetGroup" "', argument " "2"" of type '" "material::IStringPtr""'");
    }
    if (argp2) arg2 = *(reinterpret_cast< material::IStringPtr * >(argp2));
    if (newmem & SWIG_CAST_NEW_MEMORY) delete reinterpret_cast< material::IStringPtr * >(argp2);
  }
  (arg1)->SetGroup(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MaterialFluid_SetDescription(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  material::MaterialFluid *arg1 = (material::MaterialFluid *) 0 ;
  material::IStringPtr arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< material::MaterialFluid > tempshared1 ;
  std::shared_ptr< material::MaterialFluid > *smartarg1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "MaterialFluid_SetDescription", 2, 2, swig_obj)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_material__MaterialFluid_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MaterialFluid_SetDescription" "', argument " "1"" of type '" "material::MaterialFluid *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  material::MaterialFluid > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  material::MaterialFluid > * >(argp1);
      arg1 = const_cast< material::MaterialFluid * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  material::MaterialFluid > * >(argp1);
      arg1 = const_cast< material::MaterialFluid * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    int newmem = 0;
    res2 = SWIG_ConvertPtrAndOwn(swig_obj[1], &argp2, SWIGTYPE_p_std__shared_ptrT_values__IString_t,  0 , &newmem);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MaterialFluid_SetDescription" "', argument " "2"" of type '" "material::IStringPtr""'");
    }
    if (argp2) arg2 = *(reinterpret_cast< material::IStringPtr * >(argp2));
    if (newmem & SWIG_CAST_NEW_MEMORY) delete reinterpret_cast< material::IStringPtr * >(argp2);
  }
  (arg1)->SetDescription(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MaterialFluid_SetName(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  material::MaterialFluid *arg1 = (material::MaterialFluid *) 0 ;
  material::IStringPtr arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< material::MaterialFluid > tempshared1 ;
  std::shared_ptr< material::MaterialFluid > *smartarg1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "MaterialFluid_SetName", 2, 2, swig_obj)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_material__MaterialFluid_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MaterialFluid_SetName" "', argument " "1"" of type '" "material::MaterialFluid *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  material::MaterialFluid > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  material::MaterialFluid > * >(argp1);
      arg1 = const_cast< material::MaterialFluid * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  material::MaterialFluid > * >(argp1);
      arg1 = const_cast< material::MaterialFluid * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    int newmem = 0;
    res2 = SWIG_ConvertPtrAndOwn(swig_obj[1], &argp2, SWIGTYPE_p_std__shared_ptrT_values__IString_t,  0 , &newmem);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MaterialFluid_SetName" "', argument " "2"" of type '" "material::IStringPtr""'");
    }
    if (argp2) arg2 = *(reinterpret_cast< material::IStringPtr * >(argp2));
    if (newmem & SWIG_CAST_NEW_MEMORY) delete reinterpret_cast< material::IStringPtr * >(argp2);
  }
  (arg1)->SetName(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MaterialFluid_SetTag(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  material::MaterialFluid *arg1 = (material::MaterialFluid *) 0 ;
  material::Tag *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< material::MaterialFluid > tempshared1 ;
  std::shared_ptr< material::MaterialFluid > *smartarg1 = 0 ;
  material::Tag temp2 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "MaterialFluid_SetTag", 2, 2, swig_obj)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_material__MaterialFluid_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MaterialFluid_SetTag" "', argument " "1"" of type '" "material::MaterialFluid *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  material::MaterialFluid > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  material::MaterialFluid > * >(argp1);
      arg1 = const_cast< material::MaterialFluid * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  material::MaterialFluid > * >(argp1);
      arg1 = const_cast< material::MaterialFluid * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MaterialFluid_SetTag" "', argument " "2"" of type '" "material::Tag""'");
  } 
  temp2 = static_cast< material::Tag >(val2);
  arg2 = &temp2;
  (arg1)->SetTag((material::Tag const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MaterialFluid_GetDensity(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  material::MaterialFluid *arg1 = (material::MaterialFluid *) 0 ;
  material::Scalar arg2 ;
  material::Scalar arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< material::MaterialFluid const > tempshared1 ;
  std::shared_ptr< material::MaterialFluid const > *smartarg1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  material::Scalar result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "MaterialFluid_GetDensity", 3, 3, swig_obj)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_material__MaterialFluid_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MaterialFluid_GetDensity" "', argument " "1"" of type '" "material::MaterialFluid const *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const material::MaterialFluid > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const material::MaterialFluid > * >(argp1);
      arg1 = const_cast< material::MaterialFluid * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const material::MaterialFluid > * >(argp1);
      arg1 = const_cast< material::MaterialFluid * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MaterialFluid_GetDensity" "', argument " "2"" of type '" "material::Scalar""'");
  } 
  arg2 = static_cast< material::Scalar >(val2);
  ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "MaterialFluid_GetDensity" "', argument " "3"" of type '" "material::Scalar""'");
  } 
  arg3 = static_cast< material::Scalar >(val3);
  result = (material::Scalar)((material::MaterialFluid const *)arg1)->GetDensity(arg2,arg3);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MaterialFluid_GetSpecificHeat(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  material::MaterialFluid *arg1 = (material::MaterialFluid *) 0 ;
  material::Scalar arg2 ;
  material::Scalar arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< material::MaterialFluid const > tempshared1 ;
  std::shared_ptr< material::MaterialFluid const > *smartarg1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  material::Scalar result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "MaterialFluid_GetSpecificHeat", 3, 3, swig_obj)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_material__MaterialFluid_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MaterialFluid_GetSpecificHeat" "', argument " "1"" of type '" "material::MaterialFluid const *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const material::MaterialFluid > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const material::MaterialFluid > * >(argp1);
      arg1 = const_cast< material::MaterialFluid * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const material::MaterialFluid > * >(argp1);
      arg1 = const_cast< material::MaterialFluid * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MaterialFluid_GetSpecificHeat" "', argument " "2"" of type '" "material::Scalar""'");
  } 
  arg2 = static_cast< material::Scalar >(val2);
  ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "MaterialFluid_GetSpecificHeat" "', argument " "3"" of type '" "material::Scalar""'");
  } 
  arg3 = static_cast< material::Scalar >(val3);
  result = (material::Scalar)((material::MaterialFluid const *)arg1)->GetSpecificHeat(arg2,arg3);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MaterialFluid_GetThermalConductivity(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  material::MaterialFluid *arg1 = (material::MaterialFluid *) 0 ;
  material::Scalar arg2 ;
  material::Scalar arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< material::MaterialFluid const > tempshared1 ;
  std::shared_ptr< material::MaterialFluid const > *smartarg1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  material::Scalar result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "MaterialFluid_GetThermalConductivity", 3, 3, swig_obj)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_material__MaterialFluid_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MaterialFluid_GetThermalConductivity" "', argument " "1"" of type '" "material::MaterialFluid const *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const material::MaterialFluid > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const material::MaterialFluid > * >(argp1);
      arg1 = const_cast< material::MaterialFluid * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const material::MaterialFluid > * >(argp1);
      arg1 = const_cast< material::MaterialFluid * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MaterialFluid_GetThermalConductivity" "', argument " "2"" of type '" "material::Scalar""'");
  } 
  arg2 = static_cast< material::Scalar >(val2);
  ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "MaterialFluid_GetThermalConductivity" "', argument " "3"" of type '" "material::Scalar""'");
  } 
  arg3 = static_cast< material::Scalar >(val3);
  result = (material::Scalar)((material::MaterialFluid const *)arg1)->GetThermalConductivity(arg2,arg3);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MaterialFluid_SetDensity(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  material::MaterialFluid *arg1 = (material::MaterialFluid *) 0 ;
  material::IScalar2DPtr arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< material::MaterialFluid > tempshared1 ;
  std::shared_ptr< material::MaterialFluid > *smartarg1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "MaterialFluid_SetDensity", 2, 2, swig_obj)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_material__MaterialFluid_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MaterialFluid_SetDensity" "', argument " "1"" of type '" "material::MaterialFluid *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  material::MaterialFluid > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  material::MaterialFluid > * >(argp1);
      arg1 = const_cast< material::MaterialFluid * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  material::MaterialFluid > * >(argp1);
      arg1 = const_cast< material::MaterialFluid * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    int newmem = 0;
    res2 = SWIG_ConvertPtrAndOwn(swig_obj[1], &argp2, SWIGTYPE_p_std__shared_ptrT_values__IScalar2D_t,  0 , &newmem);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MaterialFluid_SetDensity" "', argument " "2"" of type '" "material::IScalar2DPtr""'");
    }
    if (argp2) arg2 = *(reinterpret_cast< material::IScalar2DPtr * >(argp2));
    if (newmem & SWIG_CAST_NEW_MEMORY) delete reinterpret_cast< material::IScalar2DPtr * >(argp2);
  }
  (arg1)->SetDensity(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MaterialFluid_SetSpecificHeat(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  material::MaterialFluid *arg1 = (material::MaterialFluid *) 0 ;
  material::IScalar2DPtr arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< material::MaterialFluid > tempshared1 ;
  std::shared_ptr< material::MaterialFluid > *smartarg1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "MaterialFluid_SetSpecificHeat", 2, 2, swig_obj)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_material__MaterialFluid_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MaterialFluid_SetSpecificHeat" "', argument " "1"" of type '" "material::MaterialFluid *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  material::MaterialFluid > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  material::MaterialFluid > * >(argp1);
      arg1 = const_cast< material::MaterialFluid * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  material::MaterialFluid > * >(argp1);
      arg1 = const_cast< material::MaterialFluid * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    int newmem = 0;
    res2 = SWIG_ConvertPtrAndOwn(swig_obj[1], &argp2, SWIGTYPE_p_std__shared_ptrT_values__IScalar2D_t,  0 , &newmem);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MaterialFluid_SetSpecificHeat" "', argument " "2"" of type '" "material::IScalar2DPtr""'");
    }
    if (argp2) arg2 = *(reinterpret_cast< material::IScalar2DPtr * >(argp2));
    if (newmem & SWIG_CAST_NEW_MEMORY) delete reinterpret_cast< material::IScalar2DPtr * >(argp2);
  }
  (arg1)->SetSpecificHeat(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MaterialFluid_SetThermalConductivity(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  material::MaterialFluid *arg1 = (material::MaterialFluid *) 0 ;
  material::IScalar2DPtr arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< material::MaterialFluid > tempshared1 ;
  std::shared_ptr< material::MaterialFluid > *smartarg1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "MaterialFluid_SetThermalConductivity", 2, 2, swig_obj)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_material__MaterialFluid_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MaterialFluid_SetThermalConductivity" "', argument " "1"" of type '" "material::MaterialFluid *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  material::MaterialFluid > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  material::MaterialFluid > * >(argp1);
      arg1 = const_cast< material::MaterialFluid * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  material::MaterialFluid > * >(argp1);
      arg1 = const_cast< material::MaterialFluid * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    int newmem = 0;
    res2 = SWIG_ConvertPtrAndOwn(swig_obj[1], &argp2, SWIGTYPE_p_std__shared_ptrT_values__IScalar2D_t,  0 , &newmem);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MaterialFluid_SetThermalConductivity" "', argument " "2"" of type '" "material::IScalar2DPtr""'");
    }
    if (argp2) arg2 = *(reinterpret_cast< material::IScalar2DPtr * >(argp2));
    if (newmem & SWIG_CAST_NEW_MEMORY) delete reinterpret_cast< material::IScalar2DPtr * >(argp2);
  }
  (arg1)->SetThermalConductivity(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MaterialFluid_GetDynamicViscosity(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  material::MaterialFluid *arg1 = (material::MaterialFluid *) 0 ;
  material::Scalar arg2 ;
  material::Scalar arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< material::MaterialFluid const > tempshared1 ;
  std::shared_ptr< material::MaterialFluid const > *smartarg1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  material::Scalar result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "MaterialFluid_GetDynamicViscosity", 3, 3, swig_obj)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_material__MaterialFluid_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MaterialFluid_GetDynamicViscosity" "', argument " "1"" of type '" "material::MaterialFluid const *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const material::MaterialFluid > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const material::MaterialFluid > * >(argp1);
      arg1 = const_cast< material::MaterialFluid * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const material::MaterialFluid > * >(argp1);
      arg1 = const_cast< material::MaterialFluid * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MaterialFluid_GetDynamicViscosity" "', argument " "2"" of type '" "material::Scalar""'");
  } 
  arg2 = static_cast< material::Scalar >(val2);
  ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "MaterialFluid_GetDynamicViscosity" "', argument " "3"" of type '" "material::Scalar""'");
  } 
  arg3 = static_cast< material::Scalar >(val3);
  result = (material::Scalar)((material::MaterialFluid const *)arg1)->GetDynamicViscosity(arg2,arg3);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MaterialFluid_SetDynamicViscosity(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  material::MaterialFluid *arg1 = (material::MaterialFluid *) 0 ;
  material::IScalar2DPtr arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< material::MaterialFluid > tempshared1 ;
  std::shared_ptr< material::MaterialFluid > *smartarg1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "MaterialFluid_SetDynamicViscosity", 2, 2, swig_obj)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_material__MaterialFluid_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MaterialFluid_SetDynamicViscosity" "', argument " "1"" of type '" "material::MaterialFluid *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  material::MaterialFluid > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  material::MaterialFluid > * >(argp1);
      arg1 = const_cast< material::MaterialFluid * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  material::MaterialFluid > * >(argp1);
      arg1 = const_cast< material::MaterialFluid * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    int newmem = 0;
    res2 = SWIG_ConvertPtrAndOwn(swig_obj[1], &argp2, SWIGTYPE_p_std__shared_ptrT_values__IScalar2D_t,  0 , &newmem);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MaterialFluid_SetDynamicViscosity" "', argument " "2"" of type '" "material::IScalar2DPtr""'");
    }
    if (argp2) arg2 = *(reinterpret_cast< material::IScalar2DPtr * >(argp2));
    if (newmem & SWIG_CAST_NEW_MEMORY) delete reinterpret_cast< material::IScalar2DPtr * >(argp2);
  }
  (arg1)->SetDynamicViscosity(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MaterialFluid_D(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  material::MaterialFluid *arg1 = (material::MaterialFluid *) 0 ;
  material::Scalar arg2 ;
  material::Scalar arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< material::MaterialFluid const > tempshared1 ;
  std::shared_ptr< material::MaterialFluid const > *smartarg1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  material::Matrix result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "MaterialFluid_D", 3, 3, swig_obj)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_material__MaterialFluid_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MaterialFluid_D" "', argument " "1"" of type '" "material::MaterialFluid const *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const material::MaterialFluid > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const material::MaterialFluid > * >(argp1);
      arg1 = const_cast< material::MaterialFluid * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const material::MaterialFluid > * >(argp1);
      arg1 = const_cast< material::MaterialFluid * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MaterialFluid_D" "', argument " "2"" of type '" "material::Scalar""'");
  } 
  arg2 = static_cast< material::Scalar >(val2);
  ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "MaterialFluid_D" "', argument " "3"" of type '" "material::Scalar""'");
  } 
  arg3 = static_cast< material::Scalar >(val3);
  result = ((material::MaterialFluid const *)arg1)->D(arg2,arg3);
  resultobj = SWIG_NewPointerObj((new material::Matrix(result)), SWIGTYPE_p_eilig__Matrix, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MaterialFluid_K(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  material::MaterialFluid *arg1 = (material::MaterialFluid *) 0 ;
  material::Scalar arg2 ;
  material::Scalar arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< material::MaterialFluid const > tempshared1 ;
  std::shared_ptr< material::MaterialFluid const > *smartarg1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  material::Matrix result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "MaterialFluid_K", 3, 3, swig_obj)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_material__MaterialFluid_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MaterialFluid_K" "', argument " "1"" of type '" "material::MaterialFluid const *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const material::MaterialFluid > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const material::MaterialFluid > * >(argp1);
      arg1 = const_cast< material::MaterialFluid * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const material::MaterialFluid > * >(argp1);
      arg1 = const_cast< material::MaterialFluid * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MaterialFluid_K" "', argument " "2"" of type '" "material::Scalar""'");
  } 
  arg2 = static_cast< material::Scalar >(val2);
  ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "MaterialFluid_K" "', argument " "3"" of type '" "material::Scalar""'");
  } 
  arg3 = static_cast< material::Scalar >(val3);
  result = ((material::MaterialFluid const *)arg1)->K(arg2,arg3);
  resultobj = SWIG_NewPointerObj((new material::Matrix(result)), SWIGTYPE_p_eilig__Matrix, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *MaterialFluid_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_std__shared_ptrT_material__MaterialFluid_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_CreateMaterialSolid(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  material::Tag arg1 ;
  size_t val1 ;
  int ecode1 = 0 ;
  PyObject *swig_obj[1] ;
  material::MaterialSolidPtr result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  ecode1 = SWIG_AsVal_size_t(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "CreateMaterialSolid" "', argument " "1"" of type '" "material::Tag""'");
  } 
  arg1 = static_cast< material::Tag >(val1);
  result = material::CreateMaterialSolid(SWIG_STD_MOVE(arg1));
  {
    std::shared_ptr<  material::MaterialSolid > *smartresult = result ? new std::shared_ptr<  material::MaterialSolid >(result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_std__shared_ptrT_material__MaterialSolid_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_MaterialSolid(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  material::MaterialSolid *arg1 = (material::MaterialSolid *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< material::MaterialSolid > tempshared1 ;
  std::shared_ptr< material::MaterialSolid > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_material__MaterialSolid_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_MaterialSolid" "', argument " "1"" of type '" "material::MaterialSolid *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  material::MaterialSolid > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  material::MaterialSolid > * >(argp1);
      arg1 = const_cast< material::MaterialSolid * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  material::MaterialSolid > * >(argp1);
      arg1 = const_cast< material::MaterialSolid * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  (void)arg1; delete smartarg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MaterialSolid_Create(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  material::MaterialSolidPtr result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "MaterialSolid_Create", 0, 0, 0)) SWIG_fail;
  result = material::MaterialSolid::Create();
  {
    std::shared_ptr<  material::MaterialSolid > *smartresult = result ? new std::shared_ptr<  material::MaterialSolid >(result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_std__shared_ptrT_material__MaterialSolid_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MaterialSolid_GetPtr__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  material::MaterialSolid *arg1 = (material::MaterialSolid *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< material::MaterialSolid > tempshared1 ;
  std::shared_ptr< material::MaterialSolid > *smartarg1 = 0 ;
  material::MaterialSolidPtr result;
  
  (void)self;
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_material__MaterialSolid_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MaterialSolid_GetPtr" "', argument " "1"" of type '" "material::MaterialSolid *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  material::MaterialSolid > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  material::MaterialSolid > * >(argp1);
      arg1 = const_cast< material::MaterialSolid * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  material::MaterialSolid > * >(argp1);
      arg1 = const_cast< material::MaterialSolid * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = (arg1)->GetPtr();
  {
    std::shared_ptr<  material::MaterialSolid > *smartresult = result ? new std::shared_ptr<  material::MaterialSolid >(result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_std__shared_ptrT_material__MaterialSolid_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MaterialSolid_GetPtr__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  material::MaterialSolid *arg1 = (material::MaterialSolid *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< material::MaterialSolid const > tempshared1 ;
  std::shared_ptr< material::MaterialSolid const > *smartarg1 = 0 ;
  material::ConstMaterialSolidPtr result;
  
  (void)self;
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_material__MaterialSolid_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MaterialSolid_GetPtr" "', argument " "1"" of type '" "material::MaterialSolid const *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const material::MaterialSolid > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const material::MaterialSolid > * >(argp1);
      arg1 = const_cast< material::MaterialSolid * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const material::MaterialSolid > * >(argp1);
      arg1 = const_cast< material::MaterialSolid * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = ((material::MaterialSolid const *)arg1)->GetPtr();
  {
    std::shared_ptr< const material::MaterialSolid > *smartresult = result ? new std::shared_ptr< const material::MaterialSolid >(result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_std__shared_ptrT_material__MaterialSolid_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MaterialSolid_GetPtr(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "MaterialSolid_GetPtr", 0, 1, argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    int _v = 0;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_std__shared_ptrT_material__MaterialSolid_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_MaterialSolid_GetPtr__SWIG_0(self, argc, argv);
    }
  }
  if (argc == 1) {
    int _v = 0;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_std__shared_ptrT_material__MaterialSolid_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_MaterialSolid_GetPtr__SWIG_1(self, argc, argv);
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'MaterialSolid_GetPtr'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    material::MaterialSolid::GetPtr()\n"
    "    material::MaterialSolid::GetPtr() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_MaterialSolid_GetTag(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  material::MaterialSolid *arg1 = (material::MaterialSolid *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< material::MaterialSolid const > tempshared1 ;
  std::shared_ptr< material::MaterialSolid const > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  material::Tag result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_material__MaterialSolid_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MaterialSolid_GetTag" "', argument " "1"" of type '" "material::MaterialSolid const *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const material::MaterialSolid > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const material::MaterialSolid > * >(argp1);
      arg1 = const_cast< material::MaterialSolid * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const material::MaterialSolid > * >(argp1);
      arg1 = const_cast< material::MaterialSolid * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = ((material::MaterialSolid const *)arg1)->GetTag();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MaterialSolid_GetType(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  material::MaterialSolid *arg1 = (material::MaterialSolid *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< material::MaterialSolid const > tempshared1 ;
  std::shared_ptr< material::MaterialSolid const > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  material::Type result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_material__MaterialSolid_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MaterialSolid_GetType" "', argument " "1"" of type '" "material::MaterialSolid const *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const material::MaterialSolid > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const material::MaterialSolid > * >(argp1);
      arg1 = const_cast< material::MaterialSolid * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const material::MaterialSolid > * >(argp1);
      arg1 = const_cast< material::MaterialSolid * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = ((material::MaterialSolid const *)arg1)->GetType();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MaterialSolid_GetClass(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  material::MaterialSolid *arg1 = (material::MaterialSolid *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< material::MaterialSolid const > tempshared1 ;
  std::shared_ptr< material::MaterialSolid const > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  material::String result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_material__MaterialSolid_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MaterialSolid_GetClass" "', argument " "1"" of type '" "material::MaterialSolid const *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const material::MaterialSolid > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const material::MaterialSolid > * >(argp1);
      arg1 = const_cast< material::MaterialSolid * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const material::MaterialSolid > * >(argp1);
      arg1 = const_cast< material::MaterialSolid * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = ((material::MaterialSolid const *)arg1)->GetClass();
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MaterialSolid_GetGroup(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  material::MaterialSolid *arg1 = (material::MaterialSolid *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< material::MaterialSolid const > tempshared1 ;
  std::shared_ptr< material::MaterialSolid const > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  material::String result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_material__MaterialSolid_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MaterialSolid_GetGroup" "', argument " "1"" of type '" "material::MaterialSolid const *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const material::MaterialSolid > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const material::MaterialSolid > * >(argp1);
      arg1 = const_cast< material::MaterialSolid * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const material::MaterialSolid > * >(argp1);
      arg1 = const_cast< material::MaterialSolid * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = ((material::MaterialSolid const *)arg1)->GetGroup();
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MaterialSolid_GetDescription(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  material::MaterialSolid *arg1 = (material::MaterialSolid *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< material::MaterialSolid const > tempshared1 ;
  std::shared_ptr< material::MaterialSolid const > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  material::String result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_material__MaterialSolid_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MaterialSolid_GetDescription" "', argument " "1"" of type '" "material::MaterialSolid const *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const material::MaterialSolid > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const material::MaterialSolid > * >(argp1);
      arg1 = const_cast< material::MaterialSolid * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const material::MaterialSolid > * >(argp1);
      arg1 = const_cast< material::MaterialSolid * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = ((material::MaterialSolid const *)arg1)->GetDescription();
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MaterialSolid_GetName(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  material::MaterialSolid *arg1 = (material::MaterialSolid *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< material::MaterialSolid const > tempshared1 ;
  std::shared_ptr< material::MaterialSolid const > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  material::String result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_material__MaterialSolid_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MaterialSolid_GetName" "', argument " "1"" of type '" "material::MaterialSolid const *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const material::MaterialSolid > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const material::MaterialSolid > * >(argp1);
      arg1 = const_cast< material::MaterialSolid * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const material::MaterialSolid > * >(argp1);
      arg1 = const_cast< material::MaterialSolid * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = ((material::MaterialSolid const *)arg1)->GetName();
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MaterialSolid_SetClass(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  material::MaterialSolid *arg1 = (material::MaterialSolid *) 0 ;
  material::IStringPtr arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< material::MaterialSolid > tempshared1 ;
  std::shared_ptr< material::MaterialSolid > *smartarg1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "MaterialSolid_SetClass", 2, 2, swig_obj)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_material__MaterialSolid_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MaterialSolid_SetClass" "', argument " "1"" of type '" "material::MaterialSolid *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  material::MaterialSolid > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  material::MaterialSolid > * >(argp1);
      arg1 = const_cast< material::MaterialSolid * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  material::MaterialSolid > * >(argp1);
      arg1 = const_cast< material::MaterialSolid * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    int newmem = 0;
    res2 = SWIG_ConvertPtrAndOwn(swig_obj[1], &argp2, SWIGTYPE_p_std__shared_ptrT_values__IString_t,  0 , &newmem);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MaterialSolid_SetClass" "', argument " "2"" of type '" "material::IStringPtr""'");
    }
    if (argp2) arg2 = *(reinterpret_cast< material::IStringPtr * >(argp2));
    if (newmem & SWIG_CAST_NEW_MEMORY) delete reinterpret_cast< material::IStringPtr * >(argp2);
  }
  (arg1)->SetClass(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MaterialSolid_SetGroup(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  material::MaterialSolid *arg1 = (material::MaterialSolid *) 0 ;
  material::IStringPtr arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< material::MaterialSolid > tempshared1 ;
  std::shared_ptr< material::MaterialSolid > *smartarg1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "MaterialSolid_SetGroup", 2, 2, swig_obj)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_material__MaterialSolid_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MaterialSolid_SetGroup" "', argument " "1"" of type '" "material::MaterialSolid *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  material::MaterialSolid > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  material::MaterialSolid > * >(argp1);
      arg1 = const_cast< material::MaterialSolid * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  material::MaterialSolid > * >(argp1);
      arg1 = const_cast< material::MaterialSolid * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    int newmem = 0;
    res2 = SWIG_ConvertPtrAndOwn(swig_obj[1], &argp2, SWIGTYPE_p_std__shared_ptrT_values__IString_t,  0 , &newmem);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MaterialSolid_SetGroup" "', argument " "2"" of type '" "material::IStringPtr""'");
    }
    if (argp2) arg2 = *(reinterpret_cast< material::IStringPtr * >(argp2));
    if (newmem & SWIG_CAST_NEW_MEMORY) delete reinterpret_cast< material::IStringPtr * >(argp2);
  }
  (arg1)->SetGroup(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MaterialSolid_SetDescription(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  material::MaterialSolid *arg1 = (material::MaterialSolid *) 0 ;
  material::IStringPtr arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< material::MaterialSolid > tempshared1 ;
  std::shared_ptr< material::MaterialSolid > *smartarg1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "MaterialSolid_SetDescription", 2, 2, swig_obj)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_material__MaterialSolid_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MaterialSolid_SetDescription" "', argument " "1"" of type '" "material::MaterialSolid *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  material::MaterialSolid > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  material::MaterialSolid > * >(argp1);
      arg1 = const_cast< material::MaterialSolid * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  material::MaterialSolid > * >(argp1);
      arg1 = const_cast< material::MaterialSolid * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    int newmem = 0;
    res2 = SWIG_ConvertPtrAndOwn(swig_obj[1], &argp2, SWIGTYPE_p_std__shared_ptrT_values__IString_t,  0 , &newmem);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MaterialSolid_SetDescription" "', argument " "2"" of type '" "material::IStringPtr""'");
    }
    if (argp2) arg2 = *(reinterpret_cast< material::IStringPtr * >(argp2));
    if (newmem & SWIG_CAST_NEW_MEMORY) delete reinterpret_cast< material::IStringPtr * >(argp2);
  }
  (arg1)->SetDescription(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MaterialSolid_SetName(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  material::MaterialSolid *arg1 = (material::MaterialSolid *) 0 ;
  material::IStringPtr arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< material::MaterialSolid > tempshared1 ;
  std::shared_ptr< material::MaterialSolid > *smartarg1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "MaterialSolid_SetName", 2, 2, swig_obj)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_material__MaterialSolid_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MaterialSolid_SetName" "', argument " "1"" of type '" "material::MaterialSolid *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  material::MaterialSolid > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  material::MaterialSolid > * >(argp1);
      arg1 = const_cast< material::MaterialSolid * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  material::MaterialSolid > * >(argp1);
      arg1 = const_cast< material::MaterialSolid * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    int newmem = 0;
    res2 = SWIG_ConvertPtrAndOwn(swig_obj[1], &argp2, SWIGTYPE_p_std__shared_ptrT_values__IString_t,  0 , &newmem);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MaterialSolid_SetName" "', argument " "2"" of type '" "material::IStringPtr""'");
    }
    if (argp2) arg2 = *(reinterpret_cast< material::IStringPtr * >(argp2));
    if (newmem & SWIG_CAST_NEW_MEMORY) delete reinterpret_cast< material::IStringPtr * >(argp2);
  }
  (arg1)->SetName(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MaterialSolid_SetTag(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  material::MaterialSolid *arg1 = (material::MaterialSolid *) 0 ;
  material::Tag *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< material::MaterialSolid > tempshared1 ;
  std::shared_ptr< material::MaterialSolid > *smartarg1 = 0 ;
  material::Tag temp2 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "MaterialSolid_SetTag", 2, 2, swig_obj)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_material__MaterialSolid_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MaterialSolid_SetTag" "', argument " "1"" of type '" "material::MaterialSolid *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  material::MaterialSolid > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  material::MaterialSolid > * >(argp1);
      arg1 = const_cast< material::MaterialSolid * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  material::MaterialSolid > * >(argp1);
      arg1 = const_cast< material::MaterialSolid * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MaterialSolid_SetTag" "', argument " "2"" of type '" "material::Tag""'");
  } 
  temp2 = static_cast< material::Tag >(val2);
  arg2 = &temp2;
  (arg1)->SetTag((material::Tag const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MaterialSolid_GetDensity(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  material::MaterialSolid *arg1 = (material::MaterialSolid *) 0 ;
  material::Scalar arg2 ;
  material::Scalar arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< material::MaterialSolid const > tempshared1 ;
  std::shared_ptr< material::MaterialSolid const > *smartarg1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  material::Scalar result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "MaterialSolid_GetDensity", 3, 3, swig_obj)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_material__MaterialSolid_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MaterialSolid_GetDensity" "', argument " "1"" of type '" "material::MaterialSolid const *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const material::MaterialSolid > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const material::MaterialSolid > * >(argp1);
      arg1 = const_cast< material::MaterialSolid * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const material::MaterialSolid > * >(argp1);
      arg1 = const_cast< material::MaterialSolid * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MaterialSolid_GetDensity" "', argument " "2"" of type '" "material::Scalar""'");
  } 
  arg2 = static_cast< material::Scalar >(val2);
  ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "MaterialSolid_GetDensity" "', argument " "3"" of type '" "material::Scalar""'");
  } 
  arg3 = static_cast< material::Scalar >(val3);
  result = (material::Scalar)((material::MaterialSolid const *)arg1)->GetDensity(arg2,arg3);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MaterialSolid_GetSpecificHeat(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  material::MaterialSolid *arg1 = (material::MaterialSolid *) 0 ;
  material::Scalar arg2 ;
  material::Scalar arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< material::MaterialSolid const > tempshared1 ;
  std::shared_ptr< material::MaterialSolid const > *smartarg1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  material::Scalar result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "MaterialSolid_GetSpecificHeat", 3, 3, swig_obj)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_material__MaterialSolid_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MaterialSolid_GetSpecificHeat" "', argument " "1"" of type '" "material::MaterialSolid const *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const material::MaterialSolid > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const material::MaterialSolid > * >(argp1);
      arg1 = const_cast< material::MaterialSolid * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const material::MaterialSolid > * >(argp1);
      arg1 = const_cast< material::MaterialSolid * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MaterialSolid_GetSpecificHeat" "', argument " "2"" of type '" "material::Scalar""'");
  } 
  arg2 = static_cast< material::Scalar >(val2);
  ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "MaterialSolid_GetSpecificHeat" "', argument " "3"" of type '" "material::Scalar""'");
  } 
  arg3 = static_cast< material::Scalar >(val3);
  result = (material::Scalar)((material::MaterialSolid const *)arg1)->GetSpecificHeat(arg2,arg3);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MaterialSolid_GetThermalConductivity(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  material::MaterialSolid *arg1 = (material::MaterialSolid *) 0 ;
  material::Scalar arg2 ;
  material::Scalar arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< material::MaterialSolid const > tempshared1 ;
  std::shared_ptr< material::MaterialSolid const > *smartarg1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  material::Scalar result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "MaterialSolid_GetThermalConductivity", 3, 3, swig_obj)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_material__MaterialSolid_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MaterialSolid_GetThermalConductivity" "', argument " "1"" of type '" "material::MaterialSolid const *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const material::MaterialSolid > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const material::MaterialSolid > * >(argp1);
      arg1 = const_cast< material::MaterialSolid * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const material::MaterialSolid > * >(argp1);
      arg1 = const_cast< material::MaterialSolid * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MaterialSolid_GetThermalConductivity" "', argument " "2"" of type '" "material::Scalar""'");
  } 
  arg2 = static_cast< material::Scalar >(val2);
  ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "MaterialSolid_GetThermalConductivity" "', argument " "3"" of type '" "material::Scalar""'");
  } 
  arg3 = static_cast< material::Scalar >(val3);
  result = (material::Scalar)((material::MaterialSolid const *)arg1)->GetThermalConductivity(arg2,arg3);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MaterialSolid_GetThermalExpansion(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  material::MaterialSolid *arg1 = (material::MaterialSolid *) 0 ;
  material::Scalar arg2 ;
  material::Scalar arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< material::MaterialSolid const > tempshared1 ;
  std::shared_ptr< material::MaterialSolid const > *smartarg1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  material::Scalar result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "MaterialSolid_GetThermalExpansion", 3, 3, swig_obj)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_material__MaterialSolid_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MaterialSolid_GetThermalExpansion" "', argument " "1"" of type '" "material::MaterialSolid const *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const material::MaterialSolid > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const material::MaterialSolid > * >(argp1);
      arg1 = const_cast< material::MaterialSolid * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const material::MaterialSolid > * >(argp1);
      arg1 = const_cast< material::MaterialSolid * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MaterialSolid_GetThermalExpansion" "', argument " "2"" of type '" "material::Scalar""'");
  } 
  arg2 = static_cast< material::Scalar >(val2);
  ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "MaterialSolid_GetThermalExpansion" "', argument " "3"" of type '" "material::Scalar""'");
  } 
  arg3 = static_cast< material::Scalar >(val3);
  result = (material::Scalar)((material::MaterialSolid const *)arg1)->GetThermalExpansion(arg2,arg3);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MaterialSolid_SetDensity(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  material::MaterialSolid *arg1 = (material::MaterialSolid *) 0 ;
  material::IScalar2DPtr arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< material::MaterialSolid > tempshared1 ;
  std::shared_ptr< material::MaterialSolid > *smartarg1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "MaterialSolid_SetDensity", 2, 2, swig_obj)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_material__MaterialSolid_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MaterialSolid_SetDensity" "', argument " "1"" of type '" "material::MaterialSolid *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  material::MaterialSolid > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  material::MaterialSolid > * >(argp1);
      arg1 = const_cast< material::MaterialSolid * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  material::MaterialSolid > * >(argp1);
      arg1 = const_cast< material::MaterialSolid * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    int newmem = 0;
    res2 = SWIG_ConvertPtrAndOwn(swig_obj[1], &argp2, SWIGTYPE_p_std__shared_ptrT_values__IScalar2D_t,  0 , &newmem);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MaterialSolid_SetDensity" "', argument " "2"" of type '" "material::IScalar2DPtr""'");
    }
    if (argp2) arg2 = *(reinterpret_cast< material::IScalar2DPtr * >(argp2));
    if (newmem & SWIG_CAST_NEW_MEMORY) delete reinterpret_cast< material::IScalar2DPtr * >(argp2);
  }
  (arg1)->SetDensity(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MaterialSolid_SetSpecificHeat(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  material::MaterialSolid *arg1 = (material::MaterialSolid *) 0 ;
  material::IScalar2DPtr arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< material::MaterialSolid > tempshared1 ;
  std::shared_ptr< material::MaterialSolid > *smartarg1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "MaterialSolid_SetSpecificHeat", 2, 2, swig_obj)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_material__MaterialSolid_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MaterialSolid_SetSpecificHeat" "', argument " "1"" of type '" "material::MaterialSolid *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  material::MaterialSolid > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  material::MaterialSolid > * >(argp1);
      arg1 = const_cast< material::MaterialSolid * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  material::MaterialSolid > * >(argp1);
      arg1 = const_cast< material::MaterialSolid * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    int newmem = 0;
    res2 = SWIG_ConvertPtrAndOwn(swig_obj[1], &argp2, SWIGTYPE_p_std__shared_ptrT_values__IScalar2D_t,  0 , &newmem);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MaterialSolid_SetSpecificHeat" "', argument " "2"" of type '" "material::IScalar2DPtr""'");
    }
    if (argp2) arg2 = *(reinterpret_cast< material::IScalar2DPtr * >(argp2));
    if (newmem & SWIG_CAST_NEW_MEMORY) delete reinterpret_cast< material::IScalar2DPtr * >(argp2);
  }
  (arg1)->SetSpecificHeat(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MaterialSolid_SetThermalConductivity(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  material::MaterialSolid *arg1 = (material::MaterialSolid *) 0 ;
  material::IScalar2DPtr arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< material::MaterialSolid > tempshared1 ;
  std::shared_ptr< material::MaterialSolid > *smartarg1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "MaterialSolid_SetThermalConductivity", 2, 2, swig_obj)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_material__MaterialSolid_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MaterialSolid_SetThermalConductivity" "', argument " "1"" of type '" "material::MaterialSolid *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  material::MaterialSolid > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  material::MaterialSolid > * >(argp1);
      arg1 = const_cast< material::MaterialSolid * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  material::MaterialSolid > * >(argp1);
      arg1 = const_cast< material::MaterialSolid * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    int newmem = 0;
    res2 = SWIG_ConvertPtrAndOwn(swig_obj[1], &argp2, SWIGTYPE_p_std__shared_ptrT_values__IScalar2D_t,  0 , &newmem);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MaterialSolid_SetThermalConductivity" "', argument " "2"" of type '" "material::IScalar2DPtr""'");
    }
    if (argp2) arg2 = *(reinterpret_cast< material::IScalar2DPtr * >(argp2));
    if (newmem & SWIG_CAST_NEW_MEMORY) delete reinterpret_cast< material::IScalar2DPtr * >(argp2);
  }
  (arg1)->SetThermalConductivity(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MaterialSolid_GetPoissonRatio(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  material::MaterialSolid *arg1 = (material::MaterialSolid *) 0 ;
  material::Scalar arg2 ;
  material::Scalar arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< material::MaterialSolid const > tempshared1 ;
  std::shared_ptr< material::MaterialSolid const > *smartarg1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  material::Scalar result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "MaterialSolid_GetPoissonRatio", 3, 3, swig_obj)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_material__MaterialSolid_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MaterialSolid_GetPoissonRatio" "', argument " "1"" of type '" "material::MaterialSolid const *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const material::MaterialSolid > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const material::MaterialSolid > * >(argp1);
      arg1 = const_cast< material::MaterialSolid * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const material::MaterialSolid > * >(argp1);
      arg1 = const_cast< material::MaterialSolid * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MaterialSolid_GetPoissonRatio" "', argument " "2"" of type '" "material::Scalar""'");
  } 
  arg2 = static_cast< material::Scalar >(val2);
  ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "MaterialSolid_GetPoissonRatio" "', argument " "3"" of type '" "material::Scalar""'");
  } 
  arg3 = static_cast< material::Scalar >(val3);
  result = (material::Scalar)((material::MaterialSolid const *)arg1)->GetPoissonRatio(arg2,arg3);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MaterialSolid_GetElasticModulus(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  material::MaterialSolid *arg1 = (material::MaterialSolid *) 0 ;
  material::Scalar arg2 ;
  material::Scalar arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< material::MaterialSolid const > tempshared1 ;
  std::shared_ptr< material::MaterialSolid const > *smartarg1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  material::Scalar result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "MaterialSolid_GetElasticModulus", 3, 3, swig_obj)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_material__MaterialSolid_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MaterialSolid_GetElasticModulus" "', argument " "1"" of type '" "material::MaterialSolid const *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const material::MaterialSolid > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const material::MaterialSolid > * >(argp1);
      arg1 = const_cast< material::MaterialSolid * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const material::MaterialSolid > * >(argp1);
      arg1 = const_cast< material::MaterialSolid * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MaterialSolid_GetElasticModulus" "', argument " "2"" of type '" "material::Scalar""'");
  } 
  arg2 = static_cast< material::Scalar >(val2);
  ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "MaterialSolid_GetElasticModulus" "', argument " "3"" of type '" "material::Scalar""'");
  } 
  arg3 = static_cast< material::Scalar >(val3);
  result = (material::Scalar)((material::MaterialSolid const *)arg1)->GetElasticModulus(arg2,arg3);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MaterialSolid_GetTensileStrength(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  material::MaterialSolid *arg1 = (material::MaterialSolid *) 0 ;
  material::Scalar arg2 ;
  material::Scalar arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< material::MaterialSolid const > tempshared1 ;
  std::shared_ptr< material::MaterialSolid const > *smartarg1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  material::Scalar result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "MaterialSolid_GetTensileStrength", 3, 3, swig_obj)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_material__MaterialSolid_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MaterialSolid_GetTensileStrength" "', argument " "1"" of type '" "material::MaterialSolid const *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const material::MaterialSolid > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const material::MaterialSolid > * >(argp1);
      arg1 = const_cast< material::MaterialSolid * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const material::MaterialSolid > * >(argp1);
      arg1 = const_cast< material::MaterialSolid * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MaterialSolid_GetTensileStrength" "', argument " "2"" of type '" "material::Scalar""'");
  } 
  arg2 = static_cast< material::Scalar >(val2);
  ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "MaterialSolid_GetTensileStrength" "', argument " "3"" of type '" "material::Scalar""'");
  } 
  arg3 = static_cast< material::Scalar >(val3);
  result = (material::Scalar)((material::MaterialSolid const *)arg1)->GetTensileStrength(arg2,arg3);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MaterialSolid_GetYieldStrength(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  material::MaterialSolid *arg1 = (material::MaterialSolid *) 0 ;
  material::Scalar arg2 ;
  material::Scalar arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< material::MaterialSolid const > tempshared1 ;
  std::shared_ptr< material::MaterialSolid const > *smartarg1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  material::Scalar result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "MaterialSolid_GetYieldStrength", 3, 3, swig_obj)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_material__MaterialSolid_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MaterialSolid_GetYieldStrength" "', argument " "1"" of type '" "material::MaterialSolid const *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const material::MaterialSolid > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const material::MaterialSolid > * >(argp1);
      arg1 = const_cast< material::MaterialSolid * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const material::MaterialSolid > * >(argp1);
      arg1 = const_cast< material::MaterialSolid * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MaterialSolid_GetYieldStrength" "', argument " "2"" of type '" "material::Scalar""'");
  } 
  arg2 = static_cast< material::Scalar >(val2);
  ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "MaterialSolid_GetYieldStrength" "', argument " "3"" of type '" "material::Scalar""'");
  } 
  arg3 = static_cast< material::Scalar >(val3);
  result = (material::Scalar)((material::MaterialSolid const *)arg1)->GetYieldStrength(arg2,arg3);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MaterialSolid_GetShearStrength(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  material::MaterialSolid *arg1 = (material::MaterialSolid *) 0 ;
  material::Scalar arg2 ;
  material::Scalar arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< material::MaterialSolid const > tempshared1 ;
  std::shared_ptr< material::MaterialSolid const > *smartarg1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  material::Scalar result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "MaterialSolid_GetShearStrength", 3, 3, swig_obj)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_material__MaterialSolid_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MaterialSolid_GetShearStrength" "', argument " "1"" of type '" "material::MaterialSolid const *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const material::MaterialSolid > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const material::MaterialSolid > * >(argp1);
      arg1 = const_cast< material::MaterialSolid * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const material::MaterialSolid > * >(argp1);
      arg1 = const_cast< material::MaterialSolid * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MaterialSolid_GetShearStrength" "', argument " "2"" of type '" "material::Scalar""'");
  } 
  arg2 = static_cast< material::Scalar >(val2);
  ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "MaterialSolid_GetShearStrength" "', argument " "3"" of type '" "material::Scalar""'");
  } 
  arg3 = static_cast< material::Scalar >(val3);
  result = (material::Scalar)((material::MaterialSolid const *)arg1)->GetShearStrength(arg2,arg3);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MaterialSolid_GetLimitingSurfacePressure(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  material::MaterialSolid *arg1 = (material::MaterialSolid *) 0 ;
  material::Scalar arg2 ;
  material::Scalar arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< material::MaterialSolid const > tempshared1 ;
  std::shared_ptr< material::MaterialSolid const > *smartarg1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  material::Scalar result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "MaterialSolid_GetLimitingSurfacePressure", 3, 3, swig_obj)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_material__MaterialSolid_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MaterialSolid_GetLimitingSurfacePressure" "', argument " "1"" of type '" "material::MaterialSolid const *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const material::MaterialSolid > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const material::MaterialSolid > * >(argp1);
      arg1 = const_cast< material::MaterialSolid * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const material::MaterialSolid > * >(argp1);
      arg1 = const_cast< material::MaterialSolid * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MaterialSolid_GetLimitingSurfacePressure" "', argument " "2"" of type '" "material::Scalar""'");
  } 
  arg2 = static_cast< material::Scalar >(val2);
  ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "MaterialSolid_GetLimitingSurfacePressure" "', argument " "3"" of type '" "material::Scalar""'");
  } 
  arg3 = static_cast< material::Scalar >(val3);
  result = (material::Scalar)((material::MaterialSolid const *)arg1)->GetLimitingSurfacePressure(arg2,arg3);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MaterialSolid_SetPoissonRatio(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  material::MaterialSolid *arg1 = (material::MaterialSolid *) 0 ;
  material::IScalar2DPtr arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< material::MaterialSolid > tempshared1 ;
  std::shared_ptr< material::MaterialSolid > *smartarg1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "MaterialSolid_SetPoissonRatio", 2, 2, swig_obj)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_material__MaterialSolid_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MaterialSolid_SetPoissonRatio" "', argument " "1"" of type '" "material::MaterialSolid *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  material::MaterialSolid > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  material::MaterialSolid > * >(argp1);
      arg1 = const_cast< material::MaterialSolid * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  material::MaterialSolid > * >(argp1);
      arg1 = const_cast< material::MaterialSolid * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    int newmem = 0;
    res2 = SWIG_ConvertPtrAndOwn(swig_obj[1], &argp2, SWIGTYPE_p_std__shared_ptrT_values__IScalar2D_t,  0 , &newmem);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MaterialSolid_SetPoissonRatio" "', argument " "2"" of type '" "material::IScalar2DPtr""'");
    }
    if (argp2) arg2 = *(reinterpret_cast< material::IScalar2DPtr * >(argp2));
    if (newmem & SWIG_CAST_NEW_MEMORY) delete reinterpret_cast< material::IScalar2DPtr * >(argp2);
  }
  (arg1)->SetPoissonRatio(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MaterialSolid_SetThermalExpansion(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  material::MaterialSolid *arg1 = (material::MaterialSolid *) 0 ;
  material::IScalar2DPtr arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< material::MaterialSolid > tempshared1 ;
  std::shared_ptr< material::MaterialSolid > *smartarg1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "MaterialSolid_SetThermalExpansion", 2, 2, swig_obj)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_material__MaterialSolid_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MaterialSolid_SetThermalExpansion" "', argument " "1"" of type '" "material::MaterialSolid *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  material::MaterialSolid > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  material::MaterialSolid > * >(argp1);
      arg1 = const_cast< material::MaterialSolid * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  material::MaterialSolid > * >(argp1);
      arg1 = const_cast< material::MaterialSolid * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    int newmem = 0;
    res2 = SWIG_ConvertPtrAndOwn(swig_obj[1], &argp2, SWIGTYPE_p_std__shared_ptrT_values__IScalar2D_t,  0 , &newmem);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MaterialSolid_SetThermalExpansion" "', argument " "2"" of type '" "material::IScalar2DPtr""'");
    }
    if (argp2) arg2 = *(reinterpret_cast< material::IScalar2DPtr * >(argp2));
    if (newmem & SWIG_CAST_NEW_MEMORY) delete reinterpret_cast< material::IScalar2DPtr * >(argp2);
  }
  (arg1)->SetThermalExpansion(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MaterialSolid_SetElasticModulus(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  material::MaterialSolid *arg1 = (material::MaterialSolid *) 0 ;
  material::IScalar2DPtr arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< material::MaterialSolid > tempshared1 ;
  std::shared_ptr< material::MaterialSolid > *smartarg1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "MaterialSolid_SetElasticModulus", 2, 2, swig_obj)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_material__MaterialSolid_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MaterialSolid_SetElasticModulus" "', argument " "1"" of type '" "material::MaterialSolid *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  material::MaterialSolid > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  material::MaterialSolid > * >(argp1);
      arg1 = const_cast< material::MaterialSolid * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  material::MaterialSolid > * >(argp1);
      arg1 = const_cast< material::MaterialSolid * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    int newmem = 0;
    res2 = SWIG_ConvertPtrAndOwn(swig_obj[1], &argp2, SWIGTYPE_p_std__shared_ptrT_values__IScalar2D_t,  0 , &newmem);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MaterialSolid_SetElasticModulus" "', argument " "2"" of type '" "material::IScalar2DPtr""'");
    }
    if (argp2) arg2 = *(reinterpret_cast< material::IScalar2DPtr * >(argp2));
    if (newmem & SWIG_CAST_NEW_MEMORY) delete reinterpret_cast< material::IScalar2DPtr * >(argp2);
  }
  (arg1)->SetElasticModulus(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MaterialSolid_SetTensileStrength(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  material::MaterialSolid *arg1 = (material::MaterialSolid *) 0 ;
  material::IScalar2DPtr arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< material::MaterialSolid > tempshared1 ;
  std::shared_ptr< material::MaterialSolid > *smartarg1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "MaterialSolid_SetTensileStrength", 2, 2, swig_obj)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_material__MaterialSolid_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MaterialSolid_SetTensileStrength" "', argument " "1"" of type '" "material::MaterialSolid *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  material::MaterialSolid > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  material::MaterialSolid > * >(argp1);
      arg1 = const_cast< material::MaterialSolid * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  material::MaterialSolid > * >(argp1);
      arg1 = const_cast< material::MaterialSolid * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    int newmem = 0;
    res2 = SWIG_ConvertPtrAndOwn(swig_obj[1], &argp2, SWIGTYPE_p_std__shared_ptrT_values__IScalar2D_t,  0 , &newmem);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MaterialSolid_SetTensileStrength" "', argument " "2"" of type '" "material::IScalar2DPtr""'");
    }
    if (argp2) arg2 = *(reinterpret_cast< material::IScalar2DPtr * >(argp2));
    if (newmem & SWIG_CAST_NEW_MEMORY) delete reinterpret_cast< material::IScalar2DPtr * >(argp2);
  }
  (arg1)->SetTensileStrength(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MaterialSolid_SetYieldStrength(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  material::MaterialSolid *arg1 = (material::MaterialSolid *) 0 ;
  material::IScalar2DPtr arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< material::MaterialSolid > tempshared1 ;
  std::shared_ptr< material::MaterialSolid > *smartarg1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "MaterialSolid_SetYieldStrength", 2, 2, swig_obj)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_material__MaterialSolid_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MaterialSolid_SetYieldStrength" "', argument " "1"" of type '" "material::MaterialSolid *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  material::MaterialSolid > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  material::MaterialSolid > * >(argp1);
      arg1 = const_cast< material::MaterialSolid * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  material::MaterialSolid > * >(argp1);
      arg1 = const_cast< material::MaterialSolid * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    int newmem = 0;
    res2 = SWIG_ConvertPtrAndOwn(swig_obj[1], &argp2, SWIGTYPE_p_std__shared_ptrT_values__IScalar2D_t,  0 , &newmem);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MaterialSolid_SetYieldStrength" "', argument " "2"" of type '" "material::IScalar2DPtr""'");
    }
    if (argp2) arg2 = *(reinterpret_cast< material::IScalar2DPtr * >(argp2));
    if (newmem & SWIG_CAST_NEW_MEMORY) delete reinterpret_cast< material::IScalar2DPtr * >(argp2);
  }
  (arg1)->SetYieldStrength(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MaterialSolid_SetShearStrength(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  material::MaterialSolid *arg1 = (material::MaterialSolid *) 0 ;
  material::IScalar2DPtr arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< material::MaterialSolid > tempshared1 ;
  std::shared_ptr< material::MaterialSolid > *smartarg1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "MaterialSolid_SetShearStrength", 2, 2, swig_obj)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_material__MaterialSolid_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MaterialSolid_SetShearStrength" "', argument " "1"" of type '" "material::MaterialSolid *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  material::MaterialSolid > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  material::MaterialSolid > * >(argp1);
      arg1 = const_cast< material::MaterialSolid * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  material::MaterialSolid > * >(argp1);
      arg1 = const_cast< material::MaterialSolid * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    int newmem = 0;
    res2 = SWIG_ConvertPtrAndOwn(swig_obj[1], &argp2, SWIGTYPE_p_std__shared_ptrT_values__IScalar2D_t,  0 , &newmem);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MaterialSolid_SetShearStrength" "', argument " "2"" of type '" "material::IScalar2DPtr""'");
    }
    if (argp2) arg2 = *(reinterpret_cast< material::IScalar2DPtr * >(argp2));
    if (newmem & SWIG_CAST_NEW_MEMORY) delete reinterpret_cast< material::IScalar2DPtr * >(argp2);
  }
  (arg1)->SetShearStrength(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MaterialSolid_SetLimitingSurfacePressure(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  material::MaterialSolid *arg1 = (material::MaterialSolid *) 0 ;
  material::IScalar2DPtr arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< material::MaterialSolid > tempshared1 ;
  std::shared_ptr< material::MaterialSolid > *smartarg1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "MaterialSolid_SetLimitingSurfacePressure", 2, 2, swig_obj)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_material__MaterialSolid_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MaterialSolid_SetLimitingSurfacePressure" "', argument " "1"" of type '" "material::MaterialSolid *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  material::MaterialSolid > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  material::MaterialSolid > * >(argp1);
      arg1 = const_cast< material::MaterialSolid * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  material::MaterialSolid > * >(argp1);
      arg1 = const_cast< material::MaterialSolid * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    int newmem = 0;
    res2 = SWIG_ConvertPtrAndOwn(swig_obj[1], &argp2, SWIGTYPE_p_std__shared_ptrT_values__IScalar2D_t,  0 , &newmem);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MaterialSolid_SetLimitingSurfacePressure" "', argument " "2"" of type '" "material::IScalar2DPtr""'");
    }
    if (argp2) arg2 = *(reinterpret_cast< material::IScalar2DPtr * >(argp2));
    if (newmem & SWIG_CAST_NEW_MEMORY) delete reinterpret_cast< material::IScalar2DPtr * >(argp2);
  }
  (arg1)->SetLimitingSurfacePressure(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MaterialSolid_A(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  material::MaterialSolid *arg1 = (material::MaterialSolid *) 0 ;
  material::Scalar arg2 ;
  material::Scalar arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< material::MaterialSolid const > tempshared1 ;
  std::shared_ptr< material::MaterialSolid const > *smartarg1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  material::Matrix result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "MaterialSolid_A", 3, 3, swig_obj)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_material__MaterialSolid_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MaterialSolid_A" "', argument " "1"" of type '" "material::MaterialSolid const *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const material::MaterialSolid > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const material::MaterialSolid > * >(argp1);
      arg1 = const_cast< material::MaterialSolid * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const material::MaterialSolid > * >(argp1);
      arg1 = const_cast< material::MaterialSolid * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MaterialSolid_A" "', argument " "2"" of type '" "material::Scalar""'");
  } 
  arg2 = static_cast< material::Scalar >(val2);
  ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "MaterialSolid_A" "', argument " "3"" of type '" "material::Scalar""'");
  } 
  arg3 = static_cast< material::Scalar >(val3);
  result = ((material::MaterialSolid const *)arg1)->A(arg2,arg3);
  resultobj = SWIG_NewPointerObj((new material::Matrix(result)), SWIGTYPE_p_eilig__Matrix, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MaterialSolid_D(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  material::MaterialSolid *arg1 = (material::MaterialSolid *) 0 ;
  material::Scalar arg2 ;
  material::Scalar arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< material::MaterialSolid const > tempshared1 ;
  std::shared_ptr< material::MaterialSolid const > *smartarg1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  material::Matrix result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "MaterialSolid_D", 3, 3, swig_obj)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_material__MaterialSolid_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MaterialSolid_D" "', argument " "1"" of type '" "material::MaterialSolid const *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const material::MaterialSolid > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const material::MaterialSolid > * >(argp1);
      arg1 = const_cast< material::MaterialSolid * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const material::MaterialSolid > * >(argp1);
      arg1 = const_cast< material::MaterialSolid * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MaterialSolid_D" "', argument " "2"" of type '" "material::Scalar""'");
  } 
  arg2 = static_cast< material::Scalar >(val2);
  ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "MaterialSolid_D" "', argument " "3"" of type '" "material::Scalar""'");
  } 
  arg3 = static_cast< material::Scalar >(val3);
  result = ((material::MaterialSolid const *)arg1)->D(arg2,arg3);
  resultobj = SWIG_NewPointerObj((new material::Matrix(result)), SWIGTYPE_p_eilig__Matrix, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MaterialSolid_K(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  material::MaterialSolid *arg1 = (material::MaterialSolid *) 0 ;
  material::Scalar arg2 ;
  material::Scalar arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< material::MaterialSolid const > tempshared1 ;
  std::shared_ptr< material::MaterialSolid const > *smartarg1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  material::Matrix result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "MaterialSolid_K", 3, 3, swig_obj)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_material__MaterialSolid_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MaterialSolid_K" "', argument " "1"" of type '" "material::MaterialSolid const *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const material::MaterialSolid > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const material::MaterialSolid > * >(argp1);
      arg1 = const_cast< material::MaterialSolid * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const material::MaterialSolid > * >(argp1);
      arg1 = const_cast< material::MaterialSolid * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MaterialSolid_K" "', argument " "2"" of type '" "material::Scalar""'");
  } 
  arg2 = static_cast< material::Scalar >(val2);
  ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "MaterialSolid_K" "', argument " "3"" of type '" "material::Scalar""'");
  } 
  arg3 = static_cast< material::Scalar >(val3);
  result = ((material::MaterialSolid const *)arg1)->K(arg2,arg3);
  resultobj = SWIG_NewPointerObj((new material::Matrix(result)), SWIGTYPE_p_eilig__Matrix, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *MaterialSolid_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_std__shared_ptrT_material__MaterialSolid_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_ListNodes(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Nodes *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  String result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_std__vectorT_std__shared_ptrT_nodes__INode_t_t,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ListNodes" "', argument " "1"" of type '" "Nodes const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ListNodes" "', argument " "1"" of type '" "Nodes const &""'"); 
  }
  arg1 = reinterpret_cast< Nodes * >(argp1);
  result = dive::ListNodes((std::vector< std::shared_ptr< nodes::INode >,std::allocator< std::shared_ptr< nodes::INode > > > const &)*arg1);
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ListElements(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Elements *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  String result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_std__vectorT_std__shared_ptrT_dive__elements__IElement_t_t,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ListElements" "', argument " "1"" of type '" "Elements const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ListElements" "', argument " "1"" of type '" "Elements const &""'"); 
  }
  arg1 = reinterpret_cast< Elements * >(argp1);
  result = dive::ListElements((std::vector< std::shared_ptr< dive::elements::IElement >,std::allocator< std::shared_ptr< dive::elements::IElement > > > const &)*arg1);
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ListVolumes(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Elements *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  String result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_std__vectorT_std__shared_ptrT_dive__elements__IElement_t_t,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ListVolumes" "', argument " "1"" of type '" "Elements const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ListVolumes" "', argument " "1"" of type '" "Elements const &""'"); 
  }
  arg1 = reinterpret_cast< Elements * >(argp1);
  result = dive::ListVolumes((std::vector< std::shared_ptr< dive::elements::IElement >,std::allocator< std::shared_ptr< dive::elements::IElement > > > const &)*arg1);
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ListDofMeshIndices(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  DofMeshIndices *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  String result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_std__vectorT_dive__DofMeshIndex_t,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ListDofMeshIndices" "', argument " "1"" of type '" "DofMeshIndices const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ListDofMeshIndices" "', argument " "1"" of type '" "DofMeshIndices const &""'"); 
  }
  arg1 = reinterpret_cast< DofMeshIndices * >(argp1);
  result = dive::ListDofMeshIndices((std::vector< dive::DofMeshIndex,std::allocator< dive::DofMeshIndex > > const &)*arg1);
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ListNodeMeshIndices(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  NodeMeshIndices *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  String result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_std__vectorT_std__vectorT_dive__NodeMeshIndex_t_t,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ListNodeMeshIndices" "', argument " "1"" of type '" "NodeMeshIndices const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ListNodeMeshIndices" "', argument " "1"" of type '" "NodeMeshIndices const &""'"); 
  }
  arg1 = reinterpret_cast< NodeMeshIndices * >(argp1);
  result = dive::ListNodeMeshIndices((std::vector< std::vector< dive::NodeMeshIndex,std::allocator< dive::NodeMeshIndex > >,std::allocator< std::vector< dive::NodeMeshIndex,std::allocator< dive::NodeMeshIndex > > > > const &)*arg1);
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ListDirichletMeshIndices(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  DirichletMeshIndices *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  String result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_std__vectorT_dive__DirichletMeshIndex_t,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ListDirichletMeshIndices" "', argument " "1"" of type '" "DirichletMeshIndices const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ListDirichletMeshIndices" "', argument " "1"" of type '" "DirichletMeshIndices const &""'"); 
  }
  arg1 = reinterpret_cast< DirichletMeshIndices * >(argp1);
  result = dive::ListDirichletMeshIndices((std::vector< dive::DirichletMeshIndex,std::allocator< dive::DirichletMeshIndex > > const &)*arg1);
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vecNodes_iterator(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::shared_ptr< nodes::INode > > *arg1 = (std::vector< std::shared_ptr< nodes::INode > > *) 0 ;
  PyObject **arg2 = (PyObject **) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  swig::SwigPyIterator *result = 0 ;
  
  arg2 = &swig_obj[0];
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__shared_ptrT_nodes__INode_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vecNodes_iterator" "', argument " "1"" of type '" "std::vector< std::shared_ptr< nodes::INode > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::shared_ptr< nodes::INode > > * >(argp1);
  result = (swig::SwigPyIterator *)std_vector_Sl_std_shared_ptr_Sl_nodes_INode_Sg__Sg__iterator(arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vecNodes___nonzero__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::shared_ptr< nodes::INode > > *arg1 = (std::vector< std::shared_ptr< nodes::INode > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__shared_ptrT_nodes__INode_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vecNodes___nonzero__" "', argument " "1"" of type '" "std::vector< std::shared_ptr< nodes::INode > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::shared_ptr< nodes::INode > > * >(argp1);
  result = (bool)std_vector_Sl_std_shared_ptr_Sl_nodes_INode_Sg__Sg____nonzero__((std::vector< std::shared_ptr< nodes::INode > > const *)arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vecNodes___bool__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::shared_ptr< nodes::INode > > *arg1 = (std::vector< std::shared_ptr< nodes::INode > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__shared_ptrT_nodes__INode_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vecNodes___bool__" "', argument " "1"" of type '" "std::vector< std::shared_ptr< nodes::INode > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::shared_ptr< nodes::INode > > * >(argp1);
  result = (bool)std_vector_Sl_std_shared_ptr_Sl_nodes_INode_Sg__Sg____bool__((std::vector< std::shared_ptr< nodes::INode > > const *)arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vecNodes___len__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::shared_ptr< nodes::INode > > *arg1 = (std::vector< std::shared_ptr< nodes::INode > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< std::shared_ptr< nodes::INode > >::size_type result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__shared_ptrT_nodes__INode_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vecNodes___len__" "', argument " "1"" of type '" "std::vector< std::shared_ptr< nodes::INode > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::shared_ptr< nodes::INode > > * >(argp1);
  result = std_vector_Sl_std_shared_ptr_Sl_nodes_INode_Sg__Sg____len__((std::vector< std::shared_ptr< nodes::INode > > const *)arg1);
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vecNodes___getslice__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::shared_ptr< nodes::INode > > *arg1 = (std::vector< std::shared_ptr< nodes::INode > > *) 0 ;
  std::vector< std::shared_ptr< nodes::INode > >::difference_type arg2 ;
  std::vector< std::shared_ptr< nodes::INode > >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  std::vector< std::shared_ptr< nodes::INode >,std::allocator< std::shared_ptr< nodes::INode > > > *result = 0 ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "vecNodes___getslice__", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__shared_ptrT_nodes__INode_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vecNodes___getslice__" "', argument " "1"" of type '" "std::vector< std::shared_ptr< nodes::INode > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::shared_ptr< nodes::INode > > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vecNodes___getslice__" "', argument " "2"" of type '" "std::vector< std::shared_ptr< nodes::INode > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< std::shared_ptr< nodes::INode > >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "vecNodes___getslice__" "', argument " "3"" of type '" "std::vector< std::shared_ptr< nodes::INode > >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< std::shared_ptr< nodes::INode > >::difference_type >(val3);
  try {
    result = (std::vector< std::shared_ptr< nodes::INode >,std::allocator< std::shared_ptr< nodes::INode > > > *)std_vector_Sl_std_shared_ptr_Sl_nodes_INode_Sg__Sg____getslice__(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3));
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__shared_ptrT_nodes__INode_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vecNodes___setslice____SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< std::shared_ptr< nodes::INode > > *arg1 = (std::vector< std::shared_ptr< nodes::INode > > *) 0 ;
  std::vector< std::shared_ptr< nodes::INode > >::difference_type arg2 ;
  std::vector< std::shared_ptr< nodes::INode > >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__shared_ptrT_nodes__INode_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vecNodes___setslice__" "', argument " "1"" of type '" "std::vector< std::shared_ptr< nodes::INode > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::shared_ptr< nodes::INode > > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vecNodes___setslice__" "', argument " "2"" of type '" "std::vector< std::shared_ptr< nodes::INode > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< std::shared_ptr< nodes::INode > >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "vecNodes___setslice__" "', argument " "3"" of type '" "std::vector< std::shared_ptr< nodes::INode > >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< std::shared_ptr< nodes::INode > >::difference_type >(val3);
  try {
    std_vector_Sl_std_shared_ptr_Sl_nodes_INode_Sg__Sg____setslice____SWIG_0(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3));
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vecNodes___setslice____SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< std::shared_ptr< nodes::INode > > *arg1 = (std::vector< std::shared_ptr< nodes::INode > > *) 0 ;
  std::vector< std::shared_ptr< nodes::INode > >::difference_type arg2 ;
  std::vector< std::shared_ptr< nodes::INode > >::difference_type arg3 ;
  std::vector< std::shared_ptr< nodes::INode >,std::allocator< std::shared_ptr< nodes::INode > > > *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  
  (void)self;
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__shared_ptrT_nodes__INode_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vecNodes___setslice__" "', argument " "1"" of type '" "std::vector< std::shared_ptr< nodes::INode > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::shared_ptr< nodes::INode > > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vecNodes___setslice__" "', argument " "2"" of type '" "std::vector< std::shared_ptr< nodes::INode > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< std::shared_ptr< nodes::INode > >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "vecNodes___setslice__" "', argument " "3"" of type '" "std::vector< std::shared_ptr< nodes::INode > >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< std::shared_ptr< nodes::INode > >::difference_type >(val3);
  {
    std::vector< std::shared_ptr< nodes::INode >,std::allocator< std::shared_ptr< nodes::INode > > > *ptr = (std::vector< std::shared_ptr< nodes::INode >,std::allocator< std::shared_ptr< nodes::INode > > > *)0;
    res4 = swig::asptr(swig_obj[3], &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "vecNodes___setslice__" "', argument " "4"" of type '" "std::vector< std::shared_ptr< nodes::INode >,std::allocator< std::shared_ptr< nodes::INode > > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vecNodes___setslice__" "', argument " "4"" of type '" "std::vector< std::shared_ptr< nodes::INode >,std::allocator< std::shared_ptr< nodes::INode > > > const &""'"); 
    }
    arg4 = ptr;
  }
  try {
    std_vector_Sl_std_shared_ptr_Sl_nodes_INode_Sg__Sg____setslice____SWIG_1(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3),(std::vector< std::shared_ptr< nodes::INode >,std::allocator< std::shared_ptr< nodes::INode > > > const &)*arg4);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_vecNodes___setslice__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "vecNodes___setslice__", 0, 4, argv))) SWIG_fail;
  --argc;
  if (argc == 3) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< std::shared_ptr< nodes::INode >,std::allocator< std::shared_ptr< nodes::INode > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_ptrdiff_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_vecNodes___setslice____SWIG_0(self, argc, argv);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< std::shared_ptr< nodes::INode >,std::allocator< std::shared_ptr< nodes::INode > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_ptrdiff_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = swig::asptr(argv[3], (std::vector< std::shared_ptr< nodes::INode >,std::allocator< std::shared_ptr< nodes::INode > > >**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_vecNodes___setslice____SWIG_1(self, argc, argv);
          }
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'vecNodes___setslice__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< std::shared_ptr< nodes::INode > >::__setslice__(std::vector< std::shared_ptr< nodes::INode > >::difference_type,std::vector< std::shared_ptr< nodes::INode > >::difference_type)\n"
    "    std::vector< std::shared_ptr< nodes::INode > >::__setslice__(std::vector< std::shared_ptr< nodes::INode > >::difference_type,std::vector< std::shared_ptr< nodes::INode > >::difference_type,std::vector< std::shared_ptr< nodes::INode >,std::allocator< std::shared_ptr< nodes::INode > > > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_vecNodes___delslice__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::shared_ptr< nodes::INode > > *arg1 = (std::vector< std::shared_ptr< nodes::INode > > *) 0 ;
  std::vector< std::shared_ptr< nodes::INode > >::difference_type arg2 ;
  std::vector< std::shared_ptr< nodes::INode > >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "vecNodes___delslice__", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__shared_ptrT_nodes__INode_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vecNodes___delslice__" "', argument " "1"" of type '" "std::vector< std::shared_ptr< nodes::INode > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::shared_ptr< nodes::INode > > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vecNodes___delslice__" "', argument " "2"" of type '" "std::vector< std::shared_ptr< nodes::INode > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< std::shared_ptr< nodes::INode > >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "vecNodes___delslice__" "', argument " "3"" of type '" "std::vector< std::shared_ptr< nodes::INode > >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< std::shared_ptr< nodes::INode > >::difference_type >(val3);
  try {
    std_vector_Sl_std_shared_ptr_Sl_nodes_INode_Sg__Sg____delslice__(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3));
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vecNodes___delitem____SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< std::shared_ptr< nodes::INode > > *arg1 = (std::vector< std::shared_ptr< nodes::INode > > *) 0 ;
  std::vector< std::shared_ptr< nodes::INode > >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__shared_ptrT_nodes__INode_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vecNodes___delitem__" "', argument " "1"" of type '" "std::vector< std::shared_ptr< nodes::INode > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::shared_ptr< nodes::INode > > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vecNodes___delitem__" "', argument " "2"" of type '" "std::vector< std::shared_ptr< nodes::INode > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< std::shared_ptr< nodes::INode > >::difference_type >(val2);
  try {
    std_vector_Sl_std_shared_ptr_Sl_nodes_INode_Sg__Sg____delitem____SWIG_0(arg1,SWIG_STD_MOVE(arg2));
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vecNodes___getitem____SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< std::shared_ptr< nodes::INode > > *arg1 = (std::vector< std::shared_ptr< nodes::INode > > *) 0 ;
  SWIGPY_SLICEOBJECT *arg2 = (SWIGPY_SLICEOBJECT *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< std::shared_ptr< nodes::INode >,std::allocator< std::shared_ptr< nodes::INode > > > *result = 0 ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__shared_ptrT_nodes__INode_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vecNodes___getitem__" "', argument " "1"" of type '" "std::vector< std::shared_ptr< nodes::INode > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::shared_ptr< nodes::INode > > * >(argp1);
  {
    if (!PySlice_Check(swig_obj[1])) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vecNodes___getitem__" "', argument " "2"" of type '" "SWIGPY_SLICEOBJECT *""'");
    }
    arg2 = (SWIGPY_SLICEOBJECT *) swig_obj[1];
  }
  try {
    result = (std::vector< std::shared_ptr< nodes::INode >,std::allocator< std::shared_ptr< nodes::INode > > > *)std_vector_Sl_std_shared_ptr_Sl_nodes_INode_Sg__Sg____getitem____SWIG_0(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__shared_ptrT_nodes__INode_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vecNodes___setitem____SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< std::shared_ptr< nodes::INode > > *arg1 = (std::vector< std::shared_ptr< nodes::INode > > *) 0 ;
  SWIGPY_SLICEOBJECT *arg2 = (SWIGPY_SLICEOBJECT *) 0 ;
  std::vector< std::shared_ptr< nodes::INode >,std::allocator< std::shared_ptr< nodes::INode > > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__shared_ptrT_nodes__INode_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vecNodes___setitem__" "', argument " "1"" of type '" "std::vector< std::shared_ptr< nodes::INode > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::shared_ptr< nodes::INode > > * >(argp1);
  {
    if (!PySlice_Check(swig_obj[1])) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vecNodes___setitem__" "', argument " "2"" of type '" "SWIGPY_SLICEOBJECT *""'");
    }
    arg2 = (SWIGPY_SLICEOBJECT *) swig_obj[1];
  }
  {
    std::vector< std::shared_ptr< nodes::INode >,std::allocator< std::shared_ptr< nodes::INode > > > *ptr = (std::vector< std::shared_ptr< nodes::INode >,std::allocator< std::shared_ptr< nodes::INode > > > *)0;
    res3 = swig::asptr(swig_obj[2], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "vecNodes___setitem__" "', argument " "3"" of type '" "std::vector< std::shared_ptr< nodes::INode >,std::allocator< std::shared_ptr< nodes::INode > > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vecNodes___setitem__" "', argument " "3"" of type '" "std::vector< std::shared_ptr< nodes::INode >,std::allocator< std::shared_ptr< nodes::INode > > > const &""'"); 
    }
    arg3 = ptr;
  }
  try {
    std_vector_Sl_std_shared_ptr_Sl_nodes_INode_Sg__Sg____setitem____SWIG_0(arg1,arg2,(std::vector< std::shared_ptr< nodes::INode >,std::allocator< std::shared_ptr< nodes::INode > > > const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_vecNodes___setitem____SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< std::shared_ptr< nodes::INode > > *arg1 = (std::vector< std::shared_ptr< nodes::INode > > *) 0 ;
  SWIGPY_SLICEOBJECT *arg2 = (SWIGPY_SLICEOBJECT *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__shared_ptrT_nodes__INode_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vecNodes___setitem__" "', argument " "1"" of type '" "std::vector< std::shared_ptr< nodes::INode > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::shared_ptr< nodes::INode > > * >(argp1);
  {
    if (!PySlice_Check(swig_obj[1])) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vecNodes___setitem__" "', argument " "2"" of type '" "SWIGPY_SLICEOBJECT *""'");
    }
    arg2 = (SWIGPY_SLICEOBJECT *) swig_obj[1];
  }
  try {
    std_vector_Sl_std_shared_ptr_Sl_nodes_INode_Sg__Sg____setitem____SWIG_1(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vecNodes___delitem____SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< std::shared_ptr< nodes::INode > > *arg1 = (std::vector< std::shared_ptr< nodes::INode > > *) 0 ;
  SWIGPY_SLICEOBJECT *arg2 = (SWIGPY_SLICEOBJECT *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__shared_ptrT_nodes__INode_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vecNodes___delitem__" "', argument " "1"" of type '" "std::vector< std::shared_ptr< nodes::INode > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::shared_ptr< nodes::INode > > * >(argp1);
  {
    if (!PySlice_Check(swig_obj[1])) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vecNodes___delitem__" "', argument " "2"" of type '" "SWIGPY_SLICEOBJECT *""'");
    }
    arg2 = (SWIGPY_SLICEOBJECT *) swig_obj[1];
  }
  try {
    std_vector_Sl_std_shared_ptr_Sl_nodes_INode_Sg__Sg____delitem____SWIG_1(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vecNodes___delitem__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "vecNodes___delitem__", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< std::shared_ptr< nodes::INode >,std::allocator< std::shared_ptr< nodes::INode > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_vecNodes___delitem____SWIG_1(self, argc, argv);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< std::shared_ptr< nodes::INode >,std::allocator< std::shared_ptr< nodes::INode > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_vecNodes___delitem____SWIG_0(self, argc, argv);
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'vecNodes___delitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< std::shared_ptr< nodes::INode > >::__delitem__(std::vector< std::shared_ptr< nodes::INode > >::difference_type)\n"
    "    std::vector< std::shared_ptr< nodes::INode > >::__delitem__(SWIGPY_SLICEOBJECT *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_vecNodes___getitem____SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< std::shared_ptr< nodes::INode > > *arg1 = (std::vector< std::shared_ptr< nodes::INode > > *) 0 ;
  std::vector< std::shared_ptr< nodes::INode > >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  std::vector< std::shared_ptr< nodes::INode > >::value_type *result = 0 ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__shared_ptrT_nodes__INode_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vecNodes___getitem__" "', argument " "1"" of type '" "std::vector< std::shared_ptr< nodes::INode > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::shared_ptr< nodes::INode > > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vecNodes___getitem__" "', argument " "2"" of type '" "std::vector< std::shared_ptr< nodes::INode > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< std::shared_ptr< nodes::INode > >::difference_type >(val2);
  try {
    result = (std::vector< std::shared_ptr< nodes::INode > >::value_type *) &std_vector_Sl_std_shared_ptr_Sl_nodes_INode_Sg__Sg____getitem____SWIG_1((std::vector< std::shared_ptr< nodes::INode > > const *)arg1,SWIG_STD_MOVE(arg2));
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  {
    std::shared_ptr<  nodes::INode > *smartresult = *result ? new std::shared_ptr<  nodes::INode >(*result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_std__shared_ptrT_nodes__INode_t, SWIG_POINTER_OWN);
  }
  (void)swig::container_owner<swig::traits<std::vector< std::shared_ptr< nodes::INode > >::value_type>::category>::back_reference(resultobj, swig_obj[0]);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vecNodes___getitem__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "vecNodes___getitem__", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< std::shared_ptr< nodes::INode >,std::allocator< std::shared_ptr< nodes::INode > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_vecNodes___getitem____SWIG_0(self, argc, argv);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< std::shared_ptr< nodes::INode >,std::allocator< std::shared_ptr< nodes::INode > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_vecNodes___getitem____SWIG_1(self, argc, argv);
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'vecNodes___getitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< std::shared_ptr< nodes::INode > >::__getitem__(SWIGPY_SLICEOBJECT *)\n"
    "    std::vector< std::shared_ptr< nodes::INode > >::__getitem__(std::vector< std::shared_ptr< nodes::INode > >::difference_type) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_vecNodes___setitem____SWIG_2(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< std::shared_ptr< nodes::INode > > *arg1 = (std::vector< std::shared_ptr< nodes::INode > > *) 0 ;
  std::vector< std::shared_ptr< nodes::INode > >::difference_type arg2 ;
  std::vector< std::shared_ptr< nodes::INode > >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  std::vector< std::shared_ptr< nodes::INode > >::value_type tempshared3 ;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__shared_ptrT_nodes__INode_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vecNodes___setitem__" "', argument " "1"" of type '" "std::vector< std::shared_ptr< nodes::INode > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::shared_ptr< nodes::INode > > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vecNodes___setitem__" "', argument " "2"" of type '" "std::vector< std::shared_ptr< nodes::INode > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< std::shared_ptr< nodes::INode > >::difference_type >(val2);
  {
    int newmem = 0;
    res3 = SWIG_ConvertPtrAndOwn(swig_obj[2], &argp3, SWIGTYPE_p_std__shared_ptrT_nodes__INode_t,  0 , &newmem);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "vecNodes___setitem__" "', argument " "3"" of type '" "std::vector< std::shared_ptr< nodes::INode > >::value_type const &""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      if (argp3) tempshared3 = *reinterpret_cast< std::vector< std::shared_ptr< nodes::INode > >::value_type * >(argp3);
      delete reinterpret_cast< std::vector< std::shared_ptr< nodes::INode > >::value_type * >(argp3);
      arg3 = &tempshared3;
    } else {
      arg3 = (argp3) ? reinterpret_cast< std::vector< std::shared_ptr< nodes::INode > >::value_type * >(argp3) : &tempshared3;
    }
  }
  try {
    std_vector_Sl_std_shared_ptr_Sl_nodes_INode_Sg__Sg____setitem____SWIG_2(arg1,SWIG_STD_MOVE(arg2),(std::shared_ptr< nodes::INode > const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vecNodes___setitem__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "vecNodes___setitem__", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< std::shared_ptr< nodes::INode >,std::allocator< std::shared_ptr< nodes::INode > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_vecNodes___setitem____SWIG_1(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< std::shared_ptr< nodes::INode >,std::allocator< std::shared_ptr< nodes::INode > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        int res = swig::asptr(argv[2], (std::vector< std::shared_ptr< nodes::INode >,std::allocator< std::shared_ptr< nodes::INode > > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_vecNodes___setitem____SWIG_0(self, argc, argv);
        }
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< std::shared_ptr< nodes::INode >,std::allocator< std::shared_ptr< nodes::INode > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_std__shared_ptrT_nodes__INode_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_vecNodes___setitem____SWIG_2(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'vecNodes___setitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< std::shared_ptr< nodes::INode > >::__setitem__(SWIGPY_SLICEOBJECT *,std::vector< std::shared_ptr< nodes::INode >,std::allocator< std::shared_ptr< nodes::INode > > > const &)\n"
    "    std::vector< std::shared_ptr< nodes::INode > >::__setitem__(SWIGPY_SLICEOBJECT *)\n"
    "    std::vector< std::shared_ptr< nodes::INode > >::__setitem__(std::vector< std::shared_ptr< nodes::INode > >::difference_type,std::vector< std::shared_ptr< nodes::INode > >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_vecNodes_pop(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::shared_ptr< nodes::INode > > *arg1 = (std::vector< std::shared_ptr< nodes::INode > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< std::shared_ptr< nodes::INode > >::value_type result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__shared_ptrT_nodes__INode_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vecNodes_pop" "', argument " "1"" of type '" "std::vector< std::shared_ptr< nodes::INode > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::shared_ptr< nodes::INode > > * >(argp1);
  try {
    result = std_vector_Sl_std_shared_ptr_Sl_nodes_INode_Sg__Sg__pop(arg1);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  {
    std::shared_ptr<  nodes::INode > *smartresult = result ? new std::shared_ptr<  nodes::INode >(result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_std__shared_ptrT_nodes__INode_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vecNodes_append(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::shared_ptr< nodes::INode > > *arg1 = (std::vector< std::shared_ptr< nodes::INode > > *) 0 ;
  std::vector< std::shared_ptr< nodes::INode > >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  std::vector< std::shared_ptr< nodes::INode > >::value_type tempshared2 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "vecNodes_append", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__shared_ptrT_nodes__INode_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vecNodes_append" "', argument " "1"" of type '" "std::vector< std::shared_ptr< nodes::INode > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::shared_ptr< nodes::INode > > * >(argp1);
  {
    int newmem = 0;
    res2 = SWIG_ConvertPtrAndOwn(swig_obj[1], &argp2, SWIGTYPE_p_std__shared_ptrT_nodes__INode_t,  0 , &newmem);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "vecNodes_append" "', argument " "2"" of type '" "std::vector< std::shared_ptr< nodes::INode > >::value_type const &""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      if (argp2) tempshared2 = *reinterpret_cast< std::vector< std::shared_ptr< nodes::INode > >::value_type * >(argp2);
      delete reinterpret_cast< std::vector< std::shared_ptr< nodes::INode > >::value_type * >(argp2);
      arg2 = &tempshared2;
    } else {
      arg2 = (argp2) ? reinterpret_cast< std::vector< std::shared_ptr< nodes::INode > >::value_type * >(argp2) : &tempshared2;
    }
  }
  std_vector_Sl_std_shared_ptr_Sl_nodes_INode_Sg__Sg__append(arg1,(std::shared_ptr< nodes::INode > const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_vecNodes__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **SWIGUNUSEDPARM(swig_obj)) {
  PyObject *resultobj = 0;
  std::vector< std::shared_ptr< nodes::INode > > *result = 0 ;
  
  (void)self;
  if ((nobjs < 0) || (nobjs > 0)) SWIG_fail;
  result = (std::vector< std::shared_ptr< nodes::INode > > *)new std::vector< std::shared_ptr< nodes::INode > >();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__shared_ptrT_nodes__INode_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_vecNodes__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< std::shared_ptr< nodes::INode > > *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  std::vector< std::shared_ptr< nodes::INode > > *result = 0 ;
  
  (void)self;
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  {
    std::vector< std::shared_ptr< nodes::INode >,std::allocator< std::shared_ptr< nodes::INode > > > *ptr = (std::vector< std::shared_ptr< nodes::INode >,std::allocator< std::shared_ptr< nodes::INode > > > *)0;
    res1 = swig::asptr(swig_obj[0], &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_vecNodes" "', argument " "1"" of type '" "std::vector< std::shared_ptr< nodes::INode > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_vecNodes" "', argument " "1"" of type '" "std::vector< std::shared_ptr< nodes::INode > > const &""'"); 
    }
    arg1 = ptr;
  }
  result = (std::vector< std::shared_ptr< nodes::INode > > *)new std::vector< std::shared_ptr< nodes::INode > >((std::vector< std::shared_ptr< nodes::INode > > const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__shared_ptrT_nodes__INode_t_t, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_vecNodes_empty(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::shared_ptr< nodes::INode > > *arg1 = (std::vector< std::shared_ptr< nodes::INode > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__shared_ptrT_nodes__INode_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vecNodes_empty" "', argument " "1"" of type '" "std::vector< std::shared_ptr< nodes::INode > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::shared_ptr< nodes::INode > > * >(argp1);
  result = (bool)((std::vector< std::shared_ptr< nodes::INode > > const *)arg1)->empty();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vecNodes_size(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::shared_ptr< nodes::INode > > *arg1 = (std::vector< std::shared_ptr< nodes::INode > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< std::shared_ptr< nodes::INode > >::size_type result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__shared_ptrT_nodes__INode_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vecNodes_size" "', argument " "1"" of type '" "std::vector< std::shared_ptr< nodes::INode > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::shared_ptr< nodes::INode > > * >(argp1);
  result = ((std::vector< std::shared_ptr< nodes::INode > > const *)arg1)->size();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vecNodes_swap(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::shared_ptr< nodes::INode > > *arg1 = (std::vector< std::shared_ptr< nodes::INode > > *) 0 ;
  std::vector< std::shared_ptr< nodes::INode > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "vecNodes_swap", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__shared_ptrT_nodes__INode_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vecNodes_swap" "', argument " "1"" of type '" "std::vector< std::shared_ptr< nodes::INode > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::shared_ptr< nodes::INode > > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_std__vectorT_std__shared_ptrT_nodes__INode_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "vecNodes_swap" "', argument " "2"" of type '" "std::vector< std::shared_ptr< nodes::INode > > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vecNodes_swap" "', argument " "2"" of type '" "std::vector< std::shared_ptr< nodes::INode > > &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< std::shared_ptr< nodes::INode > > * >(argp2);
  (arg1)->swap(*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vecNodes_begin(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::shared_ptr< nodes::INode > > *arg1 = (std::vector< std::shared_ptr< nodes::INode > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< std::shared_ptr< nodes::INode > >::iterator result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__shared_ptrT_nodes__INode_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vecNodes_begin" "', argument " "1"" of type '" "std::vector< std::shared_ptr< nodes::INode > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::shared_ptr< nodes::INode > > * >(argp1);
  result = (arg1)->begin();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< std::shared_ptr< nodes::INode > >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vecNodes_end(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::shared_ptr< nodes::INode > > *arg1 = (std::vector< std::shared_ptr< nodes::INode > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< std::shared_ptr< nodes::INode > >::iterator result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__shared_ptrT_nodes__INode_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vecNodes_end" "', argument " "1"" of type '" "std::vector< std::shared_ptr< nodes::INode > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::shared_ptr< nodes::INode > > * >(argp1);
  result = (arg1)->end();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< std::shared_ptr< nodes::INode > >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vecNodes_rbegin(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::shared_ptr< nodes::INode > > *arg1 = (std::vector< std::shared_ptr< nodes::INode > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< std::shared_ptr< nodes::INode > >::reverse_iterator result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__shared_ptrT_nodes__INode_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vecNodes_rbegin" "', argument " "1"" of type '" "std::vector< std::shared_ptr< nodes::INode > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::shared_ptr< nodes::INode > > * >(argp1);
  result = (arg1)->rbegin();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< std::shared_ptr< nodes::INode > >::reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vecNodes_rend(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::shared_ptr< nodes::INode > > *arg1 = (std::vector< std::shared_ptr< nodes::INode > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< std::shared_ptr< nodes::INode > >::reverse_iterator result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__shared_ptrT_nodes__INode_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vecNodes_rend" "', argument " "1"" of type '" "std::vector< std::shared_ptr< nodes::INode > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::shared_ptr< nodes::INode > > * >(argp1);
  result = (arg1)->rend();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< std::shared_ptr< nodes::INode > >::reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vecNodes_clear(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::shared_ptr< nodes::INode > > *arg1 = (std::vector< std::shared_ptr< nodes::INode > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__shared_ptrT_nodes__INode_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vecNodes_clear" "', argument " "1"" of type '" "std::vector< std::shared_ptr< nodes::INode > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::shared_ptr< nodes::INode > > * >(argp1);
  (arg1)->clear();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vecNodes_get_allocator(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::shared_ptr< nodes::INode > > *arg1 = (std::vector< std::shared_ptr< nodes::INode > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  SwigValueWrapper< std::allocator< std::shared_ptr< nodes::INode > > > result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__shared_ptrT_nodes__INode_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vecNodes_get_allocator" "', argument " "1"" of type '" "std::vector< std::shared_ptr< nodes::INode > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::shared_ptr< nodes::INode > > * >(argp1);
  result = ((std::vector< std::shared_ptr< nodes::INode > > const *)arg1)->get_allocator();
  resultobj = SWIG_NewPointerObj((new std::vector< std::shared_ptr< nodes::INode > >::allocator_type(result)), SWIGTYPE_p_std__allocatorT_std__shared_ptrT_nodes__INode_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_vecNodes__SWIG_2(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< std::shared_ptr< nodes::INode > >::size_type arg1 ;
  size_t val1 ;
  int ecode1 = 0 ;
  std::vector< std::shared_ptr< nodes::INode > > *result = 0 ;
  
  (void)self;
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_vecNodes" "', argument " "1"" of type '" "std::vector< std::shared_ptr< nodes::INode > >::size_type""'");
  } 
  arg1 = static_cast< std::vector< std::shared_ptr< nodes::INode > >::size_type >(val1);
  result = (std::vector< std::shared_ptr< nodes::INode > > *)new std::vector< std::shared_ptr< nodes::INode > >(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__shared_ptrT_nodes__INode_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vecNodes_pop_back(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::shared_ptr< nodes::INode > > *arg1 = (std::vector< std::shared_ptr< nodes::INode > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__shared_ptrT_nodes__INode_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vecNodes_pop_back" "', argument " "1"" of type '" "std::vector< std::shared_ptr< nodes::INode > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::shared_ptr< nodes::INode > > * >(argp1);
  (arg1)->pop_back();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vecNodes_resize__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< std::shared_ptr< nodes::INode > > *arg1 = (std::vector< std::shared_ptr< nodes::INode > > *) 0 ;
  std::vector< std::shared_ptr< nodes::INode > >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__shared_ptrT_nodes__INode_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vecNodes_resize" "', argument " "1"" of type '" "std::vector< std::shared_ptr< nodes::INode > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::shared_ptr< nodes::INode > > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vecNodes_resize" "', argument " "2"" of type '" "std::vector< std::shared_ptr< nodes::INode > >::size_type""'");
  } 
  arg2 = static_cast< std::vector< std::shared_ptr< nodes::INode > >::size_type >(val2);
  (arg1)->resize(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vecNodes_erase__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< std::shared_ptr< nodes::INode > > *arg1 = (std::vector< std::shared_ptr< nodes::INode > > *) 0 ;
  std::vector< std::shared_ptr< nodes::INode > >::iterator arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  std::vector< std::shared_ptr< nodes::INode > >::iterator result;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__shared_ptrT_nodes__INode_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vecNodes_erase" "', argument " "1"" of type '" "std::vector< std::shared_ptr< nodes::INode > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::shared_ptr< nodes::INode > > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vecNodes_erase" "', argument " "2"" of type '" "std::vector< std::shared_ptr< nodes::INode > >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< std::shared_ptr< nodes::INode > >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< std::shared_ptr< nodes::INode > >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vecNodes_erase" "', argument " "2"" of type '" "std::vector< std::shared_ptr< nodes::INode > >::iterator""'");
    }
  }
  result = std_vector_Sl_std_shared_ptr_Sl_nodes_INode_Sg__Sg__erase__SWIG_0(arg1,SWIG_STD_MOVE(arg2));
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< std::shared_ptr< nodes::INode > >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vecNodes_erase__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< std::shared_ptr< nodes::INode > > *arg1 = (std::vector< std::shared_ptr< nodes::INode > > *) 0 ;
  std::vector< std::shared_ptr< nodes::INode > >::iterator arg2 ;
  std::vector< std::shared_ptr< nodes::INode > >::iterator arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  swig::SwigPyIterator *iter3 = 0 ;
  int res3 ;
  std::vector< std::shared_ptr< nodes::INode > >::iterator result;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__shared_ptrT_nodes__INode_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vecNodes_erase" "', argument " "1"" of type '" "std::vector< std::shared_ptr< nodes::INode > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::shared_ptr< nodes::INode > > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vecNodes_erase" "', argument " "2"" of type '" "std::vector< std::shared_ptr< nodes::INode > >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< std::shared_ptr< nodes::INode > >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< std::shared_ptr< nodes::INode > >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vecNodes_erase" "', argument " "2"" of type '" "std::vector< std::shared_ptr< nodes::INode > >::iterator""'");
    }
  }
  res3 = SWIG_ConvertPtr(swig_obj[2], SWIG_as_voidptrptr(&iter3), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res3) || !iter3) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vecNodes_erase" "', argument " "3"" of type '" "std::vector< std::shared_ptr< nodes::INode > >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< std::shared_ptr< nodes::INode > >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< std::shared_ptr< nodes::INode > >::iterator > *>(iter3);
    if (iter_t) {
      arg3 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vecNodes_erase" "', argument " "3"" of type '" "std::vector< std::shared_ptr< nodes::INode > >::iterator""'");
    }
  }
  result = std_vector_Sl_std_shared_ptr_Sl_nodes_INode_Sg__Sg__erase__SWIG_1(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3));
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< std::shared_ptr< nodes::INode > >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vecNodes_erase(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "vecNodes_erase", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< std::shared_ptr< nodes::INode >,std::allocator< std::shared_ptr< nodes::INode > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< std::shared_ptr< nodes::INode > >::iterator > *>(iter) != 0));
      if (_v) {
        return _wrap_vecNodes_erase__SWIG_0(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< std::shared_ptr< nodes::INode >,std::allocator< std::shared_ptr< nodes::INode > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< std::shared_ptr< nodes::INode > >::iterator > *>(iter) != 0));
      if (_v) {
        swig::SwigPyIterator *iter = 0;
        int res = SWIG_ConvertPtr(argv[2], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
        _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< std::shared_ptr< nodes::INode > >::iterator > *>(iter) != 0));
        if (_v) {
          return _wrap_vecNodes_erase__SWIG_1(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'vecNodes_erase'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< std::shared_ptr< nodes::INode > >::erase(std::vector< std::shared_ptr< nodes::INode > >::iterator)\n"
    "    std::vector< std::shared_ptr< nodes::INode > >::erase(std::vector< std::shared_ptr< nodes::INode > >::iterator,std::vector< std::shared_ptr< nodes::INode > >::iterator)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_new_vecNodes__SWIG_3(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< std::shared_ptr< nodes::INode > >::size_type arg1 ;
  std::vector< std::shared_ptr< nodes::INode > >::value_type *arg2 = 0 ;
  size_t val1 ;
  int ecode1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  std::vector< std::shared_ptr< nodes::INode > >::value_type tempshared2 ;
  std::vector< std::shared_ptr< nodes::INode > > *result = 0 ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_vecNodes" "', argument " "1"" of type '" "std::vector< std::shared_ptr< nodes::INode > >::size_type""'");
  } 
  arg1 = static_cast< std::vector< std::shared_ptr< nodes::INode > >::size_type >(val1);
  {
    int newmem = 0;
    res2 = SWIG_ConvertPtrAndOwn(swig_obj[1], &argp2, SWIGTYPE_p_std__shared_ptrT_nodes__INode_t,  0 , &newmem);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_vecNodes" "', argument " "2"" of type '" "std::vector< std::shared_ptr< nodes::INode > >::value_type const &""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      if (argp2) tempshared2 = *reinterpret_cast< std::vector< std::shared_ptr< nodes::INode > >::value_type * >(argp2);
      delete reinterpret_cast< std::vector< std::shared_ptr< nodes::INode > >::value_type * >(argp2);
      arg2 = &tempshared2;
    } else {
      arg2 = (argp2) ? reinterpret_cast< std::vector< std::shared_ptr< nodes::INode > >::value_type * >(argp2) : &tempshared2;
    }
  }
  result = (std::vector< std::shared_ptr< nodes::INode > > *)new std::vector< std::shared_ptr< nodes::INode > >(arg1,(std::vector< std::shared_ptr< nodes::INode > >::value_type const &)*arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__shared_ptrT_nodes__INode_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_vecNodes(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "new_vecNodes", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 0) {
    return _wrap_new_vecNodes__SWIG_0(self, argc, argv);
  }
  if (argc == 1) {
    int _v = 0;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_vecNodes__SWIG_2(self, argc, argv);
    }
  }
  if (argc == 1) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< std::shared_ptr< nodes::INode >,std::allocator< std::shared_ptr< nodes::INode > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_vecNodes__SWIG_1(self, argc, argv);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_std__shared_ptrT_nodes__INode_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_vecNodes__SWIG_3(self, argc, argv);
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'new_vecNodes'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< std::shared_ptr< nodes::INode > >::vector()\n"
    "    std::vector< std::shared_ptr< nodes::INode > >::vector(std::vector< std::shared_ptr< nodes::INode > > const &)\n"
    "    std::vector< std::shared_ptr< nodes::INode > >::vector(std::vector< std::shared_ptr< nodes::INode > >::size_type)\n"
    "    std::vector< std::shared_ptr< nodes::INode > >::vector(std::vector< std::shared_ptr< nodes::INode > >::size_type,std::vector< std::shared_ptr< nodes::INode > >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_vecNodes_push_back(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::shared_ptr< nodes::INode > > *arg1 = (std::vector< std::shared_ptr< nodes::INode > > *) 0 ;
  std::vector< std::shared_ptr< nodes::INode > >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  std::vector< std::shared_ptr< nodes::INode > >::value_type tempshared2 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "vecNodes_push_back", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__shared_ptrT_nodes__INode_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vecNodes_push_back" "', argument " "1"" of type '" "std::vector< std::shared_ptr< nodes::INode > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::shared_ptr< nodes::INode > > * >(argp1);
  {
    int newmem = 0;
    res2 = SWIG_ConvertPtrAndOwn(swig_obj[1], &argp2, SWIGTYPE_p_std__shared_ptrT_nodes__INode_t,  0 , &newmem);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "vecNodes_push_back" "', argument " "2"" of type '" "std::vector< std::shared_ptr< nodes::INode > >::value_type const &""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      if (argp2) tempshared2 = *reinterpret_cast< std::vector< std::shared_ptr< nodes::INode > >::value_type * >(argp2);
      delete reinterpret_cast< std::vector< std::shared_ptr< nodes::INode > >::value_type * >(argp2);
      arg2 = &tempshared2;
    } else {
      arg2 = (argp2) ? reinterpret_cast< std::vector< std::shared_ptr< nodes::INode > >::value_type * >(argp2) : &tempshared2;
    }
  }
  (arg1)->push_back((std::vector< std::shared_ptr< nodes::INode > >::value_type const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vecNodes_front(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::shared_ptr< nodes::INode > > *arg1 = (std::vector< std::shared_ptr< nodes::INode > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< std::shared_ptr< nodes::INode > >::value_type *result = 0 ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__shared_ptrT_nodes__INode_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vecNodes_front" "', argument " "1"" of type '" "std::vector< std::shared_ptr< nodes::INode > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::shared_ptr< nodes::INode > > * >(argp1);
  result = (std::vector< std::shared_ptr< nodes::INode > >::value_type *) &((std::vector< std::shared_ptr< nodes::INode > > const *)arg1)->front();
  {
    std::shared_ptr<  nodes::INode > *smartresult = *result ? new std::shared_ptr<  nodes::INode >(*result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_std__shared_ptrT_nodes__INode_t, SWIG_POINTER_OWN);
  }
  (void)swig::container_owner<swig::traits<std::vector< std::shared_ptr< nodes::INode > >::value_type>::category>::back_reference(resultobj, swig_obj[0]);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vecNodes_back(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::shared_ptr< nodes::INode > > *arg1 = (std::vector< std::shared_ptr< nodes::INode > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< std::shared_ptr< nodes::INode > >::value_type *result = 0 ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__shared_ptrT_nodes__INode_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vecNodes_back" "', argument " "1"" of type '" "std::vector< std::shared_ptr< nodes::INode > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::shared_ptr< nodes::INode > > * >(argp1);
  result = (std::vector< std::shared_ptr< nodes::INode > >::value_type *) &((std::vector< std::shared_ptr< nodes::INode > > const *)arg1)->back();
  {
    std::shared_ptr<  nodes::INode > *smartresult = *result ? new std::shared_ptr<  nodes::INode >(*result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_std__shared_ptrT_nodes__INode_t, SWIG_POINTER_OWN);
  }
  (void)swig::container_owner<swig::traits<std::vector< std::shared_ptr< nodes::INode > >::value_type>::category>::back_reference(resultobj, swig_obj[0]);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vecNodes_assign(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::shared_ptr< nodes::INode > > *arg1 = (std::vector< std::shared_ptr< nodes::INode > > *) 0 ;
  std::vector< std::shared_ptr< nodes::INode > >::size_type arg2 ;
  std::vector< std::shared_ptr< nodes::INode > >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  std::vector< std::shared_ptr< nodes::INode > >::value_type tempshared3 ;
  PyObject *swig_obj[3] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "vecNodes_assign", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__shared_ptrT_nodes__INode_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vecNodes_assign" "', argument " "1"" of type '" "std::vector< std::shared_ptr< nodes::INode > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::shared_ptr< nodes::INode > > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vecNodes_assign" "', argument " "2"" of type '" "std::vector< std::shared_ptr< nodes::INode > >::size_type""'");
  } 
  arg2 = static_cast< std::vector< std::shared_ptr< nodes::INode > >::size_type >(val2);
  {
    int newmem = 0;
    res3 = SWIG_ConvertPtrAndOwn(swig_obj[2], &argp3, SWIGTYPE_p_std__shared_ptrT_nodes__INode_t,  0 , &newmem);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "vecNodes_assign" "', argument " "3"" of type '" "std::vector< std::shared_ptr< nodes::INode > >::value_type const &""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      if (argp3) tempshared3 = *reinterpret_cast< std::vector< std::shared_ptr< nodes::INode > >::value_type * >(argp3);
      delete reinterpret_cast< std::vector< std::shared_ptr< nodes::INode > >::value_type * >(argp3);
      arg3 = &tempshared3;
    } else {
      arg3 = (argp3) ? reinterpret_cast< std::vector< std::shared_ptr< nodes::INode > >::value_type * >(argp3) : &tempshared3;
    }
  }
  (arg1)->assign(arg2,(std::vector< std::shared_ptr< nodes::INode > >::value_type const &)*arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vecNodes_resize__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< std::shared_ptr< nodes::INode > > *arg1 = (std::vector< std::shared_ptr< nodes::INode > > *) 0 ;
  std::vector< std::shared_ptr< nodes::INode > >::size_type arg2 ;
  std::vector< std::shared_ptr< nodes::INode > >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  std::vector< std::shared_ptr< nodes::INode > >::value_type tempshared3 ;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__shared_ptrT_nodes__INode_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vecNodes_resize" "', argument " "1"" of type '" "std::vector< std::shared_ptr< nodes::INode > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::shared_ptr< nodes::INode > > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vecNodes_resize" "', argument " "2"" of type '" "std::vector< std::shared_ptr< nodes::INode > >::size_type""'");
  } 
  arg2 = static_cast< std::vector< std::shared_ptr< nodes::INode > >::size_type >(val2);
  {
    int newmem = 0;
    res3 = SWIG_ConvertPtrAndOwn(swig_obj[2], &argp3, SWIGTYPE_p_std__shared_ptrT_nodes__INode_t,  0 , &newmem);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "vecNodes_resize" "', argument " "3"" of type '" "std::vector< std::shared_ptr< nodes::INode > >::value_type const &""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      if (argp3) tempshared3 = *reinterpret_cast< std::vector< std::shared_ptr< nodes::INode > >::value_type * >(argp3);
      delete reinterpret_cast< std::vector< std::shared_ptr< nodes::INode > >::value_type * >(argp3);
      arg3 = &tempshared3;
    } else {
      arg3 = (argp3) ? reinterpret_cast< std::vector< std::shared_ptr< nodes::INode > >::value_type * >(argp3) : &tempshared3;
    }
  }
  (arg1)->resize(arg2,(std::vector< std::shared_ptr< nodes::INode > >::value_type const &)*arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vecNodes_resize(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "vecNodes_resize", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< std::shared_ptr< nodes::INode >,std::allocator< std::shared_ptr< nodes::INode > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_vecNodes_resize__SWIG_0(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< std::shared_ptr< nodes::INode >,std::allocator< std::shared_ptr< nodes::INode > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_std__shared_ptrT_nodes__INode_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_vecNodes_resize__SWIG_1(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'vecNodes_resize'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< std::shared_ptr< nodes::INode > >::resize(std::vector< std::shared_ptr< nodes::INode > >::size_type)\n"
    "    std::vector< std::shared_ptr< nodes::INode > >::resize(std::vector< std::shared_ptr< nodes::INode > >::size_type,std::vector< std::shared_ptr< nodes::INode > >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_vecNodes_insert__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< std::shared_ptr< nodes::INode > > *arg1 = (std::vector< std::shared_ptr< nodes::INode > > *) 0 ;
  std::vector< std::shared_ptr< nodes::INode > >::iterator arg2 ;
  std::vector< std::shared_ptr< nodes::INode > >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  void *argp3 ;
  int res3 = 0 ;
  std::vector< std::shared_ptr< nodes::INode > >::value_type tempshared3 ;
  std::vector< std::shared_ptr< nodes::INode > >::iterator result;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__shared_ptrT_nodes__INode_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vecNodes_insert" "', argument " "1"" of type '" "std::vector< std::shared_ptr< nodes::INode > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::shared_ptr< nodes::INode > > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vecNodes_insert" "', argument " "2"" of type '" "std::vector< std::shared_ptr< nodes::INode > >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< std::shared_ptr< nodes::INode > >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< std::shared_ptr< nodes::INode > >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vecNodes_insert" "', argument " "2"" of type '" "std::vector< std::shared_ptr< nodes::INode > >::iterator""'");
    }
  }
  {
    int newmem = 0;
    res3 = SWIG_ConvertPtrAndOwn(swig_obj[2], &argp3, SWIGTYPE_p_std__shared_ptrT_nodes__INode_t,  0 , &newmem);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "vecNodes_insert" "', argument " "3"" of type '" "std::vector< std::shared_ptr< nodes::INode > >::value_type const &""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      if (argp3) tempshared3 = *reinterpret_cast< std::vector< std::shared_ptr< nodes::INode > >::value_type * >(argp3);
      delete reinterpret_cast< std::vector< std::shared_ptr< nodes::INode > >::value_type * >(argp3);
      arg3 = &tempshared3;
    } else {
      arg3 = (argp3) ? reinterpret_cast< std::vector< std::shared_ptr< nodes::INode > >::value_type * >(argp3) : &tempshared3;
    }
  }
  result = std_vector_Sl_std_shared_ptr_Sl_nodes_INode_Sg__Sg__insert__SWIG_0(arg1,SWIG_STD_MOVE(arg2),(std::shared_ptr< nodes::INode > const &)*arg3);
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< std::shared_ptr< nodes::INode > >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vecNodes_insert__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< std::shared_ptr< nodes::INode > > *arg1 = (std::vector< std::shared_ptr< nodes::INode > > *) 0 ;
  std::vector< std::shared_ptr< nodes::INode > >::iterator arg2 ;
  std::vector< std::shared_ptr< nodes::INode > >::size_type arg3 ;
  std::vector< std::shared_ptr< nodes::INode > >::value_type *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  size_t val3 ;
  int ecode3 = 0 ;
  void *argp4 ;
  int res4 = 0 ;
  std::vector< std::shared_ptr< nodes::INode > >::value_type tempshared4 ;
  
  (void)self;
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__shared_ptrT_nodes__INode_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vecNodes_insert" "', argument " "1"" of type '" "std::vector< std::shared_ptr< nodes::INode > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::shared_ptr< nodes::INode > > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vecNodes_insert" "', argument " "2"" of type '" "std::vector< std::shared_ptr< nodes::INode > >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< std::shared_ptr< nodes::INode > >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< std::shared_ptr< nodes::INode > >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vecNodes_insert" "', argument " "2"" of type '" "std::vector< std::shared_ptr< nodes::INode > >::iterator""'");
    }
  }
  ecode3 = SWIG_AsVal_size_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "vecNodes_insert" "', argument " "3"" of type '" "std::vector< std::shared_ptr< nodes::INode > >::size_type""'");
  } 
  arg3 = static_cast< std::vector< std::shared_ptr< nodes::INode > >::size_type >(val3);
  {
    int newmem = 0;
    res4 = SWIG_ConvertPtrAndOwn(swig_obj[3], &argp4, SWIGTYPE_p_std__shared_ptrT_nodes__INode_t,  0 , &newmem);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "vecNodes_insert" "', argument " "4"" of type '" "std::vector< std::shared_ptr< nodes::INode > >::value_type const &""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      if (argp4) tempshared4 = *reinterpret_cast< std::vector< std::shared_ptr< nodes::INode > >::value_type * >(argp4);
      delete reinterpret_cast< std::vector< std::shared_ptr< nodes::INode > >::value_type * >(argp4);
      arg4 = &tempshared4;
    } else {
      arg4 = (argp4) ? reinterpret_cast< std::vector< std::shared_ptr< nodes::INode > >::value_type * >(argp4) : &tempshared4;
    }
  }
  std_vector_Sl_std_shared_ptr_Sl_nodes_INode_Sg__Sg__insert__SWIG_1(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3),(std::shared_ptr< nodes::INode > const &)*arg4);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vecNodes_insert(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "vecNodes_insert", 0, 4, argv))) SWIG_fail;
  --argc;
  if (argc == 3) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< std::shared_ptr< nodes::INode >,std::allocator< std::shared_ptr< nodes::INode > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< std::shared_ptr< nodes::INode > >::iterator > *>(iter) != 0));
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_std__shared_ptrT_nodes__INode_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_vecNodes_insert__SWIG_0(self, argc, argv);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< std::shared_ptr< nodes::INode >,std::allocator< std::shared_ptr< nodes::INode > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< std::shared_ptr< nodes::INode > >::iterator > *>(iter) != 0));
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = SWIG_ConvertPtr(argv[3], 0, SWIGTYPE_p_std__shared_ptrT_nodes__INode_t, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_vecNodes_insert__SWIG_1(self, argc, argv);
          }
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'vecNodes_insert'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< std::shared_ptr< nodes::INode > >::insert(std::vector< std::shared_ptr< nodes::INode > >::iterator,std::vector< std::shared_ptr< nodes::INode > >::value_type const &)\n"
    "    std::vector< std::shared_ptr< nodes::INode > >::insert(std::vector< std::shared_ptr< nodes::INode > >::iterator,std::vector< std::shared_ptr< nodes::INode > >::size_type,std::vector< std::shared_ptr< nodes::INode > >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_vecNodes_reserve(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::shared_ptr< nodes::INode > > *arg1 = (std::vector< std::shared_ptr< nodes::INode > > *) 0 ;
  std::vector< std::shared_ptr< nodes::INode > >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "vecNodes_reserve", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__shared_ptrT_nodes__INode_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vecNodes_reserve" "', argument " "1"" of type '" "std::vector< std::shared_ptr< nodes::INode > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::shared_ptr< nodes::INode > > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vecNodes_reserve" "', argument " "2"" of type '" "std::vector< std::shared_ptr< nodes::INode > >::size_type""'");
  } 
  arg2 = static_cast< std::vector< std::shared_ptr< nodes::INode > >::size_type >(val2);
  (arg1)->reserve(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vecNodes_capacity(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::shared_ptr< nodes::INode > > *arg1 = (std::vector< std::shared_ptr< nodes::INode > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< std::shared_ptr< nodes::INode > >::size_type result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__shared_ptrT_nodes__INode_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vecNodes_capacity" "', argument " "1"" of type '" "std::vector< std::shared_ptr< nodes::INode > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::shared_ptr< nodes::INode > > * >(argp1);
  result = ((std::vector< std::shared_ptr< nodes::INode > > const *)arg1)->capacity();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vecNodes___str__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::shared_ptr< nodes::INode > > *arg1 = (std::vector< std::shared_ptr< nodes::INode > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  String result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__shared_ptrT_nodes__INode_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vecNodes___str__" "', argument " "1"" of type '" "std::vector< std::shared_ptr< nodes::INode > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::shared_ptr< nodes::INode > > * >(argp1);
  result = std_vector_Sl_std_shared_ptr_Sl_nodes_INode_Sg__Sg____str__((std::vector< std::shared_ptr< nodes::INode > > const *)arg1);
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_vecNodes(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::shared_ptr< nodes::INode > > *arg1 = (std::vector< std::shared_ptr< nodes::INode > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__shared_ptrT_nodes__INode_t_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_vecNodes" "', argument " "1"" of type '" "std::vector< std::shared_ptr< nodes::INode > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::shared_ptr< nodes::INode > > * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *vecNodes_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_std__vectorT_std__shared_ptrT_nodes__INode_t_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *vecNodes_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN int Swig_var_headerNode_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable headerNode is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_headerNode_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_std_string(static_cast< std::string >(nodes::headerNode));
  return pyobj;
}


SWIGINTERN PyObject *_wrap_delete_INode(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  nodes::INode *arg1 = (nodes::INode *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< nodes::INode > tempshared1 ;
  std::shared_ptr< nodes::INode > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_nodes__INode_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_INode" "', argument " "1"" of type '" "nodes::INode *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  nodes::INode > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  nodes::INode > * >(argp1);
      arg1 = const_cast< nodes::INode * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  nodes::INode > * >(argp1);
      arg1 = const_cast< nodes::INode * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  (void)arg1; delete smartarg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_INode_GetPoint(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  nodes::INode *arg1 = (nodes::INode *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< nodes::INode const > tempshared1 ;
  std::shared_ptr< nodes::INode const > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  nodes::Vector *result = 0 ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_nodes__INode_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "INode_GetPoint" "', argument " "1"" of type '" "nodes::INode const *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const nodes::INode > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const nodes::INode > * >(argp1);
      arg1 = const_cast< nodes::INode * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const nodes::INode > * >(argp1);
      arg1 = const_cast< nodes::INode * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = (nodes::Vector *) &((nodes::INode const *)arg1)->GetPoint();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_eilig__Vector, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_INode_GetValue__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  nodes::INode *arg1 = (nodes::INode *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< nodes::INode const > tempshared1 ;
  std::shared_ptr< nodes::INode const > *smartarg1 = 0 ;
  nodes::Matrix *result = 0 ;
  
  (void)self;
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_nodes__INode_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "INode_GetValue" "', argument " "1"" of type '" "nodes::INode const *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const nodes::INode > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const nodes::INode > * >(argp1);
      arg1 = const_cast< nodes::INode * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const nodes::INode > * >(argp1);
      arg1 = const_cast< nodes::INode * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = (nodes::Matrix *) &((nodes::INode const *)arg1)->GetValue();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_eilig__Matrix, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_INode_GetValue__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  nodes::INode *arg1 = (nodes::INode *) 0 ;
  nodes::DofIndex arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< nodes::INode const > tempshared1 ;
  std::shared_ptr< nodes::INode const > *smartarg1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  nodes::Scalar result;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_nodes__INode_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "INode_GetValue" "', argument " "1"" of type '" "nodes::INode const *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const nodes::INode > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const nodes::INode > * >(argp1);
      arg1 = const_cast< nodes::INode * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const nodes::INode > * >(argp1);
      arg1 = const_cast< nodes::INode * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "INode_GetValue" "', argument " "2"" of type '" "nodes::DofIndex""'");
  } 
  arg2 = static_cast< nodes::DofIndex >(val2);
  result = (nodes::Scalar)((nodes::INode const *)arg1)->GetValue(arg2);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_INode_GetValue(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "INode_GetValue", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    int _v = 0;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_std__shared_ptrT_nodes__INode_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_INode_GetValue__SWIG_0(self, argc, argv);
    }
  }
  if (argc == 2) {
    int _v = 0;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_std__shared_ptrT_nodes__INode_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_INode_GetValue__SWIG_1(self, argc, argv);
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'INode_GetValue'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    nodes::INode::GetValue() const\n"
    "    nodes::INode::GetValue(nodes::DofIndex) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_INode_GetTag(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  nodes::INode *arg1 = (nodes::INode *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< nodes::INode const > tempshared1 ;
  std::shared_ptr< nodes::INode const > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  nodes::Tag result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_nodes__INode_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "INode_GetTag" "', argument " "1"" of type '" "nodes::INode const *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const nodes::INode > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const nodes::INode > * >(argp1);
      arg1 = const_cast< nodes::INode * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const nodes::INode > * >(argp1);
      arg1 = const_cast< nodes::INode * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = ((nodes::INode const *)arg1)->GetTag();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_INode_SetPoint__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  nodes::INode *arg1 = (nodes::INode *) 0 ;
  nodes::Scalar arg2 ;
  nodes::Scalar arg3 ;
  nodes::Scalar arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< nodes::INode > tempshared1 ;
  std::shared_ptr< nodes::INode > *smartarg1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  
  (void)self;
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_nodes__INode_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "INode_SetPoint" "', argument " "1"" of type '" "nodes::INode *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  nodes::INode > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  nodes::INode > * >(argp1);
      arg1 = const_cast< nodes::INode * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  nodes::INode > * >(argp1);
      arg1 = const_cast< nodes::INode * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "INode_SetPoint" "', argument " "2"" of type '" "nodes::Scalar""'");
  } 
  arg2 = static_cast< nodes::Scalar >(val2);
  ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "INode_SetPoint" "', argument " "3"" of type '" "nodes::Scalar""'");
  } 
  arg3 = static_cast< nodes::Scalar >(val3);
  ecode4 = SWIG_AsVal_double(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "INode_SetPoint" "', argument " "4"" of type '" "nodes::Scalar""'");
  } 
  arg4 = static_cast< nodes::Scalar >(val4);
  (arg1)->SetPoint(arg2,arg3,arg4);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_INode_SetPoint__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  nodes::INode *arg1 = (nodes::INode *) 0 ;
  nodes::Vector *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< nodes::INode > tempshared1 ;
  std::shared_ptr< nodes::INode > *smartarg1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_nodes__INode_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "INode_SetPoint" "', argument " "1"" of type '" "nodes::INode *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  nodes::INode > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  nodes::INode > * >(argp1);
      arg1 = const_cast< nodes::INode * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  nodes::INode > * >(argp1);
      arg1 = const_cast< nodes::INode * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_eilig__Vector,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "INode_SetPoint" "', argument " "2"" of type '" "nodes::Vector const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "INode_SetPoint" "', argument " "2"" of type '" "nodes::Vector const &""'"); 
  }
  arg2 = reinterpret_cast< nodes::Vector * >(argp2);
  (arg1)->SetPoint((nodes::Vector const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_INode_SetPoint(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "INode_SetPoint", 0, 4, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_std__shared_ptrT_nodes__INode_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_eilig__Vector, SWIG_POINTER_NO_NULL | 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_INode_SetPoint__SWIG_1(self, argc, argv);
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_std__shared_ptrT_nodes__INode_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_INode_SetPoint__SWIG_0(self, argc, argv);
          }
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'INode_SetPoint'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    nodes::INode::SetPoint(nodes::Scalar,nodes::Scalar,nodes::Scalar)\n"
    "    nodes::INode::SetPoint(nodes::Vector const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_INode_SetValue__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  nodes::INode *arg1 = (nodes::INode *) 0 ;
  nodes::Matrix *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< nodes::INode > tempshared1 ;
  std::shared_ptr< nodes::INode > *smartarg1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_nodes__INode_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "INode_SetValue" "', argument " "1"" of type '" "nodes::INode *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  nodes::INode > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  nodes::INode > * >(argp1);
      arg1 = const_cast< nodes::INode * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  nodes::INode > * >(argp1);
      arg1 = const_cast< nodes::INode * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_eilig__Matrix,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "INode_SetValue" "', argument " "2"" of type '" "nodes::Matrix const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "INode_SetValue" "', argument " "2"" of type '" "nodes::Matrix const &""'"); 
  }
  arg2 = reinterpret_cast< nodes::Matrix * >(argp2);
  (arg1)->SetValue((nodes::Matrix const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_INode_SetValue__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  nodes::INode *arg1 = (nodes::INode *) 0 ;
  nodes::DofIndex arg2 ;
  nodes::Scalar arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< nodes::INode > tempshared1 ;
  std::shared_ptr< nodes::INode > *smartarg1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_nodes__INode_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "INode_SetValue" "', argument " "1"" of type '" "nodes::INode *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  nodes::INode > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  nodes::INode > * >(argp1);
      arg1 = const_cast< nodes::INode * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  nodes::INode > * >(argp1);
      arg1 = const_cast< nodes::INode * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "INode_SetValue" "', argument " "2"" of type '" "nodes::DofIndex""'");
  } 
  arg2 = static_cast< nodes::DofIndex >(val2);
  ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "INode_SetValue" "', argument " "3"" of type '" "nodes::Scalar""'");
  } 
  arg3 = static_cast< nodes::Scalar >(val3);
  (arg1)->SetValue(arg2,arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_INode_SetValue(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "INode_SetValue", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_std__shared_ptrT_nodes__INode_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_eilig__Matrix, SWIG_POINTER_NO_NULL | 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_INode_SetValue__SWIG_0(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_std__shared_ptrT_nodes__INode_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_INode_SetValue__SWIG_1(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'INode_SetValue'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    nodes::INode::SetValue(nodes::Matrix const &)\n"
    "    nodes::INode::SetValue(nodes::DofIndex,nodes::Scalar)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_INode_SetTag(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  nodes::INode *arg1 = (nodes::INode *) 0 ;
  nodes::Tag arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< nodes::INode > tempshared1 ;
  std::shared_ptr< nodes::INode > *smartarg1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "INode_SetTag", 2, 2, swig_obj)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_nodes__INode_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "INode_SetTag" "', argument " "1"" of type '" "nodes::INode *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  nodes::INode > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  nodes::INode > * >(argp1);
      arg1 = const_cast< nodes::INode * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  nodes::INode > * >(argp1);
      arg1 = const_cast< nodes::INode * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "INode_SetTag" "', argument " "2"" of type '" "nodes::Tag""'");
  } 
  arg2 = static_cast< nodes::Tag >(val2);
  (arg1)->SetTag(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_INode_SetNodeIndex(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  nodes::INode *arg1 = (nodes::INode *) 0 ;
  nodes::Index *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< nodes::INode > tempshared1 ;
  std::shared_ptr< nodes::INode > *smartarg1 = 0 ;
  nodes::Index temp2 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "INode_SetNodeIndex", 2, 2, swig_obj)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_nodes__INode_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "INode_SetNodeIndex" "', argument " "1"" of type '" "nodes::INode *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  nodes::INode > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  nodes::INode > * >(argp1);
      arg1 = const_cast< nodes::INode * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  nodes::INode > * >(argp1);
      arg1 = const_cast< nodes::INode * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "INode_SetNodeIndex" "', argument " "2"" of type '" "nodes::Index""'");
  } 
  temp2 = static_cast< nodes::Index >(val2);
  arg2 = &temp2;
  (arg1)->SetNodeIndex((nodes::Index const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_INode_SetNumberDof(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  nodes::INode *arg1 = (nodes::INode *) 0 ;
  nodes::NumberDof *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< nodes::INode > tempshared1 ;
  std::shared_ptr< nodes::INode > *smartarg1 = 0 ;
  nodes::NumberDof temp2 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "INode_SetNumberDof", 2, 2, swig_obj)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_nodes__INode_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "INode_SetNumberDof" "', argument " "1"" of type '" "nodes::INode *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  nodes::INode > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  nodes::INode > * >(argp1);
      arg1 = const_cast< nodes::INode * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  nodes::INode > * >(argp1);
      arg1 = const_cast< nodes::INode * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "INode_SetNumberDof" "', argument " "2"" of type '" "nodes::NumberDof""'");
  } 
  temp2 = static_cast< nodes::NumberDof >(val2);
  arg2 = &temp2;
  (arg1)->SetNumberDof((nodes::NumberDof const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_INode_GetNodeIndex(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  nodes::INode *arg1 = (nodes::INode *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< nodes::INode const > tempshared1 ;
  std::shared_ptr< nodes::INode const > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  nodes::Index result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_nodes__INode_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "INode_GetNodeIndex" "', argument " "1"" of type '" "nodes::INode const *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const nodes::INode > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const nodes::INode > * >(argp1);
      arg1 = const_cast< nodes::INode * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const nodes::INode > * >(argp1);
      arg1 = const_cast< nodes::INode * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = ((nodes::INode const *)arg1)->GetNodeIndex();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_INode_GetNumberDof(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  nodes::INode *arg1 = (nodes::INode *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< nodes::INode const > tempshared1 ;
  std::shared_ptr< nodes::INode const > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  nodes::NumberDof result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_nodes__INode_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "INode_GetNumberDof" "', argument " "1"" of type '" "nodes::INode const *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const nodes::INode > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const nodes::INode > * >(argp1);
      arg1 = const_cast< nodes::INode * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const nodes::INode > * >(argp1);
      arg1 = const_cast< nodes::INode * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = ((nodes::INode const *)arg1)->GetNumberDof();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_INode_GetElements(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  nodes::INode *arg1 = (nodes::INode *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< nodes::INode const > tempshared1 ;
  std::shared_ptr< nodes::INode const > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  nodes::Elements *result = 0 ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_nodes__INode_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "INode_GetElements" "', argument " "1"" of type '" "nodes::INode const *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const nodes::INode > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const nodes::INode > * >(argp1);
      arg1 = const_cast< nodes::INode * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const nodes::INode > * >(argp1);
      arg1 = const_cast< nodes::INode * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = (nodes::Elements *) &((nodes::INode const *)arg1)->GetElements();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__shared_ptrT_dive__elements__IElement_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_INode_AddElement(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  nodes::INode *arg1 = (nodes::INode *) 0 ;
  nodes::IElementPtr arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< nodes::INode > tempshared1 ;
  std::shared_ptr< nodes::INode > *smartarg1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "INode_AddElement", 2, 2, swig_obj)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_nodes__INode_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "INode_AddElement" "', argument " "1"" of type '" "nodes::INode *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  nodes::INode > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  nodes::INode > * >(argp1);
      arg1 = const_cast< nodes::INode * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  nodes::INode > * >(argp1);
      arg1 = const_cast< nodes::INode * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_std__shared_ptrT_dive__elements__IElement_t,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "INode_AddElement" "', argument " "2"" of type '" "nodes::IElementPtr""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "INode_AddElement" "', argument " "2"" of type '" "nodes::IElementPtr""'");
    } else {
      nodes::IElementPtr * temp = reinterpret_cast< nodes::IElementPtr * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  (arg1)->AddElement(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_INode_RemoveElement(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  nodes::INode *arg1 = (nodes::INode *) 0 ;
  nodes::IElementPtr arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< nodes::INode > tempshared1 ;
  std::shared_ptr< nodes::INode > *smartarg1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "INode_RemoveElement", 2, 2, swig_obj)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_nodes__INode_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "INode_RemoveElement" "', argument " "1"" of type '" "nodes::INode *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  nodes::INode > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  nodes::INode > * >(argp1);
      arg1 = const_cast< nodes::INode * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  nodes::INode > * >(argp1);
      arg1 = const_cast< nodes::INode * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_std__shared_ptrT_dive__elements__IElement_t,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "INode_RemoveElement" "', argument " "2"" of type '" "nodes::IElementPtr""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "INode_RemoveElement" "', argument " "2"" of type '" "nodes::IElementPtr""'");
    } else {
      nodes::IElementPtr * temp = reinterpret_cast< nodes::IElementPtr * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  (arg1)->RemoveElement(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_INode_ClearElements(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  nodes::INode *arg1 = (nodes::INode *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< nodes::INode > tempshared1 ;
  std::shared_ptr< nodes::INode > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_nodes__INode_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "INode_ClearElements" "', argument " "1"" of type '" "nodes::INode *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  nodes::INode > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  nodes::INode > * >(argp1);
      arg1 = const_cast< nodes::INode * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  nodes::INode > * >(argp1);
      arg1 = const_cast< nodes::INode * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  (arg1)->ClearElements();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *INode_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_std__shared_ptrT_nodes__INode_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_CreateNode__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **SWIGUNUSEDPARM(swig_obj)) {
  PyObject *resultobj = 0;
  nodes::NodePtr result;
  
  (void)self;
  if ((nobjs < 0) || (nobjs > 0)) SWIG_fail;
  result = nodes::CreateNode();
  {
    std::shared_ptr<  nodes::Node > *smartresult = result ? new std::shared_ptr<  nodes::Node >(result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_std__shared_ptrT_nodes__Node_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CreateNode__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  nodes::Tag arg1 ;
  size_t val1 ;
  int ecode1 = 0 ;
  nodes::NodePtr result;
  
  (void)self;
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "CreateNode" "', argument " "1"" of type '" "nodes::Tag""'");
  } 
  arg1 = static_cast< nodes::Tag >(val1);
  result = nodes::CreateNode(SWIG_STD_MOVE(arg1));
  {
    std::shared_ptr<  nodes::Node > *smartresult = result ? new std::shared_ptr<  nodes::Node >(result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_std__shared_ptrT_nodes__Node_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CreateNode__SWIG_2(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  nodes::Tag arg1 ;
  nodes::Scalar arg2 ;
  nodes::Scalar arg3 ;
  nodes::Scalar arg4 ;
  size_t val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  nodes::NodePtr result;
  
  (void)self;
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "CreateNode" "', argument " "1"" of type '" "nodes::Tag""'");
  } 
  arg1 = static_cast< nodes::Tag >(val1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CreateNode" "', argument " "2"" of type '" "nodes::Scalar""'");
  } 
  arg2 = static_cast< nodes::Scalar >(val2);
  ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "CreateNode" "', argument " "3"" of type '" "nodes::Scalar""'");
  } 
  arg3 = static_cast< nodes::Scalar >(val3);
  ecode4 = SWIG_AsVal_double(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "CreateNode" "', argument " "4"" of type '" "nodes::Scalar""'");
  } 
  arg4 = static_cast< nodes::Scalar >(val4);
  result = nodes::CreateNode(SWIG_STD_MOVE(arg1),arg2,arg3,arg4);
  {
    std::shared_ptr<  nodes::Node > *smartresult = result ? new std::shared_ptr<  nodes::Node >(result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_std__shared_ptrT_nodes__Node_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CreateNode__SWIG_3(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  nodes::Tag arg1 ;
  nodes::Scalar arg2 ;
  nodes::Scalar arg3 ;
  nodes::Scalar arg4 ;
  nodes::Scalar arg5 ;
  size_t val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  double val5 ;
  int ecode5 = 0 ;
  nodes::NodePtr result;
  
  (void)self;
  if ((nobjs < 5) || (nobjs > 5)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "CreateNode" "', argument " "1"" of type '" "nodes::Tag""'");
  } 
  arg1 = static_cast< nodes::Tag >(val1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CreateNode" "', argument " "2"" of type '" "nodes::Scalar""'");
  } 
  arg2 = static_cast< nodes::Scalar >(val2);
  ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "CreateNode" "', argument " "3"" of type '" "nodes::Scalar""'");
  } 
  arg3 = static_cast< nodes::Scalar >(val3);
  ecode4 = SWIG_AsVal_double(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "CreateNode" "', argument " "4"" of type '" "nodes::Scalar""'");
  } 
  arg4 = static_cast< nodes::Scalar >(val4);
  ecode5 = SWIG_AsVal_double(swig_obj[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "CreateNode" "', argument " "5"" of type '" "nodes::Scalar""'");
  } 
  arg5 = static_cast< nodes::Scalar >(val5);
  result = nodes::CreateNode(SWIG_STD_MOVE(arg1),arg2,arg3,arg4,arg5);
  {
    std::shared_ptr<  nodes::Node > *smartresult = result ? new std::shared_ptr<  nodes::Node >(result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_std__shared_ptrT_nodes__Node_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CreateNode__SWIG_4(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  nodes::Tag arg1 ;
  nodes::Vector *arg2 = 0 ;
  size_t val1 ;
  int ecode1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  nodes::NodePtr result;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "CreateNode" "', argument " "1"" of type '" "nodes::Tag""'");
  } 
  arg1 = static_cast< nodes::Tag >(val1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_eilig__Vector,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CreateNode" "', argument " "2"" of type '" "nodes::Vector const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CreateNode" "', argument " "2"" of type '" "nodes::Vector const &""'"); 
  }
  arg2 = reinterpret_cast< nodes::Vector * >(argp2);
  result = nodes::CreateNode(SWIG_STD_MOVE(arg1),(eilig::Vector const &)*arg2);
  {
    std::shared_ptr<  nodes::Node > *smartresult = result ? new std::shared_ptr<  nodes::Node >(result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_std__shared_ptrT_nodes__Node_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CreateNode__SWIG_5(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  nodes::Tag arg1 ;
  nodes::Vector *arg2 = 0 ;
  nodes::Matrix *arg3 = 0 ;
  size_t val1 ;
  int ecode1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  nodes::NodePtr result;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "CreateNode" "', argument " "1"" of type '" "nodes::Tag""'");
  } 
  arg1 = static_cast< nodes::Tag >(val1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_eilig__Vector,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CreateNode" "', argument " "2"" of type '" "nodes::Vector const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CreateNode" "', argument " "2"" of type '" "nodes::Vector const &""'"); 
  }
  arg2 = reinterpret_cast< nodes::Vector * >(argp2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_eilig__Matrix,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "CreateNode" "', argument " "3"" of type '" "nodes::Matrix const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CreateNode" "', argument " "3"" of type '" "nodes::Matrix const &""'"); 
  }
  arg3 = reinterpret_cast< nodes::Matrix * >(argp3);
  result = nodes::CreateNode(SWIG_STD_MOVE(arg1),(eilig::Vector const &)*arg2,(eilig::Matrix const &)*arg3);
  {
    std::shared_ptr<  nodes::Node > *smartresult = result ? new std::shared_ptr<  nodes::Node >(result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_std__shared_ptrT_nodes__Node_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CreateNode__SWIG_6(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  nodes::Scalar arg1 ;
  nodes::Scalar arg2 ;
  nodes::Scalar arg3 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  nodes::NodePtr result;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "CreateNode" "', argument " "1"" of type '" "nodes::Scalar""'");
  } 
  arg1 = static_cast< nodes::Scalar >(val1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CreateNode" "', argument " "2"" of type '" "nodes::Scalar""'");
  } 
  arg2 = static_cast< nodes::Scalar >(val2);
  ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "CreateNode" "', argument " "3"" of type '" "nodes::Scalar""'");
  } 
  arg3 = static_cast< nodes::Scalar >(val3);
  result = nodes::CreateNode(arg1,arg2,arg3);
  {
    std::shared_ptr<  nodes::Node > *smartresult = result ? new std::shared_ptr<  nodes::Node >(result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_std__shared_ptrT_nodes__Node_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CreateNode__SWIG_7(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  nodes::Scalar arg1 ;
  nodes::Scalar arg2 ;
  nodes::Scalar arg3 ;
  nodes::Scalar arg4 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  nodes::NodePtr result;
  
  (void)self;
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "CreateNode" "', argument " "1"" of type '" "nodes::Scalar""'");
  } 
  arg1 = static_cast< nodes::Scalar >(val1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CreateNode" "', argument " "2"" of type '" "nodes::Scalar""'");
  } 
  arg2 = static_cast< nodes::Scalar >(val2);
  ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "CreateNode" "', argument " "3"" of type '" "nodes::Scalar""'");
  } 
  arg3 = static_cast< nodes::Scalar >(val3);
  ecode4 = SWIG_AsVal_double(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "CreateNode" "', argument " "4"" of type '" "nodes::Scalar""'");
  } 
  arg4 = static_cast< nodes::Scalar >(val4);
  result = nodes::CreateNode(arg1,arg2,arg3,arg4);
  {
    std::shared_ptr<  nodes::Node > *smartresult = result ? new std::shared_ptr<  nodes::Node >(result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_std__shared_ptrT_nodes__Node_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CreateNode__SWIG_8(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  nodes::Vector *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  nodes::NodePtr result;
  
  (void)self;
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_eilig__Vector,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CreateNode" "', argument " "1"" of type '" "nodes::Vector const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CreateNode" "', argument " "1"" of type '" "nodes::Vector const &""'"); 
  }
  arg1 = reinterpret_cast< nodes::Vector * >(argp1);
  result = nodes::CreateNode((eilig::Vector const &)*arg1);
  {
    std::shared_ptr<  nodes::Node > *smartresult = result ? new std::shared_ptr<  nodes::Node >(result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_std__shared_ptrT_nodes__Node_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CreateNode__SWIG_9(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  nodes::Vector *arg1 = 0 ;
  nodes::Matrix *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  nodes::NodePtr result;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_eilig__Vector,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CreateNode" "', argument " "1"" of type '" "nodes::Vector const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CreateNode" "', argument " "1"" of type '" "nodes::Vector const &""'"); 
  }
  arg1 = reinterpret_cast< nodes::Vector * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_eilig__Matrix,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CreateNode" "', argument " "2"" of type '" "nodes::Matrix const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CreateNode" "', argument " "2"" of type '" "nodes::Matrix const &""'"); 
  }
  arg2 = reinterpret_cast< nodes::Matrix * >(argp2);
  result = nodes::CreateNode((eilig::Vector const &)*arg1,(eilig::Matrix const &)*arg2);
  {
    std::shared_ptr<  nodes::Node > *smartresult = result ? new std::shared_ptr<  nodes::Node >(result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_std__shared_ptrT_nodes__Node_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CreateNode(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[6] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "CreateNode", 0, 5, argv))) SWIG_fail;
  --argc;
  if (argc == 0) {
    return _wrap_CreateNode__SWIG_0(self, argc, argv);
  }
  if (argc == 1) {
    int _v = 0;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_eilig__Vector, SWIG_POINTER_NO_NULL | 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_CreateNode__SWIG_8(self, argc, argv);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_CreateNode__SWIG_1(self, argc, argv);
    }
  }
  if (argc == 2) {
    int _v = 0;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_eilig__Vector, SWIG_POINTER_NO_NULL | 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_eilig__Matrix, SWIG_POINTER_NO_NULL | 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_CreateNode__SWIG_9(self, argc, argv);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_eilig__Vector, SWIG_POINTER_NO_NULL | 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_CreateNode__SWIG_4(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_eilig__Vector, SWIG_POINTER_NO_NULL | 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_eilig__Matrix, SWIG_POINTER_NO_NULL | 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_CreateNode__SWIG_5(self, argc, argv);
        }
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_CreateNode__SWIG_6(self, argc, argv);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_CreateNode__SWIG_2(self, argc, argv);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_CreateNode__SWIG_7(self, argc, argv);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v = 0;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_double(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_CreateNode__SWIG_3(self, argc, argv);
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'CreateNode'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    nodes::CreateNode()\n"
    "    nodes::CreateNode(nodes::Tag)\n"
    "    nodes::CreateNode(nodes::Tag,nodes::Scalar,nodes::Scalar,nodes::Scalar)\n"
    "    nodes::CreateNode(nodes::Tag,nodes::Scalar,nodes::Scalar,nodes::Scalar,nodes::Scalar)\n"
    "    nodes::CreateNode(nodes::Tag,nodes::Vector const &)\n"
    "    nodes::CreateNode(nodes::Tag,nodes::Vector const &,nodes::Matrix const &)\n"
    "    nodes::CreateNode(nodes::Scalar,nodes::Scalar,nodes::Scalar)\n"
    "    nodes::CreateNode(nodes::Scalar,nodes::Scalar,nodes::Scalar,nodes::Scalar)\n"
    "    nodes::CreateNode(nodes::Vector const &)\n"
    "    nodes::CreateNode(nodes::Vector const &,nodes::Matrix const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_CreateNodes(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  nodes::Matrix *arg1 = 0 ;
  nodes::Dimension arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  nodes::Nodes result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "CreateNodes", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_eilig__Matrix,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CreateNodes" "', argument " "1"" of type '" "nodes::Matrix const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CreateNodes" "', argument " "1"" of type '" "nodes::Matrix const &""'"); 
  }
  arg1 = reinterpret_cast< nodes::Matrix * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CreateNodes" "', argument " "2"" of type '" "nodes::Dimension""'");
  } 
  arg2 = static_cast< nodes::Dimension >(val2);
  result = nodes::CreateNodes((eilig::Matrix const &)*arg1,SWIG_STD_MOVE(arg2));
  resultobj = swig::from(static_cast< std::vector< std::shared_ptr< nodes::INode >,std::allocator< std::shared_ptr< nodes::INode > > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_Node(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  nodes::Node *arg1 = (nodes::Node *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< nodes::Node > tempshared1 ;
  std::shared_ptr< nodes::Node > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_nodes__Node_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Node" "', argument " "1"" of type '" "nodes::Node *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  nodes::Node > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  nodes::Node > * >(argp1);
      arg1 = const_cast< nodes::Node * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  nodes::Node > * >(argp1);
      arg1 = const_cast< nodes::Node * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  (void)arg1; delete smartarg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Node_Create(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  nodes::NodePtr result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "Node_Create", 0, 0, 0)) SWIG_fail;
  result = nodes::Node::Create();
  {
    std::shared_ptr<  nodes::Node > *smartresult = result ? new std::shared_ptr<  nodes::Node >(result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_std__shared_ptrT_nodes__Node_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Node_GetPtr__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  nodes::Node *arg1 = (nodes::Node *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< nodes::Node > tempshared1 ;
  std::shared_ptr< nodes::Node > *smartarg1 = 0 ;
  nodes::NodePtr result;
  
  (void)self;
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_nodes__Node_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Node_GetPtr" "', argument " "1"" of type '" "nodes::Node *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  nodes::Node > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  nodes::Node > * >(argp1);
      arg1 = const_cast< nodes::Node * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  nodes::Node > * >(argp1);
      arg1 = const_cast< nodes::Node * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = (arg1)->GetPtr();
  {
    std::shared_ptr<  nodes::Node > *smartresult = result ? new std::shared_ptr<  nodes::Node >(result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_std__shared_ptrT_nodes__Node_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Node_GetPtr__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  nodes::Node *arg1 = (nodes::Node *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< nodes::Node const > tempshared1 ;
  std::shared_ptr< nodes::Node const > *smartarg1 = 0 ;
  nodes::ConstNodePtr result;
  
  (void)self;
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_nodes__Node_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Node_GetPtr" "', argument " "1"" of type '" "nodes::Node const *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const nodes::Node > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const nodes::Node > * >(argp1);
      arg1 = const_cast< nodes::Node * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const nodes::Node > * >(argp1);
      arg1 = const_cast< nodes::Node * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = ((nodes::Node const *)arg1)->GetPtr();
  {
    std::shared_ptr< const nodes::Node > *smartresult = result ? new std::shared_ptr< const nodes::Node >(result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_std__shared_ptrT_nodes__Node_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Node_GetPtr(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "Node_GetPtr", 0, 1, argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    int _v = 0;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_std__shared_ptrT_nodes__Node_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_Node_GetPtr__SWIG_0(self, argc, argv);
    }
  }
  if (argc == 1) {
    int _v = 0;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_std__shared_ptrT_nodes__Node_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_Node_GetPtr__SWIG_1(self, argc, argv);
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'Node_GetPtr'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    nodes::Node::GetPtr()\n"
    "    nodes::Node::GetPtr() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Node_GetPoint(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  nodes::Node *arg1 = (nodes::Node *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< nodes::Node const > tempshared1 ;
  std::shared_ptr< nodes::Node const > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  nodes::Vector *result = 0 ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_nodes__Node_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Node_GetPoint" "', argument " "1"" of type '" "nodes::Node const *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const nodes::Node > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const nodes::Node > * >(argp1);
      arg1 = const_cast< nodes::Node * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const nodes::Node > * >(argp1);
      arg1 = const_cast< nodes::Node * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = (nodes::Vector *) &((nodes::Node const *)arg1)->GetPoint();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_eilig__Vector, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Node_GetValue__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  nodes::Node *arg1 = (nodes::Node *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< nodes::Node const > tempshared1 ;
  std::shared_ptr< nodes::Node const > *smartarg1 = 0 ;
  nodes::Matrix *result = 0 ;
  
  (void)self;
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_nodes__Node_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Node_GetValue" "', argument " "1"" of type '" "nodes::Node const *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const nodes::Node > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const nodes::Node > * >(argp1);
      arg1 = const_cast< nodes::Node * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const nodes::Node > * >(argp1);
      arg1 = const_cast< nodes::Node * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = (nodes::Matrix *) &((nodes::Node const *)arg1)->GetValue();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_eilig__Matrix, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Node_GetValue__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  nodes::Node *arg1 = (nodes::Node *) 0 ;
  nodes::DofIndex arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< nodes::Node const > tempshared1 ;
  std::shared_ptr< nodes::Node const > *smartarg1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  nodes::Scalar result;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_nodes__Node_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Node_GetValue" "', argument " "1"" of type '" "nodes::Node const *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const nodes::Node > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const nodes::Node > * >(argp1);
      arg1 = const_cast< nodes::Node * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const nodes::Node > * >(argp1);
      arg1 = const_cast< nodes::Node * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Node_GetValue" "', argument " "2"" of type '" "nodes::DofIndex""'");
  } 
  arg2 = static_cast< nodes::DofIndex >(val2);
  result = (nodes::Scalar)((nodes::Node const *)arg1)->GetValue(arg2);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Node_GetValue(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "Node_GetValue", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    int _v = 0;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_std__shared_ptrT_nodes__Node_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_Node_GetValue__SWIG_0(self, argc, argv);
    }
  }
  if (argc == 2) {
    int _v = 0;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_std__shared_ptrT_nodes__Node_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Node_GetValue__SWIG_1(self, argc, argv);
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'Node_GetValue'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    nodes::Node::GetValue() const\n"
    "    nodes::Node::GetValue(nodes::DofIndex) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Node_GetTag(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  nodes::Node *arg1 = (nodes::Node *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< nodes::Node const > tempshared1 ;
  std::shared_ptr< nodes::Node const > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  nodes::Tag result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_nodes__Node_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Node_GetTag" "', argument " "1"" of type '" "nodes::Node const *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const nodes::Node > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const nodes::Node > * >(argp1);
      arg1 = const_cast< nodes::Node * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const nodes::Node > * >(argp1);
      arg1 = const_cast< nodes::Node * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = ((nodes::Node const *)arg1)->GetTag();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Node_SetPoint__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  nodes::Node *arg1 = (nodes::Node *) 0 ;
  nodes::Scalar arg2 ;
  nodes::Scalar arg3 ;
  nodes::Scalar arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< nodes::Node > tempshared1 ;
  std::shared_ptr< nodes::Node > *smartarg1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  
  (void)self;
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_nodes__Node_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Node_SetPoint" "', argument " "1"" of type '" "nodes::Node *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  nodes::Node > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  nodes::Node > * >(argp1);
      arg1 = const_cast< nodes::Node * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  nodes::Node > * >(argp1);
      arg1 = const_cast< nodes::Node * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Node_SetPoint" "', argument " "2"" of type '" "nodes::Scalar""'");
  } 
  arg2 = static_cast< nodes::Scalar >(val2);
  ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Node_SetPoint" "', argument " "3"" of type '" "nodes::Scalar""'");
  } 
  arg3 = static_cast< nodes::Scalar >(val3);
  ecode4 = SWIG_AsVal_double(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Node_SetPoint" "', argument " "4"" of type '" "nodes::Scalar""'");
  } 
  arg4 = static_cast< nodes::Scalar >(val4);
  (arg1)->SetPoint(arg2,arg3,arg4);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Node_SetPoint__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  nodes::Node *arg1 = (nodes::Node *) 0 ;
  nodes::Vector *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< nodes::Node > tempshared1 ;
  std::shared_ptr< nodes::Node > *smartarg1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_nodes__Node_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Node_SetPoint" "', argument " "1"" of type '" "nodes::Node *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  nodes::Node > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  nodes::Node > * >(argp1);
      arg1 = const_cast< nodes::Node * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  nodes::Node > * >(argp1);
      arg1 = const_cast< nodes::Node * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_eilig__Vector,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Node_SetPoint" "', argument " "2"" of type '" "nodes::Vector const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Node_SetPoint" "', argument " "2"" of type '" "nodes::Vector const &""'"); 
  }
  arg2 = reinterpret_cast< nodes::Vector * >(argp2);
  (arg1)->SetPoint((nodes::Vector const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Node_SetPoint(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "Node_SetPoint", 0, 4, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_std__shared_ptrT_nodes__Node_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_eilig__Vector, SWIG_POINTER_NO_NULL | 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Node_SetPoint__SWIG_1(self, argc, argv);
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_std__shared_ptrT_nodes__Node_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_Node_SetPoint__SWIG_0(self, argc, argv);
          }
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'Node_SetPoint'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    nodes::Node::SetPoint(nodes::Scalar,nodes::Scalar,nodes::Scalar)\n"
    "    nodes::Node::SetPoint(nodes::Vector const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Node_SetValue__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  nodes::Node *arg1 = (nodes::Node *) 0 ;
  nodes::Matrix *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< nodes::Node > tempshared1 ;
  std::shared_ptr< nodes::Node > *smartarg1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_nodes__Node_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Node_SetValue" "', argument " "1"" of type '" "nodes::Node *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  nodes::Node > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  nodes::Node > * >(argp1);
      arg1 = const_cast< nodes::Node * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  nodes::Node > * >(argp1);
      arg1 = const_cast< nodes::Node * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_eilig__Matrix,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Node_SetValue" "', argument " "2"" of type '" "nodes::Matrix const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Node_SetValue" "', argument " "2"" of type '" "nodes::Matrix const &""'"); 
  }
  arg2 = reinterpret_cast< nodes::Matrix * >(argp2);
  (arg1)->SetValue((nodes::Matrix const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Node_SetValue__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  nodes::Node *arg1 = (nodes::Node *) 0 ;
  nodes::DofIndex arg2 ;
  nodes::Scalar arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< nodes::Node > tempshared1 ;
  std::shared_ptr< nodes::Node > *smartarg1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_nodes__Node_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Node_SetValue" "', argument " "1"" of type '" "nodes::Node *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  nodes::Node > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  nodes::Node > * >(argp1);
      arg1 = const_cast< nodes::Node * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  nodes::Node > * >(argp1);
      arg1 = const_cast< nodes::Node * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Node_SetValue" "', argument " "2"" of type '" "nodes::DofIndex""'");
  } 
  arg2 = static_cast< nodes::DofIndex >(val2);
  ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Node_SetValue" "', argument " "3"" of type '" "nodes::Scalar""'");
  } 
  arg3 = static_cast< nodes::Scalar >(val3);
  (arg1)->SetValue(arg2,arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Node_SetValue(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "Node_SetValue", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_std__shared_ptrT_nodes__Node_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_eilig__Matrix, SWIG_POINTER_NO_NULL | 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Node_SetValue__SWIG_0(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_std__shared_ptrT_nodes__Node_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_Node_SetValue__SWIG_1(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'Node_SetValue'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    nodes::Node::SetValue(nodes::Matrix const &)\n"
    "    nodes::Node::SetValue(nodes::DofIndex,nodes::Scalar)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Node_SetTag(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  nodes::Node *arg1 = (nodes::Node *) 0 ;
  nodes::Tag arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< nodes::Node > tempshared1 ;
  std::shared_ptr< nodes::Node > *smartarg1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "Node_SetTag", 2, 2, swig_obj)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_nodes__Node_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Node_SetTag" "', argument " "1"" of type '" "nodes::Node *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  nodes::Node > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  nodes::Node > * >(argp1);
      arg1 = const_cast< nodes::Node * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  nodes::Node > * >(argp1);
      arg1 = const_cast< nodes::Node * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Node_SetTag" "', argument " "2"" of type '" "nodes::Tag""'");
  } 
  arg2 = static_cast< nodes::Tag >(val2);
  (arg1)->SetTag(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Node_SetNodeIndex(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  nodes::Node *arg1 = (nodes::Node *) 0 ;
  nodes::Index *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< nodes::Node > tempshared1 ;
  std::shared_ptr< nodes::Node > *smartarg1 = 0 ;
  nodes::Index temp2 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "Node_SetNodeIndex", 2, 2, swig_obj)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_nodes__Node_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Node_SetNodeIndex" "', argument " "1"" of type '" "nodes::Node *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  nodes::Node > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  nodes::Node > * >(argp1);
      arg1 = const_cast< nodes::Node * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  nodes::Node > * >(argp1);
      arg1 = const_cast< nodes::Node * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Node_SetNodeIndex" "', argument " "2"" of type '" "nodes::Index""'");
  } 
  temp2 = static_cast< nodes::Index >(val2);
  arg2 = &temp2;
  (arg1)->SetNodeIndex((nodes::Index const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Node_SetNumberDof(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  nodes::Node *arg1 = (nodes::Node *) 0 ;
  nodes::NumberDof *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< nodes::Node > tempshared1 ;
  std::shared_ptr< nodes::Node > *smartarg1 = 0 ;
  nodes::NumberDof temp2 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "Node_SetNumberDof", 2, 2, swig_obj)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_nodes__Node_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Node_SetNumberDof" "', argument " "1"" of type '" "nodes::Node *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  nodes::Node > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  nodes::Node > * >(argp1);
      arg1 = const_cast< nodes::Node * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  nodes::Node > * >(argp1);
      arg1 = const_cast< nodes::Node * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Node_SetNumberDof" "', argument " "2"" of type '" "nodes::NumberDof""'");
  } 
  temp2 = static_cast< nodes::NumberDof >(val2);
  arg2 = &temp2;
  (arg1)->SetNumberDof((nodes::NumberDof const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Node_GetNodeIndex(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  nodes::Node *arg1 = (nodes::Node *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< nodes::Node const > tempshared1 ;
  std::shared_ptr< nodes::Node const > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  nodes::Index result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_nodes__Node_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Node_GetNodeIndex" "', argument " "1"" of type '" "nodes::Node const *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const nodes::Node > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const nodes::Node > * >(argp1);
      arg1 = const_cast< nodes::Node * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const nodes::Node > * >(argp1);
      arg1 = const_cast< nodes::Node * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = ((nodes::Node const *)arg1)->GetNodeIndex();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Node_GetNumberDof(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  nodes::Node *arg1 = (nodes::Node *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< nodes::Node const > tempshared1 ;
  std::shared_ptr< nodes::Node const > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  nodes::NumberDof result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_nodes__Node_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Node_GetNumberDof" "', argument " "1"" of type '" "nodes::Node const *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const nodes::Node > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const nodes::Node > * >(argp1);
      arg1 = const_cast< nodes::Node * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const nodes::Node > * >(argp1);
      arg1 = const_cast< nodes::Node * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = ((nodes::Node const *)arg1)->GetNumberDof();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Node_GetElements(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  nodes::Node *arg1 = (nodes::Node *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< nodes::Node const > tempshared1 ;
  std::shared_ptr< nodes::Node const > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  nodes::Elements *result = 0 ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_nodes__Node_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Node_GetElements" "', argument " "1"" of type '" "nodes::Node const *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const nodes::Node > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const nodes::Node > * >(argp1);
      arg1 = const_cast< nodes::Node * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const nodes::Node > * >(argp1);
      arg1 = const_cast< nodes::Node * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = (nodes::Elements *) &((nodes::Node const *)arg1)->GetElements();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__shared_ptrT_dive__elements__IElement_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Node_AddElement(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  nodes::Node *arg1 = (nodes::Node *) 0 ;
  nodes::IElementPtr arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< nodes::Node > tempshared1 ;
  std::shared_ptr< nodes::Node > *smartarg1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "Node_AddElement", 2, 2, swig_obj)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_nodes__Node_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Node_AddElement" "', argument " "1"" of type '" "nodes::Node *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  nodes::Node > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  nodes::Node > * >(argp1);
      arg1 = const_cast< nodes::Node * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  nodes::Node > * >(argp1);
      arg1 = const_cast< nodes::Node * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_std__shared_ptrT_dive__elements__IElement_t,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Node_AddElement" "', argument " "2"" of type '" "nodes::IElementPtr""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Node_AddElement" "', argument " "2"" of type '" "nodes::IElementPtr""'");
    } else {
      nodes::IElementPtr * temp = reinterpret_cast< nodes::IElementPtr * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  (arg1)->AddElement(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Node_RemoveElement(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  nodes::Node *arg1 = (nodes::Node *) 0 ;
  nodes::IElementPtr arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< nodes::Node > tempshared1 ;
  std::shared_ptr< nodes::Node > *smartarg1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "Node_RemoveElement", 2, 2, swig_obj)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_nodes__Node_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Node_RemoveElement" "', argument " "1"" of type '" "nodes::Node *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  nodes::Node > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  nodes::Node > * >(argp1);
      arg1 = const_cast< nodes::Node * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  nodes::Node > * >(argp1);
      arg1 = const_cast< nodes::Node * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_std__shared_ptrT_dive__elements__IElement_t,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Node_RemoveElement" "', argument " "2"" of type '" "nodes::IElementPtr""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Node_RemoveElement" "', argument " "2"" of type '" "nodes::IElementPtr""'");
    } else {
      nodes::IElementPtr * temp = reinterpret_cast< nodes::IElementPtr * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  (arg1)->RemoveElement(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Node_ClearElements(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  nodes::Node *arg1 = (nodes::Node *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< nodes::Node > tempshared1 ;
  std::shared_ptr< nodes::Node > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_nodes__Node_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Node_ClearElements" "', argument " "1"" of type '" "nodes::Node *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  nodes::Node > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  nodes::Node > * >(argp1);
      arg1 = const_cast< nodes::Node * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  nodes::Node > * >(argp1);
      arg1 = const_cast< nodes::Node * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  (arg1)->ClearElements();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *Node_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_std__shared_ptrT_nodes__Node_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_vecElements_iterator(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::shared_ptr< dive::elements::IElement > > *arg1 = (std::vector< std::shared_ptr< dive::elements::IElement > > *) 0 ;
  PyObject **arg2 = (PyObject **) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  swig::SwigPyIterator *result = 0 ;
  
  arg2 = &swig_obj[0];
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__shared_ptrT_dive__elements__IElement_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vecElements_iterator" "', argument " "1"" of type '" "std::vector< std::shared_ptr< dive::elements::IElement > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::shared_ptr< dive::elements::IElement > > * >(argp1);
  result = (swig::SwigPyIterator *)std_vector_Sl_std_shared_ptr_Sl_dive_elements_IElement_Sg__Sg__iterator(arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vecElements___nonzero__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::shared_ptr< dive::elements::IElement > > *arg1 = (std::vector< std::shared_ptr< dive::elements::IElement > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__shared_ptrT_dive__elements__IElement_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vecElements___nonzero__" "', argument " "1"" of type '" "std::vector< std::shared_ptr< dive::elements::IElement > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::shared_ptr< dive::elements::IElement > > * >(argp1);
  result = (bool)std_vector_Sl_std_shared_ptr_Sl_dive_elements_IElement_Sg__Sg____nonzero__((std::vector< std::shared_ptr< dive::elements::IElement > > const *)arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vecElements___bool__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::shared_ptr< dive::elements::IElement > > *arg1 = (std::vector< std::shared_ptr< dive::elements::IElement > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__shared_ptrT_dive__elements__IElement_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vecElements___bool__" "', argument " "1"" of type '" "std::vector< std::shared_ptr< dive::elements::IElement > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::shared_ptr< dive::elements::IElement > > * >(argp1);
  result = (bool)std_vector_Sl_std_shared_ptr_Sl_dive_elements_IElement_Sg__Sg____bool__((std::vector< std::shared_ptr< dive::elements::IElement > > const *)arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vecElements___len__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::shared_ptr< dive::elements::IElement > > *arg1 = (std::vector< std::shared_ptr< dive::elements::IElement > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< std::shared_ptr< dive::elements::IElement > >::size_type result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__shared_ptrT_dive__elements__IElement_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vecElements___len__" "', argument " "1"" of type '" "std::vector< std::shared_ptr< dive::elements::IElement > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::shared_ptr< dive::elements::IElement > > * >(argp1);
  result = std_vector_Sl_std_shared_ptr_Sl_dive_elements_IElement_Sg__Sg____len__((std::vector< std::shared_ptr< dive::elements::IElement > > const *)arg1);
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vecElements___getslice__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::shared_ptr< dive::elements::IElement > > *arg1 = (std::vector< std::shared_ptr< dive::elements::IElement > > *) 0 ;
  std::vector< std::shared_ptr< dive::elements::IElement > >::difference_type arg2 ;
  std::vector< std::shared_ptr< dive::elements::IElement > >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  std::vector< std::shared_ptr< dive::elements::IElement >,std::allocator< std::shared_ptr< dive::elements::IElement > > > *result = 0 ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "vecElements___getslice__", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__shared_ptrT_dive__elements__IElement_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vecElements___getslice__" "', argument " "1"" of type '" "std::vector< std::shared_ptr< dive::elements::IElement > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::shared_ptr< dive::elements::IElement > > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vecElements___getslice__" "', argument " "2"" of type '" "std::vector< std::shared_ptr< dive::elements::IElement > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< std::shared_ptr< dive::elements::IElement > >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "vecElements___getslice__" "', argument " "3"" of type '" "std::vector< std::shared_ptr< dive::elements::IElement > >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< std::shared_ptr< dive::elements::IElement > >::difference_type >(val3);
  try {
    result = (std::vector< std::shared_ptr< dive::elements::IElement >,std::allocator< std::shared_ptr< dive::elements::IElement > > > *)std_vector_Sl_std_shared_ptr_Sl_dive_elements_IElement_Sg__Sg____getslice__(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3));
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__shared_ptrT_dive__elements__IElement_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vecElements___setslice____SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< std::shared_ptr< dive::elements::IElement > > *arg1 = (std::vector< std::shared_ptr< dive::elements::IElement > > *) 0 ;
  std::vector< std::shared_ptr< dive::elements::IElement > >::difference_type arg2 ;
  std::vector< std::shared_ptr< dive::elements::IElement > >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__shared_ptrT_dive__elements__IElement_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vecElements___setslice__" "', argument " "1"" of type '" "std::vector< std::shared_ptr< dive::elements::IElement > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::shared_ptr< dive::elements::IElement > > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vecElements___setslice__" "', argument " "2"" of type '" "std::vector< std::shared_ptr< dive::elements::IElement > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< std::shared_ptr< dive::elements::IElement > >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "vecElements___setslice__" "', argument " "3"" of type '" "std::vector< std::shared_ptr< dive::elements::IElement > >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< std::shared_ptr< dive::elements::IElement > >::difference_type >(val3);
  try {
    std_vector_Sl_std_shared_ptr_Sl_dive_elements_IElement_Sg__Sg____setslice____SWIG_0(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3));
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vecElements___setslice____SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< std::shared_ptr< dive::elements::IElement > > *arg1 = (std::vector< std::shared_ptr< dive::elements::IElement > > *) 0 ;
  std::vector< std::shared_ptr< dive::elements::IElement > >::difference_type arg2 ;
  std::vector< std::shared_ptr< dive::elements::IElement > >::difference_type arg3 ;
  std::vector< std::shared_ptr< dive::elements::IElement >,std::allocator< std::shared_ptr< dive::elements::IElement > > > *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  
  (void)self;
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__shared_ptrT_dive__elements__IElement_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vecElements___setslice__" "', argument " "1"" of type '" "std::vector< std::shared_ptr< dive::elements::IElement > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::shared_ptr< dive::elements::IElement > > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vecElements___setslice__" "', argument " "2"" of type '" "std::vector< std::shared_ptr< dive::elements::IElement > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< std::shared_ptr< dive::elements::IElement > >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "vecElements___setslice__" "', argument " "3"" of type '" "std::vector< std::shared_ptr< dive::elements::IElement > >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< std::shared_ptr< dive::elements::IElement > >::difference_type >(val3);
  {
    std::vector< std::shared_ptr< dive::elements::IElement >,std::allocator< std::shared_ptr< dive::elements::IElement > > > *ptr = (std::vector< std::shared_ptr< dive::elements::IElement >,std::allocator< std::shared_ptr< dive::elements::IElement > > > *)0;
    res4 = swig::asptr(swig_obj[3], &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "vecElements___setslice__" "', argument " "4"" of type '" "std::vector< std::shared_ptr< dive::elements::IElement >,std::allocator< std::shared_ptr< dive::elements::IElement > > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vecElements___setslice__" "', argument " "4"" of type '" "std::vector< std::shared_ptr< dive::elements::IElement >,std::allocator< std::shared_ptr< dive::elements::IElement > > > const &""'"); 
    }
    arg4 = ptr;
  }
  try {
    std_vector_Sl_std_shared_ptr_Sl_dive_elements_IElement_Sg__Sg____setslice____SWIG_1(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3),(std::vector< std::shared_ptr< dive::elements::IElement >,std::allocator< std::shared_ptr< dive::elements::IElement > > > const &)*arg4);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_vecElements___setslice__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "vecElements___setslice__", 0, 4, argv))) SWIG_fail;
  --argc;
  if (argc == 3) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< std::shared_ptr< dive::elements::IElement >,std::allocator< std::shared_ptr< dive::elements::IElement > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_ptrdiff_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_vecElements___setslice____SWIG_0(self, argc, argv);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< std::shared_ptr< dive::elements::IElement >,std::allocator< std::shared_ptr< dive::elements::IElement > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_ptrdiff_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = swig::asptr(argv[3], (std::vector< std::shared_ptr< dive::elements::IElement >,std::allocator< std::shared_ptr< dive::elements::IElement > > >**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_vecElements___setslice____SWIG_1(self, argc, argv);
          }
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'vecElements___setslice__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< std::shared_ptr< dive::elements::IElement > >::__setslice__(std::vector< std::shared_ptr< dive::elements::IElement > >::difference_type,std::vector< std::shared_ptr< dive::elements::IElement > >::difference_type)\n"
    "    std::vector< std::shared_ptr< dive::elements::IElement > >::__setslice__(std::vector< std::shared_ptr< dive::elements::IElement > >::difference_type,std::vector< std::shared_ptr< dive::elements::IElement > >::difference_type,std::vector< std::shared_ptr< dive::elements::IElement >,std::allocator< std::shared_ptr< dive::elements::IElement > > > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_vecElements___delslice__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::shared_ptr< dive::elements::IElement > > *arg1 = (std::vector< std::shared_ptr< dive::elements::IElement > > *) 0 ;
  std::vector< std::shared_ptr< dive::elements::IElement > >::difference_type arg2 ;
  std::vector< std::shared_ptr< dive::elements::IElement > >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "vecElements___delslice__", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__shared_ptrT_dive__elements__IElement_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vecElements___delslice__" "', argument " "1"" of type '" "std::vector< std::shared_ptr< dive::elements::IElement > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::shared_ptr< dive::elements::IElement > > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vecElements___delslice__" "', argument " "2"" of type '" "std::vector< std::shared_ptr< dive::elements::IElement > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< std::shared_ptr< dive::elements::IElement > >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "vecElements___delslice__" "', argument " "3"" of type '" "std::vector< std::shared_ptr< dive::elements::IElement > >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< std::shared_ptr< dive::elements::IElement > >::difference_type >(val3);
  try {
    std_vector_Sl_std_shared_ptr_Sl_dive_elements_IElement_Sg__Sg____delslice__(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3));
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vecElements___delitem____SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< std::shared_ptr< dive::elements::IElement > > *arg1 = (std::vector< std::shared_ptr< dive::elements::IElement > > *) 0 ;
  std::vector< std::shared_ptr< dive::elements::IElement > >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__shared_ptrT_dive__elements__IElement_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vecElements___delitem__" "', argument " "1"" of type '" "std::vector< std::shared_ptr< dive::elements::IElement > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::shared_ptr< dive::elements::IElement > > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vecElements___delitem__" "', argument " "2"" of type '" "std::vector< std::shared_ptr< dive::elements::IElement > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< std::shared_ptr< dive::elements::IElement > >::difference_type >(val2);
  try {
    std_vector_Sl_std_shared_ptr_Sl_dive_elements_IElement_Sg__Sg____delitem____SWIG_0(arg1,SWIG_STD_MOVE(arg2));
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vecElements___getitem____SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< std::shared_ptr< dive::elements::IElement > > *arg1 = (std::vector< std::shared_ptr< dive::elements::IElement > > *) 0 ;
  SWIGPY_SLICEOBJECT *arg2 = (SWIGPY_SLICEOBJECT *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< std::shared_ptr< dive::elements::IElement >,std::allocator< std::shared_ptr< dive::elements::IElement > > > *result = 0 ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__shared_ptrT_dive__elements__IElement_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vecElements___getitem__" "', argument " "1"" of type '" "std::vector< std::shared_ptr< dive::elements::IElement > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::shared_ptr< dive::elements::IElement > > * >(argp1);
  {
    if (!PySlice_Check(swig_obj[1])) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vecElements___getitem__" "', argument " "2"" of type '" "SWIGPY_SLICEOBJECT *""'");
    }
    arg2 = (SWIGPY_SLICEOBJECT *) swig_obj[1];
  }
  try {
    result = (std::vector< std::shared_ptr< dive::elements::IElement >,std::allocator< std::shared_ptr< dive::elements::IElement > > > *)std_vector_Sl_std_shared_ptr_Sl_dive_elements_IElement_Sg__Sg____getitem____SWIG_0(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__shared_ptrT_dive__elements__IElement_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vecElements___setitem____SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< std::shared_ptr< dive::elements::IElement > > *arg1 = (std::vector< std::shared_ptr< dive::elements::IElement > > *) 0 ;
  SWIGPY_SLICEOBJECT *arg2 = (SWIGPY_SLICEOBJECT *) 0 ;
  std::vector< std::shared_ptr< dive::elements::IElement >,std::allocator< std::shared_ptr< dive::elements::IElement > > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__shared_ptrT_dive__elements__IElement_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vecElements___setitem__" "', argument " "1"" of type '" "std::vector< std::shared_ptr< dive::elements::IElement > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::shared_ptr< dive::elements::IElement > > * >(argp1);
  {
    if (!PySlice_Check(swig_obj[1])) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vecElements___setitem__" "', argument " "2"" of type '" "SWIGPY_SLICEOBJECT *""'");
    }
    arg2 = (SWIGPY_SLICEOBJECT *) swig_obj[1];
  }
  {
    std::vector< std::shared_ptr< dive::elements::IElement >,std::allocator< std::shared_ptr< dive::elements::IElement > > > *ptr = (std::vector< std::shared_ptr< dive::elements::IElement >,std::allocator< std::shared_ptr< dive::elements::IElement > > > *)0;
    res3 = swig::asptr(swig_obj[2], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "vecElements___setitem__" "', argument " "3"" of type '" "std::vector< std::shared_ptr< dive::elements::IElement >,std::allocator< std::shared_ptr< dive::elements::IElement > > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vecElements___setitem__" "', argument " "3"" of type '" "std::vector< std::shared_ptr< dive::elements::IElement >,std::allocator< std::shared_ptr< dive::elements::IElement > > > const &""'"); 
    }
    arg3 = ptr;
  }
  try {
    std_vector_Sl_std_shared_ptr_Sl_dive_elements_IElement_Sg__Sg____setitem____SWIG_0(arg1,arg2,(std::vector< std::shared_ptr< dive::elements::IElement >,std::allocator< std::shared_ptr< dive::elements::IElement > > > const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_vecElements___setitem____SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< std::shared_ptr< dive::elements::IElement > > *arg1 = (std::vector< std::shared_ptr< dive::elements::IElement > > *) 0 ;
  SWIGPY_SLICEOBJECT *arg2 = (SWIGPY_SLICEOBJECT *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__shared_ptrT_dive__elements__IElement_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vecElements___setitem__" "', argument " "1"" of type '" "std::vector< std::shared_ptr< dive::elements::IElement > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::shared_ptr< dive::elements::IElement > > * >(argp1);
  {
    if (!PySlice_Check(swig_obj[1])) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vecElements___setitem__" "', argument " "2"" of type '" "SWIGPY_SLICEOBJECT *""'");
    }
    arg2 = (SWIGPY_SLICEOBJECT *) swig_obj[1];
  }
  try {
    std_vector_Sl_std_shared_ptr_Sl_dive_elements_IElement_Sg__Sg____setitem____SWIG_1(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vecElements___delitem____SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< std::shared_ptr< dive::elements::IElement > > *arg1 = (std::vector< std::shared_ptr< dive::elements::IElement > > *) 0 ;
  SWIGPY_SLICEOBJECT *arg2 = (SWIGPY_SLICEOBJECT *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__shared_ptrT_dive__elements__IElement_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vecElements___delitem__" "', argument " "1"" of type '" "std::vector< std::shared_ptr< dive::elements::IElement > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::shared_ptr< dive::elements::IElement > > * >(argp1);
  {
    if (!PySlice_Check(swig_obj[1])) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vecElements___delitem__" "', argument " "2"" of type '" "SWIGPY_SLICEOBJECT *""'");
    }
    arg2 = (SWIGPY_SLICEOBJECT *) swig_obj[1];
  }
  try {
    std_vector_Sl_std_shared_ptr_Sl_dive_elements_IElement_Sg__Sg____delitem____SWIG_1(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vecElements___delitem__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "vecElements___delitem__", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< std::shared_ptr< dive::elements::IElement >,std::allocator< std::shared_ptr< dive::elements::IElement > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_vecElements___delitem____SWIG_1(self, argc, argv);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< std::shared_ptr< dive::elements::IElement >,std::allocator< std::shared_ptr< dive::elements::IElement > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_vecElements___delitem____SWIG_0(self, argc, argv);
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'vecElements___delitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< std::shared_ptr< dive::elements::IElement > >::__delitem__(std::vector< std::shared_ptr< dive::elements::IElement > >::difference_type)\n"
    "    std::vector< std::shared_ptr< dive::elements::IElement > >::__delitem__(SWIGPY_SLICEOBJECT *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_vecElements___getitem____SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< std::shared_ptr< dive::elements::IElement > > *arg1 = (std::vector< std::shared_ptr< dive::elements::IElement > > *) 0 ;
  std::vector< std::shared_ptr< dive::elements::IElement > >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  std::vector< std::shared_ptr< dive::elements::IElement > >::value_type *result = 0 ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__shared_ptrT_dive__elements__IElement_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vecElements___getitem__" "', argument " "1"" of type '" "std::vector< std::shared_ptr< dive::elements::IElement > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::shared_ptr< dive::elements::IElement > > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vecElements___getitem__" "', argument " "2"" of type '" "std::vector< std::shared_ptr< dive::elements::IElement > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< std::shared_ptr< dive::elements::IElement > >::difference_type >(val2);
  try {
    result = (std::vector< std::shared_ptr< dive::elements::IElement > >::value_type *) &std_vector_Sl_std_shared_ptr_Sl_dive_elements_IElement_Sg__Sg____getitem____SWIG_1((std::vector< std::shared_ptr< dive::elements::IElement > > const *)arg1,SWIG_STD_MOVE(arg2));
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  {
    std::shared_ptr<  dive::elements::IElement > *smartresult = *result ? new std::shared_ptr<  dive::elements::IElement >(*result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_std__shared_ptrT_dive__elements__IElement_t, SWIG_POINTER_OWN);
  }
  (void)swig::container_owner<swig::traits<std::vector< std::shared_ptr< dive::elements::IElement > >::value_type>::category>::back_reference(resultobj, swig_obj[0]);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vecElements___getitem__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "vecElements___getitem__", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< std::shared_ptr< dive::elements::IElement >,std::allocator< std::shared_ptr< dive::elements::IElement > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_vecElements___getitem____SWIG_0(self, argc, argv);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< std::shared_ptr< dive::elements::IElement >,std::allocator< std::shared_ptr< dive::elements::IElement > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_vecElements___getitem____SWIG_1(self, argc, argv);
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'vecElements___getitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< std::shared_ptr< dive::elements::IElement > >::__getitem__(SWIGPY_SLICEOBJECT *)\n"
    "    std::vector< std::shared_ptr< dive::elements::IElement > >::__getitem__(std::vector< std::shared_ptr< dive::elements::IElement > >::difference_type) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_vecElements___setitem____SWIG_2(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< std::shared_ptr< dive::elements::IElement > > *arg1 = (std::vector< std::shared_ptr< dive::elements::IElement > > *) 0 ;
  std::vector< std::shared_ptr< dive::elements::IElement > >::difference_type arg2 ;
  std::vector< std::shared_ptr< dive::elements::IElement > >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  std::vector< std::shared_ptr< dive::elements::IElement > >::value_type tempshared3 ;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__shared_ptrT_dive__elements__IElement_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vecElements___setitem__" "', argument " "1"" of type '" "std::vector< std::shared_ptr< dive::elements::IElement > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::shared_ptr< dive::elements::IElement > > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vecElements___setitem__" "', argument " "2"" of type '" "std::vector< std::shared_ptr< dive::elements::IElement > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< std::shared_ptr< dive::elements::IElement > >::difference_type >(val2);
  {
    int newmem = 0;
    res3 = SWIG_ConvertPtrAndOwn(swig_obj[2], &argp3, SWIGTYPE_p_std__shared_ptrT_dive__elements__IElement_t,  0 , &newmem);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "vecElements___setitem__" "', argument " "3"" of type '" "std::vector< std::shared_ptr< dive::elements::IElement > >::value_type const &""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      if (argp3) tempshared3 = *reinterpret_cast< std::vector< std::shared_ptr< dive::elements::IElement > >::value_type * >(argp3);
      delete reinterpret_cast< std::vector< std::shared_ptr< dive::elements::IElement > >::value_type * >(argp3);
      arg3 = &tempshared3;
    } else {
      arg3 = (argp3) ? reinterpret_cast< std::vector< std::shared_ptr< dive::elements::IElement > >::value_type * >(argp3) : &tempshared3;
    }
  }
  try {
    std_vector_Sl_std_shared_ptr_Sl_dive_elements_IElement_Sg__Sg____setitem____SWIG_2(arg1,SWIG_STD_MOVE(arg2),(std::shared_ptr< dive::elements::IElement > const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vecElements___setitem__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "vecElements___setitem__", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< std::shared_ptr< dive::elements::IElement >,std::allocator< std::shared_ptr< dive::elements::IElement > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_vecElements___setitem____SWIG_1(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< std::shared_ptr< dive::elements::IElement >,std::allocator< std::shared_ptr< dive::elements::IElement > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        int res = swig::asptr(argv[2], (std::vector< std::shared_ptr< dive::elements::IElement >,std::allocator< std::shared_ptr< dive::elements::IElement > > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_vecElements___setitem____SWIG_0(self, argc, argv);
        }
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< std::shared_ptr< dive::elements::IElement >,std::allocator< std::shared_ptr< dive::elements::IElement > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_std__shared_ptrT_dive__elements__IElement_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_vecElements___setitem____SWIG_2(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'vecElements___setitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< std::shared_ptr< dive::elements::IElement > >::__setitem__(SWIGPY_SLICEOBJECT *,std::vector< std::shared_ptr< dive::elements::IElement >,std::allocator< std::shared_ptr< dive::elements::IElement > > > const &)\n"
    "    std::vector< std::shared_ptr< dive::elements::IElement > >::__setitem__(SWIGPY_SLICEOBJECT *)\n"
    "    std::vector< std::shared_ptr< dive::elements::IElement > >::__setitem__(std::vector< std::shared_ptr< dive::elements::IElement > >::difference_type,std::vector< std::shared_ptr< dive::elements::IElement > >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_vecElements_pop(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::shared_ptr< dive::elements::IElement > > *arg1 = (std::vector< std::shared_ptr< dive::elements::IElement > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< std::shared_ptr< dive::elements::IElement > >::value_type result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__shared_ptrT_dive__elements__IElement_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vecElements_pop" "', argument " "1"" of type '" "std::vector< std::shared_ptr< dive::elements::IElement > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::shared_ptr< dive::elements::IElement > > * >(argp1);
  try {
    result = std_vector_Sl_std_shared_ptr_Sl_dive_elements_IElement_Sg__Sg__pop(arg1);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  {
    std::shared_ptr<  dive::elements::IElement > *smartresult = result ? new std::shared_ptr<  dive::elements::IElement >(result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_std__shared_ptrT_dive__elements__IElement_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vecElements_append(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::shared_ptr< dive::elements::IElement > > *arg1 = (std::vector< std::shared_ptr< dive::elements::IElement > > *) 0 ;
  std::vector< std::shared_ptr< dive::elements::IElement > >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  std::vector< std::shared_ptr< dive::elements::IElement > >::value_type tempshared2 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "vecElements_append", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__shared_ptrT_dive__elements__IElement_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vecElements_append" "', argument " "1"" of type '" "std::vector< std::shared_ptr< dive::elements::IElement > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::shared_ptr< dive::elements::IElement > > * >(argp1);
  {
    int newmem = 0;
    res2 = SWIG_ConvertPtrAndOwn(swig_obj[1], &argp2, SWIGTYPE_p_std__shared_ptrT_dive__elements__IElement_t,  0 , &newmem);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "vecElements_append" "', argument " "2"" of type '" "std::vector< std::shared_ptr< dive::elements::IElement > >::value_type const &""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      if (argp2) tempshared2 = *reinterpret_cast< std::vector< std::shared_ptr< dive::elements::IElement > >::value_type * >(argp2);
      delete reinterpret_cast< std::vector< std::shared_ptr< dive::elements::IElement > >::value_type * >(argp2);
      arg2 = &tempshared2;
    } else {
      arg2 = (argp2) ? reinterpret_cast< std::vector< std::shared_ptr< dive::elements::IElement > >::value_type * >(argp2) : &tempshared2;
    }
  }
  std_vector_Sl_std_shared_ptr_Sl_dive_elements_IElement_Sg__Sg__append(arg1,(std::shared_ptr< dive::elements::IElement > const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_vecElements__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **SWIGUNUSEDPARM(swig_obj)) {
  PyObject *resultobj = 0;
  std::vector< std::shared_ptr< dive::elements::IElement > > *result = 0 ;
  
  (void)self;
  if ((nobjs < 0) || (nobjs > 0)) SWIG_fail;
  result = (std::vector< std::shared_ptr< dive::elements::IElement > > *)new std::vector< std::shared_ptr< dive::elements::IElement > >();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__shared_ptrT_dive__elements__IElement_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_vecElements__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< std::shared_ptr< dive::elements::IElement > > *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  std::vector< std::shared_ptr< dive::elements::IElement > > *result = 0 ;
  
  (void)self;
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  {
    std::vector< std::shared_ptr< dive::elements::IElement >,std::allocator< std::shared_ptr< dive::elements::IElement > > > *ptr = (std::vector< std::shared_ptr< dive::elements::IElement >,std::allocator< std::shared_ptr< dive::elements::IElement > > > *)0;
    res1 = swig::asptr(swig_obj[0], &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_vecElements" "', argument " "1"" of type '" "std::vector< std::shared_ptr< dive::elements::IElement > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_vecElements" "', argument " "1"" of type '" "std::vector< std::shared_ptr< dive::elements::IElement > > const &""'"); 
    }
    arg1 = ptr;
  }
  result = (std::vector< std::shared_ptr< dive::elements::IElement > > *)new std::vector< std::shared_ptr< dive::elements::IElement > >((std::vector< std::shared_ptr< dive::elements::IElement > > const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__shared_ptrT_dive__elements__IElement_t_t, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_vecElements_empty(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::shared_ptr< dive::elements::IElement > > *arg1 = (std::vector< std::shared_ptr< dive::elements::IElement > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__shared_ptrT_dive__elements__IElement_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vecElements_empty" "', argument " "1"" of type '" "std::vector< std::shared_ptr< dive::elements::IElement > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::shared_ptr< dive::elements::IElement > > * >(argp1);
  result = (bool)((std::vector< std::shared_ptr< dive::elements::IElement > > const *)arg1)->empty();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vecElements_size(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::shared_ptr< dive::elements::IElement > > *arg1 = (std::vector< std::shared_ptr< dive::elements::IElement > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< std::shared_ptr< dive::elements::IElement > >::size_type result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__shared_ptrT_dive__elements__IElement_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vecElements_size" "', argument " "1"" of type '" "std::vector< std::shared_ptr< dive::elements::IElement > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::shared_ptr< dive::elements::IElement > > * >(argp1);
  result = ((std::vector< std::shared_ptr< dive::elements::IElement > > const *)arg1)->size();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vecElements_swap(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::shared_ptr< dive::elements::IElement > > *arg1 = (std::vector< std::shared_ptr< dive::elements::IElement > > *) 0 ;
  std::vector< std::shared_ptr< dive::elements::IElement > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "vecElements_swap", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__shared_ptrT_dive__elements__IElement_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vecElements_swap" "', argument " "1"" of type '" "std::vector< std::shared_ptr< dive::elements::IElement > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::shared_ptr< dive::elements::IElement > > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_std__vectorT_std__shared_ptrT_dive__elements__IElement_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "vecElements_swap" "', argument " "2"" of type '" "std::vector< std::shared_ptr< dive::elements::IElement > > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vecElements_swap" "', argument " "2"" of type '" "std::vector< std::shared_ptr< dive::elements::IElement > > &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< std::shared_ptr< dive::elements::IElement > > * >(argp2);
  (arg1)->swap(*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vecElements_begin(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::shared_ptr< dive::elements::IElement > > *arg1 = (std::vector< std::shared_ptr< dive::elements::IElement > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< std::shared_ptr< dive::elements::IElement > >::iterator result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__shared_ptrT_dive__elements__IElement_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vecElements_begin" "', argument " "1"" of type '" "std::vector< std::shared_ptr< dive::elements::IElement > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::shared_ptr< dive::elements::IElement > > * >(argp1);
  result = (arg1)->begin();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< std::shared_ptr< dive::elements::IElement > >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vecElements_end(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::shared_ptr< dive::elements::IElement > > *arg1 = (std::vector< std::shared_ptr< dive::elements::IElement > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< std::shared_ptr< dive::elements::IElement > >::iterator result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__shared_ptrT_dive__elements__IElement_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vecElements_end" "', argument " "1"" of type '" "std::vector< std::shared_ptr< dive::elements::IElement > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::shared_ptr< dive::elements::IElement > > * >(argp1);
  result = (arg1)->end();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< std::shared_ptr< dive::elements::IElement > >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vecElements_rbegin(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::shared_ptr< dive::elements::IElement > > *arg1 = (std::vector< std::shared_ptr< dive::elements::IElement > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< std::shared_ptr< dive::elements::IElement > >::reverse_iterator result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__shared_ptrT_dive__elements__IElement_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vecElements_rbegin" "', argument " "1"" of type '" "std::vector< std::shared_ptr< dive::elements::IElement > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::shared_ptr< dive::elements::IElement > > * >(argp1);
  result = (arg1)->rbegin();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< std::shared_ptr< dive::elements::IElement > >::reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vecElements_rend(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::shared_ptr< dive::elements::IElement > > *arg1 = (std::vector< std::shared_ptr< dive::elements::IElement > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< std::shared_ptr< dive::elements::IElement > >::reverse_iterator result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__shared_ptrT_dive__elements__IElement_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vecElements_rend" "', argument " "1"" of type '" "std::vector< std::shared_ptr< dive::elements::IElement > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::shared_ptr< dive::elements::IElement > > * >(argp1);
  result = (arg1)->rend();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< std::shared_ptr< dive::elements::IElement > >::reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vecElements_clear(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::shared_ptr< dive::elements::IElement > > *arg1 = (std::vector< std::shared_ptr< dive::elements::IElement > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__shared_ptrT_dive__elements__IElement_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vecElements_clear" "', argument " "1"" of type '" "std::vector< std::shared_ptr< dive::elements::IElement > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::shared_ptr< dive::elements::IElement > > * >(argp1);
  (arg1)->clear();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vecElements_get_allocator(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::shared_ptr< dive::elements::IElement > > *arg1 = (std::vector< std::shared_ptr< dive::elements::IElement > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  SwigValueWrapper< std::allocator< std::shared_ptr< dive::elements::IElement > > > result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__shared_ptrT_dive__elements__IElement_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vecElements_get_allocator" "', argument " "1"" of type '" "std::vector< std::shared_ptr< dive::elements::IElement > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::shared_ptr< dive::elements::IElement > > * >(argp1);
  result = ((std::vector< std::shared_ptr< dive::elements::IElement > > const *)arg1)->get_allocator();
  resultobj = SWIG_NewPointerObj((new std::vector< std::shared_ptr< dive::elements::IElement > >::allocator_type(result)), SWIGTYPE_p_std__allocatorT_std__shared_ptrT_dive__elements__IElement_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_vecElements__SWIG_2(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< std::shared_ptr< dive::elements::IElement > >::size_type arg1 ;
  size_t val1 ;
  int ecode1 = 0 ;
  std::vector< std::shared_ptr< dive::elements::IElement > > *result = 0 ;
  
  (void)self;
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_vecElements" "', argument " "1"" of type '" "std::vector< std::shared_ptr< dive::elements::IElement > >::size_type""'");
  } 
  arg1 = static_cast< std::vector< std::shared_ptr< dive::elements::IElement > >::size_type >(val1);
  result = (std::vector< std::shared_ptr< dive::elements::IElement > > *)new std::vector< std::shared_ptr< dive::elements::IElement > >(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__shared_ptrT_dive__elements__IElement_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vecElements_pop_back(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::shared_ptr< dive::elements::IElement > > *arg1 = (std::vector< std::shared_ptr< dive::elements::IElement > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__shared_ptrT_dive__elements__IElement_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vecElements_pop_back" "', argument " "1"" of type '" "std::vector< std::shared_ptr< dive::elements::IElement > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::shared_ptr< dive::elements::IElement > > * >(argp1);
  (arg1)->pop_back();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vecElements_resize__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< std::shared_ptr< dive::elements::IElement > > *arg1 = (std::vector< std::shared_ptr< dive::elements::IElement > > *) 0 ;
  std::vector< std::shared_ptr< dive::elements::IElement > >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__shared_ptrT_dive__elements__IElement_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vecElements_resize" "', argument " "1"" of type '" "std::vector< std::shared_ptr< dive::elements::IElement > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::shared_ptr< dive::elements::IElement > > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vecElements_resize" "', argument " "2"" of type '" "std::vector< std::shared_ptr< dive::elements::IElement > >::size_type""'");
  } 
  arg2 = static_cast< std::vector< std::shared_ptr< dive::elements::IElement > >::size_type >(val2);
  (arg1)->resize(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vecElements_erase__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< std::shared_ptr< dive::elements::IElement > > *arg1 = (std::vector< std::shared_ptr< dive::elements::IElement > > *) 0 ;
  std::vector< std::shared_ptr< dive::elements::IElement > >::iterator arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  std::vector< std::shared_ptr< dive::elements::IElement > >::iterator result;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__shared_ptrT_dive__elements__IElement_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vecElements_erase" "', argument " "1"" of type '" "std::vector< std::shared_ptr< dive::elements::IElement > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::shared_ptr< dive::elements::IElement > > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vecElements_erase" "', argument " "2"" of type '" "std::vector< std::shared_ptr< dive::elements::IElement > >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< std::shared_ptr< dive::elements::IElement > >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< std::shared_ptr< dive::elements::IElement > >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vecElements_erase" "', argument " "2"" of type '" "std::vector< std::shared_ptr< dive::elements::IElement > >::iterator""'");
    }
  }
  result = std_vector_Sl_std_shared_ptr_Sl_dive_elements_IElement_Sg__Sg__erase__SWIG_0(arg1,SWIG_STD_MOVE(arg2));
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< std::shared_ptr< dive::elements::IElement > >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vecElements_erase__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< std::shared_ptr< dive::elements::IElement > > *arg1 = (std::vector< std::shared_ptr< dive::elements::IElement > > *) 0 ;
  std::vector< std::shared_ptr< dive::elements::IElement > >::iterator arg2 ;
  std::vector< std::shared_ptr< dive::elements::IElement > >::iterator arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  swig::SwigPyIterator *iter3 = 0 ;
  int res3 ;
  std::vector< std::shared_ptr< dive::elements::IElement > >::iterator result;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__shared_ptrT_dive__elements__IElement_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vecElements_erase" "', argument " "1"" of type '" "std::vector< std::shared_ptr< dive::elements::IElement > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::shared_ptr< dive::elements::IElement > > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vecElements_erase" "', argument " "2"" of type '" "std::vector< std::shared_ptr< dive::elements::IElement > >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< std::shared_ptr< dive::elements::IElement > >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< std::shared_ptr< dive::elements::IElement > >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vecElements_erase" "', argument " "2"" of type '" "std::vector< std::shared_ptr< dive::elements::IElement > >::iterator""'");
    }
  }
  res3 = SWIG_ConvertPtr(swig_obj[2], SWIG_as_voidptrptr(&iter3), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res3) || !iter3) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vecElements_erase" "', argument " "3"" of type '" "std::vector< std::shared_ptr< dive::elements::IElement > >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< std::shared_ptr< dive::elements::IElement > >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< std::shared_ptr< dive::elements::IElement > >::iterator > *>(iter3);
    if (iter_t) {
      arg3 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vecElements_erase" "', argument " "3"" of type '" "std::vector< std::shared_ptr< dive::elements::IElement > >::iterator""'");
    }
  }
  result = std_vector_Sl_std_shared_ptr_Sl_dive_elements_IElement_Sg__Sg__erase__SWIG_1(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3));
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< std::shared_ptr< dive::elements::IElement > >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vecElements_erase(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "vecElements_erase", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< std::shared_ptr< dive::elements::IElement >,std::allocator< std::shared_ptr< dive::elements::IElement > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< std::shared_ptr< dive::elements::IElement > >::iterator > *>(iter) != 0));
      if (_v) {
        return _wrap_vecElements_erase__SWIG_0(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< std::shared_ptr< dive::elements::IElement >,std::allocator< std::shared_ptr< dive::elements::IElement > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< std::shared_ptr< dive::elements::IElement > >::iterator > *>(iter) != 0));
      if (_v) {
        swig::SwigPyIterator *iter = 0;
        int res = SWIG_ConvertPtr(argv[2], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
        _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< std::shared_ptr< dive::elements::IElement > >::iterator > *>(iter) != 0));
        if (_v) {
          return _wrap_vecElements_erase__SWIG_1(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'vecElements_erase'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< std::shared_ptr< dive::elements::IElement > >::erase(std::vector< std::shared_ptr< dive::elements::IElement > >::iterator)\n"
    "    std::vector< std::shared_ptr< dive::elements::IElement > >::erase(std::vector< std::shared_ptr< dive::elements::IElement > >::iterator,std::vector< std::shared_ptr< dive::elements::IElement > >::iterator)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_new_vecElements__SWIG_3(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< std::shared_ptr< dive::elements::IElement > >::size_type arg1 ;
  std::vector< std::shared_ptr< dive::elements::IElement > >::value_type *arg2 = 0 ;
  size_t val1 ;
  int ecode1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  std::vector< std::shared_ptr< dive::elements::IElement > >::value_type tempshared2 ;
  std::vector< std::shared_ptr< dive::elements::IElement > > *result = 0 ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_vecElements" "', argument " "1"" of type '" "std::vector< std::shared_ptr< dive::elements::IElement > >::size_type""'");
  } 
  arg1 = static_cast< std::vector< std::shared_ptr< dive::elements::IElement > >::size_type >(val1);
  {
    int newmem = 0;
    res2 = SWIG_ConvertPtrAndOwn(swig_obj[1], &argp2, SWIGTYPE_p_std__shared_ptrT_dive__elements__IElement_t,  0 , &newmem);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_vecElements" "', argument " "2"" of type '" "std::vector< std::shared_ptr< dive::elements::IElement > >::value_type const &""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      if (argp2) tempshared2 = *reinterpret_cast< std::vector< std::shared_ptr< dive::elements::IElement > >::value_type * >(argp2);
      delete reinterpret_cast< std::vector< std::shared_ptr< dive::elements::IElement > >::value_type * >(argp2);
      arg2 = &tempshared2;
    } else {
      arg2 = (argp2) ? reinterpret_cast< std::vector< std::shared_ptr< dive::elements::IElement > >::value_type * >(argp2) : &tempshared2;
    }
  }
  result = (std::vector< std::shared_ptr< dive::elements::IElement > > *)new std::vector< std::shared_ptr< dive::elements::IElement > >(arg1,(std::vector< std::shared_ptr< dive::elements::IElement > >::value_type const &)*arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__shared_ptrT_dive__elements__IElement_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_vecElements(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "new_vecElements", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 0) {
    return _wrap_new_vecElements__SWIG_0(self, argc, argv);
  }
  if (argc == 1) {
    int _v = 0;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_vecElements__SWIG_2(self, argc, argv);
    }
  }
  if (argc == 1) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< std::shared_ptr< dive::elements::IElement >,std::allocator< std::shared_ptr< dive::elements::IElement > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_vecElements__SWIG_1(self, argc, argv);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_std__shared_ptrT_dive__elements__IElement_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_vecElements__SWIG_3(self, argc, argv);
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'new_vecElements'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< std::shared_ptr< dive::elements::IElement > >::vector()\n"
    "    std::vector< std::shared_ptr< dive::elements::IElement > >::vector(std::vector< std::shared_ptr< dive::elements::IElement > > const &)\n"
    "    std::vector< std::shared_ptr< dive::elements::IElement > >::vector(std::vector< std::shared_ptr< dive::elements::IElement > >::size_type)\n"
    "    std::vector< std::shared_ptr< dive::elements::IElement > >::vector(std::vector< std::shared_ptr< dive::elements::IElement > >::size_type,std::vector< std::shared_ptr< dive::elements::IElement > >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_vecElements_push_back(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::shared_ptr< dive::elements::IElement > > *arg1 = (std::vector< std::shared_ptr< dive::elements::IElement > > *) 0 ;
  std::vector< std::shared_ptr< dive::elements::IElement > >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  std::vector< std::shared_ptr< dive::elements::IElement > >::value_type tempshared2 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "vecElements_push_back", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__shared_ptrT_dive__elements__IElement_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vecElements_push_back" "', argument " "1"" of type '" "std::vector< std::shared_ptr< dive::elements::IElement > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::shared_ptr< dive::elements::IElement > > * >(argp1);
  {
    int newmem = 0;
    res2 = SWIG_ConvertPtrAndOwn(swig_obj[1], &argp2, SWIGTYPE_p_std__shared_ptrT_dive__elements__IElement_t,  0 , &newmem);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "vecElements_push_back" "', argument " "2"" of type '" "std::vector< std::shared_ptr< dive::elements::IElement > >::value_type const &""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      if (argp2) tempshared2 = *reinterpret_cast< std::vector< std::shared_ptr< dive::elements::IElement > >::value_type * >(argp2);
      delete reinterpret_cast< std::vector< std::shared_ptr< dive::elements::IElement > >::value_type * >(argp2);
      arg2 = &tempshared2;
    } else {
      arg2 = (argp2) ? reinterpret_cast< std::vector< std::shared_ptr< dive::elements::IElement > >::value_type * >(argp2) : &tempshared2;
    }
  }
  (arg1)->push_back((std::vector< std::shared_ptr< dive::elements::IElement > >::value_type const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vecElements_front(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::shared_ptr< dive::elements::IElement > > *arg1 = (std::vector< std::shared_ptr< dive::elements::IElement > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< std::shared_ptr< dive::elements::IElement > >::value_type *result = 0 ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__shared_ptrT_dive__elements__IElement_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vecElements_front" "', argument " "1"" of type '" "std::vector< std::shared_ptr< dive::elements::IElement > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::shared_ptr< dive::elements::IElement > > * >(argp1);
  result = (std::vector< std::shared_ptr< dive::elements::IElement > >::value_type *) &((std::vector< std::shared_ptr< dive::elements::IElement > > const *)arg1)->front();
  {
    std::shared_ptr<  dive::elements::IElement > *smartresult = *result ? new std::shared_ptr<  dive::elements::IElement >(*result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_std__shared_ptrT_dive__elements__IElement_t, SWIG_POINTER_OWN);
  }
  (void)swig::container_owner<swig::traits<std::vector< std::shared_ptr< dive::elements::IElement > >::value_type>::category>::back_reference(resultobj, swig_obj[0]);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vecElements_back(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::shared_ptr< dive::elements::IElement > > *arg1 = (std::vector< std::shared_ptr< dive::elements::IElement > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< std::shared_ptr< dive::elements::IElement > >::value_type *result = 0 ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__shared_ptrT_dive__elements__IElement_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vecElements_back" "', argument " "1"" of type '" "std::vector< std::shared_ptr< dive::elements::IElement > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::shared_ptr< dive::elements::IElement > > * >(argp1);
  result = (std::vector< std::shared_ptr< dive::elements::IElement > >::value_type *) &((std::vector< std::shared_ptr< dive::elements::IElement > > const *)arg1)->back();
  {
    std::shared_ptr<  dive::elements::IElement > *smartresult = *result ? new std::shared_ptr<  dive::elements::IElement >(*result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_std__shared_ptrT_dive__elements__IElement_t, SWIG_POINTER_OWN);
  }
  (void)swig::container_owner<swig::traits<std::vector< std::shared_ptr< dive::elements::IElement > >::value_type>::category>::back_reference(resultobj, swig_obj[0]);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vecElements_assign(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::shared_ptr< dive::elements::IElement > > *arg1 = (std::vector< std::shared_ptr< dive::elements::IElement > > *) 0 ;
  std::vector< std::shared_ptr< dive::elements::IElement > >::size_type arg2 ;
  std::vector< std::shared_ptr< dive::elements::IElement > >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  std::vector< std::shared_ptr< dive::elements::IElement > >::value_type tempshared3 ;
  PyObject *swig_obj[3] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "vecElements_assign", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__shared_ptrT_dive__elements__IElement_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vecElements_assign" "', argument " "1"" of type '" "std::vector< std::shared_ptr< dive::elements::IElement > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::shared_ptr< dive::elements::IElement > > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vecElements_assign" "', argument " "2"" of type '" "std::vector< std::shared_ptr< dive::elements::IElement > >::size_type""'");
  } 
  arg2 = static_cast< std::vector< std::shared_ptr< dive::elements::IElement > >::size_type >(val2);
  {
    int newmem = 0;
    res3 = SWIG_ConvertPtrAndOwn(swig_obj[2], &argp3, SWIGTYPE_p_std__shared_ptrT_dive__elements__IElement_t,  0 , &newmem);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "vecElements_assign" "', argument " "3"" of type '" "std::vector< std::shared_ptr< dive::elements::IElement > >::value_type const &""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      if (argp3) tempshared3 = *reinterpret_cast< std::vector< std::shared_ptr< dive::elements::IElement > >::value_type * >(argp3);
      delete reinterpret_cast< std::vector< std::shared_ptr< dive::elements::IElement > >::value_type * >(argp3);
      arg3 = &tempshared3;
    } else {
      arg3 = (argp3) ? reinterpret_cast< std::vector< std::shared_ptr< dive::elements::IElement > >::value_type * >(argp3) : &tempshared3;
    }
  }
  (arg1)->assign(arg2,(std::vector< std::shared_ptr< dive::elements::IElement > >::value_type const &)*arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vecElements_resize__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< std::shared_ptr< dive::elements::IElement > > *arg1 = (std::vector< std::shared_ptr< dive::elements::IElement > > *) 0 ;
  std::vector< std::shared_ptr< dive::elements::IElement > >::size_type arg2 ;
  std::vector< std::shared_ptr< dive::elements::IElement > >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  std::vector< std::shared_ptr< dive::elements::IElement > >::value_type tempshared3 ;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__shared_ptrT_dive__elements__IElement_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vecElements_resize" "', argument " "1"" of type '" "std::vector< std::shared_ptr< dive::elements::IElement > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::shared_ptr< dive::elements::IElement > > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vecElements_resize" "', argument " "2"" of type '" "std::vector< std::shared_ptr< dive::elements::IElement > >::size_type""'");
  } 
  arg2 = static_cast< std::vector< std::shared_ptr< dive::elements::IElement > >::size_type >(val2);
  {
    int newmem = 0;
    res3 = SWIG_ConvertPtrAndOwn(swig_obj[2], &argp3, SWIGTYPE_p_std__shared_ptrT_dive__elements__IElement_t,  0 , &newmem);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "vecElements_resize" "', argument " "3"" of type '" "std::vector< std::shared_ptr< dive::elements::IElement > >::value_type const &""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      if (argp3) tempshared3 = *reinterpret_cast< std::vector< std::shared_ptr< dive::elements::IElement > >::value_type * >(argp3);
      delete reinterpret_cast< std::vector< std::shared_ptr< dive::elements::IElement > >::value_type * >(argp3);
      arg3 = &tempshared3;
    } else {
      arg3 = (argp3) ? reinterpret_cast< std::vector< std::shared_ptr< dive::elements::IElement > >::value_type * >(argp3) : &tempshared3;
    }
  }
  (arg1)->resize(arg2,(std::vector< std::shared_ptr< dive::elements::IElement > >::value_type const &)*arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vecElements_resize(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "vecElements_resize", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< std::shared_ptr< dive::elements::IElement >,std::allocator< std::shared_ptr< dive::elements::IElement > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_vecElements_resize__SWIG_0(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< std::shared_ptr< dive::elements::IElement >,std::allocator< std::shared_ptr< dive::elements::IElement > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_std__shared_ptrT_dive__elements__IElement_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_vecElements_resize__SWIG_1(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'vecElements_resize'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< std::shared_ptr< dive::elements::IElement > >::resize(std::vector< std::shared_ptr< dive::elements::IElement > >::size_type)\n"
    "    std::vector< std::shared_ptr< dive::elements::IElement > >::resize(std::vector< std::shared_ptr< dive::elements::IElement > >::size_type,std::vector< std::shared_ptr< dive::elements::IElement > >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_vecElements_insert__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< std::shared_ptr< dive::elements::IElement > > *arg1 = (std::vector< std::shared_ptr< dive::elements::IElement > > *) 0 ;
  std::vector< std::shared_ptr< dive::elements::IElement > >::iterator arg2 ;
  std::vector< std::shared_ptr< dive::elements::IElement > >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  void *argp3 ;
  int res3 = 0 ;
  std::vector< std::shared_ptr< dive::elements::IElement > >::value_type tempshared3 ;
  std::vector< std::shared_ptr< dive::elements::IElement > >::iterator result;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__shared_ptrT_dive__elements__IElement_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vecElements_insert" "', argument " "1"" of type '" "std::vector< std::shared_ptr< dive::elements::IElement > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::shared_ptr< dive::elements::IElement > > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vecElements_insert" "', argument " "2"" of type '" "std::vector< std::shared_ptr< dive::elements::IElement > >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< std::shared_ptr< dive::elements::IElement > >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< std::shared_ptr< dive::elements::IElement > >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vecElements_insert" "', argument " "2"" of type '" "std::vector< std::shared_ptr< dive::elements::IElement > >::iterator""'");
    }
  }
  {
    int newmem = 0;
    res3 = SWIG_ConvertPtrAndOwn(swig_obj[2], &argp3, SWIGTYPE_p_std__shared_ptrT_dive__elements__IElement_t,  0 , &newmem);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "vecElements_insert" "', argument " "3"" of type '" "std::vector< std::shared_ptr< dive::elements::IElement > >::value_type const &""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      if (argp3) tempshared3 = *reinterpret_cast< std::vector< std::shared_ptr< dive::elements::IElement > >::value_type * >(argp3);
      delete reinterpret_cast< std::vector< std::shared_ptr< dive::elements::IElement > >::value_type * >(argp3);
      arg3 = &tempshared3;
    } else {
      arg3 = (argp3) ? reinterpret_cast< std::vector< std::shared_ptr< dive::elements::IElement > >::value_type * >(argp3) : &tempshared3;
    }
  }
  result = std_vector_Sl_std_shared_ptr_Sl_dive_elements_IElement_Sg__Sg__insert__SWIG_0(arg1,SWIG_STD_MOVE(arg2),(std::shared_ptr< dive::elements::IElement > const &)*arg3);
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< std::shared_ptr< dive::elements::IElement > >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vecElements_insert__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< std::shared_ptr< dive::elements::IElement > > *arg1 = (std::vector< std::shared_ptr< dive::elements::IElement > > *) 0 ;
  std::vector< std::shared_ptr< dive::elements::IElement > >::iterator arg2 ;
  std::vector< std::shared_ptr< dive::elements::IElement > >::size_type arg3 ;
  std::vector< std::shared_ptr< dive::elements::IElement > >::value_type *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  size_t val3 ;
  int ecode3 = 0 ;
  void *argp4 ;
  int res4 = 0 ;
  std::vector< std::shared_ptr< dive::elements::IElement > >::value_type tempshared4 ;
  
  (void)self;
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__shared_ptrT_dive__elements__IElement_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vecElements_insert" "', argument " "1"" of type '" "std::vector< std::shared_ptr< dive::elements::IElement > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::shared_ptr< dive::elements::IElement > > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vecElements_insert" "', argument " "2"" of type '" "std::vector< std::shared_ptr< dive::elements::IElement > >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< std::shared_ptr< dive::elements::IElement > >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< std::shared_ptr< dive::elements::IElement > >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vecElements_insert" "', argument " "2"" of type '" "std::vector< std::shared_ptr< dive::elements::IElement > >::iterator""'");
    }
  }
  ecode3 = SWIG_AsVal_size_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "vecElements_insert" "', argument " "3"" of type '" "std::vector< std::shared_ptr< dive::elements::IElement > >::size_type""'");
  } 
  arg3 = static_cast< std::vector< std::shared_ptr< dive::elements::IElement > >::size_type >(val3);
  {
    int newmem = 0;
    res4 = SWIG_ConvertPtrAndOwn(swig_obj[3], &argp4, SWIGTYPE_p_std__shared_ptrT_dive__elements__IElement_t,  0 , &newmem);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "vecElements_insert" "', argument " "4"" of type '" "std::vector< std::shared_ptr< dive::elements::IElement > >::value_type const &""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      if (argp4) tempshared4 = *reinterpret_cast< std::vector< std::shared_ptr< dive::elements::IElement > >::value_type * >(argp4);
      delete reinterpret_cast< std::vector< std::shared_ptr< dive::elements::IElement > >::value_type * >(argp4);
      arg4 = &tempshared4;
    } else {
      arg4 = (argp4) ? reinterpret_cast< std::vector< std::shared_ptr< dive::elements::IElement > >::value_type * >(argp4) : &tempshared4;
    }
  }
  std_vector_Sl_std_shared_ptr_Sl_dive_elements_IElement_Sg__Sg__insert__SWIG_1(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3),(std::shared_ptr< dive::elements::IElement > const &)*arg4);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vecElements_insert(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "vecElements_insert", 0, 4, argv))) SWIG_fail;
  --argc;
  if (argc == 3) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< std::shared_ptr< dive::elements::IElement >,std::allocator< std::shared_ptr< dive::elements::IElement > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< std::shared_ptr< dive::elements::IElement > >::iterator > *>(iter) != 0));
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_std__shared_ptrT_dive__elements__IElement_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_vecElements_insert__SWIG_0(self, argc, argv);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< std::shared_ptr< dive::elements::IElement >,std::allocator< std::shared_ptr< dive::elements::IElement > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< std::shared_ptr< dive::elements::IElement > >::iterator > *>(iter) != 0));
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = SWIG_ConvertPtr(argv[3], 0, SWIGTYPE_p_std__shared_ptrT_dive__elements__IElement_t, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_vecElements_insert__SWIG_1(self, argc, argv);
          }
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'vecElements_insert'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< std::shared_ptr< dive::elements::IElement > >::insert(std::vector< std::shared_ptr< dive::elements::IElement > >::iterator,std::vector< std::shared_ptr< dive::elements::IElement > >::value_type const &)\n"
    "    std::vector< std::shared_ptr< dive::elements::IElement > >::insert(std::vector< std::shared_ptr< dive::elements::IElement > >::iterator,std::vector< std::shared_ptr< dive::elements::IElement > >::size_type,std::vector< std::shared_ptr< dive::elements::IElement > >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_vecElements_reserve(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::shared_ptr< dive::elements::IElement > > *arg1 = (std::vector< std::shared_ptr< dive::elements::IElement > > *) 0 ;
  std::vector< std::shared_ptr< dive::elements::IElement > >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "vecElements_reserve", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__shared_ptrT_dive__elements__IElement_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vecElements_reserve" "', argument " "1"" of type '" "std::vector< std::shared_ptr< dive::elements::IElement > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::shared_ptr< dive::elements::IElement > > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vecElements_reserve" "', argument " "2"" of type '" "std::vector< std::shared_ptr< dive::elements::IElement > >::size_type""'");
  } 
  arg2 = static_cast< std::vector< std::shared_ptr< dive::elements::IElement > >::size_type >(val2);
  (arg1)->reserve(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vecElements_capacity(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::shared_ptr< dive::elements::IElement > > *arg1 = (std::vector< std::shared_ptr< dive::elements::IElement > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< std::shared_ptr< dive::elements::IElement > >::size_type result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__shared_ptrT_dive__elements__IElement_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vecElements_capacity" "', argument " "1"" of type '" "std::vector< std::shared_ptr< dive::elements::IElement > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::shared_ptr< dive::elements::IElement > > * >(argp1);
  result = ((std::vector< std::shared_ptr< dive::elements::IElement > > const *)arg1)->capacity();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vecElements___str__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::shared_ptr< dive::elements::IElement > > *arg1 = (std::vector< std::shared_ptr< dive::elements::IElement > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  String result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__shared_ptrT_dive__elements__IElement_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vecElements___str__" "', argument " "1"" of type '" "std::vector< std::shared_ptr< dive::elements::IElement > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::shared_ptr< dive::elements::IElement > > * >(argp1);
  result = std_vector_Sl_std_shared_ptr_Sl_dive_elements_IElement_Sg__Sg____str__((std::vector< std::shared_ptr< dive::elements::IElement > > const *)arg1);
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_vecElements(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::shared_ptr< dive::elements::IElement > > *arg1 = (std::vector< std::shared_ptr< dive::elements::IElement > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__shared_ptrT_dive__elements__IElement_t_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_vecElements" "', argument " "1"" of type '" "std::vector< std::shared_ptr< dive::elements::IElement > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::shared_ptr< dive::elements::IElement > > * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *vecElements_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_std__vectorT_std__shared_ptrT_dive__elements__IElement_t_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *vecElements_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN int Swig_var_linear_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable linear is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_linear_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_size_t(static_cast< size_t >(dive::elements::linear));
  return pyobj;
}


SWIGINTERN int Swig_var_quadratic_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable quadratic is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_quadratic_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_size_t(static_cast< size_t >(dive::elements::quadratic));
  return pyobj;
}


SWIGINTERN int Swig_var_element_hexa8_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable element_hexa8 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_element_hexa8_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_size_t(static_cast< size_t >(dive::elements::element_hexa8));
  return pyobj;
}


SWIGINTERN int Swig_var_element_hexa20_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable element_hexa20 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_element_hexa20_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_size_t(static_cast< size_t >(dive::elements::element_hexa20));
  return pyobj;
}


SWIGINTERN PyObject *_wrap_IntegralAreaHelper_dim1_set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  dive::elements::IntegralAreaHelper *arg1 = (dive::elements::IntegralAreaHelper *) 0 ;
  Dimension arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "IntegralAreaHelper_dim1_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_dive__elements__IntegralAreaHelper, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IntegralAreaHelper_dim1_set" "', argument " "1"" of type '" "dive::elements::IntegralAreaHelper *""'"); 
  }
  arg1 = reinterpret_cast< dive::elements::IntegralAreaHelper * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IntegralAreaHelper_dim1_set" "', argument " "2"" of type '" "Dimension""'");
  } 
  arg2 = static_cast< Dimension >(val2);
  if (arg1) (arg1)->dim1 = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntegralAreaHelper_dim1_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  dive::elements::IntegralAreaHelper *arg1 = (dive::elements::IntegralAreaHelper *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  Dimension result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_dive__elements__IntegralAreaHelper, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IntegralAreaHelper_dim1_get" "', argument " "1"" of type '" "dive::elements::IntegralAreaHelper *""'"); 
  }
  arg1 = reinterpret_cast< dive::elements::IntegralAreaHelper * >(argp1);
  result =  ((arg1)->dim1);
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntegralAreaHelper_dim2_set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  dive::elements::IntegralAreaHelper *arg1 = (dive::elements::IntegralAreaHelper *) 0 ;
  Dimension arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "IntegralAreaHelper_dim2_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_dive__elements__IntegralAreaHelper, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IntegralAreaHelper_dim2_set" "', argument " "1"" of type '" "dive::elements::IntegralAreaHelper *""'"); 
  }
  arg1 = reinterpret_cast< dive::elements::IntegralAreaHelper * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IntegralAreaHelper_dim2_set" "', argument " "2"" of type '" "Dimension""'");
  } 
  arg2 = static_cast< Dimension >(val2);
  if (arg1) (arg1)->dim2 = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntegralAreaHelper_dim2_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  dive::elements::IntegralAreaHelper *arg1 = (dive::elements::IntegralAreaHelper *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  Dimension result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_dive__elements__IntegralAreaHelper, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IntegralAreaHelper_dim2_get" "', argument " "1"" of type '" "dive::elements::IntegralAreaHelper *""'"); 
  }
  arg1 = reinterpret_cast< dive::elements::IntegralAreaHelper * >(argp1);
  result =  ((arg1)->dim2);
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntegralAreaHelper_dim3_set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  dive::elements::IntegralAreaHelper *arg1 = (dive::elements::IntegralAreaHelper *) 0 ;
  Dimension arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "IntegralAreaHelper_dim3_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_dive__elements__IntegralAreaHelper, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IntegralAreaHelper_dim3_set" "', argument " "1"" of type '" "dive::elements::IntegralAreaHelper *""'"); 
  }
  arg1 = reinterpret_cast< dive::elements::IntegralAreaHelper * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IntegralAreaHelper_dim3_set" "', argument " "2"" of type '" "Dimension""'");
  } 
  arg2 = static_cast< Dimension >(val2);
  if (arg1) (arg1)->dim3 = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntegralAreaHelper_dim3_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  dive::elements::IntegralAreaHelper *arg1 = (dive::elements::IntegralAreaHelper *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  Dimension result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_dive__elements__IntegralAreaHelper, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IntegralAreaHelper_dim3_get" "', argument " "1"" of type '" "dive::elements::IntegralAreaHelper *""'"); 
  }
  arg1 = reinterpret_cast< dive::elements::IntegralAreaHelper * >(argp1);
  result =  ((arg1)->dim3);
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntegralAreaHelper_coord3_set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  dive::elements::IntegralAreaHelper *arg1 = (dive::elements::IntegralAreaHelper *) 0 ;
  Scalar arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "IntegralAreaHelper_coord3_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_dive__elements__IntegralAreaHelper, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IntegralAreaHelper_coord3_set" "', argument " "1"" of type '" "dive::elements::IntegralAreaHelper *""'"); 
  }
  arg1 = reinterpret_cast< dive::elements::IntegralAreaHelper * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IntegralAreaHelper_coord3_set" "', argument " "2"" of type '" "Scalar""'");
  } 
  arg2 = static_cast< Scalar >(val2);
  if (arg1) (arg1)->coord3 = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntegralAreaHelper_coord3_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  dive::elements::IntegralAreaHelper *arg1 = (dive::elements::IntegralAreaHelper *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  Scalar result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_dive__elements__IntegralAreaHelper, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IntegralAreaHelper_coord3_get" "', argument " "1"" of type '" "dive::elements::IntegralAreaHelper *""'"); 
  }
  arg1 = reinterpret_cast< dive::elements::IntegralAreaHelper * >(argp1);
  result = (Scalar) ((arg1)->coord3);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_IntegralAreaHelper(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  dive::elements::IntegralAreaHelper *result = 0 ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "new_IntegralAreaHelper", 0, 0, 0)) SWIG_fail;
  result = (dive::elements::IntegralAreaHelper *)new dive::elements::IntegralAreaHelper();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_dive__elements__IntegralAreaHelper, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_IntegralAreaHelper(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  dive::elements::IntegralAreaHelper *arg1 = (dive::elements::IntegralAreaHelper *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_dive__elements__IntegralAreaHelper, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_IntegralAreaHelper" "', argument " "1"" of type '" "dive::elements::IntegralAreaHelper *""'"); 
  }
  arg1 = reinterpret_cast< dive::elements::IntegralAreaHelper * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *IntegralAreaHelper_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_dive__elements__IntegralAreaHelper, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *IntegralAreaHelper_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_IntegralEdgeHelper_dim1_set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  dive::elements::IntegralEdgeHelper *arg1 = (dive::elements::IntegralEdgeHelper *) 0 ;
  Dimension arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "IntegralEdgeHelper_dim1_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_dive__elements__IntegralEdgeHelper, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IntegralEdgeHelper_dim1_set" "', argument " "1"" of type '" "dive::elements::IntegralEdgeHelper *""'"); 
  }
  arg1 = reinterpret_cast< dive::elements::IntegralEdgeHelper * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IntegralEdgeHelper_dim1_set" "', argument " "2"" of type '" "Dimension""'");
  } 
  arg2 = static_cast< Dimension >(val2);
  if (arg1) (arg1)->dim1 = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntegralEdgeHelper_dim1_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  dive::elements::IntegralEdgeHelper *arg1 = (dive::elements::IntegralEdgeHelper *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  Dimension result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_dive__elements__IntegralEdgeHelper, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IntegralEdgeHelper_dim1_get" "', argument " "1"" of type '" "dive::elements::IntegralEdgeHelper *""'"); 
  }
  arg1 = reinterpret_cast< dive::elements::IntegralEdgeHelper * >(argp1);
  result =  ((arg1)->dim1);
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntegralEdgeHelper_dim2_set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  dive::elements::IntegralEdgeHelper *arg1 = (dive::elements::IntegralEdgeHelper *) 0 ;
  Dimension arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "IntegralEdgeHelper_dim2_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_dive__elements__IntegralEdgeHelper, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IntegralEdgeHelper_dim2_set" "', argument " "1"" of type '" "dive::elements::IntegralEdgeHelper *""'"); 
  }
  arg1 = reinterpret_cast< dive::elements::IntegralEdgeHelper * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IntegralEdgeHelper_dim2_set" "', argument " "2"" of type '" "Dimension""'");
  } 
  arg2 = static_cast< Dimension >(val2);
  if (arg1) (arg1)->dim2 = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntegralEdgeHelper_dim2_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  dive::elements::IntegralEdgeHelper *arg1 = (dive::elements::IntegralEdgeHelper *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  Dimension result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_dive__elements__IntegralEdgeHelper, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IntegralEdgeHelper_dim2_get" "', argument " "1"" of type '" "dive::elements::IntegralEdgeHelper *""'"); 
  }
  arg1 = reinterpret_cast< dive::elements::IntegralEdgeHelper * >(argp1);
  result =  ((arg1)->dim2);
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntegralEdgeHelper_dim3_set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  dive::elements::IntegralEdgeHelper *arg1 = (dive::elements::IntegralEdgeHelper *) 0 ;
  Dimension arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "IntegralEdgeHelper_dim3_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_dive__elements__IntegralEdgeHelper, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IntegralEdgeHelper_dim3_set" "', argument " "1"" of type '" "dive::elements::IntegralEdgeHelper *""'"); 
  }
  arg1 = reinterpret_cast< dive::elements::IntegralEdgeHelper * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IntegralEdgeHelper_dim3_set" "', argument " "2"" of type '" "Dimension""'");
  } 
  arg2 = static_cast< Dimension >(val2);
  if (arg1) (arg1)->dim3 = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntegralEdgeHelper_dim3_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  dive::elements::IntegralEdgeHelper *arg1 = (dive::elements::IntegralEdgeHelper *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  Dimension result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_dive__elements__IntegralEdgeHelper, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IntegralEdgeHelper_dim3_get" "', argument " "1"" of type '" "dive::elements::IntegralEdgeHelper *""'"); 
  }
  arg1 = reinterpret_cast< dive::elements::IntegralEdgeHelper * >(argp1);
  result =  ((arg1)->dim3);
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntegralEdgeHelper_coord2_set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  dive::elements::IntegralEdgeHelper *arg1 = (dive::elements::IntegralEdgeHelper *) 0 ;
  Scalar arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "IntegralEdgeHelper_coord2_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_dive__elements__IntegralEdgeHelper, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IntegralEdgeHelper_coord2_set" "', argument " "1"" of type '" "dive::elements::IntegralEdgeHelper *""'"); 
  }
  arg1 = reinterpret_cast< dive::elements::IntegralEdgeHelper * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IntegralEdgeHelper_coord2_set" "', argument " "2"" of type '" "Scalar""'");
  } 
  arg2 = static_cast< Scalar >(val2);
  if (arg1) (arg1)->coord2 = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntegralEdgeHelper_coord2_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  dive::elements::IntegralEdgeHelper *arg1 = (dive::elements::IntegralEdgeHelper *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  Scalar result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_dive__elements__IntegralEdgeHelper, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IntegralEdgeHelper_coord2_get" "', argument " "1"" of type '" "dive::elements::IntegralEdgeHelper *""'"); 
  }
  arg1 = reinterpret_cast< dive::elements::IntegralEdgeHelper * >(argp1);
  result = (Scalar) ((arg1)->coord2);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntegralEdgeHelper_coord3_set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  dive::elements::IntegralEdgeHelper *arg1 = (dive::elements::IntegralEdgeHelper *) 0 ;
  Scalar arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "IntegralEdgeHelper_coord3_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_dive__elements__IntegralEdgeHelper, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IntegralEdgeHelper_coord3_set" "', argument " "1"" of type '" "dive::elements::IntegralEdgeHelper *""'"); 
  }
  arg1 = reinterpret_cast< dive::elements::IntegralEdgeHelper * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IntegralEdgeHelper_coord3_set" "', argument " "2"" of type '" "Scalar""'");
  } 
  arg2 = static_cast< Scalar >(val2);
  if (arg1) (arg1)->coord3 = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntegralEdgeHelper_coord3_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  dive::elements::IntegralEdgeHelper *arg1 = (dive::elements::IntegralEdgeHelper *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  Scalar result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_dive__elements__IntegralEdgeHelper, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IntegralEdgeHelper_coord3_get" "', argument " "1"" of type '" "dive::elements::IntegralEdgeHelper *""'"); 
  }
  arg1 = reinterpret_cast< dive::elements::IntegralEdgeHelper * >(argp1);
  result = (Scalar) ((arg1)->coord3);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_IntegralEdgeHelper(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  dive::elements::IntegralEdgeHelper *result = 0 ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "new_IntegralEdgeHelper", 0, 0, 0)) SWIG_fail;
  result = (dive::elements::IntegralEdgeHelper *)new dive::elements::IntegralEdgeHelper();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_dive__elements__IntegralEdgeHelper, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_IntegralEdgeHelper(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  dive::elements::IntegralEdgeHelper *arg1 = (dive::elements::IntegralEdgeHelper *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_dive__elements__IntegralEdgeHelper, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_IntegralEdgeHelper" "', argument " "1"" of type '" "dive::elements::IntegralEdgeHelper *""'"); 
  }
  arg1 = reinterpret_cast< dive::elements::IntegralEdgeHelper * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *IntegralEdgeHelper_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_dive__elements__IntegralEdgeHelper, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *IntegralEdgeHelper_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN int Swig_var_nodeIndexInvalid_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable nodeIndexInvalid is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_nodeIndexInvalid_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_size_t(static_cast< size_t >(dive::elements::nodeIndexInvalid));
  return pyobj;
}


SWIGINTERN PyObject *_wrap_delete_IElement(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  dive::elements::IElement *arg1 = (dive::elements::IElement *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< dive::elements::IElement > tempshared1 ;
  std::shared_ptr< dive::elements::IElement > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_dive__elements__IElement_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_IElement" "', argument " "1"" of type '" "dive::elements::IElement *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  dive::elements::IElement > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  dive::elements::IElement > * >(argp1);
      arg1 = const_cast< dive::elements::IElement * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  dive::elements::IElement > * >(argp1);
      arg1 = const_cast< dive::elements::IElement * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  (void)arg1; delete smartarg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IElement_u__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  dive::elements::IElement *arg1 = (dive::elements::IElement *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< dive::elements::IElement const > tempshared1 ;
  std::shared_ptr< dive::elements::IElement const > *smartarg1 = 0 ;
  Matrix result;
  
  (void)self;
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_dive__elements__IElement_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IElement_u" "', argument " "1"" of type '" "dive::elements::IElement const *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const dive::elements::IElement > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const dive::elements::IElement > * >(argp1);
      arg1 = const_cast< dive::elements::IElement * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const dive::elements::IElement > * >(argp1);
      arg1 = const_cast< dive::elements::IElement * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = ((dive::elements::IElement const *)arg1)->u();
  resultobj = SWIG_NewPointerObj((new Matrix(result)), SWIGTYPE_p_eilig__Matrix, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IElement_u__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  dive::elements::IElement *arg1 = (dive::elements::IElement *) 0 ;
  Vector *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< dive::elements::IElement const > tempshared1 ;
  std::shared_ptr< dive::elements::IElement const > *smartarg1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  Matrix result;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_dive__elements__IElement_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IElement_u" "', argument " "1"" of type '" "dive::elements::IElement const *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const dive::elements::IElement > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const dive::elements::IElement > * >(argp1);
      arg1 = const_cast< dive::elements::IElement * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const dive::elements::IElement > * >(argp1);
      arg1 = const_cast< dive::elements::IElement * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_eilig__Vector,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IElement_u" "', argument " "2"" of type '" "Vector const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "IElement_u" "', argument " "2"" of type '" "Vector const &""'"); 
  }
  arg2 = reinterpret_cast< Vector * >(argp2);
  result = ((dive::elements::IElement const *)arg1)->u((Vector const &)*arg2);
  resultobj = SWIG_NewPointerObj((new Matrix(result)), SWIGTYPE_p_eilig__Matrix, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IElement_u(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "IElement_u", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    int _v = 0;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_std__shared_ptrT_dive__elements__IElement_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_IElement_u__SWIG_0(self, argc, argv);
    }
  }
  if (argc == 2) {
    int _v = 0;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_std__shared_ptrT_dive__elements__IElement_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_eilig__Vector, SWIG_POINTER_NO_NULL | 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_IElement_u__SWIG_1(self, argc, argv);
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'IElement_u'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    dive::elements::IElement::u() const\n"
    "    dive::elements::IElement::u(Vector const &) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_IElement_du__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  dive::elements::IElement *arg1 = (dive::elements::IElement *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< dive::elements::IElement const > tempshared1 ;
  std::shared_ptr< dive::elements::IElement const > *smartarg1 = 0 ;
  Matrix result;
  
  (void)self;
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_dive__elements__IElement_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IElement_du" "', argument " "1"" of type '" "dive::elements::IElement const *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const dive::elements::IElement > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const dive::elements::IElement > * >(argp1);
      arg1 = const_cast< dive::elements::IElement * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const dive::elements::IElement > * >(argp1);
      arg1 = const_cast< dive::elements::IElement * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = ((dive::elements::IElement const *)arg1)->du();
  resultobj = SWIG_NewPointerObj((new Matrix(result)), SWIGTYPE_p_eilig__Matrix, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IElement_du__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  dive::elements::IElement *arg1 = (dive::elements::IElement *) 0 ;
  Vector *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< dive::elements::IElement const > tempshared1 ;
  std::shared_ptr< dive::elements::IElement const > *smartarg1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  Matrix result;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_dive__elements__IElement_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IElement_du" "', argument " "1"" of type '" "dive::elements::IElement const *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const dive::elements::IElement > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const dive::elements::IElement > * >(argp1);
      arg1 = const_cast< dive::elements::IElement * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const dive::elements::IElement > * >(argp1);
      arg1 = const_cast< dive::elements::IElement * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_eilig__Vector,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IElement_du" "', argument " "2"" of type '" "Vector const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "IElement_du" "', argument " "2"" of type '" "Vector const &""'"); 
  }
  arg2 = reinterpret_cast< Vector * >(argp2);
  result = ((dive::elements::IElement const *)arg1)->du((Vector const &)*arg2);
  resultobj = SWIG_NewPointerObj((new Matrix(result)), SWIGTYPE_p_eilig__Matrix, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IElement_du__SWIG_2(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  dive::elements::IElement *arg1 = (dive::elements::IElement *) 0 ;
  Vector *arg2 = 0 ;
  Dimension *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< dive::elements::IElement const > tempshared1 ;
  std::shared_ptr< dive::elements::IElement const > *smartarg1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  Dimension temp3 ;
  size_t val3 ;
  int ecode3 = 0 ;
  Matrix result;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_dive__elements__IElement_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IElement_du" "', argument " "1"" of type '" "dive::elements::IElement const *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const dive::elements::IElement > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const dive::elements::IElement > * >(argp1);
      arg1 = const_cast< dive::elements::IElement * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const dive::elements::IElement > * >(argp1);
      arg1 = const_cast< dive::elements::IElement * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_eilig__Vector,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IElement_du" "', argument " "2"" of type '" "Vector const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "IElement_du" "', argument " "2"" of type '" "Vector const &""'"); 
  }
  arg2 = reinterpret_cast< Vector * >(argp2);
  ecode3 = SWIG_AsVal_size_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "IElement_du" "', argument " "3"" of type '" "Dimension""'");
  } 
  temp3 = static_cast< Dimension >(val3);
  arg3 = &temp3;
  result = ((dive::elements::IElement const *)arg1)->du((Vector const &)*arg2,(Dimension const &)*arg3);
  resultobj = SWIG_NewPointerObj((new Matrix(result)), SWIGTYPE_p_eilig__Matrix, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IElement_du(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "IElement_du", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    int _v = 0;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_std__shared_ptrT_dive__elements__IElement_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_IElement_du__SWIG_0(self, argc, argv);
    }
  }
  if (argc == 2) {
    int _v = 0;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_std__shared_ptrT_dive__elements__IElement_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_eilig__Vector, SWIG_POINTER_NO_NULL | 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_IElement_du__SWIG_1(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_std__shared_ptrT_dive__elements__IElement_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_eilig__Vector, SWIG_POINTER_NO_NULL | 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_IElement_du__SWIG_2(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'IElement_du'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    dive::elements::IElement::du() const\n"
    "    dive::elements::IElement::du(Vector const &) const\n"
    "    dive::elements::IElement::du(Vector const &,Dimension const &) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_IElement_J__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  dive::elements::IElement *arg1 = (dive::elements::IElement *) 0 ;
  Vector *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< dive::elements::IElement const > tempshared1 ;
  std::shared_ptr< dive::elements::IElement const > *smartarg1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  Matrix result;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_dive__elements__IElement_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IElement_J" "', argument " "1"" of type '" "dive::elements::IElement const *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const dive::elements::IElement > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const dive::elements::IElement > * >(argp1);
      arg1 = const_cast< dive::elements::IElement * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const dive::elements::IElement > * >(argp1);
      arg1 = const_cast< dive::elements::IElement * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_eilig__Vector,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IElement_J" "', argument " "2"" of type '" "Vector const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "IElement_J" "', argument " "2"" of type '" "Vector const &""'"); 
  }
  arg2 = reinterpret_cast< Vector * >(argp2);
  result = ((dive::elements::IElement const *)arg1)->J((Vector const &)*arg2);
  resultobj = SWIG_NewPointerObj((new Matrix(result)), SWIGTYPE_p_eilig__Matrix, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IElement_InvJ__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  dive::elements::IElement *arg1 = (dive::elements::IElement *) 0 ;
  Vector *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< dive::elements::IElement const > tempshared1 ;
  std::shared_ptr< dive::elements::IElement const > *smartarg1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  Matrix result;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_dive__elements__IElement_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IElement_InvJ" "', argument " "1"" of type '" "dive::elements::IElement const *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const dive::elements::IElement > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const dive::elements::IElement > * >(argp1);
      arg1 = const_cast< dive::elements::IElement * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const dive::elements::IElement > * >(argp1);
      arg1 = const_cast< dive::elements::IElement * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_eilig__Vector,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IElement_InvJ" "', argument " "2"" of type '" "Vector const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "IElement_InvJ" "', argument " "2"" of type '" "Vector const &""'"); 
  }
  arg2 = reinterpret_cast< Vector * >(argp2);
  result = ((dive::elements::IElement const *)arg1)->InvJ((Vector const &)*arg2);
  resultobj = SWIG_NewPointerObj((new Matrix(result)), SWIGTYPE_p_eilig__Matrix, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IElement_N__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  dive::elements::IElement *arg1 = (dive::elements::IElement *) 0 ;
  Vector *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< dive::elements::IElement const > tempshared1 ;
  std::shared_ptr< dive::elements::IElement const > *smartarg1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  Matrix result;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_dive__elements__IElement_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IElement_N" "', argument " "1"" of type '" "dive::elements::IElement const *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const dive::elements::IElement > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const dive::elements::IElement > * >(argp1);
      arg1 = const_cast< dive::elements::IElement * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const dive::elements::IElement > * >(argp1);
      arg1 = const_cast< dive::elements::IElement * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_eilig__Vector,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IElement_N" "', argument " "2"" of type '" "Vector const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "IElement_N" "', argument " "2"" of type '" "Vector const &""'"); 
  }
  arg2 = reinterpret_cast< Vector * >(argp2);
  result = ((dive::elements::IElement const *)arg1)->N((Vector const &)*arg2);
  resultobj = SWIG_NewPointerObj((new Matrix(result)), SWIGTYPE_p_eilig__Matrix, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IElement_dN__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  dive::elements::IElement *arg1 = (dive::elements::IElement *) 0 ;
  Vector *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< dive::elements::IElement const > tempshared1 ;
  std::shared_ptr< dive::elements::IElement const > *smartarg1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  Matrix result;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_dive__elements__IElement_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IElement_dN" "', argument " "1"" of type '" "dive::elements::IElement const *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const dive::elements::IElement > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const dive::elements::IElement > * >(argp1);
      arg1 = const_cast< dive::elements::IElement * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const dive::elements::IElement > * >(argp1);
      arg1 = const_cast< dive::elements::IElement * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_eilig__Vector,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IElement_dN" "', argument " "2"" of type '" "Vector const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "IElement_dN" "', argument " "2"" of type '" "Vector const &""'"); 
  }
  arg2 = reinterpret_cast< Vector * >(argp2);
  result = ((dive::elements::IElement const *)arg1)->dN((Vector const &)*arg2);
  resultobj = SWIG_NewPointerObj((new Matrix(result)), SWIGTYPE_p_eilig__Matrix, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IElement_J__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  dive::elements::IElement *arg1 = (dive::elements::IElement *) 0 ;
  Vector *arg2 = 0 ;
  CacheIndex arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< dive::elements::IElement const > tempshared1 ;
  std::shared_ptr< dive::elements::IElement const > *smartarg1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  Matrix *result = 0 ;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_dive__elements__IElement_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IElement_J" "', argument " "1"" of type '" "dive::elements::IElement const *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const dive::elements::IElement > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const dive::elements::IElement > * >(argp1);
      arg1 = const_cast< dive::elements::IElement * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const dive::elements::IElement > * >(argp1);
      arg1 = const_cast< dive::elements::IElement * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_eilig__Vector,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IElement_J" "', argument " "2"" of type '" "Vector const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "IElement_J" "', argument " "2"" of type '" "Vector const &""'"); 
  }
  arg2 = reinterpret_cast< Vector * >(argp2);
  ecode3 = SWIG_AsVal_size_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "IElement_J" "', argument " "3"" of type '" "CacheIndex""'");
  } 
  arg3 = static_cast< CacheIndex >(val3);
  result = (Matrix *) &((dive::elements::IElement const *)arg1)->J((Vector const &)*arg2,arg3);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_eilig__Matrix, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IElement_J(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "IElement_J", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_std__shared_ptrT_dive__elements__IElement_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_eilig__Vector, SWIG_POINTER_NO_NULL | 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_IElement_J__SWIG_0(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_std__shared_ptrT_dive__elements__IElement_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_eilig__Vector, SWIG_POINTER_NO_NULL | 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_IElement_J__SWIG_1(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'IElement_J'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    dive::elements::IElement::J(Vector const &) const\n"
    "    dive::elements::IElement::J(Vector const &,CacheIndex) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_IElement_InvJ__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  dive::elements::IElement *arg1 = (dive::elements::IElement *) 0 ;
  Vector *arg2 = 0 ;
  CacheIndex arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< dive::elements::IElement const > tempshared1 ;
  std::shared_ptr< dive::elements::IElement const > *smartarg1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  Matrix *result = 0 ;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_dive__elements__IElement_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IElement_InvJ" "', argument " "1"" of type '" "dive::elements::IElement const *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const dive::elements::IElement > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const dive::elements::IElement > * >(argp1);
      arg1 = const_cast< dive::elements::IElement * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const dive::elements::IElement > * >(argp1);
      arg1 = const_cast< dive::elements::IElement * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_eilig__Vector,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IElement_InvJ" "', argument " "2"" of type '" "Vector const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "IElement_InvJ" "', argument " "2"" of type '" "Vector const &""'"); 
  }
  arg2 = reinterpret_cast< Vector * >(argp2);
  ecode3 = SWIG_AsVal_size_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "IElement_InvJ" "', argument " "3"" of type '" "CacheIndex""'");
  } 
  arg3 = static_cast< CacheIndex >(val3);
  result = (Matrix *) &((dive::elements::IElement const *)arg1)->InvJ((Vector const &)*arg2,arg3);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_eilig__Matrix, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IElement_InvJ(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "IElement_InvJ", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_std__shared_ptrT_dive__elements__IElement_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_eilig__Vector, SWIG_POINTER_NO_NULL | 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_IElement_InvJ__SWIG_0(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_std__shared_ptrT_dive__elements__IElement_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_eilig__Vector, SWIG_POINTER_NO_NULL | 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_IElement_InvJ__SWIG_1(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'IElement_InvJ'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    dive::elements::IElement::InvJ(Vector const &) const\n"
    "    dive::elements::IElement::InvJ(Vector const &,CacheIndex) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_IElement_N__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  dive::elements::IElement *arg1 = (dive::elements::IElement *) 0 ;
  Vector *arg2 = 0 ;
  CacheIndex arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< dive::elements::IElement const > tempshared1 ;
  std::shared_ptr< dive::elements::IElement const > *smartarg1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  Matrix *result = 0 ;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_dive__elements__IElement_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IElement_N" "', argument " "1"" of type '" "dive::elements::IElement const *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const dive::elements::IElement > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const dive::elements::IElement > * >(argp1);
      arg1 = const_cast< dive::elements::IElement * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const dive::elements::IElement > * >(argp1);
      arg1 = const_cast< dive::elements::IElement * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_eilig__Vector,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IElement_N" "', argument " "2"" of type '" "Vector const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "IElement_N" "', argument " "2"" of type '" "Vector const &""'"); 
  }
  arg2 = reinterpret_cast< Vector * >(argp2);
  ecode3 = SWIG_AsVal_size_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "IElement_N" "', argument " "3"" of type '" "CacheIndex""'");
  } 
  arg3 = static_cast< CacheIndex >(val3);
  result = (Matrix *) &((dive::elements::IElement const *)arg1)->N((Vector const &)*arg2,arg3);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_eilig__Matrix, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IElement_N(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "IElement_N", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_std__shared_ptrT_dive__elements__IElement_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_eilig__Vector, SWIG_POINTER_NO_NULL | 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_IElement_N__SWIG_0(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_std__shared_ptrT_dive__elements__IElement_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_eilig__Vector, SWIG_POINTER_NO_NULL | 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_IElement_N__SWIG_1(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'IElement_N'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    dive::elements::IElement::N(Vector const &) const\n"
    "    dive::elements::IElement::N(Vector const &,CacheIndex) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_IElement_dN__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  dive::elements::IElement *arg1 = (dive::elements::IElement *) 0 ;
  Vector *arg2 = 0 ;
  CacheIndex arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< dive::elements::IElement const > tempshared1 ;
  std::shared_ptr< dive::elements::IElement const > *smartarg1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  Matrix *result = 0 ;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_dive__elements__IElement_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IElement_dN" "', argument " "1"" of type '" "dive::elements::IElement const *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const dive::elements::IElement > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const dive::elements::IElement > * >(argp1);
      arg1 = const_cast< dive::elements::IElement * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const dive::elements::IElement > * >(argp1);
      arg1 = const_cast< dive::elements::IElement * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_eilig__Vector,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IElement_dN" "', argument " "2"" of type '" "Vector const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "IElement_dN" "', argument " "2"" of type '" "Vector const &""'"); 
  }
  arg2 = reinterpret_cast< Vector * >(argp2);
  ecode3 = SWIG_AsVal_size_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "IElement_dN" "', argument " "3"" of type '" "CacheIndex""'");
  } 
  arg3 = static_cast< CacheIndex >(val3);
  result = (Matrix *) &((dive::elements::IElement const *)arg1)->dN((Vector const &)*arg2,arg3);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_eilig__Matrix, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IElement_dN(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "IElement_dN", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_std__shared_ptrT_dive__elements__IElement_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_eilig__Vector, SWIG_POINTER_NO_NULL | 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_IElement_dN__SWIG_0(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_std__shared_ptrT_dive__elements__IElement_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_eilig__Vector, SWIG_POINTER_NO_NULL | 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_IElement_dN__SWIG_1(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'IElement_dN'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    dive::elements::IElement::dN(Vector const &) const\n"
    "    dive::elements::IElement::dN(Vector const &,CacheIndex) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_IElement_DetJ__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  dive::elements::IElement *arg1 = (dive::elements::IElement *) 0 ;
  Vector *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< dive::elements::IElement const > tempshared1 ;
  std::shared_ptr< dive::elements::IElement const > *smartarg1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  Scalar result;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_dive__elements__IElement_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IElement_DetJ" "', argument " "1"" of type '" "dive::elements::IElement const *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const dive::elements::IElement > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const dive::elements::IElement > * >(argp1);
      arg1 = const_cast< dive::elements::IElement * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const dive::elements::IElement > * >(argp1);
      arg1 = const_cast< dive::elements::IElement * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_eilig__Vector,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IElement_DetJ" "', argument " "2"" of type '" "Vector const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "IElement_DetJ" "', argument " "2"" of type '" "Vector const &""'"); 
  }
  arg2 = reinterpret_cast< Vector * >(argp2);
  result = (Scalar)((dive::elements::IElement const *)arg1)->DetJ((Vector const &)*arg2);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IElement_DelA(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  dive::elements::IElement *arg1 = (dive::elements::IElement *) 0 ;
  Vector *arg2 = 0 ;
  Dimension *arg3 = 0 ;
  Dimension *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< dive::elements::IElement const > tempshared1 ;
  std::shared_ptr< dive::elements::IElement const > *smartarg1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  Dimension temp3 ;
  size_t val3 ;
  int ecode3 = 0 ;
  Dimension temp4 ;
  size_t val4 ;
  int ecode4 = 0 ;
  PyObject *swig_obj[4] ;
  Scalar result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "IElement_DelA", 4, 4, swig_obj)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_dive__elements__IElement_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IElement_DelA" "', argument " "1"" of type '" "dive::elements::IElement const *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const dive::elements::IElement > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const dive::elements::IElement > * >(argp1);
      arg1 = const_cast< dive::elements::IElement * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const dive::elements::IElement > * >(argp1);
      arg1 = const_cast< dive::elements::IElement * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_eilig__Vector,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IElement_DelA" "', argument " "2"" of type '" "Vector const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "IElement_DelA" "', argument " "2"" of type '" "Vector const &""'"); 
  }
  arg2 = reinterpret_cast< Vector * >(argp2);
  ecode3 = SWIG_AsVal_size_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "IElement_DelA" "', argument " "3"" of type '" "Dimension""'");
  } 
  temp3 = static_cast< Dimension >(val3);
  arg3 = &temp3;
  ecode4 = SWIG_AsVal_size_t(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "IElement_DelA" "', argument " "4"" of type '" "Dimension""'");
  } 
  temp4 = static_cast< Dimension >(val4);
  arg4 = &temp4;
  result = (Scalar)((dive::elements::IElement const *)arg1)->DelA((Vector const &)*arg2,(Dimension const &)*arg3,(Dimension const &)*arg4);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IElement_DelL(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  dive::elements::IElement *arg1 = (dive::elements::IElement *) 0 ;
  Vector *arg2 = 0 ;
  Dimension *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< dive::elements::IElement const > tempshared1 ;
  std::shared_ptr< dive::elements::IElement const > *smartarg1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  Dimension temp3 ;
  size_t val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  Scalar result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "IElement_DelL", 3, 3, swig_obj)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_dive__elements__IElement_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IElement_DelL" "', argument " "1"" of type '" "dive::elements::IElement const *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const dive::elements::IElement > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const dive::elements::IElement > * >(argp1);
      arg1 = const_cast< dive::elements::IElement * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const dive::elements::IElement > * >(argp1);
      arg1 = const_cast< dive::elements::IElement * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_eilig__Vector,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IElement_DelL" "', argument " "2"" of type '" "Vector const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "IElement_DelL" "', argument " "2"" of type '" "Vector const &""'"); 
  }
  arg2 = reinterpret_cast< Vector * >(argp2);
  ecode3 = SWIG_AsVal_size_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "IElement_DelL" "', argument " "3"" of type '" "Dimension""'");
  } 
  temp3 = static_cast< Dimension >(val3);
  arg3 = &temp3;
  result = (Scalar)((dive::elements::IElement const *)arg1)->DelL((Vector const &)*arg2,(Dimension const &)*arg3);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IElement_DetJ__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  dive::elements::IElement *arg1 = (dive::elements::IElement *) 0 ;
  Vector *arg2 = 0 ;
  CacheIndex arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< dive::elements::IElement const > tempshared1 ;
  std::shared_ptr< dive::elements::IElement const > *smartarg1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  Scalar result;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_dive__elements__IElement_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IElement_DetJ" "', argument " "1"" of type '" "dive::elements::IElement const *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const dive::elements::IElement > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const dive::elements::IElement > * >(argp1);
      arg1 = const_cast< dive::elements::IElement * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const dive::elements::IElement > * >(argp1);
      arg1 = const_cast< dive::elements::IElement * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_eilig__Vector,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IElement_DetJ" "', argument " "2"" of type '" "Vector const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "IElement_DetJ" "', argument " "2"" of type '" "Vector const &""'"); 
  }
  arg2 = reinterpret_cast< Vector * >(argp2);
  ecode3 = SWIG_AsVal_size_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "IElement_DetJ" "', argument " "3"" of type '" "CacheIndex""'");
  } 
  arg3 = static_cast< CacheIndex >(val3);
  result = (Scalar)((dive::elements::IElement const *)arg1)->DetJ((Vector const &)*arg2,arg3);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IElement_DetJ(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "IElement_DetJ", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_std__shared_ptrT_dive__elements__IElement_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_eilig__Vector, SWIG_POINTER_NO_NULL | 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_IElement_DetJ__SWIG_0(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_std__shared_ptrT_dive__elements__IElement_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_eilig__Vector, SWIG_POINTER_NO_NULL | 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_IElement_DetJ__SWIG_1(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'IElement_DetJ'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    dive::elements::IElement::DetJ(Vector const &) const\n"
    "    dive::elements::IElement::DetJ(Vector const &,CacheIndex) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_IElement_Volume(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  dive::elements::IElement *arg1 = (dive::elements::IElement *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< dive::elements::IElement const > tempshared1 ;
  std::shared_ptr< dive::elements::IElement const > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  Scalar result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_dive__elements__IElement_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IElement_Volume" "', argument " "1"" of type '" "dive::elements::IElement const *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const dive::elements::IElement > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const dive::elements::IElement > * >(argp1);
      arg1 = const_cast< dive::elements::IElement * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const dive::elements::IElement > * >(argp1);
      arg1 = const_cast< dive::elements::IElement * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = (Scalar)((dive::elements::IElement const *)arg1)->Volume();
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IElement_Area(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  dive::elements::IElement *arg1 = (dive::elements::IElement *) 0 ;
  FaceIndex *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< dive::elements::IElement const > tempshared1 ;
  std::shared_ptr< dive::elements::IElement const > *smartarg1 = 0 ;
  FaceIndex temp2 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  Scalar result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "IElement_Area", 2, 2, swig_obj)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_dive__elements__IElement_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IElement_Area" "', argument " "1"" of type '" "dive::elements::IElement const *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const dive::elements::IElement > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const dive::elements::IElement > * >(argp1);
      arg1 = const_cast< dive::elements::IElement * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const dive::elements::IElement > * >(argp1);
      arg1 = const_cast< dive::elements::IElement * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IElement_Area" "', argument " "2"" of type '" "FaceIndex""'");
  } 
  temp2 = static_cast< FaceIndex >(val2);
  arg2 = &temp2;
  result = (Scalar)((dive::elements::IElement const *)arg1)->Area((FaceIndex const &)*arg2);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IElement_Length(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  dive::elements::IElement *arg1 = (dive::elements::IElement *) 0 ;
  EdgeIndex *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< dive::elements::IElement const > tempshared1 ;
  std::shared_ptr< dive::elements::IElement const > *smartarg1 = 0 ;
  EdgeIndex temp2 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  Scalar result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "IElement_Length", 2, 2, swig_obj)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_dive__elements__IElement_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IElement_Length" "', argument " "1"" of type '" "dive::elements::IElement const *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const dive::elements::IElement > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const dive::elements::IElement > * >(argp1);
      arg1 = const_cast< dive::elements::IElement * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const dive::elements::IElement > * >(argp1);
      arg1 = const_cast< dive::elements::IElement * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IElement_Length" "', argument " "2"" of type '" "EdgeIndex""'");
  } 
  temp2 = static_cast< EdgeIndex >(val2);
  arg2 = &temp2;
  result = (Scalar)((dive::elements::IElement const *)arg1)->Length((EdgeIndex const &)*arg2);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IElement_CalculateHeight(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  dive::elements::IElement *arg1 = (dive::elements::IElement *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< dive::elements::IElement > tempshared1 ;
  std::shared_ptr< dive::elements::IElement > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  Scalar result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_dive__elements__IElement_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IElement_CalculateHeight" "', argument " "1"" of type '" "dive::elements::IElement *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  dive::elements::IElement > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  dive::elements::IElement > * >(argp1);
      arg1 = const_cast< dive::elements::IElement * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  dive::elements::IElement > * >(argp1);
      arg1 = const_cast< dive::elements::IElement * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = (Scalar)(arg1)->CalculateHeight();
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IElement_LocalCoordinates__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  dive::elements::IElement *arg1 = (dive::elements::IElement *) 0 ;
  INodePtr arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< dive::elements::IElement const > tempshared1 ;
  std::shared_ptr< dive::elements::IElement const > *smartarg1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  Vector result;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_dive__elements__IElement_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IElement_LocalCoordinates" "', argument " "1"" of type '" "dive::elements::IElement const *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const dive::elements::IElement > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const dive::elements::IElement > * >(argp1);
      arg1 = const_cast< dive::elements::IElement * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const dive::elements::IElement > * >(argp1);
      arg1 = const_cast< dive::elements::IElement * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    int newmem = 0;
    res2 = SWIG_ConvertPtrAndOwn(swig_obj[1], &argp2, SWIGTYPE_p_std__shared_ptrT_nodes__INode_t,  0 , &newmem);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IElement_LocalCoordinates" "', argument " "2"" of type '" "INodePtr""'");
    }
    if (argp2) arg2 = *(reinterpret_cast< INodePtr * >(argp2));
    if (newmem & SWIG_CAST_NEW_MEMORY) delete reinterpret_cast< INodePtr * >(argp2);
  }
  result = ((dive::elements::IElement const *)arg1)->LocalCoordinates(arg2);
  resultobj = SWIG_NewPointerObj((new Vector(result)), SWIGTYPE_p_eilig__Vector, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IElement_LocalCoordinates__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  dive::elements::IElement *arg1 = (dive::elements::IElement *) 0 ;
  NodeIndex *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< dive::elements::IElement const > tempshared1 ;
  std::shared_ptr< dive::elements::IElement const > *smartarg1 = 0 ;
  NodeIndex temp2 ;
  size_t val2 ;
  int ecode2 = 0 ;
  Vector result;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_dive__elements__IElement_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IElement_LocalCoordinates" "', argument " "1"" of type '" "dive::elements::IElement const *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const dive::elements::IElement > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const dive::elements::IElement > * >(argp1);
      arg1 = const_cast< dive::elements::IElement * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const dive::elements::IElement > * >(argp1);
      arg1 = const_cast< dive::elements::IElement * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IElement_LocalCoordinates" "', argument " "2"" of type '" "NodeIndex""'");
  } 
  temp2 = static_cast< NodeIndex >(val2);
  arg2 = &temp2;
  result = ((dive::elements::IElement const *)arg1)->LocalCoordinates((NodeIndex const &)*arg2);
  resultobj = SWIG_NewPointerObj((new Vector(result)), SWIGTYPE_p_eilig__Vector, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IElement_LocalCoordinates(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "IElement_LocalCoordinates", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_std__shared_ptrT_dive__elements__IElement_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_std__shared_ptrT_nodes__INode_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_IElement_LocalCoordinates__SWIG_0(self, argc, argv);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_std__shared_ptrT_dive__elements__IElement_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_IElement_LocalCoordinates__SWIG_1(self, argc, argv);
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'IElement_LocalCoordinates'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    dive::elements::IElement::LocalCoordinates(INodePtr) const\n"
    "    dive::elements::IElement::LocalCoordinates(NodeIndex const &) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_IElement_GlobalCoordinates__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  dive::elements::IElement *arg1 = (dive::elements::IElement *) 0 ;
  INodePtr arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< dive::elements::IElement const > tempshared1 ;
  std::shared_ptr< dive::elements::IElement const > *smartarg1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  Vector result;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_dive__elements__IElement_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IElement_GlobalCoordinates" "', argument " "1"" of type '" "dive::elements::IElement const *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const dive::elements::IElement > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const dive::elements::IElement > * >(argp1);
      arg1 = const_cast< dive::elements::IElement * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const dive::elements::IElement > * >(argp1);
      arg1 = const_cast< dive::elements::IElement * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    int newmem = 0;
    res2 = SWIG_ConvertPtrAndOwn(swig_obj[1], &argp2, SWIGTYPE_p_std__shared_ptrT_nodes__INode_t,  0 , &newmem);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IElement_GlobalCoordinates" "', argument " "2"" of type '" "INodePtr""'");
    }
    if (argp2) arg2 = *(reinterpret_cast< INodePtr * >(argp2));
    if (newmem & SWIG_CAST_NEW_MEMORY) delete reinterpret_cast< INodePtr * >(argp2);
  }
  result = ((dive::elements::IElement const *)arg1)->GlobalCoordinates(arg2);
  resultobj = SWIG_NewPointerObj((new Vector(result)), SWIGTYPE_p_eilig__Vector, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IElement_GlobalCoordinates__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  dive::elements::IElement *arg1 = (dive::elements::IElement *) 0 ;
  NodeIndex *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< dive::elements::IElement const > tempshared1 ;
  std::shared_ptr< dive::elements::IElement const > *smartarg1 = 0 ;
  NodeIndex temp2 ;
  size_t val2 ;
  int ecode2 = 0 ;
  Vector result;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_dive__elements__IElement_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IElement_GlobalCoordinates" "', argument " "1"" of type '" "dive::elements::IElement const *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const dive::elements::IElement > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const dive::elements::IElement > * >(argp1);
      arg1 = const_cast< dive::elements::IElement * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const dive::elements::IElement > * >(argp1);
      arg1 = const_cast< dive::elements::IElement * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IElement_GlobalCoordinates" "', argument " "2"" of type '" "NodeIndex""'");
  } 
  temp2 = static_cast< NodeIndex >(val2);
  arg2 = &temp2;
  result = ((dive::elements::IElement const *)arg1)->GlobalCoordinates((NodeIndex const &)*arg2);
  resultobj = SWIG_NewPointerObj((new Vector(result)), SWIGTYPE_p_eilig__Vector, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IElement_GlobalCoordinates__SWIG_2(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  dive::elements::IElement *arg1 = (dive::elements::IElement *) 0 ;
  Vector *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< dive::elements::IElement const > tempshared1 ;
  std::shared_ptr< dive::elements::IElement const > *smartarg1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  Vector result;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_dive__elements__IElement_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IElement_GlobalCoordinates" "', argument " "1"" of type '" "dive::elements::IElement const *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const dive::elements::IElement > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const dive::elements::IElement > * >(argp1);
      arg1 = const_cast< dive::elements::IElement * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const dive::elements::IElement > * >(argp1);
      arg1 = const_cast< dive::elements::IElement * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_eilig__Vector,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IElement_GlobalCoordinates" "', argument " "2"" of type '" "Vector const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "IElement_GlobalCoordinates" "', argument " "2"" of type '" "Vector const &""'"); 
  }
  arg2 = reinterpret_cast< Vector * >(argp2);
  result = ((dive::elements::IElement const *)arg1)->GlobalCoordinates((Vector const &)*arg2);
  resultobj = SWIG_NewPointerObj((new Vector(result)), SWIGTYPE_p_eilig__Vector, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IElement_GlobalCoordinates(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "IElement_GlobalCoordinates", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_std__shared_ptrT_dive__elements__IElement_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_std__shared_ptrT_nodes__INode_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_IElement_GlobalCoordinates__SWIG_0(self, argc, argv);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_std__shared_ptrT_dive__elements__IElement_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_eilig__Vector, SWIG_POINTER_NO_NULL | 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_IElement_GlobalCoordinates__SWIG_2(self, argc, argv);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_std__shared_ptrT_dive__elements__IElement_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_IElement_GlobalCoordinates__SWIG_1(self, argc, argv);
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'IElement_GlobalCoordinates'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    dive::elements::IElement::GlobalCoordinates(INodePtr) const\n"
    "    dive::elements::IElement::GlobalCoordinates(NodeIndex const &) const\n"
    "    dive::elements::IElement::GlobalCoordinates(Vector const &) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_IElement_GlobalDerivatives(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  dive::elements::IElement *arg1 = (dive::elements::IElement *) 0 ;
  Vector *arg2 = 0 ;
  Dimension *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< dive::elements::IElement const > tempshared1 ;
  std::shared_ptr< dive::elements::IElement const > *smartarg1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  Dimension temp3 ;
  size_t val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  Vector result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "IElement_GlobalDerivatives", 3, 3, swig_obj)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_dive__elements__IElement_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IElement_GlobalDerivatives" "', argument " "1"" of type '" "dive::elements::IElement const *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const dive::elements::IElement > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const dive::elements::IElement > * >(argp1);
      arg1 = const_cast< dive::elements::IElement * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const dive::elements::IElement > * >(argp1);
      arg1 = const_cast< dive::elements::IElement * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_eilig__Vector,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IElement_GlobalDerivatives" "', argument " "2"" of type '" "Vector const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "IElement_GlobalDerivatives" "', argument " "2"" of type '" "Vector const &""'"); 
  }
  arg2 = reinterpret_cast< Vector * >(argp2);
  ecode3 = SWIG_AsVal_size_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "IElement_GlobalDerivatives" "', argument " "3"" of type '" "Dimension""'");
  } 
  temp3 = static_cast< Dimension >(val3);
  arg3 = &temp3;
  result = ((dive::elements::IElement const *)arg1)->GlobalDerivatives((Vector const &)*arg2,(Dimension const &)*arg3);
  resultobj = SWIG_NewPointerObj((new Vector(result)), SWIGTYPE_p_eilig__Vector, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IElement_GetNodeFace(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  dive::elements::IElement *arg1 = (dive::elements::IElement *) 0 ;
  FaceIndex *arg2 = 0 ;
  NodeIndex *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< dive::elements::IElement const > tempshared1 ;
  std::shared_ptr< dive::elements::IElement const > *smartarg1 = 0 ;
  FaceIndex temp2 ;
  size_t val2 ;
  int ecode2 = 0 ;
  NodeIndex temp3 ;
  size_t val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  INodePtr result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "IElement_GetNodeFace", 3, 3, swig_obj)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_dive__elements__IElement_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IElement_GetNodeFace" "', argument " "1"" of type '" "dive::elements::IElement const *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const dive::elements::IElement > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const dive::elements::IElement > * >(argp1);
      arg1 = const_cast< dive::elements::IElement * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const dive::elements::IElement > * >(argp1);
      arg1 = const_cast< dive::elements::IElement * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IElement_GetNodeFace" "', argument " "2"" of type '" "FaceIndex""'");
  } 
  temp2 = static_cast< FaceIndex >(val2);
  arg2 = &temp2;
  ecode3 = SWIG_AsVal_size_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "IElement_GetNodeFace" "', argument " "3"" of type '" "NodeIndex""'");
  } 
  temp3 = static_cast< NodeIndex >(val3);
  arg3 = &temp3;
  result = ((dive::elements::IElement const *)arg1)->GetNodeFace((FaceIndex const &)*arg2,(NodeIndex const &)*arg3);
  {
    std::shared_ptr<  nodes::INode > *smartresult = result ? new std::shared_ptr<  nodes::INode >(result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_std__shared_ptrT_nodes__INode_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IElement_GetNodeEdge(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  dive::elements::IElement *arg1 = (dive::elements::IElement *) 0 ;
  EdgeIndex *arg2 = 0 ;
  NodeIndex *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< dive::elements::IElement const > tempshared1 ;
  std::shared_ptr< dive::elements::IElement const > *smartarg1 = 0 ;
  EdgeIndex temp2 ;
  size_t val2 ;
  int ecode2 = 0 ;
  NodeIndex temp3 ;
  size_t val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  INodePtr result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "IElement_GetNodeEdge", 3, 3, swig_obj)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_dive__elements__IElement_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IElement_GetNodeEdge" "', argument " "1"" of type '" "dive::elements::IElement const *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const dive::elements::IElement > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const dive::elements::IElement > * >(argp1);
      arg1 = const_cast< dive::elements::IElement * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const dive::elements::IElement > * >(argp1);
      arg1 = const_cast< dive::elements::IElement * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IElement_GetNodeEdge" "', argument " "2"" of type '" "EdgeIndex""'");
  } 
  temp2 = static_cast< EdgeIndex >(val2);
  arg2 = &temp2;
  ecode3 = SWIG_AsVal_size_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "IElement_GetNodeEdge" "', argument " "3"" of type '" "NodeIndex""'");
  } 
  temp3 = static_cast< NodeIndex >(val3);
  arg3 = &temp3;
  result = ((dive::elements::IElement const *)arg1)->GetNodeEdge((EdgeIndex const &)*arg2,(NodeIndex const &)*arg3);
  {
    std::shared_ptr<  nodes::INode > *smartresult = result ? new std::shared_ptr<  nodes::INode >(result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_std__shared_ptrT_nodes__INode_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IElement_GetNode(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  dive::elements::IElement *arg1 = (dive::elements::IElement *) 0 ;
  NodeIndex *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< dive::elements::IElement const > tempshared1 ;
  std::shared_ptr< dive::elements::IElement const > *smartarg1 = 0 ;
  NodeIndex temp2 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  INodePtr result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "IElement_GetNode", 2, 2, swig_obj)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_dive__elements__IElement_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IElement_GetNode" "', argument " "1"" of type '" "dive::elements::IElement const *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const dive::elements::IElement > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const dive::elements::IElement > * >(argp1);
      arg1 = const_cast< dive::elements::IElement * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const dive::elements::IElement > * >(argp1);
      arg1 = const_cast< dive::elements::IElement * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IElement_GetNode" "', argument " "2"" of type '" "NodeIndex""'");
  } 
  temp2 = static_cast< NodeIndex >(val2);
  arg2 = &temp2;
  result = ((dive::elements::IElement const *)arg1)->GetNode((NodeIndex const &)*arg2);
  {
    std::shared_ptr<  nodes::INode > *smartresult = result ? new std::shared_ptr<  nodes::INode >(result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_std__shared_ptrT_nodes__INode_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IElement_GetNodes(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  dive::elements::IElement *arg1 = (dive::elements::IElement *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< dive::elements::IElement const > tempshared1 ;
  std::shared_ptr< dive::elements::IElement const > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  Nodes *result = 0 ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_dive__elements__IElement_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IElement_GetNodes" "', argument " "1"" of type '" "dive::elements::IElement const *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const dive::elements::IElement > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const dive::elements::IElement > * >(argp1);
      arg1 = const_cast< dive::elements::IElement * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const dive::elements::IElement > * >(argp1);
      arg1 = const_cast< dive::elements::IElement * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = (Nodes *) &((dive::elements::IElement const *)arg1)->GetNodes();
  resultobj = swig::from(static_cast< std::vector< std::shared_ptr< nodes::INode >,std::allocator< std::shared_ptr< nodes::INode > > > >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IElement_GetOrder(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  dive::elements::IElement *arg1 = (dive::elements::IElement *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< dive::elements::IElement const > tempshared1 ;
  std::shared_ptr< dive::elements::IElement const > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  dive::elements::Order result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_dive__elements__IElement_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IElement_GetOrder" "', argument " "1"" of type '" "dive::elements::IElement const *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const dive::elements::IElement > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const dive::elements::IElement > * >(argp1);
      arg1 = const_cast< dive::elements::IElement * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const dive::elements::IElement > * >(argp1);
      arg1 = const_cast< dive::elements::IElement * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = ((dive::elements::IElement const *)arg1)->GetOrder();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IElement_GetParametric(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  dive::elements::IElement *arg1 = (dive::elements::IElement *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< dive::elements::IElement const > tempshared1 ;
  std::shared_ptr< dive::elements::IElement const > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  dive::elements::Parametric result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_dive__elements__IElement_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IElement_GetParametric" "', argument " "1"" of type '" "dive::elements::IElement const *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const dive::elements::IElement > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const dive::elements::IElement > * >(argp1);
      arg1 = const_cast< dive::elements::IElement * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const dive::elements::IElement > * >(argp1);
      arg1 = const_cast< dive::elements::IElement * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = ((dive::elements::IElement const *)arg1)->GetParametric();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IElement_GetType(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  dive::elements::IElement *arg1 = (dive::elements::IElement *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< dive::elements::IElement const > tempshared1 ;
  std::shared_ptr< dive::elements::IElement const > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  Type result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_dive__elements__IElement_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IElement_GetType" "', argument " "1"" of type '" "dive::elements::IElement const *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const dive::elements::IElement > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const dive::elements::IElement > * >(argp1);
      arg1 = const_cast< dive::elements::IElement * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const dive::elements::IElement > * >(argp1);
      arg1 = const_cast< dive::elements::IElement * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = ((dive::elements::IElement const *)arg1)->GetType();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IElement_GetNodeIndex(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  dive::elements::IElement *arg1 = (dive::elements::IElement *) 0 ;
  INodePtr arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< dive::elements::IElement const > tempshared1 ;
  std::shared_ptr< dive::elements::IElement const > *smartarg1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  NodeIndex result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "IElement_GetNodeIndex", 2, 2, swig_obj)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_dive__elements__IElement_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IElement_GetNodeIndex" "', argument " "1"" of type '" "dive::elements::IElement const *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const dive::elements::IElement > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const dive::elements::IElement > * >(argp1);
      arg1 = const_cast< dive::elements::IElement * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const dive::elements::IElement > * >(argp1);
      arg1 = const_cast< dive::elements::IElement * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    int newmem = 0;
    res2 = SWIG_ConvertPtrAndOwn(swig_obj[1], &argp2, SWIGTYPE_p_std__shared_ptrT_nodes__INode_t,  0 , &newmem);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IElement_GetNodeIndex" "', argument " "2"" of type '" "INodePtr""'");
    }
    if (argp2) arg2 = *(reinterpret_cast< INodePtr * >(argp2));
    if (newmem & SWIG_CAST_NEW_MEMORY) delete reinterpret_cast< INodePtr * >(argp2);
  }
  result = ((dive::elements::IElement const *)arg1)->GetNodeIndex(arg2);
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IElement_GetNumberNodesFace(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  dive::elements::IElement *arg1 = (dive::elements::IElement *) 0 ;
  FaceIndex *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< dive::elements::IElement const > tempshared1 ;
  std::shared_ptr< dive::elements::IElement const > *smartarg1 = 0 ;
  FaceIndex temp2 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  NumberNodes result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "IElement_GetNumberNodesFace", 2, 2, swig_obj)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_dive__elements__IElement_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IElement_GetNumberNodesFace" "', argument " "1"" of type '" "dive::elements::IElement const *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const dive::elements::IElement > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const dive::elements::IElement > * >(argp1);
      arg1 = const_cast< dive::elements::IElement * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const dive::elements::IElement > * >(argp1);
      arg1 = const_cast< dive::elements::IElement * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IElement_GetNumberNodesFace" "', argument " "2"" of type '" "FaceIndex""'");
  } 
  temp2 = static_cast< FaceIndex >(val2);
  arg2 = &temp2;
  result = ((dive::elements::IElement const *)arg1)->GetNumberNodesFace((FaceIndex const &)*arg2);
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IElement_GetNumberNodesEdge(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  dive::elements::IElement *arg1 = (dive::elements::IElement *) 0 ;
  EdgeIndex *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< dive::elements::IElement const > tempshared1 ;
  std::shared_ptr< dive::elements::IElement const > *smartarg1 = 0 ;
  EdgeIndex temp2 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  NumberNodes result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "IElement_GetNumberNodesEdge", 2, 2, swig_obj)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_dive__elements__IElement_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IElement_GetNumberNodesEdge" "', argument " "1"" of type '" "dive::elements::IElement const *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const dive::elements::IElement > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const dive::elements::IElement > * >(argp1);
      arg1 = const_cast< dive::elements::IElement * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const dive::elements::IElement > * >(argp1);
      arg1 = const_cast< dive::elements::IElement * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IElement_GetNumberNodesEdge" "', argument " "2"" of type '" "EdgeIndex""'");
  } 
  temp2 = static_cast< EdgeIndex >(val2);
  arg2 = &temp2;
  result = ((dive::elements::IElement const *)arg1)->GetNumberNodesEdge((EdgeIndex const &)*arg2);
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IElement_GetNumberNodes(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  dive::elements::IElement *arg1 = (dive::elements::IElement *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< dive::elements::IElement const > tempshared1 ;
  std::shared_ptr< dive::elements::IElement const > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  NumberNodes result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_dive__elements__IElement_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IElement_GetNumberNodes" "', argument " "1"" of type '" "dive::elements::IElement const *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const dive::elements::IElement > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const dive::elements::IElement > * >(argp1);
      arg1 = const_cast< dive::elements::IElement * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const dive::elements::IElement > * >(argp1);
      arg1 = const_cast< dive::elements::IElement * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = ((dive::elements::IElement const *)arg1)->GetNumberNodes();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IElement_GetNumberFaces(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  dive::elements::IElement *arg1 = (dive::elements::IElement *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< dive::elements::IElement const > tempshared1 ;
  std::shared_ptr< dive::elements::IElement const > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  NumberFaces result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_dive__elements__IElement_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IElement_GetNumberFaces" "', argument " "1"" of type '" "dive::elements::IElement const *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const dive::elements::IElement > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const dive::elements::IElement > * >(argp1);
      arg1 = const_cast< dive::elements::IElement * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const dive::elements::IElement > * >(argp1);
      arg1 = const_cast< dive::elements::IElement * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = ((dive::elements::IElement const *)arg1)->GetNumberFaces();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IElement_GetNumberEdges(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  dive::elements::IElement *arg1 = (dive::elements::IElement *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< dive::elements::IElement const > tempshared1 ;
  std::shared_ptr< dive::elements::IElement const > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  NumberEdges result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_dive__elements__IElement_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IElement_GetNumberEdges" "', argument " "1"" of type '" "dive::elements::IElement const *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const dive::elements::IElement > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const dive::elements::IElement > * >(argp1);
      arg1 = const_cast< dive::elements::IElement * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const dive::elements::IElement > * >(argp1);
      arg1 = const_cast< dive::elements::IElement * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = ((dive::elements::IElement const *)arg1)->GetNumberEdges();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IElement_GetDimension(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  dive::elements::IElement *arg1 = (dive::elements::IElement *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< dive::elements::IElement const > tempshared1 ;
  std::shared_ptr< dive::elements::IElement const > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  Dimension result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_dive__elements__IElement_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IElement_GetDimension" "', argument " "1"" of type '" "dive::elements::IElement const *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const dive::elements::IElement > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const dive::elements::IElement > * >(argp1);
      arg1 = const_cast< dive::elements::IElement * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const dive::elements::IElement > * >(argp1);
      arg1 = const_cast< dive::elements::IElement * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = ((dive::elements::IElement const *)arg1)->GetDimension();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IElement_GetCenter(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  dive::elements::IElement *arg1 = (dive::elements::IElement *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< dive::elements::IElement const > tempshared1 ;
  std::shared_ptr< dive::elements::IElement const > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  Vector result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_dive__elements__IElement_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IElement_GetCenter" "', argument " "1"" of type '" "dive::elements::IElement const *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const dive::elements::IElement > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const dive::elements::IElement > * >(argp1);
      arg1 = const_cast< dive::elements::IElement * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const dive::elements::IElement > * >(argp1);
      arg1 = const_cast< dive::elements::IElement * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = ((dive::elements::IElement const *)arg1)->GetCenter();
  resultobj = SWIG_NewPointerObj((new Vector(result)), SWIGTYPE_p_eilig__Vector, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IElement_GetTag(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  dive::elements::IElement *arg1 = (dive::elements::IElement *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< dive::elements::IElement const > tempshared1 ;
  std::shared_ptr< dive::elements::IElement const > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  Tag result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_dive__elements__IElement_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IElement_GetTag" "', argument " "1"" of type '" "dive::elements::IElement const *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const dive::elements::IElement > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const dive::elements::IElement > * >(argp1);
      arg1 = const_cast< dive::elements::IElement * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const dive::elements::IElement > * >(argp1);
      arg1 = const_cast< dive::elements::IElement * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = ((dive::elements::IElement const *)arg1)->GetTag();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IElement_GetMaterial(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  dive::elements::IElement *arg1 = (dive::elements::IElement *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< dive::elements::IElement const > tempshared1 ;
  std::shared_ptr< dive::elements::IElement const > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  IMaterialPtr result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_dive__elements__IElement_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IElement_GetMaterial" "', argument " "1"" of type '" "dive::elements::IElement const *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const dive::elements::IElement > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const dive::elements::IElement > * >(argp1);
      arg1 = const_cast< dive::elements::IElement * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const dive::elements::IElement > * >(argp1);
      arg1 = const_cast< dive::elements::IElement * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = ((dive::elements::IElement const *)arg1)->GetMaterial();
  {
    std::shared_ptr<  material::IMaterial > *smartresult = result ? new std::shared_ptr<  material::IMaterial >(result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_std__shared_ptrT_material__IMaterial_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IElement_GetElementIndex(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  dive::elements::IElement *arg1 = (dive::elements::IElement *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< dive::elements::IElement const > tempshared1 ;
  std::shared_ptr< dive::elements::IElement const > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  ElementIndex result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_dive__elements__IElement_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IElement_GetElementIndex" "', argument " "1"" of type '" "dive::elements::IElement const *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const dive::elements::IElement > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const dive::elements::IElement > * >(argp1);
      arg1 = const_cast< dive::elements::IElement * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const dive::elements::IElement > * >(argp1);
      arg1 = const_cast< dive::elements::IElement * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = ((dive::elements::IElement const *)arg1)->GetElementIndex();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IElement_GetHeight(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  dive::elements::IElement *arg1 = (dive::elements::IElement *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< dive::elements::IElement const > tempshared1 ;
  std::shared_ptr< dive::elements::IElement const > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  Scalar result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_dive__elements__IElement_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IElement_GetHeight" "', argument " "1"" of type '" "dive::elements::IElement const *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const dive::elements::IElement > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const dive::elements::IElement > * >(argp1);
      arg1 = const_cast< dive::elements::IElement * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const dive::elements::IElement > * >(argp1);
      arg1 = const_cast< dive::elements::IElement * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = (Scalar)((dive::elements::IElement const *)arg1)->GetHeight();
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IElement_GetNumberDof(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  dive::elements::IElement *arg1 = (dive::elements::IElement *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< dive::elements::IElement const > tempshared1 ;
  std::shared_ptr< dive::elements::IElement const > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  NumberDof result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_dive__elements__IElement_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IElement_GetNumberDof" "', argument " "1"" of type '" "dive::elements::IElement const *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const dive::elements::IElement > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const dive::elements::IElement > * >(argp1);
      arg1 = const_cast< dive::elements::IElement * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const dive::elements::IElement > * >(argp1);
      arg1 = const_cast< dive::elements::IElement * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = ((dive::elements::IElement const *)arg1)->GetNumberDof();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IElement_IntegralVolume(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  dive::elements::IElement *arg1 = (dive::elements::IElement *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< dive::elements::IElement const > tempshared1 ;
  std::shared_ptr< dive::elements::IElement const > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  IGaussPtr result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_dive__elements__IElement_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IElement_IntegralVolume" "', argument " "1"" of type '" "dive::elements::IElement const *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const dive::elements::IElement > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const dive::elements::IElement > * >(argp1);
      arg1 = const_cast< dive::elements::IElement * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const dive::elements::IElement > * >(argp1);
      arg1 = const_cast< dive::elements::IElement * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = ((dive::elements::IElement const *)arg1)->IntegralVolume();
  {
    std::shared_ptr<  quadrature::IGauss > *smartresult = result ? new std::shared_ptr<  quadrature::IGauss >(result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_std__shared_ptrT_quadrature__IGauss_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IElement_IntegralArea(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  dive::elements::IElement *arg1 = (dive::elements::IElement *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< dive::elements::IElement const > tempshared1 ;
  std::shared_ptr< dive::elements::IElement const > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  IGaussPtr result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_dive__elements__IElement_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IElement_IntegralArea" "', argument " "1"" of type '" "dive::elements::IElement const *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const dive::elements::IElement > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const dive::elements::IElement > * >(argp1);
      arg1 = const_cast< dive::elements::IElement * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const dive::elements::IElement > * >(argp1);
      arg1 = const_cast< dive::elements::IElement * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = ((dive::elements::IElement const *)arg1)->IntegralArea();
  {
    std::shared_ptr<  quadrature::IGauss > *smartresult = result ? new std::shared_ptr<  quadrature::IGauss >(result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_std__shared_ptrT_quadrature__IGauss_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IElement_IntegralEdge(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  dive::elements::IElement *arg1 = (dive::elements::IElement *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< dive::elements::IElement const > tempshared1 ;
  std::shared_ptr< dive::elements::IElement const > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  IGaussPtr result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_dive__elements__IElement_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IElement_IntegralEdge" "', argument " "1"" of type '" "dive::elements::IElement const *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const dive::elements::IElement > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const dive::elements::IElement > * >(argp1);
      arg1 = const_cast< dive::elements::IElement * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const dive::elements::IElement > * >(argp1);
      arg1 = const_cast< dive::elements::IElement * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = ((dive::elements::IElement const *)arg1)->IntegralEdge();
  {
    std::shared_ptr<  quadrature::IGauss > *smartresult = result ? new std::shared_ptr<  quadrature::IGauss >(result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_std__shared_ptrT_quadrature__IGauss_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IElement_GetIntegralAreaHelper(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  dive::elements::IElement *arg1 = (dive::elements::IElement *) 0 ;
  FaceIndex arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< dive::elements::IElement const > tempshared1 ;
  std::shared_ptr< dive::elements::IElement const > *smartarg1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  dive::elements::IntegralAreaHelper result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "IElement_GetIntegralAreaHelper", 2, 2, swig_obj)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_dive__elements__IElement_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IElement_GetIntegralAreaHelper" "', argument " "1"" of type '" "dive::elements::IElement const *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const dive::elements::IElement > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const dive::elements::IElement > * >(argp1);
      arg1 = const_cast< dive::elements::IElement * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const dive::elements::IElement > * >(argp1);
      arg1 = const_cast< dive::elements::IElement * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IElement_GetIntegralAreaHelper" "', argument " "2"" of type '" "FaceIndex""'");
  } 
  arg2 = static_cast< FaceIndex >(val2);
  result = ((dive::elements::IElement const *)arg1)->GetIntegralAreaHelper(arg2);
  resultobj = SWIG_NewPointerObj((new dive::elements::IntegralAreaHelper(result)), SWIGTYPE_p_dive__elements__IntegralAreaHelper, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IElement_GetIntegralEdgeHelper(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  dive::elements::IElement *arg1 = (dive::elements::IElement *) 0 ;
  EdgeIndex arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< dive::elements::IElement const > tempshared1 ;
  std::shared_ptr< dive::elements::IElement const > *smartarg1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  dive::elements::IntegralEdgeHelper result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "IElement_GetIntegralEdgeHelper", 2, 2, swig_obj)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_dive__elements__IElement_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IElement_GetIntegralEdgeHelper" "', argument " "1"" of type '" "dive::elements::IElement const *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const dive::elements::IElement > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const dive::elements::IElement > * >(argp1);
      arg1 = const_cast< dive::elements::IElement * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const dive::elements::IElement > * >(argp1);
      arg1 = const_cast< dive::elements::IElement * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IElement_GetIntegralEdgeHelper" "', argument " "2"" of type '" "EdgeIndex""'");
  } 
  arg2 = static_cast< EdgeIndex >(val2);
  result = ((dive::elements::IElement const *)arg1)->GetIntegralEdgeHelper(arg2);
  resultobj = SWIG_NewPointerObj((new dive::elements::IntegralEdgeHelper(result)), SWIGTYPE_p_dive__elements__IntegralEdgeHelper, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IElement_SetNumberDof(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  dive::elements::IElement *arg1 = (dive::elements::IElement *) 0 ;
  NumberDof arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< dive::elements::IElement > tempshared1 ;
  std::shared_ptr< dive::elements::IElement > *smartarg1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "IElement_SetNumberDof", 2, 2, swig_obj)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_dive__elements__IElement_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IElement_SetNumberDof" "', argument " "1"" of type '" "dive::elements::IElement *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  dive::elements::IElement > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  dive::elements::IElement > * >(argp1);
      arg1 = const_cast< dive::elements::IElement * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  dive::elements::IElement > * >(argp1);
      arg1 = const_cast< dive::elements::IElement * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IElement_SetNumberDof" "', argument " "2"" of type '" "NumberDof""'");
  } 
  arg2 = static_cast< NumberDof >(val2);
  (arg1)->SetNumberDof(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IElement_SetNode(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  dive::elements::IElement *arg1 = (dive::elements::IElement *) 0 ;
  NodeIndex *arg2 = 0 ;
  INodePtr arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< dive::elements::IElement > tempshared1 ;
  std::shared_ptr< dive::elements::IElement > *smartarg1 = 0 ;
  NodeIndex temp2 ;
  size_t val2 ;
  int ecode2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  PyObject *swig_obj[3] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "IElement_SetNode", 3, 3, swig_obj)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_dive__elements__IElement_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IElement_SetNode" "', argument " "1"" of type '" "dive::elements::IElement *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  dive::elements::IElement > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  dive::elements::IElement > * >(argp1);
      arg1 = const_cast< dive::elements::IElement * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  dive::elements::IElement > * >(argp1);
      arg1 = const_cast< dive::elements::IElement * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IElement_SetNode" "', argument " "2"" of type '" "NodeIndex""'");
  } 
  temp2 = static_cast< NodeIndex >(val2);
  arg2 = &temp2;
  {
    int newmem = 0;
    res3 = SWIG_ConvertPtrAndOwn(swig_obj[2], &argp3, SWIGTYPE_p_std__shared_ptrT_nodes__INode_t,  0 , &newmem);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "IElement_SetNode" "', argument " "3"" of type '" "INodePtr""'");
    }
    if (argp3) arg3 = *(reinterpret_cast< INodePtr * >(argp3));
    if (newmem & SWIG_CAST_NEW_MEMORY) delete reinterpret_cast< INodePtr * >(argp3);
  }
  (arg1)->SetNode((NodeIndex const &)*arg2,arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IElement_SetOrder(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  dive::elements::IElement *arg1 = (dive::elements::IElement *) 0 ;
  dive::elements::Order *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< dive::elements::IElement > tempshared1 ;
  std::shared_ptr< dive::elements::IElement > *smartarg1 = 0 ;
  dive::elements::Order temp2 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "IElement_SetOrder", 2, 2, swig_obj)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_dive__elements__IElement_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IElement_SetOrder" "', argument " "1"" of type '" "dive::elements::IElement *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  dive::elements::IElement > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  dive::elements::IElement > * >(argp1);
      arg1 = const_cast< dive::elements::IElement * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  dive::elements::IElement > * >(argp1);
      arg1 = const_cast< dive::elements::IElement * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IElement_SetOrder" "', argument " "2"" of type '" "dive::elements::Order""'");
  } 
  temp2 = static_cast< dive::elements::Order >(val2);
  arg2 = &temp2;
  (arg1)->SetOrder((dive::elements::Order const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IElement_SetParametric(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  dive::elements::IElement *arg1 = (dive::elements::IElement *) 0 ;
  dive::elements::Parametric *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< dive::elements::IElement > tempshared1 ;
  std::shared_ptr< dive::elements::IElement > *smartarg1 = 0 ;
  dive::elements::Parametric temp2 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "IElement_SetParametric", 2, 2, swig_obj)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_dive__elements__IElement_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IElement_SetParametric" "', argument " "1"" of type '" "dive::elements::IElement *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  dive::elements::IElement > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  dive::elements::IElement > * >(argp1);
      arg1 = const_cast< dive::elements::IElement * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  dive::elements::IElement > * >(argp1);
      arg1 = const_cast< dive::elements::IElement * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IElement_SetParametric" "', argument " "2"" of type '" "dive::elements::Parametric""'");
  } 
  temp2 = static_cast< dive::elements::Parametric >(val2);
  arg2 = &temp2;
  (arg1)->SetParametric((dive::elements::Parametric const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IElement_SetTag(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  dive::elements::IElement *arg1 = (dive::elements::IElement *) 0 ;
  Tag arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< dive::elements::IElement > tempshared1 ;
  std::shared_ptr< dive::elements::IElement > *smartarg1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "IElement_SetTag", 2, 2, swig_obj)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_dive__elements__IElement_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IElement_SetTag" "', argument " "1"" of type '" "dive::elements::IElement *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  dive::elements::IElement > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  dive::elements::IElement > * >(argp1);
      arg1 = const_cast< dive::elements::IElement * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  dive::elements::IElement > * >(argp1);
      arg1 = const_cast< dive::elements::IElement * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IElement_SetTag" "', argument " "2"" of type '" "Tag""'");
  } 
  arg2 = static_cast< Tag >(val2);
  (arg1)->SetTag(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IElement_SetMaterial(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  dive::elements::IElement *arg1 = (dive::elements::IElement *) 0 ;
  IMaterialPtr arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< dive::elements::IElement > tempshared1 ;
  std::shared_ptr< dive::elements::IElement > *smartarg1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "IElement_SetMaterial", 2, 2, swig_obj)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_dive__elements__IElement_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IElement_SetMaterial" "', argument " "1"" of type '" "dive::elements::IElement *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  dive::elements::IElement > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  dive::elements::IElement > * >(argp1);
      arg1 = const_cast< dive::elements::IElement * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  dive::elements::IElement > * >(argp1);
      arg1 = const_cast< dive::elements::IElement * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    int newmem = 0;
    res2 = SWIG_ConvertPtrAndOwn(swig_obj[1], &argp2, SWIGTYPE_p_std__shared_ptrT_material__IMaterial_t,  0 , &newmem);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IElement_SetMaterial" "', argument " "2"" of type '" "IMaterialPtr""'");
    }
    if (argp2) arg2 = *(reinterpret_cast< IMaterialPtr * >(argp2));
    if (newmem & SWIG_CAST_NEW_MEMORY) delete reinterpret_cast< IMaterialPtr * >(argp2);
  }
  (arg1)->SetMaterial(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IElement_SetElementIndex(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  dive::elements::IElement *arg1 = (dive::elements::IElement *) 0 ;
  ElementIndex arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< dive::elements::IElement > tempshared1 ;
  std::shared_ptr< dive::elements::IElement > *smartarg1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "IElement_SetElementIndex", 2, 2, swig_obj)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_dive__elements__IElement_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IElement_SetElementIndex" "', argument " "1"" of type '" "dive::elements::IElement *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  dive::elements::IElement > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  dive::elements::IElement > * >(argp1);
      arg1 = const_cast< dive::elements::IElement * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  dive::elements::IElement > * >(argp1);
      arg1 = const_cast< dive::elements::IElement * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IElement_SetElementIndex" "', argument " "2"" of type '" "ElementIndex""'");
  } 
  arg2 = static_cast< ElementIndex >(val2);
  (arg1)->SetElementIndex(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IElement_IsUsed(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  dive::elements::IElement *arg1 = (dive::elements::IElement *) 0 ;
  INodePtr arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< dive::elements::IElement const > tempshared1 ;
  std::shared_ptr< dive::elements::IElement const > *smartarg1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  bool result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "IElement_IsUsed", 2, 2, swig_obj)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_dive__elements__IElement_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IElement_IsUsed" "', argument " "1"" of type '" "dive::elements::IElement const *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const dive::elements::IElement > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const dive::elements::IElement > * >(argp1);
      arg1 = const_cast< dive::elements::IElement * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const dive::elements::IElement > * >(argp1);
      arg1 = const_cast< dive::elements::IElement * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    int newmem = 0;
    res2 = SWIG_ConvertPtrAndOwn(swig_obj[1], &argp2, SWIGTYPE_p_std__shared_ptrT_nodes__INode_t,  0 , &newmem);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IElement_IsUsed" "', argument " "2"" of type '" "INodePtr""'");
    }
    if (argp2) arg2 = *(reinterpret_cast< INodePtr * >(argp2));
    if (newmem & SWIG_CAST_NEW_MEMORY) delete reinterpret_cast< INodePtr * >(argp2);
  }
  result = (bool)((dive::elements::IElement const *)arg1)->IsUsed(arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IElement_InitializeCache(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  dive::elements::IElement *arg1 = (dive::elements::IElement *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< dive::elements::IElement > tempshared1 ;
  std::shared_ptr< dive::elements::IElement > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_dive__elements__IElement_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IElement_InitializeCache" "', argument " "1"" of type '" "dive::elements::IElement *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  dive::elements::IElement > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  dive::elements::IElement > * >(argp1);
      arg1 = const_cast< dive::elements::IElement * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  dive::elements::IElement > * >(argp1);
      arg1 = const_cast< dive::elements::IElement * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  (arg1)->InitializeCache();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *IElement_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_std__shared_ptrT_dive__elements__IElement_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_CreateElementHexa__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **SWIGUNUSEDPARM(swig_obj)) {
  PyObject *resultobj = 0;
  ElementHexaPtr result;
  
  (void)self;
  if ((nobjs < 0) || (nobjs > 0)) SWIG_fail;
  result = dive::elements::CreateElementHexa();
  {
    std::shared_ptr<  dive::elements::ElementHexa > *smartresult = result ? new std::shared_ptr<  dive::elements::ElementHexa >(result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_std__shared_ptrT_dive__elements__ElementHexa_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CreateElementHexa__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  Tag arg1 ;
  size_t val1 ;
  int ecode1 = 0 ;
  ElementHexaPtr result;
  
  (void)self;
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "CreateElementHexa" "', argument " "1"" of type '" "Tag""'");
  } 
  arg1 = static_cast< Tag >(val1);
  result = dive::elements::CreateElementHexa(SWIG_STD_MOVE(arg1));
  {
    std::shared_ptr<  dive::elements::ElementHexa > *smartresult = result ? new std::shared_ptr<  dive::elements::ElementHexa >(result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_std__shared_ptrT_dive__elements__ElementHexa_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CreateElementHexa(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "CreateElementHexa", 0, 1, argv))) SWIG_fail;
  --argc;
  if (argc == 0) {
    return _wrap_CreateElementHexa__SWIG_0(self, argc, argv);
  }
  if (argc == 1) {
    int _v = 0;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_CreateElementHexa__SWIG_1(self, argc, argv);
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'CreateElementHexa'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    dive::elements::CreateElementHexa()\n"
    "    dive::elements::CreateElementHexa(Tag)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_ElementHexa(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  dive::elements::ElementHexa *arg1 = (dive::elements::ElementHexa *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< dive::elements::ElementHexa > tempshared1 ;
  std::shared_ptr< dive::elements::ElementHexa > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_dive__elements__ElementHexa_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ElementHexa" "', argument " "1"" of type '" "dive::elements::ElementHexa *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  dive::elements::ElementHexa > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  dive::elements::ElementHexa > * >(argp1);
      arg1 = const_cast< dive::elements::ElementHexa * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  dive::elements::ElementHexa > * >(argp1);
      arg1 = const_cast< dive::elements::ElementHexa * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  (void)arg1; delete smartarg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ElementHexa_Create(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ElementHexaPtr result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "ElementHexa_Create", 0, 0, 0)) SWIG_fail;
  result = dive::elements::ElementHexa::Create();
  {
    std::shared_ptr<  dive::elements::ElementHexa > *smartresult = result ? new std::shared_ptr<  dive::elements::ElementHexa >(result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_std__shared_ptrT_dive__elements__ElementHexa_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ElementHexa_GetPtr__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  dive::elements::ElementHexa *arg1 = (dive::elements::ElementHexa *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< dive::elements::ElementHexa > tempshared1 ;
  std::shared_ptr< dive::elements::ElementHexa > *smartarg1 = 0 ;
  ElementHexaPtr result;
  
  (void)self;
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_dive__elements__ElementHexa_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ElementHexa_GetPtr" "', argument " "1"" of type '" "dive::elements::ElementHexa *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  dive::elements::ElementHexa > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  dive::elements::ElementHexa > * >(argp1);
      arg1 = const_cast< dive::elements::ElementHexa * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  dive::elements::ElementHexa > * >(argp1);
      arg1 = const_cast< dive::elements::ElementHexa * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = (arg1)->GetPtr();
  {
    std::shared_ptr<  dive::elements::ElementHexa > *smartresult = result ? new std::shared_ptr<  dive::elements::ElementHexa >(result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_std__shared_ptrT_dive__elements__ElementHexa_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ElementHexa_GetPtr__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  dive::elements::ElementHexa *arg1 = (dive::elements::ElementHexa *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< dive::elements::ElementHexa const > tempshared1 ;
  std::shared_ptr< dive::elements::ElementHexa const > *smartarg1 = 0 ;
  ConstElementHexaPtr result;
  
  (void)self;
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_dive__elements__ElementHexa_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ElementHexa_GetPtr" "', argument " "1"" of type '" "dive::elements::ElementHexa const *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const dive::elements::ElementHexa > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const dive::elements::ElementHexa > * >(argp1);
      arg1 = const_cast< dive::elements::ElementHexa * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const dive::elements::ElementHexa > * >(argp1);
      arg1 = const_cast< dive::elements::ElementHexa * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = ((dive::elements::ElementHexa const *)arg1)->GetPtr();
  {
    std::shared_ptr< const dive::elements::ElementHexa > *smartresult = result ? new std::shared_ptr< const dive::elements::ElementHexa >(result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_std__shared_ptrT_dive__elements__ElementHexa_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ElementHexa_GetPtr(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "ElementHexa_GetPtr", 0, 1, argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    int _v = 0;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_std__shared_ptrT_dive__elements__ElementHexa_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_ElementHexa_GetPtr__SWIG_0(self, argc, argv);
    }
  }
  if (argc == 1) {
    int _v = 0;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_std__shared_ptrT_dive__elements__ElementHexa_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_ElementHexa_GetPtr__SWIG_1(self, argc, argv);
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'ElementHexa_GetPtr'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    dive::elements::ElementHexa::GetPtr()\n"
    "    dive::elements::ElementHexa::GetPtr() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ElementHexa_u__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  dive::elements::ElementHexa *arg1 = (dive::elements::ElementHexa *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< dive::elements::ElementHexa const > tempshared1 ;
  std::shared_ptr< dive::elements::ElementHexa const > *smartarg1 = 0 ;
  Matrix result;
  
  (void)self;
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_dive__elements__ElementHexa_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ElementHexa_u" "', argument " "1"" of type '" "dive::elements::ElementHexa const *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const dive::elements::ElementHexa > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const dive::elements::ElementHexa > * >(argp1);
      arg1 = const_cast< dive::elements::ElementHexa * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const dive::elements::ElementHexa > * >(argp1);
      arg1 = const_cast< dive::elements::ElementHexa * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = ((dive::elements::ElementHexa const *)arg1)->u();
  resultobj = SWIG_NewPointerObj((new Matrix(result)), SWIGTYPE_p_eilig__Matrix, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ElementHexa_u__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  dive::elements::ElementHexa *arg1 = (dive::elements::ElementHexa *) 0 ;
  Vector *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< dive::elements::ElementHexa const > tempshared1 ;
  std::shared_ptr< dive::elements::ElementHexa const > *smartarg1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  Matrix result;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_dive__elements__ElementHexa_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ElementHexa_u" "', argument " "1"" of type '" "dive::elements::ElementHexa const *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const dive::elements::ElementHexa > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const dive::elements::ElementHexa > * >(argp1);
      arg1 = const_cast< dive::elements::ElementHexa * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const dive::elements::ElementHexa > * >(argp1);
      arg1 = const_cast< dive::elements::ElementHexa * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_eilig__Vector,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ElementHexa_u" "', argument " "2"" of type '" "Vector const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ElementHexa_u" "', argument " "2"" of type '" "Vector const &""'"); 
  }
  arg2 = reinterpret_cast< Vector * >(argp2);
  result = ((dive::elements::ElementHexa const *)arg1)->u((Vector const &)*arg2);
  resultobj = SWIG_NewPointerObj((new Matrix(result)), SWIGTYPE_p_eilig__Matrix, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ElementHexa_u(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "ElementHexa_u", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    int _v = 0;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_std__shared_ptrT_dive__elements__ElementHexa_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_ElementHexa_u__SWIG_0(self, argc, argv);
    }
  }
  if (argc == 2) {
    int _v = 0;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_std__shared_ptrT_dive__elements__ElementHexa_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_eilig__Vector, SWIG_POINTER_NO_NULL | 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ElementHexa_u__SWIG_1(self, argc, argv);
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'ElementHexa_u'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    dive::elements::ElementHexa::u() const\n"
    "    dive::elements::ElementHexa::u(Vector const &) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ElementHexa_du__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  dive::elements::ElementHexa *arg1 = (dive::elements::ElementHexa *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< dive::elements::ElementHexa const > tempshared1 ;
  std::shared_ptr< dive::elements::ElementHexa const > *smartarg1 = 0 ;
  Matrix result;
  
  (void)self;
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_dive__elements__ElementHexa_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ElementHexa_du" "', argument " "1"" of type '" "dive::elements::ElementHexa const *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const dive::elements::ElementHexa > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const dive::elements::ElementHexa > * >(argp1);
      arg1 = const_cast< dive::elements::ElementHexa * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const dive::elements::ElementHexa > * >(argp1);
      arg1 = const_cast< dive::elements::ElementHexa * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = ((dive::elements::ElementHexa const *)arg1)->du();
  resultobj = SWIG_NewPointerObj((new Matrix(result)), SWIGTYPE_p_eilig__Matrix, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ElementHexa_du__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  dive::elements::ElementHexa *arg1 = (dive::elements::ElementHexa *) 0 ;
  Vector *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< dive::elements::ElementHexa const > tempshared1 ;
  std::shared_ptr< dive::elements::ElementHexa const > *smartarg1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  Matrix result;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_dive__elements__ElementHexa_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ElementHexa_du" "', argument " "1"" of type '" "dive::elements::ElementHexa const *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const dive::elements::ElementHexa > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const dive::elements::ElementHexa > * >(argp1);
      arg1 = const_cast< dive::elements::ElementHexa * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const dive::elements::ElementHexa > * >(argp1);
      arg1 = const_cast< dive::elements::ElementHexa * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_eilig__Vector,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ElementHexa_du" "', argument " "2"" of type '" "Vector const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ElementHexa_du" "', argument " "2"" of type '" "Vector const &""'"); 
  }
  arg2 = reinterpret_cast< Vector * >(argp2);
  result = ((dive::elements::ElementHexa const *)arg1)->du((Vector const &)*arg2);
  resultobj = SWIG_NewPointerObj((new Matrix(result)), SWIGTYPE_p_eilig__Matrix, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ElementHexa_du__SWIG_2(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  dive::elements::ElementHexa *arg1 = (dive::elements::ElementHexa *) 0 ;
  Vector *arg2 = 0 ;
  Dimension *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< dive::elements::ElementHexa const > tempshared1 ;
  std::shared_ptr< dive::elements::ElementHexa const > *smartarg1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  Dimension temp3 ;
  size_t val3 ;
  int ecode3 = 0 ;
  Matrix result;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_dive__elements__ElementHexa_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ElementHexa_du" "', argument " "1"" of type '" "dive::elements::ElementHexa const *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const dive::elements::ElementHexa > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const dive::elements::ElementHexa > * >(argp1);
      arg1 = const_cast< dive::elements::ElementHexa * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const dive::elements::ElementHexa > * >(argp1);
      arg1 = const_cast< dive::elements::ElementHexa * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_eilig__Vector,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ElementHexa_du" "', argument " "2"" of type '" "Vector const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ElementHexa_du" "', argument " "2"" of type '" "Vector const &""'"); 
  }
  arg2 = reinterpret_cast< Vector * >(argp2);
  ecode3 = SWIG_AsVal_size_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ElementHexa_du" "', argument " "3"" of type '" "Dimension""'");
  } 
  temp3 = static_cast< Dimension >(val3);
  arg3 = &temp3;
  result = ((dive::elements::ElementHexa const *)arg1)->du((Vector const &)*arg2,(Dimension const &)*arg3);
  resultobj = SWIG_NewPointerObj((new Matrix(result)), SWIGTYPE_p_eilig__Matrix, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ElementHexa_du(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "ElementHexa_du", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    int _v = 0;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_std__shared_ptrT_dive__elements__ElementHexa_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_ElementHexa_du__SWIG_0(self, argc, argv);
    }
  }
  if (argc == 2) {
    int _v = 0;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_std__shared_ptrT_dive__elements__ElementHexa_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_eilig__Vector, SWIG_POINTER_NO_NULL | 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ElementHexa_du__SWIG_1(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_std__shared_ptrT_dive__elements__ElementHexa_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_eilig__Vector, SWIG_POINTER_NO_NULL | 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_ElementHexa_du__SWIG_2(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'ElementHexa_du'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    dive::elements::ElementHexa::du() const\n"
    "    dive::elements::ElementHexa::du(Vector const &) const\n"
    "    dive::elements::ElementHexa::du(Vector const &,Dimension const &) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ElementHexa_J__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  dive::elements::ElementHexa *arg1 = (dive::elements::ElementHexa *) 0 ;
  Vector *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< dive::elements::ElementHexa const > tempshared1 ;
  std::shared_ptr< dive::elements::ElementHexa const > *smartarg1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  Matrix result;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_dive__elements__ElementHexa_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ElementHexa_J" "', argument " "1"" of type '" "dive::elements::ElementHexa const *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const dive::elements::ElementHexa > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const dive::elements::ElementHexa > * >(argp1);
      arg1 = const_cast< dive::elements::ElementHexa * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const dive::elements::ElementHexa > * >(argp1);
      arg1 = const_cast< dive::elements::ElementHexa * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_eilig__Vector,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ElementHexa_J" "', argument " "2"" of type '" "Vector const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ElementHexa_J" "', argument " "2"" of type '" "Vector const &""'"); 
  }
  arg2 = reinterpret_cast< Vector * >(argp2);
  result = ((dive::elements::ElementHexa const *)arg1)->J((Vector const &)*arg2);
  resultobj = SWIG_NewPointerObj((new Matrix(result)), SWIGTYPE_p_eilig__Matrix, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ElementHexa_InvJ__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  dive::elements::ElementHexa *arg1 = (dive::elements::ElementHexa *) 0 ;
  Vector *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< dive::elements::ElementHexa const > tempshared1 ;
  std::shared_ptr< dive::elements::ElementHexa const > *smartarg1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  Matrix result;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_dive__elements__ElementHexa_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ElementHexa_InvJ" "', argument " "1"" of type '" "dive::elements::ElementHexa const *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const dive::elements::ElementHexa > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const dive::elements::ElementHexa > * >(argp1);
      arg1 = const_cast< dive::elements::ElementHexa * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const dive::elements::ElementHexa > * >(argp1);
      arg1 = const_cast< dive::elements::ElementHexa * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_eilig__Vector,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ElementHexa_InvJ" "', argument " "2"" of type '" "Vector const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ElementHexa_InvJ" "', argument " "2"" of type '" "Vector const &""'"); 
  }
  arg2 = reinterpret_cast< Vector * >(argp2);
  result = ((dive::elements::ElementHexa const *)arg1)->InvJ((Vector const &)*arg2);
  resultobj = SWIG_NewPointerObj((new Matrix(result)), SWIGTYPE_p_eilig__Matrix, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ElementHexa_N__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  dive::elements::ElementHexa *arg1 = (dive::elements::ElementHexa *) 0 ;
  Vector *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< dive::elements::ElementHexa const > tempshared1 ;
  std::shared_ptr< dive::elements::ElementHexa const > *smartarg1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  Matrix result;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_dive__elements__ElementHexa_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ElementHexa_N" "', argument " "1"" of type '" "dive::elements::ElementHexa const *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const dive::elements::ElementHexa > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const dive::elements::ElementHexa > * >(argp1);
      arg1 = const_cast< dive::elements::ElementHexa * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const dive::elements::ElementHexa > * >(argp1);
      arg1 = const_cast< dive::elements::ElementHexa * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_eilig__Vector,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ElementHexa_N" "', argument " "2"" of type '" "Vector const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ElementHexa_N" "', argument " "2"" of type '" "Vector const &""'"); 
  }
  arg2 = reinterpret_cast< Vector * >(argp2);
  result = ((dive::elements::ElementHexa const *)arg1)->N((Vector const &)*arg2);
  resultobj = SWIG_NewPointerObj((new Matrix(result)), SWIGTYPE_p_eilig__Matrix, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ElementHexa_dN__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  dive::elements::ElementHexa *arg1 = (dive::elements::ElementHexa *) 0 ;
  Vector *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< dive::elements::ElementHexa const > tempshared1 ;
  std::shared_ptr< dive::elements::ElementHexa const > *smartarg1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  Matrix result;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_dive__elements__ElementHexa_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ElementHexa_dN" "', argument " "1"" of type '" "dive::elements::ElementHexa const *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const dive::elements::ElementHexa > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const dive::elements::ElementHexa > * >(argp1);
      arg1 = const_cast< dive::elements::ElementHexa * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const dive::elements::ElementHexa > * >(argp1);
      arg1 = const_cast< dive::elements::ElementHexa * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_eilig__Vector,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ElementHexa_dN" "', argument " "2"" of type '" "Vector const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ElementHexa_dN" "', argument " "2"" of type '" "Vector const &""'"); 
  }
  arg2 = reinterpret_cast< Vector * >(argp2);
  result = ((dive::elements::ElementHexa const *)arg1)->dN((Vector const &)*arg2);
  resultobj = SWIG_NewPointerObj((new Matrix(result)), SWIGTYPE_p_eilig__Matrix, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ElementHexa_J__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  dive::elements::ElementHexa *arg1 = (dive::elements::ElementHexa *) 0 ;
  Vector *arg2 = 0 ;
  CacheIndex arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< dive::elements::ElementHexa const > tempshared1 ;
  std::shared_ptr< dive::elements::ElementHexa const > *smartarg1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  Matrix *result = 0 ;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_dive__elements__ElementHexa_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ElementHexa_J" "', argument " "1"" of type '" "dive::elements::ElementHexa const *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const dive::elements::ElementHexa > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const dive::elements::ElementHexa > * >(argp1);
      arg1 = const_cast< dive::elements::ElementHexa * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const dive::elements::ElementHexa > * >(argp1);
      arg1 = const_cast< dive::elements::ElementHexa * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_eilig__Vector,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ElementHexa_J" "', argument " "2"" of type '" "Vector const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ElementHexa_J" "', argument " "2"" of type '" "Vector const &""'"); 
  }
  arg2 = reinterpret_cast< Vector * >(argp2);
  ecode3 = SWIG_AsVal_size_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ElementHexa_J" "', argument " "3"" of type '" "CacheIndex""'");
  } 
  arg3 = static_cast< CacheIndex >(val3);
  result = (Matrix *) &((dive::elements::ElementHexa const *)arg1)->J((Vector const &)*arg2,arg3);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_eilig__Matrix, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ElementHexa_J(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "ElementHexa_J", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_std__shared_ptrT_dive__elements__ElementHexa_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_eilig__Vector, SWIG_POINTER_NO_NULL | 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ElementHexa_J__SWIG_0(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_std__shared_ptrT_dive__elements__ElementHexa_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_eilig__Vector, SWIG_POINTER_NO_NULL | 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_ElementHexa_J__SWIG_1(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'ElementHexa_J'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    dive::elements::ElementHexa::J(Vector const &) const\n"
    "    dive::elements::ElementHexa::J(Vector const &,CacheIndex) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ElementHexa_InvJ__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  dive::elements::ElementHexa *arg1 = (dive::elements::ElementHexa *) 0 ;
  Vector *arg2 = 0 ;
  CacheIndex arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< dive::elements::ElementHexa const > tempshared1 ;
  std::shared_ptr< dive::elements::ElementHexa const > *smartarg1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  Matrix *result = 0 ;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_dive__elements__ElementHexa_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ElementHexa_InvJ" "', argument " "1"" of type '" "dive::elements::ElementHexa const *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const dive::elements::ElementHexa > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const dive::elements::ElementHexa > * >(argp1);
      arg1 = const_cast< dive::elements::ElementHexa * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const dive::elements::ElementHexa > * >(argp1);
      arg1 = const_cast< dive::elements::ElementHexa * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_eilig__Vector,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ElementHexa_InvJ" "', argument " "2"" of type '" "Vector const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ElementHexa_InvJ" "', argument " "2"" of type '" "Vector const &""'"); 
  }
  arg2 = reinterpret_cast< Vector * >(argp2);
  ecode3 = SWIG_AsVal_size_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ElementHexa_InvJ" "', argument " "3"" of type '" "CacheIndex""'");
  } 
  arg3 = static_cast< CacheIndex >(val3);
  result = (Matrix *) &((dive::elements::ElementHexa const *)arg1)->InvJ((Vector const &)*arg2,arg3);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_eilig__Matrix, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ElementHexa_InvJ(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "ElementHexa_InvJ", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_std__shared_ptrT_dive__elements__ElementHexa_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_eilig__Vector, SWIG_POINTER_NO_NULL | 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ElementHexa_InvJ__SWIG_0(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_std__shared_ptrT_dive__elements__ElementHexa_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_eilig__Vector, SWIG_POINTER_NO_NULL | 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_ElementHexa_InvJ__SWIG_1(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'ElementHexa_InvJ'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    dive::elements::ElementHexa::InvJ(Vector const &) const\n"
    "    dive::elements::ElementHexa::InvJ(Vector const &,CacheIndex) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ElementHexa_N__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  dive::elements::ElementHexa *arg1 = (dive::elements::ElementHexa *) 0 ;
  Vector *arg2 = 0 ;
  CacheIndex arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< dive::elements::ElementHexa const > tempshared1 ;
  std::shared_ptr< dive::elements::ElementHexa const > *smartarg1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  Matrix *result = 0 ;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_dive__elements__ElementHexa_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ElementHexa_N" "', argument " "1"" of type '" "dive::elements::ElementHexa const *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const dive::elements::ElementHexa > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const dive::elements::ElementHexa > * >(argp1);
      arg1 = const_cast< dive::elements::ElementHexa * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const dive::elements::ElementHexa > * >(argp1);
      arg1 = const_cast< dive::elements::ElementHexa * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_eilig__Vector,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ElementHexa_N" "', argument " "2"" of type '" "Vector const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ElementHexa_N" "', argument " "2"" of type '" "Vector const &""'"); 
  }
  arg2 = reinterpret_cast< Vector * >(argp2);
  ecode3 = SWIG_AsVal_size_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ElementHexa_N" "', argument " "3"" of type '" "CacheIndex""'");
  } 
  arg3 = static_cast< CacheIndex >(val3);
  result = (Matrix *) &((dive::elements::ElementHexa const *)arg1)->N((Vector const &)*arg2,arg3);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_eilig__Matrix, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ElementHexa_N(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "ElementHexa_N", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_std__shared_ptrT_dive__elements__ElementHexa_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_eilig__Vector, SWIG_POINTER_NO_NULL | 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ElementHexa_N__SWIG_0(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_std__shared_ptrT_dive__elements__ElementHexa_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_eilig__Vector, SWIG_POINTER_NO_NULL | 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_ElementHexa_N__SWIG_1(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'ElementHexa_N'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    dive::elements::ElementHexa::N(Vector const &) const\n"
    "    dive::elements::ElementHexa::N(Vector const &,CacheIndex) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ElementHexa_dN__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  dive::elements::ElementHexa *arg1 = (dive::elements::ElementHexa *) 0 ;
  Vector *arg2 = 0 ;
  CacheIndex arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< dive::elements::ElementHexa const > tempshared1 ;
  std::shared_ptr< dive::elements::ElementHexa const > *smartarg1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  Matrix *result = 0 ;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_dive__elements__ElementHexa_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ElementHexa_dN" "', argument " "1"" of type '" "dive::elements::ElementHexa const *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const dive::elements::ElementHexa > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const dive::elements::ElementHexa > * >(argp1);
      arg1 = const_cast< dive::elements::ElementHexa * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const dive::elements::ElementHexa > * >(argp1);
      arg1 = const_cast< dive::elements::ElementHexa * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_eilig__Vector,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ElementHexa_dN" "', argument " "2"" of type '" "Vector const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ElementHexa_dN" "', argument " "2"" of type '" "Vector const &""'"); 
  }
  arg2 = reinterpret_cast< Vector * >(argp2);
  ecode3 = SWIG_AsVal_size_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ElementHexa_dN" "', argument " "3"" of type '" "CacheIndex""'");
  } 
  arg3 = static_cast< CacheIndex >(val3);
  result = (Matrix *) &((dive::elements::ElementHexa const *)arg1)->dN((Vector const &)*arg2,arg3);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_eilig__Matrix, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ElementHexa_dN(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "ElementHexa_dN", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_std__shared_ptrT_dive__elements__ElementHexa_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_eilig__Vector, SWIG_POINTER_NO_NULL | 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ElementHexa_dN__SWIG_0(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_std__shared_ptrT_dive__elements__ElementHexa_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_eilig__Vector, SWIG_POINTER_NO_NULL | 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_ElementHexa_dN__SWIG_1(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'ElementHexa_dN'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    dive::elements::ElementHexa::dN(Vector const &) const\n"
    "    dive::elements::ElementHexa::dN(Vector const &,CacheIndex) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ElementHexa_DetJ__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  dive::elements::ElementHexa *arg1 = (dive::elements::ElementHexa *) 0 ;
  Vector *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< dive::elements::ElementHexa const > tempshared1 ;
  std::shared_ptr< dive::elements::ElementHexa const > *smartarg1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  Scalar result;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_dive__elements__ElementHexa_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ElementHexa_DetJ" "', argument " "1"" of type '" "dive::elements::ElementHexa const *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const dive::elements::ElementHexa > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const dive::elements::ElementHexa > * >(argp1);
      arg1 = const_cast< dive::elements::ElementHexa * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const dive::elements::ElementHexa > * >(argp1);
      arg1 = const_cast< dive::elements::ElementHexa * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_eilig__Vector,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ElementHexa_DetJ" "', argument " "2"" of type '" "Vector const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ElementHexa_DetJ" "', argument " "2"" of type '" "Vector const &""'"); 
  }
  arg2 = reinterpret_cast< Vector * >(argp2);
  result = (Scalar)((dive::elements::ElementHexa const *)arg1)->DetJ((Vector const &)*arg2);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ElementHexa_DelA(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  dive::elements::ElementHexa *arg1 = (dive::elements::ElementHexa *) 0 ;
  Vector *arg2 = 0 ;
  Dimension *arg3 = 0 ;
  Dimension *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< dive::elements::ElementHexa const > tempshared1 ;
  std::shared_ptr< dive::elements::ElementHexa const > *smartarg1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  Dimension temp3 ;
  size_t val3 ;
  int ecode3 = 0 ;
  Dimension temp4 ;
  size_t val4 ;
  int ecode4 = 0 ;
  PyObject *swig_obj[4] ;
  Scalar result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "ElementHexa_DelA", 4, 4, swig_obj)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_dive__elements__ElementHexa_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ElementHexa_DelA" "', argument " "1"" of type '" "dive::elements::ElementHexa const *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const dive::elements::ElementHexa > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const dive::elements::ElementHexa > * >(argp1);
      arg1 = const_cast< dive::elements::ElementHexa * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const dive::elements::ElementHexa > * >(argp1);
      arg1 = const_cast< dive::elements::ElementHexa * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_eilig__Vector,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ElementHexa_DelA" "', argument " "2"" of type '" "Vector const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ElementHexa_DelA" "', argument " "2"" of type '" "Vector const &""'"); 
  }
  arg2 = reinterpret_cast< Vector * >(argp2);
  ecode3 = SWIG_AsVal_size_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ElementHexa_DelA" "', argument " "3"" of type '" "Dimension""'");
  } 
  temp3 = static_cast< Dimension >(val3);
  arg3 = &temp3;
  ecode4 = SWIG_AsVal_size_t(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "ElementHexa_DelA" "', argument " "4"" of type '" "Dimension""'");
  } 
  temp4 = static_cast< Dimension >(val4);
  arg4 = &temp4;
  result = (Scalar)((dive::elements::ElementHexa const *)arg1)->DelA((Vector const &)*arg2,(Dimension const &)*arg3,(Dimension const &)*arg4);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ElementHexa_DelL(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  dive::elements::ElementHexa *arg1 = (dive::elements::ElementHexa *) 0 ;
  Vector *arg2 = 0 ;
  Dimension *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< dive::elements::ElementHexa const > tempshared1 ;
  std::shared_ptr< dive::elements::ElementHexa const > *smartarg1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  Dimension temp3 ;
  size_t val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  Scalar result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "ElementHexa_DelL", 3, 3, swig_obj)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_dive__elements__ElementHexa_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ElementHexa_DelL" "', argument " "1"" of type '" "dive::elements::ElementHexa const *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const dive::elements::ElementHexa > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const dive::elements::ElementHexa > * >(argp1);
      arg1 = const_cast< dive::elements::ElementHexa * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const dive::elements::ElementHexa > * >(argp1);
      arg1 = const_cast< dive::elements::ElementHexa * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_eilig__Vector,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ElementHexa_DelL" "', argument " "2"" of type '" "Vector const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ElementHexa_DelL" "', argument " "2"" of type '" "Vector const &""'"); 
  }
  arg2 = reinterpret_cast< Vector * >(argp2);
  ecode3 = SWIG_AsVal_size_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ElementHexa_DelL" "', argument " "3"" of type '" "Dimension""'");
  } 
  temp3 = static_cast< Dimension >(val3);
  arg3 = &temp3;
  result = (Scalar)((dive::elements::ElementHexa const *)arg1)->DelL((Vector const &)*arg2,(Dimension const &)*arg3);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ElementHexa_DetJ__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  dive::elements::ElementHexa *arg1 = (dive::elements::ElementHexa *) 0 ;
  Vector *arg2 = 0 ;
  CacheIndex arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< dive::elements::ElementHexa const > tempshared1 ;
  std::shared_ptr< dive::elements::ElementHexa const > *smartarg1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  Scalar result;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_dive__elements__ElementHexa_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ElementHexa_DetJ" "', argument " "1"" of type '" "dive::elements::ElementHexa const *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const dive::elements::ElementHexa > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const dive::elements::ElementHexa > * >(argp1);
      arg1 = const_cast< dive::elements::ElementHexa * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const dive::elements::ElementHexa > * >(argp1);
      arg1 = const_cast< dive::elements::ElementHexa * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_eilig__Vector,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ElementHexa_DetJ" "', argument " "2"" of type '" "Vector const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ElementHexa_DetJ" "', argument " "2"" of type '" "Vector const &""'"); 
  }
  arg2 = reinterpret_cast< Vector * >(argp2);
  ecode3 = SWIG_AsVal_size_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ElementHexa_DetJ" "', argument " "3"" of type '" "CacheIndex""'");
  } 
  arg3 = static_cast< CacheIndex >(val3);
  result = (Scalar)((dive::elements::ElementHexa const *)arg1)->DetJ((Vector const &)*arg2,arg3);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ElementHexa_DetJ(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "ElementHexa_DetJ", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_std__shared_ptrT_dive__elements__ElementHexa_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_eilig__Vector, SWIG_POINTER_NO_NULL | 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ElementHexa_DetJ__SWIG_0(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_std__shared_ptrT_dive__elements__ElementHexa_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_eilig__Vector, SWIG_POINTER_NO_NULL | 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_ElementHexa_DetJ__SWIG_1(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'ElementHexa_DetJ'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    dive::elements::ElementHexa::DetJ(Vector const &) const\n"
    "    dive::elements::ElementHexa::DetJ(Vector const &,CacheIndex) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ElementHexa_Volume(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  dive::elements::ElementHexa *arg1 = (dive::elements::ElementHexa *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< dive::elements::ElementHexa const > tempshared1 ;
  std::shared_ptr< dive::elements::ElementHexa const > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  Scalar result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_dive__elements__ElementHexa_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ElementHexa_Volume" "', argument " "1"" of type '" "dive::elements::ElementHexa const *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const dive::elements::ElementHexa > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const dive::elements::ElementHexa > * >(argp1);
      arg1 = const_cast< dive::elements::ElementHexa * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const dive::elements::ElementHexa > * >(argp1);
      arg1 = const_cast< dive::elements::ElementHexa * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = (Scalar)((dive::elements::ElementHexa const *)arg1)->Volume();
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ElementHexa_Area(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  dive::elements::ElementHexa *arg1 = (dive::elements::ElementHexa *) 0 ;
  FaceIndex *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< dive::elements::ElementHexa const > tempshared1 ;
  std::shared_ptr< dive::elements::ElementHexa const > *smartarg1 = 0 ;
  FaceIndex temp2 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  Scalar result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "ElementHexa_Area", 2, 2, swig_obj)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_dive__elements__ElementHexa_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ElementHexa_Area" "', argument " "1"" of type '" "dive::elements::ElementHexa const *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const dive::elements::ElementHexa > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const dive::elements::ElementHexa > * >(argp1);
      arg1 = const_cast< dive::elements::ElementHexa * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const dive::elements::ElementHexa > * >(argp1);
      arg1 = const_cast< dive::elements::ElementHexa * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ElementHexa_Area" "', argument " "2"" of type '" "FaceIndex""'");
  } 
  temp2 = static_cast< FaceIndex >(val2);
  arg2 = &temp2;
  result = (Scalar)((dive::elements::ElementHexa const *)arg1)->Area((FaceIndex const &)*arg2);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ElementHexa_Length(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  dive::elements::ElementHexa *arg1 = (dive::elements::ElementHexa *) 0 ;
  EdgeIndex *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< dive::elements::ElementHexa const > tempshared1 ;
  std::shared_ptr< dive::elements::ElementHexa const > *smartarg1 = 0 ;
  EdgeIndex temp2 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  Scalar result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "ElementHexa_Length", 2, 2, swig_obj)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_dive__elements__ElementHexa_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ElementHexa_Length" "', argument " "1"" of type '" "dive::elements::ElementHexa const *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const dive::elements::ElementHexa > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const dive::elements::ElementHexa > * >(argp1);
      arg1 = const_cast< dive::elements::ElementHexa * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const dive::elements::ElementHexa > * >(argp1);
      arg1 = const_cast< dive::elements::ElementHexa * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ElementHexa_Length" "', argument " "2"" of type '" "EdgeIndex""'");
  } 
  temp2 = static_cast< EdgeIndex >(val2);
  arg2 = &temp2;
  result = (Scalar)((dive::elements::ElementHexa const *)arg1)->Length((EdgeIndex const &)*arg2);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ElementHexa_CalculateHeight(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  dive::elements::ElementHexa *arg1 = (dive::elements::ElementHexa *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< dive::elements::ElementHexa > tempshared1 ;
  std::shared_ptr< dive::elements::ElementHexa > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  Scalar result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_dive__elements__ElementHexa_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ElementHexa_CalculateHeight" "', argument " "1"" of type '" "dive::elements::ElementHexa *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  dive::elements::ElementHexa > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  dive::elements::ElementHexa > * >(argp1);
      arg1 = const_cast< dive::elements::ElementHexa * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  dive::elements::ElementHexa > * >(argp1);
      arg1 = const_cast< dive::elements::ElementHexa * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = (Scalar)(arg1)->CalculateHeight();
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ElementHexa_LocalCoordinates__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  dive::elements::ElementHexa *arg1 = (dive::elements::ElementHexa *) 0 ;
  INodePtr arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< dive::elements::ElementHexa const > tempshared1 ;
  std::shared_ptr< dive::elements::ElementHexa const > *smartarg1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  Vector result;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_dive__elements__ElementHexa_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ElementHexa_LocalCoordinates" "', argument " "1"" of type '" "dive::elements::ElementHexa const *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const dive::elements::ElementHexa > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const dive::elements::ElementHexa > * >(argp1);
      arg1 = const_cast< dive::elements::ElementHexa * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const dive::elements::ElementHexa > * >(argp1);
      arg1 = const_cast< dive::elements::ElementHexa * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    int newmem = 0;
    res2 = SWIG_ConvertPtrAndOwn(swig_obj[1], &argp2, SWIGTYPE_p_std__shared_ptrT_nodes__INode_t,  0 , &newmem);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ElementHexa_LocalCoordinates" "', argument " "2"" of type '" "INodePtr""'");
    }
    if (argp2) arg2 = *(reinterpret_cast< INodePtr * >(argp2));
    if (newmem & SWIG_CAST_NEW_MEMORY) delete reinterpret_cast< INodePtr * >(argp2);
  }
  result = ((dive::elements::ElementHexa const *)arg1)->LocalCoordinates(arg2);
  resultobj = SWIG_NewPointerObj((new Vector(result)), SWIGTYPE_p_eilig__Vector, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ElementHexa_LocalCoordinates__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  dive::elements::ElementHexa *arg1 = (dive::elements::ElementHexa *) 0 ;
  NodeIndex *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< dive::elements::ElementHexa const > tempshared1 ;
  std::shared_ptr< dive::elements::ElementHexa const > *smartarg1 = 0 ;
  NodeIndex temp2 ;
  size_t val2 ;
  int ecode2 = 0 ;
  Vector result;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_dive__elements__ElementHexa_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ElementHexa_LocalCoordinates" "', argument " "1"" of type '" "dive::elements::ElementHexa const *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const dive::elements::ElementHexa > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const dive::elements::ElementHexa > * >(argp1);
      arg1 = const_cast< dive::elements::ElementHexa * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const dive::elements::ElementHexa > * >(argp1);
      arg1 = const_cast< dive::elements::ElementHexa * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ElementHexa_LocalCoordinates" "', argument " "2"" of type '" "NodeIndex""'");
  } 
  temp2 = static_cast< NodeIndex >(val2);
  arg2 = &temp2;
  result = ((dive::elements::ElementHexa const *)arg1)->LocalCoordinates((NodeIndex const &)*arg2);
  resultobj = SWIG_NewPointerObj((new Vector(result)), SWIGTYPE_p_eilig__Vector, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ElementHexa_LocalCoordinates(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "ElementHexa_LocalCoordinates", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_std__shared_ptrT_dive__elements__ElementHexa_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_std__shared_ptrT_nodes__INode_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ElementHexa_LocalCoordinates__SWIG_0(self, argc, argv);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_std__shared_ptrT_dive__elements__ElementHexa_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_ElementHexa_LocalCoordinates__SWIG_1(self, argc, argv);
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'ElementHexa_LocalCoordinates'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    dive::elements::ElementHexa::LocalCoordinates(INodePtr) const\n"
    "    dive::elements::ElementHexa::LocalCoordinates(NodeIndex const &) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ElementHexa_GlobalCoordinates__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  dive::elements::ElementHexa *arg1 = (dive::elements::ElementHexa *) 0 ;
  INodePtr arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< dive::elements::ElementHexa const > tempshared1 ;
  std::shared_ptr< dive::elements::ElementHexa const > *smartarg1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  Vector result;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_dive__elements__ElementHexa_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ElementHexa_GlobalCoordinates" "', argument " "1"" of type '" "dive::elements::ElementHexa const *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const dive::elements::ElementHexa > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const dive::elements::ElementHexa > * >(argp1);
      arg1 = const_cast< dive::elements::ElementHexa * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const dive::elements::ElementHexa > * >(argp1);
      arg1 = const_cast< dive::elements::ElementHexa * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    int newmem = 0;
    res2 = SWIG_ConvertPtrAndOwn(swig_obj[1], &argp2, SWIGTYPE_p_std__shared_ptrT_nodes__INode_t,  0 , &newmem);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ElementHexa_GlobalCoordinates" "', argument " "2"" of type '" "INodePtr""'");
    }
    if (argp2) arg2 = *(reinterpret_cast< INodePtr * >(argp2));
    if (newmem & SWIG_CAST_NEW_MEMORY) delete reinterpret_cast< INodePtr * >(argp2);
  }
  result = ((dive::elements::ElementHexa const *)arg1)->GlobalCoordinates(arg2);
  resultobj = SWIG_NewPointerObj((new Vector(result)), SWIGTYPE_p_eilig__Vector, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ElementHexa_GlobalCoordinates__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  dive::elements::ElementHexa *arg1 = (dive::elements::ElementHexa *) 0 ;
  NodeIndex *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< dive::elements::ElementHexa const > tempshared1 ;
  std::shared_ptr< dive::elements::ElementHexa const > *smartarg1 = 0 ;
  NodeIndex temp2 ;
  size_t val2 ;
  int ecode2 = 0 ;
  Vector result;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_dive__elements__ElementHexa_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ElementHexa_GlobalCoordinates" "', argument " "1"" of type '" "dive::elements::ElementHexa const *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const dive::elements::ElementHexa > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const dive::elements::ElementHexa > * >(argp1);
      arg1 = const_cast< dive::elements::ElementHexa * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const dive::elements::ElementHexa > * >(argp1);
      arg1 = const_cast< dive::elements::ElementHexa * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ElementHexa_GlobalCoordinates" "', argument " "2"" of type '" "NodeIndex""'");
  } 
  temp2 = static_cast< NodeIndex >(val2);
  arg2 = &temp2;
  result = ((dive::elements::ElementHexa const *)arg1)->GlobalCoordinates((NodeIndex const &)*arg2);
  resultobj = SWIG_NewPointerObj((new Vector(result)), SWIGTYPE_p_eilig__Vector, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ElementHexa_GlobalCoordinates__SWIG_2(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  dive::elements::ElementHexa *arg1 = (dive::elements::ElementHexa *) 0 ;
  Vector *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< dive::elements::ElementHexa const > tempshared1 ;
  std::shared_ptr< dive::elements::ElementHexa const > *smartarg1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  Vector result;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_dive__elements__ElementHexa_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ElementHexa_GlobalCoordinates" "', argument " "1"" of type '" "dive::elements::ElementHexa const *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const dive::elements::ElementHexa > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const dive::elements::ElementHexa > * >(argp1);
      arg1 = const_cast< dive::elements::ElementHexa * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const dive::elements::ElementHexa > * >(argp1);
      arg1 = const_cast< dive::elements::ElementHexa * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_eilig__Vector,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ElementHexa_GlobalCoordinates" "', argument " "2"" of type '" "Vector const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ElementHexa_GlobalCoordinates" "', argument " "2"" of type '" "Vector const &""'"); 
  }
  arg2 = reinterpret_cast< Vector * >(argp2);
  result = ((dive::elements::ElementHexa const *)arg1)->GlobalCoordinates((Vector const &)*arg2);
  resultobj = SWIG_NewPointerObj((new Vector(result)), SWIGTYPE_p_eilig__Vector, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ElementHexa_GlobalCoordinates(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "ElementHexa_GlobalCoordinates", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_std__shared_ptrT_dive__elements__ElementHexa_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_std__shared_ptrT_nodes__INode_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ElementHexa_GlobalCoordinates__SWIG_0(self, argc, argv);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_std__shared_ptrT_dive__elements__ElementHexa_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_eilig__Vector, SWIG_POINTER_NO_NULL | 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ElementHexa_GlobalCoordinates__SWIG_2(self, argc, argv);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_std__shared_ptrT_dive__elements__ElementHexa_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_ElementHexa_GlobalCoordinates__SWIG_1(self, argc, argv);
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'ElementHexa_GlobalCoordinates'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    dive::elements::ElementHexa::GlobalCoordinates(INodePtr) const\n"
    "    dive::elements::ElementHexa::GlobalCoordinates(NodeIndex const &) const\n"
    "    dive::elements::ElementHexa::GlobalCoordinates(Vector const &) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ElementHexa_GlobalDerivatives(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  dive::elements::ElementHexa *arg1 = (dive::elements::ElementHexa *) 0 ;
  Vector *arg2 = 0 ;
  Dimension *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< dive::elements::ElementHexa const > tempshared1 ;
  std::shared_ptr< dive::elements::ElementHexa const > *smartarg1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  Dimension temp3 ;
  size_t val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  Vector result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "ElementHexa_GlobalDerivatives", 3, 3, swig_obj)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_dive__elements__ElementHexa_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ElementHexa_GlobalDerivatives" "', argument " "1"" of type '" "dive::elements::ElementHexa const *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const dive::elements::ElementHexa > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const dive::elements::ElementHexa > * >(argp1);
      arg1 = const_cast< dive::elements::ElementHexa * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const dive::elements::ElementHexa > * >(argp1);
      arg1 = const_cast< dive::elements::ElementHexa * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_eilig__Vector,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ElementHexa_GlobalDerivatives" "', argument " "2"" of type '" "Vector const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ElementHexa_GlobalDerivatives" "', argument " "2"" of type '" "Vector const &""'"); 
  }
  arg2 = reinterpret_cast< Vector * >(argp2);
  ecode3 = SWIG_AsVal_size_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ElementHexa_GlobalDerivatives" "', argument " "3"" of type '" "Dimension""'");
  } 
  temp3 = static_cast< Dimension >(val3);
  arg3 = &temp3;
  result = ((dive::elements::ElementHexa const *)arg1)->GlobalDerivatives((Vector const &)*arg2,(Dimension const &)*arg3);
  resultobj = SWIG_NewPointerObj((new Vector(result)), SWIGTYPE_p_eilig__Vector, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ElementHexa_GetNodeFace(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  dive::elements::ElementHexa *arg1 = (dive::elements::ElementHexa *) 0 ;
  FaceIndex *arg2 = 0 ;
  NodeIndex *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< dive::elements::ElementHexa const > tempshared1 ;
  std::shared_ptr< dive::elements::ElementHexa const > *smartarg1 = 0 ;
  FaceIndex temp2 ;
  size_t val2 ;
  int ecode2 = 0 ;
  NodeIndex temp3 ;
  size_t val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  INodePtr result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "ElementHexa_GetNodeFace", 3, 3, swig_obj)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_dive__elements__ElementHexa_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ElementHexa_GetNodeFace" "', argument " "1"" of type '" "dive::elements::ElementHexa const *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const dive::elements::ElementHexa > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const dive::elements::ElementHexa > * >(argp1);
      arg1 = const_cast< dive::elements::ElementHexa * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const dive::elements::ElementHexa > * >(argp1);
      arg1 = const_cast< dive::elements::ElementHexa * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ElementHexa_GetNodeFace" "', argument " "2"" of type '" "FaceIndex""'");
  } 
  temp2 = static_cast< FaceIndex >(val2);
  arg2 = &temp2;
  ecode3 = SWIG_AsVal_size_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ElementHexa_GetNodeFace" "', argument " "3"" of type '" "NodeIndex""'");
  } 
  temp3 = static_cast< NodeIndex >(val3);
  arg3 = &temp3;
  result = ((dive::elements::ElementHexa const *)arg1)->GetNodeFace((FaceIndex const &)*arg2,(NodeIndex const &)*arg3);
  {
    std::shared_ptr<  nodes::INode > *smartresult = result ? new std::shared_ptr<  nodes::INode >(result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_std__shared_ptrT_nodes__INode_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ElementHexa_GetNodeEdge(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  dive::elements::ElementHexa *arg1 = (dive::elements::ElementHexa *) 0 ;
  EdgeIndex *arg2 = 0 ;
  NodeIndex *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< dive::elements::ElementHexa const > tempshared1 ;
  std::shared_ptr< dive::elements::ElementHexa const > *smartarg1 = 0 ;
  EdgeIndex temp2 ;
  size_t val2 ;
  int ecode2 = 0 ;
  NodeIndex temp3 ;
  size_t val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  INodePtr result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "ElementHexa_GetNodeEdge", 3, 3, swig_obj)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_dive__elements__ElementHexa_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ElementHexa_GetNodeEdge" "', argument " "1"" of type '" "dive::elements::ElementHexa const *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const dive::elements::ElementHexa > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const dive::elements::ElementHexa > * >(argp1);
      arg1 = const_cast< dive::elements::ElementHexa * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const dive::elements::ElementHexa > * >(argp1);
      arg1 = const_cast< dive::elements::ElementHexa * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ElementHexa_GetNodeEdge" "', argument " "2"" of type '" "EdgeIndex""'");
  } 
  temp2 = static_cast< EdgeIndex >(val2);
  arg2 = &temp2;
  ecode3 = SWIG_AsVal_size_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ElementHexa_GetNodeEdge" "', argument " "3"" of type '" "NodeIndex""'");
  } 
  temp3 = static_cast< NodeIndex >(val3);
  arg3 = &temp3;
  result = ((dive::elements::ElementHexa const *)arg1)->GetNodeEdge((EdgeIndex const &)*arg2,(NodeIndex const &)*arg3);
  {
    std::shared_ptr<  nodes::INode > *smartresult = result ? new std::shared_ptr<  nodes::INode >(result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_std__shared_ptrT_nodes__INode_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ElementHexa_GetNode(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  dive::elements::ElementHexa *arg1 = (dive::elements::ElementHexa *) 0 ;
  NodeIndex *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< dive::elements::ElementHexa const > tempshared1 ;
  std::shared_ptr< dive::elements::ElementHexa const > *smartarg1 = 0 ;
  NodeIndex temp2 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  INodePtr result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "ElementHexa_GetNode", 2, 2, swig_obj)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_dive__elements__ElementHexa_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ElementHexa_GetNode" "', argument " "1"" of type '" "dive::elements::ElementHexa const *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const dive::elements::ElementHexa > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const dive::elements::ElementHexa > * >(argp1);
      arg1 = const_cast< dive::elements::ElementHexa * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const dive::elements::ElementHexa > * >(argp1);
      arg1 = const_cast< dive::elements::ElementHexa * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ElementHexa_GetNode" "', argument " "2"" of type '" "NodeIndex""'");
  } 
  temp2 = static_cast< NodeIndex >(val2);
  arg2 = &temp2;
  result = ((dive::elements::ElementHexa const *)arg1)->GetNode((NodeIndex const &)*arg2);
  {
    std::shared_ptr<  nodes::INode > *smartresult = result ? new std::shared_ptr<  nodes::INode >(result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_std__shared_ptrT_nodes__INode_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ElementHexa_GetNodes(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  dive::elements::ElementHexa *arg1 = (dive::elements::ElementHexa *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< dive::elements::ElementHexa const > tempshared1 ;
  std::shared_ptr< dive::elements::ElementHexa const > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  Nodes *result = 0 ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_dive__elements__ElementHexa_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ElementHexa_GetNodes" "', argument " "1"" of type '" "dive::elements::ElementHexa const *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const dive::elements::ElementHexa > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const dive::elements::ElementHexa > * >(argp1);
      arg1 = const_cast< dive::elements::ElementHexa * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const dive::elements::ElementHexa > * >(argp1);
      arg1 = const_cast< dive::elements::ElementHexa * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = (Nodes *) &((dive::elements::ElementHexa const *)arg1)->GetNodes();
  resultobj = swig::from(static_cast< std::vector< std::shared_ptr< nodes::INode >,std::allocator< std::shared_ptr< nodes::INode > > > >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ElementHexa_GetOrder(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  dive::elements::ElementHexa *arg1 = (dive::elements::ElementHexa *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< dive::elements::ElementHexa const > tempshared1 ;
  std::shared_ptr< dive::elements::ElementHexa const > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  dive::elements::Order result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_dive__elements__ElementHexa_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ElementHexa_GetOrder" "', argument " "1"" of type '" "dive::elements::ElementHexa const *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const dive::elements::ElementHexa > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const dive::elements::ElementHexa > * >(argp1);
      arg1 = const_cast< dive::elements::ElementHexa * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const dive::elements::ElementHexa > * >(argp1);
      arg1 = const_cast< dive::elements::ElementHexa * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = ((dive::elements::ElementHexa const *)arg1)->GetOrder();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ElementHexa_GetParametric(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  dive::elements::ElementHexa *arg1 = (dive::elements::ElementHexa *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< dive::elements::ElementHexa const > tempshared1 ;
  std::shared_ptr< dive::elements::ElementHexa const > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  dive::elements::Parametric result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_dive__elements__ElementHexa_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ElementHexa_GetParametric" "', argument " "1"" of type '" "dive::elements::ElementHexa const *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const dive::elements::ElementHexa > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const dive::elements::ElementHexa > * >(argp1);
      arg1 = const_cast< dive::elements::ElementHexa * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const dive::elements::ElementHexa > * >(argp1);
      arg1 = const_cast< dive::elements::ElementHexa * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = ((dive::elements::ElementHexa const *)arg1)->GetParametric();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ElementHexa_GetType(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  dive::elements::ElementHexa *arg1 = (dive::elements::ElementHexa *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< dive::elements::ElementHexa const > tempshared1 ;
  std::shared_ptr< dive::elements::ElementHexa const > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  Type result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_dive__elements__ElementHexa_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ElementHexa_GetType" "', argument " "1"" of type '" "dive::elements::ElementHexa const *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const dive::elements::ElementHexa > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const dive::elements::ElementHexa > * >(argp1);
      arg1 = const_cast< dive::elements::ElementHexa * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const dive::elements::ElementHexa > * >(argp1);
      arg1 = const_cast< dive::elements::ElementHexa * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = ((dive::elements::ElementHexa const *)arg1)->GetType();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ElementHexa_GetNodeIndex(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  dive::elements::ElementHexa *arg1 = (dive::elements::ElementHexa *) 0 ;
  INodePtr arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< dive::elements::ElementHexa const > tempshared1 ;
  std::shared_ptr< dive::elements::ElementHexa const > *smartarg1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  NodeIndex result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "ElementHexa_GetNodeIndex", 2, 2, swig_obj)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_dive__elements__ElementHexa_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ElementHexa_GetNodeIndex" "', argument " "1"" of type '" "dive::elements::ElementHexa const *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const dive::elements::ElementHexa > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const dive::elements::ElementHexa > * >(argp1);
      arg1 = const_cast< dive::elements::ElementHexa * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const dive::elements::ElementHexa > * >(argp1);
      arg1 = const_cast< dive::elements::ElementHexa * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    int newmem = 0;
    res2 = SWIG_ConvertPtrAndOwn(swig_obj[1], &argp2, SWIGTYPE_p_std__shared_ptrT_nodes__INode_t,  0 , &newmem);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ElementHexa_GetNodeIndex" "', argument " "2"" of type '" "INodePtr""'");
    }
    if (argp2) arg2 = *(reinterpret_cast< INodePtr * >(argp2));
    if (newmem & SWIG_CAST_NEW_MEMORY) delete reinterpret_cast< INodePtr * >(argp2);
  }
  result = ((dive::elements::ElementHexa const *)arg1)->GetNodeIndex(arg2);
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ElementHexa_GetNumberNodesFace(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  dive::elements::ElementHexa *arg1 = (dive::elements::ElementHexa *) 0 ;
  FaceIndex *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< dive::elements::ElementHexa const > tempshared1 ;
  std::shared_ptr< dive::elements::ElementHexa const > *smartarg1 = 0 ;
  FaceIndex temp2 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  NumberNodes result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "ElementHexa_GetNumberNodesFace", 2, 2, swig_obj)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_dive__elements__ElementHexa_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ElementHexa_GetNumberNodesFace" "', argument " "1"" of type '" "dive::elements::ElementHexa const *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const dive::elements::ElementHexa > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const dive::elements::ElementHexa > * >(argp1);
      arg1 = const_cast< dive::elements::ElementHexa * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const dive::elements::ElementHexa > * >(argp1);
      arg1 = const_cast< dive::elements::ElementHexa * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ElementHexa_GetNumberNodesFace" "', argument " "2"" of type '" "FaceIndex""'");
  } 
  temp2 = static_cast< FaceIndex >(val2);
  arg2 = &temp2;
  result = ((dive::elements::ElementHexa const *)arg1)->GetNumberNodesFace((FaceIndex const &)*arg2);
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ElementHexa_GetNumberNodesEdge(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  dive::elements::ElementHexa *arg1 = (dive::elements::ElementHexa *) 0 ;
  EdgeIndex *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< dive::elements::ElementHexa const > tempshared1 ;
  std::shared_ptr< dive::elements::ElementHexa const > *smartarg1 = 0 ;
  EdgeIndex temp2 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  NumberNodes result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "ElementHexa_GetNumberNodesEdge", 2, 2, swig_obj)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_dive__elements__ElementHexa_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ElementHexa_GetNumberNodesEdge" "', argument " "1"" of type '" "dive::elements::ElementHexa const *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const dive::elements::ElementHexa > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const dive::elements::ElementHexa > * >(argp1);
      arg1 = const_cast< dive::elements::ElementHexa * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const dive::elements::ElementHexa > * >(argp1);
      arg1 = const_cast< dive::elements::ElementHexa * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ElementHexa_GetNumberNodesEdge" "', argument " "2"" of type '" "EdgeIndex""'");
  } 
  temp2 = static_cast< EdgeIndex >(val2);
  arg2 = &temp2;
  result = ((dive::elements::ElementHexa const *)arg1)->GetNumberNodesEdge((EdgeIndex const &)*arg2);
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ElementHexa_GetNumberNodes(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  dive::elements::ElementHexa *arg1 = (dive::elements::ElementHexa *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< dive::elements::ElementHexa const > tempshared1 ;
  std::shared_ptr< dive::elements::ElementHexa const > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  NumberNodes result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_dive__elements__ElementHexa_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ElementHexa_GetNumberNodes" "', argument " "1"" of type '" "dive::elements::ElementHexa const *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const dive::elements::ElementHexa > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const dive::elements::ElementHexa > * >(argp1);
      arg1 = const_cast< dive::elements::ElementHexa * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const dive::elements::ElementHexa > * >(argp1);
      arg1 = const_cast< dive::elements::ElementHexa * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = ((dive::elements::ElementHexa const *)arg1)->GetNumberNodes();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ElementHexa_GetNumberFaces(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  dive::elements::ElementHexa *arg1 = (dive::elements::ElementHexa *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< dive::elements::ElementHexa const > tempshared1 ;
  std::shared_ptr< dive::elements::ElementHexa const > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  NumberFaces result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_dive__elements__ElementHexa_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ElementHexa_GetNumberFaces" "', argument " "1"" of type '" "dive::elements::ElementHexa const *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const dive::elements::ElementHexa > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const dive::elements::ElementHexa > * >(argp1);
      arg1 = const_cast< dive::elements::ElementHexa * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const dive::elements::ElementHexa > * >(argp1);
      arg1 = const_cast< dive::elements::ElementHexa * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = ((dive::elements::ElementHexa const *)arg1)->GetNumberFaces();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ElementHexa_GetNumberEdges(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  dive::elements::ElementHexa *arg1 = (dive::elements::ElementHexa *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< dive::elements::ElementHexa const > tempshared1 ;
  std::shared_ptr< dive::elements::ElementHexa const > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  NumberEdges result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_dive__elements__ElementHexa_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ElementHexa_GetNumberEdges" "', argument " "1"" of type '" "dive::elements::ElementHexa const *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const dive::elements::ElementHexa > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const dive::elements::ElementHexa > * >(argp1);
      arg1 = const_cast< dive::elements::ElementHexa * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const dive::elements::ElementHexa > * >(argp1);
      arg1 = const_cast< dive::elements::ElementHexa * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = ((dive::elements::ElementHexa const *)arg1)->GetNumberEdges();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ElementHexa_GetDimension(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  dive::elements::ElementHexa *arg1 = (dive::elements::ElementHexa *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< dive::elements::ElementHexa const > tempshared1 ;
  std::shared_ptr< dive::elements::ElementHexa const > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  Dimension result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_dive__elements__ElementHexa_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ElementHexa_GetDimension" "', argument " "1"" of type '" "dive::elements::ElementHexa const *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const dive::elements::ElementHexa > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const dive::elements::ElementHexa > * >(argp1);
      arg1 = const_cast< dive::elements::ElementHexa * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const dive::elements::ElementHexa > * >(argp1);
      arg1 = const_cast< dive::elements::ElementHexa * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = ((dive::elements::ElementHexa const *)arg1)->GetDimension();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ElementHexa_GetCenter(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  dive::elements::ElementHexa *arg1 = (dive::elements::ElementHexa *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< dive::elements::ElementHexa const > tempshared1 ;
  std::shared_ptr< dive::elements::ElementHexa const > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  Vector result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_dive__elements__ElementHexa_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ElementHexa_GetCenter" "', argument " "1"" of type '" "dive::elements::ElementHexa const *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const dive::elements::ElementHexa > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const dive::elements::ElementHexa > * >(argp1);
      arg1 = const_cast< dive::elements::ElementHexa * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const dive::elements::ElementHexa > * >(argp1);
      arg1 = const_cast< dive::elements::ElementHexa * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = ((dive::elements::ElementHexa const *)arg1)->GetCenter();
  resultobj = SWIG_NewPointerObj((new Vector(result)), SWIGTYPE_p_eilig__Vector, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ElementHexa_GetTag(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  dive::elements::ElementHexa *arg1 = (dive::elements::ElementHexa *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< dive::elements::ElementHexa const > tempshared1 ;
  std::shared_ptr< dive::elements::ElementHexa const > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  Tag result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_dive__elements__ElementHexa_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ElementHexa_GetTag" "', argument " "1"" of type '" "dive::elements::ElementHexa const *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const dive::elements::ElementHexa > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const dive::elements::ElementHexa > * >(argp1);
      arg1 = const_cast< dive::elements::ElementHexa * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const dive::elements::ElementHexa > * >(argp1);
      arg1 = const_cast< dive::elements::ElementHexa * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = ((dive::elements::ElementHexa const *)arg1)->GetTag();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ElementHexa_GetMaterial(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  dive::elements::ElementHexa *arg1 = (dive::elements::ElementHexa *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< dive::elements::ElementHexa const > tempshared1 ;
  std::shared_ptr< dive::elements::ElementHexa const > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  IMaterialPtr result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_dive__elements__ElementHexa_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ElementHexa_GetMaterial" "', argument " "1"" of type '" "dive::elements::ElementHexa const *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const dive::elements::ElementHexa > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const dive::elements::ElementHexa > * >(argp1);
      arg1 = const_cast< dive::elements::ElementHexa * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const dive::elements::ElementHexa > * >(argp1);
      arg1 = const_cast< dive::elements::ElementHexa * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = ((dive::elements::ElementHexa const *)arg1)->GetMaterial();
  {
    std::shared_ptr<  material::IMaterial > *smartresult = result ? new std::shared_ptr<  material::IMaterial >(result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_std__shared_ptrT_material__IMaterial_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ElementHexa_GetElementIndex(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  dive::elements::ElementHexa *arg1 = (dive::elements::ElementHexa *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< dive::elements::ElementHexa const > tempshared1 ;
  std::shared_ptr< dive::elements::ElementHexa const > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  ElementIndex result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_dive__elements__ElementHexa_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ElementHexa_GetElementIndex" "', argument " "1"" of type '" "dive::elements::ElementHexa const *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const dive::elements::ElementHexa > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const dive::elements::ElementHexa > * >(argp1);
      arg1 = const_cast< dive::elements::ElementHexa * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const dive::elements::ElementHexa > * >(argp1);
      arg1 = const_cast< dive::elements::ElementHexa * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = ((dive::elements::ElementHexa const *)arg1)->GetElementIndex();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ElementHexa_GetHeight(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  dive::elements::ElementHexa *arg1 = (dive::elements::ElementHexa *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< dive::elements::ElementHexa const > tempshared1 ;
  std::shared_ptr< dive::elements::ElementHexa const > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  Scalar result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_dive__elements__ElementHexa_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ElementHexa_GetHeight" "', argument " "1"" of type '" "dive::elements::ElementHexa const *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const dive::elements::ElementHexa > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const dive::elements::ElementHexa > * >(argp1);
      arg1 = const_cast< dive::elements::ElementHexa * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const dive::elements::ElementHexa > * >(argp1);
      arg1 = const_cast< dive::elements::ElementHexa * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = (Scalar)((dive::elements::ElementHexa const *)arg1)->GetHeight();
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ElementHexa_GetNumberDof(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  dive::elements::ElementHexa *arg1 = (dive::elements::ElementHexa *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< dive::elements::ElementHexa const > tempshared1 ;
  std::shared_ptr< dive::elements::ElementHexa const > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  NumberDof result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_dive__elements__ElementHexa_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ElementHexa_GetNumberDof" "', argument " "1"" of type '" "dive::elements::ElementHexa const *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const dive::elements::ElementHexa > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const dive::elements::ElementHexa > * >(argp1);
      arg1 = const_cast< dive::elements::ElementHexa * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const dive::elements::ElementHexa > * >(argp1);
      arg1 = const_cast< dive::elements::ElementHexa * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = ((dive::elements::ElementHexa const *)arg1)->GetNumberDof();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ElementHexa_IntegralVolume(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  dive::elements::ElementHexa *arg1 = (dive::elements::ElementHexa *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< dive::elements::ElementHexa const > tempshared1 ;
  std::shared_ptr< dive::elements::ElementHexa const > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  IGaussPtr result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_dive__elements__ElementHexa_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ElementHexa_IntegralVolume" "', argument " "1"" of type '" "dive::elements::ElementHexa const *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const dive::elements::ElementHexa > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const dive::elements::ElementHexa > * >(argp1);
      arg1 = const_cast< dive::elements::ElementHexa * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const dive::elements::ElementHexa > * >(argp1);
      arg1 = const_cast< dive::elements::ElementHexa * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = ((dive::elements::ElementHexa const *)arg1)->IntegralVolume();
  {
    std::shared_ptr<  quadrature::IGauss > *smartresult = result ? new std::shared_ptr<  quadrature::IGauss >(result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_std__shared_ptrT_quadrature__IGauss_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ElementHexa_IntegralArea(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  dive::elements::ElementHexa *arg1 = (dive::elements::ElementHexa *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< dive::elements::ElementHexa const > tempshared1 ;
  std::shared_ptr< dive::elements::ElementHexa const > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  IGaussPtr result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_dive__elements__ElementHexa_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ElementHexa_IntegralArea" "', argument " "1"" of type '" "dive::elements::ElementHexa const *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const dive::elements::ElementHexa > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const dive::elements::ElementHexa > * >(argp1);
      arg1 = const_cast< dive::elements::ElementHexa * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const dive::elements::ElementHexa > * >(argp1);
      arg1 = const_cast< dive::elements::ElementHexa * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = ((dive::elements::ElementHexa const *)arg1)->IntegralArea();
  {
    std::shared_ptr<  quadrature::IGauss > *smartresult = result ? new std::shared_ptr<  quadrature::IGauss >(result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_std__shared_ptrT_quadrature__IGauss_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ElementHexa_IntegralEdge(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  dive::elements::ElementHexa *arg1 = (dive::elements::ElementHexa *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< dive::elements::ElementHexa const > tempshared1 ;
  std::shared_ptr< dive::elements::ElementHexa const > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  IGaussPtr result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_dive__elements__ElementHexa_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ElementHexa_IntegralEdge" "', argument " "1"" of type '" "dive::elements::ElementHexa const *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const dive::elements::ElementHexa > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const dive::elements::ElementHexa > * >(argp1);
      arg1 = const_cast< dive::elements::ElementHexa * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const dive::elements::ElementHexa > * >(argp1);
      arg1 = const_cast< dive::elements::ElementHexa * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = ((dive::elements::ElementHexa const *)arg1)->IntegralEdge();
  {
    std::shared_ptr<  quadrature::IGauss > *smartresult = result ? new std::shared_ptr<  quadrature::IGauss >(result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_std__shared_ptrT_quadrature__IGauss_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ElementHexa_GetIntegralAreaHelper(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  dive::elements::ElementHexa *arg1 = (dive::elements::ElementHexa *) 0 ;
  FaceIndex arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< dive::elements::ElementHexa const > tempshared1 ;
  std::shared_ptr< dive::elements::ElementHexa const > *smartarg1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  dive::elements::IntegralAreaHelper result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "ElementHexa_GetIntegralAreaHelper", 2, 2, swig_obj)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_dive__elements__ElementHexa_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ElementHexa_GetIntegralAreaHelper" "', argument " "1"" of type '" "dive::elements::ElementHexa const *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const dive::elements::ElementHexa > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const dive::elements::ElementHexa > * >(argp1);
      arg1 = const_cast< dive::elements::ElementHexa * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const dive::elements::ElementHexa > * >(argp1);
      arg1 = const_cast< dive::elements::ElementHexa * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ElementHexa_GetIntegralAreaHelper" "', argument " "2"" of type '" "FaceIndex""'");
  } 
  arg2 = static_cast< FaceIndex >(val2);
  result = ((dive::elements::ElementHexa const *)arg1)->GetIntegralAreaHelper(arg2);
  resultobj = SWIG_NewPointerObj((new dive::elements::IntegralAreaHelper(result)), SWIGTYPE_p_dive__elements__IntegralAreaHelper, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ElementHexa_GetIntegralEdgeHelper(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  dive::elements::ElementHexa *arg1 = (dive::elements::ElementHexa *) 0 ;
  EdgeIndex arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< dive::elements::ElementHexa const > tempshared1 ;
  std::shared_ptr< dive::elements::ElementHexa const > *smartarg1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  dive::elements::IntegralEdgeHelper result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "ElementHexa_GetIntegralEdgeHelper", 2, 2, swig_obj)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_dive__elements__ElementHexa_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ElementHexa_GetIntegralEdgeHelper" "', argument " "1"" of type '" "dive::elements::ElementHexa const *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const dive::elements::ElementHexa > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const dive::elements::ElementHexa > * >(argp1);
      arg1 = const_cast< dive::elements::ElementHexa * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const dive::elements::ElementHexa > * >(argp1);
      arg1 = const_cast< dive::elements::ElementHexa * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ElementHexa_GetIntegralEdgeHelper" "', argument " "2"" of type '" "EdgeIndex""'");
  } 
  arg2 = static_cast< EdgeIndex >(val2);
  result = ((dive::elements::ElementHexa const *)arg1)->GetIntegralEdgeHelper(arg2);
  resultobj = SWIG_NewPointerObj((new dive::elements::IntegralEdgeHelper(result)), SWIGTYPE_p_dive__elements__IntegralEdgeHelper, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ElementHexa_SetNumberDof(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  dive::elements::ElementHexa *arg1 = (dive::elements::ElementHexa *) 0 ;
  NumberDof arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< dive::elements::ElementHexa > tempshared1 ;
  std::shared_ptr< dive::elements::ElementHexa > *smartarg1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "ElementHexa_SetNumberDof", 2, 2, swig_obj)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_dive__elements__ElementHexa_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ElementHexa_SetNumberDof" "', argument " "1"" of type '" "dive::elements::ElementHexa *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  dive::elements::ElementHexa > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  dive::elements::ElementHexa > * >(argp1);
      arg1 = const_cast< dive::elements::ElementHexa * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  dive::elements::ElementHexa > * >(argp1);
      arg1 = const_cast< dive::elements::ElementHexa * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ElementHexa_SetNumberDof" "', argument " "2"" of type '" "NumberDof""'");
  } 
  arg2 = static_cast< NumberDof >(val2);
  (arg1)->SetNumberDof(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ElementHexa_SetNode(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  dive::elements::ElementHexa *arg1 = (dive::elements::ElementHexa *) 0 ;
  NodeIndex *arg2 = 0 ;
  INodePtr arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< dive::elements::ElementHexa > tempshared1 ;
  std::shared_ptr< dive::elements::ElementHexa > *smartarg1 = 0 ;
  NodeIndex temp2 ;
  size_t val2 ;
  int ecode2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  PyObject *swig_obj[3] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "ElementHexa_SetNode", 3, 3, swig_obj)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_dive__elements__ElementHexa_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ElementHexa_SetNode" "', argument " "1"" of type '" "dive::elements::ElementHexa *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  dive::elements::ElementHexa > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  dive::elements::ElementHexa > * >(argp1);
      arg1 = const_cast< dive::elements::ElementHexa * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  dive::elements::ElementHexa > * >(argp1);
      arg1 = const_cast< dive::elements::ElementHexa * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ElementHexa_SetNode" "', argument " "2"" of type '" "NodeIndex""'");
  } 
  temp2 = static_cast< NodeIndex >(val2);
  arg2 = &temp2;
  {
    int newmem = 0;
    res3 = SWIG_ConvertPtrAndOwn(swig_obj[2], &argp3, SWIGTYPE_p_std__shared_ptrT_nodes__INode_t,  0 , &newmem);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ElementHexa_SetNode" "', argument " "3"" of type '" "INodePtr""'");
    }
    if (argp3) arg3 = *(reinterpret_cast< INodePtr * >(argp3));
    if (newmem & SWIG_CAST_NEW_MEMORY) delete reinterpret_cast< INodePtr * >(argp3);
  }
  (arg1)->SetNode((NodeIndex const &)*arg2,arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ElementHexa_SetOrder(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  dive::elements::ElementHexa *arg1 = (dive::elements::ElementHexa *) 0 ;
  dive::elements::Order *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< dive::elements::ElementHexa > tempshared1 ;
  std::shared_ptr< dive::elements::ElementHexa > *smartarg1 = 0 ;
  dive::elements::Order temp2 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "ElementHexa_SetOrder", 2, 2, swig_obj)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_dive__elements__ElementHexa_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ElementHexa_SetOrder" "', argument " "1"" of type '" "dive::elements::ElementHexa *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  dive::elements::ElementHexa > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  dive::elements::ElementHexa > * >(argp1);
      arg1 = const_cast< dive::elements::ElementHexa * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  dive::elements::ElementHexa > * >(argp1);
      arg1 = const_cast< dive::elements::ElementHexa * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ElementHexa_SetOrder" "', argument " "2"" of type '" "dive::elements::Order""'");
  } 
  temp2 = static_cast< dive::elements::Order >(val2);
  arg2 = &temp2;
  (arg1)->SetOrder((dive::elements::Order const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ElementHexa_SetParametric(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  dive::elements::ElementHexa *arg1 = (dive::elements::ElementHexa *) 0 ;
  dive::elements::Parametric *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< dive::elements::ElementHexa > tempshared1 ;
  std::shared_ptr< dive::elements::ElementHexa > *smartarg1 = 0 ;
  dive::elements::Parametric temp2 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "ElementHexa_SetParametric", 2, 2, swig_obj)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_dive__elements__ElementHexa_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ElementHexa_SetParametric" "', argument " "1"" of type '" "dive::elements::ElementHexa *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  dive::elements::ElementHexa > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  dive::elements::ElementHexa > * >(argp1);
      arg1 = const_cast< dive::elements::ElementHexa * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  dive::elements::ElementHexa > * >(argp1);
      arg1 = const_cast< dive::elements::ElementHexa * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ElementHexa_SetParametric" "', argument " "2"" of type '" "dive::elements::Parametric""'");
  } 
  temp2 = static_cast< dive::elements::Parametric >(val2);
  arg2 = &temp2;
  (arg1)->SetParametric((dive::elements::Parametric const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ElementHexa_SetTag(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  dive::elements::ElementHexa *arg1 = (dive::elements::ElementHexa *) 0 ;
  Tag arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< dive::elements::ElementHexa > tempshared1 ;
  std::shared_ptr< dive::elements::ElementHexa > *smartarg1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "ElementHexa_SetTag", 2, 2, swig_obj)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_dive__elements__ElementHexa_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ElementHexa_SetTag" "', argument " "1"" of type '" "dive::elements::ElementHexa *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  dive::elements::ElementHexa > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  dive::elements::ElementHexa > * >(argp1);
      arg1 = const_cast< dive::elements::ElementHexa * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  dive::elements::ElementHexa > * >(argp1);
      arg1 = const_cast< dive::elements::ElementHexa * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ElementHexa_SetTag" "', argument " "2"" of type '" "Tag""'");
  } 
  arg2 = static_cast< Tag >(val2);
  (arg1)->SetTag(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ElementHexa_SetMaterial(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  dive::elements::ElementHexa *arg1 = (dive::elements::ElementHexa *) 0 ;
  IMaterialPtr arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< dive::elements::ElementHexa > tempshared1 ;
  std::shared_ptr< dive::elements::ElementHexa > *smartarg1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "ElementHexa_SetMaterial", 2, 2, swig_obj)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_dive__elements__ElementHexa_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ElementHexa_SetMaterial" "', argument " "1"" of type '" "dive::elements::ElementHexa *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  dive::elements::ElementHexa > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  dive::elements::ElementHexa > * >(argp1);
      arg1 = const_cast< dive::elements::ElementHexa * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  dive::elements::ElementHexa > * >(argp1);
      arg1 = const_cast< dive::elements::ElementHexa * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    int newmem = 0;
    res2 = SWIG_ConvertPtrAndOwn(swig_obj[1], &argp2, SWIGTYPE_p_std__shared_ptrT_material__IMaterial_t,  0 , &newmem);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ElementHexa_SetMaterial" "', argument " "2"" of type '" "IMaterialPtr""'");
    }
    if (argp2) arg2 = *(reinterpret_cast< IMaterialPtr * >(argp2));
    if (newmem & SWIG_CAST_NEW_MEMORY) delete reinterpret_cast< IMaterialPtr * >(argp2);
  }
  (arg1)->SetMaterial(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ElementHexa_SetElementIndex(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  dive::elements::ElementHexa *arg1 = (dive::elements::ElementHexa *) 0 ;
  ElementIndex arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< dive::elements::ElementHexa > tempshared1 ;
  std::shared_ptr< dive::elements::ElementHexa > *smartarg1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "ElementHexa_SetElementIndex", 2, 2, swig_obj)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_dive__elements__ElementHexa_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ElementHexa_SetElementIndex" "', argument " "1"" of type '" "dive::elements::ElementHexa *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  dive::elements::ElementHexa > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  dive::elements::ElementHexa > * >(argp1);
      arg1 = const_cast< dive::elements::ElementHexa * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  dive::elements::ElementHexa > * >(argp1);
      arg1 = const_cast< dive::elements::ElementHexa * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ElementHexa_SetElementIndex" "', argument " "2"" of type '" "ElementIndex""'");
  } 
  arg2 = static_cast< ElementIndex >(val2);
  (arg1)->SetElementIndex(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ElementHexa_IsUsed(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  dive::elements::ElementHexa *arg1 = (dive::elements::ElementHexa *) 0 ;
  INodePtr arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< dive::elements::ElementHexa const > tempshared1 ;
  std::shared_ptr< dive::elements::ElementHexa const > *smartarg1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  bool result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "ElementHexa_IsUsed", 2, 2, swig_obj)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_dive__elements__ElementHexa_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ElementHexa_IsUsed" "', argument " "1"" of type '" "dive::elements::ElementHexa const *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const dive::elements::ElementHexa > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const dive::elements::ElementHexa > * >(argp1);
      arg1 = const_cast< dive::elements::ElementHexa * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const dive::elements::ElementHexa > * >(argp1);
      arg1 = const_cast< dive::elements::ElementHexa * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    int newmem = 0;
    res2 = SWIG_ConvertPtrAndOwn(swig_obj[1], &argp2, SWIGTYPE_p_std__shared_ptrT_nodes__INode_t,  0 , &newmem);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ElementHexa_IsUsed" "', argument " "2"" of type '" "INodePtr""'");
    }
    if (argp2) arg2 = *(reinterpret_cast< INodePtr * >(argp2));
    if (newmem & SWIG_CAST_NEW_MEMORY) delete reinterpret_cast< INodePtr * >(argp2);
  }
  result = (bool)((dive::elements::ElementHexa const *)arg1)->IsUsed(arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ElementHexa_InitializeCache(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  dive::elements::ElementHexa *arg1 = (dive::elements::ElementHexa *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< dive::elements::ElementHexa > tempshared1 ;
  std::shared_ptr< dive::elements::ElementHexa > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_dive__elements__ElementHexa_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ElementHexa_InitializeCache" "', argument " "1"" of type '" "dive::elements::ElementHexa *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  dive::elements::ElementHexa > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  dive::elements::ElementHexa > * >(argp1);
      arg1 = const_cast< dive::elements::ElementHexa * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  dive::elements::ElementHexa > * >(argp1);
      arg1 = const_cast< dive::elements::ElementHexa * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  (arg1)->InitializeCache();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ElementHexa_linearFunctions__set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  dive::elements::ElementHexa *arg1 = (dive::elements::ElementHexa *) 0 ;
  dive::elements::ElementHexa::LinearFunctions *arg2 = (dive::elements::ElementHexa::LinearFunctions *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< dive::elements::ElementHexa > tempshared1 ;
  std::shared_ptr< dive::elements::ElementHexa > *smartarg1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "ElementHexa_linearFunctions__set", 2, 2, swig_obj)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_dive__elements__ElementHexa_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ElementHexa_linearFunctions__set" "', argument " "1"" of type '" "dive::elements::ElementHexa *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  dive::elements::ElementHexa > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  dive::elements::ElementHexa > * >(argp1);
      arg1 = const_cast< dive::elements::ElementHexa * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  dive::elements::ElementHexa > * >(argp1);
      arg1 = const_cast< dive::elements::ElementHexa * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_dive__elements__ElementHexa__LinearFunctions, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ElementHexa_linearFunctions__set" "', argument " "2"" of type '" "dive::elements::ElementHexa::LinearFunctions *""'"); 
  }
  arg2 = reinterpret_cast< dive::elements::ElementHexa::LinearFunctions * >(argp2);
  if (arg1) (arg1)->linearFunctions_ = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ElementHexa_linearFunctions__get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  dive::elements::ElementHexa *arg1 = (dive::elements::ElementHexa *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< dive::elements::ElementHexa > tempshared1 ;
  std::shared_ptr< dive::elements::ElementHexa > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  dive::elements::ElementHexa::LinearFunctions *result = 0 ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_dive__elements__ElementHexa_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ElementHexa_linearFunctions__get" "', argument " "1"" of type '" "dive::elements::ElementHexa *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  dive::elements::ElementHexa > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  dive::elements::ElementHexa > * >(argp1);
      arg1 = const_cast< dive::elements::ElementHexa * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  dive::elements::ElementHexa > * >(argp1);
      arg1 = const_cast< dive::elements::ElementHexa * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = (dive::elements::ElementHexa::LinearFunctions *)& ((arg1)->linearFunctions_);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_dive__elements__ElementHexa__LinearFunctions, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ElementHexa_quadraticFunctions__set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  dive::elements::ElementHexa *arg1 = (dive::elements::ElementHexa *) 0 ;
  dive::elements::ElementHexa::QuadraticFunctions *arg2 = (dive::elements::ElementHexa::QuadraticFunctions *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< dive::elements::ElementHexa > tempshared1 ;
  std::shared_ptr< dive::elements::ElementHexa > *smartarg1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "ElementHexa_quadraticFunctions__set", 2, 2, swig_obj)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_dive__elements__ElementHexa_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ElementHexa_quadraticFunctions__set" "', argument " "1"" of type '" "dive::elements::ElementHexa *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  dive::elements::ElementHexa > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  dive::elements::ElementHexa > * >(argp1);
      arg1 = const_cast< dive::elements::ElementHexa * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  dive::elements::ElementHexa > * >(argp1);
      arg1 = const_cast< dive::elements::ElementHexa * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_dive__elements__ElementHexa__QuadraticFunctions, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ElementHexa_quadraticFunctions__set" "', argument " "2"" of type '" "dive::elements::ElementHexa::QuadraticFunctions *""'"); 
  }
  arg2 = reinterpret_cast< dive::elements::ElementHexa::QuadraticFunctions * >(argp2);
  if (arg1) (arg1)->quadraticFunctions_ = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ElementHexa_quadraticFunctions__get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  dive::elements::ElementHexa *arg1 = (dive::elements::ElementHexa *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< dive::elements::ElementHexa > tempshared1 ;
  std::shared_ptr< dive::elements::ElementHexa > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  dive::elements::ElementHexa::QuadraticFunctions *result = 0 ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_dive__elements__ElementHexa_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ElementHexa_quadraticFunctions__get" "', argument " "1"" of type '" "dive::elements::ElementHexa *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  dive::elements::ElementHexa > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  dive::elements::ElementHexa > * >(argp1);
      arg1 = const_cast< dive::elements::ElementHexa * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  dive::elements::ElementHexa > * >(argp1);
      arg1 = const_cast< dive::elements::ElementHexa * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = (dive::elements::ElementHexa::QuadraticFunctions *)& ((arg1)->quadraticFunctions_);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_dive__elements__ElementHexa__QuadraticFunctions, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *ElementHexa_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_std__shared_ptrT_dive__elements__ElementHexa_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_vecDirichlets_iterator(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::shared_ptr< dive::loads::IDirichlet > > *arg1 = (std::vector< std::shared_ptr< dive::loads::IDirichlet > > *) 0 ;
  PyObject **arg2 = (PyObject **) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  swig::SwigPyIterator *result = 0 ;
  
  arg2 = &swig_obj[0];
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__shared_ptrT_dive__loads__IDirichlet_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vecDirichlets_iterator" "', argument " "1"" of type '" "std::vector< std::shared_ptr< dive::loads::IDirichlet > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::shared_ptr< dive::loads::IDirichlet > > * >(argp1);
  result = (swig::SwigPyIterator *)std_vector_Sl_std_shared_ptr_Sl_dive_loads_IDirichlet_Sg__Sg__iterator(arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vecDirichlets___nonzero__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::shared_ptr< dive::loads::IDirichlet > > *arg1 = (std::vector< std::shared_ptr< dive::loads::IDirichlet > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__shared_ptrT_dive__loads__IDirichlet_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vecDirichlets___nonzero__" "', argument " "1"" of type '" "std::vector< std::shared_ptr< dive::loads::IDirichlet > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::shared_ptr< dive::loads::IDirichlet > > * >(argp1);
  result = (bool)std_vector_Sl_std_shared_ptr_Sl_dive_loads_IDirichlet_Sg__Sg____nonzero__((std::vector< std::shared_ptr< dive::loads::IDirichlet > > const *)arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vecDirichlets___bool__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::shared_ptr< dive::loads::IDirichlet > > *arg1 = (std::vector< std::shared_ptr< dive::loads::IDirichlet > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__shared_ptrT_dive__loads__IDirichlet_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vecDirichlets___bool__" "', argument " "1"" of type '" "std::vector< std::shared_ptr< dive::loads::IDirichlet > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::shared_ptr< dive::loads::IDirichlet > > * >(argp1);
  result = (bool)std_vector_Sl_std_shared_ptr_Sl_dive_loads_IDirichlet_Sg__Sg____bool__((std::vector< std::shared_ptr< dive::loads::IDirichlet > > const *)arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vecDirichlets___len__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::shared_ptr< dive::loads::IDirichlet > > *arg1 = (std::vector< std::shared_ptr< dive::loads::IDirichlet > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< std::shared_ptr< dive::loads::IDirichlet > >::size_type result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__shared_ptrT_dive__loads__IDirichlet_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vecDirichlets___len__" "', argument " "1"" of type '" "std::vector< std::shared_ptr< dive::loads::IDirichlet > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::shared_ptr< dive::loads::IDirichlet > > * >(argp1);
  result = std_vector_Sl_std_shared_ptr_Sl_dive_loads_IDirichlet_Sg__Sg____len__((std::vector< std::shared_ptr< dive::loads::IDirichlet > > const *)arg1);
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vecDirichlets___getslice__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::shared_ptr< dive::loads::IDirichlet > > *arg1 = (std::vector< std::shared_ptr< dive::loads::IDirichlet > > *) 0 ;
  std::vector< std::shared_ptr< dive::loads::IDirichlet > >::difference_type arg2 ;
  std::vector< std::shared_ptr< dive::loads::IDirichlet > >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  std::vector< std::shared_ptr< dive::loads::IDirichlet >,std::allocator< std::shared_ptr< dive::loads::IDirichlet > > > *result = 0 ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "vecDirichlets___getslice__", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__shared_ptrT_dive__loads__IDirichlet_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vecDirichlets___getslice__" "', argument " "1"" of type '" "std::vector< std::shared_ptr< dive::loads::IDirichlet > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::shared_ptr< dive::loads::IDirichlet > > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vecDirichlets___getslice__" "', argument " "2"" of type '" "std::vector< std::shared_ptr< dive::loads::IDirichlet > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< std::shared_ptr< dive::loads::IDirichlet > >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "vecDirichlets___getslice__" "', argument " "3"" of type '" "std::vector< std::shared_ptr< dive::loads::IDirichlet > >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< std::shared_ptr< dive::loads::IDirichlet > >::difference_type >(val3);
  try {
    result = (std::vector< std::shared_ptr< dive::loads::IDirichlet >,std::allocator< std::shared_ptr< dive::loads::IDirichlet > > > *)std_vector_Sl_std_shared_ptr_Sl_dive_loads_IDirichlet_Sg__Sg____getslice__(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3));
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__shared_ptrT_dive__loads__IDirichlet_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vecDirichlets___setslice____SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< std::shared_ptr< dive::loads::IDirichlet > > *arg1 = (std::vector< std::shared_ptr< dive::loads::IDirichlet > > *) 0 ;
  std::vector< std::shared_ptr< dive::loads::IDirichlet > >::difference_type arg2 ;
  std::vector< std::shared_ptr< dive::loads::IDirichlet > >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__shared_ptrT_dive__loads__IDirichlet_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vecDirichlets___setslice__" "', argument " "1"" of type '" "std::vector< std::shared_ptr< dive::loads::IDirichlet > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::shared_ptr< dive::loads::IDirichlet > > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vecDirichlets___setslice__" "', argument " "2"" of type '" "std::vector< std::shared_ptr< dive::loads::IDirichlet > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< std::shared_ptr< dive::loads::IDirichlet > >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "vecDirichlets___setslice__" "', argument " "3"" of type '" "std::vector< std::shared_ptr< dive::loads::IDirichlet > >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< std::shared_ptr< dive::loads::IDirichlet > >::difference_type >(val3);
  try {
    std_vector_Sl_std_shared_ptr_Sl_dive_loads_IDirichlet_Sg__Sg____setslice____SWIG_0(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3));
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vecDirichlets___setslice____SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< std::shared_ptr< dive::loads::IDirichlet > > *arg1 = (std::vector< std::shared_ptr< dive::loads::IDirichlet > > *) 0 ;
  std::vector< std::shared_ptr< dive::loads::IDirichlet > >::difference_type arg2 ;
  std::vector< std::shared_ptr< dive::loads::IDirichlet > >::difference_type arg3 ;
  std::vector< std::shared_ptr< dive::loads::IDirichlet >,std::allocator< std::shared_ptr< dive::loads::IDirichlet > > > *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  
  (void)self;
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__shared_ptrT_dive__loads__IDirichlet_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vecDirichlets___setslice__" "', argument " "1"" of type '" "std::vector< std::shared_ptr< dive::loads::IDirichlet > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::shared_ptr< dive::loads::IDirichlet > > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vecDirichlets___setslice__" "', argument " "2"" of type '" "std::vector< std::shared_ptr< dive::loads::IDirichlet > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< std::shared_ptr< dive::loads::IDirichlet > >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "vecDirichlets___setslice__" "', argument " "3"" of type '" "std::vector< std::shared_ptr< dive::loads::IDirichlet > >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< std::shared_ptr< dive::loads::IDirichlet > >::difference_type >(val3);
  {
    std::vector< std::shared_ptr< dive::loads::IDirichlet >,std::allocator< std::shared_ptr< dive::loads::IDirichlet > > > *ptr = (std::vector< std::shared_ptr< dive::loads::IDirichlet >,std::allocator< std::shared_ptr< dive::loads::IDirichlet > > > *)0;
    res4 = swig::asptr(swig_obj[3], &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "vecDirichlets___setslice__" "', argument " "4"" of type '" "std::vector< std::shared_ptr< dive::loads::IDirichlet >,std::allocator< std::shared_ptr< dive::loads::IDirichlet > > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vecDirichlets___setslice__" "', argument " "4"" of type '" "std::vector< std::shared_ptr< dive::loads::IDirichlet >,std::allocator< std::shared_ptr< dive::loads::IDirichlet > > > const &""'"); 
    }
    arg4 = ptr;
  }
  try {
    std_vector_Sl_std_shared_ptr_Sl_dive_loads_IDirichlet_Sg__Sg____setslice____SWIG_1(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3),(std::vector< std::shared_ptr< dive::loads::IDirichlet >,std::allocator< std::shared_ptr< dive::loads::IDirichlet > > > const &)*arg4);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_vecDirichlets___setslice__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "vecDirichlets___setslice__", 0, 4, argv))) SWIG_fail;
  --argc;
  if (argc == 3) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< std::shared_ptr< dive::loads::IDirichlet >,std::allocator< std::shared_ptr< dive::loads::IDirichlet > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_ptrdiff_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_vecDirichlets___setslice____SWIG_0(self, argc, argv);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< std::shared_ptr< dive::loads::IDirichlet >,std::allocator< std::shared_ptr< dive::loads::IDirichlet > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_ptrdiff_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = swig::asptr(argv[3], (std::vector< std::shared_ptr< dive::loads::IDirichlet >,std::allocator< std::shared_ptr< dive::loads::IDirichlet > > >**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_vecDirichlets___setslice____SWIG_1(self, argc, argv);
          }
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'vecDirichlets___setslice__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< std::shared_ptr< dive::loads::IDirichlet > >::__setslice__(std::vector< std::shared_ptr< dive::loads::IDirichlet > >::difference_type,std::vector< std::shared_ptr< dive::loads::IDirichlet > >::difference_type)\n"
    "    std::vector< std::shared_ptr< dive::loads::IDirichlet > >::__setslice__(std::vector< std::shared_ptr< dive::loads::IDirichlet > >::difference_type,std::vector< std::shared_ptr< dive::loads::IDirichlet > >::difference_type,std::vector< std::shared_ptr< dive::loads::IDirichlet >,std::allocator< std::shared_ptr< dive::loads::IDirichlet > > > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_vecDirichlets___delslice__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::shared_ptr< dive::loads::IDirichlet > > *arg1 = (std::vector< std::shared_ptr< dive::loads::IDirichlet > > *) 0 ;
  std::vector< std::shared_ptr< dive::loads::IDirichlet > >::difference_type arg2 ;
  std::vector< std::shared_ptr< dive::loads::IDirichlet > >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "vecDirichlets___delslice__", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__shared_ptrT_dive__loads__IDirichlet_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vecDirichlets___delslice__" "', argument " "1"" of type '" "std::vector< std::shared_ptr< dive::loads::IDirichlet > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::shared_ptr< dive::loads::IDirichlet > > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vecDirichlets___delslice__" "', argument " "2"" of type '" "std::vector< std::shared_ptr< dive::loads::IDirichlet > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< std::shared_ptr< dive::loads::IDirichlet > >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "vecDirichlets___delslice__" "', argument " "3"" of type '" "std::vector< std::shared_ptr< dive::loads::IDirichlet > >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< std::shared_ptr< dive::loads::IDirichlet > >::difference_type >(val3);
  try {
    std_vector_Sl_std_shared_ptr_Sl_dive_loads_IDirichlet_Sg__Sg____delslice__(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3));
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vecDirichlets___delitem____SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< std::shared_ptr< dive::loads::IDirichlet > > *arg1 = (std::vector< std::shared_ptr< dive::loads::IDirichlet > > *) 0 ;
  std::vector< std::shared_ptr< dive::loads::IDirichlet > >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__shared_ptrT_dive__loads__IDirichlet_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vecDirichlets___delitem__" "', argument " "1"" of type '" "std::vector< std::shared_ptr< dive::loads::IDirichlet > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::shared_ptr< dive::loads::IDirichlet > > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vecDirichlets___delitem__" "', argument " "2"" of type '" "std::vector< std::shared_ptr< dive::loads::IDirichlet > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< std::shared_ptr< dive::loads::IDirichlet > >::difference_type >(val2);
  try {
    std_vector_Sl_std_shared_ptr_Sl_dive_loads_IDirichlet_Sg__Sg____delitem____SWIG_0(arg1,SWIG_STD_MOVE(arg2));
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vecDirichlets___getitem____SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< std::shared_ptr< dive::loads::IDirichlet > > *arg1 = (std::vector< std::shared_ptr< dive::loads::IDirichlet > > *) 0 ;
  SWIGPY_SLICEOBJECT *arg2 = (SWIGPY_SLICEOBJECT *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< std::shared_ptr< dive::loads::IDirichlet >,std::allocator< std::shared_ptr< dive::loads::IDirichlet > > > *result = 0 ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__shared_ptrT_dive__loads__IDirichlet_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vecDirichlets___getitem__" "', argument " "1"" of type '" "std::vector< std::shared_ptr< dive::loads::IDirichlet > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::shared_ptr< dive::loads::IDirichlet > > * >(argp1);
  {
    if (!PySlice_Check(swig_obj[1])) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vecDirichlets___getitem__" "', argument " "2"" of type '" "SWIGPY_SLICEOBJECT *""'");
    }
    arg2 = (SWIGPY_SLICEOBJECT *) swig_obj[1];
  }
  try {
    result = (std::vector< std::shared_ptr< dive::loads::IDirichlet >,std::allocator< std::shared_ptr< dive::loads::IDirichlet > > > *)std_vector_Sl_std_shared_ptr_Sl_dive_loads_IDirichlet_Sg__Sg____getitem____SWIG_0(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__shared_ptrT_dive__loads__IDirichlet_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vecDirichlets___setitem____SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< std::shared_ptr< dive::loads::IDirichlet > > *arg1 = (std::vector< std::shared_ptr< dive::loads::IDirichlet > > *) 0 ;
  SWIGPY_SLICEOBJECT *arg2 = (SWIGPY_SLICEOBJECT *) 0 ;
  std::vector< std::shared_ptr< dive::loads::IDirichlet >,std::allocator< std::shared_ptr< dive::loads::IDirichlet > > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__shared_ptrT_dive__loads__IDirichlet_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vecDirichlets___setitem__" "', argument " "1"" of type '" "std::vector< std::shared_ptr< dive::loads::IDirichlet > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::shared_ptr< dive::loads::IDirichlet > > * >(argp1);
  {
    if (!PySlice_Check(swig_obj[1])) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vecDirichlets___setitem__" "', argument " "2"" of type '" "SWIGPY_SLICEOBJECT *""'");
    }
    arg2 = (SWIGPY_SLICEOBJECT *) swig_obj[1];
  }
  {
    std::vector< std::shared_ptr< dive::loads::IDirichlet >,std::allocator< std::shared_ptr< dive::loads::IDirichlet > > > *ptr = (std::vector< std::shared_ptr< dive::loads::IDirichlet >,std::allocator< std::shared_ptr< dive::loads::IDirichlet > > > *)0;
    res3 = swig::asptr(swig_obj[2], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "vecDirichlets___setitem__" "', argument " "3"" of type '" "std::vector< std::shared_ptr< dive::loads::IDirichlet >,std::allocator< std::shared_ptr< dive::loads::IDirichlet > > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vecDirichlets___setitem__" "', argument " "3"" of type '" "std::vector< std::shared_ptr< dive::loads::IDirichlet >,std::allocator< std::shared_ptr< dive::loads::IDirichlet > > > const &""'"); 
    }
    arg3 = ptr;
  }
  try {
    std_vector_Sl_std_shared_ptr_Sl_dive_loads_IDirichlet_Sg__Sg____setitem____SWIG_0(arg1,arg2,(std::vector< std::shared_ptr< dive::loads::IDirichlet >,std::allocator< std::shared_ptr< dive::loads::IDirichlet > > > const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_vecDirichlets___setitem____SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< std::shared_ptr< dive::loads::IDirichlet > > *arg1 = (std::vector< std::shared_ptr< dive::loads::IDirichlet > > *) 0 ;
  SWIGPY_SLICEOBJECT *arg2 = (SWIGPY_SLICEOBJECT *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__shared_ptrT_dive__loads__IDirichlet_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vecDirichlets___setitem__" "', argument " "1"" of type '" "std::vector< std::shared_ptr< dive::loads::IDirichlet > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::shared_ptr< dive::loads::IDirichlet > > * >(argp1);
  {
    if (!PySlice_Check(swig_obj[1])) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vecDirichlets___setitem__" "', argument " "2"" of type '" "SWIGPY_SLICEOBJECT *""'");
    }
    arg2 = (SWIGPY_SLICEOBJECT *) swig_obj[1];
  }
  try {
    std_vector_Sl_std_shared_ptr_Sl_dive_loads_IDirichlet_Sg__Sg____setitem____SWIG_1(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vecDirichlets___delitem____SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< std::shared_ptr< dive::loads::IDirichlet > > *arg1 = (std::vector< std::shared_ptr< dive::loads::IDirichlet > > *) 0 ;
  SWIGPY_SLICEOBJECT *arg2 = (SWIGPY_SLICEOBJECT *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__shared_ptrT_dive__loads__IDirichlet_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vecDirichlets___delitem__" "', argument " "1"" of type '" "std::vector< std::shared_ptr< dive::loads::IDirichlet > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::shared_ptr< dive::loads::IDirichlet > > * >(argp1);
  {
    if (!PySlice_Check(swig_obj[1])) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vecDirichlets___delitem__" "', argument " "2"" of type '" "SWIGPY_SLICEOBJECT *""'");
    }
    arg2 = (SWIGPY_SLICEOBJECT *) swig_obj[1];
  }
  try {
    std_vector_Sl_std_shared_ptr_Sl_dive_loads_IDirichlet_Sg__Sg____delitem____SWIG_1(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vecDirichlets___delitem__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "vecDirichlets___delitem__", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< std::shared_ptr< dive::loads::IDirichlet >,std::allocator< std::shared_ptr< dive::loads::IDirichlet > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_vecDirichlets___delitem____SWIG_1(self, argc, argv);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< std::shared_ptr< dive::loads::IDirichlet >,std::allocator< std::shared_ptr< dive::loads::IDirichlet > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_vecDirichlets___delitem____SWIG_0(self, argc, argv);
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'vecDirichlets___delitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< std::shared_ptr< dive::loads::IDirichlet > >::__delitem__(std::vector< std::shared_ptr< dive::loads::IDirichlet > >::difference_type)\n"
    "    std::vector< std::shared_ptr< dive::loads::IDirichlet > >::__delitem__(SWIGPY_SLICEOBJECT *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_vecDirichlets___getitem____SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< std::shared_ptr< dive::loads::IDirichlet > > *arg1 = (std::vector< std::shared_ptr< dive::loads::IDirichlet > > *) 0 ;
  std::vector< std::shared_ptr< dive::loads::IDirichlet > >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  std::vector< std::shared_ptr< dive::loads::IDirichlet > >::value_type *result = 0 ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__shared_ptrT_dive__loads__IDirichlet_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vecDirichlets___getitem__" "', argument " "1"" of type '" "std::vector< std::shared_ptr< dive::loads::IDirichlet > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::shared_ptr< dive::loads::IDirichlet > > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vecDirichlets___getitem__" "', argument " "2"" of type '" "std::vector< std::shared_ptr< dive::loads::IDirichlet > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< std::shared_ptr< dive::loads::IDirichlet > >::difference_type >(val2);
  try {
    result = (std::vector< std::shared_ptr< dive::loads::IDirichlet > >::value_type *) &std_vector_Sl_std_shared_ptr_Sl_dive_loads_IDirichlet_Sg__Sg____getitem____SWIG_1((std::vector< std::shared_ptr< dive::loads::IDirichlet > > const *)arg1,SWIG_STD_MOVE(arg2));
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  {
    std::shared_ptr<  dive::loads::IDirichlet > *smartresult = *result ? new std::shared_ptr<  dive::loads::IDirichlet >(*result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_std__shared_ptrT_dive__loads__IDirichlet_t, SWIG_POINTER_OWN);
  }
  (void)swig::container_owner<swig::traits<std::vector< std::shared_ptr< dive::loads::IDirichlet > >::value_type>::category>::back_reference(resultobj, swig_obj[0]);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vecDirichlets___getitem__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "vecDirichlets___getitem__", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< std::shared_ptr< dive::loads::IDirichlet >,std::allocator< std::shared_ptr< dive::loads::IDirichlet > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_vecDirichlets___getitem____SWIG_0(self, argc, argv);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< std::shared_ptr< dive::loads::IDirichlet >,std::allocator< std::shared_ptr< dive::loads::IDirichlet > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_vecDirichlets___getitem____SWIG_1(self, argc, argv);
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'vecDirichlets___getitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< std::shared_ptr< dive::loads::IDirichlet > >::__getitem__(SWIGPY_SLICEOBJECT *)\n"
    "    std::vector< std::shared_ptr< dive::loads::IDirichlet > >::__getitem__(std::vector< std::shared_ptr< dive::loads::IDirichlet > >::difference_type) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_vecDirichlets___setitem____SWIG_2(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< std::shared_ptr< dive::loads::IDirichlet > > *arg1 = (std::vector< std::shared_ptr< dive::loads::IDirichlet > > *) 0 ;
  std::vector< std::shared_ptr< dive::loads::IDirichlet > >::difference_type arg2 ;
  std::vector< std::shared_ptr< dive::loads::IDirichlet > >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  std::vector< std::shared_ptr< dive::loads::IDirichlet > >::value_type tempshared3 ;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__shared_ptrT_dive__loads__IDirichlet_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vecDirichlets___setitem__" "', argument " "1"" of type '" "std::vector< std::shared_ptr< dive::loads::IDirichlet > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::shared_ptr< dive::loads::IDirichlet > > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vecDirichlets___setitem__" "', argument " "2"" of type '" "std::vector< std::shared_ptr< dive::loads::IDirichlet > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< std::shared_ptr< dive::loads::IDirichlet > >::difference_type >(val2);
  {
    int newmem = 0;
    res3 = SWIG_ConvertPtrAndOwn(swig_obj[2], &argp3, SWIGTYPE_p_std__shared_ptrT_dive__loads__IDirichlet_t,  0 , &newmem);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "vecDirichlets___setitem__" "', argument " "3"" of type '" "std::vector< std::shared_ptr< dive::loads::IDirichlet > >::value_type const &""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      if (argp3) tempshared3 = *reinterpret_cast< std::vector< std::shared_ptr< dive::loads::IDirichlet > >::value_type * >(argp3);
      delete reinterpret_cast< std::vector< std::shared_ptr< dive::loads::IDirichlet > >::value_type * >(argp3);
      arg3 = &tempshared3;
    } else {
      arg3 = (argp3) ? reinterpret_cast< std::vector< std::shared_ptr< dive::loads::IDirichlet > >::value_type * >(argp3) : &tempshared3;
    }
  }
  try {
    std_vector_Sl_std_shared_ptr_Sl_dive_loads_IDirichlet_Sg__Sg____setitem____SWIG_2(arg1,SWIG_STD_MOVE(arg2),(std::shared_ptr< dive::loads::IDirichlet > const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vecDirichlets___setitem__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "vecDirichlets___setitem__", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< std::shared_ptr< dive::loads::IDirichlet >,std::allocator< std::shared_ptr< dive::loads::IDirichlet > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_vecDirichlets___setitem____SWIG_1(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< std::shared_ptr< dive::loads::IDirichlet >,std::allocator< std::shared_ptr< dive::loads::IDirichlet > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        int res = swig::asptr(argv[2], (std::vector< std::shared_ptr< dive::loads::IDirichlet >,std::allocator< std::shared_ptr< dive::loads::IDirichlet > > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_vecDirichlets___setitem____SWIG_0(self, argc, argv);
        }
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< std::shared_ptr< dive::loads::IDirichlet >,std::allocator< std::shared_ptr< dive::loads::IDirichlet > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_std__shared_ptrT_dive__loads__IDirichlet_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_vecDirichlets___setitem____SWIG_2(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'vecDirichlets___setitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< std::shared_ptr< dive::loads::IDirichlet > >::__setitem__(SWIGPY_SLICEOBJECT *,std::vector< std::shared_ptr< dive::loads::IDirichlet >,std::allocator< std::shared_ptr< dive::loads::IDirichlet > > > const &)\n"
    "    std::vector< std::shared_ptr< dive::loads::IDirichlet > >::__setitem__(SWIGPY_SLICEOBJECT *)\n"
    "    std::vector< std::shared_ptr< dive::loads::IDirichlet > >::__setitem__(std::vector< std::shared_ptr< dive::loads::IDirichlet > >::difference_type,std::vector< std::shared_ptr< dive::loads::IDirichlet > >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_vecDirichlets_pop(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::shared_ptr< dive::loads::IDirichlet > > *arg1 = (std::vector< std::shared_ptr< dive::loads::IDirichlet > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< std::shared_ptr< dive::loads::IDirichlet > >::value_type result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__shared_ptrT_dive__loads__IDirichlet_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vecDirichlets_pop" "', argument " "1"" of type '" "std::vector< std::shared_ptr< dive::loads::IDirichlet > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::shared_ptr< dive::loads::IDirichlet > > * >(argp1);
  try {
    result = std_vector_Sl_std_shared_ptr_Sl_dive_loads_IDirichlet_Sg__Sg__pop(arg1);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  {
    std::shared_ptr<  dive::loads::IDirichlet > *smartresult = result ? new std::shared_ptr<  dive::loads::IDirichlet >(result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_std__shared_ptrT_dive__loads__IDirichlet_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vecDirichlets_append(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::shared_ptr< dive::loads::IDirichlet > > *arg1 = (std::vector< std::shared_ptr< dive::loads::IDirichlet > > *) 0 ;
  std::vector< std::shared_ptr< dive::loads::IDirichlet > >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  std::vector< std::shared_ptr< dive::loads::IDirichlet > >::value_type tempshared2 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "vecDirichlets_append", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__shared_ptrT_dive__loads__IDirichlet_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vecDirichlets_append" "', argument " "1"" of type '" "std::vector< std::shared_ptr< dive::loads::IDirichlet > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::shared_ptr< dive::loads::IDirichlet > > * >(argp1);
  {
    int newmem = 0;
    res2 = SWIG_ConvertPtrAndOwn(swig_obj[1], &argp2, SWIGTYPE_p_std__shared_ptrT_dive__loads__IDirichlet_t,  0 , &newmem);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "vecDirichlets_append" "', argument " "2"" of type '" "std::vector< std::shared_ptr< dive::loads::IDirichlet > >::value_type const &""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      if (argp2) tempshared2 = *reinterpret_cast< std::vector< std::shared_ptr< dive::loads::IDirichlet > >::value_type * >(argp2);
      delete reinterpret_cast< std::vector< std::shared_ptr< dive::loads::IDirichlet > >::value_type * >(argp2);
      arg2 = &tempshared2;
    } else {
      arg2 = (argp2) ? reinterpret_cast< std::vector< std::shared_ptr< dive::loads::IDirichlet > >::value_type * >(argp2) : &tempshared2;
    }
  }
  std_vector_Sl_std_shared_ptr_Sl_dive_loads_IDirichlet_Sg__Sg__append(arg1,(std::shared_ptr< dive::loads::IDirichlet > const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_vecDirichlets__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **SWIGUNUSEDPARM(swig_obj)) {
  PyObject *resultobj = 0;
  std::vector< std::shared_ptr< dive::loads::IDirichlet > > *result = 0 ;
  
  (void)self;
  if ((nobjs < 0) || (nobjs > 0)) SWIG_fail;
  result = (std::vector< std::shared_ptr< dive::loads::IDirichlet > > *)new std::vector< std::shared_ptr< dive::loads::IDirichlet > >();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__shared_ptrT_dive__loads__IDirichlet_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_vecDirichlets__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< std::shared_ptr< dive::loads::IDirichlet > > *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  std::vector< std::shared_ptr< dive::loads::IDirichlet > > *result = 0 ;
  
  (void)self;
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  {
    std::vector< std::shared_ptr< dive::loads::IDirichlet >,std::allocator< std::shared_ptr< dive::loads::IDirichlet > > > *ptr = (std::vector< std::shared_ptr< dive::loads::IDirichlet >,std::allocator< std::shared_ptr< dive::loads::IDirichlet > > > *)0;
    res1 = swig::asptr(swig_obj[0], &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_vecDirichlets" "', argument " "1"" of type '" "std::vector< std::shared_ptr< dive::loads::IDirichlet > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_vecDirichlets" "', argument " "1"" of type '" "std::vector< std::shared_ptr< dive::loads::IDirichlet > > const &""'"); 
    }
    arg1 = ptr;
  }
  result = (std::vector< std::shared_ptr< dive::loads::IDirichlet > > *)new std::vector< std::shared_ptr< dive::loads::IDirichlet > >((std::vector< std::shared_ptr< dive::loads::IDirichlet > > const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__shared_ptrT_dive__loads__IDirichlet_t_t, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_vecDirichlets_empty(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::shared_ptr< dive::loads::IDirichlet > > *arg1 = (std::vector< std::shared_ptr< dive::loads::IDirichlet > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__shared_ptrT_dive__loads__IDirichlet_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vecDirichlets_empty" "', argument " "1"" of type '" "std::vector< std::shared_ptr< dive::loads::IDirichlet > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::shared_ptr< dive::loads::IDirichlet > > * >(argp1);
  result = (bool)((std::vector< std::shared_ptr< dive::loads::IDirichlet > > const *)arg1)->empty();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vecDirichlets_size(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::shared_ptr< dive::loads::IDirichlet > > *arg1 = (std::vector< std::shared_ptr< dive::loads::IDirichlet > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< std::shared_ptr< dive::loads::IDirichlet > >::size_type result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__shared_ptrT_dive__loads__IDirichlet_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vecDirichlets_size" "', argument " "1"" of type '" "std::vector< std::shared_ptr< dive::loads::IDirichlet > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::shared_ptr< dive::loads::IDirichlet > > * >(argp1);
  result = ((std::vector< std::shared_ptr< dive::loads::IDirichlet > > const *)arg1)->size();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vecDirichlets_swap(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::shared_ptr< dive::loads::IDirichlet > > *arg1 = (std::vector< std::shared_ptr< dive::loads::IDirichlet > > *) 0 ;
  std::vector< std::shared_ptr< dive::loads::IDirichlet > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "vecDirichlets_swap", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__shared_ptrT_dive__loads__IDirichlet_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vecDirichlets_swap" "', argument " "1"" of type '" "std::vector< std::shared_ptr< dive::loads::IDirichlet > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::shared_ptr< dive::loads::IDirichlet > > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_std__vectorT_std__shared_ptrT_dive__loads__IDirichlet_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "vecDirichlets_swap" "', argument " "2"" of type '" "std::vector< std::shared_ptr< dive::loads::IDirichlet > > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vecDirichlets_swap" "', argument " "2"" of type '" "std::vector< std::shared_ptr< dive::loads::IDirichlet > > &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< std::shared_ptr< dive::loads::IDirichlet > > * >(argp2);
  (arg1)->swap(*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vecDirichlets_begin(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::shared_ptr< dive::loads::IDirichlet > > *arg1 = (std::vector< std::shared_ptr< dive::loads::IDirichlet > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< std::shared_ptr< dive::loads::IDirichlet > >::iterator result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__shared_ptrT_dive__loads__IDirichlet_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vecDirichlets_begin" "', argument " "1"" of type '" "std::vector< std::shared_ptr< dive::loads::IDirichlet > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::shared_ptr< dive::loads::IDirichlet > > * >(argp1);
  result = (arg1)->begin();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< std::shared_ptr< dive::loads::IDirichlet > >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vecDirichlets_end(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::shared_ptr< dive::loads::IDirichlet > > *arg1 = (std::vector< std::shared_ptr< dive::loads::IDirichlet > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< std::shared_ptr< dive::loads::IDirichlet > >::iterator result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__shared_ptrT_dive__loads__IDirichlet_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vecDirichlets_end" "', argument " "1"" of type '" "std::vector< std::shared_ptr< dive::loads::IDirichlet > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::shared_ptr< dive::loads::IDirichlet > > * >(argp1);
  result = (arg1)->end();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< std::shared_ptr< dive::loads::IDirichlet > >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vecDirichlets_rbegin(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::shared_ptr< dive::loads::IDirichlet > > *arg1 = (std::vector< std::shared_ptr< dive::loads::IDirichlet > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< std::shared_ptr< dive::loads::IDirichlet > >::reverse_iterator result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__shared_ptrT_dive__loads__IDirichlet_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vecDirichlets_rbegin" "', argument " "1"" of type '" "std::vector< std::shared_ptr< dive::loads::IDirichlet > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::shared_ptr< dive::loads::IDirichlet > > * >(argp1);
  result = (arg1)->rbegin();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< std::shared_ptr< dive::loads::IDirichlet > >::reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vecDirichlets_rend(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::shared_ptr< dive::loads::IDirichlet > > *arg1 = (std::vector< std::shared_ptr< dive::loads::IDirichlet > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< std::shared_ptr< dive::loads::IDirichlet > >::reverse_iterator result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__shared_ptrT_dive__loads__IDirichlet_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vecDirichlets_rend" "', argument " "1"" of type '" "std::vector< std::shared_ptr< dive::loads::IDirichlet > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::shared_ptr< dive::loads::IDirichlet > > * >(argp1);
  result = (arg1)->rend();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< std::shared_ptr< dive::loads::IDirichlet > >::reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vecDirichlets_clear(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::shared_ptr< dive::loads::IDirichlet > > *arg1 = (std::vector< std::shared_ptr< dive::loads::IDirichlet > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__shared_ptrT_dive__loads__IDirichlet_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vecDirichlets_clear" "', argument " "1"" of type '" "std::vector< std::shared_ptr< dive::loads::IDirichlet > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::shared_ptr< dive::loads::IDirichlet > > * >(argp1);
  (arg1)->clear();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vecDirichlets_get_allocator(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::shared_ptr< dive::loads::IDirichlet > > *arg1 = (std::vector< std::shared_ptr< dive::loads::IDirichlet > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  SwigValueWrapper< std::allocator< std::shared_ptr< dive::loads::IDirichlet > > > result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__shared_ptrT_dive__loads__IDirichlet_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vecDirichlets_get_allocator" "', argument " "1"" of type '" "std::vector< std::shared_ptr< dive::loads::IDirichlet > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::shared_ptr< dive::loads::IDirichlet > > * >(argp1);
  result = ((std::vector< std::shared_ptr< dive::loads::IDirichlet > > const *)arg1)->get_allocator();
  resultobj = SWIG_NewPointerObj((new std::vector< std::shared_ptr< dive::loads::IDirichlet > >::allocator_type(result)), SWIGTYPE_p_std__allocatorT_std__shared_ptrT_dive__loads__IDirichlet_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_vecDirichlets__SWIG_2(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< std::shared_ptr< dive::loads::IDirichlet > >::size_type arg1 ;
  size_t val1 ;
  int ecode1 = 0 ;
  std::vector< std::shared_ptr< dive::loads::IDirichlet > > *result = 0 ;
  
  (void)self;
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_vecDirichlets" "', argument " "1"" of type '" "std::vector< std::shared_ptr< dive::loads::IDirichlet > >::size_type""'");
  } 
  arg1 = static_cast< std::vector< std::shared_ptr< dive::loads::IDirichlet > >::size_type >(val1);
  result = (std::vector< std::shared_ptr< dive::loads::IDirichlet > > *)new std::vector< std::shared_ptr< dive::loads::IDirichlet > >(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__shared_ptrT_dive__loads__IDirichlet_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vecDirichlets_pop_back(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::shared_ptr< dive::loads::IDirichlet > > *arg1 = (std::vector< std::shared_ptr< dive::loads::IDirichlet > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__shared_ptrT_dive__loads__IDirichlet_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vecDirichlets_pop_back" "', argument " "1"" of type '" "std::vector< std::shared_ptr< dive::loads::IDirichlet > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::shared_ptr< dive::loads::IDirichlet > > * >(argp1);
  (arg1)->pop_back();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vecDirichlets_resize__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< std::shared_ptr< dive::loads::IDirichlet > > *arg1 = (std::vector< std::shared_ptr< dive::loads::IDirichlet > > *) 0 ;
  std::vector< std::shared_ptr< dive::loads::IDirichlet > >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__shared_ptrT_dive__loads__IDirichlet_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vecDirichlets_resize" "', argument " "1"" of type '" "std::vector< std::shared_ptr< dive::loads::IDirichlet > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::shared_ptr< dive::loads::IDirichlet > > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vecDirichlets_resize" "', argument " "2"" of type '" "std::vector< std::shared_ptr< dive::loads::IDirichlet > >::size_type""'");
  } 
  arg2 = static_cast< std::vector< std::shared_ptr< dive::loads::IDirichlet > >::size_type >(val2);
  (arg1)->resize(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vecDirichlets_erase__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< std::shared_ptr< dive::loads::IDirichlet > > *arg1 = (std::vector< std::shared_ptr< dive::loads::IDirichlet > > *) 0 ;
  std::vector< std::shared_ptr< dive::loads::IDirichlet > >::iterator arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  std::vector< std::shared_ptr< dive::loads::IDirichlet > >::iterator result;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__shared_ptrT_dive__loads__IDirichlet_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vecDirichlets_erase" "', argument " "1"" of type '" "std::vector< std::shared_ptr< dive::loads::IDirichlet > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::shared_ptr< dive::loads::IDirichlet > > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vecDirichlets_erase" "', argument " "2"" of type '" "std::vector< std::shared_ptr< dive::loads::IDirichlet > >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< std::shared_ptr< dive::loads::IDirichlet > >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< std::shared_ptr< dive::loads::IDirichlet > >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vecDirichlets_erase" "', argument " "2"" of type '" "std::vector< std::shared_ptr< dive::loads::IDirichlet > >::iterator""'");
    }
  }
  result = std_vector_Sl_std_shared_ptr_Sl_dive_loads_IDirichlet_Sg__Sg__erase__SWIG_0(arg1,SWIG_STD_MOVE(arg2));
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< std::shared_ptr< dive::loads::IDirichlet > >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vecDirichlets_erase__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< std::shared_ptr< dive::loads::IDirichlet > > *arg1 = (std::vector< std::shared_ptr< dive::loads::IDirichlet > > *) 0 ;
  std::vector< std::shared_ptr< dive::loads::IDirichlet > >::iterator arg2 ;
  std::vector< std::shared_ptr< dive::loads::IDirichlet > >::iterator arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  swig::SwigPyIterator *iter3 = 0 ;
  int res3 ;
  std::vector< std::shared_ptr< dive::loads::IDirichlet > >::iterator result;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__shared_ptrT_dive__loads__IDirichlet_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vecDirichlets_erase" "', argument " "1"" of type '" "std::vector< std::shared_ptr< dive::loads::IDirichlet > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::shared_ptr< dive::loads::IDirichlet > > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vecDirichlets_erase" "', argument " "2"" of type '" "std::vector< std::shared_ptr< dive::loads::IDirichlet > >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< std::shared_ptr< dive::loads::IDirichlet > >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< std::shared_ptr< dive::loads::IDirichlet > >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vecDirichlets_erase" "', argument " "2"" of type '" "std::vector< std::shared_ptr< dive::loads::IDirichlet > >::iterator""'");
    }
  }
  res3 = SWIG_ConvertPtr(swig_obj[2], SWIG_as_voidptrptr(&iter3), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res3) || !iter3) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vecDirichlets_erase" "', argument " "3"" of type '" "std::vector< std::shared_ptr< dive::loads::IDirichlet > >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< std::shared_ptr< dive::loads::IDirichlet > >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< std::shared_ptr< dive::loads::IDirichlet > >::iterator > *>(iter3);
    if (iter_t) {
      arg3 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vecDirichlets_erase" "', argument " "3"" of type '" "std::vector< std::shared_ptr< dive::loads::IDirichlet > >::iterator""'");
    }
  }
  result = std_vector_Sl_std_shared_ptr_Sl_dive_loads_IDirichlet_Sg__Sg__erase__SWIG_1(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3));
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< std::shared_ptr< dive::loads::IDirichlet > >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vecDirichlets_erase(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "vecDirichlets_erase", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< std::shared_ptr< dive::loads::IDirichlet >,std::allocator< std::shared_ptr< dive::loads::IDirichlet > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< std::shared_ptr< dive::loads::IDirichlet > >::iterator > *>(iter) != 0));
      if (_v) {
        return _wrap_vecDirichlets_erase__SWIG_0(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< std::shared_ptr< dive::loads::IDirichlet >,std::allocator< std::shared_ptr< dive::loads::IDirichlet > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< std::shared_ptr< dive::loads::IDirichlet > >::iterator > *>(iter) != 0));
      if (_v) {
        swig::SwigPyIterator *iter = 0;
        int res = SWIG_ConvertPtr(argv[2], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
        _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< std::shared_ptr< dive::loads::IDirichlet > >::iterator > *>(iter) != 0));
        if (_v) {
          return _wrap_vecDirichlets_erase__SWIG_1(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'vecDirichlets_erase'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< std::shared_ptr< dive::loads::IDirichlet > >::erase(std::vector< std::shared_ptr< dive::loads::IDirichlet > >::iterator)\n"
    "    std::vector< std::shared_ptr< dive::loads::IDirichlet > >::erase(std::vector< std::shared_ptr< dive::loads::IDirichlet > >::iterator,std::vector< std::shared_ptr< dive::loads::IDirichlet > >::iterator)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_new_vecDirichlets__SWIG_3(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< std::shared_ptr< dive::loads::IDirichlet > >::size_type arg1 ;
  std::vector< std::shared_ptr< dive::loads::IDirichlet > >::value_type *arg2 = 0 ;
  size_t val1 ;
  int ecode1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  std::vector< std::shared_ptr< dive::loads::IDirichlet > >::value_type tempshared2 ;
  std::vector< std::shared_ptr< dive::loads::IDirichlet > > *result = 0 ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_vecDirichlets" "', argument " "1"" of type '" "std::vector< std::shared_ptr< dive::loads::IDirichlet > >::size_type""'");
  } 
  arg1 = static_cast< std::vector< std::shared_ptr< dive::loads::IDirichlet > >::size_type >(val1);
  {
    int newmem = 0;
    res2 = SWIG_ConvertPtrAndOwn(swig_obj[1], &argp2, SWIGTYPE_p_std__shared_ptrT_dive__loads__IDirichlet_t,  0 , &newmem);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_vecDirichlets" "', argument " "2"" of type '" "std::vector< std::shared_ptr< dive::loads::IDirichlet > >::value_type const &""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      if (argp2) tempshared2 = *reinterpret_cast< std::vector< std::shared_ptr< dive::loads::IDirichlet > >::value_type * >(argp2);
      delete reinterpret_cast< std::vector< std::shared_ptr< dive::loads::IDirichlet > >::value_type * >(argp2);
      arg2 = &tempshared2;
    } else {
      arg2 = (argp2) ? reinterpret_cast< std::vector< std::shared_ptr< dive::loads::IDirichlet > >::value_type * >(argp2) : &tempshared2;
    }
  }
  result = (std::vector< std::shared_ptr< dive::loads::IDirichlet > > *)new std::vector< std::shared_ptr< dive::loads::IDirichlet > >(arg1,(std::vector< std::shared_ptr< dive::loads::IDirichlet > >::value_type const &)*arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__shared_ptrT_dive__loads__IDirichlet_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_vecDirichlets(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "new_vecDirichlets", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 0) {
    return _wrap_new_vecDirichlets__SWIG_0(self, argc, argv);
  }
  if (argc == 1) {
    int _v = 0;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_vecDirichlets__SWIG_2(self, argc, argv);
    }
  }
  if (argc == 1) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< std::shared_ptr< dive::loads::IDirichlet >,std::allocator< std::shared_ptr< dive::loads::IDirichlet > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_vecDirichlets__SWIG_1(self, argc, argv);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_std__shared_ptrT_dive__loads__IDirichlet_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_vecDirichlets__SWIG_3(self, argc, argv);
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'new_vecDirichlets'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< std::shared_ptr< dive::loads::IDirichlet > >::vector()\n"
    "    std::vector< std::shared_ptr< dive::loads::IDirichlet > >::vector(std::vector< std::shared_ptr< dive::loads::IDirichlet > > const &)\n"
    "    std::vector< std::shared_ptr< dive::loads::IDirichlet > >::vector(std::vector< std::shared_ptr< dive::loads::IDirichlet > >::size_type)\n"
    "    std::vector< std::shared_ptr< dive::loads::IDirichlet > >::vector(std::vector< std::shared_ptr< dive::loads::IDirichlet > >::size_type,std::vector< std::shared_ptr< dive::loads::IDirichlet > >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_vecDirichlets_push_back(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::shared_ptr< dive::loads::IDirichlet > > *arg1 = (std::vector< std::shared_ptr< dive::loads::IDirichlet > > *) 0 ;
  std::vector< std::shared_ptr< dive::loads::IDirichlet > >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  std::vector< std::shared_ptr< dive::loads::IDirichlet > >::value_type tempshared2 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "vecDirichlets_push_back", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__shared_ptrT_dive__loads__IDirichlet_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vecDirichlets_push_back" "', argument " "1"" of type '" "std::vector< std::shared_ptr< dive::loads::IDirichlet > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::shared_ptr< dive::loads::IDirichlet > > * >(argp1);
  {
    int newmem = 0;
    res2 = SWIG_ConvertPtrAndOwn(swig_obj[1], &argp2, SWIGTYPE_p_std__shared_ptrT_dive__loads__IDirichlet_t,  0 , &newmem);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "vecDirichlets_push_back" "', argument " "2"" of type '" "std::vector< std::shared_ptr< dive::loads::IDirichlet > >::value_type const &""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      if (argp2) tempshared2 = *reinterpret_cast< std::vector< std::shared_ptr< dive::loads::IDirichlet > >::value_type * >(argp2);
      delete reinterpret_cast< std::vector< std::shared_ptr< dive::loads::IDirichlet > >::value_type * >(argp2);
      arg2 = &tempshared2;
    } else {
      arg2 = (argp2) ? reinterpret_cast< std::vector< std::shared_ptr< dive::loads::IDirichlet > >::value_type * >(argp2) : &tempshared2;
    }
  }
  (arg1)->push_back((std::vector< std::shared_ptr< dive::loads::IDirichlet > >::value_type const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vecDirichlets_front(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::shared_ptr< dive::loads::IDirichlet > > *arg1 = (std::vector< std::shared_ptr< dive::loads::IDirichlet > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< std::shared_ptr< dive::loads::IDirichlet > >::value_type *result = 0 ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__shared_ptrT_dive__loads__IDirichlet_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vecDirichlets_front" "', argument " "1"" of type '" "std::vector< std::shared_ptr< dive::loads::IDirichlet > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::shared_ptr< dive::loads::IDirichlet > > * >(argp1);
  result = (std::vector< std::shared_ptr< dive::loads::IDirichlet > >::value_type *) &((std::vector< std::shared_ptr< dive::loads::IDirichlet > > const *)arg1)->front();
  {
    std::shared_ptr<  dive::loads::IDirichlet > *smartresult = *result ? new std::shared_ptr<  dive::loads::IDirichlet >(*result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_std__shared_ptrT_dive__loads__IDirichlet_t, SWIG_POINTER_OWN);
  }
  (void)swig::container_owner<swig::traits<std::vector< std::shared_ptr< dive::loads::IDirichlet > >::value_type>::category>::back_reference(resultobj, swig_obj[0]);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vecDirichlets_back(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::shared_ptr< dive::loads::IDirichlet > > *arg1 = (std::vector< std::shared_ptr< dive::loads::IDirichlet > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< std::shared_ptr< dive::loads::IDirichlet > >::value_type *result = 0 ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__shared_ptrT_dive__loads__IDirichlet_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vecDirichlets_back" "', argument " "1"" of type '" "std::vector< std::shared_ptr< dive::loads::IDirichlet > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::shared_ptr< dive::loads::IDirichlet > > * >(argp1);
  result = (std::vector< std::shared_ptr< dive::loads::IDirichlet > >::value_type *) &((std::vector< std::shared_ptr< dive::loads::IDirichlet > > const *)arg1)->back();
  {
    std::shared_ptr<  dive::loads::IDirichlet > *smartresult = *result ? new std::shared_ptr<  dive::loads::IDirichlet >(*result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_std__shared_ptrT_dive__loads__IDirichlet_t, SWIG_POINTER_OWN);
  }
  (void)swig::container_owner<swig::traits<std::vector< std::shared_ptr< dive::loads::IDirichlet > >::value_type>::category>::back_reference(resultobj, swig_obj[0]);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vecDirichlets_assign(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::shared_ptr< dive::loads::IDirichlet > > *arg1 = (std::vector< std::shared_ptr< dive::loads::IDirichlet > > *) 0 ;
  std::vector< std::shared_ptr< dive::loads::IDirichlet > >::size_type arg2 ;
  std::vector< std::shared_ptr< dive::loads::IDirichlet > >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  std::vector< std::shared_ptr< dive::loads::IDirichlet > >::value_type tempshared3 ;
  PyObject *swig_obj[3] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "vecDirichlets_assign", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__shared_ptrT_dive__loads__IDirichlet_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vecDirichlets_assign" "', argument " "1"" of type '" "std::vector< std::shared_ptr< dive::loads::IDirichlet > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::shared_ptr< dive::loads::IDirichlet > > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vecDirichlets_assign" "', argument " "2"" of type '" "std::vector< std::shared_ptr< dive::loads::IDirichlet > >::size_type""'");
  } 
  arg2 = static_cast< std::vector< std::shared_ptr< dive::loads::IDirichlet > >::size_type >(val2);
  {
    int newmem = 0;
    res3 = SWIG_ConvertPtrAndOwn(swig_obj[2], &argp3, SWIGTYPE_p_std__shared_ptrT_dive__loads__IDirichlet_t,  0 , &newmem);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "vecDirichlets_assign" "', argument " "3"" of type '" "std::vector< std::shared_ptr< dive::loads::IDirichlet > >::value_type const &""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      if (argp3) tempshared3 = *reinterpret_cast< std::vector< std::shared_ptr< dive::loads::IDirichlet > >::value_type * >(argp3);
      delete reinterpret_cast< std::vector< std::shared_ptr< dive::loads::IDirichlet > >::value_type * >(argp3);
      arg3 = &tempshared3;
    } else {
      arg3 = (argp3) ? reinterpret_cast< std::vector< std::shared_ptr< dive::loads::IDirichlet > >::value_type * >(argp3) : &tempshared3;
    }
  }
  (arg1)->assign(arg2,(std::vector< std::shared_ptr< dive::loads::IDirichlet > >::value_type const &)*arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vecDirichlets_resize__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< std::shared_ptr< dive::loads::IDirichlet > > *arg1 = (std::vector< std::shared_ptr< dive::loads::IDirichlet > > *) 0 ;
  std::vector< std::shared_ptr< dive::loads::IDirichlet > >::size_type arg2 ;
  std::vector< std::shared_ptr< dive::loads::IDirichlet > >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  std::vector< std::shared_ptr< dive::loads::IDirichlet > >::value_type tempshared3 ;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__shared_ptrT_dive__loads__IDirichlet_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vecDirichlets_resize" "', argument " "1"" of type '" "std::vector< std::shared_ptr< dive::loads::IDirichlet > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::shared_ptr< dive::loads::IDirichlet > > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vecDirichlets_resize" "', argument " "2"" of type '" "std::vector< std::shared_ptr< dive::loads::IDirichlet > >::size_type""'");
  } 
  arg2 = static_cast< std::vector< std::shared_ptr< dive::loads::IDirichlet > >::size_type >(val2);
  {
    int newmem = 0;
    res3 = SWIG_ConvertPtrAndOwn(swig_obj[2], &argp3, SWIGTYPE_p_std__shared_ptrT_dive__loads__IDirichlet_t,  0 , &newmem);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "vecDirichlets_resize" "', argument " "3"" of type '" "std::vector< std::shared_ptr< dive::loads::IDirichlet > >::value_type const &""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      if (argp3) tempshared3 = *reinterpret_cast< std::vector< std::shared_ptr< dive::loads::IDirichlet > >::value_type * >(argp3);
      delete reinterpret_cast< std::vector< std::shared_ptr< dive::loads::IDirichlet > >::value_type * >(argp3);
      arg3 = &tempshared3;
    } else {
      arg3 = (argp3) ? reinterpret_cast< std::vector< std::shared_ptr< dive::loads::IDirichlet > >::value_type * >(argp3) : &tempshared3;
    }
  }
  (arg1)->resize(arg2,(std::vector< std::shared_ptr< dive::loads::IDirichlet > >::value_type const &)*arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vecDirichlets_resize(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "vecDirichlets_resize", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< std::shared_ptr< dive::loads::IDirichlet >,std::allocator< std::shared_ptr< dive::loads::IDirichlet > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_vecDirichlets_resize__SWIG_0(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< std::shared_ptr< dive::loads::IDirichlet >,std::allocator< std::shared_ptr< dive::loads::IDirichlet > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_std__shared_ptrT_dive__loads__IDirichlet_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_vecDirichlets_resize__SWIG_1(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'vecDirichlets_resize'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< std::shared_ptr< dive::loads::IDirichlet > >::resize(std::vector< std::shared_ptr< dive::loads::IDirichlet > >::size_type)\n"
    "    std::vector< std::shared_ptr< dive::loads::IDirichlet > >::resize(std::vector< std::shared_ptr< dive::loads::IDirichlet > >::size_type,std::vector< std::shared_ptr< dive::loads::IDirichlet > >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_vecDirichlets_insert__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< std::shared_ptr< dive::loads::IDirichlet > > *arg1 = (std::vector< std::shared_ptr< dive::loads::IDirichlet > > *) 0 ;
  std::vector< std::shared_ptr< dive::loads::IDirichlet > >::iterator arg2 ;
  std::vector< std::shared_ptr< dive::loads::IDirichlet > >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  void *argp3 ;
  int res3 = 0 ;
  std::vector< std::shared_ptr< dive::loads::IDirichlet > >::value_type tempshared3 ;
  std::vector< std::shared_ptr< dive::loads::IDirichlet > >::iterator result;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__shared_ptrT_dive__loads__IDirichlet_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vecDirichlets_insert" "', argument " "1"" of type '" "std::vector< std::shared_ptr< dive::loads::IDirichlet > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::shared_ptr< dive::loads::IDirichlet > > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vecDirichlets_insert" "', argument " "2"" of type '" "std::vector< std::shared_ptr< dive::loads::IDirichlet > >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< std::shared_ptr< dive::loads::IDirichlet > >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< std::shared_ptr< dive::loads::IDirichlet > >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vecDirichlets_insert" "', argument " "2"" of type '" "std::vector< std::shared_ptr< dive::loads::IDirichlet > >::iterator""'");
    }
  }
  {
    int newmem = 0;
    res3 = SWIG_ConvertPtrAndOwn(swig_obj[2], &argp3, SWIGTYPE_p_std__shared_ptrT_dive__loads__IDirichlet_t,  0 , &newmem);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "vecDirichlets_insert" "', argument " "3"" of type '" "std::vector< std::shared_ptr< dive::loads::IDirichlet > >::value_type const &""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      if (argp3) tempshared3 = *reinterpret_cast< std::vector< std::shared_ptr< dive::loads::IDirichlet > >::value_type * >(argp3);
      delete reinterpret_cast< std::vector< std::shared_ptr< dive::loads::IDirichlet > >::value_type * >(argp3);
      arg3 = &tempshared3;
    } else {
      arg3 = (argp3) ? reinterpret_cast< std::vector< std::shared_ptr< dive::loads::IDirichlet > >::value_type * >(argp3) : &tempshared3;
    }
  }
  result = std_vector_Sl_std_shared_ptr_Sl_dive_loads_IDirichlet_Sg__Sg__insert__SWIG_0(arg1,SWIG_STD_MOVE(arg2),(std::shared_ptr< dive::loads::IDirichlet > const &)*arg3);
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< std::shared_ptr< dive::loads::IDirichlet > >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vecDirichlets_insert__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< std::shared_ptr< dive::loads::IDirichlet > > *arg1 = (std::vector< std::shared_ptr< dive::loads::IDirichlet > > *) 0 ;
  std::vector< std::shared_ptr< dive::loads::IDirichlet > >::iterator arg2 ;
  std::vector< std::shared_ptr< dive::loads::IDirichlet > >::size_type arg3 ;
  std::vector< std::shared_ptr< dive::loads::IDirichlet > >::value_type *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  size_t val3 ;
  int ecode3 = 0 ;
  void *argp4 ;
  int res4 = 0 ;
  std::vector< std::shared_ptr< dive::loads::IDirichlet > >::value_type tempshared4 ;
  
  (void)self;
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__shared_ptrT_dive__loads__IDirichlet_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vecDirichlets_insert" "', argument " "1"" of type '" "std::vector< std::shared_ptr< dive::loads::IDirichlet > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::shared_ptr< dive::loads::IDirichlet > > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vecDirichlets_insert" "', argument " "2"" of type '" "std::vector< std::shared_ptr< dive::loads::IDirichlet > >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< std::shared_ptr< dive::loads::IDirichlet > >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< std::shared_ptr< dive::loads::IDirichlet > >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vecDirichlets_insert" "', argument " "2"" of type '" "std::vector< std::shared_ptr< dive::loads::IDirichlet > >::iterator""'");
    }
  }
  ecode3 = SWIG_AsVal_size_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "vecDirichlets_insert" "', argument " "3"" of type '" "std::vector< std::shared_ptr< dive::loads::IDirichlet > >::size_type""'");
  } 
  arg3 = static_cast< std::vector< std::shared_ptr< dive::loads::IDirichlet > >::size_type >(val3);
  {
    int newmem = 0;
    res4 = SWIG_ConvertPtrAndOwn(swig_obj[3], &argp4, SWIGTYPE_p_std__shared_ptrT_dive__loads__IDirichlet_t,  0 , &newmem);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "vecDirichlets_insert" "', argument " "4"" of type '" "std::vector< std::shared_ptr< dive::loads::IDirichlet > >::value_type const &""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      if (argp4) tempshared4 = *reinterpret_cast< std::vector< std::shared_ptr< dive::loads::IDirichlet > >::value_type * >(argp4);
      delete reinterpret_cast< std::vector< std::shared_ptr< dive::loads::IDirichlet > >::value_type * >(argp4);
      arg4 = &tempshared4;
    } else {
      arg4 = (argp4) ? reinterpret_cast< std::vector< std::shared_ptr< dive::loads::IDirichlet > >::value_type * >(argp4) : &tempshared4;
    }
  }
  std_vector_Sl_std_shared_ptr_Sl_dive_loads_IDirichlet_Sg__Sg__insert__SWIG_1(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3),(std::shared_ptr< dive::loads::IDirichlet > const &)*arg4);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vecDirichlets_insert(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "vecDirichlets_insert", 0, 4, argv))) SWIG_fail;
  --argc;
  if (argc == 3) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< std::shared_ptr< dive::loads::IDirichlet >,std::allocator< std::shared_ptr< dive::loads::IDirichlet > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< std::shared_ptr< dive::loads::IDirichlet > >::iterator > *>(iter) != 0));
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_std__shared_ptrT_dive__loads__IDirichlet_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_vecDirichlets_insert__SWIG_0(self, argc, argv);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< std::shared_ptr< dive::loads::IDirichlet >,std::allocator< std::shared_ptr< dive::loads::IDirichlet > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< std::shared_ptr< dive::loads::IDirichlet > >::iterator > *>(iter) != 0));
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = SWIG_ConvertPtr(argv[3], 0, SWIGTYPE_p_std__shared_ptrT_dive__loads__IDirichlet_t, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_vecDirichlets_insert__SWIG_1(self, argc, argv);
          }
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'vecDirichlets_insert'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< std::shared_ptr< dive::loads::IDirichlet > >::insert(std::vector< std::shared_ptr< dive::loads::IDirichlet > >::iterator,std::vector< std::shared_ptr< dive::loads::IDirichlet > >::value_type const &)\n"
    "    std::vector< std::shared_ptr< dive::loads::IDirichlet > >::insert(std::vector< std::shared_ptr< dive::loads::IDirichlet > >::iterator,std::vector< std::shared_ptr< dive::loads::IDirichlet > >::size_type,std::vector< std::shared_ptr< dive::loads::IDirichlet > >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_vecDirichlets_reserve(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::shared_ptr< dive::loads::IDirichlet > > *arg1 = (std::vector< std::shared_ptr< dive::loads::IDirichlet > > *) 0 ;
  std::vector< std::shared_ptr< dive::loads::IDirichlet > >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "vecDirichlets_reserve", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__shared_ptrT_dive__loads__IDirichlet_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vecDirichlets_reserve" "', argument " "1"" of type '" "std::vector< std::shared_ptr< dive::loads::IDirichlet > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::shared_ptr< dive::loads::IDirichlet > > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vecDirichlets_reserve" "', argument " "2"" of type '" "std::vector< std::shared_ptr< dive::loads::IDirichlet > >::size_type""'");
  } 
  arg2 = static_cast< std::vector< std::shared_ptr< dive::loads::IDirichlet > >::size_type >(val2);
  (arg1)->reserve(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vecDirichlets_capacity(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::shared_ptr< dive::loads::IDirichlet > > *arg1 = (std::vector< std::shared_ptr< dive::loads::IDirichlet > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< std::shared_ptr< dive::loads::IDirichlet > >::size_type result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__shared_ptrT_dive__loads__IDirichlet_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vecDirichlets_capacity" "', argument " "1"" of type '" "std::vector< std::shared_ptr< dive::loads::IDirichlet > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::shared_ptr< dive::loads::IDirichlet > > * >(argp1);
  result = ((std::vector< std::shared_ptr< dive::loads::IDirichlet > > const *)arg1)->capacity();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_vecDirichlets(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::shared_ptr< dive::loads::IDirichlet > > *arg1 = (std::vector< std::shared_ptr< dive::loads::IDirichlet > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__shared_ptrT_dive__loads__IDirichlet_t_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_vecDirichlets" "', argument " "1"" of type '" "std::vector< std::shared_ptr< dive::loads::IDirichlet > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::shared_ptr< dive::loads::IDirichlet > > * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *vecDirichlets_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_std__vectorT_std__shared_ptrT_dive__loads__IDirichlet_t_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *vecDirichlets_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_vecLoads_iterator(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::shared_ptr< dive::loads::ILoad > > *arg1 = (std::vector< std::shared_ptr< dive::loads::ILoad > > *) 0 ;
  PyObject **arg2 = (PyObject **) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  swig::SwigPyIterator *result = 0 ;
  
  arg2 = &swig_obj[0];
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__shared_ptrT_dive__loads__ILoad_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vecLoads_iterator" "', argument " "1"" of type '" "std::vector< std::shared_ptr< dive::loads::ILoad > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::shared_ptr< dive::loads::ILoad > > * >(argp1);
  result = (swig::SwigPyIterator *)std_vector_Sl_std_shared_ptr_Sl_dive_loads_ILoad_Sg__Sg__iterator(arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vecLoads___nonzero__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::shared_ptr< dive::loads::ILoad > > *arg1 = (std::vector< std::shared_ptr< dive::loads::ILoad > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__shared_ptrT_dive__loads__ILoad_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vecLoads___nonzero__" "', argument " "1"" of type '" "std::vector< std::shared_ptr< dive::loads::ILoad > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::shared_ptr< dive::loads::ILoad > > * >(argp1);
  result = (bool)std_vector_Sl_std_shared_ptr_Sl_dive_loads_ILoad_Sg__Sg____nonzero__((std::vector< std::shared_ptr< dive::loads::ILoad > > const *)arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vecLoads___bool__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::shared_ptr< dive::loads::ILoad > > *arg1 = (std::vector< std::shared_ptr< dive::loads::ILoad > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__shared_ptrT_dive__loads__ILoad_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vecLoads___bool__" "', argument " "1"" of type '" "std::vector< std::shared_ptr< dive::loads::ILoad > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::shared_ptr< dive::loads::ILoad > > * >(argp1);
  result = (bool)std_vector_Sl_std_shared_ptr_Sl_dive_loads_ILoad_Sg__Sg____bool__((std::vector< std::shared_ptr< dive::loads::ILoad > > const *)arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vecLoads___len__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::shared_ptr< dive::loads::ILoad > > *arg1 = (std::vector< std::shared_ptr< dive::loads::ILoad > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< std::shared_ptr< dive::loads::ILoad > >::size_type result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__shared_ptrT_dive__loads__ILoad_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vecLoads___len__" "', argument " "1"" of type '" "std::vector< std::shared_ptr< dive::loads::ILoad > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::shared_ptr< dive::loads::ILoad > > * >(argp1);
  result = std_vector_Sl_std_shared_ptr_Sl_dive_loads_ILoad_Sg__Sg____len__((std::vector< std::shared_ptr< dive::loads::ILoad > > const *)arg1);
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vecLoads___getslice__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::shared_ptr< dive::loads::ILoad > > *arg1 = (std::vector< std::shared_ptr< dive::loads::ILoad > > *) 0 ;
  std::vector< std::shared_ptr< dive::loads::ILoad > >::difference_type arg2 ;
  std::vector< std::shared_ptr< dive::loads::ILoad > >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  std::vector< std::shared_ptr< dive::loads::ILoad >,std::allocator< std::shared_ptr< dive::loads::ILoad > > > *result = 0 ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "vecLoads___getslice__", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__shared_ptrT_dive__loads__ILoad_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vecLoads___getslice__" "', argument " "1"" of type '" "std::vector< std::shared_ptr< dive::loads::ILoad > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::shared_ptr< dive::loads::ILoad > > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vecLoads___getslice__" "', argument " "2"" of type '" "std::vector< std::shared_ptr< dive::loads::ILoad > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< std::shared_ptr< dive::loads::ILoad > >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "vecLoads___getslice__" "', argument " "3"" of type '" "std::vector< std::shared_ptr< dive::loads::ILoad > >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< std::shared_ptr< dive::loads::ILoad > >::difference_type >(val3);
  try {
    result = (std::vector< std::shared_ptr< dive::loads::ILoad >,std::allocator< std::shared_ptr< dive::loads::ILoad > > > *)std_vector_Sl_std_shared_ptr_Sl_dive_loads_ILoad_Sg__Sg____getslice__(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3));
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__shared_ptrT_dive__loads__ILoad_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vecLoads___setslice____SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< std::shared_ptr< dive::loads::ILoad > > *arg1 = (std::vector< std::shared_ptr< dive::loads::ILoad > > *) 0 ;
  std::vector< std::shared_ptr< dive::loads::ILoad > >::difference_type arg2 ;
  std::vector< std::shared_ptr< dive::loads::ILoad > >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__shared_ptrT_dive__loads__ILoad_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vecLoads___setslice__" "', argument " "1"" of type '" "std::vector< std::shared_ptr< dive::loads::ILoad > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::shared_ptr< dive::loads::ILoad > > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vecLoads___setslice__" "', argument " "2"" of type '" "std::vector< std::shared_ptr< dive::loads::ILoad > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< std::shared_ptr< dive::loads::ILoad > >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "vecLoads___setslice__" "', argument " "3"" of type '" "std::vector< std::shared_ptr< dive::loads::ILoad > >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< std::shared_ptr< dive::loads::ILoad > >::difference_type >(val3);
  try {
    std_vector_Sl_std_shared_ptr_Sl_dive_loads_ILoad_Sg__Sg____setslice____SWIG_0(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3));
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vecLoads___setslice____SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< std::shared_ptr< dive::loads::ILoad > > *arg1 = (std::vector< std::shared_ptr< dive::loads::ILoad > > *) 0 ;
  std::vector< std::shared_ptr< dive::loads::ILoad > >::difference_type arg2 ;
  std::vector< std::shared_ptr< dive::loads::ILoad > >::difference_type arg3 ;
  std::vector< std::shared_ptr< dive::loads::ILoad >,std::allocator< std::shared_ptr< dive::loads::ILoad > > > *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  
  (void)self;
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__shared_ptrT_dive__loads__ILoad_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vecLoads___setslice__" "', argument " "1"" of type '" "std::vector< std::shared_ptr< dive::loads::ILoad > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::shared_ptr< dive::loads::ILoad > > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vecLoads___setslice__" "', argument " "2"" of type '" "std::vector< std::shared_ptr< dive::loads::ILoad > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< std::shared_ptr< dive::loads::ILoad > >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "vecLoads___setslice__" "', argument " "3"" of type '" "std::vector< std::shared_ptr< dive::loads::ILoad > >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< std::shared_ptr< dive::loads::ILoad > >::difference_type >(val3);
  {
    std::vector< std::shared_ptr< dive::loads::ILoad >,std::allocator< std::shared_ptr< dive::loads::ILoad > > > *ptr = (std::vector< std::shared_ptr< dive::loads::ILoad >,std::allocator< std::shared_ptr< dive::loads::ILoad > > > *)0;
    res4 = swig::asptr(swig_obj[3], &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "vecLoads___setslice__" "', argument " "4"" of type '" "std::vector< std::shared_ptr< dive::loads::ILoad >,std::allocator< std::shared_ptr< dive::loads::ILoad > > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vecLoads___setslice__" "', argument " "4"" of type '" "std::vector< std::shared_ptr< dive::loads::ILoad >,std::allocator< std::shared_ptr< dive::loads::ILoad > > > const &""'"); 
    }
    arg4 = ptr;
  }
  try {
    std_vector_Sl_std_shared_ptr_Sl_dive_loads_ILoad_Sg__Sg____setslice____SWIG_1(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3),(std::vector< std::shared_ptr< dive::loads::ILoad >,std::allocator< std::shared_ptr< dive::loads::ILoad > > > const &)*arg4);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_vecLoads___setslice__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "vecLoads___setslice__", 0, 4, argv))) SWIG_fail;
  --argc;
  if (argc == 3) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< std::shared_ptr< dive::loads::ILoad >,std::allocator< std::shared_ptr< dive::loads::ILoad > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_ptrdiff_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_vecLoads___setslice____SWIG_0(self, argc, argv);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< std::shared_ptr< dive::loads::ILoad >,std::allocator< std::shared_ptr< dive::loads::ILoad > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_ptrdiff_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = swig::asptr(argv[3], (std::vector< std::shared_ptr< dive::loads::ILoad >,std::allocator< std::shared_ptr< dive::loads::ILoad > > >**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_vecLoads___setslice____SWIG_1(self, argc, argv);
          }
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'vecLoads___setslice__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< std::shared_ptr< dive::loads::ILoad > >::__setslice__(std::vector< std::shared_ptr< dive::loads::ILoad > >::difference_type,std::vector< std::shared_ptr< dive::loads::ILoad > >::difference_type)\n"
    "    std::vector< std::shared_ptr< dive::loads::ILoad > >::__setslice__(std::vector< std::shared_ptr< dive::loads::ILoad > >::difference_type,std::vector< std::shared_ptr< dive::loads::ILoad > >::difference_type,std::vector< std::shared_ptr< dive::loads::ILoad >,std::allocator< std::shared_ptr< dive::loads::ILoad > > > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_vecLoads___delslice__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::shared_ptr< dive::loads::ILoad > > *arg1 = (std::vector< std::shared_ptr< dive::loads::ILoad > > *) 0 ;
  std::vector< std::shared_ptr< dive::loads::ILoad > >::difference_type arg2 ;
  std::vector< std::shared_ptr< dive::loads::ILoad > >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "vecLoads___delslice__", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__shared_ptrT_dive__loads__ILoad_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vecLoads___delslice__" "', argument " "1"" of type '" "std::vector< std::shared_ptr< dive::loads::ILoad > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::shared_ptr< dive::loads::ILoad > > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vecLoads___delslice__" "', argument " "2"" of type '" "std::vector< std::shared_ptr< dive::loads::ILoad > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< std::shared_ptr< dive::loads::ILoad > >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "vecLoads___delslice__" "', argument " "3"" of type '" "std::vector< std::shared_ptr< dive::loads::ILoad > >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< std::shared_ptr< dive::loads::ILoad > >::difference_type >(val3);
  try {
    std_vector_Sl_std_shared_ptr_Sl_dive_loads_ILoad_Sg__Sg____delslice__(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3));
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vecLoads___delitem____SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< std::shared_ptr< dive::loads::ILoad > > *arg1 = (std::vector< std::shared_ptr< dive::loads::ILoad > > *) 0 ;
  std::vector< std::shared_ptr< dive::loads::ILoad > >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__shared_ptrT_dive__loads__ILoad_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vecLoads___delitem__" "', argument " "1"" of type '" "std::vector< std::shared_ptr< dive::loads::ILoad > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::shared_ptr< dive::loads::ILoad > > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vecLoads___delitem__" "', argument " "2"" of type '" "std::vector< std::shared_ptr< dive::loads::ILoad > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< std::shared_ptr< dive::loads::ILoad > >::difference_type >(val2);
  try {
    std_vector_Sl_std_shared_ptr_Sl_dive_loads_ILoad_Sg__Sg____delitem____SWIG_0(arg1,SWIG_STD_MOVE(arg2));
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vecLoads___getitem____SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< std::shared_ptr< dive::loads::ILoad > > *arg1 = (std::vector< std::shared_ptr< dive::loads::ILoad > > *) 0 ;
  SWIGPY_SLICEOBJECT *arg2 = (SWIGPY_SLICEOBJECT *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< std::shared_ptr< dive::loads::ILoad >,std::allocator< std::shared_ptr< dive::loads::ILoad > > > *result = 0 ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__shared_ptrT_dive__loads__ILoad_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vecLoads___getitem__" "', argument " "1"" of type '" "std::vector< std::shared_ptr< dive::loads::ILoad > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::shared_ptr< dive::loads::ILoad > > * >(argp1);
  {
    if (!PySlice_Check(swig_obj[1])) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vecLoads___getitem__" "', argument " "2"" of type '" "SWIGPY_SLICEOBJECT *""'");
    }
    arg2 = (SWIGPY_SLICEOBJECT *) swig_obj[1];
  }
  try {
    result = (std::vector< std::shared_ptr< dive::loads::ILoad >,std::allocator< std::shared_ptr< dive::loads::ILoad > > > *)std_vector_Sl_std_shared_ptr_Sl_dive_loads_ILoad_Sg__Sg____getitem____SWIG_0(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__shared_ptrT_dive__loads__ILoad_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vecLoads___setitem____SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< std::shared_ptr< dive::loads::ILoad > > *arg1 = (std::vector< std::shared_ptr< dive::loads::ILoad > > *) 0 ;
  SWIGPY_SLICEOBJECT *arg2 = (SWIGPY_SLICEOBJECT *) 0 ;
  std::vector< std::shared_ptr< dive::loads::ILoad >,std::allocator< std::shared_ptr< dive::loads::ILoad > > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__shared_ptrT_dive__loads__ILoad_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vecLoads___setitem__" "', argument " "1"" of type '" "std::vector< std::shared_ptr< dive::loads::ILoad > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::shared_ptr< dive::loads::ILoad > > * >(argp1);
  {
    if (!PySlice_Check(swig_obj[1])) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vecLoads___setitem__" "', argument " "2"" of type '" "SWIGPY_SLICEOBJECT *""'");
    }
    arg2 = (SWIGPY_SLICEOBJECT *) swig_obj[1];
  }
  {
    std::vector< std::shared_ptr< dive::loads::ILoad >,std::allocator< std::shared_ptr< dive::loads::ILoad > > > *ptr = (std::vector< std::shared_ptr< dive::loads::ILoad >,std::allocator< std::shared_ptr< dive::loads::ILoad > > > *)0;
    res3 = swig::asptr(swig_obj[2], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "vecLoads___setitem__" "', argument " "3"" of type '" "std::vector< std::shared_ptr< dive::loads::ILoad >,std::allocator< std::shared_ptr< dive::loads::ILoad > > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vecLoads___setitem__" "', argument " "3"" of type '" "std::vector< std::shared_ptr< dive::loads::ILoad >,std::allocator< std::shared_ptr< dive::loads::ILoad > > > const &""'"); 
    }
    arg3 = ptr;
  }
  try {
    std_vector_Sl_std_shared_ptr_Sl_dive_loads_ILoad_Sg__Sg____setitem____SWIG_0(arg1,arg2,(std::vector< std::shared_ptr< dive::loads::ILoad >,std::allocator< std::shared_ptr< dive::loads::ILoad > > > const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_vecLoads___setitem____SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< std::shared_ptr< dive::loads::ILoad > > *arg1 = (std::vector< std::shared_ptr< dive::loads::ILoad > > *) 0 ;
  SWIGPY_SLICEOBJECT *arg2 = (SWIGPY_SLICEOBJECT *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__shared_ptrT_dive__loads__ILoad_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vecLoads___setitem__" "', argument " "1"" of type '" "std::vector< std::shared_ptr< dive::loads::ILoad > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::shared_ptr< dive::loads::ILoad > > * >(argp1);
  {
    if (!PySlice_Check(swig_obj[1])) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vecLoads___setitem__" "', argument " "2"" of type '" "SWIGPY_SLICEOBJECT *""'");
    }
    arg2 = (SWIGPY_SLICEOBJECT *) swig_obj[1];
  }
  try {
    std_vector_Sl_std_shared_ptr_Sl_dive_loads_ILoad_Sg__Sg____setitem____SWIG_1(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vecLoads___delitem____SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< std::shared_ptr< dive::loads::ILoad > > *arg1 = (std::vector< std::shared_ptr< dive::loads::ILoad > > *) 0 ;
  SWIGPY_SLICEOBJECT *arg2 = (SWIGPY_SLICEOBJECT *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__shared_ptrT_dive__loads__ILoad_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vecLoads___delitem__" "', argument " "1"" of type '" "std::vector< std::shared_ptr< dive::loads::ILoad > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::shared_ptr< dive::loads::ILoad > > * >(argp1);
  {
    if (!PySlice_Check(swig_obj[1])) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vecLoads___delitem__" "', argument " "2"" of type '" "SWIGPY_SLICEOBJECT *""'");
    }
    arg2 = (SWIGPY_SLICEOBJECT *) swig_obj[1];
  }
  try {
    std_vector_Sl_std_shared_ptr_Sl_dive_loads_ILoad_Sg__Sg____delitem____SWIG_1(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vecLoads___delitem__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "vecLoads___delitem__", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< std::shared_ptr< dive::loads::ILoad >,std::allocator< std::shared_ptr< dive::loads::ILoad > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_vecLoads___delitem____SWIG_1(self, argc, argv);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< std::shared_ptr< dive::loads::ILoad >,std::allocator< std::shared_ptr< dive::loads::ILoad > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_vecLoads___delitem____SWIG_0(self, argc, argv);
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'vecLoads___delitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< std::shared_ptr< dive::loads::ILoad > >::__delitem__(std::vector< std::shared_ptr< dive::loads::ILoad > >::difference_type)\n"
    "    std::vector< std::shared_ptr< dive::loads::ILoad > >::__delitem__(SWIGPY_SLICEOBJECT *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_vecLoads___getitem____SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< std::shared_ptr< dive::loads::ILoad > > *arg1 = (std::vector< std::shared_ptr< dive::loads::ILoad > > *) 0 ;
  std::vector< std::shared_ptr< dive::loads::ILoad > >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  std::vector< std::shared_ptr< dive::loads::ILoad > >::value_type *result = 0 ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__shared_ptrT_dive__loads__ILoad_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vecLoads___getitem__" "', argument " "1"" of type '" "std::vector< std::shared_ptr< dive::loads::ILoad > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::shared_ptr< dive::loads::ILoad > > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vecLoads___getitem__" "', argument " "2"" of type '" "std::vector< std::shared_ptr< dive::loads::ILoad > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< std::shared_ptr< dive::loads::ILoad > >::difference_type >(val2);
  try {
    result = (std::vector< std::shared_ptr< dive::loads::ILoad > >::value_type *) &std_vector_Sl_std_shared_ptr_Sl_dive_loads_ILoad_Sg__Sg____getitem____SWIG_1((std::vector< std::shared_ptr< dive::loads::ILoad > > const *)arg1,SWIG_STD_MOVE(arg2));
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  {
    std::shared_ptr<  dive::loads::ILoad > *smartresult = *result ? new std::shared_ptr<  dive::loads::ILoad >(*result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_std__shared_ptrT_dive__loads__ILoad_t, SWIG_POINTER_OWN);
  }
  (void)swig::container_owner<swig::traits<std::vector< std::shared_ptr< dive::loads::ILoad > >::value_type>::category>::back_reference(resultobj, swig_obj[0]);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vecLoads___getitem__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "vecLoads___getitem__", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< std::shared_ptr< dive::loads::ILoad >,std::allocator< std::shared_ptr< dive::loads::ILoad > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_vecLoads___getitem____SWIG_0(self, argc, argv);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< std::shared_ptr< dive::loads::ILoad >,std::allocator< std::shared_ptr< dive::loads::ILoad > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_vecLoads___getitem____SWIG_1(self, argc, argv);
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'vecLoads___getitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< std::shared_ptr< dive::loads::ILoad > >::__getitem__(SWIGPY_SLICEOBJECT *)\n"
    "    std::vector< std::shared_ptr< dive::loads::ILoad > >::__getitem__(std::vector< std::shared_ptr< dive::loads::ILoad > >::difference_type) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_vecLoads___setitem____SWIG_2(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< std::shared_ptr< dive::loads::ILoad > > *arg1 = (std::vector< std::shared_ptr< dive::loads::ILoad > > *) 0 ;
  std::vector< std::shared_ptr< dive::loads::ILoad > >::difference_type arg2 ;
  std::vector< std::shared_ptr< dive::loads::ILoad > >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  std::vector< std::shared_ptr< dive::loads::ILoad > >::value_type tempshared3 ;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__shared_ptrT_dive__loads__ILoad_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vecLoads___setitem__" "', argument " "1"" of type '" "std::vector< std::shared_ptr< dive::loads::ILoad > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::shared_ptr< dive::loads::ILoad > > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vecLoads___setitem__" "', argument " "2"" of type '" "std::vector< std::shared_ptr< dive::loads::ILoad > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< std::shared_ptr< dive::loads::ILoad > >::difference_type >(val2);
  {
    int newmem = 0;
    res3 = SWIG_ConvertPtrAndOwn(swig_obj[2], &argp3, SWIGTYPE_p_std__shared_ptrT_dive__loads__ILoad_t,  0 , &newmem);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "vecLoads___setitem__" "', argument " "3"" of type '" "std::vector< std::shared_ptr< dive::loads::ILoad > >::value_type const &""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      if (argp3) tempshared3 = *reinterpret_cast< std::vector< std::shared_ptr< dive::loads::ILoad > >::value_type * >(argp3);
      delete reinterpret_cast< std::vector< std::shared_ptr< dive::loads::ILoad > >::value_type * >(argp3);
      arg3 = &tempshared3;
    } else {
      arg3 = (argp3) ? reinterpret_cast< std::vector< std::shared_ptr< dive::loads::ILoad > >::value_type * >(argp3) : &tempshared3;
    }
  }
  try {
    std_vector_Sl_std_shared_ptr_Sl_dive_loads_ILoad_Sg__Sg____setitem____SWIG_2(arg1,SWIG_STD_MOVE(arg2),(std::shared_ptr< dive::loads::ILoad > const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vecLoads___setitem__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "vecLoads___setitem__", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< std::shared_ptr< dive::loads::ILoad >,std::allocator< std::shared_ptr< dive::loads::ILoad > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_vecLoads___setitem____SWIG_1(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< std::shared_ptr< dive::loads::ILoad >,std::allocator< std::shared_ptr< dive::loads::ILoad > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        int res = swig::asptr(argv[2], (std::vector< std::shared_ptr< dive::loads::ILoad >,std::allocator< std::shared_ptr< dive::loads::ILoad > > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_vecLoads___setitem____SWIG_0(self, argc, argv);
        }
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< std::shared_ptr< dive::loads::ILoad >,std::allocator< std::shared_ptr< dive::loads::ILoad > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_std__shared_ptrT_dive__loads__ILoad_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_vecLoads___setitem____SWIG_2(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'vecLoads___setitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< std::shared_ptr< dive::loads::ILoad > >::__setitem__(SWIGPY_SLICEOBJECT *,std::vector< std::shared_ptr< dive::loads::ILoad >,std::allocator< std::shared_ptr< dive::loads::ILoad > > > const &)\n"
    "    std::vector< std::shared_ptr< dive::loads::ILoad > >::__setitem__(SWIGPY_SLICEOBJECT *)\n"
    "    std::vector< std::shared_ptr< dive::loads::ILoad > >::__setitem__(std::vector< std::shared_ptr< dive::loads::ILoad > >::difference_type,std::vector< std::shared_ptr< dive::loads::ILoad > >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_vecLoads_pop(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::shared_ptr< dive::loads::ILoad > > *arg1 = (std::vector< std::shared_ptr< dive::loads::ILoad > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< std::shared_ptr< dive::loads::ILoad > >::value_type result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__shared_ptrT_dive__loads__ILoad_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vecLoads_pop" "', argument " "1"" of type '" "std::vector< std::shared_ptr< dive::loads::ILoad > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::shared_ptr< dive::loads::ILoad > > * >(argp1);
  try {
    result = std_vector_Sl_std_shared_ptr_Sl_dive_loads_ILoad_Sg__Sg__pop(arg1);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  {
    std::shared_ptr<  dive::loads::ILoad > *smartresult = result ? new std::shared_ptr<  dive::loads::ILoad >(result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_std__shared_ptrT_dive__loads__ILoad_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vecLoads_append(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::shared_ptr< dive::loads::ILoad > > *arg1 = (std::vector< std::shared_ptr< dive::loads::ILoad > > *) 0 ;
  std::vector< std::shared_ptr< dive::loads::ILoad > >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  std::vector< std::shared_ptr< dive::loads::ILoad > >::value_type tempshared2 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "vecLoads_append", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__shared_ptrT_dive__loads__ILoad_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vecLoads_append" "', argument " "1"" of type '" "std::vector< std::shared_ptr< dive::loads::ILoad > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::shared_ptr< dive::loads::ILoad > > * >(argp1);
  {
    int newmem = 0;
    res2 = SWIG_ConvertPtrAndOwn(swig_obj[1], &argp2, SWIGTYPE_p_std__shared_ptrT_dive__loads__ILoad_t,  0 , &newmem);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "vecLoads_append" "', argument " "2"" of type '" "std::vector< std::shared_ptr< dive::loads::ILoad > >::value_type const &""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      if (argp2) tempshared2 = *reinterpret_cast< std::vector< std::shared_ptr< dive::loads::ILoad > >::value_type * >(argp2);
      delete reinterpret_cast< std::vector< std::shared_ptr< dive::loads::ILoad > >::value_type * >(argp2);
      arg2 = &tempshared2;
    } else {
      arg2 = (argp2) ? reinterpret_cast< std::vector< std::shared_ptr< dive::loads::ILoad > >::value_type * >(argp2) : &tempshared2;
    }
  }
  std_vector_Sl_std_shared_ptr_Sl_dive_loads_ILoad_Sg__Sg__append(arg1,(std::shared_ptr< dive::loads::ILoad > const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_vecLoads__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **SWIGUNUSEDPARM(swig_obj)) {
  PyObject *resultobj = 0;
  std::vector< std::shared_ptr< dive::loads::ILoad > > *result = 0 ;
  
  (void)self;
  if ((nobjs < 0) || (nobjs > 0)) SWIG_fail;
  result = (std::vector< std::shared_ptr< dive::loads::ILoad > > *)new std::vector< std::shared_ptr< dive::loads::ILoad > >();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__shared_ptrT_dive__loads__ILoad_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_vecLoads__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< std::shared_ptr< dive::loads::ILoad > > *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  std::vector< std::shared_ptr< dive::loads::ILoad > > *result = 0 ;
  
  (void)self;
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  {
    std::vector< std::shared_ptr< dive::loads::ILoad >,std::allocator< std::shared_ptr< dive::loads::ILoad > > > *ptr = (std::vector< std::shared_ptr< dive::loads::ILoad >,std::allocator< std::shared_ptr< dive::loads::ILoad > > > *)0;
    res1 = swig::asptr(swig_obj[0], &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_vecLoads" "', argument " "1"" of type '" "std::vector< std::shared_ptr< dive::loads::ILoad > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_vecLoads" "', argument " "1"" of type '" "std::vector< std::shared_ptr< dive::loads::ILoad > > const &""'"); 
    }
    arg1 = ptr;
  }
  result = (std::vector< std::shared_ptr< dive::loads::ILoad > > *)new std::vector< std::shared_ptr< dive::loads::ILoad > >((std::vector< std::shared_ptr< dive::loads::ILoad > > const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__shared_ptrT_dive__loads__ILoad_t_t, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_vecLoads_empty(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::shared_ptr< dive::loads::ILoad > > *arg1 = (std::vector< std::shared_ptr< dive::loads::ILoad > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__shared_ptrT_dive__loads__ILoad_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vecLoads_empty" "', argument " "1"" of type '" "std::vector< std::shared_ptr< dive::loads::ILoad > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::shared_ptr< dive::loads::ILoad > > * >(argp1);
  result = (bool)((std::vector< std::shared_ptr< dive::loads::ILoad > > const *)arg1)->empty();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vecLoads_size(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::shared_ptr< dive::loads::ILoad > > *arg1 = (std::vector< std::shared_ptr< dive::loads::ILoad > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< std::shared_ptr< dive::loads::ILoad > >::size_type result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__shared_ptrT_dive__loads__ILoad_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vecLoads_size" "', argument " "1"" of type '" "std::vector< std::shared_ptr< dive::loads::ILoad > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::shared_ptr< dive::loads::ILoad > > * >(argp1);
  result = ((std::vector< std::shared_ptr< dive::loads::ILoad > > const *)arg1)->size();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vecLoads_swap(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::shared_ptr< dive::loads::ILoad > > *arg1 = (std::vector< std::shared_ptr< dive::loads::ILoad > > *) 0 ;
  std::vector< std::shared_ptr< dive::loads::ILoad > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "vecLoads_swap", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__shared_ptrT_dive__loads__ILoad_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vecLoads_swap" "', argument " "1"" of type '" "std::vector< std::shared_ptr< dive::loads::ILoad > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::shared_ptr< dive::loads::ILoad > > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_std__vectorT_std__shared_ptrT_dive__loads__ILoad_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "vecLoads_swap" "', argument " "2"" of type '" "std::vector< std::shared_ptr< dive::loads::ILoad > > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vecLoads_swap" "', argument " "2"" of type '" "std::vector< std::shared_ptr< dive::loads::ILoad > > &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< std::shared_ptr< dive::loads::ILoad > > * >(argp2);
  (arg1)->swap(*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vecLoads_begin(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::shared_ptr< dive::loads::ILoad > > *arg1 = (std::vector< std::shared_ptr< dive::loads::ILoad > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< std::shared_ptr< dive::loads::ILoad > >::iterator result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__shared_ptrT_dive__loads__ILoad_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vecLoads_begin" "', argument " "1"" of type '" "std::vector< std::shared_ptr< dive::loads::ILoad > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::shared_ptr< dive::loads::ILoad > > * >(argp1);
  result = (arg1)->begin();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< std::shared_ptr< dive::loads::ILoad > >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vecLoads_end(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::shared_ptr< dive::loads::ILoad > > *arg1 = (std::vector< std::shared_ptr< dive::loads::ILoad > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< std::shared_ptr< dive::loads::ILoad > >::iterator result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__shared_ptrT_dive__loads__ILoad_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vecLoads_end" "', argument " "1"" of type '" "std::vector< std::shared_ptr< dive::loads::ILoad > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::shared_ptr< dive::loads::ILoad > > * >(argp1);
  result = (arg1)->end();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< std::shared_ptr< dive::loads::ILoad > >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vecLoads_rbegin(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::shared_ptr< dive::loads::ILoad > > *arg1 = (std::vector< std::shared_ptr< dive::loads::ILoad > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< std::shared_ptr< dive::loads::ILoad > >::reverse_iterator result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__shared_ptrT_dive__loads__ILoad_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vecLoads_rbegin" "', argument " "1"" of type '" "std::vector< std::shared_ptr< dive::loads::ILoad > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::shared_ptr< dive::loads::ILoad > > * >(argp1);
  result = (arg1)->rbegin();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< std::shared_ptr< dive::loads::ILoad > >::reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vecLoads_rend(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::shared_ptr< dive::loads::ILoad > > *arg1 = (std::vector< std::shared_ptr< dive::loads::ILoad > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< std::shared_ptr< dive::loads::ILoad > >::reverse_iterator result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__shared_ptrT_dive__loads__ILoad_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vecLoads_rend" "', argument " "1"" of type '" "std::vector< std::shared_ptr< dive::loads::ILoad > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::shared_ptr< dive::loads::ILoad > > * >(argp1);
  result = (arg1)->rend();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< std::shared_ptr< dive::loads::ILoad > >::reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vecLoads_clear(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::shared_ptr< dive::loads::ILoad > > *arg1 = (std::vector< std::shared_ptr< dive::loads::ILoad > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__shared_ptrT_dive__loads__ILoad_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vecLoads_clear" "', argument " "1"" of type '" "std::vector< std::shared_ptr< dive::loads::ILoad > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::shared_ptr< dive::loads::ILoad > > * >(argp1);
  (arg1)->clear();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vecLoads_get_allocator(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::shared_ptr< dive::loads::ILoad > > *arg1 = (std::vector< std::shared_ptr< dive::loads::ILoad > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  SwigValueWrapper< std::allocator< std::shared_ptr< dive::loads::ILoad > > > result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__shared_ptrT_dive__loads__ILoad_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vecLoads_get_allocator" "', argument " "1"" of type '" "std::vector< std::shared_ptr< dive::loads::ILoad > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::shared_ptr< dive::loads::ILoad > > * >(argp1);
  result = ((std::vector< std::shared_ptr< dive::loads::ILoad > > const *)arg1)->get_allocator();
  resultobj = SWIG_NewPointerObj((new std::vector< std::shared_ptr< dive::loads::ILoad > >::allocator_type(result)), SWIGTYPE_p_std__allocatorT_std__shared_ptrT_dive__loads__ILoad_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_vecLoads__SWIG_2(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< std::shared_ptr< dive::loads::ILoad > >::size_type arg1 ;
  size_t val1 ;
  int ecode1 = 0 ;
  std::vector< std::shared_ptr< dive::loads::ILoad > > *result = 0 ;
  
  (void)self;
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_vecLoads" "', argument " "1"" of type '" "std::vector< std::shared_ptr< dive::loads::ILoad > >::size_type""'");
  } 
  arg1 = static_cast< std::vector< std::shared_ptr< dive::loads::ILoad > >::size_type >(val1);
  result = (std::vector< std::shared_ptr< dive::loads::ILoad > > *)new std::vector< std::shared_ptr< dive::loads::ILoad > >(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__shared_ptrT_dive__loads__ILoad_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vecLoads_pop_back(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::shared_ptr< dive::loads::ILoad > > *arg1 = (std::vector< std::shared_ptr< dive::loads::ILoad > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__shared_ptrT_dive__loads__ILoad_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vecLoads_pop_back" "', argument " "1"" of type '" "std::vector< std::shared_ptr< dive::loads::ILoad > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::shared_ptr< dive::loads::ILoad > > * >(argp1);
  (arg1)->pop_back();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vecLoads_resize__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< std::shared_ptr< dive::loads::ILoad > > *arg1 = (std::vector< std::shared_ptr< dive::loads::ILoad > > *) 0 ;
  std::vector< std::shared_ptr< dive::loads::ILoad > >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__shared_ptrT_dive__loads__ILoad_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vecLoads_resize" "', argument " "1"" of type '" "std::vector< std::shared_ptr< dive::loads::ILoad > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::shared_ptr< dive::loads::ILoad > > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vecLoads_resize" "', argument " "2"" of type '" "std::vector< std::shared_ptr< dive::loads::ILoad > >::size_type""'");
  } 
  arg2 = static_cast< std::vector< std::shared_ptr< dive::loads::ILoad > >::size_type >(val2);
  (arg1)->resize(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vecLoads_erase__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< std::shared_ptr< dive::loads::ILoad > > *arg1 = (std::vector< std::shared_ptr< dive::loads::ILoad > > *) 0 ;
  std::vector< std::shared_ptr< dive::loads::ILoad > >::iterator arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  std::vector< std::shared_ptr< dive::loads::ILoad > >::iterator result;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__shared_ptrT_dive__loads__ILoad_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vecLoads_erase" "', argument " "1"" of type '" "std::vector< std::shared_ptr< dive::loads::ILoad > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::shared_ptr< dive::loads::ILoad > > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vecLoads_erase" "', argument " "2"" of type '" "std::vector< std::shared_ptr< dive::loads::ILoad > >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< std::shared_ptr< dive::loads::ILoad > >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< std::shared_ptr< dive::loads::ILoad > >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vecLoads_erase" "', argument " "2"" of type '" "std::vector< std::shared_ptr< dive::loads::ILoad > >::iterator""'");
    }
  }
  result = std_vector_Sl_std_shared_ptr_Sl_dive_loads_ILoad_Sg__Sg__erase__SWIG_0(arg1,SWIG_STD_MOVE(arg2));
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< std::shared_ptr< dive::loads::ILoad > >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vecLoads_erase__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< std::shared_ptr< dive::loads::ILoad > > *arg1 = (std::vector< std::shared_ptr< dive::loads::ILoad > > *) 0 ;
  std::vector< std::shared_ptr< dive::loads::ILoad > >::iterator arg2 ;
  std::vector< std::shared_ptr< dive::loads::ILoad > >::iterator arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  swig::SwigPyIterator *iter3 = 0 ;
  int res3 ;
  std::vector< std::shared_ptr< dive::loads::ILoad > >::iterator result;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__shared_ptrT_dive__loads__ILoad_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vecLoads_erase" "', argument " "1"" of type '" "std::vector< std::shared_ptr< dive::loads::ILoad > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::shared_ptr< dive::loads::ILoad > > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vecLoads_erase" "', argument " "2"" of type '" "std::vector< std::shared_ptr< dive::loads::ILoad > >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< std::shared_ptr< dive::loads::ILoad > >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< std::shared_ptr< dive::loads::ILoad > >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vecLoads_erase" "', argument " "2"" of type '" "std::vector< std::shared_ptr< dive::loads::ILoad > >::iterator""'");
    }
  }
  res3 = SWIG_ConvertPtr(swig_obj[2], SWIG_as_voidptrptr(&iter3), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res3) || !iter3) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vecLoads_erase" "', argument " "3"" of type '" "std::vector< std::shared_ptr< dive::loads::ILoad > >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< std::shared_ptr< dive::loads::ILoad > >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< std::shared_ptr< dive::loads::ILoad > >::iterator > *>(iter3);
    if (iter_t) {
      arg3 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vecLoads_erase" "', argument " "3"" of type '" "std::vector< std::shared_ptr< dive::loads::ILoad > >::iterator""'");
    }
  }
  result = std_vector_Sl_std_shared_ptr_Sl_dive_loads_ILoad_Sg__Sg__erase__SWIG_1(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3));
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< std::shared_ptr< dive::loads::ILoad > >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vecLoads_erase(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "vecLoads_erase", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< std::shared_ptr< dive::loads::ILoad >,std::allocator< std::shared_ptr< dive::loads::ILoad > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< std::shared_ptr< dive::loads::ILoad > >::iterator > *>(iter) != 0));
      if (_v) {
        return _wrap_vecLoads_erase__SWIG_0(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< std::shared_ptr< dive::loads::ILoad >,std::allocator< std::shared_ptr< dive::loads::ILoad > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< std::shared_ptr< dive::loads::ILoad > >::iterator > *>(iter) != 0));
      if (_v) {
        swig::SwigPyIterator *iter = 0;
        int res = SWIG_ConvertPtr(argv[2], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
        _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< std::shared_ptr< dive::loads::ILoad > >::iterator > *>(iter) != 0));
        if (_v) {
          return _wrap_vecLoads_erase__SWIG_1(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'vecLoads_erase'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< std::shared_ptr< dive::loads::ILoad > >::erase(std::vector< std::shared_ptr< dive::loads::ILoad > >::iterator)\n"
    "    std::vector< std::shared_ptr< dive::loads::ILoad > >::erase(std::vector< std::shared_ptr< dive::loads::ILoad > >::iterator,std::vector< std::shared_ptr< dive::loads::ILoad > >::iterator)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_new_vecLoads__SWIG_3(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< std::shared_ptr< dive::loads::ILoad > >::size_type arg1 ;
  std::vector< std::shared_ptr< dive::loads::ILoad > >::value_type *arg2 = 0 ;
  size_t val1 ;
  int ecode1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  std::vector< std::shared_ptr< dive::loads::ILoad > >::value_type tempshared2 ;
  std::vector< std::shared_ptr< dive::loads::ILoad > > *result = 0 ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_vecLoads" "', argument " "1"" of type '" "std::vector< std::shared_ptr< dive::loads::ILoad > >::size_type""'");
  } 
  arg1 = static_cast< std::vector< std::shared_ptr< dive::loads::ILoad > >::size_type >(val1);
  {
    int newmem = 0;
    res2 = SWIG_ConvertPtrAndOwn(swig_obj[1], &argp2, SWIGTYPE_p_std__shared_ptrT_dive__loads__ILoad_t,  0 , &newmem);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_vecLoads" "', argument " "2"" of type '" "std::vector< std::shared_ptr< dive::loads::ILoad > >::value_type const &""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      if (argp2) tempshared2 = *reinterpret_cast< std::vector< std::shared_ptr< dive::loads::ILoad > >::value_type * >(argp2);
      delete reinterpret_cast< std::vector< std::shared_ptr< dive::loads::ILoad > >::value_type * >(argp2);
      arg2 = &tempshared2;
    } else {
      arg2 = (argp2) ? reinterpret_cast< std::vector< std::shared_ptr< dive::loads::ILoad > >::value_type * >(argp2) : &tempshared2;
    }
  }
  result = (std::vector< std::shared_ptr< dive::loads::ILoad > > *)new std::vector< std::shared_ptr< dive::loads::ILoad > >(arg1,(std::vector< std::shared_ptr< dive::loads::ILoad > >::value_type const &)*arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__shared_ptrT_dive__loads__ILoad_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_vecLoads(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "new_vecLoads", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 0) {
    return _wrap_new_vecLoads__SWIG_0(self, argc, argv);
  }
  if (argc == 1) {
    int _v = 0;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_vecLoads__SWIG_2(self, argc, argv);
    }
  }
  if (argc == 1) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< std::shared_ptr< dive::loads::ILoad >,std::allocator< std::shared_ptr< dive::loads::ILoad > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_vecLoads__SWIG_1(self, argc, argv);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_std__shared_ptrT_dive__loads__ILoad_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_vecLoads__SWIG_3(self, argc, argv);
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'new_vecLoads'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< std::shared_ptr< dive::loads::ILoad > >::vector()\n"
    "    std::vector< std::shared_ptr< dive::loads::ILoad > >::vector(std::vector< std::shared_ptr< dive::loads::ILoad > > const &)\n"
    "    std::vector< std::shared_ptr< dive::loads::ILoad > >::vector(std::vector< std::shared_ptr< dive::loads::ILoad > >::size_type)\n"
    "    std::vector< std::shared_ptr< dive::loads::ILoad > >::vector(std::vector< std::shared_ptr< dive::loads::ILoad > >::size_type,std::vector< std::shared_ptr< dive::loads::ILoad > >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_vecLoads_push_back(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::shared_ptr< dive::loads::ILoad > > *arg1 = (std::vector< std::shared_ptr< dive::loads::ILoad > > *) 0 ;
  std::vector< std::shared_ptr< dive::loads::ILoad > >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  std::vector< std::shared_ptr< dive::loads::ILoad > >::value_type tempshared2 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "vecLoads_push_back", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__shared_ptrT_dive__loads__ILoad_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vecLoads_push_back" "', argument " "1"" of type '" "std::vector< std::shared_ptr< dive::loads::ILoad > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::shared_ptr< dive::loads::ILoad > > * >(argp1);
  {
    int newmem = 0;
    res2 = SWIG_ConvertPtrAndOwn(swig_obj[1], &argp2, SWIGTYPE_p_std__shared_ptrT_dive__loads__ILoad_t,  0 , &newmem);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "vecLoads_push_back" "', argument " "2"" of type '" "std::vector< std::shared_ptr< dive::loads::ILoad > >::value_type const &""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      if (argp2) tempshared2 = *reinterpret_cast< std::vector< std::shared_ptr< dive::loads::ILoad > >::value_type * >(argp2);
      delete reinterpret_cast< std::vector< std::shared_ptr< dive::loads::ILoad > >::value_type * >(argp2);
      arg2 = &tempshared2;
    } else {
      arg2 = (argp2) ? reinterpret_cast< std::vector< std::shared_ptr< dive::loads::ILoad > >::value_type * >(argp2) : &tempshared2;
    }
  }
  (arg1)->push_back((std::vector< std::shared_ptr< dive::loads::ILoad > >::value_type const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vecLoads_front(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::shared_ptr< dive::loads::ILoad > > *arg1 = (std::vector< std::shared_ptr< dive::loads::ILoad > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< std::shared_ptr< dive::loads::ILoad > >::value_type *result = 0 ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__shared_ptrT_dive__loads__ILoad_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vecLoads_front" "', argument " "1"" of type '" "std::vector< std::shared_ptr< dive::loads::ILoad > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::shared_ptr< dive::loads::ILoad > > * >(argp1);
  result = (std::vector< std::shared_ptr< dive::loads::ILoad > >::value_type *) &((std::vector< std::shared_ptr< dive::loads::ILoad > > const *)arg1)->front();
  {
    std::shared_ptr<  dive::loads::ILoad > *smartresult = *result ? new std::shared_ptr<  dive::loads::ILoad >(*result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_std__shared_ptrT_dive__loads__ILoad_t, SWIG_POINTER_OWN);
  }
  (void)swig::container_owner<swig::traits<std::vector< std::shared_ptr< dive::loads::ILoad > >::value_type>::category>::back_reference(resultobj, swig_obj[0]);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vecLoads_back(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::shared_ptr< dive::loads::ILoad > > *arg1 = (std::vector< std::shared_ptr< dive::loads::ILoad > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< std::shared_ptr< dive::loads::ILoad > >::value_type *result = 0 ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__shared_ptrT_dive__loads__ILoad_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vecLoads_back" "', argument " "1"" of type '" "std::vector< std::shared_ptr< dive::loads::ILoad > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::shared_ptr< dive::loads::ILoad > > * >(argp1);
  result = (std::vector< std::shared_ptr< dive::loads::ILoad > >::value_type *) &((std::vector< std::shared_ptr< dive::loads::ILoad > > const *)arg1)->back();
  {
    std::shared_ptr<  dive::loads::ILoad > *smartresult = *result ? new std::shared_ptr<  dive::loads::ILoad >(*result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_std__shared_ptrT_dive__loads__ILoad_t, SWIG_POINTER_OWN);
  }
  (void)swig::container_owner<swig::traits<std::vector< std::shared_ptr< dive::loads::ILoad > >::value_type>::category>::back_reference(resultobj, swig_obj[0]);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vecLoads_assign(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::shared_ptr< dive::loads::ILoad > > *arg1 = (std::vector< std::shared_ptr< dive::loads::ILoad > > *) 0 ;
  std::vector< std::shared_ptr< dive::loads::ILoad > >::size_type arg2 ;
  std::vector< std::shared_ptr< dive::loads::ILoad > >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  std::vector< std::shared_ptr< dive::loads::ILoad > >::value_type tempshared3 ;
  PyObject *swig_obj[3] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "vecLoads_assign", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__shared_ptrT_dive__loads__ILoad_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vecLoads_assign" "', argument " "1"" of type '" "std::vector< std::shared_ptr< dive::loads::ILoad > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::shared_ptr< dive::loads::ILoad > > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vecLoads_assign" "', argument " "2"" of type '" "std::vector< std::shared_ptr< dive::loads::ILoad > >::size_type""'");
  } 
  arg2 = static_cast< std::vector< std::shared_ptr< dive::loads::ILoad > >::size_type >(val2);
  {
    int newmem = 0;
    res3 = SWIG_ConvertPtrAndOwn(swig_obj[2], &argp3, SWIGTYPE_p_std__shared_ptrT_dive__loads__ILoad_t,  0 , &newmem);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "vecLoads_assign" "', argument " "3"" of type '" "std::vector< std::shared_ptr< dive::loads::ILoad > >::value_type const &""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      if (argp3) tempshared3 = *reinterpret_cast< std::vector< std::shared_ptr< dive::loads::ILoad > >::value_type * >(argp3);
      delete reinterpret_cast< std::vector< std::shared_ptr< dive::loads::ILoad > >::value_type * >(argp3);
      arg3 = &tempshared3;
    } else {
      arg3 = (argp3) ? reinterpret_cast< std::vector< std::shared_ptr< dive::loads::ILoad > >::value_type * >(argp3) : &tempshared3;
    }
  }
  (arg1)->assign(arg2,(std::vector< std::shared_ptr< dive::loads::ILoad > >::value_type const &)*arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vecLoads_resize__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< std::shared_ptr< dive::loads::ILoad > > *arg1 = (std::vector< std::shared_ptr< dive::loads::ILoad > > *) 0 ;
  std::vector< std::shared_ptr< dive::loads::ILoad > >::size_type arg2 ;
  std::vector< std::shared_ptr< dive::loads::ILoad > >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  std::vector< std::shared_ptr< dive::loads::ILoad > >::value_type tempshared3 ;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__shared_ptrT_dive__loads__ILoad_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vecLoads_resize" "', argument " "1"" of type '" "std::vector< std::shared_ptr< dive::loads::ILoad > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::shared_ptr< dive::loads::ILoad > > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vecLoads_resize" "', argument " "2"" of type '" "std::vector< std::shared_ptr< dive::loads::ILoad > >::size_type""'");
  } 
  arg2 = static_cast< std::vector< std::shared_ptr< dive::loads::ILoad > >::size_type >(val2);
  {
    int newmem = 0;
    res3 = SWIG_ConvertPtrAndOwn(swig_obj[2], &argp3, SWIGTYPE_p_std__shared_ptrT_dive__loads__ILoad_t,  0 , &newmem);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "vecLoads_resize" "', argument " "3"" of type '" "std::vector< std::shared_ptr< dive::loads::ILoad > >::value_type const &""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      if (argp3) tempshared3 = *reinterpret_cast< std::vector< std::shared_ptr< dive::loads::ILoad > >::value_type * >(argp3);
      delete reinterpret_cast< std::vector< std::shared_ptr< dive::loads::ILoad > >::value_type * >(argp3);
      arg3 = &tempshared3;
    } else {
      arg3 = (argp3) ? reinterpret_cast< std::vector< std::shared_ptr< dive::loads::ILoad > >::value_type * >(argp3) : &tempshared3;
    }
  }
  (arg1)->resize(arg2,(std::vector< std::shared_ptr< dive::loads::ILoad > >::value_type const &)*arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vecLoads_resize(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "vecLoads_resize", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< std::shared_ptr< dive::loads::ILoad >,std::allocator< std::shared_ptr< dive::loads::ILoad > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_vecLoads_resize__SWIG_0(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< std::shared_ptr< dive::loads::ILoad >,std::allocator< std::shared_ptr< dive::loads::ILoad > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_std__shared_ptrT_dive__loads__ILoad_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_vecLoads_resize__SWIG_1(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'vecLoads_resize'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< std::shared_ptr< dive::loads::ILoad > >::resize(std::vector< std::shared_ptr< dive::loads::ILoad > >::size_type)\n"
    "    std::vector< std::shared_ptr< dive::loads::ILoad > >::resize(std::vector< std::shared_ptr< dive::loads::ILoad > >::size_type,std::vector< std::shared_ptr< dive::loads::ILoad > >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_vecLoads_insert__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< std::shared_ptr< dive::loads::ILoad > > *arg1 = (std::vector< std::shared_ptr< dive::loads::ILoad > > *) 0 ;
  std::vector< std::shared_ptr< dive::loads::ILoad > >::iterator arg2 ;
  std::vector< std::shared_ptr< dive::loads::ILoad > >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  void *argp3 ;
  int res3 = 0 ;
  std::vector< std::shared_ptr< dive::loads::ILoad > >::value_type tempshared3 ;
  std::vector< std::shared_ptr< dive::loads::ILoad > >::iterator result;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__shared_ptrT_dive__loads__ILoad_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vecLoads_insert" "', argument " "1"" of type '" "std::vector< std::shared_ptr< dive::loads::ILoad > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::shared_ptr< dive::loads::ILoad > > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vecLoads_insert" "', argument " "2"" of type '" "std::vector< std::shared_ptr< dive::loads::ILoad > >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< std::shared_ptr< dive::loads::ILoad > >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< std::shared_ptr< dive::loads::ILoad > >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vecLoads_insert" "', argument " "2"" of type '" "std::vector< std::shared_ptr< dive::loads::ILoad > >::iterator""'");
    }
  }
  {
    int newmem = 0;
    res3 = SWIG_ConvertPtrAndOwn(swig_obj[2], &argp3, SWIGTYPE_p_std__shared_ptrT_dive__loads__ILoad_t,  0 , &newmem);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "vecLoads_insert" "', argument " "3"" of type '" "std::vector< std::shared_ptr< dive::loads::ILoad > >::value_type const &""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      if (argp3) tempshared3 = *reinterpret_cast< std::vector< std::shared_ptr< dive::loads::ILoad > >::value_type * >(argp3);
      delete reinterpret_cast< std::vector< std::shared_ptr< dive::loads::ILoad > >::value_type * >(argp3);
      arg3 = &tempshared3;
    } else {
      arg3 = (argp3) ? reinterpret_cast< std::vector< std::shared_ptr< dive::loads::ILoad > >::value_type * >(argp3) : &tempshared3;
    }
  }
  result = std_vector_Sl_std_shared_ptr_Sl_dive_loads_ILoad_Sg__Sg__insert__SWIG_0(arg1,SWIG_STD_MOVE(arg2),(std::shared_ptr< dive::loads::ILoad > const &)*arg3);
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< std::shared_ptr< dive::loads::ILoad > >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vecLoads_insert__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< std::shared_ptr< dive::loads::ILoad > > *arg1 = (std::vector< std::shared_ptr< dive::loads::ILoad > > *) 0 ;
  std::vector< std::shared_ptr< dive::loads::ILoad > >::iterator arg2 ;
  std::vector< std::shared_ptr< dive::loads::ILoad > >::size_type arg3 ;
  std::vector< std::shared_ptr< dive::loads::ILoad > >::value_type *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  size_t val3 ;
  int ecode3 = 0 ;
  void *argp4 ;
  int res4 = 0 ;
  std::vector< std::shared_ptr< dive::loads::ILoad > >::value_type tempshared4 ;
  
  (void)self;
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__shared_ptrT_dive__loads__ILoad_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vecLoads_insert" "', argument " "1"" of type '" "std::vector< std::shared_ptr< dive::loads::ILoad > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::shared_ptr< dive::loads::ILoad > > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vecLoads_insert" "', argument " "2"" of type '" "std::vector< std::shared_ptr< dive::loads::ILoad > >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< std::shared_ptr< dive::loads::ILoad > >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< std::shared_ptr< dive::loads::ILoad > >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vecLoads_insert" "', argument " "2"" of type '" "std::vector< std::shared_ptr< dive::loads::ILoad > >::iterator""'");
    }
  }
  ecode3 = SWIG_AsVal_size_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "vecLoads_insert" "', argument " "3"" of type '" "std::vector< std::shared_ptr< dive::loads::ILoad > >::size_type""'");
  } 
  arg3 = static_cast< std::vector< std::shared_ptr< dive::loads::ILoad > >::size_type >(val3);
  {
    int newmem = 0;
    res4 = SWIG_ConvertPtrAndOwn(swig_obj[3], &argp4, SWIGTYPE_p_std__shared_ptrT_dive__loads__ILoad_t,  0 , &newmem);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "vecLoads_insert" "', argument " "4"" of type '" "std::vector< std::shared_ptr< dive::loads::ILoad > >::value_type const &""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      if (argp4) tempshared4 = *reinterpret_cast< std::vector< std::shared_ptr< dive::loads::ILoad > >::value_type * >(argp4);
      delete reinterpret_cast< std::vector< std::shared_ptr< dive::loads::ILoad > >::value_type * >(argp4);
      arg4 = &tempshared4;
    } else {
      arg4 = (argp4) ? reinterpret_cast< std::vector< std::shared_ptr< dive::loads::ILoad > >::value_type * >(argp4) : &tempshared4;
    }
  }
  std_vector_Sl_std_shared_ptr_Sl_dive_loads_ILoad_Sg__Sg__insert__SWIG_1(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3),(std::shared_ptr< dive::loads::ILoad > const &)*arg4);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vecLoads_insert(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "vecLoads_insert", 0, 4, argv))) SWIG_fail;
  --argc;
  if (argc == 3) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< std::shared_ptr< dive::loads::ILoad >,std::allocator< std::shared_ptr< dive::loads::ILoad > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< std::shared_ptr< dive::loads::ILoad > >::iterator > *>(iter) != 0));
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_std__shared_ptrT_dive__loads__ILoad_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_vecLoads_insert__SWIG_0(self, argc, argv);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< std::shared_ptr< dive::loads::ILoad >,std::allocator< std::shared_ptr< dive::loads::ILoad > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< std::shared_ptr< dive::loads::ILoad > >::iterator > *>(iter) != 0));
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = SWIG_ConvertPtr(argv[3], 0, SWIGTYPE_p_std__shared_ptrT_dive__loads__ILoad_t, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_vecLoads_insert__SWIG_1(self, argc, argv);
          }
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'vecLoads_insert'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< std::shared_ptr< dive::loads::ILoad > >::insert(std::vector< std::shared_ptr< dive::loads::ILoad > >::iterator,std::vector< std::shared_ptr< dive::loads::ILoad > >::value_type const &)\n"
    "    std::vector< std::shared_ptr< dive::loads::ILoad > >::insert(std::vector< std::shared_ptr< dive::loads::ILoad > >::iterator,std::vector< std::shared_ptr< dive::loads::ILoad > >::size_type,std::vector< std::shared_ptr< dive::loads::ILoad > >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_vecLoads_reserve(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::shared_ptr< dive::loads::ILoad > > *arg1 = (std::vector< std::shared_ptr< dive::loads::ILoad > > *) 0 ;
  std::vector< std::shared_ptr< dive::loads::ILoad > >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "vecLoads_reserve", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__shared_ptrT_dive__loads__ILoad_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vecLoads_reserve" "', argument " "1"" of type '" "std::vector< std::shared_ptr< dive::loads::ILoad > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::shared_ptr< dive::loads::ILoad > > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vecLoads_reserve" "', argument " "2"" of type '" "std::vector< std::shared_ptr< dive::loads::ILoad > >::size_type""'");
  } 
  arg2 = static_cast< std::vector< std::shared_ptr< dive::loads::ILoad > >::size_type >(val2);
  (arg1)->reserve(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vecLoads_capacity(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::shared_ptr< dive::loads::ILoad > > *arg1 = (std::vector< std::shared_ptr< dive::loads::ILoad > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< std::shared_ptr< dive::loads::ILoad > >::size_type result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__shared_ptrT_dive__loads__ILoad_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vecLoads_capacity" "', argument " "1"" of type '" "std::vector< std::shared_ptr< dive::loads::ILoad > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::shared_ptr< dive::loads::ILoad > > * >(argp1);
  result = ((std::vector< std::shared_ptr< dive::loads::ILoad > > const *)arg1)->capacity();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_vecLoads(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::shared_ptr< dive::loads::ILoad > > *arg1 = (std::vector< std::shared_ptr< dive::loads::ILoad > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__shared_ptrT_dive__loads__ILoad_t_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_vecLoads" "', argument " "1"" of type '" "std::vector< std::shared_ptr< dive::loads::ILoad > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::shared_ptr< dive::loads::ILoad > > * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *vecLoads_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_std__vectorT_std__shared_ptrT_dive__loads__ILoad_t_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *vecLoads_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN int Swig_var_load_dirichlet_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable load_dirichlet is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_load_dirichlet_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_size_t(static_cast< size_t >(dive::loads::load_dirichlet));
  return pyobj;
}


SWIGINTERN int Swig_var_load_dirichletFunction_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable load_dirichletFunction is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_load_dirichletFunction_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_size_t(static_cast< size_t >(dive::loads::load_dirichletFunction));
  return pyobj;
}


SWIGINTERN int Swig_var_load_distributedVolume_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable load_distributedVolume is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_load_distributedVolume_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_size_t(static_cast< size_t >(dive::loads::load_distributedVolume));
  return pyobj;
}


SWIGINTERN int Swig_var_load_distributedFace_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable load_distributedFace is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_load_distributedFace_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_size_t(static_cast< size_t >(dive::loads::load_distributedFace));
  return pyobj;
}


SWIGINTERN int Swig_var_load_distributedEdge_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable load_distributedEdge is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_load_distributedEdge_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_size_t(static_cast< size_t >(dive::loads::load_distributedEdge));
  return pyobj;
}


SWIGINTERN int Swig_var_load_forceNode_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable load_forceNode is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_load_forceNode_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_size_t(static_cast< size_t >(dive::loads::load_forceNode));
  return pyobj;
}


SWIGINTERN int Swig_var_load_initialStrain_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable load_initialStrain is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_load_initialStrain_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_size_t(static_cast< size_t >(dive::loads::load_initialStrain));
  return pyobj;
}


SWIGINTERN int Swig_var_load_temperatureStrain_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable load_temperatureStrain is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_load_temperatureStrain_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_size_t(static_cast< size_t >(dive::loads::load_temperatureStrain));
  return pyobj;
}


SWIGINTERN int Swig_var_load_heatSourceVolume_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable load_heatSourceVolume is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_load_heatSourceVolume_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_size_t(static_cast< size_t >(dive::loads::load_heatSourceVolume));
  return pyobj;
}


SWIGINTERN int Swig_var_load_heatConductionFace_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable load_heatConductionFace is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_load_heatConductionFace_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_size_t(static_cast< size_t >(dive::loads::load_heatConductionFace));
  return pyobj;
}


SWIGINTERN int Swig_var_load_couplingEquation_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable load_couplingEquation is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_load_couplingEquation_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_size_t(static_cast< size_t >(dive::loads::load_couplingEquation));
  return pyobj;
}


SWIGINTERN int Swig_var_load_problemPressure_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable load_problemPressure is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_load_problemPressure_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_size_t(static_cast< size_t >(dive::loads::load_problemPressure));
  return pyobj;
}


SWIGINTERN PyObject *_wrap_delete_IDirichlet(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  dive::loads::IDirichlet *arg1 = (dive::loads::IDirichlet *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< dive::loads::IDirichlet > tempshared1 ;
  std::shared_ptr< dive::loads::IDirichlet > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_dive__loads__IDirichlet_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_IDirichlet" "', argument " "1"" of type '" "dive::loads::IDirichlet *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  dive::loads::IDirichlet > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  dive::loads::IDirichlet > * >(argp1);
      arg1 = const_cast< dive::loads::IDirichlet * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  dive::loads::IDirichlet > * >(argp1);
      arg1 = const_cast< dive::loads::IDirichlet * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  (void)arg1; delete smartarg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IDirichlet_GetType(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  dive::loads::IDirichlet *arg1 = (dive::loads::IDirichlet *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< dive::loads::IDirichlet const > tempshared1 ;
  std::shared_ptr< dive::loads::IDirichlet const > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  Type result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_dive__loads__IDirichlet_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IDirichlet_GetType" "', argument " "1"" of type '" "dive::loads::IDirichlet const *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const dive::loads::IDirichlet > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const dive::loads::IDirichlet > * >(argp1);
      arg1 = const_cast< dive::loads::IDirichlet * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const dive::loads::IDirichlet > * >(argp1);
      arg1 = const_cast< dive::loads::IDirichlet * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = ((dive::loads::IDirichlet const *)arg1)->GetType();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IDirichlet_GetNode(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  dive::loads::IDirichlet *arg1 = (dive::loads::IDirichlet *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< dive::loads::IDirichlet const > tempshared1 ;
  std::shared_ptr< dive::loads::IDirichlet const > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  INodePtr result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_dive__loads__IDirichlet_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IDirichlet_GetNode" "', argument " "1"" of type '" "dive::loads::IDirichlet const *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const dive::loads::IDirichlet > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const dive::loads::IDirichlet > * >(argp1);
      arg1 = const_cast< dive::loads::IDirichlet * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const dive::loads::IDirichlet > * >(argp1);
      arg1 = const_cast< dive::loads::IDirichlet * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = ((dive::loads::IDirichlet const *)arg1)->GetNode();
  {
    std::shared_ptr<  nodes::INode > *smartresult = result ? new std::shared_ptr<  nodes::INode >(result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_std__shared_ptrT_nodes__INode_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IDirichlet_GetDofIndex(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  dive::loads::IDirichlet *arg1 = (dive::loads::IDirichlet *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< dive::loads::IDirichlet const > tempshared1 ;
  std::shared_ptr< dive::loads::IDirichlet const > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  DofIndex result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_dive__loads__IDirichlet_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IDirichlet_GetDofIndex" "', argument " "1"" of type '" "dive::loads::IDirichlet const *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const dive::loads::IDirichlet > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const dive::loads::IDirichlet > * >(argp1);
      arg1 = const_cast< dive::loads::IDirichlet * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const dive::loads::IDirichlet > * >(argp1);
      arg1 = const_cast< dive::loads::IDirichlet * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = ((dive::loads::IDirichlet const *)arg1)->GetDofIndex();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IDirichlet_GetValue(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  dive::loads::IDirichlet *arg1 = (dive::loads::IDirichlet *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< dive::loads::IDirichlet const > tempshared1 ;
  std::shared_ptr< dive::loads::IDirichlet const > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  Scalar result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_dive__loads__IDirichlet_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IDirichlet_GetValue" "', argument " "1"" of type '" "dive::loads::IDirichlet const *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const dive::loads::IDirichlet > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const dive::loads::IDirichlet > * >(argp1);
      arg1 = const_cast< dive::loads::IDirichlet * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const dive::loads::IDirichlet > * >(argp1);
      arg1 = const_cast< dive::loads::IDirichlet * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = (Scalar)((dive::loads::IDirichlet const *)arg1)->GetValue();
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IDirichlet_SetNode(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  dive::loads::IDirichlet *arg1 = (dive::loads::IDirichlet *) 0 ;
  INodePtr arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< dive::loads::IDirichlet > tempshared1 ;
  std::shared_ptr< dive::loads::IDirichlet > *smartarg1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "IDirichlet_SetNode", 2, 2, swig_obj)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_dive__loads__IDirichlet_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IDirichlet_SetNode" "', argument " "1"" of type '" "dive::loads::IDirichlet *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  dive::loads::IDirichlet > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  dive::loads::IDirichlet > * >(argp1);
      arg1 = const_cast< dive::loads::IDirichlet * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  dive::loads::IDirichlet > * >(argp1);
      arg1 = const_cast< dive::loads::IDirichlet * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    int newmem = 0;
    res2 = SWIG_ConvertPtrAndOwn(swig_obj[1], &argp2, SWIGTYPE_p_std__shared_ptrT_nodes__INode_t,  0 , &newmem);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IDirichlet_SetNode" "', argument " "2"" of type '" "INodePtr""'");
    }
    if (argp2) arg2 = *(reinterpret_cast< INodePtr * >(argp2));
    if (newmem & SWIG_CAST_NEW_MEMORY) delete reinterpret_cast< INodePtr * >(argp2);
  }
  (arg1)->SetNode(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IDirichlet_SetDofIndex(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  dive::loads::IDirichlet *arg1 = (dive::loads::IDirichlet *) 0 ;
  DofIndex arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< dive::loads::IDirichlet > tempshared1 ;
  std::shared_ptr< dive::loads::IDirichlet > *smartarg1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "IDirichlet_SetDofIndex", 2, 2, swig_obj)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_dive__loads__IDirichlet_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IDirichlet_SetDofIndex" "', argument " "1"" of type '" "dive::loads::IDirichlet *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  dive::loads::IDirichlet > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  dive::loads::IDirichlet > * >(argp1);
      arg1 = const_cast< dive::loads::IDirichlet * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  dive::loads::IDirichlet > * >(argp1);
      arg1 = const_cast< dive::loads::IDirichlet * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IDirichlet_SetDofIndex" "', argument " "2"" of type '" "DofIndex""'");
  } 
  arg2 = static_cast< DofIndex >(val2);
  (arg1)->SetDofIndex(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IDirichlet_SetValue(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  dive::loads::IDirichlet *arg1 = (dive::loads::IDirichlet *) 0 ;
  IScalar3DPtr arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< dive::loads::IDirichlet > tempshared1 ;
  std::shared_ptr< dive::loads::IDirichlet > *smartarg1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "IDirichlet_SetValue", 2, 2, swig_obj)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_dive__loads__IDirichlet_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IDirichlet_SetValue" "', argument " "1"" of type '" "dive::loads::IDirichlet *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  dive::loads::IDirichlet > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  dive::loads::IDirichlet > * >(argp1);
      arg1 = const_cast< dive::loads::IDirichlet * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  dive::loads::IDirichlet > * >(argp1);
      arg1 = const_cast< dive::loads::IDirichlet * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    int newmem = 0;
    res2 = SWIG_ConvertPtrAndOwn(swig_obj[1], &argp2, SWIGTYPE_p_std__shared_ptrT_values__IScalar3D_t,  0 , &newmem);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IDirichlet_SetValue" "', argument " "2"" of type '" "IScalar3DPtr""'");
    }
    if (argp2) arg2 = *(reinterpret_cast< IScalar3DPtr * >(argp2));
    if (newmem & SWIG_CAST_NEW_MEMORY) delete reinterpret_cast< IScalar3DPtr * >(argp2);
  }
  (arg1)->SetValue(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *IDirichlet_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_std__shared_ptrT_dive__loads__IDirichlet_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_delete_ILoad(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  dive::loads::ILoad *arg1 = (dive::loads::ILoad *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< dive::loads::ILoad > tempshared1 ;
  std::shared_ptr< dive::loads::ILoad > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_dive__loads__ILoad_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ILoad" "', argument " "1"" of type '" "dive::loads::ILoad *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  dive::loads::ILoad > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  dive::loads::ILoad > * >(argp1);
      arg1 = const_cast< dive::loads::ILoad * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  dive::loads::ILoad > * >(argp1);
      arg1 = const_cast< dive::loads::ILoad * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  (void)arg1; delete smartarg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ILoad_GetType(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  dive::loads::ILoad *arg1 = (dive::loads::ILoad *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< dive::loads::ILoad const > tempshared1 ;
  std::shared_ptr< dive::loads::ILoad const > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  Type result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_dive__loads__ILoad_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ILoad_GetType" "', argument " "1"" of type '" "dive::loads::ILoad const *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const dive::loads::ILoad > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const dive::loads::ILoad > * >(argp1);
      arg1 = const_cast< dive::loads::ILoad * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const dive::loads::ILoad > * >(argp1);
      arg1 = const_cast< dive::loads::ILoad * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = ((dive::loads::ILoad const *)arg1)->GetType();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ILoad_GetElement(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  dive::loads::ILoad *arg1 = (dive::loads::ILoad *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< dive::loads::ILoad const > tempshared1 ;
  std::shared_ptr< dive::loads::ILoad const > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  IElementPtr result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_dive__loads__ILoad_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ILoad_GetElement" "', argument " "1"" of type '" "dive::loads::ILoad const *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const dive::loads::ILoad > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const dive::loads::ILoad > * >(argp1);
      arg1 = const_cast< dive::loads::ILoad * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const dive::loads::ILoad > * >(argp1);
      arg1 = const_cast< dive::loads::ILoad * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = ((dive::loads::ILoad const *)arg1)->GetElement();
  {
    std::shared_ptr<  dive::elements::IElement > *smartresult = result ? new std::shared_ptr<  dive::elements::IElement >(result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_std__shared_ptrT_dive__elements__IElement_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ILoad_SetElement(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  dive::loads::ILoad *arg1 = (dive::loads::ILoad *) 0 ;
  IElementPtr arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< dive::loads::ILoad > tempshared1 ;
  std::shared_ptr< dive::loads::ILoad > *smartarg1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "ILoad_SetElement", 2, 2, swig_obj)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_dive__loads__ILoad_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ILoad_SetElement" "', argument " "1"" of type '" "dive::loads::ILoad *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  dive::loads::ILoad > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  dive::loads::ILoad > * >(argp1);
      arg1 = const_cast< dive::loads::ILoad * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  dive::loads::ILoad > * >(argp1);
      arg1 = const_cast< dive::loads::ILoad * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    int newmem = 0;
    res2 = SWIG_ConvertPtrAndOwn(swig_obj[1], &argp2, SWIGTYPE_p_std__shared_ptrT_dive__elements__IElement_t,  0 , &newmem);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ILoad_SetElement" "', argument " "2"" of type '" "IElementPtr""'");
    }
    if (argp2) arg2 = *(reinterpret_cast< IElementPtr * >(argp2));
    if (newmem & SWIG_CAST_NEW_MEMORY) delete reinterpret_cast< IElementPtr * >(argp2);
  }
  (arg1)->SetElement(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *ILoad_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_std__shared_ptrT_dive__loads__ILoad_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_CreateDirichletByValue(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  INodePtr arg1 ;
  DofIndex arg2 ;
  Scalar arg3 ;
  void *argp1 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  DirichletPtr result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "CreateDirichletByValue", 3, 3, swig_obj)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_nodes__INode_t,  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CreateDirichletByValue" "', argument " "1"" of type '" "INodePtr""'");
    }
    if (argp1) arg1 = *(reinterpret_cast< INodePtr * >(argp1));
    if (newmem & SWIG_CAST_NEW_MEMORY) delete reinterpret_cast< INodePtr * >(argp1);
  }
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CreateDirichletByValue" "', argument " "2"" of type '" "DofIndex""'");
  } 
  arg2 = static_cast< DofIndex >(val2);
  ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "CreateDirichletByValue" "', argument " "3"" of type '" "Scalar""'");
  } 
  arg3 = static_cast< Scalar >(val3);
  result = dive::loads::CreateDirichletByValue(SWIG_STD_MOVE(arg1),SWIG_STD_MOVE(arg2),arg3);
  {
    std::shared_ptr<  dive::loads::Dirichlet > *smartresult = result ? new std::shared_ptr<  dive::loads::Dirichlet >(result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_std__shared_ptrT_dive__loads__Dirichlet_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CreateDirichletByFunction(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  INodePtr arg1 ;
  DofIndex arg2 ;
  Scalar (*arg3)(Scalar,Scalar,Scalar) = (Scalar (*)(Scalar,Scalar,Scalar)) 0 ;
  void *argp1 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[3] ;
  DirichletPtr result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "CreateDirichletByFunction", 3, 3, swig_obj)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_nodes__INode_t,  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CreateDirichletByFunction" "', argument " "1"" of type '" "INodePtr""'");
    }
    if (argp1) arg1 = *(reinterpret_cast< INodePtr * >(argp1));
    if (newmem & SWIG_CAST_NEW_MEMORY) delete reinterpret_cast< INodePtr * >(argp1);
  }
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CreateDirichletByFunction" "', argument " "2"" of type '" "DofIndex""'");
  } 
  arg2 = static_cast< DofIndex >(val2);
  {
    int res = SWIG_ConvertFunctionPtr(swig_obj[2], (void**)(&arg3), SWIGTYPE_p_f_double_double_double__double);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in method '" "CreateDirichletByFunction" "', argument " "3"" of type '" "Scalar (*)(Scalar,Scalar,Scalar)""'"); 
    }
  }
  result = dive::loads::CreateDirichletByFunction(SWIG_STD_MOVE(arg1),SWIG_STD_MOVE(arg2),arg3);
  {
    std::shared_ptr<  dive::loads::Dirichlet > *smartresult = result ? new std::shared_ptr<  dive::loads::Dirichlet >(result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_std__shared_ptrT_dive__loads__Dirichlet_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_Dirichlet(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  dive::loads::Dirichlet *arg1 = (dive::loads::Dirichlet *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< dive::loads::Dirichlet > tempshared1 ;
  std::shared_ptr< dive::loads::Dirichlet > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_dive__loads__Dirichlet_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Dirichlet" "', argument " "1"" of type '" "dive::loads::Dirichlet *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  dive::loads::Dirichlet > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  dive::loads::Dirichlet > * >(argp1);
      arg1 = const_cast< dive::loads::Dirichlet * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  dive::loads::Dirichlet > * >(argp1);
      arg1 = const_cast< dive::loads::Dirichlet * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  (void)arg1; delete smartarg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Dirichlet_Create(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  DirichletPtr result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "Dirichlet_Create", 0, 0, 0)) SWIG_fail;
  result = dive::loads::Dirichlet::Create();
  {
    std::shared_ptr<  dive::loads::Dirichlet > *smartresult = result ? new std::shared_ptr<  dive::loads::Dirichlet >(result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_std__shared_ptrT_dive__loads__Dirichlet_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Dirichlet_GetPtr__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  dive::loads::Dirichlet *arg1 = (dive::loads::Dirichlet *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< dive::loads::Dirichlet > tempshared1 ;
  std::shared_ptr< dive::loads::Dirichlet > *smartarg1 = 0 ;
  DirichletPtr result;
  
  (void)self;
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_dive__loads__Dirichlet_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Dirichlet_GetPtr" "', argument " "1"" of type '" "dive::loads::Dirichlet *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  dive::loads::Dirichlet > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  dive::loads::Dirichlet > * >(argp1);
      arg1 = const_cast< dive::loads::Dirichlet * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  dive::loads::Dirichlet > * >(argp1);
      arg1 = const_cast< dive::loads::Dirichlet * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = (arg1)->GetPtr();
  {
    std::shared_ptr<  dive::loads::Dirichlet > *smartresult = result ? new std::shared_ptr<  dive::loads::Dirichlet >(result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_std__shared_ptrT_dive__loads__Dirichlet_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Dirichlet_GetPtr__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  dive::loads::Dirichlet *arg1 = (dive::loads::Dirichlet *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< dive::loads::Dirichlet const > tempshared1 ;
  std::shared_ptr< dive::loads::Dirichlet const > *smartarg1 = 0 ;
  ConstDirichletPtr result;
  
  (void)self;
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_dive__loads__Dirichlet_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Dirichlet_GetPtr" "', argument " "1"" of type '" "dive::loads::Dirichlet const *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const dive::loads::Dirichlet > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const dive::loads::Dirichlet > * >(argp1);
      arg1 = const_cast< dive::loads::Dirichlet * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const dive::loads::Dirichlet > * >(argp1);
      arg1 = const_cast< dive::loads::Dirichlet * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = ((dive::loads::Dirichlet const *)arg1)->GetPtr();
  {
    std::shared_ptr< const dive::loads::Dirichlet > *smartresult = result ? new std::shared_ptr< const dive::loads::Dirichlet >(result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_std__shared_ptrT_dive__loads__Dirichlet_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Dirichlet_GetPtr(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "Dirichlet_GetPtr", 0, 1, argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    int _v = 0;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_std__shared_ptrT_dive__loads__Dirichlet_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_Dirichlet_GetPtr__SWIG_0(self, argc, argv);
    }
  }
  if (argc == 1) {
    int _v = 0;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_std__shared_ptrT_dive__loads__Dirichlet_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_Dirichlet_GetPtr__SWIG_1(self, argc, argv);
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'Dirichlet_GetPtr'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    dive::loads::Dirichlet::GetPtr()\n"
    "    dive::loads::Dirichlet::GetPtr() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Dirichlet_GetType(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  dive::loads::Dirichlet *arg1 = (dive::loads::Dirichlet *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< dive::loads::Dirichlet const > tempshared1 ;
  std::shared_ptr< dive::loads::Dirichlet const > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  Type result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_dive__loads__Dirichlet_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Dirichlet_GetType" "', argument " "1"" of type '" "dive::loads::Dirichlet const *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const dive::loads::Dirichlet > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const dive::loads::Dirichlet > * >(argp1);
      arg1 = const_cast< dive::loads::Dirichlet * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const dive::loads::Dirichlet > * >(argp1);
      arg1 = const_cast< dive::loads::Dirichlet * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = ((dive::loads::Dirichlet const *)arg1)->GetType();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Dirichlet_GetNode(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  dive::loads::Dirichlet *arg1 = (dive::loads::Dirichlet *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< dive::loads::Dirichlet const > tempshared1 ;
  std::shared_ptr< dive::loads::Dirichlet const > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  INodePtr result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_dive__loads__Dirichlet_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Dirichlet_GetNode" "', argument " "1"" of type '" "dive::loads::Dirichlet const *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const dive::loads::Dirichlet > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const dive::loads::Dirichlet > * >(argp1);
      arg1 = const_cast< dive::loads::Dirichlet * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const dive::loads::Dirichlet > * >(argp1);
      arg1 = const_cast< dive::loads::Dirichlet * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = ((dive::loads::Dirichlet const *)arg1)->GetNode();
  {
    std::shared_ptr<  nodes::INode > *smartresult = result ? new std::shared_ptr<  nodes::INode >(result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_std__shared_ptrT_nodes__INode_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Dirichlet_GetDofIndex(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  dive::loads::Dirichlet *arg1 = (dive::loads::Dirichlet *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< dive::loads::Dirichlet const > tempshared1 ;
  std::shared_ptr< dive::loads::Dirichlet const > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  DofIndex result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_dive__loads__Dirichlet_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Dirichlet_GetDofIndex" "', argument " "1"" of type '" "dive::loads::Dirichlet const *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const dive::loads::Dirichlet > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const dive::loads::Dirichlet > * >(argp1);
      arg1 = const_cast< dive::loads::Dirichlet * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const dive::loads::Dirichlet > * >(argp1);
      arg1 = const_cast< dive::loads::Dirichlet * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = ((dive::loads::Dirichlet const *)arg1)->GetDofIndex();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Dirichlet_GetValue(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  dive::loads::Dirichlet *arg1 = (dive::loads::Dirichlet *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< dive::loads::Dirichlet const > tempshared1 ;
  std::shared_ptr< dive::loads::Dirichlet const > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  Scalar result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_dive__loads__Dirichlet_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Dirichlet_GetValue" "', argument " "1"" of type '" "dive::loads::Dirichlet const *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const dive::loads::Dirichlet > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const dive::loads::Dirichlet > * >(argp1);
      arg1 = const_cast< dive::loads::Dirichlet * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const dive::loads::Dirichlet > * >(argp1);
      arg1 = const_cast< dive::loads::Dirichlet * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = (Scalar)((dive::loads::Dirichlet const *)arg1)->GetValue();
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Dirichlet_SetNode(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  dive::loads::Dirichlet *arg1 = (dive::loads::Dirichlet *) 0 ;
  INodePtr arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< dive::loads::Dirichlet > tempshared1 ;
  std::shared_ptr< dive::loads::Dirichlet > *smartarg1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "Dirichlet_SetNode", 2, 2, swig_obj)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_dive__loads__Dirichlet_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Dirichlet_SetNode" "', argument " "1"" of type '" "dive::loads::Dirichlet *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  dive::loads::Dirichlet > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  dive::loads::Dirichlet > * >(argp1);
      arg1 = const_cast< dive::loads::Dirichlet * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  dive::loads::Dirichlet > * >(argp1);
      arg1 = const_cast< dive::loads::Dirichlet * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    int newmem = 0;
    res2 = SWIG_ConvertPtrAndOwn(swig_obj[1], &argp2, SWIGTYPE_p_std__shared_ptrT_nodes__INode_t,  0 , &newmem);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Dirichlet_SetNode" "', argument " "2"" of type '" "INodePtr""'");
    }
    if (argp2) arg2 = *(reinterpret_cast< INodePtr * >(argp2));
    if (newmem & SWIG_CAST_NEW_MEMORY) delete reinterpret_cast< INodePtr * >(argp2);
  }
  (arg1)->SetNode(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Dirichlet_SetDofIndex(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  dive::loads::Dirichlet *arg1 = (dive::loads::Dirichlet *) 0 ;
  DofIndex arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< dive::loads::Dirichlet > tempshared1 ;
  std::shared_ptr< dive::loads::Dirichlet > *smartarg1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "Dirichlet_SetDofIndex", 2, 2, swig_obj)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_dive__loads__Dirichlet_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Dirichlet_SetDofIndex" "', argument " "1"" of type '" "dive::loads::Dirichlet *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  dive::loads::Dirichlet > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  dive::loads::Dirichlet > * >(argp1);
      arg1 = const_cast< dive::loads::Dirichlet * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  dive::loads::Dirichlet > * >(argp1);
      arg1 = const_cast< dive::loads::Dirichlet * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Dirichlet_SetDofIndex" "', argument " "2"" of type '" "DofIndex""'");
  } 
  arg2 = static_cast< DofIndex >(val2);
  (arg1)->SetDofIndex(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Dirichlet_SetValue(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  dive::loads::Dirichlet *arg1 = (dive::loads::Dirichlet *) 0 ;
  IScalar3DPtr arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< dive::loads::Dirichlet > tempshared1 ;
  std::shared_ptr< dive::loads::Dirichlet > *smartarg1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "Dirichlet_SetValue", 2, 2, swig_obj)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_dive__loads__Dirichlet_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Dirichlet_SetValue" "', argument " "1"" of type '" "dive::loads::Dirichlet *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  dive::loads::Dirichlet > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  dive::loads::Dirichlet > * >(argp1);
      arg1 = const_cast< dive::loads::Dirichlet * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  dive::loads::Dirichlet > * >(argp1);
      arg1 = const_cast< dive::loads::Dirichlet * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    int newmem = 0;
    res2 = SWIG_ConvertPtrAndOwn(swig_obj[1], &argp2, SWIGTYPE_p_std__shared_ptrT_values__IScalar3D_t,  0 , &newmem);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Dirichlet_SetValue" "', argument " "2"" of type '" "IScalar3DPtr""'");
    }
    if (argp2) arg2 = *(reinterpret_cast< IScalar3DPtr * >(argp2));
    if (newmem & SWIG_CAST_NEW_MEMORY) delete reinterpret_cast< IScalar3DPtr * >(argp2);
  }
  (arg1)->SetValue(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *Dirichlet_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_std__shared_ptrT_dive__loads__Dirichlet_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_CreateLoadDistributedVolume(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  IElementPtr arg1 ;
  IVector3DPtr arg2 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  LoadDistributedVolumePtr result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "CreateLoadDistributedVolume", 2, 2, swig_obj)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_dive__elements__IElement_t,  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CreateLoadDistributedVolume" "', argument " "1"" of type '" "IElementPtr""'");
    }
    if (argp1) arg1 = *(reinterpret_cast< IElementPtr * >(argp1));
    if (newmem & SWIG_CAST_NEW_MEMORY) delete reinterpret_cast< IElementPtr * >(argp1);
  }
  {
    int newmem = 0;
    res2 = SWIG_ConvertPtrAndOwn(swig_obj[1], &argp2, SWIGTYPE_p_std__shared_ptrT_values__IVector3D_t,  0 , &newmem);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CreateLoadDistributedVolume" "', argument " "2"" of type '" "IVector3DPtr""'");
    }
    if (argp2) arg2 = *(reinterpret_cast< IVector3DPtr * >(argp2));
    if (newmem & SWIG_CAST_NEW_MEMORY) delete reinterpret_cast< IVector3DPtr * >(argp2);
  }
  result = dive::loads::CreateLoadDistributedVolume(SWIG_STD_MOVE(arg1),SWIG_STD_MOVE(arg2));
  {
    std::shared_ptr<  dive::loads::LoadDistributedVolume > *smartresult = result ? new std::shared_ptr<  dive::loads::LoadDistributedVolume >(result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_std__shared_ptrT_dive__loads__LoadDistributedVolume_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_LoadDistributedVolume(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  dive::loads::LoadDistributedVolume *arg1 = (dive::loads::LoadDistributedVolume *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< dive::loads::LoadDistributedVolume > tempshared1 ;
  std::shared_ptr< dive::loads::LoadDistributedVolume > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_dive__loads__LoadDistributedVolume_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_LoadDistributedVolume" "', argument " "1"" of type '" "dive::loads::LoadDistributedVolume *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  dive::loads::LoadDistributedVolume > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  dive::loads::LoadDistributedVolume > * >(argp1);
      arg1 = const_cast< dive::loads::LoadDistributedVolume * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  dive::loads::LoadDistributedVolume > * >(argp1);
      arg1 = const_cast< dive::loads::LoadDistributedVolume * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  (void)arg1; delete smartarg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LoadDistributedVolume_Create(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  LoadDistributedVolumePtr result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "LoadDistributedVolume_Create", 0, 0, 0)) SWIG_fail;
  result = dive::loads::LoadDistributedVolume::Create();
  {
    std::shared_ptr<  dive::loads::LoadDistributedVolume > *smartresult = result ? new std::shared_ptr<  dive::loads::LoadDistributedVolume >(result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_std__shared_ptrT_dive__loads__LoadDistributedVolume_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LoadDistributedVolume_GetPtr__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  dive::loads::LoadDistributedVolume *arg1 = (dive::loads::LoadDistributedVolume *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< dive::loads::LoadDistributedVolume > tempshared1 ;
  std::shared_ptr< dive::loads::LoadDistributedVolume > *smartarg1 = 0 ;
  LoadDistributedVolumePtr result;
  
  (void)self;
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_dive__loads__LoadDistributedVolume_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LoadDistributedVolume_GetPtr" "', argument " "1"" of type '" "dive::loads::LoadDistributedVolume *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  dive::loads::LoadDistributedVolume > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  dive::loads::LoadDistributedVolume > * >(argp1);
      arg1 = const_cast< dive::loads::LoadDistributedVolume * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  dive::loads::LoadDistributedVolume > * >(argp1);
      arg1 = const_cast< dive::loads::LoadDistributedVolume * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = (arg1)->GetPtr();
  {
    std::shared_ptr<  dive::loads::LoadDistributedVolume > *smartresult = result ? new std::shared_ptr<  dive::loads::LoadDistributedVolume >(result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_std__shared_ptrT_dive__loads__LoadDistributedVolume_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LoadDistributedVolume_GetPtr__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  dive::loads::LoadDistributedVolume *arg1 = (dive::loads::LoadDistributedVolume *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< dive::loads::LoadDistributedVolume const > tempshared1 ;
  std::shared_ptr< dive::loads::LoadDistributedVolume const > *smartarg1 = 0 ;
  ConstLoadDistributedVolumePtr result;
  
  (void)self;
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_dive__loads__LoadDistributedVolume_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LoadDistributedVolume_GetPtr" "', argument " "1"" of type '" "dive::loads::LoadDistributedVolume const *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const dive::loads::LoadDistributedVolume > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const dive::loads::LoadDistributedVolume > * >(argp1);
      arg1 = const_cast< dive::loads::LoadDistributedVolume * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const dive::loads::LoadDistributedVolume > * >(argp1);
      arg1 = const_cast< dive::loads::LoadDistributedVolume * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = ((dive::loads::LoadDistributedVolume const *)arg1)->GetPtr();
  {
    std::shared_ptr< const dive::loads::LoadDistributedVolume > *smartresult = result ? new std::shared_ptr< const dive::loads::LoadDistributedVolume >(result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_std__shared_ptrT_dive__loads__LoadDistributedVolume_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LoadDistributedVolume_GetPtr(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "LoadDistributedVolume_GetPtr", 0, 1, argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    int _v = 0;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_std__shared_ptrT_dive__loads__LoadDistributedVolume_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_LoadDistributedVolume_GetPtr__SWIG_0(self, argc, argv);
    }
  }
  if (argc == 1) {
    int _v = 0;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_std__shared_ptrT_dive__loads__LoadDistributedVolume_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_LoadDistributedVolume_GetPtr__SWIG_1(self, argc, argv);
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'LoadDistributedVolume_GetPtr'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    dive::loads::LoadDistributedVolume::GetPtr()\n"
    "    dive::loads::LoadDistributedVolume::GetPtr() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_LoadDistributedVolume_GetType(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  dive::loads::LoadDistributedVolume *arg1 = (dive::loads::LoadDistributedVolume *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< dive::loads::LoadDistributedVolume const > tempshared1 ;
  std::shared_ptr< dive::loads::LoadDistributedVolume const > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  Type result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_dive__loads__LoadDistributedVolume_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LoadDistributedVolume_GetType" "', argument " "1"" of type '" "dive::loads::LoadDistributedVolume const *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const dive::loads::LoadDistributedVolume > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const dive::loads::LoadDistributedVolume > * >(argp1);
      arg1 = const_cast< dive::loads::LoadDistributedVolume * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const dive::loads::LoadDistributedVolume > * >(argp1);
      arg1 = const_cast< dive::loads::LoadDistributedVolume * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = ((dive::loads::LoadDistributedVolume const *)arg1)->GetType();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LoadDistributedVolume_GetElement(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  dive::loads::LoadDistributedVolume *arg1 = (dive::loads::LoadDistributedVolume *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< dive::loads::LoadDistributedVolume const > tempshared1 ;
  std::shared_ptr< dive::loads::LoadDistributedVolume const > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  IElementPtr result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_dive__loads__LoadDistributedVolume_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LoadDistributedVolume_GetElement" "', argument " "1"" of type '" "dive::loads::LoadDistributedVolume const *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const dive::loads::LoadDistributedVolume > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const dive::loads::LoadDistributedVolume > * >(argp1);
      arg1 = const_cast< dive::loads::LoadDistributedVolume * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const dive::loads::LoadDistributedVolume > * >(argp1);
      arg1 = const_cast< dive::loads::LoadDistributedVolume * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = ((dive::loads::LoadDistributedVolume const *)arg1)->GetElement();
  {
    std::shared_ptr<  dive::elements::IElement > *smartresult = result ? new std::shared_ptr<  dive::elements::IElement >(result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_std__shared_ptrT_dive__elements__IElement_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LoadDistributedVolume_GetValue(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  dive::loads::LoadDistributedVolume *arg1 = (dive::loads::LoadDistributedVolume *) 0 ;
  Vector *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< dive::loads::LoadDistributedVolume const > tempshared1 ;
  std::shared_ptr< dive::loads::LoadDistributedVolume const > *smartarg1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  Vector result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "LoadDistributedVolume_GetValue", 2, 2, swig_obj)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_dive__loads__LoadDistributedVolume_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LoadDistributedVolume_GetValue" "', argument " "1"" of type '" "dive::loads::LoadDistributedVolume const *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const dive::loads::LoadDistributedVolume > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const dive::loads::LoadDistributedVolume > * >(argp1);
      arg1 = const_cast< dive::loads::LoadDistributedVolume * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const dive::loads::LoadDistributedVolume > * >(argp1);
      arg1 = const_cast< dive::loads::LoadDistributedVolume * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_eilig__Vector,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "LoadDistributedVolume_GetValue" "', argument " "2"" of type '" "Vector const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "LoadDistributedVolume_GetValue" "', argument " "2"" of type '" "Vector const &""'"); 
  }
  arg2 = reinterpret_cast< Vector * >(argp2);
  result = ((dive::loads::LoadDistributedVolume const *)arg1)->GetValue((Vector const &)*arg2);
  resultobj = SWIG_NewPointerObj((new Vector(result)), SWIGTYPE_p_eilig__Vector, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LoadDistributedVolume_SetElement(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  dive::loads::LoadDistributedVolume *arg1 = (dive::loads::LoadDistributedVolume *) 0 ;
  IElementPtr arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< dive::loads::LoadDistributedVolume > tempshared1 ;
  std::shared_ptr< dive::loads::LoadDistributedVolume > *smartarg1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "LoadDistributedVolume_SetElement", 2, 2, swig_obj)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_dive__loads__LoadDistributedVolume_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LoadDistributedVolume_SetElement" "', argument " "1"" of type '" "dive::loads::LoadDistributedVolume *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  dive::loads::LoadDistributedVolume > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  dive::loads::LoadDistributedVolume > * >(argp1);
      arg1 = const_cast< dive::loads::LoadDistributedVolume * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  dive::loads::LoadDistributedVolume > * >(argp1);
      arg1 = const_cast< dive::loads::LoadDistributedVolume * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    int newmem = 0;
    res2 = SWIG_ConvertPtrAndOwn(swig_obj[1], &argp2, SWIGTYPE_p_std__shared_ptrT_dive__elements__IElement_t,  0 , &newmem);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "LoadDistributedVolume_SetElement" "', argument " "2"" of type '" "IElementPtr""'");
    }
    if (argp2) arg2 = *(reinterpret_cast< IElementPtr * >(argp2));
    if (newmem & SWIG_CAST_NEW_MEMORY) delete reinterpret_cast< IElementPtr * >(argp2);
  }
  (arg1)->SetElement(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LoadDistributedVolume_SetValue(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  dive::loads::LoadDistributedVolume *arg1 = (dive::loads::LoadDistributedVolume *) 0 ;
  IVector3DPtr arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< dive::loads::LoadDistributedVolume > tempshared1 ;
  std::shared_ptr< dive::loads::LoadDistributedVolume > *smartarg1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "LoadDistributedVolume_SetValue", 2, 2, swig_obj)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_dive__loads__LoadDistributedVolume_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LoadDistributedVolume_SetValue" "', argument " "1"" of type '" "dive::loads::LoadDistributedVolume *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  dive::loads::LoadDistributedVolume > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  dive::loads::LoadDistributedVolume > * >(argp1);
      arg1 = const_cast< dive::loads::LoadDistributedVolume * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  dive::loads::LoadDistributedVolume > * >(argp1);
      arg1 = const_cast< dive::loads::LoadDistributedVolume * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    int newmem = 0;
    res2 = SWIG_ConvertPtrAndOwn(swig_obj[1], &argp2, SWIGTYPE_p_std__shared_ptrT_values__IVector3D_t,  0 , &newmem);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "LoadDistributedVolume_SetValue" "', argument " "2"" of type '" "IVector3DPtr""'");
    }
    if (argp2) arg2 = *(reinterpret_cast< IVector3DPtr * >(argp2));
    if (newmem & SWIG_CAST_NEW_MEMORY) delete reinterpret_cast< IVector3DPtr * >(argp2);
  }
  (arg1)->SetValue(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *LoadDistributedVolume_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_std__shared_ptrT_dive__loads__LoadDistributedVolume_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_CreateLoadDistributedFace(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  IElementPtr arg1 ;
  FaceIndex arg2 ;
  IVector3DPtr arg3 ;
  void *argp1 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  PyObject *swig_obj[3] ;
  LoadDistributedFacePtr result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "CreateLoadDistributedFace", 3, 3, swig_obj)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_dive__elements__IElement_t,  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CreateLoadDistributedFace" "', argument " "1"" of type '" "IElementPtr""'");
    }
    if (argp1) arg1 = *(reinterpret_cast< IElementPtr * >(argp1));
    if (newmem & SWIG_CAST_NEW_MEMORY) delete reinterpret_cast< IElementPtr * >(argp1);
  }
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CreateLoadDistributedFace" "', argument " "2"" of type '" "FaceIndex""'");
  } 
  arg2 = static_cast< FaceIndex >(val2);
  {
    int newmem = 0;
    res3 = SWIG_ConvertPtrAndOwn(swig_obj[2], &argp3, SWIGTYPE_p_std__shared_ptrT_values__IVector3D_t,  0 , &newmem);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "CreateLoadDistributedFace" "', argument " "3"" of type '" "IVector3DPtr""'");
    }
    if (argp3) arg3 = *(reinterpret_cast< IVector3DPtr * >(argp3));
    if (newmem & SWIG_CAST_NEW_MEMORY) delete reinterpret_cast< IVector3DPtr * >(argp3);
  }
  result = dive::loads::CreateLoadDistributedFace(SWIG_STD_MOVE(arg1),SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3));
  {
    std::shared_ptr<  dive::loads::LoadDistributedFace > *smartresult = result ? new std::shared_ptr<  dive::loads::LoadDistributedFace >(result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_std__shared_ptrT_dive__loads__LoadDistributedFace_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_LoadDistributedFace(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  dive::loads::LoadDistributedFace *arg1 = (dive::loads::LoadDistributedFace *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< dive::loads::LoadDistributedFace > tempshared1 ;
  std::shared_ptr< dive::loads::LoadDistributedFace > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_dive__loads__LoadDistributedFace_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_LoadDistributedFace" "', argument " "1"" of type '" "dive::loads::LoadDistributedFace *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  dive::loads::LoadDistributedFace > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  dive::loads::LoadDistributedFace > * >(argp1);
      arg1 = const_cast< dive::loads::LoadDistributedFace * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  dive::loads::LoadDistributedFace > * >(argp1);
      arg1 = const_cast< dive::loads::LoadDistributedFace * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  (void)arg1; delete smartarg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LoadDistributedFace_Create(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  LoadDistributedFacePtr result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "LoadDistributedFace_Create", 0, 0, 0)) SWIG_fail;
  result = dive::loads::LoadDistributedFace::Create();
  {
    std::shared_ptr<  dive::loads::LoadDistributedFace > *smartresult = result ? new std::shared_ptr<  dive::loads::LoadDistributedFace >(result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_std__shared_ptrT_dive__loads__LoadDistributedFace_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LoadDistributedFace_GetPtr__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  dive::loads::LoadDistributedFace *arg1 = (dive::loads::LoadDistributedFace *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< dive::loads::LoadDistributedFace > tempshared1 ;
  std::shared_ptr< dive::loads::LoadDistributedFace > *smartarg1 = 0 ;
  LoadDistributedFacePtr result;
  
  (void)self;
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_dive__loads__LoadDistributedFace_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LoadDistributedFace_GetPtr" "', argument " "1"" of type '" "dive::loads::LoadDistributedFace *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  dive::loads::LoadDistributedFace > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  dive::loads::LoadDistributedFace > * >(argp1);
      arg1 = const_cast< dive::loads::LoadDistributedFace * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  dive::loads::LoadDistributedFace > * >(argp1);
      arg1 = const_cast< dive::loads::LoadDistributedFace * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = (arg1)->GetPtr();
  {
    std::shared_ptr<  dive::loads::LoadDistributedFace > *smartresult = result ? new std::shared_ptr<  dive::loads::LoadDistributedFace >(result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_std__shared_ptrT_dive__loads__LoadDistributedFace_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LoadDistributedFace_GetPtr__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  dive::loads::LoadDistributedFace *arg1 = (dive::loads::LoadDistributedFace *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< dive::loads::LoadDistributedFace const > tempshared1 ;
  std::shared_ptr< dive::loads::LoadDistributedFace const > *smartarg1 = 0 ;
  ConstLoadDistributedFacePtr result;
  
  (void)self;
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_dive__loads__LoadDistributedFace_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LoadDistributedFace_GetPtr" "', argument " "1"" of type '" "dive::loads::LoadDistributedFace const *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const dive::loads::LoadDistributedFace > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const dive::loads::LoadDistributedFace > * >(argp1);
      arg1 = const_cast< dive::loads::LoadDistributedFace * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const dive::loads::LoadDistributedFace > * >(argp1);
      arg1 = const_cast< dive::loads::LoadDistributedFace * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = ((dive::loads::LoadDistributedFace const *)arg1)->GetPtr();
  {
    std::shared_ptr< const dive::loads::LoadDistributedFace > *smartresult = result ? new std::shared_ptr< const dive::loads::LoadDistributedFace >(result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_std__shared_ptrT_dive__loads__LoadDistributedFace_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LoadDistributedFace_GetPtr(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "LoadDistributedFace_GetPtr", 0, 1, argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    int _v = 0;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_std__shared_ptrT_dive__loads__LoadDistributedFace_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_LoadDistributedFace_GetPtr__SWIG_0(self, argc, argv);
    }
  }
  if (argc == 1) {
    int _v = 0;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_std__shared_ptrT_dive__loads__LoadDistributedFace_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_LoadDistributedFace_GetPtr__SWIG_1(self, argc, argv);
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'LoadDistributedFace_GetPtr'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    dive::loads::LoadDistributedFace::GetPtr()\n"
    "    dive::loads::LoadDistributedFace::GetPtr() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_LoadDistributedFace_GetType(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  dive::loads::LoadDistributedFace *arg1 = (dive::loads::LoadDistributedFace *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< dive::loads::LoadDistributedFace const > tempshared1 ;
  std::shared_ptr< dive::loads::LoadDistributedFace const > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  Type result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_dive__loads__LoadDistributedFace_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LoadDistributedFace_GetType" "', argument " "1"" of type '" "dive::loads::LoadDistributedFace const *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const dive::loads::LoadDistributedFace > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const dive::loads::LoadDistributedFace > * >(argp1);
      arg1 = const_cast< dive::loads::LoadDistributedFace * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const dive::loads::LoadDistributedFace > * >(argp1);
      arg1 = const_cast< dive::loads::LoadDistributedFace * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = ((dive::loads::LoadDistributedFace const *)arg1)->GetType();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LoadDistributedFace_GetElement(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  dive::loads::LoadDistributedFace *arg1 = (dive::loads::LoadDistributedFace *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< dive::loads::LoadDistributedFace const > tempshared1 ;
  std::shared_ptr< dive::loads::LoadDistributedFace const > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  IElementPtr result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_dive__loads__LoadDistributedFace_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LoadDistributedFace_GetElement" "', argument " "1"" of type '" "dive::loads::LoadDistributedFace const *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const dive::loads::LoadDistributedFace > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const dive::loads::LoadDistributedFace > * >(argp1);
      arg1 = const_cast< dive::loads::LoadDistributedFace * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const dive::loads::LoadDistributedFace > * >(argp1);
      arg1 = const_cast< dive::loads::LoadDistributedFace * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = ((dive::loads::LoadDistributedFace const *)arg1)->GetElement();
  {
    std::shared_ptr<  dive::elements::IElement > *smartresult = result ? new std::shared_ptr<  dive::elements::IElement >(result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_std__shared_ptrT_dive__elements__IElement_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LoadDistributedFace_GetValue(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  dive::loads::LoadDistributedFace *arg1 = (dive::loads::LoadDistributedFace *) 0 ;
  Vector *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< dive::loads::LoadDistributedFace const > tempshared1 ;
  std::shared_ptr< dive::loads::LoadDistributedFace const > *smartarg1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  Vector result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "LoadDistributedFace_GetValue", 2, 2, swig_obj)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_dive__loads__LoadDistributedFace_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LoadDistributedFace_GetValue" "', argument " "1"" of type '" "dive::loads::LoadDistributedFace const *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const dive::loads::LoadDistributedFace > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const dive::loads::LoadDistributedFace > * >(argp1);
      arg1 = const_cast< dive::loads::LoadDistributedFace * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const dive::loads::LoadDistributedFace > * >(argp1);
      arg1 = const_cast< dive::loads::LoadDistributedFace * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_eilig__Vector,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "LoadDistributedFace_GetValue" "', argument " "2"" of type '" "Vector const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "LoadDistributedFace_GetValue" "', argument " "2"" of type '" "Vector const &""'"); 
  }
  arg2 = reinterpret_cast< Vector * >(argp2);
  result = ((dive::loads::LoadDistributedFace const *)arg1)->GetValue((Vector const &)*arg2);
  resultobj = SWIG_NewPointerObj((new Vector(result)), SWIGTYPE_p_eilig__Vector, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LoadDistributedFace_GetFaceIndex(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  dive::loads::LoadDistributedFace *arg1 = (dive::loads::LoadDistributedFace *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< dive::loads::LoadDistributedFace const > tempshared1 ;
  std::shared_ptr< dive::loads::LoadDistributedFace const > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  FaceIndex result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_dive__loads__LoadDistributedFace_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LoadDistributedFace_GetFaceIndex" "', argument " "1"" of type '" "dive::loads::LoadDistributedFace const *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const dive::loads::LoadDistributedFace > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const dive::loads::LoadDistributedFace > * >(argp1);
      arg1 = const_cast< dive::loads::LoadDistributedFace * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const dive::loads::LoadDistributedFace > * >(argp1);
      arg1 = const_cast< dive::loads::LoadDistributedFace * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = ((dive::loads::LoadDistributedFace const *)arg1)->GetFaceIndex();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LoadDistributedFace_SetElement(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  dive::loads::LoadDistributedFace *arg1 = (dive::loads::LoadDistributedFace *) 0 ;
  IElementPtr arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< dive::loads::LoadDistributedFace > tempshared1 ;
  std::shared_ptr< dive::loads::LoadDistributedFace > *smartarg1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "LoadDistributedFace_SetElement", 2, 2, swig_obj)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_dive__loads__LoadDistributedFace_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LoadDistributedFace_SetElement" "', argument " "1"" of type '" "dive::loads::LoadDistributedFace *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  dive::loads::LoadDistributedFace > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  dive::loads::LoadDistributedFace > * >(argp1);
      arg1 = const_cast< dive::loads::LoadDistributedFace * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  dive::loads::LoadDistributedFace > * >(argp1);
      arg1 = const_cast< dive::loads::LoadDistributedFace * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    int newmem = 0;
    res2 = SWIG_ConvertPtrAndOwn(swig_obj[1], &argp2, SWIGTYPE_p_std__shared_ptrT_dive__elements__IElement_t,  0 , &newmem);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "LoadDistributedFace_SetElement" "', argument " "2"" of type '" "IElementPtr""'");
    }
    if (argp2) arg2 = *(reinterpret_cast< IElementPtr * >(argp2));
    if (newmem & SWIG_CAST_NEW_MEMORY) delete reinterpret_cast< IElementPtr * >(argp2);
  }
  (arg1)->SetElement(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LoadDistributedFace_SetFaceIndex(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  dive::loads::LoadDistributedFace *arg1 = (dive::loads::LoadDistributedFace *) 0 ;
  FaceIndex arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< dive::loads::LoadDistributedFace > tempshared1 ;
  std::shared_ptr< dive::loads::LoadDistributedFace > *smartarg1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "LoadDistributedFace_SetFaceIndex", 2, 2, swig_obj)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_dive__loads__LoadDistributedFace_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LoadDistributedFace_SetFaceIndex" "', argument " "1"" of type '" "dive::loads::LoadDistributedFace *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  dive::loads::LoadDistributedFace > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  dive::loads::LoadDistributedFace > * >(argp1);
      arg1 = const_cast< dive::loads::LoadDistributedFace * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  dive::loads::LoadDistributedFace > * >(argp1);
      arg1 = const_cast< dive::loads::LoadDistributedFace * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "LoadDistributedFace_SetFaceIndex" "', argument " "2"" of type '" "FaceIndex""'");
  } 
  arg2 = static_cast< FaceIndex >(val2);
  (arg1)->SetFaceIndex(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LoadDistributedFace_SetValue(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  dive::loads::LoadDistributedFace *arg1 = (dive::loads::LoadDistributedFace *) 0 ;
  IVector3DPtr arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< dive::loads::LoadDistributedFace > tempshared1 ;
  std::shared_ptr< dive::loads::LoadDistributedFace > *smartarg1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "LoadDistributedFace_SetValue", 2, 2, swig_obj)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_dive__loads__LoadDistributedFace_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LoadDistributedFace_SetValue" "', argument " "1"" of type '" "dive::loads::LoadDistributedFace *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  dive::loads::LoadDistributedFace > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  dive::loads::LoadDistributedFace > * >(argp1);
      arg1 = const_cast< dive::loads::LoadDistributedFace * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  dive::loads::LoadDistributedFace > * >(argp1);
      arg1 = const_cast< dive::loads::LoadDistributedFace * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    int newmem = 0;
    res2 = SWIG_ConvertPtrAndOwn(swig_obj[1], &argp2, SWIGTYPE_p_std__shared_ptrT_values__IVector3D_t,  0 , &newmem);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "LoadDistributedFace_SetValue" "', argument " "2"" of type '" "IVector3DPtr""'");
    }
    if (argp2) arg2 = *(reinterpret_cast< IVector3DPtr * >(argp2));
    if (newmem & SWIG_CAST_NEW_MEMORY) delete reinterpret_cast< IVector3DPtr * >(argp2);
  }
  (arg1)->SetValue(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *LoadDistributedFace_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_std__shared_ptrT_dive__loads__LoadDistributedFace_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_vecMeshes_iterator(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::shared_ptr< dive::meshes::IMesh > > *arg1 = (std::vector< std::shared_ptr< dive::meshes::IMesh > > *) 0 ;
  PyObject **arg2 = (PyObject **) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  swig::SwigPyIterator *result = 0 ;
  
  arg2 = &swig_obj[0];
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__shared_ptrT_dive__meshes__IMesh_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vecMeshes_iterator" "', argument " "1"" of type '" "std::vector< std::shared_ptr< dive::meshes::IMesh > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::shared_ptr< dive::meshes::IMesh > > * >(argp1);
  result = (swig::SwigPyIterator *)std_vector_Sl_std_shared_ptr_Sl_dive_meshes_IMesh_Sg__Sg__iterator(arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vecMeshes___nonzero__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::shared_ptr< dive::meshes::IMesh > > *arg1 = (std::vector< std::shared_ptr< dive::meshes::IMesh > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__shared_ptrT_dive__meshes__IMesh_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vecMeshes___nonzero__" "', argument " "1"" of type '" "std::vector< std::shared_ptr< dive::meshes::IMesh > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::shared_ptr< dive::meshes::IMesh > > * >(argp1);
  result = (bool)std_vector_Sl_std_shared_ptr_Sl_dive_meshes_IMesh_Sg__Sg____nonzero__((std::vector< std::shared_ptr< dive::meshes::IMesh > > const *)arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vecMeshes___bool__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::shared_ptr< dive::meshes::IMesh > > *arg1 = (std::vector< std::shared_ptr< dive::meshes::IMesh > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__shared_ptrT_dive__meshes__IMesh_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vecMeshes___bool__" "', argument " "1"" of type '" "std::vector< std::shared_ptr< dive::meshes::IMesh > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::shared_ptr< dive::meshes::IMesh > > * >(argp1);
  result = (bool)std_vector_Sl_std_shared_ptr_Sl_dive_meshes_IMesh_Sg__Sg____bool__((std::vector< std::shared_ptr< dive::meshes::IMesh > > const *)arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vecMeshes___len__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::shared_ptr< dive::meshes::IMesh > > *arg1 = (std::vector< std::shared_ptr< dive::meshes::IMesh > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< std::shared_ptr< dive::meshes::IMesh > >::size_type result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__shared_ptrT_dive__meshes__IMesh_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vecMeshes___len__" "', argument " "1"" of type '" "std::vector< std::shared_ptr< dive::meshes::IMesh > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::shared_ptr< dive::meshes::IMesh > > * >(argp1);
  result = std_vector_Sl_std_shared_ptr_Sl_dive_meshes_IMesh_Sg__Sg____len__((std::vector< std::shared_ptr< dive::meshes::IMesh > > const *)arg1);
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vecMeshes___getslice__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::shared_ptr< dive::meshes::IMesh > > *arg1 = (std::vector< std::shared_ptr< dive::meshes::IMesh > > *) 0 ;
  std::vector< std::shared_ptr< dive::meshes::IMesh > >::difference_type arg2 ;
  std::vector< std::shared_ptr< dive::meshes::IMesh > >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  std::vector< std::shared_ptr< dive::meshes::IMesh >,std::allocator< std::shared_ptr< dive::meshes::IMesh > > > *result = 0 ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "vecMeshes___getslice__", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__shared_ptrT_dive__meshes__IMesh_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vecMeshes___getslice__" "', argument " "1"" of type '" "std::vector< std::shared_ptr< dive::meshes::IMesh > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::shared_ptr< dive::meshes::IMesh > > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vecMeshes___getslice__" "', argument " "2"" of type '" "std::vector< std::shared_ptr< dive::meshes::IMesh > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< std::shared_ptr< dive::meshes::IMesh > >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "vecMeshes___getslice__" "', argument " "3"" of type '" "std::vector< std::shared_ptr< dive::meshes::IMesh > >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< std::shared_ptr< dive::meshes::IMesh > >::difference_type >(val3);
  try {
    result = (std::vector< std::shared_ptr< dive::meshes::IMesh >,std::allocator< std::shared_ptr< dive::meshes::IMesh > > > *)std_vector_Sl_std_shared_ptr_Sl_dive_meshes_IMesh_Sg__Sg____getslice__(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3));
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__shared_ptrT_dive__meshes__IMesh_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vecMeshes___setslice____SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< std::shared_ptr< dive::meshes::IMesh > > *arg1 = (std::vector< std::shared_ptr< dive::meshes::IMesh > > *) 0 ;
  std::vector< std::shared_ptr< dive::meshes::IMesh > >::difference_type arg2 ;
  std::vector< std::shared_ptr< dive::meshes::IMesh > >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__shared_ptrT_dive__meshes__IMesh_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vecMeshes___setslice__" "', argument " "1"" of type '" "std::vector< std::shared_ptr< dive::meshes::IMesh > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::shared_ptr< dive::meshes::IMesh > > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vecMeshes___setslice__" "', argument " "2"" of type '" "std::vector< std::shared_ptr< dive::meshes::IMesh > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< std::shared_ptr< dive::meshes::IMesh > >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "vecMeshes___setslice__" "', argument " "3"" of type '" "std::vector< std::shared_ptr< dive::meshes::IMesh > >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< std::shared_ptr< dive::meshes::IMesh > >::difference_type >(val3);
  try {
    std_vector_Sl_std_shared_ptr_Sl_dive_meshes_IMesh_Sg__Sg____setslice____SWIG_0(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3));
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vecMeshes___setslice____SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< std::shared_ptr< dive::meshes::IMesh > > *arg1 = (std::vector< std::shared_ptr< dive::meshes::IMesh > > *) 0 ;
  std::vector< std::shared_ptr< dive::meshes::IMesh > >::difference_type arg2 ;
  std::vector< std::shared_ptr< dive::meshes::IMesh > >::difference_type arg3 ;
  std::vector< std::shared_ptr< dive::meshes::IMesh >,std::allocator< std::shared_ptr< dive::meshes::IMesh > > > *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  
  (void)self;
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__shared_ptrT_dive__meshes__IMesh_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vecMeshes___setslice__" "', argument " "1"" of type '" "std::vector< std::shared_ptr< dive::meshes::IMesh > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::shared_ptr< dive::meshes::IMesh > > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vecMeshes___setslice__" "', argument " "2"" of type '" "std::vector< std::shared_ptr< dive::meshes::IMesh > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< std::shared_ptr< dive::meshes::IMesh > >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "vecMeshes___setslice__" "', argument " "3"" of type '" "std::vector< std::shared_ptr< dive::meshes::IMesh > >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< std::shared_ptr< dive::meshes::IMesh > >::difference_type >(val3);
  {
    std::vector< std::shared_ptr< dive::meshes::IMesh >,std::allocator< std::shared_ptr< dive::meshes::IMesh > > > *ptr = (std::vector< std::shared_ptr< dive::meshes::IMesh >,std::allocator< std::shared_ptr< dive::meshes::IMesh > > > *)0;
    res4 = swig::asptr(swig_obj[3], &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "vecMeshes___setslice__" "', argument " "4"" of type '" "std::vector< std::shared_ptr< dive::meshes::IMesh >,std::allocator< std::shared_ptr< dive::meshes::IMesh > > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vecMeshes___setslice__" "', argument " "4"" of type '" "std::vector< std::shared_ptr< dive::meshes::IMesh >,std::allocator< std::shared_ptr< dive::meshes::IMesh > > > const &""'"); 
    }
    arg4 = ptr;
  }
  try {
    std_vector_Sl_std_shared_ptr_Sl_dive_meshes_IMesh_Sg__Sg____setslice____SWIG_1(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3),(std::vector< std::shared_ptr< dive::meshes::IMesh >,std::allocator< std::shared_ptr< dive::meshes::IMesh > > > const &)*arg4);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_vecMeshes___setslice__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "vecMeshes___setslice__", 0, 4, argv))) SWIG_fail;
  --argc;
  if (argc == 3) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< std::shared_ptr< dive::meshes::IMesh >,std::allocator< std::shared_ptr< dive::meshes::IMesh > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_ptrdiff_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_vecMeshes___setslice____SWIG_0(self, argc, argv);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< std::shared_ptr< dive::meshes::IMesh >,std::allocator< std::shared_ptr< dive::meshes::IMesh > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_ptrdiff_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = swig::asptr(argv[3], (std::vector< std::shared_ptr< dive::meshes::IMesh >,std::allocator< std::shared_ptr< dive::meshes::IMesh > > >**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_vecMeshes___setslice____SWIG_1(self, argc, argv);
          }
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'vecMeshes___setslice__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< std::shared_ptr< dive::meshes::IMesh > >::__setslice__(std::vector< std::shared_ptr< dive::meshes::IMesh > >::difference_type,std::vector< std::shared_ptr< dive::meshes::IMesh > >::difference_type)\n"
    "    std::vector< std::shared_ptr< dive::meshes::IMesh > >::__setslice__(std::vector< std::shared_ptr< dive::meshes::IMesh > >::difference_type,std::vector< std::shared_ptr< dive::meshes::IMesh > >::difference_type,std::vector< std::shared_ptr< dive::meshes::IMesh >,std::allocator< std::shared_ptr< dive::meshes::IMesh > > > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_vecMeshes___delslice__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::shared_ptr< dive::meshes::IMesh > > *arg1 = (std::vector< std::shared_ptr< dive::meshes::IMesh > > *) 0 ;
  std::vector< std::shared_ptr< dive::meshes::IMesh > >::difference_type arg2 ;
  std::vector< std::shared_ptr< dive::meshes::IMesh > >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "vecMeshes___delslice__", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__shared_ptrT_dive__meshes__IMesh_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vecMeshes___delslice__" "', argument " "1"" of type '" "std::vector< std::shared_ptr< dive::meshes::IMesh > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::shared_ptr< dive::meshes::IMesh > > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vecMeshes___delslice__" "', argument " "2"" of type '" "std::vector< std::shared_ptr< dive::meshes::IMesh > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< std::shared_ptr< dive::meshes::IMesh > >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "vecMeshes___delslice__" "', argument " "3"" of type '" "std::vector< std::shared_ptr< dive::meshes::IMesh > >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< std::shared_ptr< dive::meshes::IMesh > >::difference_type >(val3);
  try {
    std_vector_Sl_std_shared_ptr_Sl_dive_meshes_IMesh_Sg__Sg____delslice__(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3));
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vecMeshes___delitem____SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< std::shared_ptr< dive::meshes::IMesh > > *arg1 = (std::vector< std::shared_ptr< dive::meshes::IMesh > > *) 0 ;
  std::vector< std::shared_ptr< dive::meshes::IMesh > >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__shared_ptrT_dive__meshes__IMesh_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vecMeshes___delitem__" "', argument " "1"" of type '" "std::vector< std::shared_ptr< dive::meshes::IMesh > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::shared_ptr< dive::meshes::IMesh > > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vecMeshes___delitem__" "', argument " "2"" of type '" "std::vector< std::shared_ptr< dive::meshes::IMesh > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< std::shared_ptr< dive::meshes::IMesh > >::difference_type >(val2);
  try {
    std_vector_Sl_std_shared_ptr_Sl_dive_meshes_IMesh_Sg__Sg____delitem____SWIG_0(arg1,SWIG_STD_MOVE(arg2));
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vecMeshes___getitem____SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< std::shared_ptr< dive::meshes::IMesh > > *arg1 = (std::vector< std::shared_ptr< dive::meshes::IMesh > > *) 0 ;
  SWIGPY_SLICEOBJECT *arg2 = (SWIGPY_SLICEOBJECT *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< std::shared_ptr< dive::meshes::IMesh >,std::allocator< std::shared_ptr< dive::meshes::IMesh > > > *result = 0 ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__shared_ptrT_dive__meshes__IMesh_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vecMeshes___getitem__" "', argument " "1"" of type '" "std::vector< std::shared_ptr< dive::meshes::IMesh > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::shared_ptr< dive::meshes::IMesh > > * >(argp1);
  {
    if (!PySlice_Check(swig_obj[1])) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vecMeshes___getitem__" "', argument " "2"" of type '" "SWIGPY_SLICEOBJECT *""'");
    }
    arg2 = (SWIGPY_SLICEOBJECT *) swig_obj[1];
  }
  try {
    result = (std::vector< std::shared_ptr< dive::meshes::IMesh >,std::allocator< std::shared_ptr< dive::meshes::IMesh > > > *)std_vector_Sl_std_shared_ptr_Sl_dive_meshes_IMesh_Sg__Sg____getitem____SWIG_0(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__shared_ptrT_dive__meshes__IMesh_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vecMeshes___setitem____SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< std::shared_ptr< dive::meshes::IMesh > > *arg1 = (std::vector< std::shared_ptr< dive::meshes::IMesh > > *) 0 ;
  SWIGPY_SLICEOBJECT *arg2 = (SWIGPY_SLICEOBJECT *) 0 ;
  std::vector< std::shared_ptr< dive::meshes::IMesh >,std::allocator< std::shared_ptr< dive::meshes::IMesh > > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__shared_ptrT_dive__meshes__IMesh_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vecMeshes___setitem__" "', argument " "1"" of type '" "std::vector< std::shared_ptr< dive::meshes::IMesh > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::shared_ptr< dive::meshes::IMesh > > * >(argp1);
  {
    if (!PySlice_Check(swig_obj[1])) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vecMeshes___setitem__" "', argument " "2"" of type '" "SWIGPY_SLICEOBJECT *""'");
    }
    arg2 = (SWIGPY_SLICEOBJECT *) swig_obj[1];
  }
  {
    std::vector< std::shared_ptr< dive::meshes::IMesh >,std::allocator< std::shared_ptr< dive::meshes::IMesh > > > *ptr = (std::vector< std::shared_ptr< dive::meshes::IMesh >,std::allocator< std::shared_ptr< dive::meshes::IMesh > > > *)0;
    res3 = swig::asptr(swig_obj[2], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "vecMeshes___setitem__" "', argument " "3"" of type '" "std::vector< std::shared_ptr< dive::meshes::IMesh >,std::allocator< std::shared_ptr< dive::meshes::IMesh > > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vecMeshes___setitem__" "', argument " "3"" of type '" "std::vector< std::shared_ptr< dive::meshes::IMesh >,std::allocator< std::shared_ptr< dive::meshes::IMesh > > > const &""'"); 
    }
    arg3 = ptr;
  }
  try {
    std_vector_Sl_std_shared_ptr_Sl_dive_meshes_IMesh_Sg__Sg____setitem____SWIG_0(arg1,arg2,(std::vector< std::shared_ptr< dive::meshes::IMesh >,std::allocator< std::shared_ptr< dive::meshes::IMesh > > > const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_vecMeshes___setitem____SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< std::shared_ptr< dive::meshes::IMesh > > *arg1 = (std::vector< std::shared_ptr< dive::meshes::IMesh > > *) 0 ;
  SWIGPY_SLICEOBJECT *arg2 = (SWIGPY_SLICEOBJECT *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__shared_ptrT_dive__meshes__IMesh_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vecMeshes___setitem__" "', argument " "1"" of type '" "std::vector< std::shared_ptr< dive::meshes::IMesh > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::shared_ptr< dive::meshes::IMesh > > * >(argp1);
  {
    if (!PySlice_Check(swig_obj[1])) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vecMeshes___setitem__" "', argument " "2"" of type '" "SWIGPY_SLICEOBJECT *""'");
    }
    arg2 = (SWIGPY_SLICEOBJECT *) swig_obj[1];
  }
  try {
    std_vector_Sl_std_shared_ptr_Sl_dive_meshes_IMesh_Sg__Sg____setitem____SWIG_1(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vecMeshes___delitem____SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< std::shared_ptr< dive::meshes::IMesh > > *arg1 = (std::vector< std::shared_ptr< dive::meshes::IMesh > > *) 0 ;
  SWIGPY_SLICEOBJECT *arg2 = (SWIGPY_SLICEOBJECT *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__shared_ptrT_dive__meshes__IMesh_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vecMeshes___delitem__" "', argument " "1"" of type '" "std::vector< std::shared_ptr< dive::meshes::IMesh > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::shared_ptr< dive::meshes::IMesh > > * >(argp1);
  {
    if (!PySlice_Check(swig_obj[1])) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vecMeshes___delitem__" "', argument " "2"" of type '" "SWIGPY_SLICEOBJECT *""'");
    }
    arg2 = (SWIGPY_SLICEOBJECT *) swig_obj[1];
  }
  try {
    std_vector_Sl_std_shared_ptr_Sl_dive_meshes_IMesh_Sg__Sg____delitem____SWIG_1(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vecMeshes___delitem__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "vecMeshes___delitem__", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< std::shared_ptr< dive::meshes::IMesh >,std::allocator< std::shared_ptr< dive::meshes::IMesh > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_vecMeshes___delitem____SWIG_1(self, argc, argv);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< std::shared_ptr< dive::meshes::IMesh >,std::allocator< std::shared_ptr< dive::meshes::IMesh > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_vecMeshes___delitem____SWIG_0(self, argc, argv);
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'vecMeshes___delitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< std::shared_ptr< dive::meshes::IMesh > >::__delitem__(std::vector< std::shared_ptr< dive::meshes::IMesh > >::difference_type)\n"
    "    std::vector< std::shared_ptr< dive::meshes::IMesh > >::__delitem__(SWIGPY_SLICEOBJECT *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_vecMeshes___getitem____SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< std::shared_ptr< dive::meshes::IMesh > > *arg1 = (std::vector< std::shared_ptr< dive::meshes::IMesh > > *) 0 ;
  std::vector< std::shared_ptr< dive::meshes::IMesh > >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  std::vector< std::shared_ptr< dive::meshes::IMesh > >::value_type *result = 0 ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__shared_ptrT_dive__meshes__IMesh_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vecMeshes___getitem__" "', argument " "1"" of type '" "std::vector< std::shared_ptr< dive::meshes::IMesh > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::shared_ptr< dive::meshes::IMesh > > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vecMeshes___getitem__" "', argument " "2"" of type '" "std::vector< std::shared_ptr< dive::meshes::IMesh > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< std::shared_ptr< dive::meshes::IMesh > >::difference_type >(val2);
  try {
    result = (std::vector< std::shared_ptr< dive::meshes::IMesh > >::value_type *) &std_vector_Sl_std_shared_ptr_Sl_dive_meshes_IMesh_Sg__Sg____getitem____SWIG_1((std::vector< std::shared_ptr< dive::meshes::IMesh > > const *)arg1,SWIG_STD_MOVE(arg2));
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  {
    std::shared_ptr<  dive::meshes::IMesh > *smartresult = *result ? new std::shared_ptr<  dive::meshes::IMesh >(*result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_std__shared_ptrT_dive__meshes__IMesh_t, SWIG_POINTER_OWN);
  }
  (void)swig::container_owner<swig::traits<std::vector< std::shared_ptr< dive::meshes::IMesh > >::value_type>::category>::back_reference(resultobj, swig_obj[0]);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vecMeshes___getitem__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "vecMeshes___getitem__", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< std::shared_ptr< dive::meshes::IMesh >,std::allocator< std::shared_ptr< dive::meshes::IMesh > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_vecMeshes___getitem____SWIG_0(self, argc, argv);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< std::shared_ptr< dive::meshes::IMesh >,std::allocator< std::shared_ptr< dive::meshes::IMesh > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_vecMeshes___getitem____SWIG_1(self, argc, argv);
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'vecMeshes___getitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< std::shared_ptr< dive::meshes::IMesh > >::__getitem__(SWIGPY_SLICEOBJECT *)\n"
    "    std::vector< std::shared_ptr< dive::meshes::IMesh > >::__getitem__(std::vector< std::shared_ptr< dive::meshes::IMesh > >::difference_type) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_vecMeshes___setitem____SWIG_2(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< std::shared_ptr< dive::meshes::IMesh > > *arg1 = (std::vector< std::shared_ptr< dive::meshes::IMesh > > *) 0 ;
  std::vector< std::shared_ptr< dive::meshes::IMesh > >::difference_type arg2 ;
  std::vector< std::shared_ptr< dive::meshes::IMesh > >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  std::vector< std::shared_ptr< dive::meshes::IMesh > >::value_type tempshared3 ;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__shared_ptrT_dive__meshes__IMesh_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vecMeshes___setitem__" "', argument " "1"" of type '" "std::vector< std::shared_ptr< dive::meshes::IMesh > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::shared_ptr< dive::meshes::IMesh > > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vecMeshes___setitem__" "', argument " "2"" of type '" "std::vector< std::shared_ptr< dive::meshes::IMesh > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< std::shared_ptr< dive::meshes::IMesh > >::difference_type >(val2);
  {
    int newmem = 0;
    res3 = SWIG_ConvertPtrAndOwn(swig_obj[2], &argp3, SWIGTYPE_p_std__shared_ptrT_dive__meshes__IMesh_t,  0 , &newmem);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "vecMeshes___setitem__" "', argument " "3"" of type '" "std::vector< std::shared_ptr< dive::meshes::IMesh > >::value_type const &""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      if (argp3) tempshared3 = *reinterpret_cast< std::vector< std::shared_ptr< dive::meshes::IMesh > >::value_type * >(argp3);
      delete reinterpret_cast< std::vector< std::shared_ptr< dive::meshes::IMesh > >::value_type * >(argp3);
      arg3 = &tempshared3;
    } else {
      arg3 = (argp3) ? reinterpret_cast< std::vector< std::shared_ptr< dive::meshes::IMesh > >::value_type * >(argp3) : &tempshared3;
    }
  }
  try {
    std_vector_Sl_std_shared_ptr_Sl_dive_meshes_IMesh_Sg__Sg____setitem____SWIG_2(arg1,SWIG_STD_MOVE(arg2),(std::shared_ptr< dive::meshes::IMesh > const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vecMeshes___setitem__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "vecMeshes___setitem__", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< std::shared_ptr< dive::meshes::IMesh >,std::allocator< std::shared_ptr< dive::meshes::IMesh > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_vecMeshes___setitem____SWIG_1(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< std::shared_ptr< dive::meshes::IMesh >,std::allocator< std::shared_ptr< dive::meshes::IMesh > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        int res = swig::asptr(argv[2], (std::vector< std::shared_ptr< dive::meshes::IMesh >,std::allocator< std::shared_ptr< dive::meshes::IMesh > > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_vecMeshes___setitem____SWIG_0(self, argc, argv);
        }
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< std::shared_ptr< dive::meshes::IMesh >,std::allocator< std::shared_ptr< dive::meshes::IMesh > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_std__shared_ptrT_dive__meshes__IMesh_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_vecMeshes___setitem____SWIG_2(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'vecMeshes___setitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< std::shared_ptr< dive::meshes::IMesh > >::__setitem__(SWIGPY_SLICEOBJECT *,std::vector< std::shared_ptr< dive::meshes::IMesh >,std::allocator< std::shared_ptr< dive::meshes::IMesh > > > const &)\n"
    "    std::vector< std::shared_ptr< dive::meshes::IMesh > >::__setitem__(SWIGPY_SLICEOBJECT *)\n"
    "    std::vector< std::shared_ptr< dive::meshes::IMesh > >::__setitem__(std::vector< std::shared_ptr< dive::meshes::IMesh > >::difference_type,std::vector< std::shared_ptr< dive::meshes::IMesh > >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_vecMeshes_pop(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::shared_ptr< dive::meshes::IMesh > > *arg1 = (std::vector< std::shared_ptr< dive::meshes::IMesh > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< std::shared_ptr< dive::meshes::IMesh > >::value_type result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__shared_ptrT_dive__meshes__IMesh_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vecMeshes_pop" "', argument " "1"" of type '" "std::vector< std::shared_ptr< dive::meshes::IMesh > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::shared_ptr< dive::meshes::IMesh > > * >(argp1);
  try {
    result = std_vector_Sl_std_shared_ptr_Sl_dive_meshes_IMesh_Sg__Sg__pop(arg1);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  {
    std::shared_ptr<  dive::meshes::IMesh > *smartresult = result ? new std::shared_ptr<  dive::meshes::IMesh >(result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_std__shared_ptrT_dive__meshes__IMesh_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vecMeshes_append(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::shared_ptr< dive::meshes::IMesh > > *arg1 = (std::vector< std::shared_ptr< dive::meshes::IMesh > > *) 0 ;
  std::vector< std::shared_ptr< dive::meshes::IMesh > >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  std::vector< std::shared_ptr< dive::meshes::IMesh > >::value_type tempshared2 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "vecMeshes_append", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__shared_ptrT_dive__meshes__IMesh_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vecMeshes_append" "', argument " "1"" of type '" "std::vector< std::shared_ptr< dive::meshes::IMesh > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::shared_ptr< dive::meshes::IMesh > > * >(argp1);
  {
    int newmem = 0;
    res2 = SWIG_ConvertPtrAndOwn(swig_obj[1], &argp2, SWIGTYPE_p_std__shared_ptrT_dive__meshes__IMesh_t,  0 , &newmem);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "vecMeshes_append" "', argument " "2"" of type '" "std::vector< std::shared_ptr< dive::meshes::IMesh > >::value_type const &""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      if (argp2) tempshared2 = *reinterpret_cast< std::vector< std::shared_ptr< dive::meshes::IMesh > >::value_type * >(argp2);
      delete reinterpret_cast< std::vector< std::shared_ptr< dive::meshes::IMesh > >::value_type * >(argp2);
      arg2 = &tempshared2;
    } else {
      arg2 = (argp2) ? reinterpret_cast< std::vector< std::shared_ptr< dive::meshes::IMesh > >::value_type * >(argp2) : &tempshared2;
    }
  }
  std_vector_Sl_std_shared_ptr_Sl_dive_meshes_IMesh_Sg__Sg__append(arg1,(std::shared_ptr< dive::meshes::IMesh > const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_vecMeshes__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **SWIGUNUSEDPARM(swig_obj)) {
  PyObject *resultobj = 0;
  std::vector< std::shared_ptr< dive::meshes::IMesh > > *result = 0 ;
  
  (void)self;
  if ((nobjs < 0) || (nobjs > 0)) SWIG_fail;
  result = (std::vector< std::shared_ptr< dive::meshes::IMesh > > *)new std::vector< std::shared_ptr< dive::meshes::IMesh > >();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__shared_ptrT_dive__meshes__IMesh_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_vecMeshes__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< std::shared_ptr< dive::meshes::IMesh > > *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  std::vector< std::shared_ptr< dive::meshes::IMesh > > *result = 0 ;
  
  (void)self;
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  {
    std::vector< std::shared_ptr< dive::meshes::IMesh >,std::allocator< std::shared_ptr< dive::meshes::IMesh > > > *ptr = (std::vector< std::shared_ptr< dive::meshes::IMesh >,std::allocator< std::shared_ptr< dive::meshes::IMesh > > > *)0;
    res1 = swig::asptr(swig_obj[0], &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_vecMeshes" "', argument " "1"" of type '" "std::vector< std::shared_ptr< dive::meshes::IMesh > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_vecMeshes" "', argument " "1"" of type '" "std::vector< std::shared_ptr< dive::meshes::IMesh > > const &""'"); 
    }
    arg1 = ptr;
  }
  result = (std::vector< std::shared_ptr< dive::meshes::IMesh > > *)new std::vector< std::shared_ptr< dive::meshes::IMesh > >((std::vector< std::shared_ptr< dive::meshes::IMesh > > const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__shared_ptrT_dive__meshes__IMesh_t_t, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_vecMeshes_empty(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::shared_ptr< dive::meshes::IMesh > > *arg1 = (std::vector< std::shared_ptr< dive::meshes::IMesh > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__shared_ptrT_dive__meshes__IMesh_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vecMeshes_empty" "', argument " "1"" of type '" "std::vector< std::shared_ptr< dive::meshes::IMesh > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::shared_ptr< dive::meshes::IMesh > > * >(argp1);
  result = (bool)((std::vector< std::shared_ptr< dive::meshes::IMesh > > const *)arg1)->empty();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vecMeshes_size(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::shared_ptr< dive::meshes::IMesh > > *arg1 = (std::vector< std::shared_ptr< dive::meshes::IMesh > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< std::shared_ptr< dive::meshes::IMesh > >::size_type result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__shared_ptrT_dive__meshes__IMesh_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vecMeshes_size" "', argument " "1"" of type '" "std::vector< std::shared_ptr< dive::meshes::IMesh > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::shared_ptr< dive::meshes::IMesh > > * >(argp1);
  result = ((std::vector< std::shared_ptr< dive::meshes::IMesh > > const *)arg1)->size();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vecMeshes_swap(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::shared_ptr< dive::meshes::IMesh > > *arg1 = (std::vector< std::shared_ptr< dive::meshes::IMesh > > *) 0 ;
  std::vector< std::shared_ptr< dive::meshes::IMesh > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "vecMeshes_swap", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__shared_ptrT_dive__meshes__IMesh_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vecMeshes_swap" "', argument " "1"" of type '" "std::vector< std::shared_ptr< dive::meshes::IMesh > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::shared_ptr< dive::meshes::IMesh > > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_std__vectorT_std__shared_ptrT_dive__meshes__IMesh_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "vecMeshes_swap" "', argument " "2"" of type '" "std::vector< std::shared_ptr< dive::meshes::IMesh > > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vecMeshes_swap" "', argument " "2"" of type '" "std::vector< std::shared_ptr< dive::meshes::IMesh > > &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< std::shared_ptr< dive::meshes::IMesh > > * >(argp2);
  (arg1)->swap(*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vecMeshes_begin(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::shared_ptr< dive::meshes::IMesh > > *arg1 = (std::vector< std::shared_ptr< dive::meshes::IMesh > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< std::shared_ptr< dive::meshes::IMesh > >::iterator result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__shared_ptrT_dive__meshes__IMesh_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vecMeshes_begin" "', argument " "1"" of type '" "std::vector< std::shared_ptr< dive::meshes::IMesh > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::shared_ptr< dive::meshes::IMesh > > * >(argp1);
  result = (arg1)->begin();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< std::shared_ptr< dive::meshes::IMesh > >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vecMeshes_end(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::shared_ptr< dive::meshes::IMesh > > *arg1 = (std::vector< std::shared_ptr< dive::meshes::IMesh > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< std::shared_ptr< dive::meshes::IMesh > >::iterator result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__shared_ptrT_dive__meshes__IMesh_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vecMeshes_end" "', argument " "1"" of type '" "std::vector< std::shared_ptr< dive::meshes::IMesh > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::shared_ptr< dive::meshes::IMesh > > * >(argp1);
  result = (arg1)->end();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< std::shared_ptr< dive::meshes::IMesh > >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vecMeshes_rbegin(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::shared_ptr< dive::meshes::IMesh > > *arg1 = (std::vector< std::shared_ptr< dive::meshes::IMesh > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< std::shared_ptr< dive::meshes::IMesh > >::reverse_iterator result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__shared_ptrT_dive__meshes__IMesh_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vecMeshes_rbegin" "', argument " "1"" of type '" "std::vector< std::shared_ptr< dive::meshes::IMesh > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::shared_ptr< dive::meshes::IMesh > > * >(argp1);
  result = (arg1)->rbegin();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< std::shared_ptr< dive::meshes::IMesh > >::reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vecMeshes_rend(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::shared_ptr< dive::meshes::IMesh > > *arg1 = (std::vector< std::shared_ptr< dive::meshes::IMesh > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< std::shared_ptr< dive::meshes::IMesh > >::reverse_iterator result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__shared_ptrT_dive__meshes__IMesh_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vecMeshes_rend" "', argument " "1"" of type '" "std::vector< std::shared_ptr< dive::meshes::IMesh > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::shared_ptr< dive::meshes::IMesh > > * >(argp1);
  result = (arg1)->rend();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< std::shared_ptr< dive::meshes::IMesh > >::reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vecMeshes_clear(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::shared_ptr< dive::meshes::IMesh > > *arg1 = (std::vector< std::shared_ptr< dive::meshes::IMesh > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__shared_ptrT_dive__meshes__IMesh_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vecMeshes_clear" "', argument " "1"" of type '" "std::vector< std::shared_ptr< dive::meshes::IMesh > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::shared_ptr< dive::meshes::IMesh > > * >(argp1);
  (arg1)->clear();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vecMeshes_get_allocator(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::shared_ptr< dive::meshes::IMesh > > *arg1 = (std::vector< std::shared_ptr< dive::meshes::IMesh > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  SwigValueWrapper< std::allocator< std::shared_ptr< dive::meshes::IMesh > > > result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__shared_ptrT_dive__meshes__IMesh_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vecMeshes_get_allocator" "', argument " "1"" of type '" "std::vector< std::shared_ptr< dive::meshes::IMesh > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::shared_ptr< dive::meshes::IMesh > > * >(argp1);
  result = ((std::vector< std::shared_ptr< dive::meshes::IMesh > > const *)arg1)->get_allocator();
  resultobj = SWIG_NewPointerObj((new std::vector< std::shared_ptr< dive::meshes::IMesh > >::allocator_type(result)), SWIGTYPE_p_std__allocatorT_std__shared_ptrT_dive__meshes__IMesh_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_vecMeshes__SWIG_2(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< std::shared_ptr< dive::meshes::IMesh > >::size_type arg1 ;
  size_t val1 ;
  int ecode1 = 0 ;
  std::vector< std::shared_ptr< dive::meshes::IMesh > > *result = 0 ;
  
  (void)self;
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_vecMeshes" "', argument " "1"" of type '" "std::vector< std::shared_ptr< dive::meshes::IMesh > >::size_type""'");
  } 
  arg1 = static_cast< std::vector< std::shared_ptr< dive::meshes::IMesh > >::size_type >(val1);
  result = (std::vector< std::shared_ptr< dive::meshes::IMesh > > *)new std::vector< std::shared_ptr< dive::meshes::IMesh > >(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__shared_ptrT_dive__meshes__IMesh_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vecMeshes_pop_back(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::shared_ptr< dive::meshes::IMesh > > *arg1 = (std::vector< std::shared_ptr< dive::meshes::IMesh > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__shared_ptrT_dive__meshes__IMesh_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vecMeshes_pop_back" "', argument " "1"" of type '" "std::vector< std::shared_ptr< dive::meshes::IMesh > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::shared_ptr< dive::meshes::IMesh > > * >(argp1);
  (arg1)->pop_back();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vecMeshes_resize__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< std::shared_ptr< dive::meshes::IMesh > > *arg1 = (std::vector< std::shared_ptr< dive::meshes::IMesh > > *) 0 ;
  std::vector< std::shared_ptr< dive::meshes::IMesh > >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__shared_ptrT_dive__meshes__IMesh_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vecMeshes_resize" "', argument " "1"" of type '" "std::vector< std::shared_ptr< dive::meshes::IMesh > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::shared_ptr< dive::meshes::IMesh > > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vecMeshes_resize" "', argument " "2"" of type '" "std::vector< std::shared_ptr< dive::meshes::IMesh > >::size_type""'");
  } 
  arg2 = static_cast< std::vector< std::shared_ptr< dive::meshes::IMesh > >::size_type >(val2);
  (arg1)->resize(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vecMeshes_erase__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< std::shared_ptr< dive::meshes::IMesh > > *arg1 = (std::vector< std::shared_ptr< dive::meshes::IMesh > > *) 0 ;
  std::vector< std::shared_ptr< dive::meshes::IMesh > >::iterator arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  std::vector< std::shared_ptr< dive::meshes::IMesh > >::iterator result;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__shared_ptrT_dive__meshes__IMesh_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vecMeshes_erase" "', argument " "1"" of type '" "std::vector< std::shared_ptr< dive::meshes::IMesh > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::shared_ptr< dive::meshes::IMesh > > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vecMeshes_erase" "', argument " "2"" of type '" "std::vector< std::shared_ptr< dive::meshes::IMesh > >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< std::shared_ptr< dive::meshes::IMesh > >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< std::shared_ptr< dive::meshes::IMesh > >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vecMeshes_erase" "', argument " "2"" of type '" "std::vector< std::shared_ptr< dive::meshes::IMesh > >::iterator""'");
    }
  }
  result = std_vector_Sl_std_shared_ptr_Sl_dive_meshes_IMesh_Sg__Sg__erase__SWIG_0(arg1,SWIG_STD_MOVE(arg2));
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< std::shared_ptr< dive::meshes::IMesh > >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vecMeshes_erase__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< std::shared_ptr< dive::meshes::IMesh > > *arg1 = (std::vector< std::shared_ptr< dive::meshes::IMesh > > *) 0 ;
  std::vector< std::shared_ptr< dive::meshes::IMesh > >::iterator arg2 ;
  std::vector< std::shared_ptr< dive::meshes::IMesh > >::iterator arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  swig::SwigPyIterator *iter3 = 0 ;
  int res3 ;
  std::vector< std::shared_ptr< dive::meshes::IMesh > >::iterator result;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__shared_ptrT_dive__meshes__IMesh_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vecMeshes_erase" "', argument " "1"" of type '" "std::vector< std::shared_ptr< dive::meshes::IMesh > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::shared_ptr< dive::meshes::IMesh > > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vecMeshes_erase" "', argument " "2"" of type '" "std::vector< std::shared_ptr< dive::meshes::IMesh > >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< std::shared_ptr< dive::meshes::IMesh > >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< std::shared_ptr< dive::meshes::IMesh > >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vecMeshes_erase" "', argument " "2"" of type '" "std::vector< std::shared_ptr< dive::meshes::IMesh > >::iterator""'");
    }
  }
  res3 = SWIG_ConvertPtr(swig_obj[2], SWIG_as_voidptrptr(&iter3), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res3) || !iter3) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vecMeshes_erase" "', argument " "3"" of type '" "std::vector< std::shared_ptr< dive::meshes::IMesh > >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< std::shared_ptr< dive::meshes::IMesh > >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< std::shared_ptr< dive::meshes::IMesh > >::iterator > *>(iter3);
    if (iter_t) {
      arg3 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vecMeshes_erase" "', argument " "3"" of type '" "std::vector< std::shared_ptr< dive::meshes::IMesh > >::iterator""'");
    }
  }
  result = std_vector_Sl_std_shared_ptr_Sl_dive_meshes_IMesh_Sg__Sg__erase__SWIG_1(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3));
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< std::shared_ptr< dive::meshes::IMesh > >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vecMeshes_erase(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "vecMeshes_erase", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< std::shared_ptr< dive::meshes::IMesh >,std::allocator< std::shared_ptr< dive::meshes::IMesh > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< std::shared_ptr< dive::meshes::IMesh > >::iterator > *>(iter) != 0));
      if (_v) {
        return _wrap_vecMeshes_erase__SWIG_0(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< std::shared_ptr< dive::meshes::IMesh >,std::allocator< std::shared_ptr< dive::meshes::IMesh > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< std::shared_ptr< dive::meshes::IMesh > >::iterator > *>(iter) != 0));
      if (_v) {
        swig::SwigPyIterator *iter = 0;
        int res = SWIG_ConvertPtr(argv[2], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
        _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< std::shared_ptr< dive::meshes::IMesh > >::iterator > *>(iter) != 0));
        if (_v) {
          return _wrap_vecMeshes_erase__SWIG_1(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'vecMeshes_erase'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< std::shared_ptr< dive::meshes::IMesh > >::erase(std::vector< std::shared_ptr< dive::meshes::IMesh > >::iterator)\n"
    "    std::vector< std::shared_ptr< dive::meshes::IMesh > >::erase(std::vector< std::shared_ptr< dive::meshes::IMesh > >::iterator,std::vector< std::shared_ptr< dive::meshes::IMesh > >::iterator)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_new_vecMeshes__SWIG_3(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< std::shared_ptr< dive::meshes::IMesh > >::size_type arg1 ;
  std::vector< std::shared_ptr< dive::meshes::IMesh > >::value_type *arg2 = 0 ;
  size_t val1 ;
  int ecode1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  std::vector< std::shared_ptr< dive::meshes::IMesh > >::value_type tempshared2 ;
  std::vector< std::shared_ptr< dive::meshes::IMesh > > *result = 0 ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_vecMeshes" "', argument " "1"" of type '" "std::vector< std::shared_ptr< dive::meshes::IMesh > >::size_type""'");
  } 
  arg1 = static_cast< std::vector< std::shared_ptr< dive::meshes::IMesh > >::size_type >(val1);
  {
    int newmem = 0;
    res2 = SWIG_ConvertPtrAndOwn(swig_obj[1], &argp2, SWIGTYPE_p_std__shared_ptrT_dive__meshes__IMesh_t,  0 , &newmem);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_vecMeshes" "', argument " "2"" of type '" "std::vector< std::shared_ptr< dive::meshes::IMesh > >::value_type const &""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      if (argp2) tempshared2 = *reinterpret_cast< std::vector< std::shared_ptr< dive::meshes::IMesh > >::value_type * >(argp2);
      delete reinterpret_cast< std::vector< std::shared_ptr< dive::meshes::IMesh > >::value_type * >(argp2);
      arg2 = &tempshared2;
    } else {
      arg2 = (argp2) ? reinterpret_cast< std::vector< std::shared_ptr< dive::meshes::IMesh > >::value_type * >(argp2) : &tempshared2;
    }
  }
  result = (std::vector< std::shared_ptr< dive::meshes::IMesh > > *)new std::vector< std::shared_ptr< dive::meshes::IMesh > >(arg1,(std::vector< std::shared_ptr< dive::meshes::IMesh > >::value_type const &)*arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__shared_ptrT_dive__meshes__IMesh_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_vecMeshes(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "new_vecMeshes", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 0) {
    return _wrap_new_vecMeshes__SWIG_0(self, argc, argv);
  }
  if (argc == 1) {
    int _v = 0;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_vecMeshes__SWIG_2(self, argc, argv);
    }
  }
  if (argc == 1) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< std::shared_ptr< dive::meshes::IMesh >,std::allocator< std::shared_ptr< dive::meshes::IMesh > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_vecMeshes__SWIG_1(self, argc, argv);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_std__shared_ptrT_dive__meshes__IMesh_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_vecMeshes__SWIG_3(self, argc, argv);
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'new_vecMeshes'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< std::shared_ptr< dive::meshes::IMesh > >::vector()\n"
    "    std::vector< std::shared_ptr< dive::meshes::IMesh > >::vector(std::vector< std::shared_ptr< dive::meshes::IMesh > > const &)\n"
    "    std::vector< std::shared_ptr< dive::meshes::IMesh > >::vector(std::vector< std::shared_ptr< dive::meshes::IMesh > >::size_type)\n"
    "    std::vector< std::shared_ptr< dive::meshes::IMesh > >::vector(std::vector< std::shared_ptr< dive::meshes::IMesh > >::size_type,std::vector< std::shared_ptr< dive::meshes::IMesh > >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_vecMeshes_push_back(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::shared_ptr< dive::meshes::IMesh > > *arg1 = (std::vector< std::shared_ptr< dive::meshes::IMesh > > *) 0 ;
  std::vector< std::shared_ptr< dive::meshes::IMesh > >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  std::vector< std::shared_ptr< dive::meshes::IMesh > >::value_type tempshared2 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "vecMeshes_push_back", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__shared_ptrT_dive__meshes__IMesh_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vecMeshes_push_back" "', argument " "1"" of type '" "std::vector< std::shared_ptr< dive::meshes::IMesh > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::shared_ptr< dive::meshes::IMesh > > * >(argp1);
  {
    int newmem = 0;
    res2 = SWIG_ConvertPtrAndOwn(swig_obj[1], &argp2, SWIGTYPE_p_std__shared_ptrT_dive__meshes__IMesh_t,  0 , &newmem);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "vecMeshes_push_back" "', argument " "2"" of type '" "std::vector< std::shared_ptr< dive::meshes::IMesh > >::value_type const &""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      if (argp2) tempshared2 = *reinterpret_cast< std::vector< std::shared_ptr< dive::meshes::IMesh > >::value_type * >(argp2);
      delete reinterpret_cast< std::vector< std::shared_ptr< dive::meshes::IMesh > >::value_type * >(argp2);
      arg2 = &tempshared2;
    } else {
      arg2 = (argp2) ? reinterpret_cast< std::vector< std::shared_ptr< dive::meshes::IMesh > >::value_type * >(argp2) : &tempshared2;
    }
  }
  (arg1)->push_back((std::vector< std::shared_ptr< dive::meshes::IMesh > >::value_type const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vecMeshes_front(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::shared_ptr< dive::meshes::IMesh > > *arg1 = (std::vector< std::shared_ptr< dive::meshes::IMesh > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< std::shared_ptr< dive::meshes::IMesh > >::value_type *result = 0 ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__shared_ptrT_dive__meshes__IMesh_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vecMeshes_front" "', argument " "1"" of type '" "std::vector< std::shared_ptr< dive::meshes::IMesh > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::shared_ptr< dive::meshes::IMesh > > * >(argp1);
  result = (std::vector< std::shared_ptr< dive::meshes::IMesh > >::value_type *) &((std::vector< std::shared_ptr< dive::meshes::IMesh > > const *)arg1)->front();
  {
    std::shared_ptr<  dive::meshes::IMesh > *smartresult = *result ? new std::shared_ptr<  dive::meshes::IMesh >(*result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_std__shared_ptrT_dive__meshes__IMesh_t, SWIG_POINTER_OWN);
  }
  (void)swig::container_owner<swig::traits<std::vector< std::shared_ptr< dive::meshes::IMesh > >::value_type>::category>::back_reference(resultobj, swig_obj[0]);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vecMeshes_back(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::shared_ptr< dive::meshes::IMesh > > *arg1 = (std::vector< std::shared_ptr< dive::meshes::IMesh > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< std::shared_ptr< dive::meshes::IMesh > >::value_type *result = 0 ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__shared_ptrT_dive__meshes__IMesh_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vecMeshes_back" "', argument " "1"" of type '" "std::vector< std::shared_ptr< dive::meshes::IMesh > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::shared_ptr< dive::meshes::IMesh > > * >(argp1);
  result = (std::vector< std::shared_ptr< dive::meshes::IMesh > >::value_type *) &((std::vector< std::shared_ptr< dive::meshes::IMesh > > const *)arg1)->back();
  {
    std::shared_ptr<  dive::meshes::IMesh > *smartresult = *result ? new std::shared_ptr<  dive::meshes::IMesh >(*result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_std__shared_ptrT_dive__meshes__IMesh_t, SWIG_POINTER_OWN);
  }
  (void)swig::container_owner<swig::traits<std::vector< std::shared_ptr< dive::meshes::IMesh > >::value_type>::category>::back_reference(resultobj, swig_obj[0]);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vecMeshes_assign(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::shared_ptr< dive::meshes::IMesh > > *arg1 = (std::vector< std::shared_ptr< dive::meshes::IMesh > > *) 0 ;
  std::vector< std::shared_ptr< dive::meshes::IMesh > >::size_type arg2 ;
  std::vector< std::shared_ptr< dive::meshes::IMesh > >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  std::vector< std::shared_ptr< dive::meshes::IMesh > >::value_type tempshared3 ;
  PyObject *swig_obj[3] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "vecMeshes_assign", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__shared_ptrT_dive__meshes__IMesh_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vecMeshes_assign" "', argument " "1"" of type '" "std::vector< std::shared_ptr< dive::meshes::IMesh > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::shared_ptr< dive::meshes::IMesh > > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vecMeshes_assign" "', argument " "2"" of type '" "std::vector< std::shared_ptr< dive::meshes::IMesh > >::size_type""'");
  } 
  arg2 = static_cast< std::vector< std::shared_ptr< dive::meshes::IMesh > >::size_type >(val2);
  {
    int newmem = 0;
    res3 = SWIG_ConvertPtrAndOwn(swig_obj[2], &argp3, SWIGTYPE_p_std__shared_ptrT_dive__meshes__IMesh_t,  0 , &newmem);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "vecMeshes_assign" "', argument " "3"" of type '" "std::vector< std::shared_ptr< dive::meshes::IMesh > >::value_type const &""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      if (argp3) tempshared3 = *reinterpret_cast< std::vector< std::shared_ptr< dive::meshes::IMesh > >::value_type * >(argp3);
      delete reinterpret_cast< std::vector< std::shared_ptr< dive::meshes::IMesh > >::value_type * >(argp3);
      arg3 = &tempshared3;
    } else {
      arg3 = (argp3) ? reinterpret_cast< std::vector< std::shared_ptr< dive::meshes::IMesh > >::value_type * >(argp3) : &tempshared3;
    }
  }
  (arg1)->assign(arg2,(std::vector< std::shared_ptr< dive::meshes::IMesh > >::value_type const &)*arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vecMeshes_resize__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< std::shared_ptr< dive::meshes::IMesh > > *arg1 = (std::vector< std::shared_ptr< dive::meshes::IMesh > > *) 0 ;
  std::vector< std::shared_ptr< dive::meshes::IMesh > >::size_type arg2 ;
  std::vector< std::shared_ptr< dive::meshes::IMesh > >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  std::vector< std::shared_ptr< dive::meshes::IMesh > >::value_type tempshared3 ;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__shared_ptrT_dive__meshes__IMesh_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vecMeshes_resize" "', argument " "1"" of type '" "std::vector< std::shared_ptr< dive::meshes::IMesh > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::shared_ptr< dive::meshes::IMesh > > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vecMeshes_resize" "', argument " "2"" of type '" "std::vector< std::shared_ptr< dive::meshes::IMesh > >::size_type""'");
  } 
  arg2 = static_cast< std::vector< std::shared_ptr< dive::meshes::IMesh > >::size_type >(val2);
  {
    int newmem = 0;
    res3 = SWIG_ConvertPtrAndOwn(swig_obj[2], &argp3, SWIGTYPE_p_std__shared_ptrT_dive__meshes__IMesh_t,  0 , &newmem);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "vecMeshes_resize" "', argument " "3"" of type '" "std::vector< std::shared_ptr< dive::meshes::IMesh > >::value_type const &""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      if (argp3) tempshared3 = *reinterpret_cast< std::vector< std::shared_ptr< dive::meshes::IMesh > >::value_type * >(argp3);
      delete reinterpret_cast< std::vector< std::shared_ptr< dive::meshes::IMesh > >::value_type * >(argp3);
      arg3 = &tempshared3;
    } else {
      arg3 = (argp3) ? reinterpret_cast< std::vector< std::shared_ptr< dive::meshes::IMesh > >::value_type * >(argp3) : &tempshared3;
    }
  }
  (arg1)->resize(arg2,(std::vector< std::shared_ptr< dive::meshes::IMesh > >::value_type const &)*arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vecMeshes_resize(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "vecMeshes_resize", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< std::shared_ptr< dive::meshes::IMesh >,std::allocator< std::shared_ptr< dive::meshes::IMesh > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_vecMeshes_resize__SWIG_0(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< std::shared_ptr< dive::meshes::IMesh >,std::allocator< std::shared_ptr< dive::meshes::IMesh > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_std__shared_ptrT_dive__meshes__IMesh_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_vecMeshes_resize__SWIG_1(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'vecMeshes_resize'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< std::shared_ptr< dive::meshes::IMesh > >::resize(std::vector< std::shared_ptr< dive::meshes::IMesh > >::size_type)\n"
    "    std::vector< std::shared_ptr< dive::meshes::IMesh > >::resize(std::vector< std::shared_ptr< dive::meshes::IMesh > >::size_type,std::vector< std::shared_ptr< dive::meshes::IMesh > >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_vecMeshes_insert__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< std::shared_ptr< dive::meshes::IMesh > > *arg1 = (std::vector< std::shared_ptr< dive::meshes::IMesh > > *) 0 ;
  std::vector< std::shared_ptr< dive::meshes::IMesh > >::iterator arg2 ;
  std::vector< std::shared_ptr< dive::meshes::IMesh > >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  void *argp3 ;
  int res3 = 0 ;
  std::vector< std::shared_ptr< dive::meshes::IMesh > >::value_type tempshared3 ;
  std::vector< std::shared_ptr< dive::meshes::IMesh > >::iterator result;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__shared_ptrT_dive__meshes__IMesh_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vecMeshes_insert" "', argument " "1"" of type '" "std::vector< std::shared_ptr< dive::meshes::IMesh > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::shared_ptr< dive::meshes::IMesh > > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vecMeshes_insert" "', argument " "2"" of type '" "std::vector< std::shared_ptr< dive::meshes::IMesh > >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< std::shared_ptr< dive::meshes::IMesh > >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< std::shared_ptr< dive::meshes::IMesh > >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vecMeshes_insert" "', argument " "2"" of type '" "std::vector< std::shared_ptr< dive::meshes::IMesh > >::iterator""'");
    }
  }
  {
    int newmem = 0;
    res3 = SWIG_ConvertPtrAndOwn(swig_obj[2], &argp3, SWIGTYPE_p_std__shared_ptrT_dive__meshes__IMesh_t,  0 , &newmem);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "vecMeshes_insert" "', argument " "3"" of type '" "std::vector< std::shared_ptr< dive::meshes::IMesh > >::value_type const &""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      if (argp3) tempshared3 = *reinterpret_cast< std::vector< std::shared_ptr< dive::meshes::IMesh > >::value_type * >(argp3);
      delete reinterpret_cast< std::vector< std::shared_ptr< dive::meshes::IMesh > >::value_type * >(argp3);
      arg3 = &tempshared3;
    } else {
      arg3 = (argp3) ? reinterpret_cast< std::vector< std::shared_ptr< dive::meshes::IMesh > >::value_type * >(argp3) : &tempshared3;
    }
  }
  result = std_vector_Sl_std_shared_ptr_Sl_dive_meshes_IMesh_Sg__Sg__insert__SWIG_0(arg1,SWIG_STD_MOVE(arg2),(std::shared_ptr< dive::meshes::IMesh > const &)*arg3);
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< std::shared_ptr< dive::meshes::IMesh > >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vecMeshes_insert__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< std::shared_ptr< dive::meshes::IMesh > > *arg1 = (std::vector< std::shared_ptr< dive::meshes::IMesh > > *) 0 ;
  std::vector< std::shared_ptr< dive::meshes::IMesh > >::iterator arg2 ;
  std::vector< std::shared_ptr< dive::meshes::IMesh > >::size_type arg3 ;
  std::vector< std::shared_ptr< dive::meshes::IMesh > >::value_type *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  size_t val3 ;
  int ecode3 = 0 ;
  void *argp4 ;
  int res4 = 0 ;
  std::vector< std::shared_ptr< dive::meshes::IMesh > >::value_type tempshared4 ;
  
  (void)self;
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__shared_ptrT_dive__meshes__IMesh_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vecMeshes_insert" "', argument " "1"" of type '" "std::vector< std::shared_ptr< dive::meshes::IMesh > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::shared_ptr< dive::meshes::IMesh > > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vecMeshes_insert" "', argument " "2"" of type '" "std::vector< std::shared_ptr< dive::meshes::IMesh > >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< std::shared_ptr< dive::meshes::IMesh > >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< std::shared_ptr< dive::meshes::IMesh > >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vecMeshes_insert" "', argument " "2"" of type '" "std::vector< std::shared_ptr< dive::meshes::IMesh > >::iterator""'");
    }
  }
  ecode3 = SWIG_AsVal_size_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "vecMeshes_insert" "', argument " "3"" of type '" "std::vector< std::shared_ptr< dive::meshes::IMesh > >::size_type""'");
  } 
  arg3 = static_cast< std::vector< std::shared_ptr< dive::meshes::IMesh > >::size_type >(val3);
  {
    int newmem = 0;
    res4 = SWIG_ConvertPtrAndOwn(swig_obj[3], &argp4, SWIGTYPE_p_std__shared_ptrT_dive__meshes__IMesh_t,  0 , &newmem);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "vecMeshes_insert" "', argument " "4"" of type '" "std::vector< std::shared_ptr< dive::meshes::IMesh > >::value_type const &""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      if (argp4) tempshared4 = *reinterpret_cast< std::vector< std::shared_ptr< dive::meshes::IMesh > >::value_type * >(argp4);
      delete reinterpret_cast< std::vector< std::shared_ptr< dive::meshes::IMesh > >::value_type * >(argp4);
      arg4 = &tempshared4;
    } else {
      arg4 = (argp4) ? reinterpret_cast< std::vector< std::shared_ptr< dive::meshes::IMesh > >::value_type * >(argp4) : &tempshared4;
    }
  }
  std_vector_Sl_std_shared_ptr_Sl_dive_meshes_IMesh_Sg__Sg__insert__SWIG_1(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3),(std::shared_ptr< dive::meshes::IMesh > const &)*arg4);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vecMeshes_insert(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "vecMeshes_insert", 0, 4, argv))) SWIG_fail;
  --argc;
  if (argc == 3) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< std::shared_ptr< dive::meshes::IMesh >,std::allocator< std::shared_ptr< dive::meshes::IMesh > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< std::shared_ptr< dive::meshes::IMesh > >::iterator > *>(iter) != 0));
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_std__shared_ptrT_dive__meshes__IMesh_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_vecMeshes_insert__SWIG_0(self, argc, argv);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< std::shared_ptr< dive::meshes::IMesh >,std::allocator< std::shared_ptr< dive::meshes::IMesh > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< std::shared_ptr< dive::meshes::IMesh > >::iterator > *>(iter) != 0));
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = SWIG_ConvertPtr(argv[3], 0, SWIGTYPE_p_std__shared_ptrT_dive__meshes__IMesh_t, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_vecMeshes_insert__SWIG_1(self, argc, argv);
          }
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'vecMeshes_insert'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< std::shared_ptr< dive::meshes::IMesh > >::insert(std::vector< std::shared_ptr< dive::meshes::IMesh > >::iterator,std::vector< std::shared_ptr< dive::meshes::IMesh > >::value_type const &)\n"
    "    std::vector< std::shared_ptr< dive::meshes::IMesh > >::insert(std::vector< std::shared_ptr< dive::meshes::IMesh > >::iterator,std::vector< std::shared_ptr< dive::meshes::IMesh > >::size_type,std::vector< std::shared_ptr< dive::meshes::IMesh > >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_vecMeshes_reserve(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::shared_ptr< dive::meshes::IMesh > > *arg1 = (std::vector< std::shared_ptr< dive::meshes::IMesh > > *) 0 ;
  std::vector< std::shared_ptr< dive::meshes::IMesh > >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "vecMeshes_reserve", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__shared_ptrT_dive__meshes__IMesh_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vecMeshes_reserve" "', argument " "1"" of type '" "std::vector< std::shared_ptr< dive::meshes::IMesh > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::shared_ptr< dive::meshes::IMesh > > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vecMeshes_reserve" "', argument " "2"" of type '" "std::vector< std::shared_ptr< dive::meshes::IMesh > >::size_type""'");
  } 
  arg2 = static_cast< std::vector< std::shared_ptr< dive::meshes::IMesh > >::size_type >(val2);
  (arg1)->reserve(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vecMeshes_capacity(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::shared_ptr< dive::meshes::IMesh > > *arg1 = (std::vector< std::shared_ptr< dive::meshes::IMesh > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< std::shared_ptr< dive::meshes::IMesh > >::size_type result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__shared_ptrT_dive__meshes__IMesh_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vecMeshes_capacity" "', argument " "1"" of type '" "std::vector< std::shared_ptr< dive::meshes::IMesh > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::shared_ptr< dive::meshes::IMesh > > * >(argp1);
  result = ((std::vector< std::shared_ptr< dive::meshes::IMesh > > const *)arg1)->capacity();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_vecMeshes(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::shared_ptr< dive::meshes::IMesh > > *arg1 = (std::vector< std::shared_ptr< dive::meshes::IMesh > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__shared_ptrT_dive__meshes__IMesh_t_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_vecMeshes" "', argument " "1"" of type '" "std::vector< std::shared_ptr< dive::meshes::IMesh > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::shared_ptr< dive::meshes::IMesh > > * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *vecMeshes_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_std__vectorT_std__shared_ptrT_dive__meshes__IMesh_t_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *vecMeshes_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_vecDofMeshIndices_iterator(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< dive::DofMeshIndex > *arg1 = (std::vector< dive::DofMeshIndex > *) 0 ;
  PyObject **arg2 = (PyObject **) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  swig::SwigPyIterator *result = 0 ;
  
  arg2 = &swig_obj[0];
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_dive__DofMeshIndex_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vecDofMeshIndices_iterator" "', argument " "1"" of type '" "std::vector< dive::DofMeshIndex > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< dive::DofMeshIndex > * >(argp1);
  result = (swig::SwigPyIterator *)std_vector_Sl_dive_DofMeshIndex_Sg__iterator(arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vecDofMeshIndices___nonzero__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< dive::DofMeshIndex > *arg1 = (std::vector< dive::DofMeshIndex > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_dive__DofMeshIndex_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vecDofMeshIndices___nonzero__" "', argument " "1"" of type '" "std::vector< dive::DofMeshIndex > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< dive::DofMeshIndex > * >(argp1);
  result = (bool)std_vector_Sl_dive_DofMeshIndex_Sg____nonzero__((std::vector< dive::DofMeshIndex > const *)arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vecDofMeshIndices___bool__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< dive::DofMeshIndex > *arg1 = (std::vector< dive::DofMeshIndex > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_dive__DofMeshIndex_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vecDofMeshIndices___bool__" "', argument " "1"" of type '" "std::vector< dive::DofMeshIndex > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< dive::DofMeshIndex > * >(argp1);
  result = (bool)std_vector_Sl_dive_DofMeshIndex_Sg____bool__((std::vector< dive::DofMeshIndex > const *)arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vecDofMeshIndices___len__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< dive::DofMeshIndex > *arg1 = (std::vector< dive::DofMeshIndex > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< dive::DofMeshIndex >::size_type result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_dive__DofMeshIndex_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vecDofMeshIndices___len__" "', argument " "1"" of type '" "std::vector< dive::DofMeshIndex > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< dive::DofMeshIndex > * >(argp1);
  result = std_vector_Sl_dive_DofMeshIndex_Sg____len__((std::vector< dive::DofMeshIndex > const *)arg1);
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vecDofMeshIndices___getslice__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< dive::DofMeshIndex > *arg1 = (std::vector< dive::DofMeshIndex > *) 0 ;
  std::vector< dive::DofMeshIndex >::difference_type arg2 ;
  std::vector< dive::DofMeshIndex >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  std::vector< dive::DofMeshIndex,std::allocator< dive::DofMeshIndex > > *result = 0 ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "vecDofMeshIndices___getslice__", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_dive__DofMeshIndex_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vecDofMeshIndices___getslice__" "', argument " "1"" of type '" "std::vector< dive::DofMeshIndex > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< dive::DofMeshIndex > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vecDofMeshIndices___getslice__" "', argument " "2"" of type '" "std::vector< dive::DofMeshIndex >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< dive::DofMeshIndex >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "vecDofMeshIndices___getslice__" "', argument " "3"" of type '" "std::vector< dive::DofMeshIndex >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< dive::DofMeshIndex >::difference_type >(val3);
  try {
    result = (std::vector< dive::DofMeshIndex,std::allocator< dive::DofMeshIndex > > *)std_vector_Sl_dive_DofMeshIndex_Sg____getslice__(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3));
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_dive__DofMeshIndex_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vecDofMeshIndices___setslice____SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< dive::DofMeshIndex > *arg1 = (std::vector< dive::DofMeshIndex > *) 0 ;
  std::vector< dive::DofMeshIndex >::difference_type arg2 ;
  std::vector< dive::DofMeshIndex >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_dive__DofMeshIndex_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vecDofMeshIndices___setslice__" "', argument " "1"" of type '" "std::vector< dive::DofMeshIndex > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< dive::DofMeshIndex > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vecDofMeshIndices___setslice__" "', argument " "2"" of type '" "std::vector< dive::DofMeshIndex >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< dive::DofMeshIndex >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "vecDofMeshIndices___setslice__" "', argument " "3"" of type '" "std::vector< dive::DofMeshIndex >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< dive::DofMeshIndex >::difference_type >(val3);
  try {
    std_vector_Sl_dive_DofMeshIndex_Sg____setslice____SWIG_0(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3));
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vecDofMeshIndices___setslice____SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< dive::DofMeshIndex > *arg1 = (std::vector< dive::DofMeshIndex > *) 0 ;
  std::vector< dive::DofMeshIndex >::difference_type arg2 ;
  std::vector< dive::DofMeshIndex >::difference_type arg3 ;
  std::vector< dive::DofMeshIndex,std::allocator< dive::DofMeshIndex > > *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  
  (void)self;
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_dive__DofMeshIndex_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vecDofMeshIndices___setslice__" "', argument " "1"" of type '" "std::vector< dive::DofMeshIndex > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< dive::DofMeshIndex > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vecDofMeshIndices___setslice__" "', argument " "2"" of type '" "std::vector< dive::DofMeshIndex >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< dive::DofMeshIndex >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "vecDofMeshIndices___setslice__" "', argument " "3"" of type '" "std::vector< dive::DofMeshIndex >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< dive::DofMeshIndex >::difference_type >(val3);
  {
    std::vector< dive::DofMeshIndex,std::allocator< dive::DofMeshIndex > > *ptr = (std::vector< dive::DofMeshIndex,std::allocator< dive::DofMeshIndex > > *)0;
    res4 = swig::asptr(swig_obj[3], &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "vecDofMeshIndices___setslice__" "', argument " "4"" of type '" "std::vector< dive::DofMeshIndex,std::allocator< dive::DofMeshIndex > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vecDofMeshIndices___setslice__" "', argument " "4"" of type '" "std::vector< dive::DofMeshIndex,std::allocator< dive::DofMeshIndex > > const &""'"); 
    }
    arg4 = ptr;
  }
  try {
    std_vector_Sl_dive_DofMeshIndex_Sg____setslice____SWIG_1(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3),(std::vector< dive::DofMeshIndex,std::allocator< dive::DofMeshIndex > > const &)*arg4);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_vecDofMeshIndices___setslice__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "vecDofMeshIndices___setslice__", 0, 4, argv))) SWIG_fail;
  --argc;
  if (argc == 3) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< dive::DofMeshIndex,std::allocator< dive::DofMeshIndex > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_ptrdiff_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_vecDofMeshIndices___setslice____SWIG_0(self, argc, argv);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< dive::DofMeshIndex,std::allocator< dive::DofMeshIndex > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_ptrdiff_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = swig::asptr(argv[3], (std::vector< dive::DofMeshIndex,std::allocator< dive::DofMeshIndex > >**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_vecDofMeshIndices___setslice____SWIG_1(self, argc, argv);
          }
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'vecDofMeshIndices___setslice__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< dive::DofMeshIndex >::__setslice__(std::vector< dive::DofMeshIndex >::difference_type,std::vector< dive::DofMeshIndex >::difference_type)\n"
    "    std::vector< dive::DofMeshIndex >::__setslice__(std::vector< dive::DofMeshIndex >::difference_type,std::vector< dive::DofMeshIndex >::difference_type,std::vector< dive::DofMeshIndex,std::allocator< dive::DofMeshIndex > > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_vecDofMeshIndices___delslice__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< dive::DofMeshIndex > *arg1 = (std::vector< dive::DofMeshIndex > *) 0 ;
  std::vector< dive::DofMeshIndex >::difference_type arg2 ;
  std::vector< dive::DofMeshIndex >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "vecDofMeshIndices___delslice__", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_dive__DofMeshIndex_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vecDofMeshIndices___delslice__" "', argument " "1"" of type '" "std::vector< dive::DofMeshIndex > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< dive::DofMeshIndex > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vecDofMeshIndices___delslice__" "', argument " "2"" of type '" "std::vector< dive::DofMeshIndex >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< dive::DofMeshIndex >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "vecDofMeshIndices___delslice__" "', argument " "3"" of type '" "std::vector< dive::DofMeshIndex >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< dive::DofMeshIndex >::difference_type >(val3);
  try {
    std_vector_Sl_dive_DofMeshIndex_Sg____delslice__(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3));
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vecDofMeshIndices___delitem____SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< dive::DofMeshIndex > *arg1 = (std::vector< dive::DofMeshIndex > *) 0 ;
  std::vector< dive::DofMeshIndex >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_dive__DofMeshIndex_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vecDofMeshIndices___delitem__" "', argument " "1"" of type '" "std::vector< dive::DofMeshIndex > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< dive::DofMeshIndex > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vecDofMeshIndices___delitem__" "', argument " "2"" of type '" "std::vector< dive::DofMeshIndex >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< dive::DofMeshIndex >::difference_type >(val2);
  try {
    std_vector_Sl_dive_DofMeshIndex_Sg____delitem____SWIG_0(arg1,SWIG_STD_MOVE(arg2));
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vecDofMeshIndices___getitem____SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< dive::DofMeshIndex > *arg1 = (std::vector< dive::DofMeshIndex > *) 0 ;
  SWIGPY_SLICEOBJECT *arg2 = (SWIGPY_SLICEOBJECT *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< dive::DofMeshIndex,std::allocator< dive::DofMeshIndex > > *result = 0 ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_dive__DofMeshIndex_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vecDofMeshIndices___getitem__" "', argument " "1"" of type '" "std::vector< dive::DofMeshIndex > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< dive::DofMeshIndex > * >(argp1);
  {
    if (!PySlice_Check(swig_obj[1])) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vecDofMeshIndices___getitem__" "', argument " "2"" of type '" "SWIGPY_SLICEOBJECT *""'");
    }
    arg2 = (SWIGPY_SLICEOBJECT *) swig_obj[1];
  }
  try {
    result = (std::vector< dive::DofMeshIndex,std::allocator< dive::DofMeshIndex > > *)std_vector_Sl_dive_DofMeshIndex_Sg____getitem____SWIG_0(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_dive__DofMeshIndex_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vecDofMeshIndices___setitem____SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< dive::DofMeshIndex > *arg1 = (std::vector< dive::DofMeshIndex > *) 0 ;
  SWIGPY_SLICEOBJECT *arg2 = (SWIGPY_SLICEOBJECT *) 0 ;
  std::vector< dive::DofMeshIndex,std::allocator< dive::DofMeshIndex > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_dive__DofMeshIndex_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vecDofMeshIndices___setitem__" "', argument " "1"" of type '" "std::vector< dive::DofMeshIndex > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< dive::DofMeshIndex > * >(argp1);
  {
    if (!PySlice_Check(swig_obj[1])) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vecDofMeshIndices___setitem__" "', argument " "2"" of type '" "SWIGPY_SLICEOBJECT *""'");
    }
    arg2 = (SWIGPY_SLICEOBJECT *) swig_obj[1];
  }
  {
    std::vector< dive::DofMeshIndex,std::allocator< dive::DofMeshIndex > > *ptr = (std::vector< dive::DofMeshIndex,std::allocator< dive::DofMeshIndex > > *)0;
    res3 = swig::asptr(swig_obj[2], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "vecDofMeshIndices___setitem__" "', argument " "3"" of type '" "std::vector< dive::DofMeshIndex,std::allocator< dive::DofMeshIndex > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vecDofMeshIndices___setitem__" "', argument " "3"" of type '" "std::vector< dive::DofMeshIndex,std::allocator< dive::DofMeshIndex > > const &""'"); 
    }
    arg3 = ptr;
  }
  try {
    std_vector_Sl_dive_DofMeshIndex_Sg____setitem____SWIG_0(arg1,arg2,(std::vector< dive::DofMeshIndex,std::allocator< dive::DofMeshIndex > > const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_vecDofMeshIndices___setitem____SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< dive::DofMeshIndex > *arg1 = (std::vector< dive::DofMeshIndex > *) 0 ;
  SWIGPY_SLICEOBJECT *arg2 = (SWIGPY_SLICEOBJECT *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_dive__DofMeshIndex_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vecDofMeshIndices___setitem__" "', argument " "1"" of type '" "std::vector< dive::DofMeshIndex > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< dive::DofMeshIndex > * >(argp1);
  {
    if (!PySlice_Check(swig_obj[1])) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vecDofMeshIndices___setitem__" "', argument " "2"" of type '" "SWIGPY_SLICEOBJECT *""'");
    }
    arg2 = (SWIGPY_SLICEOBJECT *) swig_obj[1];
  }
  try {
    std_vector_Sl_dive_DofMeshIndex_Sg____setitem____SWIG_1(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vecDofMeshIndices___delitem____SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< dive::DofMeshIndex > *arg1 = (std::vector< dive::DofMeshIndex > *) 0 ;
  SWIGPY_SLICEOBJECT *arg2 = (SWIGPY_SLICEOBJECT *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_dive__DofMeshIndex_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vecDofMeshIndices___delitem__" "', argument " "1"" of type '" "std::vector< dive::DofMeshIndex > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< dive::DofMeshIndex > * >(argp1);
  {
    if (!PySlice_Check(swig_obj[1])) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vecDofMeshIndices___delitem__" "', argument " "2"" of type '" "SWIGPY_SLICEOBJECT *""'");
    }
    arg2 = (SWIGPY_SLICEOBJECT *) swig_obj[1];
  }
  try {
    std_vector_Sl_dive_DofMeshIndex_Sg____delitem____SWIG_1(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vecDofMeshIndices___delitem__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "vecDofMeshIndices___delitem__", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< dive::DofMeshIndex,std::allocator< dive::DofMeshIndex > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_vecDofMeshIndices___delitem____SWIG_1(self, argc, argv);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< dive::DofMeshIndex,std::allocator< dive::DofMeshIndex > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_vecDofMeshIndices___delitem____SWIG_0(self, argc, argv);
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'vecDofMeshIndices___delitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< dive::DofMeshIndex >::__delitem__(std::vector< dive::DofMeshIndex >::difference_type)\n"
    "    std::vector< dive::DofMeshIndex >::__delitem__(SWIGPY_SLICEOBJECT *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_vecDofMeshIndices___getitem____SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< dive::DofMeshIndex > *arg1 = (std::vector< dive::DofMeshIndex > *) 0 ;
  std::vector< dive::DofMeshIndex >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  std::vector< dive::DofMeshIndex >::value_type *result = 0 ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_dive__DofMeshIndex_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vecDofMeshIndices___getitem__" "', argument " "1"" of type '" "std::vector< dive::DofMeshIndex > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< dive::DofMeshIndex > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vecDofMeshIndices___getitem__" "', argument " "2"" of type '" "std::vector< dive::DofMeshIndex >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< dive::DofMeshIndex >::difference_type >(val2);
  try {
    result = (std::vector< dive::DofMeshIndex >::value_type *) &std_vector_Sl_dive_DofMeshIndex_Sg____getitem____SWIG_1((std::vector< dive::DofMeshIndex > const *)arg1,SWIG_STD_MOVE(arg2));
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_dive__DofMeshIndex, 0 |  0 );
  (void)swig::container_owner<swig::traits<std::vector< dive::DofMeshIndex >::value_type>::category>::back_reference(resultobj, swig_obj[0]);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vecDofMeshIndices___getitem__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "vecDofMeshIndices___getitem__", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< dive::DofMeshIndex,std::allocator< dive::DofMeshIndex > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_vecDofMeshIndices___getitem____SWIG_0(self, argc, argv);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< dive::DofMeshIndex,std::allocator< dive::DofMeshIndex > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_vecDofMeshIndices___getitem____SWIG_1(self, argc, argv);
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'vecDofMeshIndices___getitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< dive::DofMeshIndex >::__getitem__(SWIGPY_SLICEOBJECT *)\n"
    "    std::vector< dive::DofMeshIndex >::__getitem__(std::vector< dive::DofMeshIndex >::difference_type) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_vecDofMeshIndices___setitem____SWIG_2(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< dive::DofMeshIndex > *arg1 = (std::vector< dive::DofMeshIndex > *) 0 ;
  std::vector< dive::DofMeshIndex >::difference_type arg2 ;
  std::vector< dive::DofMeshIndex >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_dive__DofMeshIndex_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vecDofMeshIndices___setitem__" "', argument " "1"" of type '" "std::vector< dive::DofMeshIndex > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< dive::DofMeshIndex > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vecDofMeshIndices___setitem__" "', argument " "2"" of type '" "std::vector< dive::DofMeshIndex >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< dive::DofMeshIndex >::difference_type >(val2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_dive__DofMeshIndex,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "vecDofMeshIndices___setitem__" "', argument " "3"" of type '" "std::vector< dive::DofMeshIndex >::value_type const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vecDofMeshIndices___setitem__" "', argument " "3"" of type '" "std::vector< dive::DofMeshIndex >::value_type const &""'"); 
  }
  arg3 = reinterpret_cast< std::vector< dive::DofMeshIndex >::value_type * >(argp3);
  try {
    std_vector_Sl_dive_DofMeshIndex_Sg____setitem____SWIG_2(arg1,SWIG_STD_MOVE(arg2),(dive::DofMeshIndex const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vecDofMeshIndices___setitem__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "vecDofMeshIndices___setitem__", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< dive::DofMeshIndex,std::allocator< dive::DofMeshIndex > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_vecDofMeshIndices___setitem____SWIG_1(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< dive::DofMeshIndex,std::allocator< dive::DofMeshIndex > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        int res = swig::asptr(argv[2], (std::vector< dive::DofMeshIndex,std::allocator< dive::DofMeshIndex > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_vecDofMeshIndices___setitem____SWIG_0(self, argc, argv);
        }
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< dive::DofMeshIndex,std::allocator< dive::DofMeshIndex > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_dive__DofMeshIndex, SWIG_POINTER_NO_NULL | 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_vecDofMeshIndices___setitem____SWIG_2(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'vecDofMeshIndices___setitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< dive::DofMeshIndex >::__setitem__(SWIGPY_SLICEOBJECT *,std::vector< dive::DofMeshIndex,std::allocator< dive::DofMeshIndex > > const &)\n"
    "    std::vector< dive::DofMeshIndex >::__setitem__(SWIGPY_SLICEOBJECT *)\n"
    "    std::vector< dive::DofMeshIndex >::__setitem__(std::vector< dive::DofMeshIndex >::difference_type,std::vector< dive::DofMeshIndex >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_vecDofMeshIndices_pop(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< dive::DofMeshIndex > *arg1 = (std::vector< dive::DofMeshIndex > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< dive::DofMeshIndex >::value_type result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_dive__DofMeshIndex_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vecDofMeshIndices_pop" "', argument " "1"" of type '" "std::vector< dive::DofMeshIndex > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< dive::DofMeshIndex > * >(argp1);
  try {
    result = std_vector_Sl_dive_DofMeshIndex_Sg__pop(arg1);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  resultobj = SWIG_NewPointerObj((new std::vector< dive::DofMeshIndex >::value_type(result)), SWIGTYPE_p_dive__DofMeshIndex, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vecDofMeshIndices_append(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< dive::DofMeshIndex > *arg1 = (std::vector< dive::DofMeshIndex > *) 0 ;
  std::vector< dive::DofMeshIndex >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "vecDofMeshIndices_append", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_dive__DofMeshIndex_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vecDofMeshIndices_append" "', argument " "1"" of type '" "std::vector< dive::DofMeshIndex > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< dive::DofMeshIndex > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_dive__DofMeshIndex,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "vecDofMeshIndices_append" "', argument " "2"" of type '" "std::vector< dive::DofMeshIndex >::value_type const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vecDofMeshIndices_append" "', argument " "2"" of type '" "std::vector< dive::DofMeshIndex >::value_type const &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< dive::DofMeshIndex >::value_type * >(argp2);
  std_vector_Sl_dive_DofMeshIndex_Sg__append(arg1,(dive::DofMeshIndex const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_vecDofMeshIndices__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **SWIGUNUSEDPARM(swig_obj)) {
  PyObject *resultobj = 0;
  std::vector< dive::DofMeshIndex > *result = 0 ;
  
  (void)self;
  if ((nobjs < 0) || (nobjs > 0)) SWIG_fail;
  result = (std::vector< dive::DofMeshIndex > *)new std::vector< dive::DofMeshIndex >();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_dive__DofMeshIndex_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_vecDofMeshIndices__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< dive::DofMeshIndex > *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  std::vector< dive::DofMeshIndex > *result = 0 ;
  
  (void)self;
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  {
    std::vector< dive::DofMeshIndex,std::allocator< dive::DofMeshIndex > > *ptr = (std::vector< dive::DofMeshIndex,std::allocator< dive::DofMeshIndex > > *)0;
    res1 = swig::asptr(swig_obj[0], &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_vecDofMeshIndices" "', argument " "1"" of type '" "std::vector< dive::DofMeshIndex > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_vecDofMeshIndices" "', argument " "1"" of type '" "std::vector< dive::DofMeshIndex > const &""'"); 
    }
    arg1 = ptr;
  }
  result = (std::vector< dive::DofMeshIndex > *)new std::vector< dive::DofMeshIndex >((std::vector< dive::DofMeshIndex > const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_dive__DofMeshIndex_t, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_vecDofMeshIndices_empty(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< dive::DofMeshIndex > *arg1 = (std::vector< dive::DofMeshIndex > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_dive__DofMeshIndex_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vecDofMeshIndices_empty" "', argument " "1"" of type '" "std::vector< dive::DofMeshIndex > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< dive::DofMeshIndex > * >(argp1);
  result = (bool)((std::vector< dive::DofMeshIndex > const *)arg1)->empty();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vecDofMeshIndices_size(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< dive::DofMeshIndex > *arg1 = (std::vector< dive::DofMeshIndex > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< dive::DofMeshIndex >::size_type result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_dive__DofMeshIndex_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vecDofMeshIndices_size" "', argument " "1"" of type '" "std::vector< dive::DofMeshIndex > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< dive::DofMeshIndex > * >(argp1);
  result = ((std::vector< dive::DofMeshIndex > const *)arg1)->size();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vecDofMeshIndices_swap(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< dive::DofMeshIndex > *arg1 = (std::vector< dive::DofMeshIndex > *) 0 ;
  std::vector< dive::DofMeshIndex > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "vecDofMeshIndices_swap", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_dive__DofMeshIndex_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vecDofMeshIndices_swap" "', argument " "1"" of type '" "std::vector< dive::DofMeshIndex > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< dive::DofMeshIndex > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_std__vectorT_dive__DofMeshIndex_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "vecDofMeshIndices_swap" "', argument " "2"" of type '" "std::vector< dive::DofMeshIndex > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vecDofMeshIndices_swap" "', argument " "2"" of type '" "std::vector< dive::DofMeshIndex > &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< dive::DofMeshIndex > * >(argp2);
  (arg1)->swap(*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vecDofMeshIndices_begin(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< dive::DofMeshIndex > *arg1 = (std::vector< dive::DofMeshIndex > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< dive::DofMeshIndex >::iterator result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_dive__DofMeshIndex_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vecDofMeshIndices_begin" "', argument " "1"" of type '" "std::vector< dive::DofMeshIndex > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< dive::DofMeshIndex > * >(argp1);
  result = (arg1)->begin();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< dive::DofMeshIndex >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vecDofMeshIndices_end(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< dive::DofMeshIndex > *arg1 = (std::vector< dive::DofMeshIndex > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< dive::DofMeshIndex >::iterator result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_dive__DofMeshIndex_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vecDofMeshIndices_end" "', argument " "1"" of type '" "std::vector< dive::DofMeshIndex > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< dive::DofMeshIndex > * >(argp1);
  result = (arg1)->end();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< dive::DofMeshIndex >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vecDofMeshIndices_rbegin(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< dive::DofMeshIndex > *arg1 = (std::vector< dive::DofMeshIndex > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< dive::DofMeshIndex >::reverse_iterator result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_dive__DofMeshIndex_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vecDofMeshIndices_rbegin" "', argument " "1"" of type '" "std::vector< dive::DofMeshIndex > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< dive::DofMeshIndex > * >(argp1);
  result = (arg1)->rbegin();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< dive::DofMeshIndex >::reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vecDofMeshIndices_rend(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< dive::DofMeshIndex > *arg1 = (std::vector< dive::DofMeshIndex > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< dive::DofMeshIndex >::reverse_iterator result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_dive__DofMeshIndex_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vecDofMeshIndices_rend" "', argument " "1"" of type '" "std::vector< dive::DofMeshIndex > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< dive::DofMeshIndex > * >(argp1);
  result = (arg1)->rend();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< dive::DofMeshIndex >::reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vecDofMeshIndices_clear(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< dive::DofMeshIndex > *arg1 = (std::vector< dive::DofMeshIndex > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_dive__DofMeshIndex_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vecDofMeshIndices_clear" "', argument " "1"" of type '" "std::vector< dive::DofMeshIndex > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< dive::DofMeshIndex > * >(argp1);
  (arg1)->clear();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vecDofMeshIndices_get_allocator(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< dive::DofMeshIndex > *arg1 = (std::vector< dive::DofMeshIndex > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  SwigValueWrapper< std::allocator< dive::DofMeshIndex > > result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_dive__DofMeshIndex_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vecDofMeshIndices_get_allocator" "', argument " "1"" of type '" "std::vector< dive::DofMeshIndex > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< dive::DofMeshIndex > * >(argp1);
  result = ((std::vector< dive::DofMeshIndex > const *)arg1)->get_allocator();
  resultobj = SWIG_NewPointerObj((new std::vector< dive::DofMeshIndex >::allocator_type(result)), SWIGTYPE_p_std__allocatorT_dive__DofMeshIndex_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_vecDofMeshIndices__SWIG_2(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< dive::DofMeshIndex >::size_type arg1 ;
  size_t val1 ;
  int ecode1 = 0 ;
  std::vector< dive::DofMeshIndex > *result = 0 ;
  
  (void)self;
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_vecDofMeshIndices" "', argument " "1"" of type '" "std::vector< dive::DofMeshIndex >::size_type""'");
  } 
  arg1 = static_cast< std::vector< dive::DofMeshIndex >::size_type >(val1);
  result = (std::vector< dive::DofMeshIndex > *)new std::vector< dive::DofMeshIndex >(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_dive__DofMeshIndex_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vecDofMeshIndices_pop_back(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< dive::DofMeshIndex > *arg1 = (std::vector< dive::DofMeshIndex > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_dive__DofMeshIndex_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vecDofMeshIndices_pop_back" "', argument " "1"" of type '" "std::vector< dive::DofMeshIndex > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< dive::DofMeshIndex > * >(argp1);
  (arg1)->pop_back();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vecDofMeshIndices_resize__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< dive::DofMeshIndex > *arg1 = (std::vector< dive::DofMeshIndex > *) 0 ;
  std::vector< dive::DofMeshIndex >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_dive__DofMeshIndex_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vecDofMeshIndices_resize" "', argument " "1"" of type '" "std::vector< dive::DofMeshIndex > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< dive::DofMeshIndex > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vecDofMeshIndices_resize" "', argument " "2"" of type '" "std::vector< dive::DofMeshIndex >::size_type""'");
  } 
  arg2 = static_cast< std::vector< dive::DofMeshIndex >::size_type >(val2);
  (arg1)->resize(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vecDofMeshIndices_erase__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< dive::DofMeshIndex > *arg1 = (std::vector< dive::DofMeshIndex > *) 0 ;
  std::vector< dive::DofMeshIndex >::iterator arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  std::vector< dive::DofMeshIndex >::iterator result;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_dive__DofMeshIndex_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vecDofMeshIndices_erase" "', argument " "1"" of type '" "std::vector< dive::DofMeshIndex > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< dive::DofMeshIndex > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vecDofMeshIndices_erase" "', argument " "2"" of type '" "std::vector< dive::DofMeshIndex >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< dive::DofMeshIndex >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< dive::DofMeshIndex >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vecDofMeshIndices_erase" "', argument " "2"" of type '" "std::vector< dive::DofMeshIndex >::iterator""'");
    }
  }
  result = std_vector_Sl_dive_DofMeshIndex_Sg__erase__SWIG_0(arg1,SWIG_STD_MOVE(arg2));
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< dive::DofMeshIndex >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vecDofMeshIndices_erase__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< dive::DofMeshIndex > *arg1 = (std::vector< dive::DofMeshIndex > *) 0 ;
  std::vector< dive::DofMeshIndex >::iterator arg2 ;
  std::vector< dive::DofMeshIndex >::iterator arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  swig::SwigPyIterator *iter3 = 0 ;
  int res3 ;
  std::vector< dive::DofMeshIndex >::iterator result;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_dive__DofMeshIndex_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vecDofMeshIndices_erase" "', argument " "1"" of type '" "std::vector< dive::DofMeshIndex > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< dive::DofMeshIndex > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vecDofMeshIndices_erase" "', argument " "2"" of type '" "std::vector< dive::DofMeshIndex >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< dive::DofMeshIndex >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< dive::DofMeshIndex >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vecDofMeshIndices_erase" "', argument " "2"" of type '" "std::vector< dive::DofMeshIndex >::iterator""'");
    }
  }
  res3 = SWIG_ConvertPtr(swig_obj[2], SWIG_as_voidptrptr(&iter3), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res3) || !iter3) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vecDofMeshIndices_erase" "', argument " "3"" of type '" "std::vector< dive::DofMeshIndex >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< dive::DofMeshIndex >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< dive::DofMeshIndex >::iterator > *>(iter3);
    if (iter_t) {
      arg3 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vecDofMeshIndices_erase" "', argument " "3"" of type '" "std::vector< dive::DofMeshIndex >::iterator""'");
    }
  }
  result = std_vector_Sl_dive_DofMeshIndex_Sg__erase__SWIG_1(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3));
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< dive::DofMeshIndex >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vecDofMeshIndices_erase(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "vecDofMeshIndices_erase", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< dive::DofMeshIndex,std::allocator< dive::DofMeshIndex > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< dive::DofMeshIndex >::iterator > *>(iter) != 0));
      if (_v) {
        return _wrap_vecDofMeshIndices_erase__SWIG_0(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< dive::DofMeshIndex,std::allocator< dive::DofMeshIndex > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< dive::DofMeshIndex >::iterator > *>(iter) != 0));
      if (_v) {
        swig::SwigPyIterator *iter = 0;
        int res = SWIG_ConvertPtr(argv[2], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
        _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< dive::DofMeshIndex >::iterator > *>(iter) != 0));
        if (_v) {
          return _wrap_vecDofMeshIndices_erase__SWIG_1(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'vecDofMeshIndices_erase'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< dive::DofMeshIndex >::erase(std::vector< dive::DofMeshIndex >::iterator)\n"
    "    std::vector< dive::DofMeshIndex >::erase(std::vector< dive::DofMeshIndex >::iterator,std::vector< dive::DofMeshIndex >::iterator)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_new_vecDofMeshIndices__SWIG_3(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< dive::DofMeshIndex >::size_type arg1 ;
  std::vector< dive::DofMeshIndex >::value_type *arg2 = 0 ;
  size_t val1 ;
  int ecode1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  std::vector< dive::DofMeshIndex > *result = 0 ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_vecDofMeshIndices" "', argument " "1"" of type '" "std::vector< dive::DofMeshIndex >::size_type""'");
  } 
  arg1 = static_cast< std::vector< dive::DofMeshIndex >::size_type >(val1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_dive__DofMeshIndex,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_vecDofMeshIndices" "', argument " "2"" of type '" "std::vector< dive::DofMeshIndex >::value_type const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_vecDofMeshIndices" "', argument " "2"" of type '" "std::vector< dive::DofMeshIndex >::value_type const &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< dive::DofMeshIndex >::value_type * >(argp2);
  result = (std::vector< dive::DofMeshIndex > *)new std::vector< dive::DofMeshIndex >(arg1,(std::vector< dive::DofMeshIndex >::value_type const &)*arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_dive__DofMeshIndex_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_vecDofMeshIndices(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "new_vecDofMeshIndices", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 0) {
    return _wrap_new_vecDofMeshIndices__SWIG_0(self, argc, argv);
  }
  if (argc == 1) {
    int _v = 0;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_vecDofMeshIndices__SWIG_2(self, argc, argv);
    }
  }
  if (argc == 1) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< dive::DofMeshIndex,std::allocator< dive::DofMeshIndex > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_vecDofMeshIndices__SWIG_1(self, argc, argv);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_dive__DofMeshIndex, SWIG_POINTER_NO_NULL | 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_vecDofMeshIndices__SWIG_3(self, argc, argv);
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'new_vecDofMeshIndices'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< dive::DofMeshIndex >::vector()\n"
    "    std::vector< dive::DofMeshIndex >::vector(std::vector< dive::DofMeshIndex > const &)\n"
    "    std::vector< dive::DofMeshIndex >::vector(std::vector< dive::DofMeshIndex >::size_type)\n"
    "    std::vector< dive::DofMeshIndex >::vector(std::vector< dive::DofMeshIndex >::size_type,std::vector< dive::DofMeshIndex >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_vecDofMeshIndices_push_back(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< dive::DofMeshIndex > *arg1 = (std::vector< dive::DofMeshIndex > *) 0 ;
  std::vector< dive::DofMeshIndex >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "vecDofMeshIndices_push_back", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_dive__DofMeshIndex_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vecDofMeshIndices_push_back" "', argument " "1"" of type '" "std::vector< dive::DofMeshIndex > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< dive::DofMeshIndex > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_dive__DofMeshIndex,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "vecDofMeshIndices_push_back" "', argument " "2"" of type '" "std::vector< dive::DofMeshIndex >::value_type const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vecDofMeshIndices_push_back" "', argument " "2"" of type '" "std::vector< dive::DofMeshIndex >::value_type const &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< dive::DofMeshIndex >::value_type * >(argp2);
  (arg1)->push_back((std::vector< dive::DofMeshIndex >::value_type const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vecDofMeshIndices_front(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< dive::DofMeshIndex > *arg1 = (std::vector< dive::DofMeshIndex > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< dive::DofMeshIndex >::value_type *result = 0 ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_dive__DofMeshIndex_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vecDofMeshIndices_front" "', argument " "1"" of type '" "std::vector< dive::DofMeshIndex > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< dive::DofMeshIndex > * >(argp1);
  result = (std::vector< dive::DofMeshIndex >::value_type *) &((std::vector< dive::DofMeshIndex > const *)arg1)->front();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_dive__DofMeshIndex, 0 |  0 );
  (void)swig::container_owner<swig::traits<std::vector< dive::DofMeshIndex >::value_type>::category>::back_reference(resultobj, swig_obj[0]);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vecDofMeshIndices_back(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< dive::DofMeshIndex > *arg1 = (std::vector< dive::DofMeshIndex > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< dive::DofMeshIndex >::value_type *result = 0 ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_dive__DofMeshIndex_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vecDofMeshIndices_back" "', argument " "1"" of type '" "std::vector< dive::DofMeshIndex > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< dive::DofMeshIndex > * >(argp1);
  result = (std::vector< dive::DofMeshIndex >::value_type *) &((std::vector< dive::DofMeshIndex > const *)arg1)->back();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_dive__DofMeshIndex, 0 |  0 );
  (void)swig::container_owner<swig::traits<std::vector< dive::DofMeshIndex >::value_type>::category>::back_reference(resultobj, swig_obj[0]);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vecDofMeshIndices_assign(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< dive::DofMeshIndex > *arg1 = (std::vector< dive::DofMeshIndex > *) 0 ;
  std::vector< dive::DofMeshIndex >::size_type arg2 ;
  std::vector< dive::DofMeshIndex >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject *swig_obj[3] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "vecDofMeshIndices_assign", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_dive__DofMeshIndex_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vecDofMeshIndices_assign" "', argument " "1"" of type '" "std::vector< dive::DofMeshIndex > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< dive::DofMeshIndex > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vecDofMeshIndices_assign" "', argument " "2"" of type '" "std::vector< dive::DofMeshIndex >::size_type""'");
  } 
  arg2 = static_cast< std::vector< dive::DofMeshIndex >::size_type >(val2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_dive__DofMeshIndex,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "vecDofMeshIndices_assign" "', argument " "3"" of type '" "std::vector< dive::DofMeshIndex >::value_type const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vecDofMeshIndices_assign" "', argument " "3"" of type '" "std::vector< dive::DofMeshIndex >::value_type const &""'"); 
  }
  arg3 = reinterpret_cast< std::vector< dive::DofMeshIndex >::value_type * >(argp3);
  (arg1)->assign(arg2,(std::vector< dive::DofMeshIndex >::value_type const &)*arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vecDofMeshIndices_resize__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< dive::DofMeshIndex > *arg1 = (std::vector< dive::DofMeshIndex > *) 0 ;
  std::vector< dive::DofMeshIndex >::size_type arg2 ;
  std::vector< dive::DofMeshIndex >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_dive__DofMeshIndex_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vecDofMeshIndices_resize" "', argument " "1"" of type '" "std::vector< dive::DofMeshIndex > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< dive::DofMeshIndex > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vecDofMeshIndices_resize" "', argument " "2"" of type '" "std::vector< dive::DofMeshIndex >::size_type""'");
  } 
  arg2 = static_cast< std::vector< dive::DofMeshIndex >::size_type >(val2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_dive__DofMeshIndex,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "vecDofMeshIndices_resize" "', argument " "3"" of type '" "std::vector< dive::DofMeshIndex >::value_type const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vecDofMeshIndices_resize" "', argument " "3"" of type '" "std::vector< dive::DofMeshIndex >::value_type const &""'"); 
  }
  arg3 = reinterpret_cast< std::vector< dive::DofMeshIndex >::value_type * >(argp3);
  (arg1)->resize(arg2,(std::vector< dive::DofMeshIndex >::value_type const &)*arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vecDofMeshIndices_resize(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "vecDofMeshIndices_resize", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< dive::DofMeshIndex,std::allocator< dive::DofMeshIndex > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_vecDofMeshIndices_resize__SWIG_0(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< dive::DofMeshIndex,std::allocator< dive::DofMeshIndex > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_dive__DofMeshIndex, SWIG_POINTER_NO_NULL | 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_vecDofMeshIndices_resize__SWIG_1(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'vecDofMeshIndices_resize'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< dive::DofMeshIndex >::resize(std::vector< dive::DofMeshIndex >::size_type)\n"
    "    std::vector< dive::DofMeshIndex >::resize(std::vector< dive::DofMeshIndex >::size_type,std::vector< dive::DofMeshIndex >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_vecDofMeshIndices_insert__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< dive::DofMeshIndex > *arg1 = (std::vector< dive::DofMeshIndex > *) 0 ;
  std::vector< dive::DofMeshIndex >::iterator arg2 ;
  std::vector< dive::DofMeshIndex >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  std::vector< dive::DofMeshIndex >::iterator result;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_dive__DofMeshIndex_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vecDofMeshIndices_insert" "', argument " "1"" of type '" "std::vector< dive::DofMeshIndex > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< dive::DofMeshIndex > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vecDofMeshIndices_insert" "', argument " "2"" of type '" "std::vector< dive::DofMeshIndex >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< dive::DofMeshIndex >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< dive::DofMeshIndex >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vecDofMeshIndices_insert" "', argument " "2"" of type '" "std::vector< dive::DofMeshIndex >::iterator""'");
    }
  }
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_dive__DofMeshIndex,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "vecDofMeshIndices_insert" "', argument " "3"" of type '" "std::vector< dive::DofMeshIndex >::value_type const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vecDofMeshIndices_insert" "', argument " "3"" of type '" "std::vector< dive::DofMeshIndex >::value_type const &""'"); 
  }
  arg3 = reinterpret_cast< std::vector< dive::DofMeshIndex >::value_type * >(argp3);
  result = std_vector_Sl_dive_DofMeshIndex_Sg__insert__SWIG_0(arg1,SWIG_STD_MOVE(arg2),(dive::DofMeshIndex const &)*arg3);
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< dive::DofMeshIndex >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vecDofMeshIndices_insert__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< dive::DofMeshIndex > *arg1 = (std::vector< dive::DofMeshIndex > *) 0 ;
  std::vector< dive::DofMeshIndex >::iterator arg2 ;
  std::vector< dive::DofMeshIndex >::size_type arg3 ;
  std::vector< dive::DofMeshIndex >::value_type *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  size_t val3 ;
  int ecode3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  
  (void)self;
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_dive__DofMeshIndex_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vecDofMeshIndices_insert" "', argument " "1"" of type '" "std::vector< dive::DofMeshIndex > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< dive::DofMeshIndex > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vecDofMeshIndices_insert" "', argument " "2"" of type '" "std::vector< dive::DofMeshIndex >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< dive::DofMeshIndex >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< dive::DofMeshIndex >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vecDofMeshIndices_insert" "', argument " "2"" of type '" "std::vector< dive::DofMeshIndex >::iterator""'");
    }
  }
  ecode3 = SWIG_AsVal_size_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "vecDofMeshIndices_insert" "', argument " "3"" of type '" "std::vector< dive::DofMeshIndex >::size_type""'");
  } 
  arg3 = static_cast< std::vector< dive::DofMeshIndex >::size_type >(val3);
  res4 = SWIG_ConvertPtr(swig_obj[3], &argp4, SWIGTYPE_p_dive__DofMeshIndex,  0  | 0);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "vecDofMeshIndices_insert" "', argument " "4"" of type '" "std::vector< dive::DofMeshIndex >::value_type const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vecDofMeshIndices_insert" "', argument " "4"" of type '" "std::vector< dive::DofMeshIndex >::value_type const &""'"); 
  }
  arg4 = reinterpret_cast< std::vector< dive::DofMeshIndex >::value_type * >(argp4);
  std_vector_Sl_dive_DofMeshIndex_Sg__insert__SWIG_1(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3),(dive::DofMeshIndex const &)*arg4);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vecDofMeshIndices_insert(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "vecDofMeshIndices_insert", 0, 4, argv))) SWIG_fail;
  --argc;
  if (argc == 3) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< dive::DofMeshIndex,std::allocator< dive::DofMeshIndex > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< dive::DofMeshIndex >::iterator > *>(iter) != 0));
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_dive__DofMeshIndex, SWIG_POINTER_NO_NULL | 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_vecDofMeshIndices_insert__SWIG_0(self, argc, argv);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< dive::DofMeshIndex,std::allocator< dive::DofMeshIndex > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< dive::DofMeshIndex >::iterator > *>(iter) != 0));
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = SWIG_ConvertPtr(argv[3], 0, SWIGTYPE_p_dive__DofMeshIndex, SWIG_POINTER_NO_NULL | 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_vecDofMeshIndices_insert__SWIG_1(self, argc, argv);
          }
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'vecDofMeshIndices_insert'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< dive::DofMeshIndex >::insert(std::vector< dive::DofMeshIndex >::iterator,std::vector< dive::DofMeshIndex >::value_type const &)\n"
    "    std::vector< dive::DofMeshIndex >::insert(std::vector< dive::DofMeshIndex >::iterator,std::vector< dive::DofMeshIndex >::size_type,std::vector< dive::DofMeshIndex >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_vecDofMeshIndices_reserve(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< dive::DofMeshIndex > *arg1 = (std::vector< dive::DofMeshIndex > *) 0 ;
  std::vector< dive::DofMeshIndex >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "vecDofMeshIndices_reserve", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_dive__DofMeshIndex_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vecDofMeshIndices_reserve" "', argument " "1"" of type '" "std::vector< dive::DofMeshIndex > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< dive::DofMeshIndex > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vecDofMeshIndices_reserve" "', argument " "2"" of type '" "std::vector< dive::DofMeshIndex >::size_type""'");
  } 
  arg2 = static_cast< std::vector< dive::DofMeshIndex >::size_type >(val2);
  (arg1)->reserve(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vecDofMeshIndices_capacity(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< dive::DofMeshIndex > *arg1 = (std::vector< dive::DofMeshIndex > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< dive::DofMeshIndex >::size_type result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_dive__DofMeshIndex_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vecDofMeshIndices_capacity" "', argument " "1"" of type '" "std::vector< dive::DofMeshIndex > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< dive::DofMeshIndex > * >(argp1);
  result = ((std::vector< dive::DofMeshIndex > const *)arg1)->capacity();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vecDofMeshIndices___str__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< dive::DofMeshIndex > *arg1 = (std::vector< dive::DofMeshIndex > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  String result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_dive__DofMeshIndex_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vecDofMeshIndices___str__" "', argument " "1"" of type '" "std::vector< dive::DofMeshIndex > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< dive::DofMeshIndex > * >(argp1);
  result = std_vector_Sl_dive_DofMeshIndex_Sg____str__((std::vector< dive::DofMeshIndex > const *)arg1);
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_vecDofMeshIndices(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< dive::DofMeshIndex > *arg1 = (std::vector< dive::DofMeshIndex > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_dive__DofMeshIndex_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_vecDofMeshIndices" "', argument " "1"" of type '" "std::vector< dive::DofMeshIndex > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< dive::DofMeshIndex > * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *vecDofMeshIndices_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_std__vectorT_dive__DofMeshIndex_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *vecDofMeshIndices_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_vecNodeMeshIndices_iterator(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< dive::NodeMeshIndex > *arg1 = (std::vector< dive::NodeMeshIndex > *) 0 ;
  PyObject **arg2 = (PyObject **) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  swig::SwigPyIterator *result = 0 ;
  
  arg2 = &swig_obj[0];
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_dive__NodeMeshIndex_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vecNodeMeshIndices_iterator" "', argument " "1"" of type '" "std::vector< dive::NodeMeshIndex > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< dive::NodeMeshIndex > * >(argp1);
  result = (swig::SwigPyIterator *)std_vector_Sl_dive_NodeMeshIndex_Sg__iterator(arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vecNodeMeshIndices___nonzero__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< dive::NodeMeshIndex > *arg1 = (std::vector< dive::NodeMeshIndex > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_dive__NodeMeshIndex_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vecNodeMeshIndices___nonzero__" "', argument " "1"" of type '" "std::vector< dive::NodeMeshIndex > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< dive::NodeMeshIndex > * >(argp1);
  result = (bool)std_vector_Sl_dive_NodeMeshIndex_Sg____nonzero__((std::vector< dive::NodeMeshIndex > const *)arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vecNodeMeshIndices___bool__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< dive::NodeMeshIndex > *arg1 = (std::vector< dive::NodeMeshIndex > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_dive__NodeMeshIndex_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vecNodeMeshIndices___bool__" "', argument " "1"" of type '" "std::vector< dive::NodeMeshIndex > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< dive::NodeMeshIndex > * >(argp1);
  result = (bool)std_vector_Sl_dive_NodeMeshIndex_Sg____bool__((std::vector< dive::NodeMeshIndex > const *)arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vecNodeMeshIndices___len__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< dive::NodeMeshIndex > *arg1 = (std::vector< dive::NodeMeshIndex > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< dive::NodeMeshIndex >::size_type result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_dive__NodeMeshIndex_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vecNodeMeshIndices___len__" "', argument " "1"" of type '" "std::vector< dive::NodeMeshIndex > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< dive::NodeMeshIndex > * >(argp1);
  result = std_vector_Sl_dive_NodeMeshIndex_Sg____len__((std::vector< dive::NodeMeshIndex > const *)arg1);
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vecNodeMeshIndices___getslice__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< dive::NodeMeshIndex > *arg1 = (std::vector< dive::NodeMeshIndex > *) 0 ;
  std::vector< dive::NodeMeshIndex >::difference_type arg2 ;
  std::vector< dive::NodeMeshIndex >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  std::vector< dive::NodeMeshIndex,std::allocator< dive::NodeMeshIndex > > *result = 0 ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "vecNodeMeshIndices___getslice__", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_dive__NodeMeshIndex_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vecNodeMeshIndices___getslice__" "', argument " "1"" of type '" "std::vector< dive::NodeMeshIndex > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< dive::NodeMeshIndex > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vecNodeMeshIndices___getslice__" "', argument " "2"" of type '" "std::vector< dive::NodeMeshIndex >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< dive::NodeMeshIndex >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "vecNodeMeshIndices___getslice__" "', argument " "3"" of type '" "std::vector< dive::NodeMeshIndex >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< dive::NodeMeshIndex >::difference_type >(val3);
  try {
    result = (std::vector< dive::NodeMeshIndex,std::allocator< dive::NodeMeshIndex > > *)std_vector_Sl_dive_NodeMeshIndex_Sg____getslice__(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3));
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_dive__NodeMeshIndex_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vecNodeMeshIndices___setslice____SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< dive::NodeMeshIndex > *arg1 = (std::vector< dive::NodeMeshIndex > *) 0 ;
  std::vector< dive::NodeMeshIndex >::difference_type arg2 ;
  std::vector< dive::NodeMeshIndex >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_dive__NodeMeshIndex_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vecNodeMeshIndices___setslice__" "', argument " "1"" of type '" "std::vector< dive::NodeMeshIndex > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< dive::NodeMeshIndex > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vecNodeMeshIndices___setslice__" "', argument " "2"" of type '" "std::vector< dive::NodeMeshIndex >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< dive::NodeMeshIndex >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "vecNodeMeshIndices___setslice__" "', argument " "3"" of type '" "std::vector< dive::NodeMeshIndex >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< dive::NodeMeshIndex >::difference_type >(val3);
  try {
    std_vector_Sl_dive_NodeMeshIndex_Sg____setslice____SWIG_0(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3));
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vecNodeMeshIndices___setslice____SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< dive::NodeMeshIndex > *arg1 = (std::vector< dive::NodeMeshIndex > *) 0 ;
  std::vector< dive::NodeMeshIndex >::difference_type arg2 ;
  std::vector< dive::NodeMeshIndex >::difference_type arg3 ;
  std::vector< dive::NodeMeshIndex,std::allocator< dive::NodeMeshIndex > > *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  
  (void)self;
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_dive__NodeMeshIndex_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vecNodeMeshIndices___setslice__" "', argument " "1"" of type '" "std::vector< dive::NodeMeshIndex > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< dive::NodeMeshIndex > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vecNodeMeshIndices___setslice__" "', argument " "2"" of type '" "std::vector< dive::NodeMeshIndex >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< dive::NodeMeshIndex >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "vecNodeMeshIndices___setslice__" "', argument " "3"" of type '" "std::vector< dive::NodeMeshIndex >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< dive::NodeMeshIndex >::difference_type >(val3);
  {
    std::vector< dive::NodeMeshIndex,std::allocator< dive::NodeMeshIndex > > *ptr = (std::vector< dive::NodeMeshIndex,std::allocator< dive::NodeMeshIndex > > *)0;
    res4 = swig::asptr(swig_obj[3], &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "vecNodeMeshIndices___setslice__" "', argument " "4"" of type '" "std::vector< dive::NodeMeshIndex,std::allocator< dive::NodeMeshIndex > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vecNodeMeshIndices___setslice__" "', argument " "4"" of type '" "std::vector< dive::NodeMeshIndex,std::allocator< dive::NodeMeshIndex > > const &""'"); 
    }
    arg4 = ptr;
  }
  try {
    std_vector_Sl_dive_NodeMeshIndex_Sg____setslice____SWIG_1(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3),(std::vector< dive::NodeMeshIndex,std::allocator< dive::NodeMeshIndex > > const &)*arg4);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_vecNodeMeshIndices___setslice__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "vecNodeMeshIndices___setslice__", 0, 4, argv))) SWIG_fail;
  --argc;
  if (argc == 3) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< dive::NodeMeshIndex,std::allocator< dive::NodeMeshIndex > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_ptrdiff_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_vecNodeMeshIndices___setslice____SWIG_0(self, argc, argv);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< dive::NodeMeshIndex,std::allocator< dive::NodeMeshIndex > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_ptrdiff_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = swig::asptr(argv[3], (std::vector< dive::NodeMeshIndex,std::allocator< dive::NodeMeshIndex > >**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_vecNodeMeshIndices___setslice____SWIG_1(self, argc, argv);
          }
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'vecNodeMeshIndices___setslice__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< dive::NodeMeshIndex >::__setslice__(std::vector< dive::NodeMeshIndex >::difference_type,std::vector< dive::NodeMeshIndex >::difference_type)\n"
    "    std::vector< dive::NodeMeshIndex >::__setslice__(std::vector< dive::NodeMeshIndex >::difference_type,std::vector< dive::NodeMeshIndex >::difference_type,std::vector< dive::NodeMeshIndex,std::allocator< dive::NodeMeshIndex > > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_vecNodeMeshIndices___delslice__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< dive::NodeMeshIndex > *arg1 = (std::vector< dive::NodeMeshIndex > *) 0 ;
  std::vector< dive::NodeMeshIndex >::difference_type arg2 ;
  std::vector< dive::NodeMeshIndex >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "vecNodeMeshIndices___delslice__", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_dive__NodeMeshIndex_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vecNodeMeshIndices___delslice__" "', argument " "1"" of type '" "std::vector< dive::NodeMeshIndex > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< dive::NodeMeshIndex > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vecNodeMeshIndices___delslice__" "', argument " "2"" of type '" "std::vector< dive::NodeMeshIndex >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< dive::NodeMeshIndex >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "vecNodeMeshIndices___delslice__" "', argument " "3"" of type '" "std::vector< dive::NodeMeshIndex >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< dive::NodeMeshIndex >::difference_type >(val3);
  try {
    std_vector_Sl_dive_NodeMeshIndex_Sg____delslice__(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3));
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vecNodeMeshIndices___delitem____SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< dive::NodeMeshIndex > *arg1 = (std::vector< dive::NodeMeshIndex > *) 0 ;
  std::vector< dive::NodeMeshIndex >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_dive__NodeMeshIndex_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vecNodeMeshIndices___delitem__" "', argument " "1"" of type '" "std::vector< dive::NodeMeshIndex > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< dive::NodeMeshIndex > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vecNodeMeshIndices___delitem__" "', argument " "2"" of type '" "std::vector< dive::NodeMeshIndex >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< dive::NodeMeshIndex >::difference_type >(val2);
  try {
    std_vector_Sl_dive_NodeMeshIndex_Sg____delitem____SWIG_0(arg1,SWIG_STD_MOVE(arg2));
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vecNodeMeshIndices___getitem____SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< dive::NodeMeshIndex > *arg1 = (std::vector< dive::NodeMeshIndex > *) 0 ;
  SWIGPY_SLICEOBJECT *arg2 = (SWIGPY_SLICEOBJECT *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< dive::NodeMeshIndex,std::allocator< dive::NodeMeshIndex > > *result = 0 ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_dive__NodeMeshIndex_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vecNodeMeshIndices___getitem__" "', argument " "1"" of type '" "std::vector< dive::NodeMeshIndex > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< dive::NodeMeshIndex > * >(argp1);
  {
    if (!PySlice_Check(swig_obj[1])) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vecNodeMeshIndices___getitem__" "', argument " "2"" of type '" "SWIGPY_SLICEOBJECT *""'");
    }
    arg2 = (SWIGPY_SLICEOBJECT *) swig_obj[1];
  }
  try {
    result = (std::vector< dive::NodeMeshIndex,std::allocator< dive::NodeMeshIndex > > *)std_vector_Sl_dive_NodeMeshIndex_Sg____getitem____SWIG_0(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_dive__NodeMeshIndex_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vecNodeMeshIndices___setitem____SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< dive::NodeMeshIndex > *arg1 = (std::vector< dive::NodeMeshIndex > *) 0 ;
  SWIGPY_SLICEOBJECT *arg2 = (SWIGPY_SLICEOBJECT *) 0 ;
  std::vector< dive::NodeMeshIndex,std::allocator< dive::NodeMeshIndex > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_dive__NodeMeshIndex_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vecNodeMeshIndices___setitem__" "', argument " "1"" of type '" "std::vector< dive::NodeMeshIndex > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< dive::NodeMeshIndex > * >(argp1);
  {
    if (!PySlice_Check(swig_obj[1])) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vecNodeMeshIndices___setitem__" "', argument " "2"" of type '" "SWIGPY_SLICEOBJECT *""'");
    }
    arg2 = (SWIGPY_SLICEOBJECT *) swig_obj[1];
  }
  {
    std::vector< dive::NodeMeshIndex,std::allocator< dive::NodeMeshIndex > > *ptr = (std::vector< dive::NodeMeshIndex,std::allocator< dive::NodeMeshIndex > > *)0;
    res3 = swig::asptr(swig_obj[2], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "vecNodeMeshIndices___setitem__" "', argument " "3"" of type '" "std::vector< dive::NodeMeshIndex,std::allocator< dive::NodeMeshIndex > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vecNodeMeshIndices___setitem__" "', argument " "3"" of type '" "std::vector< dive::NodeMeshIndex,std::allocator< dive::NodeMeshIndex > > const &""'"); 
    }
    arg3 = ptr;
  }
  try {
    std_vector_Sl_dive_NodeMeshIndex_Sg____setitem____SWIG_0(arg1,arg2,(std::vector< dive::NodeMeshIndex,std::allocator< dive::NodeMeshIndex > > const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_vecNodeMeshIndices___setitem____SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< dive::NodeMeshIndex > *arg1 = (std::vector< dive::NodeMeshIndex > *) 0 ;
  SWIGPY_SLICEOBJECT *arg2 = (SWIGPY_SLICEOBJECT *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_dive__NodeMeshIndex_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vecNodeMeshIndices___setitem__" "', argument " "1"" of type '" "std::vector< dive::NodeMeshIndex > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< dive::NodeMeshIndex > * >(argp1);
  {
    if (!PySlice_Check(swig_obj[1])) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vecNodeMeshIndices___setitem__" "', argument " "2"" of type '" "SWIGPY_SLICEOBJECT *""'");
    }
    arg2 = (SWIGPY_SLICEOBJECT *) swig_obj[1];
  }
  try {
    std_vector_Sl_dive_NodeMeshIndex_Sg____setitem____SWIG_1(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vecNodeMeshIndices___delitem____SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< dive::NodeMeshIndex > *arg1 = (std::vector< dive::NodeMeshIndex > *) 0 ;
  SWIGPY_SLICEOBJECT *arg2 = (SWIGPY_SLICEOBJECT *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_dive__NodeMeshIndex_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vecNodeMeshIndices___delitem__" "', argument " "1"" of type '" "std::vector< dive::NodeMeshIndex > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< dive::NodeMeshIndex > * >(argp1);
  {
    if (!PySlice_Check(swig_obj[1])) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vecNodeMeshIndices___delitem__" "', argument " "2"" of type '" "SWIGPY_SLICEOBJECT *""'");
    }
    arg2 = (SWIGPY_SLICEOBJECT *) swig_obj[1];
  }
  try {
    std_vector_Sl_dive_NodeMeshIndex_Sg____delitem____SWIG_1(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vecNodeMeshIndices___delitem__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "vecNodeMeshIndices___delitem__", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< dive::NodeMeshIndex,std::allocator< dive::NodeMeshIndex > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_vecNodeMeshIndices___delitem____SWIG_1(self, argc, argv);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< dive::NodeMeshIndex,std::allocator< dive::NodeMeshIndex > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_vecNodeMeshIndices___delitem____SWIG_0(self, argc, argv);
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'vecNodeMeshIndices___delitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< dive::NodeMeshIndex >::__delitem__(std::vector< dive::NodeMeshIndex >::difference_type)\n"
    "    std::vector< dive::NodeMeshIndex >::__delitem__(SWIGPY_SLICEOBJECT *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_vecNodeMeshIndices___getitem____SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< dive::NodeMeshIndex > *arg1 = (std::vector< dive::NodeMeshIndex > *) 0 ;
  std::vector< dive::NodeMeshIndex >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  std::vector< dive::NodeMeshIndex >::value_type *result = 0 ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_dive__NodeMeshIndex_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vecNodeMeshIndices___getitem__" "', argument " "1"" of type '" "std::vector< dive::NodeMeshIndex > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< dive::NodeMeshIndex > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vecNodeMeshIndices___getitem__" "', argument " "2"" of type '" "std::vector< dive::NodeMeshIndex >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< dive::NodeMeshIndex >::difference_type >(val2);
  try {
    result = (std::vector< dive::NodeMeshIndex >::value_type *) &std_vector_Sl_dive_NodeMeshIndex_Sg____getitem____SWIG_1((std::vector< dive::NodeMeshIndex > const *)arg1,SWIG_STD_MOVE(arg2));
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_dive__NodeMeshIndex, 0 |  0 );
  (void)swig::container_owner<swig::traits<std::vector< dive::NodeMeshIndex >::value_type>::category>::back_reference(resultobj, swig_obj[0]);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vecNodeMeshIndices___getitem__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "vecNodeMeshIndices___getitem__", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< dive::NodeMeshIndex,std::allocator< dive::NodeMeshIndex > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_vecNodeMeshIndices___getitem____SWIG_0(self, argc, argv);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< dive::NodeMeshIndex,std::allocator< dive::NodeMeshIndex > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_vecNodeMeshIndices___getitem____SWIG_1(self, argc, argv);
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'vecNodeMeshIndices___getitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< dive::NodeMeshIndex >::__getitem__(SWIGPY_SLICEOBJECT *)\n"
    "    std::vector< dive::NodeMeshIndex >::__getitem__(std::vector< dive::NodeMeshIndex >::difference_type) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_vecNodeMeshIndices___setitem____SWIG_2(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< dive::NodeMeshIndex > *arg1 = (std::vector< dive::NodeMeshIndex > *) 0 ;
  std::vector< dive::NodeMeshIndex >::difference_type arg2 ;
  std::vector< dive::NodeMeshIndex >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_dive__NodeMeshIndex_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vecNodeMeshIndices___setitem__" "', argument " "1"" of type '" "std::vector< dive::NodeMeshIndex > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< dive::NodeMeshIndex > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vecNodeMeshIndices___setitem__" "', argument " "2"" of type '" "std::vector< dive::NodeMeshIndex >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< dive::NodeMeshIndex >::difference_type >(val2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_dive__NodeMeshIndex,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "vecNodeMeshIndices___setitem__" "', argument " "3"" of type '" "std::vector< dive::NodeMeshIndex >::value_type const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vecNodeMeshIndices___setitem__" "', argument " "3"" of type '" "std::vector< dive::NodeMeshIndex >::value_type const &""'"); 
  }
  arg3 = reinterpret_cast< std::vector< dive::NodeMeshIndex >::value_type * >(argp3);
  try {
    std_vector_Sl_dive_NodeMeshIndex_Sg____setitem____SWIG_2(arg1,SWIG_STD_MOVE(arg2),(dive::NodeMeshIndex const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vecNodeMeshIndices___setitem__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "vecNodeMeshIndices___setitem__", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< dive::NodeMeshIndex,std::allocator< dive::NodeMeshIndex > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_vecNodeMeshIndices___setitem____SWIG_1(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< dive::NodeMeshIndex,std::allocator< dive::NodeMeshIndex > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        int res = swig::asptr(argv[2], (std::vector< dive::NodeMeshIndex,std::allocator< dive::NodeMeshIndex > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_vecNodeMeshIndices___setitem____SWIG_0(self, argc, argv);
        }
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< dive::NodeMeshIndex,std::allocator< dive::NodeMeshIndex > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_dive__NodeMeshIndex, SWIG_POINTER_NO_NULL | 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_vecNodeMeshIndices___setitem____SWIG_2(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'vecNodeMeshIndices___setitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< dive::NodeMeshIndex >::__setitem__(SWIGPY_SLICEOBJECT *,std::vector< dive::NodeMeshIndex,std::allocator< dive::NodeMeshIndex > > const &)\n"
    "    std::vector< dive::NodeMeshIndex >::__setitem__(SWIGPY_SLICEOBJECT *)\n"
    "    std::vector< dive::NodeMeshIndex >::__setitem__(std::vector< dive::NodeMeshIndex >::difference_type,std::vector< dive::NodeMeshIndex >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_vecNodeMeshIndices_pop(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< dive::NodeMeshIndex > *arg1 = (std::vector< dive::NodeMeshIndex > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< dive::NodeMeshIndex >::value_type result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_dive__NodeMeshIndex_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vecNodeMeshIndices_pop" "', argument " "1"" of type '" "std::vector< dive::NodeMeshIndex > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< dive::NodeMeshIndex > * >(argp1);
  try {
    result = std_vector_Sl_dive_NodeMeshIndex_Sg__pop(arg1);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  resultobj = SWIG_NewPointerObj((new std::vector< dive::NodeMeshIndex >::value_type(result)), SWIGTYPE_p_dive__NodeMeshIndex, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vecNodeMeshIndices_append(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< dive::NodeMeshIndex > *arg1 = (std::vector< dive::NodeMeshIndex > *) 0 ;
  std::vector< dive::NodeMeshIndex >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "vecNodeMeshIndices_append", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_dive__NodeMeshIndex_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vecNodeMeshIndices_append" "', argument " "1"" of type '" "std::vector< dive::NodeMeshIndex > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< dive::NodeMeshIndex > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_dive__NodeMeshIndex,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "vecNodeMeshIndices_append" "', argument " "2"" of type '" "std::vector< dive::NodeMeshIndex >::value_type const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vecNodeMeshIndices_append" "', argument " "2"" of type '" "std::vector< dive::NodeMeshIndex >::value_type const &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< dive::NodeMeshIndex >::value_type * >(argp2);
  std_vector_Sl_dive_NodeMeshIndex_Sg__append(arg1,(dive::NodeMeshIndex const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_vecNodeMeshIndices__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **SWIGUNUSEDPARM(swig_obj)) {
  PyObject *resultobj = 0;
  std::vector< dive::NodeMeshIndex > *result = 0 ;
  
  (void)self;
  if ((nobjs < 0) || (nobjs > 0)) SWIG_fail;
  result = (std::vector< dive::NodeMeshIndex > *)new std::vector< dive::NodeMeshIndex >();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_dive__NodeMeshIndex_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_vecNodeMeshIndices__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< dive::NodeMeshIndex > *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  std::vector< dive::NodeMeshIndex > *result = 0 ;
  
  (void)self;
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  {
    std::vector< dive::NodeMeshIndex,std::allocator< dive::NodeMeshIndex > > *ptr = (std::vector< dive::NodeMeshIndex,std::allocator< dive::NodeMeshIndex > > *)0;
    res1 = swig::asptr(swig_obj[0], &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_vecNodeMeshIndices" "', argument " "1"" of type '" "std::vector< dive::NodeMeshIndex > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_vecNodeMeshIndices" "', argument " "1"" of type '" "std::vector< dive::NodeMeshIndex > const &""'"); 
    }
    arg1 = ptr;
  }
  result = (std::vector< dive::NodeMeshIndex > *)new std::vector< dive::NodeMeshIndex >((std::vector< dive::NodeMeshIndex > const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_dive__NodeMeshIndex_t, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_vecNodeMeshIndices_empty(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< dive::NodeMeshIndex > *arg1 = (std::vector< dive::NodeMeshIndex > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_dive__NodeMeshIndex_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vecNodeMeshIndices_empty" "', argument " "1"" of type '" "std::vector< dive::NodeMeshIndex > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< dive::NodeMeshIndex > * >(argp1);
  result = (bool)((std::vector< dive::NodeMeshIndex > const *)arg1)->empty();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vecNodeMeshIndices_size(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< dive::NodeMeshIndex > *arg1 = (std::vector< dive::NodeMeshIndex > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< dive::NodeMeshIndex >::size_type result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_dive__NodeMeshIndex_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vecNodeMeshIndices_size" "', argument " "1"" of type '" "std::vector< dive::NodeMeshIndex > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< dive::NodeMeshIndex > * >(argp1);
  result = ((std::vector< dive::NodeMeshIndex > const *)arg1)->size();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vecNodeMeshIndices_swap(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< dive::NodeMeshIndex > *arg1 = (std::vector< dive::NodeMeshIndex > *) 0 ;
  std::vector< dive::NodeMeshIndex > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "vecNodeMeshIndices_swap", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_dive__NodeMeshIndex_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vecNodeMeshIndices_swap" "', argument " "1"" of type '" "std::vector< dive::NodeMeshIndex > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< dive::NodeMeshIndex > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_std__vectorT_dive__NodeMeshIndex_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "vecNodeMeshIndices_swap" "', argument " "2"" of type '" "std::vector< dive::NodeMeshIndex > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vecNodeMeshIndices_swap" "', argument " "2"" of type '" "std::vector< dive::NodeMeshIndex > &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< dive::NodeMeshIndex > * >(argp2);
  (arg1)->swap(*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vecNodeMeshIndices_begin(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< dive::NodeMeshIndex > *arg1 = (std::vector< dive::NodeMeshIndex > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< dive::NodeMeshIndex >::iterator result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_dive__NodeMeshIndex_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vecNodeMeshIndices_begin" "', argument " "1"" of type '" "std::vector< dive::NodeMeshIndex > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< dive::NodeMeshIndex > * >(argp1);
  result = (arg1)->begin();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< dive::NodeMeshIndex >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vecNodeMeshIndices_end(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< dive::NodeMeshIndex > *arg1 = (std::vector< dive::NodeMeshIndex > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< dive::NodeMeshIndex >::iterator result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_dive__NodeMeshIndex_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vecNodeMeshIndices_end" "', argument " "1"" of type '" "std::vector< dive::NodeMeshIndex > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< dive::NodeMeshIndex > * >(argp1);
  result = (arg1)->end();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< dive::NodeMeshIndex >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vecNodeMeshIndices_rbegin(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< dive::NodeMeshIndex > *arg1 = (std::vector< dive::NodeMeshIndex > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< dive::NodeMeshIndex >::reverse_iterator result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_dive__NodeMeshIndex_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vecNodeMeshIndices_rbegin" "', argument " "1"" of type '" "std::vector< dive::NodeMeshIndex > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< dive::NodeMeshIndex > * >(argp1);
  result = (arg1)->rbegin();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< dive::NodeMeshIndex >::reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vecNodeMeshIndices_rend(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< dive::NodeMeshIndex > *arg1 = (std::vector< dive::NodeMeshIndex > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< dive::NodeMeshIndex >::reverse_iterator result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_dive__NodeMeshIndex_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vecNodeMeshIndices_rend" "', argument " "1"" of type '" "std::vector< dive::NodeMeshIndex > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< dive::NodeMeshIndex > * >(argp1);
  result = (arg1)->rend();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< dive::NodeMeshIndex >::reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vecNodeMeshIndices_clear(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< dive::NodeMeshIndex > *arg1 = (std::vector< dive::NodeMeshIndex > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_dive__NodeMeshIndex_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vecNodeMeshIndices_clear" "', argument " "1"" of type '" "std::vector< dive::NodeMeshIndex > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< dive::NodeMeshIndex > * >(argp1);
  (arg1)->clear();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vecNodeMeshIndices_get_allocator(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< dive::NodeMeshIndex > *arg1 = (std::vector< dive::NodeMeshIndex > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  SwigValueWrapper< std::allocator< dive::NodeMeshIndex > > result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_dive__NodeMeshIndex_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vecNodeMeshIndices_get_allocator" "', argument " "1"" of type '" "std::vector< dive::NodeMeshIndex > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< dive::NodeMeshIndex > * >(argp1);
  result = ((std::vector< dive::NodeMeshIndex > const *)arg1)->get_allocator();
  resultobj = SWIG_NewPointerObj((new std::vector< dive::NodeMeshIndex >::allocator_type(result)), SWIGTYPE_p_std__allocatorT_dive__NodeMeshIndex_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_vecNodeMeshIndices__SWIG_2(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< dive::NodeMeshIndex >::size_type arg1 ;
  size_t val1 ;
  int ecode1 = 0 ;
  std::vector< dive::NodeMeshIndex > *result = 0 ;
  
  (void)self;
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_vecNodeMeshIndices" "', argument " "1"" of type '" "std::vector< dive::NodeMeshIndex >::size_type""'");
  } 
  arg1 = static_cast< std::vector< dive::NodeMeshIndex >::size_type >(val1);
  result = (std::vector< dive::NodeMeshIndex > *)new std::vector< dive::NodeMeshIndex >(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_dive__NodeMeshIndex_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vecNodeMeshIndices_pop_back(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< dive::NodeMeshIndex > *arg1 = (std::vector< dive::NodeMeshIndex > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_dive__NodeMeshIndex_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vecNodeMeshIndices_pop_back" "', argument " "1"" of type '" "std::vector< dive::NodeMeshIndex > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< dive::NodeMeshIndex > * >(argp1);
  (arg1)->pop_back();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vecNodeMeshIndices_resize__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< dive::NodeMeshIndex > *arg1 = (std::vector< dive::NodeMeshIndex > *) 0 ;
  std::vector< dive::NodeMeshIndex >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_dive__NodeMeshIndex_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vecNodeMeshIndices_resize" "', argument " "1"" of type '" "std::vector< dive::NodeMeshIndex > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< dive::NodeMeshIndex > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vecNodeMeshIndices_resize" "', argument " "2"" of type '" "std::vector< dive::NodeMeshIndex >::size_type""'");
  } 
  arg2 = static_cast< std::vector< dive::NodeMeshIndex >::size_type >(val2);
  (arg1)->resize(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vecNodeMeshIndices_erase__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< dive::NodeMeshIndex > *arg1 = (std::vector< dive::NodeMeshIndex > *) 0 ;
  std::vector< dive::NodeMeshIndex >::iterator arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  std::vector< dive::NodeMeshIndex >::iterator result;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_dive__NodeMeshIndex_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vecNodeMeshIndices_erase" "', argument " "1"" of type '" "std::vector< dive::NodeMeshIndex > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< dive::NodeMeshIndex > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vecNodeMeshIndices_erase" "', argument " "2"" of type '" "std::vector< dive::NodeMeshIndex >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< dive::NodeMeshIndex >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< dive::NodeMeshIndex >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vecNodeMeshIndices_erase" "', argument " "2"" of type '" "std::vector< dive::NodeMeshIndex >::iterator""'");
    }
  }
  result = std_vector_Sl_dive_NodeMeshIndex_Sg__erase__SWIG_0(arg1,SWIG_STD_MOVE(arg2));
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< dive::NodeMeshIndex >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vecNodeMeshIndices_erase__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< dive::NodeMeshIndex > *arg1 = (std::vector< dive::NodeMeshIndex > *) 0 ;
  std::vector< dive::NodeMeshIndex >::iterator arg2 ;
  std::vector< dive::NodeMeshIndex >::iterator arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  swig::SwigPyIterator *iter3 = 0 ;
  int res3 ;
  std::vector< dive::NodeMeshIndex >::iterator result;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_dive__NodeMeshIndex_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vecNodeMeshIndices_erase" "', argument " "1"" of type '" "std::vector< dive::NodeMeshIndex > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< dive::NodeMeshIndex > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vecNodeMeshIndices_erase" "', argument " "2"" of type '" "std::vector< dive::NodeMeshIndex >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< dive::NodeMeshIndex >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< dive::NodeMeshIndex >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vecNodeMeshIndices_erase" "', argument " "2"" of type '" "std::vector< dive::NodeMeshIndex >::iterator""'");
    }
  }
  res3 = SWIG_ConvertPtr(swig_obj[2], SWIG_as_voidptrptr(&iter3), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res3) || !iter3) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vecNodeMeshIndices_erase" "', argument " "3"" of type '" "std::vector< dive::NodeMeshIndex >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< dive::NodeMeshIndex >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< dive::NodeMeshIndex >::iterator > *>(iter3);
    if (iter_t) {
      arg3 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vecNodeMeshIndices_erase" "', argument " "3"" of type '" "std::vector< dive::NodeMeshIndex >::iterator""'");
    }
  }
  result = std_vector_Sl_dive_NodeMeshIndex_Sg__erase__SWIG_1(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3));
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< dive::NodeMeshIndex >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vecNodeMeshIndices_erase(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "vecNodeMeshIndices_erase", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< dive::NodeMeshIndex,std::allocator< dive::NodeMeshIndex > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< dive::NodeMeshIndex >::iterator > *>(iter) != 0));
      if (_v) {
        return _wrap_vecNodeMeshIndices_erase__SWIG_0(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< dive::NodeMeshIndex,std::allocator< dive::NodeMeshIndex > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< dive::NodeMeshIndex >::iterator > *>(iter) != 0));
      if (_v) {
        swig::SwigPyIterator *iter = 0;
        int res = SWIG_ConvertPtr(argv[2], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
        _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< dive::NodeMeshIndex >::iterator > *>(iter) != 0));
        if (_v) {
          return _wrap_vecNodeMeshIndices_erase__SWIG_1(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'vecNodeMeshIndices_erase'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< dive::NodeMeshIndex >::erase(std::vector< dive::NodeMeshIndex >::iterator)\n"
    "    std::vector< dive::NodeMeshIndex >::erase(std::vector< dive::NodeMeshIndex >::iterator,std::vector< dive::NodeMeshIndex >::iterator)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_new_vecNodeMeshIndices__SWIG_3(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< dive::NodeMeshIndex >::size_type arg1 ;
  std::vector< dive::NodeMeshIndex >::value_type *arg2 = 0 ;
  size_t val1 ;
  int ecode1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  std::vector< dive::NodeMeshIndex > *result = 0 ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_vecNodeMeshIndices" "', argument " "1"" of type '" "std::vector< dive::NodeMeshIndex >::size_type""'");
  } 
  arg1 = static_cast< std::vector< dive::NodeMeshIndex >::size_type >(val1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_dive__NodeMeshIndex,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_vecNodeMeshIndices" "', argument " "2"" of type '" "std::vector< dive::NodeMeshIndex >::value_type const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_vecNodeMeshIndices" "', argument " "2"" of type '" "std::vector< dive::NodeMeshIndex >::value_type const &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< dive::NodeMeshIndex >::value_type * >(argp2);
  result = (std::vector< dive::NodeMeshIndex > *)new std::vector< dive::NodeMeshIndex >(arg1,(std::vector< dive::NodeMeshIndex >::value_type const &)*arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_dive__NodeMeshIndex_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_vecNodeMeshIndices(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "new_vecNodeMeshIndices", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 0) {
    return _wrap_new_vecNodeMeshIndices__SWIG_0(self, argc, argv);
  }
  if (argc == 1) {
    int _v = 0;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_vecNodeMeshIndices__SWIG_2(self, argc, argv);
    }
  }
  if (argc == 1) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< dive::NodeMeshIndex,std::allocator< dive::NodeMeshIndex > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_vecNodeMeshIndices__SWIG_1(self, argc, argv);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_dive__NodeMeshIndex, SWIG_POINTER_NO_NULL | 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_vecNodeMeshIndices__SWIG_3(self, argc, argv);
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'new_vecNodeMeshIndices'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< dive::NodeMeshIndex >::vector()\n"
    "    std::vector< dive::NodeMeshIndex >::vector(std::vector< dive::NodeMeshIndex > const &)\n"
    "    std::vector< dive::NodeMeshIndex >::vector(std::vector< dive::NodeMeshIndex >::size_type)\n"
    "    std::vector< dive::NodeMeshIndex >::vector(std::vector< dive::NodeMeshIndex >::size_type,std::vector< dive::NodeMeshIndex >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_vecNodeMeshIndices_push_back(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< dive::NodeMeshIndex > *arg1 = (std::vector< dive::NodeMeshIndex > *) 0 ;
  std::vector< dive::NodeMeshIndex >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "vecNodeMeshIndices_push_back", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_dive__NodeMeshIndex_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vecNodeMeshIndices_push_back" "', argument " "1"" of type '" "std::vector< dive::NodeMeshIndex > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< dive::NodeMeshIndex > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_dive__NodeMeshIndex,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "vecNodeMeshIndices_push_back" "', argument " "2"" of type '" "std::vector< dive::NodeMeshIndex >::value_type const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vecNodeMeshIndices_push_back" "', argument " "2"" of type '" "std::vector< dive::NodeMeshIndex >::value_type const &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< dive::NodeMeshIndex >::value_type * >(argp2);
  (arg1)->push_back((std::vector< dive::NodeMeshIndex >::value_type const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vecNodeMeshIndices_front(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< dive::NodeMeshIndex > *arg1 = (std::vector< dive::NodeMeshIndex > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< dive::NodeMeshIndex >::value_type *result = 0 ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_dive__NodeMeshIndex_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vecNodeMeshIndices_front" "', argument " "1"" of type '" "std::vector< dive::NodeMeshIndex > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< dive::NodeMeshIndex > * >(argp1);
  result = (std::vector< dive::NodeMeshIndex >::value_type *) &((std::vector< dive::NodeMeshIndex > const *)arg1)->front();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_dive__NodeMeshIndex, 0 |  0 );
  (void)swig::container_owner<swig::traits<std::vector< dive::NodeMeshIndex >::value_type>::category>::back_reference(resultobj, swig_obj[0]);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vecNodeMeshIndices_back(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< dive::NodeMeshIndex > *arg1 = (std::vector< dive::NodeMeshIndex > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< dive::NodeMeshIndex >::value_type *result = 0 ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_dive__NodeMeshIndex_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vecNodeMeshIndices_back" "', argument " "1"" of type '" "std::vector< dive::NodeMeshIndex > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< dive::NodeMeshIndex > * >(argp1);
  result = (std::vector< dive::NodeMeshIndex >::value_type *) &((std::vector< dive::NodeMeshIndex > const *)arg1)->back();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_dive__NodeMeshIndex, 0 |  0 );
  (void)swig::container_owner<swig::traits<std::vector< dive::NodeMeshIndex >::value_type>::category>::back_reference(resultobj, swig_obj[0]);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vecNodeMeshIndices_assign(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< dive::NodeMeshIndex > *arg1 = (std::vector< dive::NodeMeshIndex > *) 0 ;
  std::vector< dive::NodeMeshIndex >::size_type arg2 ;
  std::vector< dive::NodeMeshIndex >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject *swig_obj[3] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "vecNodeMeshIndices_assign", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_dive__NodeMeshIndex_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vecNodeMeshIndices_assign" "', argument " "1"" of type '" "std::vector< dive::NodeMeshIndex > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< dive::NodeMeshIndex > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vecNodeMeshIndices_assign" "', argument " "2"" of type '" "std::vector< dive::NodeMeshIndex >::size_type""'");
  } 
  arg2 = static_cast< std::vector< dive::NodeMeshIndex >::size_type >(val2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_dive__NodeMeshIndex,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "vecNodeMeshIndices_assign" "', argument " "3"" of type '" "std::vector< dive::NodeMeshIndex >::value_type const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vecNodeMeshIndices_assign" "', argument " "3"" of type '" "std::vector< dive::NodeMeshIndex >::value_type const &""'"); 
  }
  arg3 = reinterpret_cast< std::vector< dive::NodeMeshIndex >::value_type * >(argp3);
  (arg1)->assign(arg2,(std::vector< dive::NodeMeshIndex >::value_type const &)*arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vecNodeMeshIndices_resize__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< dive::NodeMeshIndex > *arg1 = (std::vector< dive::NodeMeshIndex > *) 0 ;
  std::vector< dive::NodeMeshIndex >::size_type arg2 ;
  std::vector< dive::NodeMeshIndex >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_dive__NodeMeshIndex_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vecNodeMeshIndices_resize" "', argument " "1"" of type '" "std::vector< dive::NodeMeshIndex > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< dive::NodeMeshIndex > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vecNodeMeshIndices_resize" "', argument " "2"" of type '" "std::vector< dive::NodeMeshIndex >::size_type""'");
  } 
  arg2 = static_cast< std::vector< dive::NodeMeshIndex >::size_type >(val2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_dive__NodeMeshIndex,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "vecNodeMeshIndices_resize" "', argument " "3"" of type '" "std::vector< dive::NodeMeshIndex >::value_type const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vecNodeMeshIndices_resize" "', argument " "3"" of type '" "std::vector< dive::NodeMeshIndex >::value_type const &""'"); 
  }
  arg3 = reinterpret_cast< std::vector< dive::NodeMeshIndex >::value_type * >(argp3);
  (arg1)->resize(arg2,(std::vector< dive::NodeMeshIndex >::value_type const &)*arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vecNodeMeshIndices_resize(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "vecNodeMeshIndices_resize", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< dive::NodeMeshIndex,std::allocator< dive::NodeMeshIndex > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_vecNodeMeshIndices_resize__SWIG_0(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< dive::NodeMeshIndex,std::allocator< dive::NodeMeshIndex > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_dive__NodeMeshIndex, SWIG_POINTER_NO_NULL | 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_vecNodeMeshIndices_resize__SWIG_1(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'vecNodeMeshIndices_resize'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< dive::NodeMeshIndex >::resize(std::vector< dive::NodeMeshIndex >::size_type)\n"
    "    std::vector< dive::NodeMeshIndex >::resize(std::vector< dive::NodeMeshIndex >::size_type,std::vector< dive::NodeMeshIndex >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_vecNodeMeshIndices_insert__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< dive::NodeMeshIndex > *arg1 = (std::vector< dive::NodeMeshIndex > *) 0 ;
  std::vector< dive::NodeMeshIndex >::iterator arg2 ;
  std::vector< dive::NodeMeshIndex >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  std::vector< dive::NodeMeshIndex >::iterator result;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_dive__NodeMeshIndex_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vecNodeMeshIndices_insert" "', argument " "1"" of type '" "std::vector< dive::NodeMeshIndex > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< dive::NodeMeshIndex > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vecNodeMeshIndices_insert" "', argument " "2"" of type '" "std::vector< dive::NodeMeshIndex >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< dive::NodeMeshIndex >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< dive::NodeMeshIndex >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vecNodeMeshIndices_insert" "', argument " "2"" of type '" "std::vector< dive::NodeMeshIndex >::iterator""'");
    }
  }
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_dive__NodeMeshIndex,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "vecNodeMeshIndices_insert" "', argument " "3"" of type '" "std::vector< dive::NodeMeshIndex >::value_type const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vecNodeMeshIndices_insert" "', argument " "3"" of type '" "std::vector< dive::NodeMeshIndex >::value_type const &""'"); 
  }
  arg3 = reinterpret_cast< std::vector< dive::NodeMeshIndex >::value_type * >(argp3);
  result = std_vector_Sl_dive_NodeMeshIndex_Sg__insert__SWIG_0(arg1,SWIG_STD_MOVE(arg2),(dive::NodeMeshIndex const &)*arg3);
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< dive::NodeMeshIndex >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vecNodeMeshIndices_insert__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< dive::NodeMeshIndex > *arg1 = (std::vector< dive::NodeMeshIndex > *) 0 ;
  std::vector< dive::NodeMeshIndex >::iterator arg2 ;
  std::vector< dive::NodeMeshIndex >::size_type arg3 ;
  std::vector< dive::NodeMeshIndex >::value_type *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  size_t val3 ;
  int ecode3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  
  (void)self;
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_dive__NodeMeshIndex_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vecNodeMeshIndices_insert" "', argument " "1"" of type '" "std::vector< dive::NodeMeshIndex > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< dive::NodeMeshIndex > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vecNodeMeshIndices_insert" "', argument " "2"" of type '" "std::vector< dive::NodeMeshIndex >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< dive::NodeMeshIndex >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< dive::NodeMeshIndex >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vecNodeMeshIndices_insert" "', argument " "2"" of type '" "std::vector< dive::NodeMeshIndex >::iterator""'");
    }
  }
  ecode3 = SWIG_AsVal_size_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "vecNodeMeshIndices_insert" "', argument " "3"" of type '" "std::vector< dive::NodeMeshIndex >::size_type""'");
  } 
  arg3 = static_cast< std::vector< dive::NodeMeshIndex >::size_type >(val3);
  res4 = SWIG_ConvertPtr(swig_obj[3], &argp4, SWIGTYPE_p_dive__NodeMeshIndex,  0  | 0);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "vecNodeMeshIndices_insert" "', argument " "4"" of type '" "std::vector< dive::NodeMeshIndex >::value_type const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vecNodeMeshIndices_insert" "', argument " "4"" of type '" "std::vector< dive::NodeMeshIndex >::value_type const &""'"); 
  }
  arg4 = reinterpret_cast< std::vector< dive::NodeMeshIndex >::value_type * >(argp4);
  std_vector_Sl_dive_NodeMeshIndex_Sg__insert__SWIG_1(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3),(dive::NodeMeshIndex const &)*arg4);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vecNodeMeshIndices_insert(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "vecNodeMeshIndices_insert", 0, 4, argv))) SWIG_fail;
  --argc;
  if (argc == 3) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< dive::NodeMeshIndex,std::allocator< dive::NodeMeshIndex > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< dive::NodeMeshIndex >::iterator > *>(iter) != 0));
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_dive__NodeMeshIndex, SWIG_POINTER_NO_NULL | 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_vecNodeMeshIndices_insert__SWIG_0(self, argc, argv);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< dive::NodeMeshIndex,std::allocator< dive::NodeMeshIndex > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< dive::NodeMeshIndex >::iterator > *>(iter) != 0));
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = SWIG_ConvertPtr(argv[3], 0, SWIGTYPE_p_dive__NodeMeshIndex, SWIG_POINTER_NO_NULL | 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_vecNodeMeshIndices_insert__SWIG_1(self, argc, argv);
          }
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'vecNodeMeshIndices_insert'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< dive::NodeMeshIndex >::insert(std::vector< dive::NodeMeshIndex >::iterator,std::vector< dive::NodeMeshIndex >::value_type const &)\n"
    "    std::vector< dive::NodeMeshIndex >::insert(std::vector< dive::NodeMeshIndex >::iterator,std::vector< dive::NodeMeshIndex >::size_type,std::vector< dive::NodeMeshIndex >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_vecNodeMeshIndices_reserve(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< dive::NodeMeshIndex > *arg1 = (std::vector< dive::NodeMeshIndex > *) 0 ;
  std::vector< dive::NodeMeshIndex >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "vecNodeMeshIndices_reserve", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_dive__NodeMeshIndex_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vecNodeMeshIndices_reserve" "', argument " "1"" of type '" "std::vector< dive::NodeMeshIndex > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< dive::NodeMeshIndex > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vecNodeMeshIndices_reserve" "', argument " "2"" of type '" "std::vector< dive::NodeMeshIndex >::size_type""'");
  } 
  arg2 = static_cast< std::vector< dive::NodeMeshIndex >::size_type >(val2);
  (arg1)->reserve(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vecNodeMeshIndices_capacity(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< dive::NodeMeshIndex > *arg1 = (std::vector< dive::NodeMeshIndex > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< dive::NodeMeshIndex >::size_type result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_dive__NodeMeshIndex_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vecNodeMeshIndices_capacity" "', argument " "1"" of type '" "std::vector< dive::NodeMeshIndex > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< dive::NodeMeshIndex > * >(argp1);
  result = ((std::vector< dive::NodeMeshIndex > const *)arg1)->capacity();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_vecNodeMeshIndices(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< dive::NodeMeshIndex > *arg1 = (std::vector< dive::NodeMeshIndex > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_dive__NodeMeshIndex_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_vecNodeMeshIndices" "', argument " "1"" of type '" "std::vector< dive::NodeMeshIndex > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< dive::NodeMeshIndex > * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *vecNodeMeshIndices_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_std__vectorT_dive__NodeMeshIndex_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *vecNodeMeshIndices_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_arrNodeMeshIndices_iterator(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< dive::NodeMeshIndex > > *arg1 = (std::vector< std::vector< dive::NodeMeshIndex > > *) 0 ;
  PyObject **arg2 = (PyObject **) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  swig::SwigPyIterator *result = 0 ;
  
  arg2 = &swig_obj[0];
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_dive__NodeMeshIndex_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "arrNodeMeshIndices_iterator" "', argument " "1"" of type '" "std::vector< std::vector< dive::NodeMeshIndex > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< dive::NodeMeshIndex > > * >(argp1);
  result = (swig::SwigPyIterator *)std_vector_Sl_std_vector_Sl_dive_NodeMeshIndex_Sg__Sg__iterator(arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_arrNodeMeshIndices___nonzero__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< dive::NodeMeshIndex > > *arg1 = (std::vector< std::vector< dive::NodeMeshIndex > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_dive__NodeMeshIndex_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "arrNodeMeshIndices___nonzero__" "', argument " "1"" of type '" "std::vector< std::vector< dive::NodeMeshIndex > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< dive::NodeMeshIndex > > * >(argp1);
  result = (bool)std_vector_Sl_std_vector_Sl_dive_NodeMeshIndex_Sg__Sg____nonzero__((std::vector< std::vector< dive::NodeMeshIndex > > const *)arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_arrNodeMeshIndices___bool__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< dive::NodeMeshIndex > > *arg1 = (std::vector< std::vector< dive::NodeMeshIndex > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_dive__NodeMeshIndex_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "arrNodeMeshIndices___bool__" "', argument " "1"" of type '" "std::vector< std::vector< dive::NodeMeshIndex > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< dive::NodeMeshIndex > > * >(argp1);
  result = (bool)std_vector_Sl_std_vector_Sl_dive_NodeMeshIndex_Sg__Sg____bool__((std::vector< std::vector< dive::NodeMeshIndex > > const *)arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_arrNodeMeshIndices___len__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< dive::NodeMeshIndex > > *arg1 = (std::vector< std::vector< dive::NodeMeshIndex > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< std::vector< dive::NodeMeshIndex > >::size_type result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_dive__NodeMeshIndex_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "arrNodeMeshIndices___len__" "', argument " "1"" of type '" "std::vector< std::vector< dive::NodeMeshIndex > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< dive::NodeMeshIndex > > * >(argp1);
  result = std_vector_Sl_std_vector_Sl_dive_NodeMeshIndex_Sg__Sg____len__((std::vector< std::vector< dive::NodeMeshIndex > > const *)arg1);
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_arrNodeMeshIndices___getslice__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< dive::NodeMeshIndex > > *arg1 = (std::vector< std::vector< dive::NodeMeshIndex > > *) 0 ;
  std::vector< std::vector< dive::NodeMeshIndex > >::difference_type arg2 ;
  std::vector< std::vector< dive::NodeMeshIndex > >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  std::vector< std::vector< dive::NodeMeshIndex,std::allocator< dive::NodeMeshIndex > >,std::allocator< std::vector< dive::NodeMeshIndex,std::allocator< dive::NodeMeshIndex > > > > *result = 0 ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "arrNodeMeshIndices___getslice__", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_dive__NodeMeshIndex_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "arrNodeMeshIndices___getslice__" "', argument " "1"" of type '" "std::vector< std::vector< dive::NodeMeshIndex > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< dive::NodeMeshIndex > > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "arrNodeMeshIndices___getslice__" "', argument " "2"" of type '" "std::vector< std::vector< dive::NodeMeshIndex > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< std::vector< dive::NodeMeshIndex > >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "arrNodeMeshIndices___getslice__" "', argument " "3"" of type '" "std::vector< std::vector< dive::NodeMeshIndex > >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< std::vector< dive::NodeMeshIndex > >::difference_type >(val3);
  try {
    result = (std::vector< std::vector< dive::NodeMeshIndex,std::allocator< dive::NodeMeshIndex > >,std::allocator< std::vector< dive::NodeMeshIndex,std::allocator< dive::NodeMeshIndex > > > > *)std_vector_Sl_std_vector_Sl_dive_NodeMeshIndex_Sg__Sg____getslice__(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3));
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__vectorT_dive__NodeMeshIndex_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_arrNodeMeshIndices___setslice____SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< std::vector< dive::NodeMeshIndex > > *arg1 = (std::vector< std::vector< dive::NodeMeshIndex > > *) 0 ;
  std::vector< std::vector< dive::NodeMeshIndex > >::difference_type arg2 ;
  std::vector< std::vector< dive::NodeMeshIndex > >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_dive__NodeMeshIndex_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "arrNodeMeshIndices___setslice__" "', argument " "1"" of type '" "std::vector< std::vector< dive::NodeMeshIndex > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< dive::NodeMeshIndex > > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "arrNodeMeshIndices___setslice__" "', argument " "2"" of type '" "std::vector< std::vector< dive::NodeMeshIndex > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< std::vector< dive::NodeMeshIndex > >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "arrNodeMeshIndices___setslice__" "', argument " "3"" of type '" "std::vector< std::vector< dive::NodeMeshIndex > >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< std::vector< dive::NodeMeshIndex > >::difference_type >(val3);
  try {
    std_vector_Sl_std_vector_Sl_dive_NodeMeshIndex_Sg__Sg____setslice____SWIG_0(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3));
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_arrNodeMeshIndices___setslice____SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< std::vector< dive::NodeMeshIndex > > *arg1 = (std::vector< std::vector< dive::NodeMeshIndex > > *) 0 ;
  std::vector< std::vector< dive::NodeMeshIndex > >::difference_type arg2 ;
  std::vector< std::vector< dive::NodeMeshIndex > >::difference_type arg3 ;
  std::vector< std::vector< dive::NodeMeshIndex,std::allocator< dive::NodeMeshIndex > >,std::allocator< std::vector< dive::NodeMeshIndex,std::allocator< dive::NodeMeshIndex > > > > *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  
  (void)self;
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_dive__NodeMeshIndex_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "arrNodeMeshIndices___setslice__" "', argument " "1"" of type '" "std::vector< std::vector< dive::NodeMeshIndex > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< dive::NodeMeshIndex > > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "arrNodeMeshIndices___setslice__" "', argument " "2"" of type '" "std::vector< std::vector< dive::NodeMeshIndex > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< std::vector< dive::NodeMeshIndex > >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "arrNodeMeshIndices___setslice__" "', argument " "3"" of type '" "std::vector< std::vector< dive::NodeMeshIndex > >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< std::vector< dive::NodeMeshIndex > >::difference_type >(val3);
  {
    std::vector< std::vector< dive::NodeMeshIndex,std::allocator< dive::NodeMeshIndex > >,std::allocator< std::vector< dive::NodeMeshIndex,std::allocator< dive::NodeMeshIndex > > > > *ptr = (std::vector< std::vector< dive::NodeMeshIndex,std::allocator< dive::NodeMeshIndex > >,std::allocator< std::vector< dive::NodeMeshIndex,std::allocator< dive::NodeMeshIndex > > > > *)0;
    res4 = swig::asptr(swig_obj[3], &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "arrNodeMeshIndices___setslice__" "', argument " "4"" of type '" "std::vector< std::vector< dive::NodeMeshIndex,std::allocator< dive::NodeMeshIndex > >,std::allocator< std::vector< dive::NodeMeshIndex,std::allocator< dive::NodeMeshIndex > > > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "arrNodeMeshIndices___setslice__" "', argument " "4"" of type '" "std::vector< std::vector< dive::NodeMeshIndex,std::allocator< dive::NodeMeshIndex > >,std::allocator< std::vector< dive::NodeMeshIndex,std::allocator< dive::NodeMeshIndex > > > > const &""'"); 
    }
    arg4 = ptr;
  }
  try {
    std_vector_Sl_std_vector_Sl_dive_NodeMeshIndex_Sg__Sg____setslice____SWIG_1(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3),(std::vector< std::vector< dive::NodeMeshIndex,std::allocator< dive::NodeMeshIndex > >,std::allocator< std::vector< dive::NodeMeshIndex,std::allocator< dive::NodeMeshIndex > > > > const &)*arg4);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_arrNodeMeshIndices___setslice__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "arrNodeMeshIndices___setslice__", 0, 4, argv))) SWIG_fail;
  --argc;
  if (argc == 3) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< std::vector< dive::NodeMeshIndex,std::allocator< dive::NodeMeshIndex > >,std::allocator< std::vector< dive::NodeMeshIndex,std::allocator< dive::NodeMeshIndex > > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_ptrdiff_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_arrNodeMeshIndices___setslice____SWIG_0(self, argc, argv);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< std::vector< dive::NodeMeshIndex,std::allocator< dive::NodeMeshIndex > >,std::allocator< std::vector< dive::NodeMeshIndex,std::allocator< dive::NodeMeshIndex > > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_ptrdiff_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = swig::asptr(argv[3], (std::vector< std::vector< dive::NodeMeshIndex,std::allocator< dive::NodeMeshIndex > >,std::allocator< std::vector< dive::NodeMeshIndex,std::allocator< dive::NodeMeshIndex > > > >**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_arrNodeMeshIndices___setslice____SWIG_1(self, argc, argv);
          }
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'arrNodeMeshIndices___setslice__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< std::vector< dive::NodeMeshIndex > >::__setslice__(std::vector< std::vector< dive::NodeMeshIndex > >::difference_type,std::vector< std::vector< dive::NodeMeshIndex > >::difference_type)\n"
    "    std::vector< std::vector< dive::NodeMeshIndex > >::__setslice__(std::vector< std::vector< dive::NodeMeshIndex > >::difference_type,std::vector< std::vector< dive::NodeMeshIndex > >::difference_type,std::vector< std::vector< dive::NodeMeshIndex,std::allocator< dive::NodeMeshIndex > >,std::allocator< std::vector< dive::NodeMeshIndex,std::allocator< dive::NodeMeshIndex > > > > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_arrNodeMeshIndices___delslice__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< dive::NodeMeshIndex > > *arg1 = (std::vector< std::vector< dive::NodeMeshIndex > > *) 0 ;
  std::vector< std::vector< dive::NodeMeshIndex > >::difference_type arg2 ;
  std::vector< std::vector< dive::NodeMeshIndex > >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "arrNodeMeshIndices___delslice__", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_dive__NodeMeshIndex_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "arrNodeMeshIndices___delslice__" "', argument " "1"" of type '" "std::vector< std::vector< dive::NodeMeshIndex > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< dive::NodeMeshIndex > > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "arrNodeMeshIndices___delslice__" "', argument " "2"" of type '" "std::vector< std::vector< dive::NodeMeshIndex > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< std::vector< dive::NodeMeshIndex > >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "arrNodeMeshIndices___delslice__" "', argument " "3"" of type '" "std::vector< std::vector< dive::NodeMeshIndex > >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< std::vector< dive::NodeMeshIndex > >::difference_type >(val3);
  try {
    std_vector_Sl_std_vector_Sl_dive_NodeMeshIndex_Sg__Sg____delslice__(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3));
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_arrNodeMeshIndices___delitem____SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< std::vector< dive::NodeMeshIndex > > *arg1 = (std::vector< std::vector< dive::NodeMeshIndex > > *) 0 ;
  std::vector< std::vector< dive::NodeMeshIndex > >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_dive__NodeMeshIndex_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "arrNodeMeshIndices___delitem__" "', argument " "1"" of type '" "std::vector< std::vector< dive::NodeMeshIndex > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< dive::NodeMeshIndex > > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "arrNodeMeshIndices___delitem__" "', argument " "2"" of type '" "std::vector< std::vector< dive::NodeMeshIndex > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< std::vector< dive::NodeMeshIndex > >::difference_type >(val2);
  try {
    std_vector_Sl_std_vector_Sl_dive_NodeMeshIndex_Sg__Sg____delitem____SWIG_0(arg1,SWIG_STD_MOVE(arg2));
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_arrNodeMeshIndices___getitem____SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< std::vector< dive::NodeMeshIndex > > *arg1 = (std::vector< std::vector< dive::NodeMeshIndex > > *) 0 ;
  SWIGPY_SLICEOBJECT *arg2 = (SWIGPY_SLICEOBJECT *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< std::vector< dive::NodeMeshIndex,std::allocator< dive::NodeMeshIndex > >,std::allocator< std::vector< dive::NodeMeshIndex,std::allocator< dive::NodeMeshIndex > > > > *result = 0 ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_dive__NodeMeshIndex_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "arrNodeMeshIndices___getitem__" "', argument " "1"" of type '" "std::vector< std::vector< dive::NodeMeshIndex > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< dive::NodeMeshIndex > > * >(argp1);
  {
    if (!PySlice_Check(swig_obj[1])) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "arrNodeMeshIndices___getitem__" "', argument " "2"" of type '" "SWIGPY_SLICEOBJECT *""'");
    }
    arg2 = (SWIGPY_SLICEOBJECT *) swig_obj[1];
  }
  try {
    result = (std::vector< std::vector< dive::NodeMeshIndex,std::allocator< dive::NodeMeshIndex > >,std::allocator< std::vector< dive::NodeMeshIndex,std::allocator< dive::NodeMeshIndex > > > > *)std_vector_Sl_std_vector_Sl_dive_NodeMeshIndex_Sg__Sg____getitem____SWIG_0(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__vectorT_dive__NodeMeshIndex_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_arrNodeMeshIndices___setitem____SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< std::vector< dive::NodeMeshIndex > > *arg1 = (std::vector< std::vector< dive::NodeMeshIndex > > *) 0 ;
  SWIGPY_SLICEOBJECT *arg2 = (SWIGPY_SLICEOBJECT *) 0 ;
  std::vector< std::vector< dive::NodeMeshIndex,std::allocator< dive::NodeMeshIndex > >,std::allocator< std::vector< dive::NodeMeshIndex,std::allocator< dive::NodeMeshIndex > > > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_dive__NodeMeshIndex_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "arrNodeMeshIndices___setitem__" "', argument " "1"" of type '" "std::vector< std::vector< dive::NodeMeshIndex > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< dive::NodeMeshIndex > > * >(argp1);
  {
    if (!PySlice_Check(swig_obj[1])) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "arrNodeMeshIndices___setitem__" "', argument " "2"" of type '" "SWIGPY_SLICEOBJECT *""'");
    }
    arg2 = (SWIGPY_SLICEOBJECT *) swig_obj[1];
  }
  {
    std::vector< std::vector< dive::NodeMeshIndex,std::allocator< dive::NodeMeshIndex > >,std::allocator< std::vector< dive::NodeMeshIndex,std::allocator< dive::NodeMeshIndex > > > > *ptr = (std::vector< std::vector< dive::NodeMeshIndex,std::allocator< dive::NodeMeshIndex > >,std::allocator< std::vector< dive::NodeMeshIndex,std::allocator< dive::NodeMeshIndex > > > > *)0;
    res3 = swig::asptr(swig_obj[2], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "arrNodeMeshIndices___setitem__" "', argument " "3"" of type '" "std::vector< std::vector< dive::NodeMeshIndex,std::allocator< dive::NodeMeshIndex > >,std::allocator< std::vector< dive::NodeMeshIndex,std::allocator< dive::NodeMeshIndex > > > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "arrNodeMeshIndices___setitem__" "', argument " "3"" of type '" "std::vector< std::vector< dive::NodeMeshIndex,std::allocator< dive::NodeMeshIndex > >,std::allocator< std::vector< dive::NodeMeshIndex,std::allocator< dive::NodeMeshIndex > > > > const &""'"); 
    }
    arg3 = ptr;
  }
  try {
    std_vector_Sl_std_vector_Sl_dive_NodeMeshIndex_Sg__Sg____setitem____SWIG_0(arg1,arg2,(std::vector< std::vector< dive::NodeMeshIndex,std::allocator< dive::NodeMeshIndex > >,std::allocator< std::vector< dive::NodeMeshIndex,std::allocator< dive::NodeMeshIndex > > > > const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_arrNodeMeshIndices___setitem____SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< std::vector< dive::NodeMeshIndex > > *arg1 = (std::vector< std::vector< dive::NodeMeshIndex > > *) 0 ;
  SWIGPY_SLICEOBJECT *arg2 = (SWIGPY_SLICEOBJECT *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_dive__NodeMeshIndex_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "arrNodeMeshIndices___setitem__" "', argument " "1"" of type '" "std::vector< std::vector< dive::NodeMeshIndex > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< dive::NodeMeshIndex > > * >(argp1);
  {
    if (!PySlice_Check(swig_obj[1])) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "arrNodeMeshIndices___setitem__" "', argument " "2"" of type '" "SWIGPY_SLICEOBJECT *""'");
    }
    arg2 = (SWIGPY_SLICEOBJECT *) swig_obj[1];
  }
  try {
    std_vector_Sl_std_vector_Sl_dive_NodeMeshIndex_Sg__Sg____setitem____SWIG_1(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_arrNodeMeshIndices___delitem____SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< std::vector< dive::NodeMeshIndex > > *arg1 = (std::vector< std::vector< dive::NodeMeshIndex > > *) 0 ;
  SWIGPY_SLICEOBJECT *arg2 = (SWIGPY_SLICEOBJECT *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_dive__NodeMeshIndex_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "arrNodeMeshIndices___delitem__" "', argument " "1"" of type '" "std::vector< std::vector< dive::NodeMeshIndex > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< dive::NodeMeshIndex > > * >(argp1);
  {
    if (!PySlice_Check(swig_obj[1])) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "arrNodeMeshIndices___delitem__" "', argument " "2"" of type '" "SWIGPY_SLICEOBJECT *""'");
    }
    arg2 = (SWIGPY_SLICEOBJECT *) swig_obj[1];
  }
  try {
    std_vector_Sl_std_vector_Sl_dive_NodeMeshIndex_Sg__Sg____delitem____SWIG_1(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_arrNodeMeshIndices___delitem__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "arrNodeMeshIndices___delitem__", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< std::vector< dive::NodeMeshIndex,std::allocator< dive::NodeMeshIndex > >,std::allocator< std::vector< dive::NodeMeshIndex,std::allocator< dive::NodeMeshIndex > > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_arrNodeMeshIndices___delitem____SWIG_1(self, argc, argv);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< std::vector< dive::NodeMeshIndex,std::allocator< dive::NodeMeshIndex > >,std::allocator< std::vector< dive::NodeMeshIndex,std::allocator< dive::NodeMeshIndex > > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_arrNodeMeshIndices___delitem____SWIG_0(self, argc, argv);
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'arrNodeMeshIndices___delitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< std::vector< dive::NodeMeshIndex > >::__delitem__(std::vector< std::vector< dive::NodeMeshIndex > >::difference_type)\n"
    "    std::vector< std::vector< dive::NodeMeshIndex > >::__delitem__(SWIGPY_SLICEOBJECT *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_arrNodeMeshIndices___getitem____SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< std::vector< dive::NodeMeshIndex > > *arg1 = (std::vector< std::vector< dive::NodeMeshIndex > > *) 0 ;
  std::vector< std::vector< dive::NodeMeshIndex > >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  std::vector< std::vector< dive::NodeMeshIndex > >::value_type *result = 0 ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_dive__NodeMeshIndex_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "arrNodeMeshIndices___getitem__" "', argument " "1"" of type '" "std::vector< std::vector< dive::NodeMeshIndex > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< dive::NodeMeshIndex > > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "arrNodeMeshIndices___getitem__" "', argument " "2"" of type '" "std::vector< std::vector< dive::NodeMeshIndex > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< std::vector< dive::NodeMeshIndex > >::difference_type >(val2);
  try {
    result = (std::vector< std::vector< dive::NodeMeshIndex > >::value_type *) &std_vector_Sl_std_vector_Sl_dive_NodeMeshIndex_Sg__Sg____getitem____SWIG_1((std::vector< std::vector< dive::NodeMeshIndex > > const *)arg1,SWIG_STD_MOVE(arg2));
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  resultobj = swig::from(static_cast< std::vector< dive::NodeMeshIndex,std::allocator< dive::NodeMeshIndex > > >(*result));
  (void)swig::container_owner<swig::traits<std::vector< std::vector< dive::NodeMeshIndex > >::value_type>::category>::back_reference(resultobj, swig_obj[0]);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_arrNodeMeshIndices___getitem__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "arrNodeMeshIndices___getitem__", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< std::vector< dive::NodeMeshIndex,std::allocator< dive::NodeMeshIndex > >,std::allocator< std::vector< dive::NodeMeshIndex,std::allocator< dive::NodeMeshIndex > > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_arrNodeMeshIndices___getitem____SWIG_0(self, argc, argv);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< std::vector< dive::NodeMeshIndex,std::allocator< dive::NodeMeshIndex > >,std::allocator< std::vector< dive::NodeMeshIndex,std::allocator< dive::NodeMeshIndex > > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_arrNodeMeshIndices___getitem____SWIG_1(self, argc, argv);
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'arrNodeMeshIndices___getitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< std::vector< dive::NodeMeshIndex > >::__getitem__(SWIGPY_SLICEOBJECT *)\n"
    "    std::vector< std::vector< dive::NodeMeshIndex > >::__getitem__(std::vector< std::vector< dive::NodeMeshIndex > >::difference_type) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_arrNodeMeshIndices___setitem____SWIG_2(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< std::vector< dive::NodeMeshIndex > > *arg1 = (std::vector< std::vector< dive::NodeMeshIndex > > *) 0 ;
  std::vector< std::vector< dive::NodeMeshIndex > >::difference_type arg2 ;
  std::vector< std::vector< dive::NodeMeshIndex > >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_dive__NodeMeshIndex_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "arrNodeMeshIndices___setitem__" "', argument " "1"" of type '" "std::vector< std::vector< dive::NodeMeshIndex > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< dive::NodeMeshIndex > > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "arrNodeMeshIndices___setitem__" "', argument " "2"" of type '" "std::vector< std::vector< dive::NodeMeshIndex > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< std::vector< dive::NodeMeshIndex > >::difference_type >(val2);
  {
    std::vector< dive::NodeMeshIndex,std::allocator< dive::NodeMeshIndex > > *ptr = (std::vector< dive::NodeMeshIndex,std::allocator< dive::NodeMeshIndex > > *)0;
    res3 = swig::asptr(swig_obj[2], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "arrNodeMeshIndices___setitem__" "', argument " "3"" of type '" "std::vector< std::vector< dive::NodeMeshIndex > >::value_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "arrNodeMeshIndices___setitem__" "', argument " "3"" of type '" "std::vector< std::vector< dive::NodeMeshIndex > >::value_type const &""'"); 
    }
    arg3 = ptr;
  }
  try {
    std_vector_Sl_std_vector_Sl_dive_NodeMeshIndex_Sg__Sg____setitem____SWIG_2(arg1,SWIG_STD_MOVE(arg2),(std::vector< dive::NodeMeshIndex,std::allocator< dive::NodeMeshIndex > > const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_arrNodeMeshIndices___setitem__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "arrNodeMeshIndices___setitem__", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< std::vector< dive::NodeMeshIndex,std::allocator< dive::NodeMeshIndex > >,std::allocator< std::vector< dive::NodeMeshIndex,std::allocator< dive::NodeMeshIndex > > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_arrNodeMeshIndices___setitem____SWIG_1(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< std::vector< dive::NodeMeshIndex,std::allocator< dive::NodeMeshIndex > >,std::allocator< std::vector< dive::NodeMeshIndex,std::allocator< dive::NodeMeshIndex > > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        int res = swig::asptr(argv[2], (std::vector< std::vector< dive::NodeMeshIndex,std::allocator< dive::NodeMeshIndex > >,std::allocator< std::vector< dive::NodeMeshIndex,std::allocator< dive::NodeMeshIndex > > > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_arrNodeMeshIndices___setitem____SWIG_0(self, argc, argv);
        }
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< std::vector< dive::NodeMeshIndex,std::allocator< dive::NodeMeshIndex > >,std::allocator< std::vector< dive::NodeMeshIndex,std::allocator< dive::NodeMeshIndex > > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = swig::asptr(argv[2], (std::vector< dive::NodeMeshIndex,std::allocator< dive::NodeMeshIndex > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_arrNodeMeshIndices___setitem____SWIG_2(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'arrNodeMeshIndices___setitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< std::vector< dive::NodeMeshIndex > >::__setitem__(SWIGPY_SLICEOBJECT *,std::vector< std::vector< dive::NodeMeshIndex,std::allocator< dive::NodeMeshIndex > >,std::allocator< std::vector< dive::NodeMeshIndex,std::allocator< dive::NodeMeshIndex > > > > const &)\n"
    "    std::vector< std::vector< dive::NodeMeshIndex > >::__setitem__(SWIGPY_SLICEOBJECT *)\n"
    "    std::vector< std::vector< dive::NodeMeshIndex > >::__setitem__(std::vector< std::vector< dive::NodeMeshIndex > >::difference_type,std::vector< std::vector< dive::NodeMeshIndex > >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_arrNodeMeshIndices_pop(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< dive::NodeMeshIndex > > *arg1 = (std::vector< std::vector< dive::NodeMeshIndex > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< std::vector< dive::NodeMeshIndex > >::value_type result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_dive__NodeMeshIndex_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "arrNodeMeshIndices_pop" "', argument " "1"" of type '" "std::vector< std::vector< dive::NodeMeshIndex > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< dive::NodeMeshIndex > > * >(argp1);
  try {
    result = std_vector_Sl_std_vector_Sl_dive_NodeMeshIndex_Sg__Sg__pop(arg1);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  resultobj = swig::from(static_cast< std::vector< dive::NodeMeshIndex,std::allocator< dive::NodeMeshIndex > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_arrNodeMeshIndices_append(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< dive::NodeMeshIndex > > *arg1 = (std::vector< std::vector< dive::NodeMeshIndex > > *) 0 ;
  std::vector< std::vector< dive::NodeMeshIndex > >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "arrNodeMeshIndices_append", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_dive__NodeMeshIndex_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "arrNodeMeshIndices_append" "', argument " "1"" of type '" "std::vector< std::vector< dive::NodeMeshIndex > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< dive::NodeMeshIndex > > * >(argp1);
  {
    std::vector< dive::NodeMeshIndex,std::allocator< dive::NodeMeshIndex > > *ptr = (std::vector< dive::NodeMeshIndex,std::allocator< dive::NodeMeshIndex > > *)0;
    res2 = swig::asptr(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "arrNodeMeshIndices_append" "', argument " "2"" of type '" "std::vector< std::vector< dive::NodeMeshIndex > >::value_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "arrNodeMeshIndices_append" "', argument " "2"" of type '" "std::vector< std::vector< dive::NodeMeshIndex > >::value_type const &""'"); 
    }
    arg2 = ptr;
  }
  std_vector_Sl_std_vector_Sl_dive_NodeMeshIndex_Sg__Sg__append(arg1,(std::vector< dive::NodeMeshIndex,std::allocator< dive::NodeMeshIndex > > const &)*arg2);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_arrNodeMeshIndices__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **SWIGUNUSEDPARM(swig_obj)) {
  PyObject *resultobj = 0;
  std::vector< std::vector< dive::NodeMeshIndex > > *result = 0 ;
  
  (void)self;
  if ((nobjs < 0) || (nobjs > 0)) SWIG_fail;
  result = (std::vector< std::vector< dive::NodeMeshIndex > > *)new std::vector< std::vector< dive::NodeMeshIndex > >();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__vectorT_dive__NodeMeshIndex_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_arrNodeMeshIndices__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< std::vector< dive::NodeMeshIndex,std::allocator< dive::NodeMeshIndex > > > *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  std::vector< std::vector< dive::NodeMeshIndex > > *result = 0 ;
  
  (void)self;
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  {
    std::vector< std::vector< dive::NodeMeshIndex,std::allocator< dive::NodeMeshIndex > >,std::allocator< std::vector< dive::NodeMeshIndex,std::allocator< dive::NodeMeshIndex > > > > *ptr = (std::vector< std::vector< dive::NodeMeshIndex,std::allocator< dive::NodeMeshIndex > >,std::allocator< std::vector< dive::NodeMeshIndex,std::allocator< dive::NodeMeshIndex > > > > *)0;
    res1 = swig::asptr(swig_obj[0], &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_arrNodeMeshIndices" "', argument " "1"" of type '" "std::vector< std::vector< dive::NodeMeshIndex,std::allocator< dive::NodeMeshIndex > > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_arrNodeMeshIndices" "', argument " "1"" of type '" "std::vector< std::vector< dive::NodeMeshIndex,std::allocator< dive::NodeMeshIndex > > > const &""'"); 
    }
    arg1 = ptr;
  }
  result = (std::vector< std::vector< dive::NodeMeshIndex > > *)new std::vector< std::vector< dive::NodeMeshIndex > >((std::vector< std::vector< dive::NodeMeshIndex,std::allocator< dive::NodeMeshIndex > > > const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__vectorT_dive__NodeMeshIndex_t_t, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_arrNodeMeshIndices_empty(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< dive::NodeMeshIndex > > *arg1 = (std::vector< std::vector< dive::NodeMeshIndex > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_dive__NodeMeshIndex_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "arrNodeMeshIndices_empty" "', argument " "1"" of type '" "std::vector< std::vector< dive::NodeMeshIndex > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< dive::NodeMeshIndex > > * >(argp1);
  result = (bool)((std::vector< std::vector< dive::NodeMeshIndex > > const *)arg1)->empty();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_arrNodeMeshIndices_size(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< dive::NodeMeshIndex > > *arg1 = (std::vector< std::vector< dive::NodeMeshIndex > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< std::vector< dive::NodeMeshIndex > >::size_type result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_dive__NodeMeshIndex_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "arrNodeMeshIndices_size" "', argument " "1"" of type '" "std::vector< std::vector< dive::NodeMeshIndex > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< dive::NodeMeshIndex > > * >(argp1);
  result = ((std::vector< std::vector< dive::NodeMeshIndex > > const *)arg1)->size();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_arrNodeMeshIndices_swap(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< dive::NodeMeshIndex > > *arg1 = (std::vector< std::vector< dive::NodeMeshIndex > > *) 0 ;
  std::vector< std::vector< dive::NodeMeshIndex,std::allocator< dive::NodeMeshIndex > > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "arrNodeMeshIndices_swap", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_dive__NodeMeshIndex_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "arrNodeMeshIndices_swap" "', argument " "1"" of type '" "std::vector< std::vector< dive::NodeMeshIndex > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< dive::NodeMeshIndex > > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_std__vectorT_std__vectorT_dive__NodeMeshIndex_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "arrNodeMeshIndices_swap" "', argument " "2"" of type '" "std::vector< std::vector< dive::NodeMeshIndex,std::allocator< dive::NodeMeshIndex > > > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "arrNodeMeshIndices_swap" "', argument " "2"" of type '" "std::vector< std::vector< dive::NodeMeshIndex,std::allocator< dive::NodeMeshIndex > > > &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< std::vector< dive::NodeMeshIndex,std::allocator< dive::NodeMeshIndex > > > * >(argp2);
  (arg1)->swap(*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_arrNodeMeshIndices_begin(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< dive::NodeMeshIndex > > *arg1 = (std::vector< std::vector< dive::NodeMeshIndex > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< std::vector< dive::NodeMeshIndex > >::iterator result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_dive__NodeMeshIndex_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "arrNodeMeshIndices_begin" "', argument " "1"" of type '" "std::vector< std::vector< dive::NodeMeshIndex > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< dive::NodeMeshIndex > > * >(argp1);
  result = (arg1)->begin();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< std::vector< dive::NodeMeshIndex > >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_arrNodeMeshIndices_end(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< dive::NodeMeshIndex > > *arg1 = (std::vector< std::vector< dive::NodeMeshIndex > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< std::vector< dive::NodeMeshIndex > >::iterator result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_dive__NodeMeshIndex_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "arrNodeMeshIndices_end" "', argument " "1"" of type '" "std::vector< std::vector< dive::NodeMeshIndex > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< dive::NodeMeshIndex > > * >(argp1);
  result = (arg1)->end();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< std::vector< dive::NodeMeshIndex > >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_arrNodeMeshIndices_rbegin(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< dive::NodeMeshIndex > > *arg1 = (std::vector< std::vector< dive::NodeMeshIndex > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< std::vector< dive::NodeMeshIndex > >::reverse_iterator result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_dive__NodeMeshIndex_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "arrNodeMeshIndices_rbegin" "', argument " "1"" of type '" "std::vector< std::vector< dive::NodeMeshIndex > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< dive::NodeMeshIndex > > * >(argp1);
  result = (arg1)->rbegin();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< std::vector< dive::NodeMeshIndex > >::reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_arrNodeMeshIndices_rend(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< dive::NodeMeshIndex > > *arg1 = (std::vector< std::vector< dive::NodeMeshIndex > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< std::vector< dive::NodeMeshIndex > >::reverse_iterator result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_dive__NodeMeshIndex_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "arrNodeMeshIndices_rend" "', argument " "1"" of type '" "std::vector< std::vector< dive::NodeMeshIndex > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< dive::NodeMeshIndex > > * >(argp1);
  result = (arg1)->rend();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< std::vector< dive::NodeMeshIndex > >::reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_arrNodeMeshIndices_clear(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< dive::NodeMeshIndex > > *arg1 = (std::vector< std::vector< dive::NodeMeshIndex > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_dive__NodeMeshIndex_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "arrNodeMeshIndices_clear" "', argument " "1"" of type '" "std::vector< std::vector< dive::NodeMeshIndex > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< dive::NodeMeshIndex > > * >(argp1);
  (arg1)->clear();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_arrNodeMeshIndices_get_allocator(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< dive::NodeMeshIndex > > *arg1 = (std::vector< std::vector< dive::NodeMeshIndex > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  SwigValueWrapper< std::allocator< std::vector< dive::NodeMeshIndex,std::allocator< dive::NodeMeshIndex > > > > result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_dive__NodeMeshIndex_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "arrNodeMeshIndices_get_allocator" "', argument " "1"" of type '" "std::vector< std::vector< dive::NodeMeshIndex > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< dive::NodeMeshIndex > > * >(argp1);
  result = ((std::vector< std::vector< dive::NodeMeshIndex > > const *)arg1)->get_allocator();
  resultobj = SWIG_NewPointerObj((new std::vector< std::vector< dive::NodeMeshIndex > >::allocator_type(result)), SWIGTYPE_p_std__allocatorT_std__vectorT_dive__NodeMeshIndex_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_arrNodeMeshIndices__SWIG_2(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< std::vector< dive::NodeMeshIndex > >::size_type arg1 ;
  size_t val1 ;
  int ecode1 = 0 ;
  std::vector< std::vector< dive::NodeMeshIndex > > *result = 0 ;
  
  (void)self;
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_arrNodeMeshIndices" "', argument " "1"" of type '" "std::vector< std::vector< dive::NodeMeshIndex > >::size_type""'");
  } 
  arg1 = static_cast< std::vector< std::vector< dive::NodeMeshIndex > >::size_type >(val1);
  result = (std::vector< std::vector< dive::NodeMeshIndex > > *)new std::vector< std::vector< dive::NodeMeshIndex > >(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__vectorT_dive__NodeMeshIndex_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_arrNodeMeshIndices_pop_back(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< dive::NodeMeshIndex > > *arg1 = (std::vector< std::vector< dive::NodeMeshIndex > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_dive__NodeMeshIndex_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "arrNodeMeshIndices_pop_back" "', argument " "1"" of type '" "std::vector< std::vector< dive::NodeMeshIndex > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< dive::NodeMeshIndex > > * >(argp1);
  (arg1)->pop_back();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_arrNodeMeshIndices_resize__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< std::vector< dive::NodeMeshIndex > > *arg1 = (std::vector< std::vector< dive::NodeMeshIndex > > *) 0 ;
  std::vector< std::vector< dive::NodeMeshIndex > >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_dive__NodeMeshIndex_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "arrNodeMeshIndices_resize" "', argument " "1"" of type '" "std::vector< std::vector< dive::NodeMeshIndex > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< dive::NodeMeshIndex > > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "arrNodeMeshIndices_resize" "', argument " "2"" of type '" "std::vector< std::vector< dive::NodeMeshIndex > >::size_type""'");
  } 
  arg2 = static_cast< std::vector< std::vector< dive::NodeMeshIndex > >::size_type >(val2);
  (arg1)->resize(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_arrNodeMeshIndices_erase__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< std::vector< dive::NodeMeshIndex > > *arg1 = (std::vector< std::vector< dive::NodeMeshIndex > > *) 0 ;
  std::vector< std::vector< dive::NodeMeshIndex > >::iterator arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  std::vector< std::vector< dive::NodeMeshIndex > >::iterator result;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_dive__NodeMeshIndex_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "arrNodeMeshIndices_erase" "', argument " "1"" of type '" "std::vector< std::vector< dive::NodeMeshIndex > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< dive::NodeMeshIndex > > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "arrNodeMeshIndices_erase" "', argument " "2"" of type '" "std::vector< std::vector< dive::NodeMeshIndex > >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< std::vector< dive::NodeMeshIndex > >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< std::vector< dive::NodeMeshIndex > >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "arrNodeMeshIndices_erase" "', argument " "2"" of type '" "std::vector< std::vector< dive::NodeMeshIndex > >::iterator""'");
    }
  }
  result = std_vector_Sl_std_vector_Sl_dive_NodeMeshIndex_Sg__Sg__erase__SWIG_0(arg1,SWIG_STD_MOVE(arg2));
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< std::vector< dive::NodeMeshIndex > >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_arrNodeMeshIndices_erase__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< std::vector< dive::NodeMeshIndex > > *arg1 = (std::vector< std::vector< dive::NodeMeshIndex > > *) 0 ;
  std::vector< std::vector< dive::NodeMeshIndex > >::iterator arg2 ;
  std::vector< std::vector< dive::NodeMeshIndex > >::iterator arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  swig::SwigPyIterator *iter3 = 0 ;
  int res3 ;
  std::vector< std::vector< dive::NodeMeshIndex > >::iterator result;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_dive__NodeMeshIndex_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "arrNodeMeshIndices_erase" "', argument " "1"" of type '" "std::vector< std::vector< dive::NodeMeshIndex > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< dive::NodeMeshIndex > > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "arrNodeMeshIndices_erase" "', argument " "2"" of type '" "std::vector< std::vector< dive::NodeMeshIndex > >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< std::vector< dive::NodeMeshIndex > >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< std::vector< dive::NodeMeshIndex > >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "arrNodeMeshIndices_erase" "', argument " "2"" of type '" "std::vector< std::vector< dive::NodeMeshIndex > >::iterator""'");
    }
  }
  res3 = SWIG_ConvertPtr(swig_obj[2], SWIG_as_voidptrptr(&iter3), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res3) || !iter3) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "arrNodeMeshIndices_erase" "', argument " "3"" of type '" "std::vector< std::vector< dive::NodeMeshIndex > >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< std::vector< dive::NodeMeshIndex > >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< std::vector< dive::NodeMeshIndex > >::iterator > *>(iter3);
    if (iter_t) {
      arg3 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "arrNodeMeshIndices_erase" "', argument " "3"" of type '" "std::vector< std::vector< dive::NodeMeshIndex > >::iterator""'");
    }
  }
  result = std_vector_Sl_std_vector_Sl_dive_NodeMeshIndex_Sg__Sg__erase__SWIG_1(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3));
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< std::vector< dive::NodeMeshIndex > >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_arrNodeMeshIndices_erase(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "arrNodeMeshIndices_erase", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< std::vector< dive::NodeMeshIndex,std::allocator< dive::NodeMeshIndex > >,std::allocator< std::vector< dive::NodeMeshIndex,std::allocator< dive::NodeMeshIndex > > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< std::vector< dive::NodeMeshIndex > >::iterator > *>(iter) != 0));
      if (_v) {
        return _wrap_arrNodeMeshIndices_erase__SWIG_0(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< std::vector< dive::NodeMeshIndex,std::allocator< dive::NodeMeshIndex > >,std::allocator< std::vector< dive::NodeMeshIndex,std::allocator< dive::NodeMeshIndex > > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< std::vector< dive::NodeMeshIndex > >::iterator > *>(iter) != 0));
      if (_v) {
        swig::SwigPyIterator *iter = 0;
        int res = SWIG_ConvertPtr(argv[2], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
        _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< std::vector< dive::NodeMeshIndex > >::iterator > *>(iter) != 0));
        if (_v) {
          return _wrap_arrNodeMeshIndices_erase__SWIG_1(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'arrNodeMeshIndices_erase'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< std::vector< dive::NodeMeshIndex > >::erase(std::vector< std::vector< dive::NodeMeshIndex > >::iterator)\n"
    "    std::vector< std::vector< dive::NodeMeshIndex > >::erase(std::vector< std::vector< dive::NodeMeshIndex > >::iterator,std::vector< std::vector< dive::NodeMeshIndex > >::iterator)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_new_arrNodeMeshIndices__SWIG_3(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< std::vector< dive::NodeMeshIndex > >::size_type arg1 ;
  std::vector< std::vector< dive::NodeMeshIndex > >::value_type *arg2 = 0 ;
  size_t val1 ;
  int ecode1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  std::vector< std::vector< dive::NodeMeshIndex > > *result = 0 ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_arrNodeMeshIndices" "', argument " "1"" of type '" "std::vector< std::vector< dive::NodeMeshIndex > >::size_type""'");
  } 
  arg1 = static_cast< std::vector< std::vector< dive::NodeMeshIndex > >::size_type >(val1);
  {
    std::vector< dive::NodeMeshIndex,std::allocator< dive::NodeMeshIndex > > *ptr = (std::vector< dive::NodeMeshIndex,std::allocator< dive::NodeMeshIndex > > *)0;
    res2 = swig::asptr(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_arrNodeMeshIndices" "', argument " "2"" of type '" "std::vector< std::vector< dive::NodeMeshIndex > >::value_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_arrNodeMeshIndices" "', argument " "2"" of type '" "std::vector< std::vector< dive::NodeMeshIndex > >::value_type const &""'"); 
    }
    arg2 = ptr;
  }
  result = (std::vector< std::vector< dive::NodeMeshIndex > > *)new std::vector< std::vector< dive::NodeMeshIndex > >(arg1,(std::vector< std::vector< dive::NodeMeshIndex > >::value_type const &)*arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__vectorT_dive__NodeMeshIndex_t_t, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_arrNodeMeshIndices(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "new_arrNodeMeshIndices", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 0) {
    return _wrap_new_arrNodeMeshIndices__SWIG_0(self, argc, argv);
  }
  if (argc == 1) {
    int _v = 0;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_arrNodeMeshIndices__SWIG_2(self, argc, argv);
    }
  }
  if (argc == 1) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< std::vector< dive::NodeMeshIndex,std::allocator< dive::NodeMeshIndex > >,std::allocator< std::vector< dive::NodeMeshIndex,std::allocator< dive::NodeMeshIndex > > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_arrNodeMeshIndices__SWIG_1(self, argc, argv);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = swig::asptr(argv[1], (std::vector< dive::NodeMeshIndex,std::allocator< dive::NodeMeshIndex > >**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_arrNodeMeshIndices__SWIG_3(self, argc, argv);
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'new_arrNodeMeshIndices'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< std::vector< dive::NodeMeshIndex > >::vector()\n"
    "    std::vector< std::vector< dive::NodeMeshIndex > >::vector(std::vector< std::vector< dive::NodeMeshIndex,std::allocator< dive::NodeMeshIndex > > > const &)\n"
    "    std::vector< std::vector< dive::NodeMeshIndex > >::vector(std::vector< std::vector< dive::NodeMeshIndex > >::size_type)\n"
    "    std::vector< std::vector< dive::NodeMeshIndex > >::vector(std::vector< std::vector< dive::NodeMeshIndex > >::size_type,std::vector< std::vector< dive::NodeMeshIndex > >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_arrNodeMeshIndices_push_back(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< dive::NodeMeshIndex > > *arg1 = (std::vector< std::vector< dive::NodeMeshIndex > > *) 0 ;
  std::vector< std::vector< dive::NodeMeshIndex > >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "arrNodeMeshIndices_push_back", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_dive__NodeMeshIndex_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "arrNodeMeshIndices_push_back" "', argument " "1"" of type '" "std::vector< std::vector< dive::NodeMeshIndex > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< dive::NodeMeshIndex > > * >(argp1);
  {
    std::vector< dive::NodeMeshIndex,std::allocator< dive::NodeMeshIndex > > *ptr = (std::vector< dive::NodeMeshIndex,std::allocator< dive::NodeMeshIndex > > *)0;
    res2 = swig::asptr(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "arrNodeMeshIndices_push_back" "', argument " "2"" of type '" "std::vector< std::vector< dive::NodeMeshIndex > >::value_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "arrNodeMeshIndices_push_back" "', argument " "2"" of type '" "std::vector< std::vector< dive::NodeMeshIndex > >::value_type const &""'"); 
    }
    arg2 = ptr;
  }
  (arg1)->push_back((std::vector< std::vector< dive::NodeMeshIndex > >::value_type const &)*arg2);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_arrNodeMeshIndices_front(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< dive::NodeMeshIndex > > *arg1 = (std::vector< std::vector< dive::NodeMeshIndex > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< std::vector< dive::NodeMeshIndex > >::value_type *result = 0 ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_dive__NodeMeshIndex_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "arrNodeMeshIndices_front" "', argument " "1"" of type '" "std::vector< std::vector< dive::NodeMeshIndex > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< dive::NodeMeshIndex > > * >(argp1);
  result = (std::vector< std::vector< dive::NodeMeshIndex > >::value_type *) &((std::vector< std::vector< dive::NodeMeshIndex > > const *)arg1)->front();
  resultobj = swig::from(static_cast< std::vector< dive::NodeMeshIndex,std::allocator< dive::NodeMeshIndex > > >(*result));
  (void)swig::container_owner<swig::traits<std::vector< std::vector< dive::NodeMeshIndex > >::value_type>::category>::back_reference(resultobj, swig_obj[0]);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_arrNodeMeshIndices_back(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< dive::NodeMeshIndex > > *arg1 = (std::vector< std::vector< dive::NodeMeshIndex > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< std::vector< dive::NodeMeshIndex > >::value_type *result = 0 ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_dive__NodeMeshIndex_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "arrNodeMeshIndices_back" "', argument " "1"" of type '" "std::vector< std::vector< dive::NodeMeshIndex > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< dive::NodeMeshIndex > > * >(argp1);
  result = (std::vector< std::vector< dive::NodeMeshIndex > >::value_type *) &((std::vector< std::vector< dive::NodeMeshIndex > > const *)arg1)->back();
  resultobj = swig::from(static_cast< std::vector< dive::NodeMeshIndex,std::allocator< dive::NodeMeshIndex > > >(*result));
  (void)swig::container_owner<swig::traits<std::vector< std::vector< dive::NodeMeshIndex > >::value_type>::category>::back_reference(resultobj, swig_obj[0]);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_arrNodeMeshIndices_assign(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< dive::NodeMeshIndex > > *arg1 = (std::vector< std::vector< dive::NodeMeshIndex > > *) 0 ;
  std::vector< std::vector< dive::NodeMeshIndex > >::size_type arg2 ;
  std::vector< std::vector< dive::NodeMeshIndex > >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject *swig_obj[3] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "arrNodeMeshIndices_assign", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_dive__NodeMeshIndex_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "arrNodeMeshIndices_assign" "', argument " "1"" of type '" "std::vector< std::vector< dive::NodeMeshIndex > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< dive::NodeMeshIndex > > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "arrNodeMeshIndices_assign" "', argument " "2"" of type '" "std::vector< std::vector< dive::NodeMeshIndex > >::size_type""'");
  } 
  arg2 = static_cast< std::vector< std::vector< dive::NodeMeshIndex > >::size_type >(val2);
  {
    std::vector< dive::NodeMeshIndex,std::allocator< dive::NodeMeshIndex > > *ptr = (std::vector< dive::NodeMeshIndex,std::allocator< dive::NodeMeshIndex > > *)0;
    res3 = swig::asptr(swig_obj[2], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "arrNodeMeshIndices_assign" "', argument " "3"" of type '" "std::vector< std::vector< dive::NodeMeshIndex > >::value_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "arrNodeMeshIndices_assign" "', argument " "3"" of type '" "std::vector< std::vector< dive::NodeMeshIndex > >::value_type const &""'"); 
    }
    arg3 = ptr;
  }
  (arg1)->assign(arg2,(std::vector< std::vector< dive::NodeMeshIndex > >::value_type const &)*arg3);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_arrNodeMeshIndices_resize__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< std::vector< dive::NodeMeshIndex > > *arg1 = (std::vector< std::vector< dive::NodeMeshIndex > > *) 0 ;
  std::vector< std::vector< dive::NodeMeshIndex > >::size_type arg2 ;
  std::vector< std::vector< dive::NodeMeshIndex > >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_dive__NodeMeshIndex_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "arrNodeMeshIndices_resize" "', argument " "1"" of type '" "std::vector< std::vector< dive::NodeMeshIndex > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< dive::NodeMeshIndex > > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "arrNodeMeshIndices_resize" "', argument " "2"" of type '" "std::vector< std::vector< dive::NodeMeshIndex > >::size_type""'");
  } 
  arg2 = static_cast< std::vector< std::vector< dive::NodeMeshIndex > >::size_type >(val2);
  {
    std::vector< dive::NodeMeshIndex,std::allocator< dive::NodeMeshIndex > > *ptr = (std::vector< dive::NodeMeshIndex,std::allocator< dive::NodeMeshIndex > > *)0;
    res3 = swig::asptr(swig_obj[2], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "arrNodeMeshIndices_resize" "', argument " "3"" of type '" "std::vector< std::vector< dive::NodeMeshIndex > >::value_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "arrNodeMeshIndices_resize" "', argument " "3"" of type '" "std::vector< std::vector< dive::NodeMeshIndex > >::value_type const &""'"); 
    }
    arg3 = ptr;
  }
  (arg1)->resize(arg2,(std::vector< std::vector< dive::NodeMeshIndex > >::value_type const &)*arg3);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_arrNodeMeshIndices_resize(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "arrNodeMeshIndices_resize", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< std::vector< dive::NodeMeshIndex,std::allocator< dive::NodeMeshIndex > >,std::allocator< std::vector< dive::NodeMeshIndex,std::allocator< dive::NodeMeshIndex > > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_arrNodeMeshIndices_resize__SWIG_0(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< std::vector< dive::NodeMeshIndex,std::allocator< dive::NodeMeshIndex > >,std::allocator< std::vector< dive::NodeMeshIndex,std::allocator< dive::NodeMeshIndex > > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = swig::asptr(argv[2], (std::vector< dive::NodeMeshIndex,std::allocator< dive::NodeMeshIndex > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_arrNodeMeshIndices_resize__SWIG_1(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'arrNodeMeshIndices_resize'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< std::vector< dive::NodeMeshIndex > >::resize(std::vector< std::vector< dive::NodeMeshIndex > >::size_type)\n"
    "    std::vector< std::vector< dive::NodeMeshIndex > >::resize(std::vector< std::vector< dive::NodeMeshIndex > >::size_type,std::vector< std::vector< dive::NodeMeshIndex > >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_arrNodeMeshIndices_insert__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< std::vector< dive::NodeMeshIndex > > *arg1 = (std::vector< std::vector< dive::NodeMeshIndex > > *) 0 ;
  std::vector< std::vector< dive::NodeMeshIndex > >::iterator arg2 ;
  std::vector< std::vector< dive::NodeMeshIndex > >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  int res3 = SWIG_OLDOBJ ;
  std::vector< std::vector< dive::NodeMeshIndex > >::iterator result;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_dive__NodeMeshIndex_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "arrNodeMeshIndices_insert" "', argument " "1"" of type '" "std::vector< std::vector< dive::NodeMeshIndex > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< dive::NodeMeshIndex > > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "arrNodeMeshIndices_insert" "', argument " "2"" of type '" "std::vector< std::vector< dive::NodeMeshIndex > >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< std::vector< dive::NodeMeshIndex > >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< std::vector< dive::NodeMeshIndex > >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "arrNodeMeshIndices_insert" "', argument " "2"" of type '" "std::vector< std::vector< dive::NodeMeshIndex > >::iterator""'");
    }
  }
  {
    std::vector< dive::NodeMeshIndex,std::allocator< dive::NodeMeshIndex > > *ptr = (std::vector< dive::NodeMeshIndex,std::allocator< dive::NodeMeshIndex > > *)0;
    res3 = swig::asptr(swig_obj[2], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "arrNodeMeshIndices_insert" "', argument " "3"" of type '" "std::vector< std::vector< dive::NodeMeshIndex > >::value_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "arrNodeMeshIndices_insert" "', argument " "3"" of type '" "std::vector< std::vector< dive::NodeMeshIndex > >::value_type const &""'"); 
    }
    arg3 = ptr;
  }
  result = std_vector_Sl_std_vector_Sl_dive_NodeMeshIndex_Sg__Sg__insert__SWIG_0(arg1,SWIG_STD_MOVE(arg2),(std::vector< dive::NodeMeshIndex,std::allocator< dive::NodeMeshIndex > > const &)*arg3);
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< std::vector< dive::NodeMeshIndex > >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_arrNodeMeshIndices_insert__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< std::vector< dive::NodeMeshIndex > > *arg1 = (std::vector< std::vector< dive::NodeMeshIndex > > *) 0 ;
  std::vector< std::vector< dive::NodeMeshIndex > >::iterator arg2 ;
  std::vector< std::vector< dive::NodeMeshIndex > >::size_type arg3 ;
  std::vector< std::vector< dive::NodeMeshIndex > >::value_type *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  size_t val3 ;
  int ecode3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  
  (void)self;
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_dive__NodeMeshIndex_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "arrNodeMeshIndices_insert" "', argument " "1"" of type '" "std::vector< std::vector< dive::NodeMeshIndex > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< dive::NodeMeshIndex > > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "arrNodeMeshIndices_insert" "', argument " "2"" of type '" "std::vector< std::vector< dive::NodeMeshIndex > >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< std::vector< dive::NodeMeshIndex > >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< std::vector< dive::NodeMeshIndex > >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "arrNodeMeshIndices_insert" "', argument " "2"" of type '" "std::vector< std::vector< dive::NodeMeshIndex > >::iterator""'");
    }
  }
  ecode3 = SWIG_AsVal_size_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "arrNodeMeshIndices_insert" "', argument " "3"" of type '" "std::vector< std::vector< dive::NodeMeshIndex > >::size_type""'");
  } 
  arg3 = static_cast< std::vector< std::vector< dive::NodeMeshIndex > >::size_type >(val3);
  {
    std::vector< dive::NodeMeshIndex,std::allocator< dive::NodeMeshIndex > > *ptr = (std::vector< dive::NodeMeshIndex,std::allocator< dive::NodeMeshIndex > > *)0;
    res4 = swig::asptr(swig_obj[3], &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "arrNodeMeshIndices_insert" "', argument " "4"" of type '" "std::vector< std::vector< dive::NodeMeshIndex > >::value_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "arrNodeMeshIndices_insert" "', argument " "4"" of type '" "std::vector< std::vector< dive::NodeMeshIndex > >::value_type const &""'"); 
    }
    arg4 = ptr;
  }
  std_vector_Sl_std_vector_Sl_dive_NodeMeshIndex_Sg__Sg__insert__SWIG_1(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3),(std::vector< dive::NodeMeshIndex,std::allocator< dive::NodeMeshIndex > > const &)*arg4);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_arrNodeMeshIndices_insert(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "arrNodeMeshIndices_insert", 0, 4, argv))) SWIG_fail;
  --argc;
  if (argc == 3) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< std::vector< dive::NodeMeshIndex,std::allocator< dive::NodeMeshIndex > >,std::allocator< std::vector< dive::NodeMeshIndex,std::allocator< dive::NodeMeshIndex > > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< std::vector< dive::NodeMeshIndex > >::iterator > *>(iter) != 0));
      if (_v) {
        int res = swig::asptr(argv[2], (std::vector< dive::NodeMeshIndex,std::allocator< dive::NodeMeshIndex > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_arrNodeMeshIndices_insert__SWIG_0(self, argc, argv);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< std::vector< dive::NodeMeshIndex,std::allocator< dive::NodeMeshIndex > >,std::allocator< std::vector< dive::NodeMeshIndex,std::allocator< dive::NodeMeshIndex > > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< std::vector< dive::NodeMeshIndex > >::iterator > *>(iter) != 0));
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = swig::asptr(argv[3], (std::vector< dive::NodeMeshIndex,std::allocator< dive::NodeMeshIndex > >**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_arrNodeMeshIndices_insert__SWIG_1(self, argc, argv);
          }
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'arrNodeMeshIndices_insert'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< std::vector< dive::NodeMeshIndex > >::insert(std::vector< std::vector< dive::NodeMeshIndex > >::iterator,std::vector< std::vector< dive::NodeMeshIndex > >::value_type const &)\n"
    "    std::vector< std::vector< dive::NodeMeshIndex > >::insert(std::vector< std::vector< dive::NodeMeshIndex > >::iterator,std::vector< std::vector< dive::NodeMeshIndex > >::size_type,std::vector< std::vector< dive::NodeMeshIndex > >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_arrNodeMeshIndices_reserve(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< dive::NodeMeshIndex > > *arg1 = (std::vector< std::vector< dive::NodeMeshIndex > > *) 0 ;
  std::vector< std::vector< dive::NodeMeshIndex > >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "arrNodeMeshIndices_reserve", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_dive__NodeMeshIndex_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "arrNodeMeshIndices_reserve" "', argument " "1"" of type '" "std::vector< std::vector< dive::NodeMeshIndex > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< dive::NodeMeshIndex > > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "arrNodeMeshIndices_reserve" "', argument " "2"" of type '" "std::vector< std::vector< dive::NodeMeshIndex > >::size_type""'");
  } 
  arg2 = static_cast< std::vector< std::vector< dive::NodeMeshIndex > >::size_type >(val2);
  (arg1)->reserve(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_arrNodeMeshIndices_capacity(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< dive::NodeMeshIndex > > *arg1 = (std::vector< std::vector< dive::NodeMeshIndex > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< std::vector< dive::NodeMeshIndex > >::size_type result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_dive__NodeMeshIndex_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "arrNodeMeshIndices_capacity" "', argument " "1"" of type '" "std::vector< std::vector< dive::NodeMeshIndex > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< dive::NodeMeshIndex > > * >(argp1);
  result = ((std::vector< std::vector< dive::NodeMeshIndex > > const *)arg1)->capacity();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_arrNodeMeshIndices___str__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< dive::NodeMeshIndex > > *arg1 = (std::vector< std::vector< dive::NodeMeshIndex > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  String result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_dive__NodeMeshIndex_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "arrNodeMeshIndices___str__" "', argument " "1"" of type '" "std::vector< std::vector< dive::NodeMeshIndex > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< dive::NodeMeshIndex > > * >(argp1);
  result = std_vector_Sl_std_vector_Sl_dive_NodeMeshIndex_Sg__Sg____str__((std::vector< std::vector< dive::NodeMeshIndex > > const *)arg1);
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_arrNodeMeshIndices(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< dive::NodeMeshIndex > > *arg1 = (std::vector< std::vector< dive::NodeMeshIndex > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_dive__NodeMeshIndex_t_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_arrNodeMeshIndices" "', argument " "1"" of type '" "std::vector< std::vector< dive::NodeMeshIndex > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< dive::NodeMeshIndex > > * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *arrNodeMeshIndices_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_std__vectorT_std__vectorT_dive__NodeMeshIndex_t_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *arrNodeMeshIndices_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_vecDirichletMeshIndices_iterator(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< dive::DirichletMeshIndex > *arg1 = (std::vector< dive::DirichletMeshIndex > *) 0 ;
  PyObject **arg2 = (PyObject **) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  swig::SwigPyIterator *result = 0 ;
  
  arg2 = &swig_obj[0];
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_dive__DirichletMeshIndex_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vecDirichletMeshIndices_iterator" "', argument " "1"" of type '" "std::vector< dive::DirichletMeshIndex > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< dive::DirichletMeshIndex > * >(argp1);
  result = (swig::SwigPyIterator *)std_vector_Sl_dive_DirichletMeshIndex_Sg__iterator(arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vecDirichletMeshIndices___nonzero__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< dive::DirichletMeshIndex > *arg1 = (std::vector< dive::DirichletMeshIndex > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_dive__DirichletMeshIndex_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vecDirichletMeshIndices___nonzero__" "', argument " "1"" of type '" "std::vector< dive::DirichletMeshIndex > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< dive::DirichletMeshIndex > * >(argp1);
  result = (bool)std_vector_Sl_dive_DirichletMeshIndex_Sg____nonzero__((std::vector< dive::DirichletMeshIndex > const *)arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vecDirichletMeshIndices___bool__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< dive::DirichletMeshIndex > *arg1 = (std::vector< dive::DirichletMeshIndex > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_dive__DirichletMeshIndex_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vecDirichletMeshIndices___bool__" "', argument " "1"" of type '" "std::vector< dive::DirichletMeshIndex > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< dive::DirichletMeshIndex > * >(argp1);
  result = (bool)std_vector_Sl_dive_DirichletMeshIndex_Sg____bool__((std::vector< dive::DirichletMeshIndex > const *)arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vecDirichletMeshIndices___len__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< dive::DirichletMeshIndex > *arg1 = (std::vector< dive::DirichletMeshIndex > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< dive::DirichletMeshIndex >::size_type result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_dive__DirichletMeshIndex_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vecDirichletMeshIndices___len__" "', argument " "1"" of type '" "std::vector< dive::DirichletMeshIndex > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< dive::DirichletMeshIndex > * >(argp1);
  result = std_vector_Sl_dive_DirichletMeshIndex_Sg____len__((std::vector< dive::DirichletMeshIndex > const *)arg1);
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vecDirichletMeshIndices___getslice__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< dive::DirichletMeshIndex > *arg1 = (std::vector< dive::DirichletMeshIndex > *) 0 ;
  std::vector< dive::DirichletMeshIndex >::difference_type arg2 ;
  std::vector< dive::DirichletMeshIndex >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  std::vector< dive::DirichletMeshIndex,std::allocator< dive::DirichletMeshIndex > > *result = 0 ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "vecDirichletMeshIndices___getslice__", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_dive__DirichletMeshIndex_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vecDirichletMeshIndices___getslice__" "', argument " "1"" of type '" "std::vector< dive::DirichletMeshIndex > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< dive::DirichletMeshIndex > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vecDirichletMeshIndices___getslice__" "', argument " "2"" of type '" "std::vector< dive::DirichletMeshIndex >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< dive::DirichletMeshIndex >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "vecDirichletMeshIndices___getslice__" "', argument " "3"" of type '" "std::vector< dive::DirichletMeshIndex >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< dive::DirichletMeshIndex >::difference_type >(val3);
  try {
    result = (std::vector< dive::DirichletMeshIndex,std::allocator< dive::DirichletMeshIndex > > *)std_vector_Sl_dive_DirichletMeshIndex_Sg____getslice__(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3));
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_dive__DirichletMeshIndex_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vecDirichletMeshIndices___setslice____SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< dive::DirichletMeshIndex > *arg1 = (std::vector< dive::DirichletMeshIndex > *) 0 ;
  std::vector< dive::DirichletMeshIndex >::difference_type arg2 ;
  std::vector< dive::DirichletMeshIndex >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_dive__DirichletMeshIndex_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vecDirichletMeshIndices___setslice__" "', argument " "1"" of type '" "std::vector< dive::DirichletMeshIndex > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< dive::DirichletMeshIndex > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vecDirichletMeshIndices___setslice__" "', argument " "2"" of type '" "std::vector< dive::DirichletMeshIndex >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< dive::DirichletMeshIndex >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "vecDirichletMeshIndices___setslice__" "', argument " "3"" of type '" "std::vector< dive::DirichletMeshIndex >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< dive::DirichletMeshIndex >::difference_type >(val3);
  try {
    std_vector_Sl_dive_DirichletMeshIndex_Sg____setslice____SWIG_0(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3));
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vecDirichletMeshIndices___setslice____SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< dive::DirichletMeshIndex > *arg1 = (std::vector< dive::DirichletMeshIndex > *) 0 ;
  std::vector< dive::DirichletMeshIndex >::difference_type arg2 ;
  std::vector< dive::DirichletMeshIndex >::difference_type arg3 ;
  std::vector< dive::DirichletMeshIndex,std::allocator< dive::DirichletMeshIndex > > *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  
  (void)self;
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_dive__DirichletMeshIndex_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vecDirichletMeshIndices___setslice__" "', argument " "1"" of type '" "std::vector< dive::DirichletMeshIndex > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< dive::DirichletMeshIndex > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vecDirichletMeshIndices___setslice__" "', argument " "2"" of type '" "std::vector< dive::DirichletMeshIndex >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< dive::DirichletMeshIndex >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "vecDirichletMeshIndices___setslice__" "', argument " "3"" of type '" "std::vector< dive::DirichletMeshIndex >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< dive::DirichletMeshIndex >::difference_type >(val3);
  {
    std::vector< dive::DirichletMeshIndex,std::allocator< dive::DirichletMeshIndex > > *ptr = (std::vector< dive::DirichletMeshIndex,std::allocator< dive::DirichletMeshIndex > > *)0;
    res4 = swig::asptr(swig_obj[3], &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "vecDirichletMeshIndices___setslice__" "', argument " "4"" of type '" "std::vector< dive::DirichletMeshIndex,std::allocator< dive::DirichletMeshIndex > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vecDirichletMeshIndices___setslice__" "', argument " "4"" of type '" "std::vector< dive::DirichletMeshIndex,std::allocator< dive::DirichletMeshIndex > > const &""'"); 
    }
    arg4 = ptr;
  }
  try {
    std_vector_Sl_dive_DirichletMeshIndex_Sg____setslice____SWIG_1(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3),(std::vector< dive::DirichletMeshIndex,std::allocator< dive::DirichletMeshIndex > > const &)*arg4);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_vecDirichletMeshIndices___setslice__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "vecDirichletMeshIndices___setslice__", 0, 4, argv))) SWIG_fail;
  --argc;
  if (argc == 3) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< dive::DirichletMeshIndex,std::allocator< dive::DirichletMeshIndex > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_ptrdiff_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_vecDirichletMeshIndices___setslice____SWIG_0(self, argc, argv);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< dive::DirichletMeshIndex,std::allocator< dive::DirichletMeshIndex > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_ptrdiff_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = swig::asptr(argv[3], (std::vector< dive::DirichletMeshIndex,std::allocator< dive::DirichletMeshIndex > >**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_vecDirichletMeshIndices___setslice____SWIG_1(self, argc, argv);
          }
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'vecDirichletMeshIndices___setslice__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< dive::DirichletMeshIndex >::__setslice__(std::vector< dive::DirichletMeshIndex >::difference_type,std::vector< dive::DirichletMeshIndex >::difference_type)\n"
    "    std::vector< dive::DirichletMeshIndex >::__setslice__(std::vector< dive::DirichletMeshIndex >::difference_type,std::vector< dive::DirichletMeshIndex >::difference_type,std::vector< dive::DirichletMeshIndex,std::allocator< dive::DirichletMeshIndex > > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_vecDirichletMeshIndices___delslice__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< dive::DirichletMeshIndex > *arg1 = (std::vector< dive::DirichletMeshIndex > *) 0 ;
  std::vector< dive::DirichletMeshIndex >::difference_type arg2 ;
  std::vector< dive::DirichletMeshIndex >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "vecDirichletMeshIndices___delslice__", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_dive__DirichletMeshIndex_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vecDirichletMeshIndices___delslice__" "', argument " "1"" of type '" "std::vector< dive::DirichletMeshIndex > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< dive::DirichletMeshIndex > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vecDirichletMeshIndices___delslice__" "', argument " "2"" of type '" "std::vector< dive::DirichletMeshIndex >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< dive::DirichletMeshIndex >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "vecDirichletMeshIndices___delslice__" "', argument " "3"" of type '" "std::vector< dive::DirichletMeshIndex >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< dive::DirichletMeshIndex >::difference_type >(val3);
  try {
    std_vector_Sl_dive_DirichletMeshIndex_Sg____delslice__(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3));
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vecDirichletMeshIndices___delitem____SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< dive::DirichletMeshIndex > *arg1 = (std::vector< dive::DirichletMeshIndex > *) 0 ;
  std::vector< dive::DirichletMeshIndex >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_dive__DirichletMeshIndex_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vecDirichletMeshIndices___delitem__" "', argument " "1"" of type '" "std::vector< dive::DirichletMeshIndex > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< dive::DirichletMeshIndex > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vecDirichletMeshIndices___delitem__" "', argument " "2"" of type '" "std::vector< dive::DirichletMeshIndex >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< dive::DirichletMeshIndex >::difference_type >(val2);
  try {
    std_vector_Sl_dive_DirichletMeshIndex_Sg____delitem____SWIG_0(arg1,SWIG_STD_MOVE(arg2));
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vecDirichletMeshIndices___getitem____SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< dive::DirichletMeshIndex > *arg1 = (std::vector< dive::DirichletMeshIndex > *) 0 ;
  SWIGPY_SLICEOBJECT *arg2 = (SWIGPY_SLICEOBJECT *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< dive::DirichletMeshIndex,std::allocator< dive::DirichletMeshIndex > > *result = 0 ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_dive__DirichletMeshIndex_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vecDirichletMeshIndices___getitem__" "', argument " "1"" of type '" "std::vector< dive::DirichletMeshIndex > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< dive::DirichletMeshIndex > * >(argp1);
  {
    if (!PySlice_Check(swig_obj[1])) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vecDirichletMeshIndices___getitem__" "', argument " "2"" of type '" "SWIGPY_SLICEOBJECT *""'");
    }
    arg2 = (SWIGPY_SLICEOBJECT *) swig_obj[1];
  }
  try {
    result = (std::vector< dive::DirichletMeshIndex,std::allocator< dive::DirichletMeshIndex > > *)std_vector_Sl_dive_DirichletMeshIndex_Sg____getitem____SWIG_0(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_dive__DirichletMeshIndex_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vecDirichletMeshIndices___setitem____SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< dive::DirichletMeshIndex > *arg1 = (std::vector< dive::DirichletMeshIndex > *) 0 ;
  SWIGPY_SLICEOBJECT *arg2 = (SWIGPY_SLICEOBJECT *) 0 ;
  std::vector< dive::DirichletMeshIndex,std::allocator< dive::DirichletMeshIndex > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_dive__DirichletMeshIndex_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vecDirichletMeshIndices___setitem__" "', argument " "1"" of type '" "std::vector< dive::DirichletMeshIndex > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< dive::DirichletMeshIndex > * >(argp1);
  {
    if (!PySlice_Check(swig_obj[1])) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vecDirichletMeshIndices___setitem__" "', argument " "2"" of type '" "SWIGPY_SLICEOBJECT *""'");
    }
    arg2 = (SWIGPY_SLICEOBJECT *) swig_obj[1];
  }
  {
    std::vector< dive::DirichletMeshIndex,std::allocator< dive::DirichletMeshIndex > > *ptr = (std::vector< dive::DirichletMeshIndex,std::allocator< dive::DirichletMeshIndex > > *)0;
    res3 = swig::asptr(swig_obj[2], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "vecDirichletMeshIndices___setitem__" "', argument " "3"" of type '" "std::vector< dive::DirichletMeshIndex,std::allocator< dive::DirichletMeshIndex > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vecDirichletMeshIndices___setitem__" "', argument " "3"" of type '" "std::vector< dive::DirichletMeshIndex,std::allocator< dive::DirichletMeshIndex > > const &""'"); 
    }
    arg3 = ptr;
  }
  try {
    std_vector_Sl_dive_DirichletMeshIndex_Sg____setitem____SWIG_0(arg1,arg2,(std::vector< dive::DirichletMeshIndex,std::allocator< dive::DirichletMeshIndex > > const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_vecDirichletMeshIndices___setitem____SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< dive::DirichletMeshIndex > *arg1 = (std::vector< dive::DirichletMeshIndex > *) 0 ;
  SWIGPY_SLICEOBJECT *arg2 = (SWIGPY_SLICEOBJECT *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_dive__DirichletMeshIndex_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vecDirichletMeshIndices___setitem__" "', argument " "1"" of type '" "std::vector< dive::DirichletMeshIndex > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< dive::DirichletMeshIndex > * >(argp1);
  {
    if (!PySlice_Check(swig_obj[1])) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vecDirichletMeshIndices___setitem__" "', argument " "2"" of type '" "SWIGPY_SLICEOBJECT *""'");
    }
    arg2 = (SWIGPY_SLICEOBJECT *) swig_obj[1];
  }
  try {
    std_vector_Sl_dive_DirichletMeshIndex_Sg____setitem____SWIG_1(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vecDirichletMeshIndices___delitem____SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< dive::DirichletMeshIndex > *arg1 = (std::vector< dive::DirichletMeshIndex > *) 0 ;
  SWIGPY_SLICEOBJECT *arg2 = (SWIGPY_SLICEOBJECT *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_dive__DirichletMeshIndex_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vecDirichletMeshIndices___delitem__" "', argument " "1"" of type '" "std::vector< dive::DirichletMeshIndex > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< dive::DirichletMeshIndex > * >(argp1);
  {
    if (!PySlice_Check(swig_obj[1])) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vecDirichletMeshIndices___delitem__" "', argument " "2"" of type '" "SWIGPY_SLICEOBJECT *""'");
    }
    arg2 = (SWIGPY_SLICEOBJECT *) swig_obj[1];
  }
  try {
    std_vector_Sl_dive_DirichletMeshIndex_Sg____delitem____SWIG_1(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vecDirichletMeshIndices___delitem__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "vecDirichletMeshIndices___delitem__", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< dive::DirichletMeshIndex,std::allocator< dive::DirichletMeshIndex > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_vecDirichletMeshIndices___delitem____SWIG_1(self, argc, argv);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< dive::DirichletMeshIndex,std::allocator< dive::DirichletMeshIndex > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_vecDirichletMeshIndices___delitem____SWIG_0(self, argc, argv);
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'vecDirichletMeshIndices___delitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< dive::DirichletMeshIndex >::__delitem__(std::vector< dive::DirichletMeshIndex >::difference_type)\n"
    "    std::vector< dive::DirichletMeshIndex >::__delitem__(SWIGPY_SLICEOBJECT *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_vecDirichletMeshIndices___getitem____SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< dive::DirichletMeshIndex > *arg1 = (std::vector< dive::DirichletMeshIndex > *) 0 ;
  std::vector< dive::DirichletMeshIndex >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  std::vector< dive::DirichletMeshIndex >::value_type *result = 0 ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_dive__DirichletMeshIndex_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vecDirichletMeshIndices___getitem__" "', argument " "1"" of type '" "std::vector< dive::DirichletMeshIndex > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< dive::DirichletMeshIndex > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vecDirichletMeshIndices___getitem__" "', argument " "2"" of type '" "std::vector< dive::DirichletMeshIndex >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< dive::DirichletMeshIndex >::difference_type >(val2);
  try {
    result = (std::vector< dive::DirichletMeshIndex >::value_type *) &std_vector_Sl_dive_DirichletMeshIndex_Sg____getitem____SWIG_1((std::vector< dive::DirichletMeshIndex > const *)arg1,SWIG_STD_MOVE(arg2));
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_dive__DirichletMeshIndex, 0 |  0 );
  (void)swig::container_owner<swig::traits<std::vector< dive::DirichletMeshIndex >::value_type>::category>::back_reference(resultobj, swig_obj[0]);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vecDirichletMeshIndices___getitem__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "vecDirichletMeshIndices___getitem__", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< dive::DirichletMeshIndex,std::allocator< dive::DirichletMeshIndex > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_vecDirichletMeshIndices___getitem____SWIG_0(self, argc, argv);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< dive::DirichletMeshIndex,std::allocator< dive::DirichletMeshIndex > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_vecDirichletMeshIndices___getitem____SWIG_1(self, argc, argv);
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'vecDirichletMeshIndices___getitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< dive::DirichletMeshIndex >::__getitem__(SWIGPY_SLICEOBJECT *)\n"
    "    std::vector< dive::DirichletMeshIndex >::__getitem__(std::vector< dive::DirichletMeshIndex >::difference_type) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_vecDirichletMeshIndices___setitem____SWIG_2(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< dive::DirichletMeshIndex > *arg1 = (std::vector< dive::DirichletMeshIndex > *) 0 ;
  std::vector< dive::DirichletMeshIndex >::difference_type arg2 ;
  std::vector< dive::DirichletMeshIndex >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_dive__DirichletMeshIndex_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vecDirichletMeshIndices___setitem__" "', argument " "1"" of type '" "std::vector< dive::DirichletMeshIndex > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< dive::DirichletMeshIndex > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vecDirichletMeshIndices___setitem__" "', argument " "2"" of type '" "std::vector< dive::DirichletMeshIndex >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< dive::DirichletMeshIndex >::difference_type >(val2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_dive__DirichletMeshIndex,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "vecDirichletMeshIndices___setitem__" "', argument " "3"" of type '" "std::vector< dive::DirichletMeshIndex >::value_type const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vecDirichletMeshIndices___setitem__" "', argument " "3"" of type '" "std::vector< dive::DirichletMeshIndex >::value_type const &""'"); 
  }
  arg3 = reinterpret_cast< std::vector< dive::DirichletMeshIndex >::value_type * >(argp3);
  try {
    std_vector_Sl_dive_DirichletMeshIndex_Sg____setitem____SWIG_2(arg1,SWIG_STD_MOVE(arg2),(dive::DirichletMeshIndex const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vecDirichletMeshIndices___setitem__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "vecDirichletMeshIndices___setitem__", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< dive::DirichletMeshIndex,std::allocator< dive::DirichletMeshIndex > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_vecDirichletMeshIndices___setitem____SWIG_1(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< dive::DirichletMeshIndex,std::allocator< dive::DirichletMeshIndex > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        int res = swig::asptr(argv[2], (std::vector< dive::DirichletMeshIndex,std::allocator< dive::DirichletMeshIndex > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_vecDirichletMeshIndices___setitem____SWIG_0(self, argc, argv);
        }
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< dive::DirichletMeshIndex,std::allocator< dive::DirichletMeshIndex > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_dive__DirichletMeshIndex, SWIG_POINTER_NO_NULL | 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_vecDirichletMeshIndices___setitem____SWIG_2(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'vecDirichletMeshIndices___setitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< dive::DirichletMeshIndex >::__setitem__(SWIGPY_SLICEOBJECT *,std::vector< dive::DirichletMeshIndex,std::allocator< dive::DirichletMeshIndex > > const &)\n"
    "    std::vector< dive::DirichletMeshIndex >::__setitem__(SWIGPY_SLICEOBJECT *)\n"
    "    std::vector< dive::DirichletMeshIndex >::__setitem__(std::vector< dive::DirichletMeshIndex >::difference_type,std::vector< dive::DirichletMeshIndex >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_vecDirichletMeshIndices_pop(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< dive::DirichletMeshIndex > *arg1 = (std::vector< dive::DirichletMeshIndex > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< dive::DirichletMeshIndex >::value_type result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_dive__DirichletMeshIndex_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vecDirichletMeshIndices_pop" "', argument " "1"" of type '" "std::vector< dive::DirichletMeshIndex > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< dive::DirichletMeshIndex > * >(argp1);
  try {
    result = std_vector_Sl_dive_DirichletMeshIndex_Sg__pop(arg1);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  resultobj = SWIG_NewPointerObj((new std::vector< dive::DirichletMeshIndex >::value_type(result)), SWIGTYPE_p_dive__DirichletMeshIndex, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vecDirichletMeshIndices_append(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< dive::DirichletMeshIndex > *arg1 = (std::vector< dive::DirichletMeshIndex > *) 0 ;
  std::vector< dive::DirichletMeshIndex >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "vecDirichletMeshIndices_append", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_dive__DirichletMeshIndex_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vecDirichletMeshIndices_append" "', argument " "1"" of type '" "std::vector< dive::DirichletMeshIndex > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< dive::DirichletMeshIndex > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_dive__DirichletMeshIndex,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "vecDirichletMeshIndices_append" "', argument " "2"" of type '" "std::vector< dive::DirichletMeshIndex >::value_type const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vecDirichletMeshIndices_append" "', argument " "2"" of type '" "std::vector< dive::DirichletMeshIndex >::value_type const &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< dive::DirichletMeshIndex >::value_type * >(argp2);
  std_vector_Sl_dive_DirichletMeshIndex_Sg__append(arg1,(dive::DirichletMeshIndex const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_vecDirichletMeshIndices__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **SWIGUNUSEDPARM(swig_obj)) {
  PyObject *resultobj = 0;
  std::vector< dive::DirichletMeshIndex > *result = 0 ;
  
  (void)self;
  if ((nobjs < 0) || (nobjs > 0)) SWIG_fail;
  result = (std::vector< dive::DirichletMeshIndex > *)new std::vector< dive::DirichletMeshIndex >();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_dive__DirichletMeshIndex_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_vecDirichletMeshIndices__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< dive::DirichletMeshIndex > *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  std::vector< dive::DirichletMeshIndex > *result = 0 ;
  
  (void)self;
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  {
    std::vector< dive::DirichletMeshIndex,std::allocator< dive::DirichletMeshIndex > > *ptr = (std::vector< dive::DirichletMeshIndex,std::allocator< dive::DirichletMeshIndex > > *)0;
    res1 = swig::asptr(swig_obj[0], &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_vecDirichletMeshIndices" "', argument " "1"" of type '" "std::vector< dive::DirichletMeshIndex > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_vecDirichletMeshIndices" "', argument " "1"" of type '" "std::vector< dive::DirichletMeshIndex > const &""'"); 
    }
    arg1 = ptr;
  }
  result = (std::vector< dive::DirichletMeshIndex > *)new std::vector< dive::DirichletMeshIndex >((std::vector< dive::DirichletMeshIndex > const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_dive__DirichletMeshIndex_t, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_vecDirichletMeshIndices_empty(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< dive::DirichletMeshIndex > *arg1 = (std::vector< dive::DirichletMeshIndex > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_dive__DirichletMeshIndex_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vecDirichletMeshIndices_empty" "', argument " "1"" of type '" "std::vector< dive::DirichletMeshIndex > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< dive::DirichletMeshIndex > * >(argp1);
  result = (bool)((std::vector< dive::DirichletMeshIndex > const *)arg1)->empty();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vecDirichletMeshIndices_size(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< dive::DirichletMeshIndex > *arg1 = (std::vector< dive::DirichletMeshIndex > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< dive::DirichletMeshIndex >::size_type result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_dive__DirichletMeshIndex_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vecDirichletMeshIndices_size" "', argument " "1"" of type '" "std::vector< dive::DirichletMeshIndex > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< dive::DirichletMeshIndex > * >(argp1);
  result = ((std::vector< dive::DirichletMeshIndex > const *)arg1)->size();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vecDirichletMeshIndices_swap(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< dive::DirichletMeshIndex > *arg1 = (std::vector< dive::DirichletMeshIndex > *) 0 ;
  std::vector< dive::DirichletMeshIndex > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "vecDirichletMeshIndices_swap", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_dive__DirichletMeshIndex_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vecDirichletMeshIndices_swap" "', argument " "1"" of type '" "std::vector< dive::DirichletMeshIndex > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< dive::DirichletMeshIndex > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_std__vectorT_dive__DirichletMeshIndex_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "vecDirichletMeshIndices_swap" "', argument " "2"" of type '" "std::vector< dive::DirichletMeshIndex > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vecDirichletMeshIndices_swap" "', argument " "2"" of type '" "std::vector< dive::DirichletMeshIndex > &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< dive::DirichletMeshIndex > * >(argp2);
  (arg1)->swap(*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vecDirichletMeshIndices_begin(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< dive::DirichletMeshIndex > *arg1 = (std::vector< dive::DirichletMeshIndex > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< dive::DirichletMeshIndex >::iterator result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_dive__DirichletMeshIndex_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vecDirichletMeshIndices_begin" "', argument " "1"" of type '" "std::vector< dive::DirichletMeshIndex > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< dive::DirichletMeshIndex > * >(argp1);
  result = (arg1)->begin();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< dive::DirichletMeshIndex >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vecDirichletMeshIndices_end(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< dive::DirichletMeshIndex > *arg1 = (std::vector< dive::DirichletMeshIndex > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< dive::DirichletMeshIndex >::iterator result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_dive__DirichletMeshIndex_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vecDirichletMeshIndices_end" "', argument " "1"" of type '" "std::vector< dive::DirichletMeshIndex > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< dive::DirichletMeshIndex > * >(argp1);
  result = (arg1)->end();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< dive::DirichletMeshIndex >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vecDirichletMeshIndices_rbegin(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< dive::DirichletMeshIndex > *arg1 = (std::vector< dive::DirichletMeshIndex > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< dive::DirichletMeshIndex >::reverse_iterator result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_dive__DirichletMeshIndex_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vecDirichletMeshIndices_rbegin" "', argument " "1"" of type '" "std::vector< dive::DirichletMeshIndex > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< dive::DirichletMeshIndex > * >(argp1);
  result = (arg1)->rbegin();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< dive::DirichletMeshIndex >::reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vecDirichletMeshIndices_rend(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< dive::DirichletMeshIndex > *arg1 = (std::vector< dive::DirichletMeshIndex > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< dive::DirichletMeshIndex >::reverse_iterator result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_dive__DirichletMeshIndex_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vecDirichletMeshIndices_rend" "', argument " "1"" of type '" "std::vector< dive::DirichletMeshIndex > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< dive::DirichletMeshIndex > * >(argp1);
  result = (arg1)->rend();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< dive::DirichletMeshIndex >::reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vecDirichletMeshIndices_clear(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< dive::DirichletMeshIndex > *arg1 = (std::vector< dive::DirichletMeshIndex > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_dive__DirichletMeshIndex_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vecDirichletMeshIndices_clear" "', argument " "1"" of type '" "std::vector< dive::DirichletMeshIndex > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< dive::DirichletMeshIndex > * >(argp1);
  (arg1)->clear();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vecDirichletMeshIndices_get_allocator(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< dive::DirichletMeshIndex > *arg1 = (std::vector< dive::DirichletMeshIndex > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  SwigValueWrapper< std::allocator< dive::DirichletMeshIndex > > result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_dive__DirichletMeshIndex_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vecDirichletMeshIndices_get_allocator" "', argument " "1"" of type '" "std::vector< dive::DirichletMeshIndex > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< dive::DirichletMeshIndex > * >(argp1);
  result = ((std::vector< dive::DirichletMeshIndex > const *)arg1)->get_allocator();
  resultobj = SWIG_NewPointerObj((new std::vector< dive::DirichletMeshIndex >::allocator_type(result)), SWIGTYPE_p_std__allocatorT_dive__DirichletMeshIndex_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_vecDirichletMeshIndices__SWIG_2(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< dive::DirichletMeshIndex >::size_type arg1 ;
  size_t val1 ;
  int ecode1 = 0 ;
  std::vector< dive::DirichletMeshIndex > *result = 0 ;
  
  (void)self;
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_vecDirichletMeshIndices" "', argument " "1"" of type '" "std::vector< dive::DirichletMeshIndex >::size_type""'");
  } 
  arg1 = static_cast< std::vector< dive::DirichletMeshIndex >::size_type >(val1);
  result = (std::vector< dive::DirichletMeshIndex > *)new std::vector< dive::DirichletMeshIndex >(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_dive__DirichletMeshIndex_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vecDirichletMeshIndices_pop_back(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< dive::DirichletMeshIndex > *arg1 = (std::vector< dive::DirichletMeshIndex > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_dive__DirichletMeshIndex_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vecDirichletMeshIndices_pop_back" "', argument " "1"" of type '" "std::vector< dive::DirichletMeshIndex > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< dive::DirichletMeshIndex > * >(argp1);
  (arg1)->pop_back();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vecDirichletMeshIndices_resize__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< dive::DirichletMeshIndex > *arg1 = (std::vector< dive::DirichletMeshIndex > *) 0 ;
  std::vector< dive::DirichletMeshIndex >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_dive__DirichletMeshIndex_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vecDirichletMeshIndices_resize" "', argument " "1"" of type '" "std::vector< dive::DirichletMeshIndex > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< dive::DirichletMeshIndex > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vecDirichletMeshIndices_resize" "', argument " "2"" of type '" "std::vector< dive::DirichletMeshIndex >::size_type""'");
  } 
  arg2 = static_cast< std::vector< dive::DirichletMeshIndex >::size_type >(val2);
  (arg1)->resize(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vecDirichletMeshIndices_erase__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< dive::DirichletMeshIndex > *arg1 = (std::vector< dive::DirichletMeshIndex > *) 0 ;
  std::vector< dive::DirichletMeshIndex >::iterator arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  std::vector< dive::DirichletMeshIndex >::iterator result;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_dive__DirichletMeshIndex_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vecDirichletMeshIndices_erase" "', argument " "1"" of type '" "std::vector< dive::DirichletMeshIndex > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< dive::DirichletMeshIndex > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vecDirichletMeshIndices_erase" "', argument " "2"" of type '" "std::vector< dive::DirichletMeshIndex >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< dive::DirichletMeshIndex >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< dive::DirichletMeshIndex >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vecDirichletMeshIndices_erase" "', argument " "2"" of type '" "std::vector< dive::DirichletMeshIndex >::iterator""'");
    }
  }
  result = std_vector_Sl_dive_DirichletMeshIndex_Sg__erase__SWIG_0(arg1,SWIG_STD_MOVE(arg2));
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< dive::DirichletMeshIndex >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vecDirichletMeshIndices_erase__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< dive::DirichletMeshIndex > *arg1 = (std::vector< dive::DirichletMeshIndex > *) 0 ;
  std::vector< dive::DirichletMeshIndex >::iterator arg2 ;
  std::vector< dive::DirichletMeshIndex >::iterator arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  swig::SwigPyIterator *iter3 = 0 ;
  int res3 ;
  std::vector< dive::DirichletMeshIndex >::iterator result;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_dive__DirichletMeshIndex_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vecDirichletMeshIndices_erase" "', argument " "1"" of type '" "std::vector< dive::DirichletMeshIndex > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< dive::DirichletMeshIndex > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vecDirichletMeshIndices_erase" "', argument " "2"" of type '" "std::vector< dive::DirichletMeshIndex >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< dive::DirichletMeshIndex >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< dive::DirichletMeshIndex >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vecDirichletMeshIndices_erase" "', argument " "2"" of type '" "std::vector< dive::DirichletMeshIndex >::iterator""'");
    }
  }
  res3 = SWIG_ConvertPtr(swig_obj[2], SWIG_as_voidptrptr(&iter3), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res3) || !iter3) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vecDirichletMeshIndices_erase" "', argument " "3"" of type '" "std::vector< dive::DirichletMeshIndex >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< dive::DirichletMeshIndex >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< dive::DirichletMeshIndex >::iterator > *>(iter3);
    if (iter_t) {
      arg3 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vecDirichletMeshIndices_erase" "', argument " "3"" of type '" "std::vector< dive::DirichletMeshIndex >::iterator""'");
    }
  }
  result = std_vector_Sl_dive_DirichletMeshIndex_Sg__erase__SWIG_1(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3));
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< dive::DirichletMeshIndex >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vecDirichletMeshIndices_erase(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "vecDirichletMeshIndices_erase", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< dive::DirichletMeshIndex,std::allocator< dive::DirichletMeshIndex > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< dive::DirichletMeshIndex >::iterator > *>(iter) != 0));
      if (_v) {
        return _wrap_vecDirichletMeshIndices_erase__SWIG_0(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< dive::DirichletMeshIndex,std::allocator< dive::DirichletMeshIndex > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< dive::DirichletMeshIndex >::iterator > *>(iter) != 0));
      if (_v) {
        swig::SwigPyIterator *iter = 0;
        int res = SWIG_ConvertPtr(argv[2], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
        _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< dive::DirichletMeshIndex >::iterator > *>(iter) != 0));
        if (_v) {
          return _wrap_vecDirichletMeshIndices_erase__SWIG_1(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'vecDirichletMeshIndices_erase'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< dive::DirichletMeshIndex >::erase(std::vector< dive::DirichletMeshIndex >::iterator)\n"
    "    std::vector< dive::DirichletMeshIndex >::erase(std::vector< dive::DirichletMeshIndex >::iterator,std::vector< dive::DirichletMeshIndex >::iterator)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_new_vecDirichletMeshIndices__SWIG_3(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< dive::DirichletMeshIndex >::size_type arg1 ;
  std::vector< dive::DirichletMeshIndex >::value_type *arg2 = 0 ;
  size_t val1 ;
  int ecode1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  std::vector< dive::DirichletMeshIndex > *result = 0 ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_vecDirichletMeshIndices" "', argument " "1"" of type '" "std::vector< dive::DirichletMeshIndex >::size_type""'");
  } 
  arg1 = static_cast< std::vector< dive::DirichletMeshIndex >::size_type >(val1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_dive__DirichletMeshIndex,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_vecDirichletMeshIndices" "', argument " "2"" of type '" "std::vector< dive::DirichletMeshIndex >::value_type const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_vecDirichletMeshIndices" "', argument " "2"" of type '" "std::vector< dive::DirichletMeshIndex >::value_type const &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< dive::DirichletMeshIndex >::value_type * >(argp2);
  result = (std::vector< dive::DirichletMeshIndex > *)new std::vector< dive::DirichletMeshIndex >(arg1,(std::vector< dive::DirichletMeshIndex >::value_type const &)*arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_dive__DirichletMeshIndex_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_vecDirichletMeshIndices(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "new_vecDirichletMeshIndices", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 0) {
    return _wrap_new_vecDirichletMeshIndices__SWIG_0(self, argc, argv);
  }
  if (argc == 1) {
    int _v = 0;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_vecDirichletMeshIndices__SWIG_2(self, argc, argv);
    }
  }
  if (argc == 1) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< dive::DirichletMeshIndex,std::allocator< dive::DirichletMeshIndex > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_vecDirichletMeshIndices__SWIG_1(self, argc, argv);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_dive__DirichletMeshIndex, SWIG_POINTER_NO_NULL | 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_vecDirichletMeshIndices__SWIG_3(self, argc, argv);
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'new_vecDirichletMeshIndices'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< dive::DirichletMeshIndex >::vector()\n"
    "    std::vector< dive::DirichletMeshIndex >::vector(std::vector< dive::DirichletMeshIndex > const &)\n"
    "    std::vector< dive::DirichletMeshIndex >::vector(std::vector< dive::DirichletMeshIndex >::size_type)\n"
    "    std::vector< dive::DirichletMeshIndex >::vector(std::vector< dive::DirichletMeshIndex >::size_type,std::vector< dive::DirichletMeshIndex >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_vecDirichletMeshIndices_push_back(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< dive::DirichletMeshIndex > *arg1 = (std::vector< dive::DirichletMeshIndex > *) 0 ;
  std::vector< dive::DirichletMeshIndex >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "vecDirichletMeshIndices_push_back", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_dive__DirichletMeshIndex_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vecDirichletMeshIndices_push_back" "', argument " "1"" of type '" "std::vector< dive::DirichletMeshIndex > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< dive::DirichletMeshIndex > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_dive__DirichletMeshIndex,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "vecDirichletMeshIndices_push_back" "', argument " "2"" of type '" "std::vector< dive::DirichletMeshIndex >::value_type const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vecDirichletMeshIndices_push_back" "', argument " "2"" of type '" "std::vector< dive::DirichletMeshIndex >::value_type const &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< dive::DirichletMeshIndex >::value_type * >(argp2);
  (arg1)->push_back((std::vector< dive::DirichletMeshIndex >::value_type const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vecDirichletMeshIndices_front(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< dive::DirichletMeshIndex > *arg1 = (std::vector< dive::DirichletMeshIndex > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< dive::DirichletMeshIndex >::value_type *result = 0 ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_dive__DirichletMeshIndex_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vecDirichletMeshIndices_front" "', argument " "1"" of type '" "std::vector< dive::DirichletMeshIndex > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< dive::DirichletMeshIndex > * >(argp1);
  result = (std::vector< dive::DirichletMeshIndex >::value_type *) &((std::vector< dive::DirichletMeshIndex > const *)arg1)->front();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_dive__DirichletMeshIndex, 0 |  0 );
  (void)swig::container_owner<swig::traits<std::vector< dive::DirichletMeshIndex >::value_type>::category>::back_reference(resultobj, swig_obj[0]);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vecDirichletMeshIndices_back(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< dive::DirichletMeshIndex > *arg1 = (std::vector< dive::DirichletMeshIndex > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< dive::DirichletMeshIndex >::value_type *result = 0 ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_dive__DirichletMeshIndex_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vecDirichletMeshIndices_back" "', argument " "1"" of type '" "std::vector< dive::DirichletMeshIndex > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< dive::DirichletMeshIndex > * >(argp1);
  result = (std::vector< dive::DirichletMeshIndex >::value_type *) &((std::vector< dive::DirichletMeshIndex > const *)arg1)->back();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_dive__DirichletMeshIndex, 0 |  0 );
  (void)swig::container_owner<swig::traits<std::vector< dive::DirichletMeshIndex >::value_type>::category>::back_reference(resultobj, swig_obj[0]);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vecDirichletMeshIndices_assign(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< dive::DirichletMeshIndex > *arg1 = (std::vector< dive::DirichletMeshIndex > *) 0 ;
  std::vector< dive::DirichletMeshIndex >::size_type arg2 ;
  std::vector< dive::DirichletMeshIndex >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject *swig_obj[3] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "vecDirichletMeshIndices_assign", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_dive__DirichletMeshIndex_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vecDirichletMeshIndices_assign" "', argument " "1"" of type '" "std::vector< dive::DirichletMeshIndex > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< dive::DirichletMeshIndex > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vecDirichletMeshIndices_assign" "', argument " "2"" of type '" "std::vector< dive::DirichletMeshIndex >::size_type""'");
  } 
  arg2 = static_cast< std::vector< dive::DirichletMeshIndex >::size_type >(val2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_dive__DirichletMeshIndex,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "vecDirichletMeshIndices_assign" "', argument " "3"" of type '" "std::vector< dive::DirichletMeshIndex >::value_type const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vecDirichletMeshIndices_assign" "', argument " "3"" of type '" "std::vector< dive::DirichletMeshIndex >::value_type const &""'"); 
  }
  arg3 = reinterpret_cast< std::vector< dive::DirichletMeshIndex >::value_type * >(argp3);
  (arg1)->assign(arg2,(std::vector< dive::DirichletMeshIndex >::value_type const &)*arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vecDirichletMeshIndices_resize__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< dive::DirichletMeshIndex > *arg1 = (std::vector< dive::DirichletMeshIndex > *) 0 ;
  std::vector< dive::DirichletMeshIndex >::size_type arg2 ;
  std::vector< dive::DirichletMeshIndex >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_dive__DirichletMeshIndex_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vecDirichletMeshIndices_resize" "', argument " "1"" of type '" "std::vector< dive::DirichletMeshIndex > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< dive::DirichletMeshIndex > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vecDirichletMeshIndices_resize" "', argument " "2"" of type '" "std::vector< dive::DirichletMeshIndex >::size_type""'");
  } 
  arg2 = static_cast< std::vector< dive::DirichletMeshIndex >::size_type >(val2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_dive__DirichletMeshIndex,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "vecDirichletMeshIndices_resize" "', argument " "3"" of type '" "std::vector< dive::DirichletMeshIndex >::value_type const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vecDirichletMeshIndices_resize" "', argument " "3"" of type '" "std::vector< dive::DirichletMeshIndex >::value_type const &""'"); 
  }
  arg3 = reinterpret_cast< std::vector< dive::DirichletMeshIndex >::value_type * >(argp3);
  (arg1)->resize(arg2,(std::vector< dive::DirichletMeshIndex >::value_type const &)*arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vecDirichletMeshIndices_resize(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "vecDirichletMeshIndices_resize", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< dive::DirichletMeshIndex,std::allocator< dive::DirichletMeshIndex > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_vecDirichletMeshIndices_resize__SWIG_0(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< dive::DirichletMeshIndex,std::allocator< dive::DirichletMeshIndex > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_dive__DirichletMeshIndex, SWIG_POINTER_NO_NULL | 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_vecDirichletMeshIndices_resize__SWIG_1(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'vecDirichletMeshIndices_resize'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< dive::DirichletMeshIndex >::resize(std::vector< dive::DirichletMeshIndex >::size_type)\n"
    "    std::vector< dive::DirichletMeshIndex >::resize(std::vector< dive::DirichletMeshIndex >::size_type,std::vector< dive::DirichletMeshIndex >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_vecDirichletMeshIndices_insert__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< dive::DirichletMeshIndex > *arg1 = (std::vector< dive::DirichletMeshIndex > *) 0 ;
  std::vector< dive::DirichletMeshIndex >::iterator arg2 ;
  std::vector< dive::DirichletMeshIndex >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  std::vector< dive::DirichletMeshIndex >::iterator result;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_dive__DirichletMeshIndex_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vecDirichletMeshIndices_insert" "', argument " "1"" of type '" "std::vector< dive::DirichletMeshIndex > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< dive::DirichletMeshIndex > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vecDirichletMeshIndices_insert" "', argument " "2"" of type '" "std::vector< dive::DirichletMeshIndex >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< dive::DirichletMeshIndex >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< dive::DirichletMeshIndex >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vecDirichletMeshIndices_insert" "', argument " "2"" of type '" "std::vector< dive::DirichletMeshIndex >::iterator""'");
    }
  }
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_dive__DirichletMeshIndex,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "vecDirichletMeshIndices_insert" "', argument " "3"" of type '" "std::vector< dive::DirichletMeshIndex >::value_type const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vecDirichletMeshIndices_insert" "', argument " "3"" of type '" "std::vector< dive::DirichletMeshIndex >::value_type const &""'"); 
  }
  arg3 = reinterpret_cast< std::vector< dive::DirichletMeshIndex >::value_type * >(argp3);
  result = std_vector_Sl_dive_DirichletMeshIndex_Sg__insert__SWIG_0(arg1,SWIG_STD_MOVE(arg2),(dive::DirichletMeshIndex const &)*arg3);
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< dive::DirichletMeshIndex >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vecDirichletMeshIndices_insert__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< dive::DirichletMeshIndex > *arg1 = (std::vector< dive::DirichletMeshIndex > *) 0 ;
  std::vector< dive::DirichletMeshIndex >::iterator arg2 ;
  std::vector< dive::DirichletMeshIndex >::size_type arg3 ;
  std::vector< dive::DirichletMeshIndex >::value_type *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  size_t val3 ;
  int ecode3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  
  (void)self;
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_dive__DirichletMeshIndex_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vecDirichletMeshIndices_insert" "', argument " "1"" of type '" "std::vector< dive::DirichletMeshIndex > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< dive::DirichletMeshIndex > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vecDirichletMeshIndices_insert" "', argument " "2"" of type '" "std::vector< dive::DirichletMeshIndex >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< dive::DirichletMeshIndex >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< dive::DirichletMeshIndex >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vecDirichletMeshIndices_insert" "', argument " "2"" of type '" "std::vector< dive::DirichletMeshIndex >::iterator""'");
    }
  }
  ecode3 = SWIG_AsVal_size_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "vecDirichletMeshIndices_insert" "', argument " "3"" of type '" "std::vector< dive::DirichletMeshIndex >::size_type""'");
  } 
  arg3 = static_cast< std::vector< dive::DirichletMeshIndex >::size_type >(val3);
  res4 = SWIG_ConvertPtr(swig_obj[3], &argp4, SWIGTYPE_p_dive__DirichletMeshIndex,  0  | 0);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "vecDirichletMeshIndices_insert" "', argument " "4"" of type '" "std::vector< dive::DirichletMeshIndex >::value_type const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vecDirichletMeshIndices_insert" "', argument " "4"" of type '" "std::vector< dive::DirichletMeshIndex >::value_type const &""'"); 
  }
  arg4 = reinterpret_cast< std::vector< dive::DirichletMeshIndex >::value_type * >(argp4);
  std_vector_Sl_dive_DirichletMeshIndex_Sg__insert__SWIG_1(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3),(dive::DirichletMeshIndex const &)*arg4);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vecDirichletMeshIndices_insert(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "vecDirichletMeshIndices_insert", 0, 4, argv))) SWIG_fail;
  --argc;
  if (argc == 3) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< dive::DirichletMeshIndex,std::allocator< dive::DirichletMeshIndex > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< dive::DirichletMeshIndex >::iterator > *>(iter) != 0));
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_dive__DirichletMeshIndex, SWIG_POINTER_NO_NULL | 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_vecDirichletMeshIndices_insert__SWIG_0(self, argc, argv);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< dive::DirichletMeshIndex,std::allocator< dive::DirichletMeshIndex > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< dive::DirichletMeshIndex >::iterator > *>(iter) != 0));
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = SWIG_ConvertPtr(argv[3], 0, SWIGTYPE_p_dive__DirichletMeshIndex, SWIG_POINTER_NO_NULL | 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_vecDirichletMeshIndices_insert__SWIG_1(self, argc, argv);
          }
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'vecDirichletMeshIndices_insert'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< dive::DirichletMeshIndex >::insert(std::vector< dive::DirichletMeshIndex >::iterator,std::vector< dive::DirichletMeshIndex >::value_type const &)\n"
    "    std::vector< dive::DirichletMeshIndex >::insert(std::vector< dive::DirichletMeshIndex >::iterator,std::vector< dive::DirichletMeshIndex >::size_type,std::vector< dive::DirichletMeshIndex >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_vecDirichletMeshIndices_reserve(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< dive::DirichletMeshIndex > *arg1 = (std::vector< dive::DirichletMeshIndex > *) 0 ;
  std::vector< dive::DirichletMeshIndex >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "vecDirichletMeshIndices_reserve", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_dive__DirichletMeshIndex_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vecDirichletMeshIndices_reserve" "', argument " "1"" of type '" "std::vector< dive::DirichletMeshIndex > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< dive::DirichletMeshIndex > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vecDirichletMeshIndices_reserve" "', argument " "2"" of type '" "std::vector< dive::DirichletMeshIndex >::size_type""'");
  } 
  arg2 = static_cast< std::vector< dive::DirichletMeshIndex >::size_type >(val2);
  (arg1)->reserve(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vecDirichletMeshIndices_capacity(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< dive::DirichletMeshIndex > *arg1 = (std::vector< dive::DirichletMeshIndex > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< dive::DirichletMeshIndex >::size_type result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_dive__DirichletMeshIndex_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vecDirichletMeshIndices_capacity" "', argument " "1"" of type '" "std::vector< dive::DirichletMeshIndex > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< dive::DirichletMeshIndex > * >(argp1);
  result = ((std::vector< dive::DirichletMeshIndex > const *)arg1)->capacity();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vecDirichletMeshIndices___str__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< dive::DirichletMeshIndex > *arg1 = (std::vector< dive::DirichletMeshIndex > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  String result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_dive__DirichletMeshIndex_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vecDirichletMeshIndices___str__" "', argument " "1"" of type '" "std::vector< dive::DirichletMeshIndex > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< dive::DirichletMeshIndex > * >(argp1);
  result = std_vector_Sl_dive_DirichletMeshIndex_Sg____str__((std::vector< dive::DirichletMeshIndex > const *)arg1);
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_vecDirichletMeshIndices(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< dive::DirichletMeshIndex > *arg1 = (std::vector< dive::DirichletMeshIndex > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_dive__DirichletMeshIndex_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_vecDirichletMeshIndices" "', argument " "1"" of type '" "std::vector< dive::DirichletMeshIndex > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< dive::DirichletMeshIndex > * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *vecDirichletMeshIndices_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_std__vectorT_dive__DirichletMeshIndex_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *vecDirichletMeshIndices_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_DofMeshIndex_node_set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  dive::DofMeshIndex *arg1 = (dive::DofMeshIndex *) 0 ;
  INodePtr *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  INodePtr tempshared2 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "DofMeshIndex_node_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_dive__DofMeshIndex, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DofMeshIndex_node_set" "', argument " "1"" of type '" "dive::DofMeshIndex *""'"); 
  }
  arg1 = reinterpret_cast< dive::DofMeshIndex * >(argp1);
  {
    int newmem = 0;
    res2 = SWIG_ConvertPtrAndOwn(swig_obj[1], &argp2, SWIGTYPE_p_std__shared_ptrT_nodes__INode_t,  0 , &newmem);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DofMeshIndex_node_set" "', argument " "2"" of type '" "INodePtr const &""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      if (argp2) tempshared2 = *reinterpret_cast< INodePtr * >(argp2);
      delete reinterpret_cast< INodePtr * >(argp2);
      arg2 = &tempshared2;
    } else {
      arg2 = (argp2) ? reinterpret_cast< INodePtr * >(argp2) : &tempshared2;
    }
  }
  if (arg1) (arg1)->node = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DofMeshIndex_node_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  dive::DofMeshIndex *arg1 = (dive::DofMeshIndex *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  INodePtr *result = 0 ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_dive__DofMeshIndex, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DofMeshIndex_node_get" "', argument " "1"" of type '" "dive::DofMeshIndex *""'"); 
  }
  arg1 = reinterpret_cast< dive::DofMeshIndex * >(argp1);
  result = (INodePtr *) & ((arg1)->node);
  {
    std::shared_ptr<  nodes::INode > *smartresult = *result ? new std::shared_ptr<  nodes::INode >(*result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_std__shared_ptrT_nodes__INode_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DofMeshIndex_nodeIndex_set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  dive::DofMeshIndex *arg1 = (dive::DofMeshIndex *) 0 ;
  NodeIndex arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "DofMeshIndex_nodeIndex_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_dive__DofMeshIndex, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DofMeshIndex_nodeIndex_set" "', argument " "1"" of type '" "dive::DofMeshIndex *""'"); 
  }
  arg1 = reinterpret_cast< dive::DofMeshIndex * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DofMeshIndex_nodeIndex_set" "', argument " "2"" of type '" "NodeIndex""'");
  } 
  arg2 = static_cast< NodeIndex >(val2);
  if (arg1) (arg1)->nodeIndex = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DofMeshIndex_nodeIndex_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  dive::DofMeshIndex *arg1 = (dive::DofMeshIndex *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  NodeIndex result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_dive__DofMeshIndex, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DofMeshIndex_nodeIndex_get" "', argument " "1"" of type '" "dive::DofMeshIndex *""'"); 
  }
  arg1 = reinterpret_cast< dive::DofMeshIndex * >(argp1);
  result =  ((arg1)->nodeIndex);
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DofMeshIndex_dofIndex_set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  dive::DofMeshIndex *arg1 = (dive::DofMeshIndex *) 0 ;
  DofIndex arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "DofMeshIndex_dofIndex_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_dive__DofMeshIndex, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DofMeshIndex_dofIndex_set" "', argument " "1"" of type '" "dive::DofMeshIndex *""'"); 
  }
  arg1 = reinterpret_cast< dive::DofMeshIndex * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DofMeshIndex_dofIndex_set" "', argument " "2"" of type '" "DofIndex""'");
  } 
  arg2 = static_cast< DofIndex >(val2);
  if (arg1) (arg1)->dofIndex = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DofMeshIndex_dofIndex_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  dive::DofMeshIndex *arg1 = (dive::DofMeshIndex *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  DofIndex result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_dive__DofMeshIndex, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DofMeshIndex_dofIndex_get" "', argument " "1"" of type '" "dive::DofMeshIndex *""'"); 
  }
  arg1 = reinterpret_cast< dive::DofMeshIndex * >(argp1);
  result =  ((arg1)->dofIndex);
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DofMeshIndex_globalIndex_set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  dive::DofMeshIndex *arg1 = (dive::DofMeshIndex *) 0 ;
  DofIndex arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "DofMeshIndex_globalIndex_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_dive__DofMeshIndex, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DofMeshIndex_globalIndex_set" "', argument " "1"" of type '" "dive::DofMeshIndex *""'"); 
  }
  arg1 = reinterpret_cast< dive::DofMeshIndex * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DofMeshIndex_globalIndex_set" "', argument " "2"" of type '" "DofIndex""'");
  } 
  arg2 = static_cast< DofIndex >(val2);
  if (arg1) (arg1)->globalIndex = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DofMeshIndex_globalIndex_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  dive::DofMeshIndex *arg1 = (dive::DofMeshIndex *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  DofIndex result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_dive__DofMeshIndex, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DofMeshIndex_globalIndex_get" "', argument " "1"" of type '" "dive::DofMeshIndex *""'"); 
  }
  arg1 = reinterpret_cast< dive::DofMeshIndex * >(argp1);
  result =  ((arg1)->globalIndex);
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DofMeshIndex_dirichlet_set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  dive::DofMeshIndex *arg1 = (dive::DofMeshIndex *) 0 ;
  IDirichletPtr *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  IDirichletPtr tempshared2 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "DofMeshIndex_dirichlet_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_dive__DofMeshIndex, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DofMeshIndex_dirichlet_set" "', argument " "1"" of type '" "dive::DofMeshIndex *""'"); 
  }
  arg1 = reinterpret_cast< dive::DofMeshIndex * >(argp1);
  {
    int newmem = 0;
    res2 = SWIG_ConvertPtrAndOwn(swig_obj[1], &argp2, SWIGTYPE_p_std__shared_ptrT_dive__loads__IDirichlet_t,  0 , &newmem);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DofMeshIndex_dirichlet_set" "', argument " "2"" of type '" "IDirichletPtr const &""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      if (argp2) tempshared2 = *reinterpret_cast< IDirichletPtr * >(argp2);
      delete reinterpret_cast< IDirichletPtr * >(argp2);
      arg2 = &tempshared2;
    } else {
      arg2 = (argp2) ? reinterpret_cast< IDirichletPtr * >(argp2) : &tempshared2;
    }
  }
  if (arg1) (arg1)->dirichlet = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DofMeshIndex_dirichlet_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  dive::DofMeshIndex *arg1 = (dive::DofMeshIndex *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  IDirichletPtr *result = 0 ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_dive__DofMeshIndex, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DofMeshIndex_dirichlet_get" "', argument " "1"" of type '" "dive::DofMeshIndex *""'"); 
  }
  arg1 = reinterpret_cast< dive::DofMeshIndex * >(argp1);
  result = (IDirichletPtr *) & ((arg1)->dirichlet);
  {
    std::shared_ptr<  dive::loads::IDirichlet > *smartresult = *result ? new std::shared_ptr<  dive::loads::IDirichlet >(*result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_std__shared_ptrT_dive__loads__IDirichlet_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DofMeshIndex_dirichletIndex_set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  dive::DofMeshIndex *arg1 = (dive::DofMeshIndex *) 0 ;
  DirichletIndex arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "DofMeshIndex_dirichletIndex_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_dive__DofMeshIndex, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DofMeshIndex_dirichletIndex_set" "', argument " "1"" of type '" "dive::DofMeshIndex *""'"); 
  }
  arg1 = reinterpret_cast< dive::DofMeshIndex * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DofMeshIndex_dirichletIndex_set" "', argument " "2"" of type '" "DirichletIndex""'");
  } 
  arg2 = static_cast< DirichletIndex >(val2);
  if (arg1) (arg1)->dirichletIndex = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DofMeshIndex_dirichletIndex_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  dive::DofMeshIndex *arg1 = (dive::DofMeshIndex *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  DirichletIndex result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_dive__DofMeshIndex, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DofMeshIndex_dirichletIndex_get" "', argument " "1"" of type '" "dive::DofMeshIndex *""'"); 
  }
  arg1 = reinterpret_cast< dive::DofMeshIndex * >(argp1);
  result =  ((arg1)->dirichletIndex);
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DofMeshIndex_dirichletReordered_set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  dive::DofMeshIndex *arg1 = (dive::DofMeshIndex *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "DofMeshIndex_dirichletReordered_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_dive__DofMeshIndex, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DofMeshIndex_dirichletReordered_set" "', argument " "1"" of type '" "dive::DofMeshIndex *""'"); 
  }
  arg1 = reinterpret_cast< dive::DofMeshIndex * >(argp1);
  ecode2 = SWIG_AsVal_bool(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DofMeshIndex_dirichletReordered_set" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  if (arg1) (arg1)->dirichletReordered = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DofMeshIndex_dirichletReordered_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  dive::DofMeshIndex *arg1 = (dive::DofMeshIndex *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_dive__DofMeshIndex, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DofMeshIndex_dirichletReordered_get" "', argument " "1"" of type '" "dive::DofMeshIndex *""'"); 
  }
  arg1 = reinterpret_cast< dive::DofMeshIndex * >(argp1);
  result = (bool) ((arg1)->dirichletReordered);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_DofMeshIndex(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  dive::DofMeshIndex *result = 0 ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "new_DofMeshIndex", 0, 0, 0)) SWIG_fail;
  result = (dive::DofMeshIndex *)new dive::DofMeshIndex();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_dive__DofMeshIndex, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_DofMeshIndex(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  dive::DofMeshIndex *arg1 = (dive::DofMeshIndex *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_dive__DofMeshIndex, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_DofMeshIndex" "', argument " "1"" of type '" "dive::DofMeshIndex *""'"); 
  }
  arg1 = reinterpret_cast< dive::DofMeshIndex * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *DofMeshIndex_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_dive__DofMeshIndex, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *DofMeshIndex_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_NodeMeshIndex_index_set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  dive::NodeMeshIndex *arg1 = (dive::NodeMeshIndex *) 0 ;
  Index arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "NodeMeshIndex_index_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_dive__NodeMeshIndex, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NodeMeshIndex_index_set" "', argument " "1"" of type '" "dive::NodeMeshIndex *""'"); 
  }
  arg1 = reinterpret_cast< dive::NodeMeshIndex * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "NodeMeshIndex_index_set" "', argument " "2"" of type '" "Index""'");
  } 
  arg2 = static_cast< Index >(val2);
  if (arg1) (arg1)->index = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NodeMeshIndex_index_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  dive::NodeMeshIndex *arg1 = (dive::NodeMeshIndex *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  Index result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_dive__NodeMeshIndex, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NodeMeshIndex_index_get" "', argument " "1"" of type '" "dive::NodeMeshIndex *""'"); 
  }
  arg1 = reinterpret_cast< dive::NodeMeshIndex * >(argp1);
  result =  ((arg1)->index);
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NodeMeshIndex_node_set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  dive::NodeMeshIndex *arg1 = (dive::NodeMeshIndex *) 0 ;
  INodePtr *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  INodePtr tempshared2 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "NodeMeshIndex_node_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_dive__NodeMeshIndex, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NodeMeshIndex_node_set" "', argument " "1"" of type '" "dive::NodeMeshIndex *""'"); 
  }
  arg1 = reinterpret_cast< dive::NodeMeshIndex * >(argp1);
  {
    int newmem = 0;
    res2 = SWIG_ConvertPtrAndOwn(swig_obj[1], &argp2, SWIGTYPE_p_std__shared_ptrT_nodes__INode_t,  0 , &newmem);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NodeMeshIndex_node_set" "', argument " "2"" of type '" "INodePtr const &""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      if (argp2) tempshared2 = *reinterpret_cast< INodePtr * >(argp2);
      delete reinterpret_cast< INodePtr * >(argp2);
      arg2 = &tempshared2;
    } else {
      arg2 = (argp2) ? reinterpret_cast< INodePtr * >(argp2) : &tempshared2;
    }
  }
  if (arg1) (arg1)->node = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NodeMeshIndex_node_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  dive::NodeMeshIndex *arg1 = (dive::NodeMeshIndex *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  INodePtr *result = 0 ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_dive__NodeMeshIndex, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NodeMeshIndex_node_get" "', argument " "1"" of type '" "dive::NodeMeshIndex *""'"); 
  }
  arg1 = reinterpret_cast< dive::NodeMeshIndex * >(argp1);
  result = (INodePtr *) & ((arg1)->node);
  {
    std::shared_ptr<  nodes::INode > *smartresult = *result ? new std::shared_ptr<  nodes::INode >(*result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_std__shared_ptrT_nodes__INode_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NodeMeshIndex_dofIndices_set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  dive::NodeMeshIndex *arg1 = (dive::NodeMeshIndex *) 0 ;
  Indices *arg2 = (Indices *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "NodeMeshIndex_dofIndices_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_dive__NodeMeshIndex, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NodeMeshIndex_dofIndices_set" "', argument " "1"" of type '" "dive::NodeMeshIndex *""'"); 
  }
  arg1 = reinterpret_cast< dive::NodeMeshIndex * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_std__vectorT_std__size_t_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NodeMeshIndex_dofIndices_set" "', argument " "2"" of type '" "Indices *""'"); 
  }
  arg2 = reinterpret_cast< Indices * >(argp2);
  if (arg1) (arg1)->dofIndices = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NodeMeshIndex_dofIndices_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  dive::NodeMeshIndex *arg1 = (dive::NodeMeshIndex *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  Indices *result = 0 ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_dive__NodeMeshIndex, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NodeMeshIndex_dofIndices_get" "', argument " "1"" of type '" "dive::NodeMeshIndex *""'"); 
  }
  arg1 = reinterpret_cast< dive::NodeMeshIndex * >(argp1);
  result = (Indices *)& ((arg1)->dofIndices);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__size_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_NodeMeshIndex(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  dive::NodeMeshIndex *result = 0 ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "new_NodeMeshIndex", 0, 0, 0)) SWIG_fail;
  result = (dive::NodeMeshIndex *)new dive::NodeMeshIndex();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_dive__NodeMeshIndex, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_NodeMeshIndex(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  dive::NodeMeshIndex *arg1 = (dive::NodeMeshIndex *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_dive__NodeMeshIndex, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_NodeMeshIndex" "', argument " "1"" of type '" "dive::NodeMeshIndex *""'"); 
  }
  arg1 = reinterpret_cast< dive::NodeMeshIndex * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *NodeMeshIndex_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_dive__NodeMeshIndex, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *NodeMeshIndex_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_DirichletMeshIndex_node_set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  dive::DirichletMeshIndex *arg1 = (dive::DirichletMeshIndex *) 0 ;
  INodePtr *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  INodePtr tempshared2 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "DirichletMeshIndex_node_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_dive__DirichletMeshIndex, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DirichletMeshIndex_node_set" "', argument " "1"" of type '" "dive::DirichletMeshIndex *""'"); 
  }
  arg1 = reinterpret_cast< dive::DirichletMeshIndex * >(argp1);
  {
    int newmem = 0;
    res2 = SWIG_ConvertPtrAndOwn(swig_obj[1], &argp2, SWIGTYPE_p_std__shared_ptrT_nodes__INode_t,  0 , &newmem);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DirichletMeshIndex_node_set" "', argument " "2"" of type '" "INodePtr const &""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      if (argp2) tempshared2 = *reinterpret_cast< INodePtr * >(argp2);
      delete reinterpret_cast< INodePtr * >(argp2);
      arg2 = &tempshared2;
    } else {
      arg2 = (argp2) ? reinterpret_cast< INodePtr * >(argp2) : &tempshared2;
    }
  }
  if (arg1) (arg1)->node = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DirichletMeshIndex_node_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  dive::DirichletMeshIndex *arg1 = (dive::DirichletMeshIndex *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  INodePtr *result = 0 ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_dive__DirichletMeshIndex, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DirichletMeshIndex_node_get" "', argument " "1"" of type '" "dive::DirichletMeshIndex *""'"); 
  }
  arg1 = reinterpret_cast< dive::DirichletMeshIndex * >(argp1);
  result = (INodePtr *) & ((arg1)->node);
  {
    std::shared_ptr<  nodes::INode > *smartresult = *result ? new std::shared_ptr<  nodes::INode >(*result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_std__shared_ptrT_nodes__INode_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DirichletMeshIndex_dofIndex_set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  dive::DirichletMeshIndex *arg1 = (dive::DirichletMeshIndex *) 0 ;
  DofIndex arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "DirichletMeshIndex_dofIndex_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_dive__DirichletMeshIndex, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DirichletMeshIndex_dofIndex_set" "', argument " "1"" of type '" "dive::DirichletMeshIndex *""'"); 
  }
  arg1 = reinterpret_cast< dive::DirichletMeshIndex * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DirichletMeshIndex_dofIndex_set" "', argument " "2"" of type '" "DofIndex""'");
  } 
  arg2 = static_cast< DofIndex >(val2);
  if (arg1) (arg1)->dofIndex = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DirichletMeshIndex_dofIndex_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  dive::DirichletMeshIndex *arg1 = (dive::DirichletMeshIndex *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  DofIndex result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_dive__DirichletMeshIndex, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DirichletMeshIndex_dofIndex_get" "', argument " "1"" of type '" "dive::DirichletMeshIndex *""'"); 
  }
  arg1 = reinterpret_cast< dive::DirichletMeshIndex * >(argp1);
  result =  ((arg1)->dofIndex);
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_DirichletMeshIndex(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  dive::DirichletMeshIndex *result = 0 ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "new_DirichletMeshIndex", 0, 0, 0)) SWIG_fail;
  result = (dive::DirichletMeshIndex *)new dive::DirichletMeshIndex();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_dive__DirichletMeshIndex, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_DirichletMeshIndex(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  dive::DirichletMeshIndex *arg1 = (dive::DirichletMeshIndex *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_dive__DirichletMeshIndex, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_DirichletMeshIndex" "', argument " "1"" of type '" "dive::DirichletMeshIndex *""'"); 
  }
  arg1 = reinterpret_cast< dive::DirichletMeshIndex * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *DirichletMeshIndex_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_dive__DirichletMeshIndex, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *DirichletMeshIndex_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_delete_IMesh(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  dive::meshes::IMesh *arg1 = (dive::meshes::IMesh *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< dive::meshes::IMesh > tempshared1 ;
  std::shared_ptr< dive::meshes::IMesh > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_dive__meshes__IMesh_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_IMesh" "', argument " "1"" of type '" "dive::meshes::IMesh *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  dive::meshes::IMesh > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  dive::meshes::IMesh > * >(argp1);
      arg1 = const_cast< dive::meshes::IMesh * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  dive::meshes::IMesh > * >(argp1);
      arg1 = const_cast< dive::meshes::IMesh * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  (void)arg1; delete smartarg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IMesh_AddNode__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  dive::meshes::IMesh *arg1 = (dive::meshes::IMesh *) 0 ;
  INodePtr arg2 ;
  Status *arg3 = 0 ;
  bool arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< dive::meshes::IMesh > tempshared1 ;
  std::shared_ptr< dive::meshes::IMesh > *smartarg1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  Status temp3 ;
  int res3 = 0 ;
  bool val4 ;
  int ecode4 = 0 ;
  
  (void)self;
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_dive__meshes__IMesh_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IMesh_AddNode" "', argument " "1"" of type '" "dive::meshes::IMesh *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  dive::meshes::IMesh > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  dive::meshes::IMesh > * >(argp1);
      arg1 = const_cast< dive::meshes::IMesh * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  dive::meshes::IMesh > * >(argp1);
      arg1 = const_cast< dive::meshes::IMesh * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    int newmem = 0;
    res2 = SWIG_ConvertPtrAndOwn(swig_obj[1], &argp2, SWIGTYPE_p_std__shared_ptrT_nodes__INode_t,  0 , &newmem);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IMesh_AddNode" "', argument " "2"" of type '" "INodePtr""'");
    }
    if (argp2) arg2 = *(reinterpret_cast< INodePtr * >(argp2));
    if (newmem & SWIG_CAST_NEW_MEMORY) delete reinterpret_cast< INodePtr * >(argp2);
  }
  if (!(SWIG_IsOK((res3 = SWIG_ConvertPtr(swig_obj[2],SWIG_as_voidptrptr(&arg3),SWIGTYPE_p_long_long,0))))) {
    long long val;
    int ecode = SWIG_AsVal_long_SS_long(swig_obj[2], &val);
    if (!SWIG_IsOK(ecode)) {
      SWIG_exception_fail(SWIG_ArgError(ecode), "in method '" "IMesh_AddNode" "', argument " "3"" of type '" "Status""'");
    }
    temp3 = static_cast< Status >(val);
    arg3 = &temp3;
    res3 = SWIG_AddTmpMask(ecode);
  }
  ecode4 = SWIG_AsVal_bool(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "IMesh_AddNode" "', argument " "4"" of type '" "bool""'");
  } 
  arg4 = static_cast< bool >(val4);
  (arg1)->AddNode(arg2,*arg3,arg4);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsTmpObj(res3)) {
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_From_long_SS_long((*arg3)));
  } else {
    int new_flags = SWIG_IsNewObj(res3) ? (SWIG_POINTER_OWN |  0 ) :  0 ;
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_NewPointerObj((void*)(arg3), SWIGTYPE_p_long_long, new_flags));
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IMesh_AddNode__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  dive::meshes::IMesh *arg1 = (dive::meshes::IMesh *) 0 ;
  INodePtr arg2 ;
  Status *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< dive::meshes::IMesh > tempshared1 ;
  std::shared_ptr< dive::meshes::IMesh > *smartarg1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  Status temp3 ;
  int res3 = 0 ;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_dive__meshes__IMesh_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IMesh_AddNode" "', argument " "1"" of type '" "dive::meshes::IMesh *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  dive::meshes::IMesh > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  dive::meshes::IMesh > * >(argp1);
      arg1 = const_cast< dive::meshes::IMesh * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  dive::meshes::IMesh > * >(argp1);
      arg1 = const_cast< dive::meshes::IMesh * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    int newmem = 0;
    res2 = SWIG_ConvertPtrAndOwn(swig_obj[1], &argp2, SWIGTYPE_p_std__shared_ptrT_nodes__INode_t,  0 , &newmem);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IMesh_AddNode" "', argument " "2"" of type '" "INodePtr""'");
    }
    if (argp2) arg2 = *(reinterpret_cast< INodePtr * >(argp2));
    if (newmem & SWIG_CAST_NEW_MEMORY) delete reinterpret_cast< INodePtr * >(argp2);
  }
  if (!(SWIG_IsOK((res3 = SWIG_ConvertPtr(swig_obj[2],SWIG_as_voidptrptr(&arg3),SWIGTYPE_p_long_long,0))))) {
    long long val;
    int ecode = SWIG_AsVal_long_SS_long(swig_obj[2], &val);
    if (!SWIG_IsOK(ecode)) {
      SWIG_exception_fail(SWIG_ArgError(ecode), "in method '" "IMesh_AddNode" "', argument " "3"" of type '" "Status""'");
    }
    temp3 = static_cast< Status >(val);
    arg3 = &temp3;
    res3 = SWIG_AddTmpMask(ecode);
  }
  (arg1)->AddNode(arg2,*arg3);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsTmpObj(res3)) {
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_From_long_SS_long((*arg3)));
  } else {
    int new_flags = SWIG_IsNewObj(res3) ? (SWIG_POINTER_OWN |  0 ) :  0 ;
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_NewPointerObj((void*)(arg3), SWIGTYPE_p_long_long, new_flags));
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IMesh_AddNode(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "IMesh_AddNode", 0, 4, argv))) SWIG_fail;
  --argc;
  if (argc == 3) {
    int _v = 0;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_std__shared_ptrT_dive__meshes__IMesh_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_std__shared_ptrT_nodes__INode_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *ptr = 0;
        int res = SWIG_AsVal_long_SS_long(argv[2], 0);
        _v = SWIG_CheckState(res);
        if (!_v) {
          _v = (SWIG_IsOK((res = SWIG_ConvertPtr(argv[2],SWIG_as_voidptrptr(&ptr),SWIGTYPE_p_long_long,0))));
        }
        if (_v) {
          return _wrap_IMesh_AddNode__SWIG_1(self, argc, argv);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_std__shared_ptrT_dive__meshes__IMesh_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_std__shared_ptrT_nodes__INode_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *ptr = 0;
        int res = SWIG_AsVal_long_SS_long(argv[2], 0);
        _v = SWIG_CheckState(res);
        if (!_v) {
          _v = (SWIG_IsOK((res = SWIG_ConvertPtr(argv[2],SWIG_as_voidptrptr(&ptr),SWIGTYPE_p_long_long,0))));
        }
        if (_v) {
          {
            int res = SWIG_AsVal_bool(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_IMesh_AddNode__SWIG_0(self, argc, argv);
          }
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'IMesh_AddNode'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    dive::meshes::IMesh::AddNode(INodePtr,Status &,bool)\n"
    "    dive::meshes::IMesh::AddNode(INodePtr,Status &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_IMesh_AddElement__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  dive::meshes::IMesh *arg1 = (dive::meshes::IMesh *) 0 ;
  IElementPtr arg2 ;
  Status *arg3 = 0 ;
  bool arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< dive::meshes::IMesh > tempshared1 ;
  std::shared_ptr< dive::meshes::IMesh > *smartarg1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  Status temp3 ;
  int res3 = 0 ;
  bool val4 ;
  int ecode4 = 0 ;
  
  (void)self;
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_dive__meshes__IMesh_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IMesh_AddElement" "', argument " "1"" of type '" "dive::meshes::IMesh *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  dive::meshes::IMesh > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  dive::meshes::IMesh > * >(argp1);
      arg1 = const_cast< dive::meshes::IMesh * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  dive::meshes::IMesh > * >(argp1);
      arg1 = const_cast< dive::meshes::IMesh * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    int newmem = 0;
    res2 = SWIG_ConvertPtrAndOwn(swig_obj[1], &argp2, SWIGTYPE_p_std__shared_ptrT_dive__elements__IElement_t,  0 , &newmem);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IMesh_AddElement" "', argument " "2"" of type '" "IElementPtr""'");
    }
    if (argp2) arg2 = *(reinterpret_cast< IElementPtr * >(argp2));
    if (newmem & SWIG_CAST_NEW_MEMORY) delete reinterpret_cast< IElementPtr * >(argp2);
  }
  if (!(SWIG_IsOK((res3 = SWIG_ConvertPtr(swig_obj[2],SWIG_as_voidptrptr(&arg3),SWIGTYPE_p_long_long,0))))) {
    long long val;
    int ecode = SWIG_AsVal_long_SS_long(swig_obj[2], &val);
    if (!SWIG_IsOK(ecode)) {
      SWIG_exception_fail(SWIG_ArgError(ecode), "in method '" "IMesh_AddElement" "', argument " "3"" of type '" "Status""'");
    }
    temp3 = static_cast< Status >(val);
    arg3 = &temp3;
    res3 = SWIG_AddTmpMask(ecode);
  }
  ecode4 = SWIG_AsVal_bool(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "IMesh_AddElement" "', argument " "4"" of type '" "bool""'");
  } 
  arg4 = static_cast< bool >(val4);
  (arg1)->AddElement(arg2,*arg3,arg4);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsTmpObj(res3)) {
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_From_long_SS_long((*arg3)));
  } else {
    int new_flags = SWIG_IsNewObj(res3) ? (SWIG_POINTER_OWN |  0 ) :  0 ;
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_NewPointerObj((void*)(arg3), SWIGTYPE_p_long_long, new_flags));
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IMesh_AddElement__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  dive::meshes::IMesh *arg1 = (dive::meshes::IMesh *) 0 ;
  IElementPtr arg2 ;
  Status *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< dive::meshes::IMesh > tempshared1 ;
  std::shared_ptr< dive::meshes::IMesh > *smartarg1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  Status temp3 ;
  int res3 = 0 ;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_dive__meshes__IMesh_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IMesh_AddElement" "', argument " "1"" of type '" "dive::meshes::IMesh *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  dive::meshes::IMesh > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  dive::meshes::IMesh > * >(argp1);
      arg1 = const_cast< dive::meshes::IMesh * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  dive::meshes::IMesh > * >(argp1);
      arg1 = const_cast< dive::meshes::IMesh * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    int newmem = 0;
    res2 = SWIG_ConvertPtrAndOwn(swig_obj[1], &argp2, SWIGTYPE_p_std__shared_ptrT_dive__elements__IElement_t,  0 , &newmem);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IMesh_AddElement" "', argument " "2"" of type '" "IElementPtr""'");
    }
    if (argp2) arg2 = *(reinterpret_cast< IElementPtr * >(argp2));
    if (newmem & SWIG_CAST_NEW_MEMORY) delete reinterpret_cast< IElementPtr * >(argp2);
  }
  if (!(SWIG_IsOK((res3 = SWIG_ConvertPtr(swig_obj[2],SWIG_as_voidptrptr(&arg3),SWIGTYPE_p_long_long,0))))) {
    long long val;
    int ecode = SWIG_AsVal_long_SS_long(swig_obj[2], &val);
    if (!SWIG_IsOK(ecode)) {
      SWIG_exception_fail(SWIG_ArgError(ecode), "in method '" "IMesh_AddElement" "', argument " "3"" of type '" "Status""'");
    }
    temp3 = static_cast< Status >(val);
    arg3 = &temp3;
    res3 = SWIG_AddTmpMask(ecode);
  }
  (arg1)->AddElement(arg2,*arg3);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsTmpObj(res3)) {
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_From_long_SS_long((*arg3)));
  } else {
    int new_flags = SWIG_IsNewObj(res3) ? (SWIG_POINTER_OWN |  0 ) :  0 ;
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_NewPointerObj((void*)(arg3), SWIGTYPE_p_long_long, new_flags));
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IMesh_AddElement(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "IMesh_AddElement", 0, 4, argv))) SWIG_fail;
  --argc;
  if (argc == 3) {
    int _v = 0;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_std__shared_ptrT_dive__meshes__IMesh_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_std__shared_ptrT_dive__elements__IElement_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *ptr = 0;
        int res = SWIG_AsVal_long_SS_long(argv[2], 0);
        _v = SWIG_CheckState(res);
        if (!_v) {
          _v = (SWIG_IsOK((res = SWIG_ConvertPtr(argv[2],SWIG_as_voidptrptr(&ptr),SWIGTYPE_p_long_long,0))));
        }
        if (_v) {
          return _wrap_IMesh_AddElement__SWIG_1(self, argc, argv);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_std__shared_ptrT_dive__meshes__IMesh_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_std__shared_ptrT_dive__elements__IElement_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *ptr = 0;
        int res = SWIG_AsVal_long_SS_long(argv[2], 0);
        _v = SWIG_CheckState(res);
        if (!_v) {
          _v = (SWIG_IsOK((res = SWIG_ConvertPtr(argv[2],SWIG_as_voidptrptr(&ptr),SWIGTYPE_p_long_long,0))));
        }
        if (_v) {
          {
            int res = SWIG_AsVal_bool(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_IMesh_AddElement__SWIG_0(self, argc, argv);
          }
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'IMesh_AddElement'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    dive::meshes::IMesh::AddElement(IElementPtr,Status &,bool)\n"
    "    dive::meshes::IMesh::AddElement(IElementPtr,Status &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_IMesh_RemoveNode__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  dive::meshes::IMesh *arg1 = (dive::meshes::IMesh *) 0 ;
  INodePtr arg2 ;
  Status *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< dive::meshes::IMesh > tempshared1 ;
  std::shared_ptr< dive::meshes::IMesh > *smartarg1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  Status temp3 ;
  int res3 = 0 ;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_dive__meshes__IMesh_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IMesh_RemoveNode" "', argument " "1"" of type '" "dive::meshes::IMesh *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  dive::meshes::IMesh > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  dive::meshes::IMesh > * >(argp1);
      arg1 = const_cast< dive::meshes::IMesh * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  dive::meshes::IMesh > * >(argp1);
      arg1 = const_cast< dive::meshes::IMesh * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    int newmem = 0;
    res2 = SWIG_ConvertPtrAndOwn(swig_obj[1], &argp2, SWIGTYPE_p_std__shared_ptrT_nodes__INode_t,  0 , &newmem);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IMesh_RemoveNode" "', argument " "2"" of type '" "INodePtr""'");
    }
    if (argp2) arg2 = *(reinterpret_cast< INodePtr * >(argp2));
    if (newmem & SWIG_CAST_NEW_MEMORY) delete reinterpret_cast< INodePtr * >(argp2);
  }
  if (!(SWIG_IsOK((res3 = SWIG_ConvertPtr(swig_obj[2],SWIG_as_voidptrptr(&arg3),SWIGTYPE_p_long_long,0))))) {
    long long val;
    int ecode = SWIG_AsVal_long_SS_long(swig_obj[2], &val);
    if (!SWIG_IsOK(ecode)) {
      SWIG_exception_fail(SWIG_ArgError(ecode), "in method '" "IMesh_RemoveNode" "', argument " "3"" of type '" "Status""'");
    }
    temp3 = static_cast< Status >(val);
    arg3 = &temp3;
    res3 = SWIG_AddTmpMask(ecode);
  }
  (arg1)->RemoveNode(arg2,*arg3);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsTmpObj(res3)) {
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_From_long_SS_long((*arg3)));
  } else {
    int new_flags = SWIG_IsNewObj(res3) ? (SWIG_POINTER_OWN |  0 ) :  0 ;
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_NewPointerObj((void*)(arg3), SWIGTYPE_p_long_long, new_flags));
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IMesh_RemoveNode__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  dive::meshes::IMesh *arg1 = (dive::meshes::IMesh *) 0 ;
  Tag arg2 ;
  Status *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< dive::meshes::IMesh > tempshared1 ;
  std::shared_ptr< dive::meshes::IMesh > *smartarg1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  Status temp3 ;
  int res3 = 0 ;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_dive__meshes__IMesh_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IMesh_RemoveNode" "', argument " "1"" of type '" "dive::meshes::IMesh *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  dive::meshes::IMesh > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  dive::meshes::IMesh > * >(argp1);
      arg1 = const_cast< dive::meshes::IMesh * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  dive::meshes::IMesh > * >(argp1);
      arg1 = const_cast< dive::meshes::IMesh * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IMesh_RemoveNode" "', argument " "2"" of type '" "Tag""'");
  } 
  arg2 = static_cast< Tag >(val2);
  if (!(SWIG_IsOK((res3 = SWIG_ConvertPtr(swig_obj[2],SWIG_as_voidptrptr(&arg3),SWIGTYPE_p_long_long,0))))) {
    long long val;
    int ecode = SWIG_AsVal_long_SS_long(swig_obj[2], &val);
    if (!SWIG_IsOK(ecode)) {
      SWIG_exception_fail(SWIG_ArgError(ecode), "in method '" "IMesh_RemoveNode" "', argument " "3"" of type '" "Status""'");
    }
    temp3 = static_cast< Status >(val);
    arg3 = &temp3;
    res3 = SWIG_AddTmpMask(ecode);
  }
  (arg1)->RemoveNode(arg2,*arg3);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsTmpObj(res3)) {
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_From_long_SS_long((*arg3)));
  } else {
    int new_flags = SWIG_IsNewObj(res3) ? (SWIG_POINTER_OWN |  0 ) :  0 ;
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_NewPointerObj((void*)(arg3), SWIGTYPE_p_long_long, new_flags));
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IMesh_RemoveNode(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "IMesh_RemoveNode", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 3) {
    int _v = 0;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_std__shared_ptrT_dive__meshes__IMesh_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_std__shared_ptrT_nodes__INode_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *ptr = 0;
        int res = SWIG_AsVal_long_SS_long(argv[2], 0);
        _v = SWIG_CheckState(res);
        if (!_v) {
          _v = (SWIG_IsOK((res = SWIG_ConvertPtr(argv[2],SWIG_as_voidptrptr(&ptr),SWIGTYPE_p_long_long,0))));
        }
        if (_v) {
          return _wrap_IMesh_RemoveNode__SWIG_0(self, argc, argv);
        }
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_std__shared_ptrT_dive__meshes__IMesh_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        void *ptr = 0;
        int res = SWIG_AsVal_long_SS_long(argv[2], 0);
        _v = SWIG_CheckState(res);
        if (!_v) {
          _v = (SWIG_IsOK((res = SWIG_ConvertPtr(argv[2],SWIG_as_voidptrptr(&ptr),SWIGTYPE_p_long_long,0))));
        }
        if (_v) {
          return _wrap_IMesh_RemoveNode__SWIG_1(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'IMesh_RemoveNode'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    dive::meshes::IMesh::RemoveNode(INodePtr,Status &)\n"
    "    dive::meshes::IMesh::RemoveNode(Tag,Status &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_IMesh_RemoveElement__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  dive::meshes::IMesh *arg1 = (dive::meshes::IMesh *) 0 ;
  IElementPtr arg2 ;
  Status *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< dive::meshes::IMesh > tempshared1 ;
  std::shared_ptr< dive::meshes::IMesh > *smartarg1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  Status temp3 ;
  int res3 = 0 ;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_dive__meshes__IMesh_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IMesh_RemoveElement" "', argument " "1"" of type '" "dive::meshes::IMesh *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  dive::meshes::IMesh > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  dive::meshes::IMesh > * >(argp1);
      arg1 = const_cast< dive::meshes::IMesh * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  dive::meshes::IMesh > * >(argp1);
      arg1 = const_cast< dive::meshes::IMesh * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    int newmem = 0;
    res2 = SWIG_ConvertPtrAndOwn(swig_obj[1], &argp2, SWIGTYPE_p_std__shared_ptrT_dive__elements__IElement_t,  0 , &newmem);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IMesh_RemoveElement" "', argument " "2"" of type '" "IElementPtr""'");
    }
    if (argp2) arg2 = *(reinterpret_cast< IElementPtr * >(argp2));
    if (newmem & SWIG_CAST_NEW_MEMORY) delete reinterpret_cast< IElementPtr * >(argp2);
  }
  if (!(SWIG_IsOK((res3 = SWIG_ConvertPtr(swig_obj[2],SWIG_as_voidptrptr(&arg3),SWIGTYPE_p_long_long,0))))) {
    long long val;
    int ecode = SWIG_AsVal_long_SS_long(swig_obj[2], &val);
    if (!SWIG_IsOK(ecode)) {
      SWIG_exception_fail(SWIG_ArgError(ecode), "in method '" "IMesh_RemoveElement" "', argument " "3"" of type '" "Status""'");
    }
    temp3 = static_cast< Status >(val);
    arg3 = &temp3;
    res3 = SWIG_AddTmpMask(ecode);
  }
  (arg1)->RemoveElement(arg2,*arg3);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsTmpObj(res3)) {
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_From_long_SS_long((*arg3)));
  } else {
    int new_flags = SWIG_IsNewObj(res3) ? (SWIG_POINTER_OWN |  0 ) :  0 ;
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_NewPointerObj((void*)(arg3), SWIGTYPE_p_long_long, new_flags));
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IMesh_RemoveElement__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  dive::meshes::IMesh *arg1 = (dive::meshes::IMesh *) 0 ;
  Tag arg2 ;
  Status *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< dive::meshes::IMesh > tempshared1 ;
  std::shared_ptr< dive::meshes::IMesh > *smartarg1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  Status temp3 ;
  int res3 = 0 ;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_dive__meshes__IMesh_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IMesh_RemoveElement" "', argument " "1"" of type '" "dive::meshes::IMesh *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  dive::meshes::IMesh > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  dive::meshes::IMesh > * >(argp1);
      arg1 = const_cast< dive::meshes::IMesh * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  dive::meshes::IMesh > * >(argp1);
      arg1 = const_cast< dive::meshes::IMesh * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IMesh_RemoveElement" "', argument " "2"" of type '" "Tag""'");
  } 
  arg2 = static_cast< Tag >(val2);
  if (!(SWIG_IsOK((res3 = SWIG_ConvertPtr(swig_obj[2],SWIG_as_voidptrptr(&arg3),SWIGTYPE_p_long_long,0))))) {
    long long val;
    int ecode = SWIG_AsVal_long_SS_long(swig_obj[2], &val);
    if (!SWIG_IsOK(ecode)) {
      SWIG_exception_fail(SWIG_ArgError(ecode), "in method '" "IMesh_RemoveElement" "', argument " "3"" of type '" "Status""'");
    }
    temp3 = static_cast< Status >(val);
    arg3 = &temp3;
    res3 = SWIG_AddTmpMask(ecode);
  }
  (arg1)->RemoveElement(arg2,*arg3);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsTmpObj(res3)) {
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_From_long_SS_long((*arg3)));
  } else {
    int new_flags = SWIG_IsNewObj(res3) ? (SWIG_POINTER_OWN |  0 ) :  0 ;
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_NewPointerObj((void*)(arg3), SWIGTYPE_p_long_long, new_flags));
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IMesh_RemoveElement(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "IMesh_RemoveElement", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 3) {
    int _v = 0;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_std__shared_ptrT_dive__meshes__IMesh_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_std__shared_ptrT_dive__elements__IElement_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *ptr = 0;
        int res = SWIG_AsVal_long_SS_long(argv[2], 0);
        _v = SWIG_CheckState(res);
        if (!_v) {
          _v = (SWIG_IsOK((res = SWIG_ConvertPtr(argv[2],SWIG_as_voidptrptr(&ptr),SWIGTYPE_p_long_long,0))));
        }
        if (_v) {
          return _wrap_IMesh_RemoveElement__SWIG_0(self, argc, argv);
        }
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_std__shared_ptrT_dive__meshes__IMesh_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        void *ptr = 0;
        int res = SWIG_AsVal_long_SS_long(argv[2], 0);
        _v = SWIG_CheckState(res);
        if (!_v) {
          _v = (SWIG_IsOK((res = SWIG_ConvertPtr(argv[2],SWIG_as_voidptrptr(&ptr),SWIGTYPE_p_long_long,0))));
        }
        if (_v) {
          return _wrap_IMesh_RemoveElement__SWIG_1(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'IMesh_RemoveElement'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    dive::meshes::IMesh::RemoveElement(IElementPtr,Status &)\n"
    "    dive::meshes::IMesh::RemoveElement(Tag,Status &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_IMesh_GetNodes(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  dive::meshes::IMesh *arg1 = (dive::meshes::IMesh *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< dive::meshes::IMesh const > tempshared1 ;
  std::shared_ptr< dive::meshes::IMesh const > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  Nodes *result = 0 ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_dive__meshes__IMesh_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IMesh_GetNodes" "', argument " "1"" of type '" "dive::meshes::IMesh const *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const dive::meshes::IMesh > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const dive::meshes::IMesh > * >(argp1);
      arg1 = const_cast< dive::meshes::IMesh * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const dive::meshes::IMesh > * >(argp1);
      arg1 = const_cast< dive::meshes::IMesh * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = (Nodes *) &((dive::meshes::IMesh const *)arg1)->GetNodes();
  resultobj = swig::from(static_cast< std::vector< std::shared_ptr< nodes::INode >,std::allocator< std::shared_ptr< nodes::INode > > > >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IMesh_GetElements(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  dive::meshes::IMesh *arg1 = (dive::meshes::IMesh *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< dive::meshes::IMesh const > tempshared1 ;
  std::shared_ptr< dive::meshes::IMesh const > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  Elements *result = 0 ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_dive__meshes__IMesh_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IMesh_GetElements" "', argument " "1"" of type '" "dive::meshes::IMesh const *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const dive::meshes::IMesh > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const dive::meshes::IMesh > * >(argp1);
      arg1 = const_cast< dive::meshes::IMesh * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const dive::meshes::IMesh > * >(argp1);
      arg1 = const_cast< dive::meshes::IMesh * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = (Elements *) &((dive::meshes::IMesh const *)arg1)->GetElements();
  resultobj = swig::from(static_cast< std::vector< std::shared_ptr< dive::elements::IElement >,std::allocator< std::shared_ptr< dive::elements::IElement > > > >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IMesh_GetNode(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  dive::meshes::IMesh *arg1 = (dive::meshes::IMesh *) 0 ;
  Tag arg2 ;
  Status *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< dive::meshes::IMesh const > tempshared1 ;
  std::shared_ptr< dive::meshes::IMesh const > *smartarg1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  Status temp3 ;
  int res3 = 0 ;
  PyObject *swig_obj[3] ;
  INodePtr result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "IMesh_GetNode", 3, 3, swig_obj)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_dive__meshes__IMesh_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IMesh_GetNode" "', argument " "1"" of type '" "dive::meshes::IMesh const *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const dive::meshes::IMesh > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const dive::meshes::IMesh > * >(argp1);
      arg1 = const_cast< dive::meshes::IMesh * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const dive::meshes::IMesh > * >(argp1);
      arg1 = const_cast< dive::meshes::IMesh * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IMesh_GetNode" "', argument " "2"" of type '" "Tag""'");
  } 
  arg2 = static_cast< Tag >(val2);
  if (!(SWIG_IsOK((res3 = SWIG_ConvertPtr(swig_obj[2],SWIG_as_voidptrptr(&arg3),SWIGTYPE_p_long_long,0))))) {
    long long val;
    int ecode = SWIG_AsVal_long_SS_long(swig_obj[2], &val);
    if (!SWIG_IsOK(ecode)) {
      SWIG_exception_fail(SWIG_ArgError(ecode), "in method '" "IMesh_GetNode" "', argument " "3"" of type '" "Status""'");
    }
    temp3 = static_cast< Status >(val);
    arg3 = &temp3;
    res3 = SWIG_AddTmpMask(ecode);
  }
  result = ((dive::meshes::IMesh const *)arg1)->GetNode(arg2,*arg3);
  {
    std::shared_ptr<  nodes::INode > *smartresult = result ? new std::shared_ptr<  nodes::INode >(result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_std__shared_ptrT_nodes__INode_t, SWIG_POINTER_OWN);
  }
  if (SWIG_IsTmpObj(res3)) {
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_From_long_SS_long((*arg3)));
  } else {
    int new_flags = SWIG_IsNewObj(res3) ? (SWIG_POINTER_OWN |  0 ) :  0 ;
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_NewPointerObj((void*)(arg3), SWIGTYPE_p_long_long, new_flags));
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IMesh_GetNodeIndex(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  dive::meshes::IMesh *arg1 = (dive::meshes::IMesh *) 0 ;
  NodeIndex arg2 ;
  Status *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< dive::meshes::IMesh const > tempshared1 ;
  std::shared_ptr< dive::meshes::IMesh const > *smartarg1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  Status temp3 ;
  int res3 = 0 ;
  PyObject *swig_obj[3] ;
  INodePtr result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "IMesh_GetNodeIndex", 3, 3, swig_obj)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_dive__meshes__IMesh_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IMesh_GetNodeIndex" "', argument " "1"" of type '" "dive::meshes::IMesh const *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const dive::meshes::IMesh > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const dive::meshes::IMesh > * >(argp1);
      arg1 = const_cast< dive::meshes::IMesh * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const dive::meshes::IMesh > * >(argp1);
      arg1 = const_cast< dive::meshes::IMesh * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IMesh_GetNodeIndex" "', argument " "2"" of type '" "NodeIndex""'");
  } 
  arg2 = static_cast< NodeIndex >(val2);
  if (!(SWIG_IsOK((res3 = SWIG_ConvertPtr(swig_obj[2],SWIG_as_voidptrptr(&arg3),SWIGTYPE_p_long_long,0))))) {
    long long val;
    int ecode = SWIG_AsVal_long_SS_long(swig_obj[2], &val);
    if (!SWIG_IsOK(ecode)) {
      SWIG_exception_fail(SWIG_ArgError(ecode), "in method '" "IMesh_GetNodeIndex" "', argument " "3"" of type '" "Status""'");
    }
    temp3 = static_cast< Status >(val);
    arg3 = &temp3;
    res3 = SWIG_AddTmpMask(ecode);
  }
  result = ((dive::meshes::IMesh const *)arg1)->GetNodeIndex(arg2,*arg3);
  {
    std::shared_ptr<  nodes::INode > *smartresult = result ? new std::shared_ptr<  nodes::INode >(result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_std__shared_ptrT_nodes__INode_t, SWIG_POINTER_OWN);
  }
  if (SWIG_IsTmpObj(res3)) {
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_From_long_SS_long((*arg3)));
  } else {
    int new_flags = SWIG_IsNewObj(res3) ? (SWIG_POINTER_OWN |  0 ) :  0 ;
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_NewPointerObj((void*)(arg3), SWIGTYPE_p_long_long, new_flags));
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IMesh_GetNodeSorted(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  dive::meshes::IMesh *arg1 = (dive::meshes::IMesh *) 0 ;
  Tag arg2 ;
  Status *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< dive::meshes::IMesh const > tempshared1 ;
  std::shared_ptr< dive::meshes::IMesh const > *smartarg1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  Status temp3 ;
  int res3 = 0 ;
  PyObject *swig_obj[3] ;
  INodePtr result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "IMesh_GetNodeSorted", 3, 3, swig_obj)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_dive__meshes__IMesh_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IMesh_GetNodeSorted" "', argument " "1"" of type '" "dive::meshes::IMesh const *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const dive::meshes::IMesh > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const dive::meshes::IMesh > * >(argp1);
      arg1 = const_cast< dive::meshes::IMesh * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const dive::meshes::IMesh > * >(argp1);
      arg1 = const_cast< dive::meshes::IMesh * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IMesh_GetNodeSorted" "', argument " "2"" of type '" "Tag""'");
  } 
  arg2 = static_cast< Tag >(val2);
  if (!(SWIG_IsOK((res3 = SWIG_ConvertPtr(swig_obj[2],SWIG_as_voidptrptr(&arg3),SWIGTYPE_p_long_long,0))))) {
    long long val;
    int ecode = SWIG_AsVal_long_SS_long(swig_obj[2], &val);
    if (!SWIG_IsOK(ecode)) {
      SWIG_exception_fail(SWIG_ArgError(ecode), "in method '" "IMesh_GetNodeSorted" "', argument " "3"" of type '" "Status""'");
    }
    temp3 = static_cast< Status >(val);
    arg3 = &temp3;
    res3 = SWIG_AddTmpMask(ecode);
  }
  result = ((dive::meshes::IMesh const *)arg1)->GetNodeSorted(arg2,*arg3);
  {
    std::shared_ptr<  nodes::INode > *smartresult = result ? new std::shared_ptr<  nodes::INode >(result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_std__shared_ptrT_nodes__INode_t, SWIG_POINTER_OWN);
  }
  if (SWIG_IsTmpObj(res3)) {
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_From_long_SS_long((*arg3)));
  } else {
    int new_flags = SWIG_IsNewObj(res3) ? (SWIG_POINTER_OWN |  0 ) :  0 ;
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_NewPointerObj((void*)(arg3), SWIGTYPE_p_long_long, new_flags));
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IMesh_GetElement(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  dive::meshes::IMesh *arg1 = (dive::meshes::IMesh *) 0 ;
  Tag arg2 ;
  Status *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< dive::meshes::IMesh const > tempshared1 ;
  std::shared_ptr< dive::meshes::IMesh const > *smartarg1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  Status temp3 ;
  int res3 = 0 ;
  PyObject *swig_obj[3] ;
  IElementPtr result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "IMesh_GetElement", 3, 3, swig_obj)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_dive__meshes__IMesh_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IMesh_GetElement" "', argument " "1"" of type '" "dive::meshes::IMesh const *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const dive::meshes::IMesh > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const dive::meshes::IMesh > * >(argp1);
      arg1 = const_cast< dive::meshes::IMesh * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const dive::meshes::IMesh > * >(argp1);
      arg1 = const_cast< dive::meshes::IMesh * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IMesh_GetElement" "', argument " "2"" of type '" "Tag""'");
  } 
  arg2 = static_cast< Tag >(val2);
  if (!(SWIG_IsOK((res3 = SWIG_ConvertPtr(swig_obj[2],SWIG_as_voidptrptr(&arg3),SWIGTYPE_p_long_long,0))))) {
    long long val;
    int ecode = SWIG_AsVal_long_SS_long(swig_obj[2], &val);
    if (!SWIG_IsOK(ecode)) {
      SWIG_exception_fail(SWIG_ArgError(ecode), "in method '" "IMesh_GetElement" "', argument " "3"" of type '" "Status""'");
    }
    temp3 = static_cast< Status >(val);
    arg3 = &temp3;
    res3 = SWIG_AddTmpMask(ecode);
  }
  result = ((dive::meshes::IMesh const *)arg1)->GetElement(arg2,*arg3);
  {
    std::shared_ptr<  dive::elements::IElement > *smartresult = result ? new std::shared_ptr<  dive::elements::IElement >(result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_std__shared_ptrT_dive__elements__IElement_t, SWIG_POINTER_OWN);
  }
  if (SWIG_IsTmpObj(res3)) {
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_From_long_SS_long((*arg3)));
  } else {
    int new_flags = SWIG_IsNewObj(res3) ? (SWIG_POINTER_OWN |  0 ) :  0 ;
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_NewPointerObj((void*)(arg3), SWIGTYPE_p_long_long, new_flags));
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IMesh_GetElementIndex(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  dive::meshes::IMesh *arg1 = (dive::meshes::IMesh *) 0 ;
  ElementIndex arg2 ;
  Status *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< dive::meshes::IMesh const > tempshared1 ;
  std::shared_ptr< dive::meshes::IMesh const > *smartarg1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  Status temp3 ;
  int res3 = 0 ;
  PyObject *swig_obj[3] ;
  IElementPtr result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "IMesh_GetElementIndex", 3, 3, swig_obj)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_dive__meshes__IMesh_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IMesh_GetElementIndex" "', argument " "1"" of type '" "dive::meshes::IMesh const *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const dive::meshes::IMesh > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const dive::meshes::IMesh > * >(argp1);
      arg1 = const_cast< dive::meshes::IMesh * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const dive::meshes::IMesh > * >(argp1);
      arg1 = const_cast< dive::meshes::IMesh * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IMesh_GetElementIndex" "', argument " "2"" of type '" "ElementIndex""'");
  } 
  arg2 = static_cast< ElementIndex >(val2);
  if (!(SWIG_IsOK((res3 = SWIG_ConvertPtr(swig_obj[2],SWIG_as_voidptrptr(&arg3),SWIGTYPE_p_long_long,0))))) {
    long long val;
    int ecode = SWIG_AsVal_long_SS_long(swig_obj[2], &val);
    if (!SWIG_IsOK(ecode)) {
      SWIG_exception_fail(SWIG_ArgError(ecode), "in method '" "IMesh_GetElementIndex" "', argument " "3"" of type '" "Status""'");
    }
    temp3 = static_cast< Status >(val);
    arg3 = &temp3;
    res3 = SWIG_AddTmpMask(ecode);
  }
  result = ((dive::meshes::IMesh const *)arg1)->GetElementIndex(arg2,*arg3);
  {
    std::shared_ptr<  dive::elements::IElement > *smartresult = result ? new std::shared_ptr<  dive::elements::IElement >(result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_std__shared_ptrT_dive__elements__IElement_t, SWIG_POINTER_OWN);
  }
  if (SWIG_IsTmpObj(res3)) {
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_From_long_SS_long((*arg3)));
  } else {
    int new_flags = SWIG_IsNewObj(res3) ? (SWIG_POINTER_OWN |  0 ) :  0 ;
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_NewPointerObj((void*)(arg3), SWIGTYPE_p_long_long, new_flags));
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IMesh_GetElementSorted(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  dive::meshes::IMesh *arg1 = (dive::meshes::IMesh *) 0 ;
  Tag arg2 ;
  Status *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< dive::meshes::IMesh const > tempshared1 ;
  std::shared_ptr< dive::meshes::IMesh const > *smartarg1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  Status temp3 ;
  int res3 = 0 ;
  PyObject *swig_obj[3] ;
  IElementPtr result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "IMesh_GetElementSorted", 3, 3, swig_obj)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_dive__meshes__IMesh_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IMesh_GetElementSorted" "', argument " "1"" of type '" "dive::meshes::IMesh const *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const dive::meshes::IMesh > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const dive::meshes::IMesh > * >(argp1);
      arg1 = const_cast< dive::meshes::IMesh * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const dive::meshes::IMesh > * >(argp1);
      arg1 = const_cast< dive::meshes::IMesh * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IMesh_GetElementSorted" "', argument " "2"" of type '" "Tag""'");
  } 
  arg2 = static_cast< Tag >(val2);
  if (!(SWIG_IsOK((res3 = SWIG_ConvertPtr(swig_obj[2],SWIG_as_voidptrptr(&arg3),SWIGTYPE_p_long_long,0))))) {
    long long val;
    int ecode = SWIG_AsVal_long_SS_long(swig_obj[2], &val);
    if (!SWIG_IsOK(ecode)) {
      SWIG_exception_fail(SWIG_ArgError(ecode), "in method '" "IMesh_GetElementSorted" "', argument " "3"" of type '" "Status""'");
    }
    temp3 = static_cast< Status >(val);
    arg3 = &temp3;
    res3 = SWIG_AddTmpMask(ecode);
  }
  result = ((dive::meshes::IMesh const *)arg1)->GetElementSorted(arg2,*arg3);
  {
    std::shared_ptr<  dive::elements::IElement > *smartresult = result ? new std::shared_ptr<  dive::elements::IElement >(result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_std__shared_ptrT_dive__elements__IElement_t, SWIG_POINTER_OWN);
  }
  if (SWIG_IsTmpObj(res3)) {
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_From_long_SS_long((*arg3)));
  } else {
    int new_flags = SWIG_IsNewObj(res3) ? (SWIG_POINTER_OWN |  0 ) :  0 ;
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_NewPointerObj((void*)(arg3), SWIGTYPE_p_long_long, new_flags));
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IMesh_GetElementHeightMinium(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  dive::meshes::IMesh *arg1 = (dive::meshes::IMesh *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< dive::meshes::IMesh const > tempshared1 ;
  std::shared_ptr< dive::meshes::IMesh const > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  Scalar result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_dive__meshes__IMesh_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IMesh_GetElementHeightMinium" "', argument " "1"" of type '" "dive::meshes::IMesh const *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const dive::meshes::IMesh > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const dive::meshes::IMesh > * >(argp1);
      arg1 = const_cast< dive::meshes::IMesh * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const dive::meshes::IMesh > * >(argp1);
      arg1 = const_cast< dive::meshes::IMesh * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = (Scalar)((dive::meshes::IMesh const *)arg1)->GetElementHeightMinium();
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IMesh_GetTotalDof(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  dive::meshes::IMesh *arg1 = (dive::meshes::IMesh *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< dive::meshes::IMesh > tempshared1 ;
  std::shared_ptr< dive::meshes::IMesh > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  NumberDof result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_dive__meshes__IMesh_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IMesh_GetTotalDof" "', argument " "1"" of type '" "dive::meshes::IMesh *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  dive::meshes::IMesh > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  dive::meshes::IMesh > * >(argp1);
      arg1 = const_cast< dive::meshes::IMesh * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  dive::meshes::IMesh > * >(argp1);
      arg1 = const_cast< dive::meshes::IMesh * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = (arg1)->GetTotalDof();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IMesh_GetPivot(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  dive::meshes::IMesh *arg1 = (dive::meshes::IMesh *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< dive::meshes::IMesh > tempshared1 ;
  std::shared_ptr< dive::meshes::IMesh > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  NumberDof result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_dive__meshes__IMesh_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IMesh_GetPivot" "', argument " "1"" of type '" "dive::meshes::IMesh *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  dive::meshes::IMesh > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  dive::meshes::IMesh > * >(argp1);
      arg1 = const_cast< dive::meshes::IMesh * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  dive::meshes::IMesh > * >(argp1);
      arg1 = const_cast< dive::meshes::IMesh * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = (arg1)->GetPivot();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IMesh_GetTag(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  dive::meshes::IMesh *arg1 = (dive::meshes::IMesh *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< dive::meshes::IMesh const > tempshared1 ;
  std::shared_ptr< dive::meshes::IMesh const > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  Tag result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_dive__meshes__IMesh_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IMesh_GetTag" "', argument " "1"" of type '" "dive::meshes::IMesh const *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const dive::meshes::IMesh > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const dive::meshes::IMesh > * >(argp1);
      arg1 = const_cast< dive::meshes::IMesh * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const dive::meshes::IMesh > * >(argp1);
      arg1 = const_cast< dive::meshes::IMesh * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = ((dive::meshes::IMesh const *)arg1)->GetTag();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IMesh_SetTag(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  dive::meshes::IMesh *arg1 = (dive::meshes::IMesh *) 0 ;
  Tag arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< dive::meshes::IMesh > tempshared1 ;
  std::shared_ptr< dive::meshes::IMesh > *smartarg1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "IMesh_SetTag", 2, 2, swig_obj)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_dive__meshes__IMesh_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IMesh_SetTag" "', argument " "1"" of type '" "dive::meshes::IMesh *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  dive::meshes::IMesh > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  dive::meshes::IMesh > * >(argp1);
      arg1 = const_cast< dive::meshes::IMesh * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  dive::meshes::IMesh > * >(argp1);
      arg1 = const_cast< dive::meshes::IMesh * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IMesh_SetTag" "', argument " "2"" of type '" "Tag""'");
  } 
  arg2 = static_cast< Tag >(val2);
  (arg1)->SetTag(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IMesh_SortNodesTag(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  dive::meshes::IMesh *arg1 = (dive::meshes::IMesh *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< dive::meshes::IMesh > tempshared1 ;
  std::shared_ptr< dive::meshes::IMesh > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_dive__meshes__IMesh_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IMesh_SortNodesTag" "', argument " "1"" of type '" "dive::meshes::IMesh *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  dive::meshes::IMesh > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  dive::meshes::IMesh > * >(argp1);
      arg1 = const_cast< dive::meshes::IMesh * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  dive::meshes::IMesh > * >(argp1);
      arg1 = const_cast< dive::meshes::IMesh * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  (arg1)->SortNodesTag();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IMesh_SortElementsTag(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  dive::meshes::IMesh *arg1 = (dive::meshes::IMesh *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< dive::meshes::IMesh > tempshared1 ;
  std::shared_ptr< dive::meshes::IMesh > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_dive__meshes__IMesh_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IMesh_SortElementsTag" "', argument " "1"" of type '" "dive::meshes::IMesh *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  dive::meshes::IMesh > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  dive::meshes::IMesh > * >(argp1);
      arg1 = const_cast< dive::meshes::IMesh * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  dive::meshes::IMesh > * >(argp1);
      arg1 = const_cast< dive::meshes::IMesh * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  (arg1)->SortElementsTag();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IMesh_GetIndexNode(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  dive::meshes::IMesh *arg1 = (dive::meshes::IMesh *) 0 ;
  Tag arg2 ;
  Status *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< dive::meshes::IMesh const > tempshared1 ;
  std::shared_ptr< dive::meshes::IMesh const > *smartarg1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  Status temp3 ;
  int res3 = 0 ;
  PyObject *swig_obj[3] ;
  Index result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "IMesh_GetIndexNode", 3, 3, swig_obj)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_dive__meshes__IMesh_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IMesh_GetIndexNode" "', argument " "1"" of type '" "dive::meshes::IMesh const *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const dive::meshes::IMesh > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const dive::meshes::IMesh > * >(argp1);
      arg1 = const_cast< dive::meshes::IMesh * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const dive::meshes::IMesh > * >(argp1);
      arg1 = const_cast< dive::meshes::IMesh * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IMesh_GetIndexNode" "', argument " "2"" of type '" "Tag""'");
  } 
  arg2 = static_cast< Tag >(val2);
  if (!(SWIG_IsOK((res3 = SWIG_ConvertPtr(swig_obj[2],SWIG_as_voidptrptr(&arg3),SWIGTYPE_p_long_long,0))))) {
    long long val;
    int ecode = SWIG_AsVal_long_SS_long(swig_obj[2], &val);
    if (!SWIG_IsOK(ecode)) {
      SWIG_exception_fail(SWIG_ArgError(ecode), "in method '" "IMesh_GetIndexNode" "', argument " "3"" of type '" "Status""'");
    }
    temp3 = static_cast< Status >(val);
    arg3 = &temp3;
    res3 = SWIG_AddTmpMask(ecode);
  }
  result = ((dive::meshes::IMesh const *)arg1)->GetIndexNode(arg2,*arg3);
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  if (SWIG_IsTmpObj(res3)) {
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_From_long_SS_long((*arg3)));
  } else {
    int new_flags = SWIG_IsNewObj(res3) ? (SWIG_POINTER_OWN |  0 ) :  0 ;
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_NewPointerObj((void*)(arg3), SWIGTYPE_p_long_long, new_flags));
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IMesh_GetIndexNodeSorted(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  dive::meshes::IMesh *arg1 = (dive::meshes::IMesh *) 0 ;
  Tag arg2 ;
  Status *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< dive::meshes::IMesh const > tempshared1 ;
  std::shared_ptr< dive::meshes::IMesh const > *smartarg1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  Status temp3 ;
  int res3 = 0 ;
  PyObject *swig_obj[3] ;
  Index result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "IMesh_GetIndexNodeSorted", 3, 3, swig_obj)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_dive__meshes__IMesh_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IMesh_GetIndexNodeSorted" "', argument " "1"" of type '" "dive::meshes::IMesh const *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const dive::meshes::IMesh > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const dive::meshes::IMesh > * >(argp1);
      arg1 = const_cast< dive::meshes::IMesh * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const dive::meshes::IMesh > * >(argp1);
      arg1 = const_cast< dive::meshes::IMesh * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IMesh_GetIndexNodeSorted" "', argument " "2"" of type '" "Tag""'");
  } 
  arg2 = static_cast< Tag >(val2);
  if (!(SWIG_IsOK((res3 = SWIG_ConvertPtr(swig_obj[2],SWIG_as_voidptrptr(&arg3),SWIGTYPE_p_long_long,0))))) {
    long long val;
    int ecode = SWIG_AsVal_long_SS_long(swig_obj[2], &val);
    if (!SWIG_IsOK(ecode)) {
      SWIG_exception_fail(SWIG_ArgError(ecode), "in method '" "IMesh_GetIndexNodeSorted" "', argument " "3"" of type '" "Status""'");
    }
    temp3 = static_cast< Status >(val);
    arg3 = &temp3;
    res3 = SWIG_AddTmpMask(ecode);
  }
  result = ((dive::meshes::IMesh const *)arg1)->GetIndexNodeSorted(arg2,*arg3);
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  if (SWIG_IsTmpObj(res3)) {
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_From_long_SS_long((*arg3)));
  } else {
    int new_flags = SWIG_IsNewObj(res3) ? (SWIG_POINTER_OWN |  0 ) :  0 ;
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_NewPointerObj((void*)(arg3), SWIGTYPE_p_long_long, new_flags));
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IMesh_GetIndexElement(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  dive::meshes::IMesh *arg1 = (dive::meshes::IMesh *) 0 ;
  Tag arg2 ;
  Status *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< dive::meshes::IMesh const > tempshared1 ;
  std::shared_ptr< dive::meshes::IMesh const > *smartarg1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  Status temp3 ;
  int res3 = 0 ;
  PyObject *swig_obj[3] ;
  Index result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "IMesh_GetIndexElement", 3, 3, swig_obj)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_dive__meshes__IMesh_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IMesh_GetIndexElement" "', argument " "1"" of type '" "dive::meshes::IMesh const *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const dive::meshes::IMesh > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const dive::meshes::IMesh > * >(argp1);
      arg1 = const_cast< dive::meshes::IMesh * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const dive::meshes::IMesh > * >(argp1);
      arg1 = const_cast< dive::meshes::IMesh * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IMesh_GetIndexElement" "', argument " "2"" of type '" "Tag""'");
  } 
  arg2 = static_cast< Tag >(val2);
  if (!(SWIG_IsOK((res3 = SWIG_ConvertPtr(swig_obj[2],SWIG_as_voidptrptr(&arg3),SWIGTYPE_p_long_long,0))))) {
    long long val;
    int ecode = SWIG_AsVal_long_SS_long(swig_obj[2], &val);
    if (!SWIG_IsOK(ecode)) {
      SWIG_exception_fail(SWIG_ArgError(ecode), "in method '" "IMesh_GetIndexElement" "', argument " "3"" of type '" "Status""'");
    }
    temp3 = static_cast< Status >(val);
    arg3 = &temp3;
    res3 = SWIG_AddTmpMask(ecode);
  }
  result = ((dive::meshes::IMesh const *)arg1)->GetIndexElement(arg2,*arg3);
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  if (SWIG_IsTmpObj(res3)) {
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_From_long_SS_long((*arg3)));
  } else {
    int new_flags = SWIG_IsNewObj(res3) ? (SWIG_POINTER_OWN |  0 ) :  0 ;
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_NewPointerObj((void*)(arg3), SWIGTYPE_p_long_long, new_flags));
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IMesh_GetIndexElementSorted(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  dive::meshes::IMesh *arg1 = (dive::meshes::IMesh *) 0 ;
  Tag arg2 ;
  Status *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< dive::meshes::IMesh const > tempshared1 ;
  std::shared_ptr< dive::meshes::IMesh const > *smartarg1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  Status temp3 ;
  int res3 = 0 ;
  PyObject *swig_obj[3] ;
  Index result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "IMesh_GetIndexElementSorted", 3, 3, swig_obj)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_dive__meshes__IMesh_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IMesh_GetIndexElementSorted" "', argument " "1"" of type '" "dive::meshes::IMesh const *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const dive::meshes::IMesh > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const dive::meshes::IMesh > * >(argp1);
      arg1 = const_cast< dive::meshes::IMesh * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const dive::meshes::IMesh > * >(argp1);
      arg1 = const_cast< dive::meshes::IMesh * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IMesh_GetIndexElementSorted" "', argument " "2"" of type '" "Tag""'");
  } 
  arg2 = static_cast< Tag >(val2);
  if (!(SWIG_IsOK((res3 = SWIG_ConvertPtr(swig_obj[2],SWIG_as_voidptrptr(&arg3),SWIGTYPE_p_long_long,0))))) {
    long long val;
    int ecode = SWIG_AsVal_long_SS_long(swig_obj[2], &val);
    if (!SWIG_IsOK(ecode)) {
      SWIG_exception_fail(SWIG_ArgError(ecode), "in method '" "IMesh_GetIndexElementSorted" "', argument " "3"" of type '" "Status""'");
    }
    temp3 = static_cast< Status >(val);
    arg3 = &temp3;
    res3 = SWIG_AddTmpMask(ecode);
  }
  result = ((dive::meshes::IMesh const *)arg1)->GetIndexElementSorted(arg2,*arg3);
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  if (SWIG_IsTmpObj(res3)) {
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_From_long_SS_long((*arg3)));
  } else {
    int new_flags = SWIG_IsNewObj(res3) ? (SWIG_POINTER_OWN |  0 ) :  0 ;
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_NewPointerObj((void*)(arg3), SWIGTYPE_p_long_long, new_flags));
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *IMesh_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_std__shared_ptrT_dive__meshes__IMesh_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_CreateMesh__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **SWIGUNUSEDPARM(swig_obj)) {
  PyObject *resultobj = 0;
  MeshPtr result;
  
  (void)self;
  if ((nobjs < 0) || (nobjs > 0)) SWIG_fail;
  result = dive::meshes::CreateMesh();
  {
    std::shared_ptr<  dive::meshes::Mesh > *smartresult = result ? new std::shared_ptr<  dive::meshes::Mesh >(result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_std__shared_ptrT_dive__meshes__Mesh_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CreateMesh__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  Tag arg1 ;
  size_t val1 ;
  int ecode1 = 0 ;
  MeshPtr result;
  
  (void)self;
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "CreateMesh" "', argument " "1"" of type '" "Tag""'");
  } 
  arg1 = static_cast< Tag >(val1);
  result = dive::meshes::CreateMesh(SWIG_STD_MOVE(arg1));
  {
    std::shared_ptr<  dive::meshes::Mesh > *smartresult = result ? new std::shared_ptr<  dive::meshes::Mesh >(result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_std__shared_ptrT_dive__meshes__Mesh_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CreateMesh(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "CreateMesh", 0, 1, argv))) SWIG_fail;
  --argc;
  if (argc == 0) {
    return _wrap_CreateMesh__SWIG_0(self, argc, argv);
  }
  if (argc == 1) {
    int _v = 0;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_CreateMesh__SWIG_1(self, argc, argv);
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'CreateMesh'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    dive::meshes::CreateMesh()\n"
    "    dive::meshes::CreateMesh(Tag)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_Mesh(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  dive::meshes::Mesh *arg1 = (dive::meshes::Mesh *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< dive::meshes::Mesh > tempshared1 ;
  std::shared_ptr< dive::meshes::Mesh > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_dive__meshes__Mesh_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Mesh" "', argument " "1"" of type '" "dive::meshes::Mesh *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  dive::meshes::Mesh > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  dive::meshes::Mesh > * >(argp1);
      arg1 = const_cast< dive::meshes::Mesh * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  dive::meshes::Mesh > * >(argp1);
      arg1 = const_cast< dive::meshes::Mesh * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  (void)arg1; delete smartarg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Mesh_Create(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  MeshPtr result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "Mesh_Create", 0, 0, 0)) SWIG_fail;
  result = dive::meshes::Mesh::Create();
  {
    std::shared_ptr<  dive::meshes::Mesh > *smartresult = result ? new std::shared_ptr<  dive::meshes::Mesh >(result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_std__shared_ptrT_dive__meshes__Mesh_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Mesh_GetPtr__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  dive::meshes::Mesh *arg1 = (dive::meshes::Mesh *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< dive::meshes::Mesh > tempshared1 ;
  std::shared_ptr< dive::meshes::Mesh > *smartarg1 = 0 ;
  MeshPtr result;
  
  (void)self;
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_dive__meshes__Mesh_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Mesh_GetPtr" "', argument " "1"" of type '" "dive::meshes::Mesh *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  dive::meshes::Mesh > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  dive::meshes::Mesh > * >(argp1);
      arg1 = const_cast< dive::meshes::Mesh * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  dive::meshes::Mesh > * >(argp1);
      arg1 = const_cast< dive::meshes::Mesh * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = (arg1)->GetPtr();
  {
    std::shared_ptr<  dive::meshes::Mesh > *smartresult = result ? new std::shared_ptr<  dive::meshes::Mesh >(result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_std__shared_ptrT_dive__meshes__Mesh_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Mesh_GetPtr__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  dive::meshes::Mesh *arg1 = (dive::meshes::Mesh *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< dive::meshes::Mesh const > tempshared1 ;
  std::shared_ptr< dive::meshes::Mesh const > *smartarg1 = 0 ;
  ConstMeshPtr result;
  
  (void)self;
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_dive__meshes__Mesh_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Mesh_GetPtr" "', argument " "1"" of type '" "dive::meshes::Mesh const *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const dive::meshes::Mesh > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const dive::meshes::Mesh > * >(argp1);
      arg1 = const_cast< dive::meshes::Mesh * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const dive::meshes::Mesh > * >(argp1);
      arg1 = const_cast< dive::meshes::Mesh * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = ((dive::meshes::Mesh const *)arg1)->GetPtr();
  {
    std::shared_ptr< const dive::meshes::Mesh > *smartresult = result ? new std::shared_ptr< const dive::meshes::Mesh >(result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_std__shared_ptrT_dive__meshes__Mesh_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Mesh_GetPtr(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "Mesh_GetPtr", 0, 1, argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    int _v = 0;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_std__shared_ptrT_dive__meshes__Mesh_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_Mesh_GetPtr__SWIG_0(self, argc, argv);
    }
  }
  if (argc == 1) {
    int _v = 0;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_std__shared_ptrT_dive__meshes__Mesh_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_Mesh_GetPtr__SWIG_1(self, argc, argv);
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'Mesh_GetPtr'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    dive::meshes::Mesh::GetPtr()\n"
    "    dive::meshes::Mesh::GetPtr() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Mesh_AddNode__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  dive::meshes::Mesh *arg1 = (dive::meshes::Mesh *) 0 ;
  INodePtr arg2 ;
  Status *arg3 = 0 ;
  bool arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< dive::meshes::Mesh > tempshared1 ;
  std::shared_ptr< dive::meshes::Mesh > *smartarg1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  Status temp3 ;
  int res3 = 0 ;
  bool val4 ;
  int ecode4 = 0 ;
  
  (void)self;
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_dive__meshes__Mesh_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Mesh_AddNode" "', argument " "1"" of type '" "dive::meshes::Mesh *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  dive::meshes::Mesh > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  dive::meshes::Mesh > * >(argp1);
      arg1 = const_cast< dive::meshes::Mesh * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  dive::meshes::Mesh > * >(argp1);
      arg1 = const_cast< dive::meshes::Mesh * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    int newmem = 0;
    res2 = SWIG_ConvertPtrAndOwn(swig_obj[1], &argp2, SWIGTYPE_p_std__shared_ptrT_nodes__INode_t,  0 , &newmem);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Mesh_AddNode" "', argument " "2"" of type '" "INodePtr""'");
    }
    if (argp2) arg2 = *(reinterpret_cast< INodePtr * >(argp2));
    if (newmem & SWIG_CAST_NEW_MEMORY) delete reinterpret_cast< INodePtr * >(argp2);
  }
  if (!(SWIG_IsOK((res3 = SWIG_ConvertPtr(swig_obj[2],SWIG_as_voidptrptr(&arg3),SWIGTYPE_p_long_long,0))))) {
    long long val;
    int ecode = SWIG_AsVal_long_SS_long(swig_obj[2], &val);
    if (!SWIG_IsOK(ecode)) {
      SWIG_exception_fail(SWIG_ArgError(ecode), "in method '" "Mesh_AddNode" "', argument " "3"" of type '" "Status""'");
    }
    temp3 = static_cast< Status >(val);
    arg3 = &temp3;
    res3 = SWIG_AddTmpMask(ecode);
  }
  ecode4 = SWIG_AsVal_bool(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Mesh_AddNode" "', argument " "4"" of type '" "bool""'");
  } 
  arg4 = static_cast< bool >(val4);
  (arg1)->AddNode(arg2,*arg3,arg4);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsTmpObj(res3)) {
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_From_long_SS_long((*arg3)));
  } else {
    int new_flags = SWIG_IsNewObj(res3) ? (SWIG_POINTER_OWN |  0 ) :  0 ;
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_NewPointerObj((void*)(arg3), SWIGTYPE_p_long_long, new_flags));
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Mesh_AddNode__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  dive::meshes::Mesh *arg1 = (dive::meshes::Mesh *) 0 ;
  INodePtr arg2 ;
  Status *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< dive::meshes::Mesh > tempshared1 ;
  std::shared_ptr< dive::meshes::Mesh > *smartarg1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  Status temp3 ;
  int res3 = 0 ;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_dive__meshes__Mesh_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Mesh_AddNode" "', argument " "1"" of type '" "dive::meshes::Mesh *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  dive::meshes::Mesh > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  dive::meshes::Mesh > * >(argp1);
      arg1 = const_cast< dive::meshes::Mesh * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  dive::meshes::Mesh > * >(argp1);
      arg1 = const_cast< dive::meshes::Mesh * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    int newmem = 0;
    res2 = SWIG_ConvertPtrAndOwn(swig_obj[1], &argp2, SWIGTYPE_p_std__shared_ptrT_nodes__INode_t,  0 , &newmem);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Mesh_AddNode" "', argument " "2"" of type '" "INodePtr""'");
    }
    if (argp2) arg2 = *(reinterpret_cast< INodePtr * >(argp2));
    if (newmem & SWIG_CAST_NEW_MEMORY) delete reinterpret_cast< INodePtr * >(argp2);
  }
  if (!(SWIG_IsOK((res3 = SWIG_ConvertPtr(swig_obj[2],SWIG_as_voidptrptr(&arg3),SWIGTYPE_p_long_long,0))))) {
    long long val;
    int ecode = SWIG_AsVal_long_SS_long(swig_obj[2], &val);
    if (!SWIG_IsOK(ecode)) {
      SWIG_exception_fail(SWIG_ArgError(ecode), "in method '" "Mesh_AddNode" "', argument " "3"" of type '" "Status""'");
    }
    temp3 = static_cast< Status >(val);
    arg3 = &temp3;
    res3 = SWIG_AddTmpMask(ecode);
  }
  (arg1)->AddNode(arg2,*arg3);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsTmpObj(res3)) {
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_From_long_SS_long((*arg3)));
  } else {
    int new_flags = SWIG_IsNewObj(res3) ? (SWIG_POINTER_OWN |  0 ) :  0 ;
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_NewPointerObj((void*)(arg3), SWIGTYPE_p_long_long, new_flags));
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Mesh_AddNode(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "Mesh_AddNode", 0, 4, argv))) SWIG_fail;
  --argc;
  if (argc == 3) {
    int _v = 0;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_std__shared_ptrT_dive__meshes__Mesh_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_std__shared_ptrT_nodes__INode_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *ptr = 0;
        int res = SWIG_AsVal_long_SS_long(argv[2], 0);
        _v = SWIG_CheckState(res);
        if (!_v) {
          _v = (SWIG_IsOK((res = SWIG_ConvertPtr(argv[2],SWIG_as_voidptrptr(&ptr),SWIGTYPE_p_long_long,0))));
        }
        if (_v) {
          return _wrap_Mesh_AddNode__SWIG_1(self, argc, argv);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_std__shared_ptrT_dive__meshes__Mesh_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_std__shared_ptrT_nodes__INode_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *ptr = 0;
        int res = SWIG_AsVal_long_SS_long(argv[2], 0);
        _v = SWIG_CheckState(res);
        if (!_v) {
          _v = (SWIG_IsOK((res = SWIG_ConvertPtr(argv[2],SWIG_as_voidptrptr(&ptr),SWIGTYPE_p_long_long,0))));
        }
        if (_v) {
          {
            int res = SWIG_AsVal_bool(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_Mesh_AddNode__SWIG_0(self, argc, argv);
          }
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'Mesh_AddNode'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    dive::meshes::Mesh::AddNode(INodePtr,Status &,bool)\n"
    "    dive::meshes::Mesh::AddNode(INodePtr,Status &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Mesh_AddElement__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  dive::meshes::Mesh *arg1 = (dive::meshes::Mesh *) 0 ;
  IElementPtr arg2 ;
  Status *arg3 = 0 ;
  bool arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< dive::meshes::Mesh > tempshared1 ;
  std::shared_ptr< dive::meshes::Mesh > *smartarg1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  Status temp3 ;
  int res3 = 0 ;
  bool val4 ;
  int ecode4 = 0 ;
  
  (void)self;
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_dive__meshes__Mesh_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Mesh_AddElement" "', argument " "1"" of type '" "dive::meshes::Mesh *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  dive::meshes::Mesh > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  dive::meshes::Mesh > * >(argp1);
      arg1 = const_cast< dive::meshes::Mesh * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  dive::meshes::Mesh > * >(argp1);
      arg1 = const_cast< dive::meshes::Mesh * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    int newmem = 0;
    res2 = SWIG_ConvertPtrAndOwn(swig_obj[1], &argp2, SWIGTYPE_p_std__shared_ptrT_dive__elements__IElement_t,  0 , &newmem);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Mesh_AddElement" "', argument " "2"" of type '" "IElementPtr""'");
    }
    if (argp2) arg2 = *(reinterpret_cast< IElementPtr * >(argp2));
    if (newmem & SWIG_CAST_NEW_MEMORY) delete reinterpret_cast< IElementPtr * >(argp2);
  }
  if (!(SWIG_IsOK((res3 = SWIG_ConvertPtr(swig_obj[2],SWIG_as_voidptrptr(&arg3),SWIGTYPE_p_long_long,0))))) {
    long long val;
    int ecode = SWIG_AsVal_long_SS_long(swig_obj[2], &val);
    if (!SWIG_IsOK(ecode)) {
      SWIG_exception_fail(SWIG_ArgError(ecode), "in method '" "Mesh_AddElement" "', argument " "3"" of type '" "Status""'");
    }
    temp3 = static_cast< Status >(val);
    arg3 = &temp3;
    res3 = SWIG_AddTmpMask(ecode);
  }
  ecode4 = SWIG_AsVal_bool(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Mesh_AddElement" "', argument " "4"" of type '" "bool""'");
  } 
  arg4 = static_cast< bool >(val4);
  (arg1)->AddElement(arg2,*arg3,arg4);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsTmpObj(res3)) {
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_From_long_SS_long((*arg3)));
  } else {
    int new_flags = SWIG_IsNewObj(res3) ? (SWIG_POINTER_OWN |  0 ) :  0 ;
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_NewPointerObj((void*)(arg3), SWIGTYPE_p_long_long, new_flags));
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Mesh_AddElement__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  dive::meshes::Mesh *arg1 = (dive::meshes::Mesh *) 0 ;
  IElementPtr arg2 ;
  Status *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< dive::meshes::Mesh > tempshared1 ;
  std::shared_ptr< dive::meshes::Mesh > *smartarg1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  Status temp3 ;
  int res3 = 0 ;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_dive__meshes__Mesh_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Mesh_AddElement" "', argument " "1"" of type '" "dive::meshes::Mesh *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  dive::meshes::Mesh > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  dive::meshes::Mesh > * >(argp1);
      arg1 = const_cast< dive::meshes::Mesh * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  dive::meshes::Mesh > * >(argp1);
      arg1 = const_cast< dive::meshes::Mesh * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    int newmem = 0;
    res2 = SWIG_ConvertPtrAndOwn(swig_obj[1], &argp2, SWIGTYPE_p_std__shared_ptrT_dive__elements__IElement_t,  0 , &newmem);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Mesh_AddElement" "', argument " "2"" of type '" "IElementPtr""'");
    }
    if (argp2) arg2 = *(reinterpret_cast< IElementPtr * >(argp2));
    if (newmem & SWIG_CAST_NEW_MEMORY) delete reinterpret_cast< IElementPtr * >(argp2);
  }
  if (!(SWIG_IsOK((res3 = SWIG_ConvertPtr(swig_obj[2],SWIG_as_voidptrptr(&arg3),SWIGTYPE_p_long_long,0))))) {
    long long val;
    int ecode = SWIG_AsVal_long_SS_long(swig_obj[2], &val);
    if (!SWIG_IsOK(ecode)) {
      SWIG_exception_fail(SWIG_ArgError(ecode), "in method '" "Mesh_AddElement" "', argument " "3"" of type '" "Status""'");
    }
    temp3 = static_cast< Status >(val);
    arg3 = &temp3;
    res3 = SWIG_AddTmpMask(ecode);
  }
  (arg1)->AddElement(arg2,*arg3);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsTmpObj(res3)) {
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_From_long_SS_long((*arg3)));
  } else {
    int new_flags = SWIG_IsNewObj(res3) ? (SWIG_POINTER_OWN |  0 ) :  0 ;
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_NewPointerObj((void*)(arg3), SWIGTYPE_p_long_long, new_flags));
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Mesh_AddElement(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "Mesh_AddElement", 0, 4, argv))) SWIG_fail;
  --argc;
  if (argc == 3) {
    int _v = 0;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_std__shared_ptrT_dive__meshes__Mesh_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_std__shared_ptrT_dive__elements__IElement_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *ptr = 0;
        int res = SWIG_AsVal_long_SS_long(argv[2], 0);
        _v = SWIG_CheckState(res);
        if (!_v) {
          _v = (SWIG_IsOK((res = SWIG_ConvertPtr(argv[2],SWIG_as_voidptrptr(&ptr),SWIGTYPE_p_long_long,0))));
        }
        if (_v) {
          return _wrap_Mesh_AddElement__SWIG_1(self, argc, argv);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_std__shared_ptrT_dive__meshes__Mesh_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_std__shared_ptrT_dive__elements__IElement_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *ptr = 0;
        int res = SWIG_AsVal_long_SS_long(argv[2], 0);
        _v = SWIG_CheckState(res);
        if (!_v) {
          _v = (SWIG_IsOK((res = SWIG_ConvertPtr(argv[2],SWIG_as_voidptrptr(&ptr),SWIGTYPE_p_long_long,0))));
        }
        if (_v) {
          {
            int res = SWIG_AsVal_bool(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_Mesh_AddElement__SWIG_0(self, argc, argv);
          }
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'Mesh_AddElement'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    dive::meshes::Mesh::AddElement(IElementPtr,Status &,bool)\n"
    "    dive::meshes::Mesh::AddElement(IElementPtr,Status &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Mesh_RemoveNode__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  dive::meshes::Mesh *arg1 = (dive::meshes::Mesh *) 0 ;
  INodePtr arg2 ;
  Status *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< dive::meshes::Mesh > tempshared1 ;
  std::shared_ptr< dive::meshes::Mesh > *smartarg1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  Status temp3 ;
  int res3 = 0 ;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_dive__meshes__Mesh_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Mesh_RemoveNode" "', argument " "1"" of type '" "dive::meshes::Mesh *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  dive::meshes::Mesh > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  dive::meshes::Mesh > * >(argp1);
      arg1 = const_cast< dive::meshes::Mesh * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  dive::meshes::Mesh > * >(argp1);
      arg1 = const_cast< dive::meshes::Mesh * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    int newmem = 0;
    res2 = SWIG_ConvertPtrAndOwn(swig_obj[1], &argp2, SWIGTYPE_p_std__shared_ptrT_nodes__INode_t,  0 , &newmem);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Mesh_RemoveNode" "', argument " "2"" of type '" "INodePtr""'");
    }
    if (argp2) arg2 = *(reinterpret_cast< INodePtr * >(argp2));
    if (newmem & SWIG_CAST_NEW_MEMORY) delete reinterpret_cast< INodePtr * >(argp2);
  }
  if (!(SWIG_IsOK((res3 = SWIG_ConvertPtr(swig_obj[2],SWIG_as_voidptrptr(&arg3),SWIGTYPE_p_long_long,0))))) {
    long long val;
    int ecode = SWIG_AsVal_long_SS_long(swig_obj[2], &val);
    if (!SWIG_IsOK(ecode)) {
      SWIG_exception_fail(SWIG_ArgError(ecode), "in method '" "Mesh_RemoveNode" "', argument " "3"" of type '" "Status""'");
    }
    temp3 = static_cast< Status >(val);
    arg3 = &temp3;
    res3 = SWIG_AddTmpMask(ecode);
  }
  (arg1)->RemoveNode(arg2,*arg3);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsTmpObj(res3)) {
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_From_long_SS_long((*arg3)));
  } else {
    int new_flags = SWIG_IsNewObj(res3) ? (SWIG_POINTER_OWN |  0 ) :  0 ;
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_NewPointerObj((void*)(arg3), SWIGTYPE_p_long_long, new_flags));
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Mesh_RemoveNode__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  dive::meshes::Mesh *arg1 = (dive::meshes::Mesh *) 0 ;
  Tag arg2 ;
  Status *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< dive::meshes::Mesh > tempshared1 ;
  std::shared_ptr< dive::meshes::Mesh > *smartarg1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  Status temp3 ;
  int res3 = 0 ;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_dive__meshes__Mesh_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Mesh_RemoveNode" "', argument " "1"" of type '" "dive::meshes::Mesh *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  dive::meshes::Mesh > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  dive::meshes::Mesh > * >(argp1);
      arg1 = const_cast< dive::meshes::Mesh * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  dive::meshes::Mesh > * >(argp1);
      arg1 = const_cast< dive::meshes::Mesh * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Mesh_RemoveNode" "', argument " "2"" of type '" "Tag""'");
  } 
  arg2 = static_cast< Tag >(val2);
  if (!(SWIG_IsOK((res3 = SWIG_ConvertPtr(swig_obj[2],SWIG_as_voidptrptr(&arg3),SWIGTYPE_p_long_long,0))))) {
    long long val;
    int ecode = SWIG_AsVal_long_SS_long(swig_obj[2], &val);
    if (!SWIG_IsOK(ecode)) {
      SWIG_exception_fail(SWIG_ArgError(ecode), "in method '" "Mesh_RemoveNode" "', argument " "3"" of type '" "Status""'");
    }
    temp3 = static_cast< Status >(val);
    arg3 = &temp3;
    res3 = SWIG_AddTmpMask(ecode);
  }
  (arg1)->RemoveNode(arg2,*arg3);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsTmpObj(res3)) {
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_From_long_SS_long((*arg3)));
  } else {
    int new_flags = SWIG_IsNewObj(res3) ? (SWIG_POINTER_OWN |  0 ) :  0 ;
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_NewPointerObj((void*)(arg3), SWIGTYPE_p_long_long, new_flags));
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Mesh_RemoveNode(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "Mesh_RemoveNode", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 3) {
    int _v = 0;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_std__shared_ptrT_dive__meshes__Mesh_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_std__shared_ptrT_nodes__INode_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *ptr = 0;
        int res = SWIG_AsVal_long_SS_long(argv[2], 0);
        _v = SWIG_CheckState(res);
        if (!_v) {
          _v = (SWIG_IsOK((res = SWIG_ConvertPtr(argv[2],SWIG_as_voidptrptr(&ptr),SWIGTYPE_p_long_long,0))));
        }
        if (_v) {
          return _wrap_Mesh_RemoveNode__SWIG_0(self, argc, argv);
        }
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_std__shared_ptrT_dive__meshes__Mesh_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        void *ptr = 0;
        int res = SWIG_AsVal_long_SS_long(argv[2], 0);
        _v = SWIG_CheckState(res);
        if (!_v) {
          _v = (SWIG_IsOK((res = SWIG_ConvertPtr(argv[2],SWIG_as_voidptrptr(&ptr),SWIGTYPE_p_long_long,0))));
        }
        if (_v) {
          return _wrap_Mesh_RemoveNode__SWIG_1(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'Mesh_RemoveNode'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    dive::meshes::Mesh::RemoveNode(INodePtr,Status &)\n"
    "    dive::meshes::Mesh::RemoveNode(Tag,Status &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Mesh_RemoveElement__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  dive::meshes::Mesh *arg1 = (dive::meshes::Mesh *) 0 ;
  IElementPtr arg2 ;
  Status *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< dive::meshes::Mesh > tempshared1 ;
  std::shared_ptr< dive::meshes::Mesh > *smartarg1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  Status temp3 ;
  int res3 = 0 ;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_dive__meshes__Mesh_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Mesh_RemoveElement" "', argument " "1"" of type '" "dive::meshes::Mesh *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  dive::meshes::Mesh > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  dive::meshes::Mesh > * >(argp1);
      arg1 = const_cast< dive::meshes::Mesh * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  dive::meshes::Mesh > * >(argp1);
      arg1 = const_cast< dive::meshes::Mesh * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    int newmem = 0;
    res2 = SWIG_ConvertPtrAndOwn(swig_obj[1], &argp2, SWIGTYPE_p_std__shared_ptrT_dive__elements__IElement_t,  0 , &newmem);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Mesh_RemoveElement" "', argument " "2"" of type '" "IElementPtr""'");
    }
    if (argp2) arg2 = *(reinterpret_cast< IElementPtr * >(argp2));
    if (newmem & SWIG_CAST_NEW_MEMORY) delete reinterpret_cast< IElementPtr * >(argp2);
  }
  if (!(SWIG_IsOK((res3 = SWIG_ConvertPtr(swig_obj[2],SWIG_as_voidptrptr(&arg3),SWIGTYPE_p_long_long,0))))) {
    long long val;
    int ecode = SWIG_AsVal_long_SS_long(swig_obj[2], &val);
    if (!SWIG_IsOK(ecode)) {
      SWIG_exception_fail(SWIG_ArgError(ecode), "in method '" "Mesh_RemoveElement" "', argument " "3"" of type '" "Status""'");
    }
    temp3 = static_cast< Status >(val);
    arg3 = &temp3;
    res3 = SWIG_AddTmpMask(ecode);
  }
  (arg1)->RemoveElement(arg2,*arg3);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsTmpObj(res3)) {
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_From_long_SS_long((*arg3)));
  } else {
    int new_flags = SWIG_IsNewObj(res3) ? (SWIG_POINTER_OWN |  0 ) :  0 ;
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_NewPointerObj((void*)(arg3), SWIGTYPE_p_long_long, new_flags));
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Mesh_RemoveElement__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  dive::meshes::Mesh *arg1 = (dive::meshes::Mesh *) 0 ;
  Tag arg2 ;
  Status *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< dive::meshes::Mesh > tempshared1 ;
  std::shared_ptr< dive::meshes::Mesh > *smartarg1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  Status temp3 ;
  int res3 = 0 ;
  
  (void)self;
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_dive__meshes__Mesh_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Mesh_RemoveElement" "', argument " "1"" of type '" "dive::meshes::Mesh *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  dive::meshes::Mesh > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  dive::meshes::Mesh > * >(argp1);
      arg1 = const_cast< dive::meshes::Mesh * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  dive::meshes::Mesh > * >(argp1);
      arg1 = const_cast< dive::meshes::Mesh * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Mesh_RemoveElement" "', argument " "2"" of type '" "Tag""'");
  } 
  arg2 = static_cast< Tag >(val2);
  if (!(SWIG_IsOK((res3 = SWIG_ConvertPtr(swig_obj[2],SWIG_as_voidptrptr(&arg3),SWIGTYPE_p_long_long,0))))) {
    long long val;
    int ecode = SWIG_AsVal_long_SS_long(swig_obj[2], &val);
    if (!SWIG_IsOK(ecode)) {
      SWIG_exception_fail(SWIG_ArgError(ecode), "in method '" "Mesh_RemoveElement" "', argument " "3"" of type '" "Status""'");
    }
    temp3 = static_cast< Status >(val);
    arg3 = &temp3;
    res3 = SWIG_AddTmpMask(ecode);
  }
  (arg1)->RemoveElement(arg2,*arg3);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsTmpObj(res3)) {
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_From_long_SS_long((*arg3)));
  } else {
    int new_flags = SWIG_IsNewObj(res3) ? (SWIG_POINTER_OWN |  0 ) :  0 ;
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_NewPointerObj((void*)(arg3), SWIGTYPE_p_long_long, new_flags));
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Mesh_RemoveElement(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "Mesh_RemoveElement", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 3) {
    int _v = 0;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_std__shared_ptrT_dive__meshes__Mesh_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_std__shared_ptrT_dive__elements__IElement_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *ptr = 0;
        int res = SWIG_AsVal_long_SS_long(argv[2], 0);
        _v = SWIG_CheckState(res);
        if (!_v) {
          _v = (SWIG_IsOK((res = SWIG_ConvertPtr(argv[2],SWIG_as_voidptrptr(&ptr),SWIGTYPE_p_long_long,0))));
        }
        if (_v) {
          return _wrap_Mesh_RemoveElement__SWIG_0(self, argc, argv);
        }
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_std__shared_ptrT_dive__meshes__Mesh_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        void *ptr = 0;
        int res = SWIG_AsVal_long_SS_long(argv[2], 0);
        _v = SWIG_CheckState(res);
        if (!_v) {
          _v = (SWIG_IsOK((res = SWIG_ConvertPtr(argv[2],SWIG_as_voidptrptr(&ptr),SWIGTYPE_p_long_long,0))));
        }
        if (_v) {
          return _wrap_Mesh_RemoveElement__SWIG_1(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'Mesh_RemoveElement'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    dive::meshes::Mesh::RemoveElement(IElementPtr,Status &)\n"
    "    dive::meshes::Mesh::RemoveElement(Tag,Status &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Mesh_GetNodes(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  dive::meshes::Mesh *arg1 = (dive::meshes::Mesh *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< dive::meshes::Mesh const > tempshared1 ;
  std::shared_ptr< dive::meshes::Mesh const > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  Nodes *result = 0 ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_dive__meshes__Mesh_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Mesh_GetNodes" "', argument " "1"" of type '" "dive::meshes::Mesh const *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const dive::meshes::Mesh > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const dive::meshes::Mesh > * >(argp1);
      arg1 = const_cast< dive::meshes::Mesh * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const dive::meshes::Mesh > * >(argp1);
      arg1 = const_cast< dive::meshes::Mesh * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = (Nodes *) &((dive::meshes::Mesh const *)arg1)->GetNodes();
  resultobj = swig::from(static_cast< std::vector< std::shared_ptr< nodes::INode >,std::allocator< std::shared_ptr< nodes::INode > > > >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Mesh_GetElements(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  dive::meshes::Mesh *arg1 = (dive::meshes::Mesh *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< dive::meshes::Mesh const > tempshared1 ;
  std::shared_ptr< dive::meshes::Mesh const > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  Elements *result = 0 ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_dive__meshes__Mesh_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Mesh_GetElements" "', argument " "1"" of type '" "dive::meshes::Mesh const *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const dive::meshes::Mesh > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const dive::meshes::Mesh > * >(argp1);
      arg1 = const_cast< dive::meshes::Mesh * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const dive::meshes::Mesh > * >(argp1);
      arg1 = const_cast< dive::meshes::Mesh * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = (Elements *) &((dive::meshes::Mesh const *)arg1)->GetElements();
  resultobj = swig::from(static_cast< std::vector< std::shared_ptr< dive::elements::IElement >,std::allocator< std::shared_ptr< dive::elements::IElement > > > >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Mesh_GetNode(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  dive::meshes::Mesh *arg1 = (dive::meshes::Mesh *) 0 ;
  Tag arg2 ;
  Status *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< dive::meshes::Mesh const > tempshared1 ;
  std::shared_ptr< dive::meshes::Mesh const > *smartarg1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  Status temp3 ;
  int res3 = 0 ;
  PyObject *swig_obj[3] ;
  INodePtr result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "Mesh_GetNode", 3, 3, swig_obj)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_dive__meshes__Mesh_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Mesh_GetNode" "', argument " "1"" of type '" "dive::meshes::Mesh const *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const dive::meshes::Mesh > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const dive::meshes::Mesh > * >(argp1);
      arg1 = const_cast< dive::meshes::Mesh * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const dive::meshes::Mesh > * >(argp1);
      arg1 = const_cast< dive::meshes::Mesh * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Mesh_GetNode" "', argument " "2"" of type '" "Tag""'");
  } 
  arg2 = static_cast< Tag >(val2);
  if (!(SWIG_IsOK((res3 = SWIG_ConvertPtr(swig_obj[2],SWIG_as_voidptrptr(&arg3),SWIGTYPE_p_long_long,0))))) {
    long long val;
    int ecode = SWIG_AsVal_long_SS_long(swig_obj[2], &val);
    if (!SWIG_IsOK(ecode)) {
      SWIG_exception_fail(SWIG_ArgError(ecode), "in method '" "Mesh_GetNode" "', argument " "3"" of type '" "Status""'");
    }
    temp3 = static_cast< Status >(val);
    arg3 = &temp3;
    res3 = SWIG_AddTmpMask(ecode);
  }
  result = ((dive::meshes::Mesh const *)arg1)->GetNode(arg2,*arg3);
  {
    std::shared_ptr<  nodes::INode > *smartresult = result ? new std::shared_ptr<  nodes::INode >(result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_std__shared_ptrT_nodes__INode_t, SWIG_POINTER_OWN);
  }
  if (SWIG_IsTmpObj(res3)) {
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_From_long_SS_long((*arg3)));
  } else {
    int new_flags = SWIG_IsNewObj(res3) ? (SWIG_POINTER_OWN |  0 ) :  0 ;
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_NewPointerObj((void*)(arg3), SWIGTYPE_p_long_long, new_flags));
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Mesh_GetNodeIndex(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  dive::meshes::Mesh *arg1 = (dive::meshes::Mesh *) 0 ;
  NodeIndex arg2 ;
  Status *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< dive::meshes::Mesh const > tempshared1 ;
  std::shared_ptr< dive::meshes::Mesh const > *smartarg1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  Status temp3 ;
  int res3 = 0 ;
  PyObject *swig_obj[3] ;
  INodePtr result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "Mesh_GetNodeIndex", 3, 3, swig_obj)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_dive__meshes__Mesh_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Mesh_GetNodeIndex" "', argument " "1"" of type '" "dive::meshes::Mesh const *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const dive::meshes::Mesh > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const dive::meshes::Mesh > * >(argp1);
      arg1 = const_cast< dive::meshes::Mesh * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const dive::meshes::Mesh > * >(argp1);
      arg1 = const_cast< dive::meshes::Mesh * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Mesh_GetNodeIndex" "', argument " "2"" of type '" "NodeIndex""'");
  } 
  arg2 = static_cast< NodeIndex >(val2);
  if (!(SWIG_IsOK((res3 = SWIG_ConvertPtr(swig_obj[2],SWIG_as_voidptrptr(&arg3),SWIGTYPE_p_long_long,0))))) {
    long long val;
    int ecode = SWIG_AsVal_long_SS_long(swig_obj[2], &val);
    if (!SWIG_IsOK(ecode)) {
      SWIG_exception_fail(SWIG_ArgError(ecode), "in method '" "Mesh_GetNodeIndex" "', argument " "3"" of type '" "Status""'");
    }
    temp3 = static_cast< Status >(val);
    arg3 = &temp3;
    res3 = SWIG_AddTmpMask(ecode);
  }
  result = ((dive::meshes::Mesh const *)arg1)->GetNodeIndex(arg2,*arg3);
  {
    std::shared_ptr<  nodes::INode > *smartresult = result ? new std::shared_ptr<  nodes::INode >(result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_std__shared_ptrT_nodes__INode_t, SWIG_POINTER_OWN);
  }
  if (SWIG_IsTmpObj(res3)) {
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_From_long_SS_long((*arg3)));
  } else {
    int new_flags = SWIG_IsNewObj(res3) ? (SWIG_POINTER_OWN |  0 ) :  0 ;
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_NewPointerObj((void*)(arg3), SWIGTYPE_p_long_long, new_flags));
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Mesh_GetNodeSorted(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  dive::meshes::Mesh *arg1 = (dive::meshes::Mesh *) 0 ;
  Tag arg2 ;
  Status *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< dive::meshes::Mesh const > tempshared1 ;
  std::shared_ptr< dive::meshes::Mesh const > *smartarg1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  Status temp3 ;
  int res3 = 0 ;
  PyObject *swig_obj[3] ;
  INodePtr result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "Mesh_GetNodeSorted", 3, 3, swig_obj)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_dive__meshes__Mesh_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Mesh_GetNodeSorted" "', argument " "1"" of type '" "dive::meshes::Mesh const *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const dive::meshes::Mesh > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const dive::meshes::Mesh > * >(argp1);
      arg1 = const_cast< dive::meshes::Mesh * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const dive::meshes::Mesh > * >(argp1);
      arg1 = const_cast< dive::meshes::Mesh * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Mesh_GetNodeSorted" "', argument " "2"" of type '" "Tag""'");
  } 
  arg2 = static_cast< Tag >(val2);
  if (!(SWIG_IsOK((res3 = SWIG_ConvertPtr(swig_obj[2],SWIG_as_voidptrptr(&arg3),SWIGTYPE_p_long_long,0))))) {
    long long val;
    int ecode = SWIG_AsVal_long_SS_long(swig_obj[2], &val);
    if (!SWIG_IsOK(ecode)) {
      SWIG_exception_fail(SWIG_ArgError(ecode), "in method '" "Mesh_GetNodeSorted" "', argument " "3"" of type '" "Status""'");
    }
    temp3 = static_cast< Status >(val);
    arg3 = &temp3;
    res3 = SWIG_AddTmpMask(ecode);
  }
  result = ((dive::meshes::Mesh const *)arg1)->GetNodeSorted(arg2,*arg3);
  {
    std::shared_ptr<  nodes::INode > *smartresult = result ? new std::shared_ptr<  nodes::INode >(result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_std__shared_ptrT_nodes__INode_t, SWIG_POINTER_OWN);
  }
  if (SWIG_IsTmpObj(res3)) {
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_From_long_SS_long((*arg3)));
  } else {
    int new_flags = SWIG_IsNewObj(res3) ? (SWIG_POINTER_OWN |  0 ) :  0 ;
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_NewPointerObj((void*)(arg3), SWIGTYPE_p_long_long, new_flags));
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Mesh_GetElement(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  dive::meshes::Mesh *arg1 = (dive::meshes::Mesh *) 0 ;
  Tag arg2 ;
  Status *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< dive::meshes::Mesh const > tempshared1 ;
  std::shared_ptr< dive::meshes::Mesh const > *smartarg1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  Status temp3 ;
  int res3 = 0 ;
  PyObject *swig_obj[3] ;
  IElementPtr result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "Mesh_GetElement", 3, 3, swig_obj)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_dive__meshes__Mesh_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Mesh_GetElement" "', argument " "1"" of type '" "dive::meshes::Mesh const *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const dive::meshes::Mesh > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const dive::meshes::Mesh > * >(argp1);
      arg1 = const_cast< dive::meshes::Mesh * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const dive::meshes::Mesh > * >(argp1);
      arg1 = const_cast< dive::meshes::Mesh * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Mesh_GetElement" "', argument " "2"" of type '" "Tag""'");
  } 
  arg2 = static_cast< Tag >(val2);
  if (!(SWIG_IsOK((res3 = SWIG_ConvertPtr(swig_obj[2],SWIG_as_voidptrptr(&arg3),SWIGTYPE_p_long_long,0))))) {
    long long val;
    int ecode = SWIG_AsVal_long_SS_long(swig_obj[2], &val);
    if (!SWIG_IsOK(ecode)) {
      SWIG_exception_fail(SWIG_ArgError(ecode), "in method '" "Mesh_GetElement" "', argument " "3"" of type '" "Status""'");
    }
    temp3 = static_cast< Status >(val);
    arg3 = &temp3;
    res3 = SWIG_AddTmpMask(ecode);
  }
  result = ((dive::meshes::Mesh const *)arg1)->GetElement(arg2,*arg3);
  {
    std::shared_ptr<  dive::elements::IElement > *smartresult = result ? new std::shared_ptr<  dive::elements::IElement >(result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_std__shared_ptrT_dive__elements__IElement_t, SWIG_POINTER_OWN);
  }
  if (SWIG_IsTmpObj(res3)) {
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_From_long_SS_long((*arg3)));
  } else {
    int new_flags = SWIG_IsNewObj(res3) ? (SWIG_POINTER_OWN |  0 ) :  0 ;
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_NewPointerObj((void*)(arg3), SWIGTYPE_p_long_long, new_flags));
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Mesh_GetElementIndex(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  dive::meshes::Mesh *arg1 = (dive::meshes::Mesh *) 0 ;
  ElementIndex arg2 ;
  Status *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< dive::meshes::Mesh const > tempshared1 ;
  std::shared_ptr< dive::meshes::Mesh const > *smartarg1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  Status temp3 ;
  int res3 = 0 ;
  PyObject *swig_obj[3] ;
  IElementPtr result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "Mesh_GetElementIndex", 3, 3, swig_obj)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_dive__meshes__Mesh_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Mesh_GetElementIndex" "', argument " "1"" of type '" "dive::meshes::Mesh const *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const dive::meshes::Mesh > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const dive::meshes::Mesh > * >(argp1);
      arg1 = const_cast< dive::meshes::Mesh * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const dive::meshes::Mesh > * >(argp1);
      arg1 = const_cast< dive::meshes::Mesh * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Mesh_GetElementIndex" "', argument " "2"" of type '" "ElementIndex""'");
  } 
  arg2 = static_cast< ElementIndex >(val2);
  if (!(SWIG_IsOK((res3 = SWIG_ConvertPtr(swig_obj[2],SWIG_as_voidptrptr(&arg3),SWIGTYPE_p_long_long,0))))) {
    long long val;
    int ecode = SWIG_AsVal_long_SS_long(swig_obj[2], &val);
    if (!SWIG_IsOK(ecode)) {
      SWIG_exception_fail(SWIG_ArgError(ecode), "in method '" "Mesh_GetElementIndex" "', argument " "3"" of type '" "Status""'");
    }
    temp3 = static_cast< Status >(val);
    arg3 = &temp3;
    res3 = SWIG_AddTmpMask(ecode);
  }
  result = ((dive::meshes::Mesh const *)arg1)->GetElementIndex(arg2,*arg3);
  {
    std::shared_ptr<  dive::elements::IElement > *smartresult = result ? new std::shared_ptr<  dive::elements::IElement >(result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_std__shared_ptrT_dive__elements__IElement_t, SWIG_POINTER_OWN);
  }
  if (SWIG_IsTmpObj(res3)) {
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_From_long_SS_long((*arg3)));
  } else {
    int new_flags = SWIG_IsNewObj(res3) ? (SWIG_POINTER_OWN |  0 ) :  0 ;
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_NewPointerObj((void*)(arg3), SWIGTYPE_p_long_long, new_flags));
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Mesh_GetElementSorted(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  dive::meshes::Mesh *arg1 = (dive::meshes::Mesh *) 0 ;
  Tag arg2 ;
  Status *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< dive::meshes::Mesh const > tempshared1 ;
  std::shared_ptr< dive::meshes::Mesh const > *smartarg1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  Status temp3 ;
  int res3 = 0 ;
  PyObject *swig_obj[3] ;
  IElementPtr result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "Mesh_GetElementSorted", 3, 3, swig_obj)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_dive__meshes__Mesh_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Mesh_GetElementSorted" "', argument " "1"" of type '" "dive::meshes::Mesh const *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const dive::meshes::Mesh > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const dive::meshes::Mesh > * >(argp1);
      arg1 = const_cast< dive::meshes::Mesh * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const dive::meshes::Mesh > * >(argp1);
      arg1 = const_cast< dive::meshes::Mesh * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Mesh_GetElementSorted" "', argument " "2"" of type '" "Tag""'");
  } 
  arg2 = static_cast< Tag >(val2);
  if (!(SWIG_IsOK((res3 = SWIG_ConvertPtr(swig_obj[2],SWIG_as_voidptrptr(&arg3),SWIGTYPE_p_long_long,0))))) {
    long long val;
    int ecode = SWIG_AsVal_long_SS_long(swig_obj[2], &val);
    if (!SWIG_IsOK(ecode)) {
      SWIG_exception_fail(SWIG_ArgError(ecode), "in method '" "Mesh_GetElementSorted" "', argument " "3"" of type '" "Status""'");
    }
    temp3 = static_cast< Status >(val);
    arg3 = &temp3;
    res3 = SWIG_AddTmpMask(ecode);
  }
  result = ((dive::meshes::Mesh const *)arg1)->GetElementSorted(arg2,*arg3);
  {
    std::shared_ptr<  dive::elements::IElement > *smartresult = result ? new std::shared_ptr<  dive::elements::IElement >(result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_std__shared_ptrT_dive__elements__IElement_t, SWIG_POINTER_OWN);
  }
  if (SWIG_IsTmpObj(res3)) {
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_From_long_SS_long((*arg3)));
  } else {
    int new_flags = SWIG_IsNewObj(res3) ? (SWIG_POINTER_OWN |  0 ) :  0 ;
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_NewPointerObj((void*)(arg3), SWIGTYPE_p_long_long, new_flags));
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Mesh_GetElementHeightMinium(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  dive::meshes::Mesh *arg1 = (dive::meshes::Mesh *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< dive::meshes::Mesh const > tempshared1 ;
  std::shared_ptr< dive::meshes::Mesh const > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  Scalar result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_dive__meshes__Mesh_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Mesh_GetElementHeightMinium" "', argument " "1"" of type '" "dive::meshes::Mesh const *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const dive::meshes::Mesh > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const dive::meshes::Mesh > * >(argp1);
      arg1 = const_cast< dive::meshes::Mesh * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const dive::meshes::Mesh > * >(argp1);
      arg1 = const_cast< dive::meshes::Mesh * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = (Scalar)((dive::meshes::Mesh const *)arg1)->GetElementHeightMinium();
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Mesh_GetTotalDof(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  dive::meshes::Mesh *arg1 = (dive::meshes::Mesh *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< dive::meshes::Mesh > tempshared1 ;
  std::shared_ptr< dive::meshes::Mesh > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  NumberDof result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_dive__meshes__Mesh_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Mesh_GetTotalDof" "', argument " "1"" of type '" "dive::meshes::Mesh *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  dive::meshes::Mesh > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  dive::meshes::Mesh > * >(argp1);
      arg1 = const_cast< dive::meshes::Mesh * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  dive::meshes::Mesh > * >(argp1);
      arg1 = const_cast< dive::meshes::Mesh * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = (arg1)->GetTotalDof();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Mesh_GetPivot(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  dive::meshes::Mesh *arg1 = (dive::meshes::Mesh *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< dive::meshes::Mesh > tempshared1 ;
  std::shared_ptr< dive::meshes::Mesh > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  NumberDof result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_dive__meshes__Mesh_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Mesh_GetPivot" "', argument " "1"" of type '" "dive::meshes::Mesh *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  dive::meshes::Mesh > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  dive::meshes::Mesh > * >(argp1);
      arg1 = const_cast< dive::meshes::Mesh * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  dive::meshes::Mesh > * >(argp1);
      arg1 = const_cast< dive::meshes::Mesh * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = (arg1)->GetPivot();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Mesh_GetTag(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  dive::meshes::Mesh *arg1 = (dive::meshes::Mesh *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< dive::meshes::Mesh const > tempshared1 ;
  std::shared_ptr< dive::meshes::Mesh const > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  Tag result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_dive__meshes__Mesh_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Mesh_GetTag" "', argument " "1"" of type '" "dive::meshes::Mesh const *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const dive::meshes::Mesh > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const dive::meshes::Mesh > * >(argp1);
      arg1 = const_cast< dive::meshes::Mesh * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const dive::meshes::Mesh > * >(argp1);
      arg1 = const_cast< dive::meshes::Mesh * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = ((dive::meshes::Mesh const *)arg1)->GetTag();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Mesh_SetTag(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  dive::meshes::Mesh *arg1 = (dive::meshes::Mesh *) 0 ;
  Tag arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< dive::meshes::Mesh > tempshared1 ;
  std::shared_ptr< dive::meshes::Mesh > *smartarg1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "Mesh_SetTag", 2, 2, swig_obj)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_dive__meshes__Mesh_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Mesh_SetTag" "', argument " "1"" of type '" "dive::meshes::Mesh *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  dive::meshes::Mesh > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  dive::meshes::Mesh > * >(argp1);
      arg1 = const_cast< dive::meshes::Mesh * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  dive::meshes::Mesh > * >(argp1);
      arg1 = const_cast< dive::meshes::Mesh * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Mesh_SetTag" "', argument " "2"" of type '" "Tag""'");
  } 
  arg2 = static_cast< Tag >(val2);
  (arg1)->SetTag(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Mesh_SortNodesTag(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  dive::meshes::Mesh *arg1 = (dive::meshes::Mesh *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< dive::meshes::Mesh > tempshared1 ;
  std::shared_ptr< dive::meshes::Mesh > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_dive__meshes__Mesh_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Mesh_SortNodesTag" "', argument " "1"" of type '" "dive::meshes::Mesh *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  dive::meshes::Mesh > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  dive::meshes::Mesh > * >(argp1);
      arg1 = const_cast< dive::meshes::Mesh * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  dive::meshes::Mesh > * >(argp1);
      arg1 = const_cast< dive::meshes::Mesh * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  (arg1)->SortNodesTag();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Mesh_SortElementsTag(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  dive::meshes::Mesh *arg1 = (dive::meshes::Mesh *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< dive::meshes::Mesh > tempshared1 ;
  std::shared_ptr< dive::meshes::Mesh > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_dive__meshes__Mesh_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Mesh_SortElementsTag" "', argument " "1"" of type '" "dive::meshes::Mesh *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  dive::meshes::Mesh > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  dive::meshes::Mesh > * >(argp1);
      arg1 = const_cast< dive::meshes::Mesh * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  dive::meshes::Mesh > * >(argp1);
      arg1 = const_cast< dive::meshes::Mesh * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  (arg1)->SortElementsTag();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Mesh_GetIndexNode(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  dive::meshes::Mesh *arg1 = (dive::meshes::Mesh *) 0 ;
  Tag arg2 ;
  Status *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< dive::meshes::Mesh const > tempshared1 ;
  std::shared_ptr< dive::meshes::Mesh const > *smartarg1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  Status temp3 ;
  int res3 = 0 ;
  PyObject *swig_obj[3] ;
  Index result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "Mesh_GetIndexNode", 3, 3, swig_obj)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_dive__meshes__Mesh_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Mesh_GetIndexNode" "', argument " "1"" of type '" "dive::meshes::Mesh const *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const dive::meshes::Mesh > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const dive::meshes::Mesh > * >(argp1);
      arg1 = const_cast< dive::meshes::Mesh * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const dive::meshes::Mesh > * >(argp1);
      arg1 = const_cast< dive::meshes::Mesh * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Mesh_GetIndexNode" "', argument " "2"" of type '" "Tag""'");
  } 
  arg2 = static_cast< Tag >(val2);
  if (!(SWIG_IsOK((res3 = SWIG_ConvertPtr(swig_obj[2],SWIG_as_voidptrptr(&arg3),SWIGTYPE_p_long_long,0))))) {
    long long val;
    int ecode = SWIG_AsVal_long_SS_long(swig_obj[2], &val);
    if (!SWIG_IsOK(ecode)) {
      SWIG_exception_fail(SWIG_ArgError(ecode), "in method '" "Mesh_GetIndexNode" "', argument " "3"" of type '" "Status""'");
    }
    temp3 = static_cast< Status >(val);
    arg3 = &temp3;
    res3 = SWIG_AddTmpMask(ecode);
  }
  result = ((dive::meshes::Mesh const *)arg1)->GetIndexNode(arg2,*arg3);
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  if (SWIG_IsTmpObj(res3)) {
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_From_long_SS_long((*arg3)));
  } else {
    int new_flags = SWIG_IsNewObj(res3) ? (SWIG_POINTER_OWN |  0 ) :  0 ;
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_NewPointerObj((void*)(arg3), SWIGTYPE_p_long_long, new_flags));
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Mesh_GetIndexNodeSorted(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  dive::meshes::Mesh *arg1 = (dive::meshes::Mesh *) 0 ;
  Tag arg2 ;
  Status *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< dive::meshes::Mesh const > tempshared1 ;
  std::shared_ptr< dive::meshes::Mesh const > *smartarg1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  Status temp3 ;
  int res3 = 0 ;
  PyObject *swig_obj[3] ;
  Index result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "Mesh_GetIndexNodeSorted", 3, 3, swig_obj)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_dive__meshes__Mesh_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Mesh_GetIndexNodeSorted" "', argument " "1"" of type '" "dive::meshes::Mesh const *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const dive::meshes::Mesh > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const dive::meshes::Mesh > * >(argp1);
      arg1 = const_cast< dive::meshes::Mesh * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const dive::meshes::Mesh > * >(argp1);
      arg1 = const_cast< dive::meshes::Mesh * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Mesh_GetIndexNodeSorted" "', argument " "2"" of type '" "Tag""'");
  } 
  arg2 = static_cast< Tag >(val2);
  if (!(SWIG_IsOK((res3 = SWIG_ConvertPtr(swig_obj[2],SWIG_as_voidptrptr(&arg3),SWIGTYPE_p_long_long,0))))) {
    long long val;
    int ecode = SWIG_AsVal_long_SS_long(swig_obj[2], &val);
    if (!SWIG_IsOK(ecode)) {
      SWIG_exception_fail(SWIG_ArgError(ecode), "in method '" "Mesh_GetIndexNodeSorted" "', argument " "3"" of type '" "Status""'");
    }
    temp3 = static_cast< Status >(val);
    arg3 = &temp3;
    res3 = SWIG_AddTmpMask(ecode);
  }
  result = ((dive::meshes::Mesh const *)arg1)->GetIndexNodeSorted(arg2,*arg3);
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  if (SWIG_IsTmpObj(res3)) {
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_From_long_SS_long((*arg3)));
  } else {
    int new_flags = SWIG_IsNewObj(res3) ? (SWIG_POINTER_OWN |  0 ) :  0 ;
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_NewPointerObj((void*)(arg3), SWIGTYPE_p_long_long, new_flags));
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Mesh_GetIndexElement(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  dive::meshes::Mesh *arg1 = (dive::meshes::Mesh *) 0 ;
  Tag arg2 ;
  Status *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< dive::meshes::Mesh const > tempshared1 ;
  std::shared_ptr< dive::meshes::Mesh const > *smartarg1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  Status temp3 ;
  int res3 = 0 ;
  PyObject *swig_obj[3] ;
  Index result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "Mesh_GetIndexElement", 3, 3, swig_obj)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_dive__meshes__Mesh_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Mesh_GetIndexElement" "', argument " "1"" of type '" "dive::meshes::Mesh const *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const dive::meshes::Mesh > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const dive::meshes::Mesh > * >(argp1);
      arg1 = const_cast< dive::meshes::Mesh * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const dive::meshes::Mesh > * >(argp1);
      arg1 = const_cast< dive::meshes::Mesh * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Mesh_GetIndexElement" "', argument " "2"" of type '" "Tag""'");
  } 
  arg2 = static_cast< Tag >(val2);
  if (!(SWIG_IsOK((res3 = SWIG_ConvertPtr(swig_obj[2],SWIG_as_voidptrptr(&arg3),SWIGTYPE_p_long_long,0))))) {
    long long val;
    int ecode = SWIG_AsVal_long_SS_long(swig_obj[2], &val);
    if (!SWIG_IsOK(ecode)) {
      SWIG_exception_fail(SWIG_ArgError(ecode), "in method '" "Mesh_GetIndexElement" "', argument " "3"" of type '" "Status""'");
    }
    temp3 = static_cast< Status >(val);
    arg3 = &temp3;
    res3 = SWIG_AddTmpMask(ecode);
  }
  result = ((dive::meshes::Mesh const *)arg1)->GetIndexElement(arg2,*arg3);
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  if (SWIG_IsTmpObj(res3)) {
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_From_long_SS_long((*arg3)));
  } else {
    int new_flags = SWIG_IsNewObj(res3) ? (SWIG_POINTER_OWN |  0 ) :  0 ;
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_NewPointerObj((void*)(arg3), SWIGTYPE_p_long_long, new_flags));
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Mesh_GetIndexElementSorted(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  dive::meshes::Mesh *arg1 = (dive::meshes::Mesh *) 0 ;
  Tag arg2 ;
  Status *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< dive::meshes::Mesh const > tempshared1 ;
  std::shared_ptr< dive::meshes::Mesh const > *smartarg1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  Status temp3 ;
  int res3 = 0 ;
  PyObject *swig_obj[3] ;
  Index result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "Mesh_GetIndexElementSorted", 3, 3, swig_obj)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_dive__meshes__Mesh_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Mesh_GetIndexElementSorted" "', argument " "1"" of type '" "dive::meshes::Mesh const *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const dive::meshes::Mesh > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const dive::meshes::Mesh > * >(argp1);
      arg1 = const_cast< dive::meshes::Mesh * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const dive::meshes::Mesh > * >(argp1);
      arg1 = const_cast< dive::meshes::Mesh * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Mesh_GetIndexElementSorted" "', argument " "2"" of type '" "Tag""'");
  } 
  arg2 = static_cast< Tag >(val2);
  if (!(SWIG_IsOK((res3 = SWIG_ConvertPtr(swig_obj[2],SWIG_as_voidptrptr(&arg3),SWIGTYPE_p_long_long,0))))) {
    long long val;
    int ecode = SWIG_AsVal_long_SS_long(swig_obj[2], &val);
    if (!SWIG_IsOK(ecode)) {
      SWIG_exception_fail(SWIG_ArgError(ecode), "in method '" "Mesh_GetIndexElementSorted" "', argument " "3"" of type '" "Status""'");
    }
    temp3 = static_cast< Status >(val);
    arg3 = &temp3;
    res3 = SWIG_AddTmpMask(ecode);
  }
  result = ((dive::meshes::Mesh const *)arg1)->GetIndexElementSorted(arg2,*arg3);
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  if (SWIG_IsTmpObj(res3)) {
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_From_long_SS_long((*arg3)));
  } else {
    int new_flags = SWIG_IsNewObj(res3) ? (SWIG_POINTER_OWN |  0 ) :  0 ;
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_NewPointerObj((void*)(arg3), SWIGTYPE_p_long_long, new_flags));
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *Mesh_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_std__shared_ptrT_dive__meshes__Mesh_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_LoadGmsh(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Tag arg1 ;
  String arg2 ;
  NumberDof arg3 ;
  Status *arg4 = 0 ;
  size_t val1 ;
  int ecode1 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  Status temp4 ;
  int res4 = 0 ;
  PyObject *swig_obj[4] ;
  IMeshPtr result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "LoadGmsh", 4, 4, swig_obj)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "LoadGmsh" "', argument " "1"" of type '" "Tag""'");
  } 
  arg1 = static_cast< Tag >(val1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "LoadGmsh" "', argument " "2"" of type '" "String""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  ecode3 = SWIG_AsVal_size_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "LoadGmsh" "', argument " "3"" of type '" "NumberDof""'");
  } 
  arg3 = static_cast< NumberDof >(val3);
  if (!(SWIG_IsOK((res4 = SWIG_ConvertPtr(swig_obj[3],SWIG_as_voidptrptr(&arg4),SWIGTYPE_p_long_long,0))))) {
    long long val;
    int ecode = SWIG_AsVal_long_SS_long(swig_obj[3], &val);
    if (!SWIG_IsOK(ecode)) {
      SWIG_exception_fail(SWIG_ArgError(ecode), "in method '" "LoadGmsh" "', argument " "4"" of type '" "Status""'");
    }
    temp4 = static_cast< Status >(val);
    arg4 = &temp4;
    res4 = SWIG_AddTmpMask(ecode);
  }
  result = dive::meshes::LoadGmsh(SWIG_STD_MOVE(arg1),SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3),*arg4);
  {
    std::shared_ptr<  dive::meshes::IMesh > *smartresult = result ? new std::shared_ptr<  dive::meshes::IMesh >(result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_std__shared_ptrT_dive__meshes__IMesh_t, SWIG_POINTER_OWN);
  }
  if (SWIG_IsTmpObj(res4)) {
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_From_long_SS_long((*arg4)));
  } else {
    int new_flags = SWIG_IsNewObj(res4) ? (SWIG_POINTER_OWN |  0 ) :  0 ;
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_NewPointerObj((void*)(arg4), SWIGTYPE_p_long_long, new_flags));
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DeformByInterpolation(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  IMeshPtr arg1 ;
  IInterpolationPtr arg2 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "DeformByInterpolation", 2, 2, swig_obj)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_dive__meshes__IMesh_t,  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DeformByInterpolation" "', argument " "1"" of type '" "IMeshPtr""'");
    }
    if (argp1) arg1 = *(reinterpret_cast< IMeshPtr * >(argp1));
    if (newmem & SWIG_CAST_NEW_MEMORY) delete reinterpret_cast< IMeshPtr * >(argp1);
  }
  {
    int newmem = 0;
    res2 = SWIG_ConvertPtrAndOwn(swig_obj[1], &argp2, SWIGTYPE_p_std__shared_ptrT_interpolation__IInterpolation_t,  0 , &newmem);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DeformByInterpolation" "', argument " "2"" of type '" "IInterpolationPtr""'");
    }
    if (argp2) arg2 = *(reinterpret_cast< IInterpolationPtr * >(argp2));
    if (newmem & SWIG_CAST_NEW_MEMORY) delete reinterpret_cast< IInterpolationPtr * >(argp2);
  }
  dive::meshes::DeformByInterpolation(SWIG_STD_MOVE(arg1),SWIG_STD_MOVE(arg2));
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN int Swig_var_problem_thermal_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable problem_thermal is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_problem_thermal_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_size_t(static_cast< size_t >(dive::problems::problem_thermal));
  return pyobj;
}


SWIGINTERN int Swig_var_problem_fluid_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable problem_fluid is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_problem_fluid_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_size_t(static_cast< size_t >(dive::problems::problem_fluid));
  return pyobj;
}


SWIGINTERN int Swig_var_problem_pressure_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable problem_pressure is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_problem_pressure_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_size_t(static_cast< size_t >(dive::problems::problem_pressure));
  return pyobj;
}


SWIGINTERN int Swig_var_problem_structural_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable problem_structural is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_problem_structural_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_size_t(static_cast< size_t >(dive::problems::problem_structural));
  return pyobj;
}


SWIGINTERN PyObject *_wrap_delete_IProblem(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  dive::problems::IProblem *arg1 = (dive::problems::IProblem *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< dive::problems::IProblem > tempshared1 ;
  std::shared_ptr< dive::problems::IProblem > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_dive__problems__IProblem_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_IProblem" "', argument " "1"" of type '" "dive::problems::IProblem *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  dive::problems::IProblem > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  dive::problems::IProblem > * >(argp1);
      arg1 = const_cast< dive::problems::IProblem * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  dive::problems::IProblem > * >(argp1);
      arg1 = const_cast< dive::problems::IProblem * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  (void)arg1; delete smartarg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IProblem_GetNumberDof(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  dive::problems::IProblem *arg1 = (dive::problems::IProblem *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< dive::problems::IProblem const > tempshared1 ;
  std::shared_ptr< dive::problems::IProblem const > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  NumberDof result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_dive__problems__IProblem_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IProblem_GetNumberDof" "', argument " "1"" of type '" "dive::problems::IProblem const *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const dive::problems::IProblem > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const dive::problems::IProblem > * >(argp1);
      arg1 = const_cast< dive::problems::IProblem * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const dive::problems::IProblem > * >(argp1);
      arg1 = const_cast< dive::problems::IProblem * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = ((dive::problems::IProblem const *)arg1)->GetNumberDof();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IProblem_GetTotalDof(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  dive::problems::IProblem *arg1 = (dive::problems::IProblem *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< dive::problems::IProblem const > tempshared1 ;
  std::shared_ptr< dive::problems::IProblem const > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  NumberDof result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_dive__problems__IProblem_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IProblem_GetTotalDof" "', argument " "1"" of type '" "dive::problems::IProblem const *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const dive::problems::IProblem > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const dive::problems::IProblem > * >(argp1);
      arg1 = const_cast< dive::problems::IProblem * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const dive::problems::IProblem > * >(argp1);
      arg1 = const_cast< dive::problems::IProblem * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = ((dive::problems::IProblem const *)arg1)->GetTotalDof();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IProblem_GetPivot(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  dive::problems::IProblem *arg1 = (dive::problems::IProblem *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< dive::problems::IProblem const > tempshared1 ;
  std::shared_ptr< dive::problems::IProblem const > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  DofIndex result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_dive__problems__IProblem_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IProblem_GetPivot" "', argument " "1"" of type '" "dive::problems::IProblem const *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const dive::problems::IProblem > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const dive::problems::IProblem > * >(argp1);
      arg1 = const_cast< dive::problems::IProblem * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const dive::problems::IProblem > * >(argp1);
      arg1 = const_cast< dive::problems::IProblem * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = ((dive::problems::IProblem const *)arg1)->GetPivot();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IProblem_GetTimer(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  dive::problems::IProblem *arg1 = (dive::problems::IProblem *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< dive::problems::IProblem const > tempshared1 ;
  std::shared_ptr< dive::problems::IProblem const > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  ITimerPtr result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_dive__problems__IProblem_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IProblem_GetTimer" "', argument " "1"" of type '" "dive::problems::IProblem const *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const dive::problems::IProblem > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const dive::problems::IProblem > * >(argp1);
      arg1 = const_cast< dive::problems::IProblem * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const dive::problems::IProblem > * >(argp1);
      arg1 = const_cast< dive::problems::IProblem * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = ((dive::problems::IProblem const *)arg1)->GetTimer();
  {
    std::shared_ptr<  dive::timers::ITimer > *smartresult = result ? new std::shared_ptr<  dive::timers::ITimer >(result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_std__shared_ptrT_dive__timers__ITimer_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IProblem_GetMesh(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  dive::problems::IProblem *arg1 = (dive::problems::IProblem *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< dive::problems::IProblem const > tempshared1 ;
  std::shared_ptr< dive::problems::IProblem const > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  IMeshPtr result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_dive__problems__IProblem_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IProblem_GetMesh" "', argument " "1"" of type '" "dive::problems::IProblem const *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const dive::problems::IProblem > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const dive::problems::IProblem > * >(argp1);
      arg1 = const_cast< dive::problems::IProblem * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const dive::problems::IProblem > * >(argp1);
      arg1 = const_cast< dive::problems::IProblem * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = ((dive::problems::IProblem const *)arg1)->GetMesh();
  {
    std::shared_ptr<  dive::meshes::IMesh > *smartresult = result ? new std::shared_ptr<  dive::meshes::IMesh >(result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_std__shared_ptrT_dive__meshes__IMesh_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IProblem_GetType(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  dive::problems::IProblem *arg1 = (dive::problems::IProblem *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< dive::problems::IProblem const > tempshared1 ;
  std::shared_ptr< dive::problems::IProblem const > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  Type result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_dive__problems__IProblem_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IProblem_GetType" "', argument " "1"" of type '" "dive::problems::IProblem const *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const dive::problems::IProblem > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const dive::problems::IProblem > * >(argp1);
      arg1 = const_cast< dive::problems::IProblem * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const dive::problems::IProblem > * >(argp1);
      arg1 = const_cast< dive::problems::IProblem * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = ((dive::problems::IProblem const *)arg1)->GetType();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IProblem_GetTag(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  dive::problems::IProblem *arg1 = (dive::problems::IProblem *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< dive::problems::IProblem const > tempshared1 ;
  std::shared_ptr< dive::problems::IProblem const > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  Tag result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_dive__problems__IProblem_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IProblem_GetTag" "', argument " "1"" of type '" "dive::problems::IProblem const *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const dive::problems::IProblem > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const dive::problems::IProblem > * >(argp1);
      arg1 = const_cast< dive::problems::IProblem * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const dive::problems::IProblem > * >(argp1);
      arg1 = const_cast< dive::problems::IProblem * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = ((dive::problems::IProblem const *)arg1)->GetTag();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IProblem_GetDirichlets(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  dive::problems::IProblem *arg1 = (dive::problems::IProblem *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< dive::problems::IProblem const > tempshared1 ;
  std::shared_ptr< dive::problems::IProblem const > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  Dirichlets *result = 0 ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_dive__problems__IProblem_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IProblem_GetDirichlets" "', argument " "1"" of type '" "dive::problems::IProblem const *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const dive::problems::IProblem > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const dive::problems::IProblem > * >(argp1);
      arg1 = const_cast< dive::problems::IProblem * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const dive::problems::IProblem > * >(argp1);
      arg1 = const_cast< dive::problems::IProblem * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = (Dirichlets *) &((dive::problems::IProblem const *)arg1)->GetDirichlets();
  resultobj = swig::from(static_cast< std::vector< std::shared_ptr< dive::loads::IDirichlet >,std::allocator< std::shared_ptr< dive::loads::IDirichlet > > > >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IProblem_GetLoads(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  dive::problems::IProblem *arg1 = (dive::problems::IProblem *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< dive::problems::IProblem const > tempshared1 ;
  std::shared_ptr< dive::problems::IProblem const > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  Loads *result = 0 ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_dive__problems__IProblem_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IProblem_GetLoads" "', argument " "1"" of type '" "dive::problems::IProblem const *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const dive::problems::IProblem > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const dive::problems::IProblem > * >(argp1);
      arg1 = const_cast< dive::problems::IProblem * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const dive::problems::IProblem > * >(argp1);
      arg1 = const_cast< dive::problems::IProblem * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = (Loads *) &((dive::problems::IProblem const *)arg1)->GetLoads();
  resultobj = swig::from(static_cast< std::vector< std::shared_ptr< dive::loads::ILoad >,std::allocator< std::shared_ptr< dive::loads::ILoad > > > >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IProblem_GetDofMeshIndices(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  dive::problems::IProblem *arg1 = (dive::problems::IProblem *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< dive::problems::IProblem const > tempshared1 ;
  std::shared_ptr< dive::problems::IProblem const > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  dive::DofMeshIndices *result = 0 ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_dive__problems__IProblem_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IProblem_GetDofMeshIndices" "', argument " "1"" of type '" "dive::problems::IProblem const *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const dive::problems::IProblem > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const dive::problems::IProblem > * >(argp1);
      arg1 = const_cast< dive::problems::IProblem * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const dive::problems::IProblem > * >(argp1);
      arg1 = const_cast< dive::problems::IProblem * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = (dive::DofMeshIndices *) &((dive::problems::IProblem const *)arg1)->GetDofMeshIndices();
  resultobj = swig::from(static_cast< std::vector< dive::DofMeshIndex,std::allocator< dive::DofMeshIndex > > >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IProblem_GetNodeMeshIndices(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  dive::problems::IProblem *arg1 = (dive::problems::IProblem *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< dive::problems::IProblem const > tempshared1 ;
  std::shared_ptr< dive::problems::IProblem const > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  dive::NodeMeshIndices *result = 0 ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_dive__problems__IProblem_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IProblem_GetNodeMeshIndices" "', argument " "1"" of type '" "dive::problems::IProblem const *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const dive::problems::IProblem > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const dive::problems::IProblem > * >(argp1);
      arg1 = const_cast< dive::problems::IProblem * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const dive::problems::IProblem > * >(argp1);
      arg1 = const_cast< dive::problems::IProblem * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = (dive::NodeMeshIndices *) &((dive::problems::IProblem const *)arg1)->GetNodeMeshIndices();
  resultobj = swig::from(static_cast< std::vector< std::vector< dive::NodeMeshIndex,std::allocator< dive::NodeMeshIndex > >,std::allocator< std::vector< dive::NodeMeshIndex,std::allocator< dive::NodeMeshIndex > > > > >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IProblem_GetDirichletMeshIndices(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  dive::problems::IProblem *arg1 = (dive::problems::IProblem *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< dive::problems::IProblem const > tempshared1 ;
  std::shared_ptr< dive::problems::IProblem const > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  dive::DirichletMeshIndices *result = 0 ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_dive__problems__IProblem_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IProblem_GetDirichletMeshIndices" "', argument " "1"" of type '" "dive::problems::IProblem const *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const dive::problems::IProblem > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const dive::problems::IProblem > * >(argp1);
      arg1 = const_cast< dive::problems::IProblem * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const dive::problems::IProblem > * >(argp1);
      arg1 = const_cast< dive::problems::IProblem * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = (dive::DirichletMeshIndices *) &((dive::problems::IProblem const *)arg1)->GetDirichletMeshIndices();
  resultobj = swig::from(static_cast< std::vector< dive::DirichletMeshIndex,std::allocator< dive::DirichletMeshIndex > > >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IProblem_SetTimer(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  dive::problems::IProblem *arg1 = (dive::problems::IProblem *) 0 ;
  ITimerPtr arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< dive::problems::IProblem > tempshared1 ;
  std::shared_ptr< dive::problems::IProblem > *smartarg1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "IProblem_SetTimer", 2, 2, swig_obj)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_dive__problems__IProblem_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IProblem_SetTimer" "', argument " "1"" of type '" "dive::problems::IProblem *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  dive::problems::IProblem > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  dive::problems::IProblem > * >(argp1);
      arg1 = const_cast< dive::problems::IProblem * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  dive::problems::IProblem > * >(argp1);
      arg1 = const_cast< dive::problems::IProblem * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    int newmem = 0;
    res2 = SWIG_ConvertPtrAndOwn(swig_obj[1], &argp2, SWIGTYPE_p_std__shared_ptrT_dive__timers__ITimer_t,  0 , &newmem);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IProblem_SetTimer" "', argument " "2"" of type '" "ITimerPtr""'");
    }
    if (argp2) arg2 = *(reinterpret_cast< ITimerPtr * >(argp2));
    if (newmem & SWIG_CAST_NEW_MEMORY) delete reinterpret_cast< ITimerPtr * >(argp2);
  }
  (arg1)->SetTimer(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IProblem_SetMesh(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  dive::problems::IProblem *arg1 = (dive::problems::IProblem *) 0 ;
  IMeshPtr arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< dive::problems::IProblem > tempshared1 ;
  std::shared_ptr< dive::problems::IProblem > *smartarg1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "IProblem_SetMesh", 2, 2, swig_obj)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_dive__problems__IProblem_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IProblem_SetMesh" "', argument " "1"" of type '" "dive::problems::IProblem *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  dive::problems::IProblem > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  dive::problems::IProblem > * >(argp1);
      arg1 = const_cast< dive::problems::IProblem * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  dive::problems::IProblem > * >(argp1);
      arg1 = const_cast< dive::problems::IProblem * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    int newmem = 0;
    res2 = SWIG_ConvertPtrAndOwn(swig_obj[1], &argp2, SWIGTYPE_p_std__shared_ptrT_dive__meshes__IMesh_t,  0 , &newmem);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IProblem_SetMesh" "', argument " "2"" of type '" "IMeshPtr""'");
    }
    if (argp2) arg2 = *(reinterpret_cast< IMeshPtr * >(argp2));
    if (newmem & SWIG_CAST_NEW_MEMORY) delete reinterpret_cast< IMeshPtr * >(argp2);
  }
  (arg1)->SetMesh(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IProblem_SetTag(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  dive::problems::IProblem *arg1 = (dive::problems::IProblem *) 0 ;
  Tag arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< dive::problems::IProblem > tempshared1 ;
  std::shared_ptr< dive::problems::IProblem > *smartarg1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "IProblem_SetTag", 2, 2, swig_obj)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_dive__problems__IProblem_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IProblem_SetTag" "', argument " "1"" of type '" "dive::problems::IProblem *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  dive::problems::IProblem > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  dive::problems::IProblem > * >(argp1);
      arg1 = const_cast< dive::problems::IProblem * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  dive::problems::IProblem > * >(argp1);
      arg1 = const_cast< dive::problems::IProblem * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IProblem_SetTag" "', argument " "2"" of type '" "Tag""'");
  } 
  arg2 = static_cast< Tag >(val2);
  (arg1)->SetTag(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IProblem_AddDirichlet(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  dive::problems::IProblem *arg1 = (dive::problems::IProblem *) 0 ;
  IDirichletPtr arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< dive::problems::IProblem > tempshared1 ;
  std::shared_ptr< dive::problems::IProblem > *smartarg1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "IProblem_AddDirichlet", 2, 2, swig_obj)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_dive__problems__IProblem_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IProblem_AddDirichlet" "', argument " "1"" of type '" "dive::problems::IProblem *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  dive::problems::IProblem > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  dive::problems::IProblem > * >(argp1);
      arg1 = const_cast< dive::problems::IProblem * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  dive::problems::IProblem > * >(argp1);
      arg1 = const_cast< dive::problems::IProblem * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    int newmem = 0;
    res2 = SWIG_ConvertPtrAndOwn(swig_obj[1], &argp2, SWIGTYPE_p_std__shared_ptrT_dive__loads__IDirichlet_t,  0 , &newmem);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IProblem_AddDirichlet" "', argument " "2"" of type '" "IDirichletPtr""'");
    }
    if (argp2) arg2 = *(reinterpret_cast< IDirichletPtr * >(argp2));
    if (newmem & SWIG_CAST_NEW_MEMORY) delete reinterpret_cast< IDirichletPtr * >(argp2);
  }
  (arg1)->AddDirichlet(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IProblem_AddLoad(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  dive::problems::IProblem *arg1 = (dive::problems::IProblem *) 0 ;
  ILoadPtr arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< dive::problems::IProblem > tempshared1 ;
  std::shared_ptr< dive::problems::IProblem > *smartarg1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "IProblem_AddLoad", 2, 2, swig_obj)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_dive__problems__IProblem_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IProblem_AddLoad" "', argument " "1"" of type '" "dive::problems::IProblem *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  dive::problems::IProblem > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  dive::problems::IProblem > * >(argp1);
      arg1 = const_cast< dive::problems::IProblem * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  dive::problems::IProblem > * >(argp1);
      arg1 = const_cast< dive::problems::IProblem * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    int newmem = 0;
    res2 = SWIG_ConvertPtrAndOwn(swig_obj[1], &argp2, SWIGTYPE_p_std__shared_ptrT_dive__loads__ILoad_t,  0 , &newmem);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IProblem_AddLoad" "', argument " "2"" of type '" "ILoadPtr""'");
    }
    if (argp2) arg2 = *(reinterpret_cast< ILoadPtr * >(argp2));
    if (newmem & SWIG_CAST_NEW_MEMORY) delete reinterpret_cast< ILoadPtr * >(argp2);
  }
  (arg1)->AddLoad(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IProblem_Initialize(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  dive::problems::IProblem *arg1 = (dive::problems::IProblem *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< dive::problems::IProblem > tempshared1 ;
  std::shared_ptr< dive::problems::IProblem > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_dive__problems__IProblem_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IProblem_Initialize" "', argument " "1"" of type '" "dive::problems::IProblem *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  dive::problems::IProblem > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  dive::problems::IProblem > * >(argp1);
      arg1 = const_cast< dive::problems::IProblem * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  dive::problems::IProblem > * >(argp1);
      arg1 = const_cast< dive::problems::IProblem * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  (arg1)->Initialize();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IProblem_UpdateMeshValues(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  dive::problems::IProblem *arg1 = (dive::problems::IProblem *) 0 ;
  Vector *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< dive::problems::IProblem > tempshared1 ;
  std::shared_ptr< dive::problems::IProblem > *smartarg1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "IProblem_UpdateMeshValues", 2, 2, swig_obj)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_dive__problems__IProblem_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IProblem_UpdateMeshValues" "', argument " "1"" of type '" "dive::problems::IProblem *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  dive::problems::IProblem > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  dive::problems::IProblem > * >(argp1);
      arg1 = const_cast< dive::problems::IProblem * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  dive::problems::IProblem > * >(argp1);
      arg1 = const_cast< dive::problems::IProblem * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_eilig__Vector,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IProblem_UpdateMeshValues" "', argument " "2"" of type '" "Vector const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "IProblem_UpdateMeshValues" "', argument " "2"" of type '" "Vector const &""'"); 
  }
  arg2 = reinterpret_cast< Vector * >(argp2);
  (arg1)->UpdateMeshValues((Vector const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *IProblem_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_std__shared_ptrT_dive__problems__IProblem_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_delete_IFluid(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  dive::problems::IFluid *arg1 = (dive::problems::IFluid *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< dive::problems::IFluid > tempshared1 ;
  std::shared_ptr< dive::problems::IFluid > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_dive__problems__IFluid_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_IFluid" "', argument " "1"" of type '" "dive::problems::IFluid *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  dive::problems::IFluid > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  dive::problems::IFluid > * >(argp1);
      arg1 = const_cast< dive::problems::IFluid * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  dive::problems::IFluid > * >(argp1);
      arg1 = const_cast< dive::problems::IFluid * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  (void)arg1; delete smartarg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IFluid_GetTemperature(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  dive::problems::IFluid *arg1 = (dive::problems::IFluid *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< dive::problems::IFluid const > tempshared1 ;
  std::shared_ptr< dive::problems::IFluid const > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  IScalar3DPtr result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_dive__problems__IFluid_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IFluid_GetTemperature" "', argument " "1"" of type '" "dive::problems::IFluid const *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const dive::problems::IFluid > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const dive::problems::IFluid > * >(argp1);
      arg1 = const_cast< dive::problems::IFluid * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const dive::problems::IFluid > * >(argp1);
      arg1 = const_cast< dive::problems::IFluid * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = ((dive::problems::IFluid const *)arg1)->GetTemperature();
  {
    std::shared_ptr<  values::IScalar3D > *smartresult = result ? new std::shared_ptr<  values::IScalar3D >(result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_std__shared_ptrT_values__IScalar3D_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IFluid_GetPressure(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  dive::problems::IFluid *arg1 = (dive::problems::IFluid *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< dive::problems::IFluid const > tempshared1 ;
  std::shared_ptr< dive::problems::IFluid const > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  IScalar3DPtr result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_dive__problems__IFluid_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IFluid_GetPressure" "', argument " "1"" of type '" "dive::problems::IFluid const *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const dive::problems::IFluid > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const dive::problems::IFluid > * >(argp1);
      arg1 = const_cast< dive::problems::IFluid * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const dive::problems::IFluid > * >(argp1);
      arg1 = const_cast< dive::problems::IFluid * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = ((dive::problems::IFluid const *)arg1)->GetPressure();
  {
    std::shared_ptr<  values::IScalar3D > *smartresult = result ? new std::shared_ptr<  values::IScalar3D >(result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_std__shared_ptrT_values__IScalar3D_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IFluid_GetVelocity(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  dive::problems::IFluid *arg1 = (dive::problems::IFluid *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< dive::problems::IFluid const > tempshared1 ;
  std::shared_ptr< dive::problems::IFluid const > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  IMatrix3DPtr result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_dive__problems__IFluid_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IFluid_GetVelocity" "', argument " "1"" of type '" "dive::problems::IFluid const *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const dive::problems::IFluid > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const dive::problems::IFluid > * >(argp1);
      arg1 = const_cast< dive::problems::IFluid * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const dive::problems::IFluid > * >(argp1);
      arg1 = const_cast< dive::problems::IFluid * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = ((dive::problems::IFluid const *)arg1)->GetVelocity();
  {
    std::shared_ptr<  values::IMatrix3D > *smartresult = result ? new std::shared_ptr<  values::IMatrix3D >(result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_std__shared_ptrT_values__IMatrix3D_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IFluid_SetTemperature(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  dive::problems::IFluid *arg1 = (dive::problems::IFluid *) 0 ;
  IScalar3DPtr arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< dive::problems::IFluid > tempshared1 ;
  std::shared_ptr< dive::problems::IFluid > *smartarg1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "IFluid_SetTemperature", 2, 2, swig_obj)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_dive__problems__IFluid_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IFluid_SetTemperature" "', argument " "1"" of type '" "dive::problems::IFluid *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  dive::problems::IFluid > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  dive::problems::IFluid > * >(argp1);
      arg1 = const_cast< dive::problems::IFluid * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  dive::problems::IFluid > * >(argp1);
      arg1 = const_cast< dive::problems::IFluid * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    int newmem = 0;
    res2 = SWIG_ConvertPtrAndOwn(swig_obj[1], &argp2, SWIGTYPE_p_std__shared_ptrT_values__IScalar3D_t,  0 , &newmem);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IFluid_SetTemperature" "', argument " "2"" of type '" "IScalar3DPtr""'");
    }
    if (argp2) arg2 = *(reinterpret_cast< IScalar3DPtr * >(argp2));
    if (newmem & SWIG_CAST_NEW_MEMORY) delete reinterpret_cast< IScalar3DPtr * >(argp2);
  }
  (arg1)->SetTemperature(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IFluid_SetPressure(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  dive::problems::IFluid *arg1 = (dive::problems::IFluid *) 0 ;
  IScalar3DPtr arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< dive::problems::IFluid > tempshared1 ;
  std::shared_ptr< dive::problems::IFluid > *smartarg1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "IFluid_SetPressure", 2, 2, swig_obj)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_dive__problems__IFluid_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IFluid_SetPressure" "', argument " "1"" of type '" "dive::problems::IFluid *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  dive::problems::IFluid > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  dive::problems::IFluid > * >(argp1);
      arg1 = const_cast< dive::problems::IFluid * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  dive::problems::IFluid > * >(argp1);
      arg1 = const_cast< dive::problems::IFluid * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    int newmem = 0;
    res2 = SWIG_ConvertPtrAndOwn(swig_obj[1], &argp2, SWIGTYPE_p_std__shared_ptrT_values__IScalar3D_t,  0 , &newmem);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IFluid_SetPressure" "', argument " "2"" of type '" "IScalar3DPtr""'");
    }
    if (argp2) arg2 = *(reinterpret_cast< IScalar3DPtr * >(argp2));
    if (newmem & SWIG_CAST_NEW_MEMORY) delete reinterpret_cast< IScalar3DPtr * >(argp2);
  }
  (arg1)->SetPressure(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IFluid_Mass(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  dive::problems::IFluid *arg1 = (dive::problems::IFluid *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< dive::problems::IFluid const > tempshared1 ;
  std::shared_ptr< dive::problems::IFluid const > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  Sparse result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_dive__problems__IFluid_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IFluid_Mass" "', argument " "1"" of type '" "dive::problems::IFluid const *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const dive::problems::IFluid > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const dive::problems::IFluid > * >(argp1);
      arg1 = const_cast< dive::problems::IFluid * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const dive::problems::IFluid > * >(argp1);
      arg1 = const_cast< dive::problems::IFluid * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = ((dive::problems::IFluid const *)arg1)->Mass();
  resultobj = SWIG_NewPointerObj((new Sparse(result)), SWIGTYPE_p_eilig__Ellpack, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IFluid_Stiffness(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  dive::problems::IFluid *arg1 = (dive::problems::IFluid *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< dive::problems::IFluid const > tempshared1 ;
  std::shared_ptr< dive::problems::IFluid const > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  Sparse result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_dive__problems__IFluid_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IFluid_Stiffness" "', argument " "1"" of type '" "dive::problems::IFluid const *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const dive::problems::IFluid > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const dive::problems::IFluid > * >(argp1);
      arg1 = const_cast< dive::problems::IFluid * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const dive::problems::IFluid > * >(argp1);
      arg1 = const_cast< dive::problems::IFluid * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = ((dive::problems::IFluid const *)arg1)->Stiffness();
  resultobj = SWIG_NewPointerObj((new Sparse(result)), SWIGTYPE_p_eilig__Ellpack, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IFluid_Convection(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  dive::problems::IFluid *arg1 = (dive::problems::IFluid *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< dive::problems::IFluid const > tempshared1 ;
  std::shared_ptr< dive::problems::IFluid const > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  Sparse result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_dive__problems__IFluid_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IFluid_Convection" "', argument " "1"" of type '" "dive::problems::IFluid const *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const dive::problems::IFluid > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const dive::problems::IFluid > * >(argp1);
      arg1 = const_cast< dive::problems::IFluid * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const dive::problems::IFluid > * >(argp1);
      arg1 = const_cast< dive::problems::IFluid * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = ((dive::problems::IFluid const *)arg1)->Convection();
  resultobj = SWIG_NewPointerObj((new Sparse(result)), SWIGTYPE_p_eilig__Ellpack, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IFluid_Stabilization(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  dive::problems::IFluid *arg1 = (dive::problems::IFluid *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< dive::problems::IFluid const > tempshared1 ;
  std::shared_ptr< dive::problems::IFluid const > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  Sparse result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_dive__problems__IFluid_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IFluid_Stabilization" "', argument " "1"" of type '" "dive::problems::IFluid const *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const dive::problems::IFluid > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const dive::problems::IFluid > * >(argp1);
      arg1 = const_cast< dive::problems::IFluid * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const dive::problems::IFluid > * >(argp1);
      arg1 = const_cast< dive::problems::IFluid * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = ((dive::problems::IFluid const *)arg1)->Stabilization();
  resultobj = SWIG_NewPointerObj((new Sparse(result)), SWIGTYPE_p_eilig__Ellpack, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IFluid_LoadDistributedVolume(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  dive::problems::IFluid *arg1 = (dive::problems::IFluid *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< dive::problems::IFluid const > tempshared1 ;
  std::shared_ptr< dive::problems::IFluid const > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  Vector result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_dive__problems__IFluid_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IFluid_LoadDistributedVolume" "', argument " "1"" of type '" "dive::problems::IFluid const *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const dive::problems::IFluid > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const dive::problems::IFluid > * >(argp1);
      arg1 = const_cast< dive::problems::IFluid * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const dive::problems::IFluid > * >(argp1);
      arg1 = const_cast< dive::problems::IFluid * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = ((dive::problems::IFluid const *)arg1)->LoadDistributedVolume();
  resultobj = SWIG_NewPointerObj((new Vector(result)), SWIGTYPE_p_eilig__Vector, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IFluid_LoadDistributedVolumeStabilization(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  dive::problems::IFluid *arg1 = (dive::problems::IFluid *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< dive::problems::IFluid const > tempshared1 ;
  std::shared_ptr< dive::problems::IFluid const > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  Vector result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_dive__problems__IFluid_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IFluid_LoadDistributedVolumeStabilization" "', argument " "1"" of type '" "dive::problems::IFluid const *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const dive::problems::IFluid > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const dive::problems::IFluid > * >(argp1);
      arg1 = const_cast< dive::problems::IFluid * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const dive::problems::IFluid > * >(argp1);
      arg1 = const_cast< dive::problems::IFluid * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = ((dive::problems::IFluid const *)arg1)->LoadDistributedVolumeStabilization();
  resultobj = SWIG_NewPointerObj((new Vector(result)), SWIGTYPE_p_eilig__Vector, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IFluid_Momentum(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  dive::problems::IFluid *arg1 = (dive::problems::IFluid *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< dive::problems::IFluid const > tempshared1 ;
  std::shared_ptr< dive::problems::IFluid const > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  Vector result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_dive__problems__IFluid_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IFluid_Momentum" "', argument " "1"" of type '" "dive::problems::IFluid const *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const dive::problems::IFluid > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const dive::problems::IFluid > * >(argp1);
      arg1 = const_cast< dive::problems::IFluid * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const dive::problems::IFluid > * >(argp1);
      arg1 = const_cast< dive::problems::IFluid * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = ((dive::problems::IFluid const *)arg1)->Momentum();
  resultobj = SWIG_NewPointerObj((new Vector(result)), SWIGTYPE_p_eilig__Vector, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IFluid_Velocity(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  dive::problems::IFluid *arg1 = (dive::problems::IFluid *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< dive::problems::IFluid const > tempshared1 ;
  std::shared_ptr< dive::problems::IFluid const > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  Vector result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_dive__problems__IFluid_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IFluid_Velocity" "', argument " "1"" of type '" "dive::problems::IFluid const *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const dive::problems::IFluid > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const dive::problems::IFluid > * >(argp1);
      arg1 = const_cast< dive::problems::IFluid * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const dive::problems::IFluid > * >(argp1);
      arg1 = const_cast< dive::problems::IFluid * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = ((dive::problems::IFluid const *)arg1)->Velocity();
  resultobj = SWIG_NewPointerObj((new Vector(result)), SWIGTYPE_p_eilig__Vector, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *IFluid_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_std__shared_ptrT_dive__problems__IFluid_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_delete_IPressure(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  dive::problems::IPressure *arg1 = (dive::problems::IPressure *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< dive::problems::IPressure > tempshared1 ;
  std::shared_ptr< dive::problems::IPressure > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_dive__problems__IPressure_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_IPressure" "', argument " "1"" of type '" "dive::problems::IPressure *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  dive::problems::IPressure > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  dive::problems::IPressure > * >(argp1);
      arg1 = const_cast< dive::problems::IPressure * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  dive::problems::IPressure > * >(argp1);
      arg1 = const_cast< dive::problems::IPressure * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  (void)arg1; delete smartarg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IPressure_GetTemperature(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  dive::problems::IPressure *arg1 = (dive::problems::IPressure *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< dive::problems::IPressure const > tempshared1 ;
  std::shared_ptr< dive::problems::IPressure const > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  IScalar3DPtr result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_dive__problems__IPressure_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IPressure_GetTemperature" "', argument " "1"" of type '" "dive::problems::IPressure const *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const dive::problems::IPressure > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const dive::problems::IPressure > * >(argp1);
      arg1 = const_cast< dive::problems::IPressure * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const dive::problems::IPressure > * >(argp1);
      arg1 = const_cast< dive::problems::IPressure * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = ((dive::problems::IPressure const *)arg1)->GetTemperature();
  {
    std::shared_ptr<  values::IScalar3D > *smartresult = result ? new std::shared_ptr<  values::IScalar3D >(result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_std__shared_ptrT_values__IScalar3D_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IPressure_GetPressure(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  dive::problems::IPressure *arg1 = (dive::problems::IPressure *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< dive::problems::IPressure const > tempshared1 ;
  std::shared_ptr< dive::problems::IPressure const > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  IScalar3DPtr result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_dive__problems__IPressure_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IPressure_GetPressure" "', argument " "1"" of type '" "dive::problems::IPressure const *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const dive::problems::IPressure > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const dive::problems::IPressure > * >(argp1);
      arg1 = const_cast< dive::problems::IPressure * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const dive::problems::IPressure > * >(argp1);
      arg1 = const_cast< dive::problems::IPressure * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = ((dive::problems::IPressure const *)arg1)->GetPressure();
  {
    std::shared_ptr<  values::IScalar3D > *smartresult = result ? new std::shared_ptr<  values::IScalar3D >(result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_std__shared_ptrT_values__IScalar3D_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IPressure_GetVelocity(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  dive::problems::IPressure *arg1 = (dive::problems::IPressure *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< dive::problems::IPressure const > tempshared1 ;
  std::shared_ptr< dive::problems::IPressure const > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  IMatrix3DPtr result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_dive__problems__IPressure_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IPressure_GetVelocity" "', argument " "1"" of type '" "dive::problems::IPressure const *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const dive::problems::IPressure > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const dive::problems::IPressure > * >(argp1);
      arg1 = const_cast< dive::problems::IPressure * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const dive::problems::IPressure > * >(argp1);
      arg1 = const_cast< dive::problems::IPressure * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = ((dive::problems::IPressure const *)arg1)->GetVelocity();
  {
    std::shared_ptr<  values::IMatrix3D > *smartresult = result ? new std::shared_ptr<  values::IMatrix3D >(result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_std__shared_ptrT_values__IMatrix3D_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IPressure_SetTemperature(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  dive::problems::IPressure *arg1 = (dive::problems::IPressure *) 0 ;
  IScalar3DPtr arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< dive::problems::IPressure > tempshared1 ;
  std::shared_ptr< dive::problems::IPressure > *smartarg1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "IPressure_SetTemperature", 2, 2, swig_obj)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_dive__problems__IPressure_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IPressure_SetTemperature" "', argument " "1"" of type '" "dive::problems::IPressure *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  dive::problems::IPressure > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  dive::problems::IPressure > * >(argp1);
      arg1 = const_cast< dive::problems::IPressure * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  dive::problems::IPressure > * >(argp1);
      arg1 = const_cast< dive::problems::IPressure * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    int newmem = 0;
    res2 = SWIG_ConvertPtrAndOwn(swig_obj[1], &argp2, SWIGTYPE_p_std__shared_ptrT_values__IScalar3D_t,  0 , &newmem);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IPressure_SetTemperature" "', argument " "2"" of type '" "IScalar3DPtr""'");
    }
    if (argp2) arg2 = *(reinterpret_cast< IScalar3DPtr * >(argp2));
    if (newmem & SWIG_CAST_NEW_MEMORY) delete reinterpret_cast< IScalar3DPtr * >(argp2);
  }
  (arg1)->SetTemperature(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IPressure_SetVelocity(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  dive::problems::IPressure *arg1 = (dive::problems::IPressure *) 0 ;
  IMatrix3DPtr arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< dive::problems::IPressure > tempshared1 ;
  std::shared_ptr< dive::problems::IPressure > *smartarg1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "IPressure_SetVelocity", 2, 2, swig_obj)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_dive__problems__IPressure_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IPressure_SetVelocity" "', argument " "1"" of type '" "dive::problems::IPressure *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  dive::problems::IPressure > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  dive::problems::IPressure > * >(argp1);
      arg1 = const_cast< dive::problems::IPressure * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  dive::problems::IPressure > * >(argp1);
      arg1 = const_cast< dive::problems::IPressure * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    int newmem = 0;
    res2 = SWIG_ConvertPtrAndOwn(swig_obj[1], &argp2, SWIGTYPE_p_std__shared_ptrT_values__IMatrix3D_t,  0 , &newmem);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IPressure_SetVelocity" "', argument " "2"" of type '" "IMatrix3DPtr""'");
    }
    if (argp2) arg2 = *(reinterpret_cast< IMatrix3DPtr * >(argp2));
    if (newmem & SWIG_CAST_NEW_MEMORY) delete reinterpret_cast< IMatrix3DPtr * >(argp2);
  }
  (arg1)->SetVelocity(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IPressure_Mass(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  dive::problems::IPressure *arg1 = (dive::problems::IPressure *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< dive::problems::IPressure const > tempshared1 ;
  std::shared_ptr< dive::problems::IPressure const > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  Sparse result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_dive__problems__IPressure_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IPressure_Mass" "', argument " "1"" of type '" "dive::problems::IPressure const *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const dive::problems::IPressure > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const dive::problems::IPressure > * >(argp1);
      arg1 = const_cast< dive::problems::IPressure * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const dive::problems::IPressure > * >(argp1);
      arg1 = const_cast< dive::problems::IPressure * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = ((dive::problems::IPressure const *)arg1)->Mass();
  resultobj = SWIG_NewPointerObj((new Sparse(result)), SWIGTYPE_p_eilig__Ellpack, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IPressure_Stiffness(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  dive::problems::IPressure *arg1 = (dive::problems::IPressure *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< dive::problems::IPressure const > tempshared1 ;
  std::shared_ptr< dive::problems::IPressure const > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  Sparse result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_dive__problems__IPressure_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IPressure_Stiffness" "', argument " "1"" of type '" "dive::problems::IPressure const *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const dive::problems::IPressure > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const dive::problems::IPressure > * >(argp1);
      arg1 = const_cast< dive::problems::IPressure * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const dive::problems::IPressure > * >(argp1);
      arg1 = const_cast< dive::problems::IPressure * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = ((dive::problems::IPressure const *)arg1)->Stiffness();
  resultobj = SWIG_NewPointerObj((new Sparse(result)), SWIGTYPE_p_eilig__Ellpack, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IPressure_Crossed(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  dive::problems::IPressure *arg1 = (dive::problems::IPressure *) 0 ;
  IProblemPtr arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< dive::problems::IPressure const > tempshared1 ;
  std::shared_ptr< dive::problems::IPressure const > *smartarg1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  Sparse result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "IPressure_Crossed", 2, 2, swig_obj)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_dive__problems__IPressure_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IPressure_Crossed" "', argument " "1"" of type '" "dive::problems::IPressure const *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const dive::problems::IPressure > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const dive::problems::IPressure > * >(argp1);
      arg1 = const_cast< dive::problems::IPressure * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const dive::problems::IPressure > * >(argp1);
      arg1 = const_cast< dive::problems::IPressure * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    int newmem = 0;
    res2 = SWIG_ConvertPtrAndOwn(swig_obj[1], &argp2, SWIGTYPE_p_std__shared_ptrT_dive__problems__IProblem_t,  0 , &newmem);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IPressure_Crossed" "', argument " "2"" of type '" "IProblemPtr""'");
    }
    if (argp2) arg2 = *(reinterpret_cast< IProblemPtr * >(argp2));
    if (newmem & SWIG_CAST_NEW_MEMORY) delete reinterpret_cast< IProblemPtr * >(argp2);
  }
  result = ((dive::problems::IPressure const *)arg1)->Crossed(arg2);
  resultobj = SWIG_NewPointerObj((new Sparse(result)), SWIGTYPE_p_eilig__Ellpack, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IPressure_Stabilization(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  dive::problems::IPressure *arg1 = (dive::problems::IPressure *) 0 ;
  IProblemPtr arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< dive::problems::IPressure const > tempshared1 ;
  std::shared_ptr< dive::problems::IPressure const > *smartarg1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  Sparse result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "IPressure_Stabilization", 2, 2, swig_obj)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_dive__problems__IPressure_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IPressure_Stabilization" "', argument " "1"" of type '" "dive::problems::IPressure const *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const dive::problems::IPressure > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const dive::problems::IPressure > * >(argp1);
      arg1 = const_cast< dive::problems::IPressure * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const dive::problems::IPressure > * >(argp1);
      arg1 = const_cast< dive::problems::IPressure * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    int newmem = 0;
    res2 = SWIG_ConvertPtrAndOwn(swig_obj[1], &argp2, SWIGTYPE_p_std__shared_ptrT_dive__problems__IProblem_t,  0 , &newmem);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IPressure_Stabilization" "', argument " "2"" of type '" "IProblemPtr""'");
    }
    if (argp2) arg2 = *(reinterpret_cast< IProblemPtr * >(argp2));
    if (newmem & SWIG_CAST_NEW_MEMORY) delete reinterpret_cast< IProblemPtr * >(argp2);
  }
  result = ((dive::problems::IPressure const *)arg1)->Stabilization(arg2);
  resultobj = SWIG_NewPointerObj((new Sparse(result)), SWIGTYPE_p_eilig__Ellpack, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IPressure_LoadDistributedFaceFlux(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  dive::problems::IPressure *arg1 = (dive::problems::IPressure *) 0 ;
  IProblemPtr arg2 ;
  Vector *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< dive::problems::IPressure const > tempshared1 ;
  std::shared_ptr< dive::problems::IPressure const > *smartarg1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject *swig_obj[3] ;
  Vector result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "IPressure_LoadDistributedFaceFlux", 3, 3, swig_obj)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_dive__problems__IPressure_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IPressure_LoadDistributedFaceFlux" "', argument " "1"" of type '" "dive::problems::IPressure const *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const dive::problems::IPressure > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const dive::problems::IPressure > * >(argp1);
      arg1 = const_cast< dive::problems::IPressure * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const dive::problems::IPressure > * >(argp1);
      arg1 = const_cast< dive::problems::IPressure * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    int newmem = 0;
    res2 = SWIG_ConvertPtrAndOwn(swig_obj[1], &argp2, SWIGTYPE_p_std__shared_ptrT_dive__problems__IProblem_t,  0 , &newmem);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IPressure_LoadDistributedFaceFlux" "', argument " "2"" of type '" "IProblemPtr""'");
    }
    if (argp2) arg2 = *(reinterpret_cast< IProblemPtr * >(argp2));
    if (newmem & SWIG_CAST_NEW_MEMORY) delete reinterpret_cast< IProblemPtr * >(argp2);
  }
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_eilig__Vector,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "IPressure_LoadDistributedFaceFlux" "', argument " "3"" of type '" "Vector const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "IPressure_LoadDistributedFaceFlux" "', argument " "3"" of type '" "Vector const &""'"); 
  }
  arg3 = reinterpret_cast< Vector * >(argp3);
  result = ((dive::problems::IPressure const *)arg1)->LoadDistributedFaceFlux(arg2,(Vector const &)*arg3);
  resultobj = SWIG_NewPointerObj((new Vector(result)), SWIGTYPE_p_eilig__Vector, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IPressure_Pressure(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  dive::problems::IPressure *arg1 = (dive::problems::IPressure *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< dive::problems::IPressure const > tempshared1 ;
  std::shared_ptr< dive::problems::IPressure const > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  Vector result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_dive__problems__IPressure_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IPressure_Pressure" "', argument " "1"" of type '" "dive::problems::IPressure const *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const dive::problems::IPressure > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const dive::problems::IPressure > * >(argp1);
      arg1 = const_cast< dive::problems::IPressure * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const dive::problems::IPressure > * >(argp1);
      arg1 = const_cast< dive::problems::IPressure * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = ((dive::problems::IPressure const *)arg1)->Pressure();
  resultobj = SWIG_NewPointerObj((new Vector(result)), SWIGTYPE_p_eilig__Vector, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *IPressure_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_std__shared_ptrT_dive__problems__IPressure_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_delete_IThermal(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  dive::problems::IThermal *arg1 = (dive::problems::IThermal *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< dive::problems::IThermal > tempshared1 ;
  std::shared_ptr< dive::problems::IThermal > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_dive__problems__IThermal_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_IThermal" "', argument " "1"" of type '" "dive::problems::IThermal *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  dive::problems::IThermal > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  dive::problems::IThermal > * >(argp1);
      arg1 = const_cast< dive::problems::IThermal * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  dive::problems::IThermal > * >(argp1);
      arg1 = const_cast< dive::problems::IThermal * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  (void)arg1; delete smartarg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IThermal_GetTemperature(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  dive::problems::IThermal *arg1 = (dive::problems::IThermal *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< dive::problems::IThermal const > tempshared1 ;
  std::shared_ptr< dive::problems::IThermal const > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  IScalar3DPtr result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_dive__problems__IThermal_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IThermal_GetTemperature" "', argument " "1"" of type '" "dive::problems::IThermal const *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const dive::problems::IThermal > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const dive::problems::IThermal > * >(argp1);
      arg1 = const_cast< dive::problems::IThermal * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const dive::problems::IThermal > * >(argp1);
      arg1 = const_cast< dive::problems::IThermal * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = ((dive::problems::IThermal const *)arg1)->GetTemperature();
  {
    std::shared_ptr<  values::IScalar3D > *smartresult = result ? new std::shared_ptr<  values::IScalar3D >(result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_std__shared_ptrT_values__IScalar3D_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IThermal_GetPressure(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  dive::problems::IThermal *arg1 = (dive::problems::IThermal *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< dive::problems::IThermal const > tempshared1 ;
  std::shared_ptr< dive::problems::IThermal const > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  IScalar3DPtr result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_dive__problems__IThermal_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IThermal_GetPressure" "', argument " "1"" of type '" "dive::problems::IThermal const *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const dive::problems::IThermal > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const dive::problems::IThermal > * >(argp1);
      arg1 = const_cast< dive::problems::IThermal * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const dive::problems::IThermal > * >(argp1);
      arg1 = const_cast< dive::problems::IThermal * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = ((dive::problems::IThermal const *)arg1)->GetPressure();
  {
    std::shared_ptr<  values::IScalar3D > *smartresult = result ? new std::shared_ptr<  values::IScalar3D >(result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_std__shared_ptrT_values__IScalar3D_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IThermal_GetVelocity(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  dive::problems::IThermal *arg1 = (dive::problems::IThermal *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< dive::problems::IThermal const > tempshared1 ;
  std::shared_ptr< dive::problems::IThermal const > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  IMatrix3DPtr result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_dive__problems__IThermal_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IThermal_GetVelocity" "', argument " "1"" of type '" "dive::problems::IThermal const *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const dive::problems::IThermal > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const dive::problems::IThermal > * >(argp1);
      arg1 = const_cast< dive::problems::IThermal * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const dive::problems::IThermal > * >(argp1);
      arg1 = const_cast< dive::problems::IThermal * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = ((dive::problems::IThermal const *)arg1)->GetVelocity();
  {
    std::shared_ptr<  values::IMatrix3D > *smartresult = result ? new std::shared_ptr<  values::IMatrix3D >(result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_std__shared_ptrT_values__IMatrix3D_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IThermal_SetPressure(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  dive::problems::IThermal *arg1 = (dive::problems::IThermal *) 0 ;
  IScalar3DPtr arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< dive::problems::IThermal > tempshared1 ;
  std::shared_ptr< dive::problems::IThermal > *smartarg1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "IThermal_SetPressure", 2, 2, swig_obj)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_dive__problems__IThermal_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IThermal_SetPressure" "', argument " "1"" of type '" "dive::problems::IThermal *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  dive::problems::IThermal > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  dive::problems::IThermal > * >(argp1);
      arg1 = const_cast< dive::problems::IThermal * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  dive::problems::IThermal > * >(argp1);
      arg1 = const_cast< dive::problems::IThermal * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    int newmem = 0;
    res2 = SWIG_ConvertPtrAndOwn(swig_obj[1], &argp2, SWIGTYPE_p_std__shared_ptrT_values__IScalar3D_t,  0 , &newmem);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IThermal_SetPressure" "', argument " "2"" of type '" "IScalar3DPtr""'");
    }
    if (argp2) arg2 = *(reinterpret_cast< IScalar3DPtr * >(argp2));
    if (newmem & SWIG_CAST_NEW_MEMORY) delete reinterpret_cast< IScalar3DPtr * >(argp2);
  }
  (arg1)->SetPressure(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IThermal_SetVelocity(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  dive::problems::IThermal *arg1 = (dive::problems::IThermal *) 0 ;
  IMatrix3DPtr arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< dive::problems::IThermal > tempshared1 ;
  std::shared_ptr< dive::problems::IThermal > *smartarg1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "IThermal_SetVelocity", 2, 2, swig_obj)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_dive__problems__IThermal_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IThermal_SetVelocity" "', argument " "1"" of type '" "dive::problems::IThermal *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  dive::problems::IThermal > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  dive::problems::IThermal > * >(argp1);
      arg1 = const_cast< dive::problems::IThermal * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  dive::problems::IThermal > * >(argp1);
      arg1 = const_cast< dive::problems::IThermal * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    int newmem = 0;
    res2 = SWIG_ConvertPtrAndOwn(swig_obj[1], &argp2, SWIGTYPE_p_std__shared_ptrT_values__IMatrix3D_t,  0 , &newmem);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IThermal_SetVelocity" "', argument " "2"" of type '" "IMatrix3DPtr""'");
    }
    if (argp2) arg2 = *(reinterpret_cast< IMatrix3DPtr * >(argp2));
    if (newmem & SWIG_CAST_NEW_MEMORY) delete reinterpret_cast< IMatrix3DPtr * >(argp2);
  }
  (arg1)->SetVelocity(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IThermal_Mass(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  dive::problems::IThermal *arg1 = (dive::problems::IThermal *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< dive::problems::IThermal const > tempshared1 ;
  std::shared_ptr< dive::problems::IThermal const > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  Sparse result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_dive__problems__IThermal_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IThermal_Mass" "', argument " "1"" of type '" "dive::problems::IThermal const *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const dive::problems::IThermal > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const dive::problems::IThermal > * >(argp1);
      arg1 = const_cast< dive::problems::IThermal * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const dive::problems::IThermal > * >(argp1);
      arg1 = const_cast< dive::problems::IThermal * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = ((dive::problems::IThermal const *)arg1)->Mass();
  resultobj = SWIG_NewPointerObj((new Sparse(result)), SWIGTYPE_p_eilig__Ellpack, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IThermal_Stiffness(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  dive::problems::IThermal *arg1 = (dive::problems::IThermal *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< dive::problems::IThermal const > tempshared1 ;
  std::shared_ptr< dive::problems::IThermal const > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  Sparse result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_dive__problems__IThermal_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IThermal_Stiffness" "', argument " "1"" of type '" "dive::problems::IThermal const *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const dive::problems::IThermal > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const dive::problems::IThermal > * >(argp1);
      arg1 = const_cast< dive::problems::IThermal * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const dive::problems::IThermal > * >(argp1);
      arg1 = const_cast< dive::problems::IThermal * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = ((dive::problems::IThermal const *)arg1)->Stiffness();
  resultobj = SWIG_NewPointerObj((new Sparse(result)), SWIGTYPE_p_eilig__Ellpack, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IThermal_Convection(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  dive::problems::IThermal *arg1 = (dive::problems::IThermal *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< dive::problems::IThermal const > tempshared1 ;
  std::shared_ptr< dive::problems::IThermal const > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  Sparse result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_dive__problems__IThermal_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IThermal_Convection" "', argument " "1"" of type '" "dive::problems::IThermal const *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const dive::problems::IThermal > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const dive::problems::IThermal > * >(argp1);
      arg1 = const_cast< dive::problems::IThermal * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const dive::problems::IThermal > * >(argp1);
      arg1 = const_cast< dive::problems::IThermal * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = ((dive::problems::IThermal const *)arg1)->Convection();
  resultobj = SWIG_NewPointerObj((new Sparse(result)), SWIGTYPE_p_eilig__Ellpack, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IThermal_Stabilization(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  dive::problems::IThermal *arg1 = (dive::problems::IThermal *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< dive::problems::IThermal const > tempshared1 ;
  std::shared_ptr< dive::problems::IThermal const > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  Sparse result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_dive__problems__IThermal_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IThermal_Stabilization" "', argument " "1"" of type '" "dive::problems::IThermal const *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const dive::problems::IThermal > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const dive::problems::IThermal > * >(argp1);
      arg1 = const_cast< dive::problems::IThermal * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const dive::problems::IThermal > * >(argp1);
      arg1 = const_cast< dive::problems::IThermal * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = ((dive::problems::IThermal const *)arg1)->Stabilization();
  resultobj = SWIG_NewPointerObj((new Sparse(result)), SWIGTYPE_p_eilig__Ellpack, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IThermal_Energy(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  dive::problems::IThermal *arg1 = (dive::problems::IThermal *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< dive::problems::IThermal const > tempshared1 ;
  std::shared_ptr< dive::problems::IThermal const > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  Vector result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_dive__problems__IThermal_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IThermal_Energy" "', argument " "1"" of type '" "dive::problems::IThermal const *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const dive::problems::IThermal > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const dive::problems::IThermal > * >(argp1);
      arg1 = const_cast< dive::problems::IThermal * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const dive::problems::IThermal > * >(argp1);
      arg1 = const_cast< dive::problems::IThermal * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = ((dive::problems::IThermal const *)arg1)->Energy();
  resultobj = SWIG_NewPointerObj((new Vector(result)), SWIGTYPE_p_eilig__Vector, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *IThermal_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_std__shared_ptrT_dive__problems__IThermal_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_CreateProblemThermal__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **SWIGUNUSEDPARM(swig_obj)) {
  PyObject *resultobj = 0;
  ProblemThermalPtr result;
  
  (void)self;
  if ((nobjs < 0) || (nobjs > 0)) SWIG_fail;
  result = dive::problems::CreateProblemThermal();
  {
    std::shared_ptr<  dive::problems::ProblemThermal > *smartresult = result ? new std::shared_ptr<  dive::problems::ProblemThermal >(result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_std__shared_ptrT_dive__problems__ProblemThermal_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CreateProblemThermal__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  Tag arg1 ;
  size_t val1 ;
  int ecode1 = 0 ;
  ProblemThermalPtr result;
  
  (void)self;
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "CreateProblemThermal" "', argument " "1"" of type '" "Tag""'");
  } 
  arg1 = static_cast< Tag >(val1);
  result = dive::problems::CreateProblemThermal(SWIG_STD_MOVE(arg1));
  {
    std::shared_ptr<  dive::problems::ProblemThermal > *smartresult = result ? new std::shared_ptr<  dive::problems::ProblemThermal >(result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_std__shared_ptrT_dive__problems__ProblemThermal_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CreateProblemThermal(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "CreateProblemThermal", 0, 1, argv))) SWIG_fail;
  --argc;
  if (argc == 0) {
    return _wrap_CreateProblemThermal__SWIG_0(self, argc, argv);
  }
  if (argc == 1) {
    int _v = 0;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_CreateProblemThermal__SWIG_1(self, argc, argv);
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'CreateProblemThermal'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    dive::problems::CreateProblemThermal()\n"
    "    dive::problems::CreateProblemThermal(Tag)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_ProblemThermal(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  dive::problems::ProblemThermal *arg1 = (dive::problems::ProblemThermal *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< dive::problems::ProblemThermal > tempshared1 ;
  std::shared_ptr< dive::problems::ProblemThermal > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_dive__problems__ProblemThermal_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ProblemThermal" "', argument " "1"" of type '" "dive::problems::ProblemThermal *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  dive::problems::ProblemThermal > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  dive::problems::ProblemThermal > * >(argp1);
      arg1 = const_cast< dive::problems::ProblemThermal * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  dive::problems::ProblemThermal > * >(argp1);
      arg1 = const_cast< dive::problems::ProblemThermal * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  (void)arg1; delete smartarg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ProblemThermal_Create(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ProblemThermalPtr result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "ProblemThermal_Create", 0, 0, 0)) SWIG_fail;
  result = dive::problems::ProblemThermal::Create();
  {
    std::shared_ptr<  dive::problems::ProblemThermal > *smartresult = result ? new std::shared_ptr<  dive::problems::ProblemThermal >(result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_std__shared_ptrT_dive__problems__ProblemThermal_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ProblemThermal_GetPtr__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  dive::problems::ProblemThermal *arg1 = (dive::problems::ProblemThermal *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< dive::problems::ProblemThermal > tempshared1 ;
  std::shared_ptr< dive::problems::ProblemThermal > *smartarg1 = 0 ;
  ProblemThermalPtr result;
  
  (void)self;
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_dive__problems__ProblemThermal_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ProblemThermal_GetPtr" "', argument " "1"" of type '" "dive::problems::ProblemThermal *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  dive::problems::ProblemThermal > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  dive::problems::ProblemThermal > * >(argp1);
      arg1 = const_cast< dive::problems::ProblemThermal * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  dive::problems::ProblemThermal > * >(argp1);
      arg1 = const_cast< dive::problems::ProblemThermal * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = (arg1)->GetPtr();
  {
    std::shared_ptr<  dive::problems::ProblemThermal > *smartresult = result ? new std::shared_ptr<  dive::problems::ProblemThermal >(result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_std__shared_ptrT_dive__problems__ProblemThermal_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ProblemThermal_GetPtr__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  dive::problems::ProblemThermal *arg1 = (dive::problems::ProblemThermal *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< dive::problems::ProblemThermal const > tempshared1 ;
  std::shared_ptr< dive::problems::ProblemThermal const > *smartarg1 = 0 ;
  ConstProblemThermalPtr result;
  
  (void)self;
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_dive__problems__ProblemThermal_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ProblemThermal_GetPtr" "', argument " "1"" of type '" "dive::problems::ProblemThermal const *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const dive::problems::ProblemThermal > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const dive::problems::ProblemThermal > * >(argp1);
      arg1 = const_cast< dive::problems::ProblemThermal * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const dive::problems::ProblemThermal > * >(argp1);
      arg1 = const_cast< dive::problems::ProblemThermal * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = ((dive::problems::ProblemThermal const *)arg1)->GetPtr();
  {
    std::shared_ptr< const dive::problems::ProblemThermal > *smartresult = result ? new std::shared_ptr< const dive::problems::ProblemThermal >(result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_std__shared_ptrT_dive__problems__ProblemThermal_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ProblemThermal_GetPtr(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "ProblemThermal_GetPtr", 0, 1, argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    int _v = 0;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_std__shared_ptrT_dive__problems__ProblemThermal_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_ProblemThermal_GetPtr__SWIG_0(self, argc, argv);
    }
  }
  if (argc == 1) {
    int _v = 0;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_std__shared_ptrT_dive__problems__ProblemThermal_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_ProblemThermal_GetPtr__SWIG_1(self, argc, argv);
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'ProblemThermal_GetPtr'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    dive::problems::ProblemThermal::GetPtr()\n"
    "    dive::problems::ProblemThermal::GetPtr() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ProblemThermal_GetNumberDof(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  dive::problems::ProblemThermal *arg1 = (dive::problems::ProblemThermal *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< dive::problems::ProblemThermal const > tempshared1 ;
  std::shared_ptr< dive::problems::ProblemThermal const > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  NumberDof result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_dive__problems__ProblemThermal_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ProblemThermal_GetNumberDof" "', argument " "1"" of type '" "dive::problems::ProblemThermal const *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const dive::problems::ProblemThermal > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const dive::problems::ProblemThermal > * >(argp1);
      arg1 = const_cast< dive::problems::ProblemThermal * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const dive::problems::ProblemThermal > * >(argp1);
      arg1 = const_cast< dive::problems::ProblemThermal * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = ((dive::problems::ProblemThermal const *)arg1)->GetNumberDof();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ProblemThermal_GetTotalDof(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  dive::problems::ProblemThermal *arg1 = (dive::problems::ProblemThermal *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< dive::problems::ProblemThermal const > tempshared1 ;
  std::shared_ptr< dive::problems::ProblemThermal const > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  NumberDof result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_dive__problems__ProblemThermal_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ProblemThermal_GetTotalDof" "', argument " "1"" of type '" "dive::problems::ProblemThermal const *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const dive::problems::ProblemThermal > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const dive::problems::ProblemThermal > * >(argp1);
      arg1 = const_cast< dive::problems::ProblemThermal * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const dive::problems::ProblemThermal > * >(argp1);
      arg1 = const_cast< dive::problems::ProblemThermal * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = ((dive::problems::ProblemThermal const *)arg1)->GetTotalDof();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ProblemThermal_GetPivot(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  dive::problems::ProblemThermal *arg1 = (dive::problems::ProblemThermal *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< dive::problems::ProblemThermal const > tempshared1 ;
  std::shared_ptr< dive::problems::ProblemThermal const > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  DofIndex result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_dive__problems__ProblemThermal_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ProblemThermal_GetPivot" "', argument " "1"" of type '" "dive::problems::ProblemThermal const *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const dive::problems::ProblemThermal > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const dive::problems::ProblemThermal > * >(argp1);
      arg1 = const_cast< dive::problems::ProblemThermal * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const dive::problems::ProblemThermal > * >(argp1);
      arg1 = const_cast< dive::problems::ProblemThermal * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = ((dive::problems::ProblemThermal const *)arg1)->GetPivot();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ProblemThermal_GetTimer(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  dive::problems::ProblemThermal *arg1 = (dive::problems::ProblemThermal *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< dive::problems::ProblemThermal const > tempshared1 ;
  std::shared_ptr< dive::problems::ProblemThermal const > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  ITimerPtr result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_dive__problems__ProblemThermal_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ProblemThermal_GetTimer" "', argument " "1"" of type '" "dive::problems::ProblemThermal const *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const dive::problems::ProblemThermal > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const dive::problems::ProblemThermal > * >(argp1);
      arg1 = const_cast< dive::problems::ProblemThermal * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const dive::problems::ProblemThermal > * >(argp1);
      arg1 = const_cast< dive::problems::ProblemThermal * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = ((dive::problems::ProblemThermal const *)arg1)->GetTimer();
  {
    std::shared_ptr<  dive::timers::ITimer > *smartresult = result ? new std::shared_ptr<  dive::timers::ITimer >(result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_std__shared_ptrT_dive__timers__ITimer_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ProblemThermal_GetTemperature(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  dive::problems::ProblemThermal *arg1 = (dive::problems::ProblemThermal *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< dive::problems::ProblemThermal const > tempshared1 ;
  std::shared_ptr< dive::problems::ProblemThermal const > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  IScalar3DPtr result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_dive__problems__ProblemThermal_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ProblemThermal_GetTemperature" "', argument " "1"" of type '" "dive::problems::ProblemThermal const *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const dive::problems::ProblemThermal > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const dive::problems::ProblemThermal > * >(argp1);
      arg1 = const_cast< dive::problems::ProblemThermal * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const dive::problems::ProblemThermal > * >(argp1);
      arg1 = const_cast< dive::problems::ProblemThermal * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = ((dive::problems::ProblemThermal const *)arg1)->GetTemperature();
  {
    std::shared_ptr<  values::IScalar3D > *smartresult = result ? new std::shared_ptr<  values::IScalar3D >(result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_std__shared_ptrT_values__IScalar3D_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ProblemThermal_GetPressure(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  dive::problems::ProblemThermal *arg1 = (dive::problems::ProblemThermal *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< dive::problems::ProblemThermal const > tempshared1 ;
  std::shared_ptr< dive::problems::ProblemThermal const > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  IScalar3DPtr result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_dive__problems__ProblemThermal_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ProblemThermal_GetPressure" "', argument " "1"" of type '" "dive::problems::ProblemThermal const *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const dive::problems::ProblemThermal > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const dive::problems::ProblemThermal > * >(argp1);
      arg1 = const_cast< dive::problems::ProblemThermal * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const dive::problems::ProblemThermal > * >(argp1);
      arg1 = const_cast< dive::problems::ProblemThermal * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = ((dive::problems::ProblemThermal const *)arg1)->GetPressure();
  {
    std::shared_ptr<  values::IScalar3D > *smartresult = result ? new std::shared_ptr<  values::IScalar3D >(result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_std__shared_ptrT_values__IScalar3D_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ProblemThermal_GetVelocity(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  dive::problems::ProblemThermal *arg1 = (dive::problems::ProblemThermal *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< dive::problems::ProblemThermal const > tempshared1 ;
  std::shared_ptr< dive::problems::ProblemThermal const > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  IMatrix3DPtr result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_dive__problems__ProblemThermal_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ProblemThermal_GetVelocity" "', argument " "1"" of type '" "dive::problems::ProblemThermal const *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const dive::problems::ProblemThermal > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const dive::problems::ProblemThermal > * >(argp1);
      arg1 = const_cast< dive::problems::ProblemThermal * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const dive::problems::ProblemThermal > * >(argp1);
      arg1 = const_cast< dive::problems::ProblemThermal * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = ((dive::problems::ProblemThermal const *)arg1)->GetVelocity();
  {
    std::shared_ptr<  values::IMatrix3D > *smartresult = result ? new std::shared_ptr<  values::IMatrix3D >(result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_std__shared_ptrT_values__IMatrix3D_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ProblemThermal_GetMesh(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  dive::problems::ProblemThermal *arg1 = (dive::problems::ProblemThermal *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< dive::problems::ProblemThermal const > tempshared1 ;
  std::shared_ptr< dive::problems::ProblemThermal const > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  IMeshPtr result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_dive__problems__ProblemThermal_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ProblemThermal_GetMesh" "', argument " "1"" of type '" "dive::problems::ProblemThermal const *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const dive::problems::ProblemThermal > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const dive::problems::ProblemThermal > * >(argp1);
      arg1 = const_cast< dive::problems::ProblemThermal * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const dive::problems::ProblemThermal > * >(argp1);
      arg1 = const_cast< dive::problems::ProblemThermal * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = ((dive::problems::ProblemThermal const *)arg1)->GetMesh();
  {
    std::shared_ptr<  dive::meshes::IMesh > *smartresult = result ? new std::shared_ptr<  dive::meshes::IMesh >(result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_std__shared_ptrT_dive__meshes__IMesh_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ProblemThermal_GetType(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  dive::problems::ProblemThermal *arg1 = (dive::problems::ProblemThermal *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< dive::problems::ProblemThermal const > tempshared1 ;
  std::shared_ptr< dive::problems::ProblemThermal const > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  Type result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_dive__problems__ProblemThermal_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ProblemThermal_GetType" "', argument " "1"" of type '" "dive::problems::ProblemThermal const *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const dive::problems::ProblemThermal > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const dive::problems::ProblemThermal > * >(argp1);
      arg1 = const_cast< dive::problems::ProblemThermal * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const dive::problems::ProblemThermal > * >(argp1);
      arg1 = const_cast< dive::problems::ProblemThermal * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = ((dive::problems::ProblemThermal const *)arg1)->GetType();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ProblemThermal_GetTag(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  dive::problems::ProblemThermal *arg1 = (dive::problems::ProblemThermal *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< dive::problems::ProblemThermal const > tempshared1 ;
  std::shared_ptr< dive::problems::ProblemThermal const > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  Tag result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_dive__problems__ProblemThermal_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ProblemThermal_GetTag" "', argument " "1"" of type '" "dive::problems::ProblemThermal const *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const dive::problems::ProblemThermal > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const dive::problems::ProblemThermal > * >(argp1);
      arg1 = const_cast< dive::problems::ProblemThermal * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const dive::problems::ProblemThermal > * >(argp1);
      arg1 = const_cast< dive::problems::ProblemThermal * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = ((dive::problems::ProblemThermal const *)arg1)->GetTag();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ProblemThermal_GetDirichlets(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  dive::problems::ProblemThermal *arg1 = (dive::problems::ProblemThermal *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< dive::problems::ProblemThermal const > tempshared1 ;
  std::shared_ptr< dive::problems::ProblemThermal const > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  Dirichlets *result = 0 ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_dive__problems__ProblemThermal_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ProblemThermal_GetDirichlets" "', argument " "1"" of type '" "dive::problems::ProblemThermal const *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const dive::problems::ProblemThermal > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const dive::problems::ProblemThermal > * >(argp1);
      arg1 = const_cast< dive::problems::ProblemThermal * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const dive::problems::ProblemThermal > * >(argp1);
      arg1 = const_cast< dive::problems::ProblemThermal * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = (Dirichlets *) &((dive::problems::ProblemThermal const *)arg1)->GetDirichlets();
  resultobj = swig::from(static_cast< std::vector< std::shared_ptr< dive::loads::IDirichlet >,std::allocator< std::shared_ptr< dive::loads::IDirichlet > > > >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ProblemThermal_GetLoads(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  dive::problems::ProblemThermal *arg1 = (dive::problems::ProblemThermal *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< dive::problems::ProblemThermal const > tempshared1 ;
  std::shared_ptr< dive::problems::ProblemThermal const > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  Loads *result = 0 ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_dive__problems__ProblemThermal_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ProblemThermal_GetLoads" "', argument " "1"" of type '" "dive::problems::ProblemThermal const *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const dive::problems::ProblemThermal > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const dive::problems::ProblemThermal > * >(argp1);
      arg1 = const_cast< dive::problems::ProblemThermal * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const dive::problems::ProblemThermal > * >(argp1);
      arg1 = const_cast< dive::problems::ProblemThermal * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = (Loads *) &((dive::problems::ProblemThermal const *)arg1)->GetLoads();
  resultobj = swig::from(static_cast< std::vector< std::shared_ptr< dive::loads::ILoad >,std::allocator< std::shared_ptr< dive::loads::ILoad > > > >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ProblemThermal_GetDofMeshIndices(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  dive::problems::ProblemThermal *arg1 = (dive::problems::ProblemThermal *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< dive::problems::ProblemThermal const > tempshared1 ;
  std::shared_ptr< dive::problems::ProblemThermal const > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  dive::DofMeshIndices *result = 0 ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_dive__problems__ProblemThermal_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ProblemThermal_GetDofMeshIndices" "', argument " "1"" of type '" "dive::problems::ProblemThermal const *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const dive::problems::ProblemThermal > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const dive::problems::ProblemThermal > * >(argp1);
      arg1 = const_cast< dive::problems::ProblemThermal * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const dive::problems::ProblemThermal > * >(argp1);
      arg1 = const_cast< dive::problems::ProblemThermal * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = (dive::DofMeshIndices *) &((dive::problems::ProblemThermal const *)arg1)->GetDofMeshIndices();
  resultobj = swig::from(static_cast< std::vector< dive::DofMeshIndex,std::allocator< dive::DofMeshIndex > > >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ProblemThermal_GetNodeMeshIndices(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  dive::problems::ProblemThermal *arg1 = (dive::problems::ProblemThermal *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< dive::problems::ProblemThermal const > tempshared1 ;
  std::shared_ptr< dive::problems::ProblemThermal const > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  dive::NodeMeshIndices *result = 0 ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_dive__problems__ProblemThermal_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ProblemThermal_GetNodeMeshIndices" "', argument " "1"" of type '" "dive::problems::ProblemThermal const *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const dive::problems::ProblemThermal > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const dive::problems::ProblemThermal > * >(argp1);
      arg1 = const_cast< dive::problems::ProblemThermal * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const dive::problems::ProblemThermal > * >(argp1);
      arg1 = const_cast< dive::problems::ProblemThermal * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = (dive::NodeMeshIndices *) &((dive::problems::ProblemThermal const *)arg1)->GetNodeMeshIndices();
  resultobj = swig::from(static_cast< std::vector< std::vector< dive::NodeMeshIndex,std::allocator< dive::NodeMeshIndex > >,std::allocator< std::vector< dive::NodeMeshIndex,std::allocator< dive::NodeMeshIndex > > > > >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ProblemThermal_GetDirichletMeshIndices(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  dive::problems::ProblemThermal *arg1 = (dive::problems::ProblemThermal *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< dive::problems::ProblemThermal const > tempshared1 ;
  std::shared_ptr< dive::problems::ProblemThermal const > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  dive::DirichletMeshIndices *result = 0 ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_dive__problems__ProblemThermal_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ProblemThermal_GetDirichletMeshIndices" "', argument " "1"" of type '" "dive::problems::ProblemThermal const *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const dive::problems::ProblemThermal > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const dive::problems::ProblemThermal > * >(argp1);
      arg1 = const_cast< dive::problems::ProblemThermal * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const dive::problems::ProblemThermal > * >(argp1);
      arg1 = const_cast< dive::problems::ProblemThermal * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = (dive::DirichletMeshIndices *) &((dive::problems::ProblemThermal const *)arg1)->GetDirichletMeshIndices();
  resultobj = swig::from(static_cast< std::vector< dive::DirichletMeshIndex,std::allocator< dive::DirichletMeshIndex > > >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ProblemThermal_SetTimer(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  dive::problems::ProblemThermal *arg1 = (dive::problems::ProblemThermal *) 0 ;
  ITimerPtr arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< dive::problems::ProblemThermal > tempshared1 ;
  std::shared_ptr< dive::problems::ProblemThermal > *smartarg1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "ProblemThermal_SetTimer", 2, 2, swig_obj)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_dive__problems__ProblemThermal_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ProblemThermal_SetTimer" "', argument " "1"" of type '" "dive::problems::ProblemThermal *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  dive::problems::ProblemThermal > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  dive::problems::ProblemThermal > * >(argp1);
      arg1 = const_cast< dive::problems::ProblemThermal * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  dive::problems::ProblemThermal > * >(argp1);
      arg1 = const_cast< dive::problems::ProblemThermal * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    int newmem = 0;
    res2 = SWIG_ConvertPtrAndOwn(swig_obj[1], &argp2, SWIGTYPE_p_std__shared_ptrT_dive__timers__ITimer_t,  0 , &newmem);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ProblemThermal_SetTimer" "', argument " "2"" of type '" "ITimerPtr""'");
    }
    if (argp2) arg2 = *(reinterpret_cast< ITimerPtr * >(argp2));
    if (newmem & SWIG_CAST_NEW_MEMORY) delete reinterpret_cast< ITimerPtr * >(argp2);
  }
  (arg1)->SetTimer(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ProblemThermal_SetPressure(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  dive::problems::ProblemThermal *arg1 = (dive::problems::ProblemThermal *) 0 ;
  IScalar3DPtr arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< dive::problems::ProblemThermal > tempshared1 ;
  std::shared_ptr< dive::problems::ProblemThermal > *smartarg1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "ProblemThermal_SetPressure", 2, 2, swig_obj)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_dive__problems__ProblemThermal_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ProblemThermal_SetPressure" "', argument " "1"" of type '" "dive::problems::ProblemThermal *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  dive::problems::ProblemThermal > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  dive::problems::ProblemThermal > * >(argp1);
      arg1 = const_cast< dive::problems::ProblemThermal * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  dive::problems::ProblemThermal > * >(argp1);
      arg1 = const_cast< dive::problems::ProblemThermal * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    int newmem = 0;
    res2 = SWIG_ConvertPtrAndOwn(swig_obj[1], &argp2, SWIGTYPE_p_std__shared_ptrT_values__IScalar3D_t,  0 , &newmem);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ProblemThermal_SetPressure" "', argument " "2"" of type '" "IScalar3DPtr""'");
    }
    if (argp2) arg2 = *(reinterpret_cast< IScalar3DPtr * >(argp2));
    if (newmem & SWIG_CAST_NEW_MEMORY) delete reinterpret_cast< IScalar3DPtr * >(argp2);
  }
  (arg1)->SetPressure(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ProblemThermal_SetVelocity(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  dive::problems::ProblemThermal *arg1 = (dive::problems::ProblemThermal *) 0 ;
  IMatrix3DPtr arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< dive::problems::ProblemThermal > tempshared1 ;
  std::shared_ptr< dive::problems::ProblemThermal > *smartarg1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "ProblemThermal_SetVelocity", 2, 2, swig_obj)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_dive__problems__ProblemThermal_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ProblemThermal_SetVelocity" "', argument " "1"" of type '" "dive::problems::ProblemThermal *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  dive::problems::ProblemThermal > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  dive::problems::ProblemThermal > * >(argp1);
      arg1 = const_cast< dive::problems::ProblemThermal * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  dive::problems::ProblemThermal > * >(argp1);
      arg1 = const_cast< dive::problems::ProblemThermal * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    int newmem = 0;
    res2 = SWIG_ConvertPtrAndOwn(swig_obj[1], &argp2, SWIGTYPE_p_std__shared_ptrT_values__IMatrix3D_t,  0 , &newmem);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ProblemThermal_SetVelocity" "', argument " "2"" of type '" "IMatrix3DPtr""'");
    }
    if (argp2) arg2 = *(reinterpret_cast< IMatrix3DPtr * >(argp2));
    if (newmem & SWIG_CAST_NEW_MEMORY) delete reinterpret_cast< IMatrix3DPtr * >(argp2);
  }
  (arg1)->SetVelocity(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ProblemThermal_SetMesh(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  dive::problems::ProblemThermal *arg1 = (dive::problems::ProblemThermal *) 0 ;
  IMeshPtr arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< dive::problems::ProblemThermal > tempshared1 ;
  std::shared_ptr< dive::problems::ProblemThermal > *smartarg1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "ProblemThermal_SetMesh", 2, 2, swig_obj)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_dive__problems__ProblemThermal_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ProblemThermal_SetMesh" "', argument " "1"" of type '" "dive::problems::ProblemThermal *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  dive::problems::ProblemThermal > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  dive::problems::ProblemThermal > * >(argp1);
      arg1 = const_cast< dive::problems::ProblemThermal * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  dive::problems::ProblemThermal > * >(argp1);
      arg1 = const_cast< dive::problems::ProblemThermal * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    int newmem = 0;
    res2 = SWIG_ConvertPtrAndOwn(swig_obj[1], &argp2, SWIGTYPE_p_std__shared_ptrT_dive__meshes__IMesh_t,  0 , &newmem);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ProblemThermal_SetMesh" "', argument " "2"" of type '" "IMeshPtr""'");
    }
    if (argp2) arg2 = *(reinterpret_cast< IMeshPtr * >(argp2));
    if (newmem & SWIG_CAST_NEW_MEMORY) delete reinterpret_cast< IMeshPtr * >(argp2);
  }
  (arg1)->SetMesh(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ProblemThermal_SetTag(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  dive::problems::ProblemThermal *arg1 = (dive::problems::ProblemThermal *) 0 ;
  Tag arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< dive::problems::ProblemThermal > tempshared1 ;
  std::shared_ptr< dive::problems::ProblemThermal > *smartarg1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "ProblemThermal_SetTag", 2, 2, swig_obj)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_dive__problems__ProblemThermal_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ProblemThermal_SetTag" "', argument " "1"" of type '" "dive::problems::ProblemThermal *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  dive::problems::ProblemThermal > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  dive::problems::ProblemThermal > * >(argp1);
      arg1 = const_cast< dive::problems::ProblemThermal * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  dive::problems::ProblemThermal > * >(argp1);
      arg1 = const_cast< dive::problems::ProblemThermal * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ProblemThermal_SetTag" "', argument " "2"" of type '" "Tag""'");
  } 
  arg2 = static_cast< Tag >(val2);
  (arg1)->SetTag(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ProblemThermal_AddDirichlet(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  dive::problems::ProblemThermal *arg1 = (dive::problems::ProblemThermal *) 0 ;
  IDirichletPtr arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< dive::problems::ProblemThermal > tempshared1 ;
  std::shared_ptr< dive::problems::ProblemThermal > *smartarg1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "ProblemThermal_AddDirichlet", 2, 2, swig_obj)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_dive__problems__ProblemThermal_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ProblemThermal_AddDirichlet" "', argument " "1"" of type '" "dive::problems::ProblemThermal *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  dive::problems::ProblemThermal > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  dive::problems::ProblemThermal > * >(argp1);
      arg1 = const_cast< dive::problems::ProblemThermal * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  dive::problems::ProblemThermal > * >(argp1);
      arg1 = const_cast< dive::problems::ProblemThermal * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    int newmem = 0;
    res2 = SWIG_ConvertPtrAndOwn(swig_obj[1], &argp2, SWIGTYPE_p_std__shared_ptrT_dive__loads__IDirichlet_t,  0 , &newmem);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ProblemThermal_AddDirichlet" "', argument " "2"" of type '" "IDirichletPtr""'");
    }
    if (argp2) arg2 = *(reinterpret_cast< IDirichletPtr * >(argp2));
    if (newmem & SWIG_CAST_NEW_MEMORY) delete reinterpret_cast< IDirichletPtr * >(argp2);
  }
  (arg1)->AddDirichlet(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ProblemThermal_AddLoad(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  dive::problems::ProblemThermal *arg1 = (dive::problems::ProblemThermal *) 0 ;
  ILoadPtr arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< dive::problems::ProblemThermal > tempshared1 ;
  std::shared_ptr< dive::problems::ProblemThermal > *smartarg1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "ProblemThermal_AddLoad", 2, 2, swig_obj)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_dive__problems__ProblemThermal_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ProblemThermal_AddLoad" "', argument " "1"" of type '" "dive::problems::ProblemThermal *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  dive::problems::ProblemThermal > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  dive::problems::ProblemThermal > * >(argp1);
      arg1 = const_cast< dive::problems::ProblemThermal * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  dive::problems::ProblemThermal > * >(argp1);
      arg1 = const_cast< dive::problems::ProblemThermal * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    int newmem = 0;
    res2 = SWIG_ConvertPtrAndOwn(swig_obj[1], &argp2, SWIGTYPE_p_std__shared_ptrT_dive__loads__ILoad_t,  0 , &newmem);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ProblemThermal_AddLoad" "', argument " "2"" of type '" "ILoadPtr""'");
    }
    if (argp2) arg2 = *(reinterpret_cast< ILoadPtr * >(argp2));
    if (newmem & SWIG_CAST_NEW_MEMORY) delete reinterpret_cast< ILoadPtr * >(argp2);
  }
  (arg1)->AddLoad(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ProblemThermal_Initialize(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  dive::problems::ProblemThermal *arg1 = (dive::problems::ProblemThermal *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< dive::problems::ProblemThermal > tempshared1 ;
  std::shared_ptr< dive::problems::ProblemThermal > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_dive__problems__ProblemThermal_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ProblemThermal_Initialize" "', argument " "1"" of type '" "dive::problems::ProblemThermal *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  dive::problems::ProblemThermal > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  dive::problems::ProblemThermal > * >(argp1);
      arg1 = const_cast< dive::problems::ProblemThermal * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  dive::problems::ProblemThermal > * >(argp1);
      arg1 = const_cast< dive::problems::ProblemThermal * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  (arg1)->Initialize();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ProblemThermal_UpdateMeshValues(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  dive::problems::ProblemThermal *arg1 = (dive::problems::ProblemThermal *) 0 ;
  Vector *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< dive::problems::ProblemThermal > tempshared1 ;
  std::shared_ptr< dive::problems::ProblemThermal > *smartarg1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "ProblemThermal_UpdateMeshValues", 2, 2, swig_obj)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_dive__problems__ProblemThermal_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ProblemThermal_UpdateMeshValues" "', argument " "1"" of type '" "dive::problems::ProblemThermal *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  dive::problems::ProblemThermal > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  dive::problems::ProblemThermal > * >(argp1);
      arg1 = const_cast< dive::problems::ProblemThermal * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  dive::problems::ProblemThermal > * >(argp1);
      arg1 = const_cast< dive::problems::ProblemThermal * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_eilig__Vector,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ProblemThermal_UpdateMeshValues" "', argument " "2"" of type '" "Vector const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ProblemThermal_UpdateMeshValues" "', argument " "2"" of type '" "Vector const &""'"); 
  }
  arg2 = reinterpret_cast< Vector * >(argp2);
  (arg1)->UpdateMeshValues((Vector const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ProblemThermal_Mass(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  dive::problems::ProblemThermal *arg1 = (dive::problems::ProblemThermal *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< dive::problems::ProblemThermal const > tempshared1 ;
  std::shared_ptr< dive::problems::ProblemThermal const > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  Sparse result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_dive__problems__ProblemThermal_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ProblemThermal_Mass" "', argument " "1"" of type '" "dive::problems::ProblemThermal const *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const dive::problems::ProblemThermal > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const dive::problems::ProblemThermal > * >(argp1);
      arg1 = const_cast< dive::problems::ProblemThermal * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const dive::problems::ProblemThermal > * >(argp1);
      arg1 = const_cast< dive::problems::ProblemThermal * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = ((dive::problems::ProblemThermal const *)arg1)->Mass();
  resultobj = SWIG_NewPointerObj((new Sparse(result)), SWIGTYPE_p_eilig__Ellpack, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ProblemThermal_Stiffness(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  dive::problems::ProblemThermal *arg1 = (dive::problems::ProblemThermal *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< dive::problems::ProblemThermal const > tempshared1 ;
  std::shared_ptr< dive::problems::ProblemThermal const > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  Sparse result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_dive__problems__ProblemThermal_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ProblemThermal_Stiffness" "', argument " "1"" of type '" "dive::problems::ProblemThermal const *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const dive::problems::ProblemThermal > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const dive::problems::ProblemThermal > * >(argp1);
      arg1 = const_cast< dive::problems::ProblemThermal * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const dive::problems::ProblemThermal > * >(argp1);
      arg1 = const_cast< dive::problems::ProblemThermal * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = ((dive::problems::ProblemThermal const *)arg1)->Stiffness();
  resultobj = SWIG_NewPointerObj((new Sparse(result)), SWIGTYPE_p_eilig__Ellpack, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ProblemThermal_Convection(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  dive::problems::ProblemThermal *arg1 = (dive::problems::ProblemThermal *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< dive::problems::ProblemThermal const > tempshared1 ;
  std::shared_ptr< dive::problems::ProblemThermal const > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  Sparse result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_dive__problems__ProblemThermal_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ProblemThermal_Convection" "', argument " "1"" of type '" "dive::problems::ProblemThermal const *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const dive::problems::ProblemThermal > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const dive::problems::ProblemThermal > * >(argp1);
      arg1 = const_cast< dive::problems::ProblemThermal * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const dive::problems::ProblemThermal > * >(argp1);
      arg1 = const_cast< dive::problems::ProblemThermal * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = ((dive::problems::ProblemThermal const *)arg1)->Convection();
  resultobj = SWIG_NewPointerObj((new Sparse(result)), SWIGTYPE_p_eilig__Ellpack, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ProblemThermal_Stabilization(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  dive::problems::ProblemThermal *arg1 = (dive::problems::ProblemThermal *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< dive::problems::ProblemThermal const > tempshared1 ;
  std::shared_ptr< dive::problems::ProblemThermal const > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  Sparse result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_dive__problems__ProblemThermal_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ProblemThermal_Stabilization" "', argument " "1"" of type '" "dive::problems::ProblemThermal const *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const dive::problems::ProblemThermal > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const dive::problems::ProblemThermal > * >(argp1);
      arg1 = const_cast< dive::problems::ProblemThermal * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const dive::problems::ProblemThermal > * >(argp1);
      arg1 = const_cast< dive::problems::ProblemThermal * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = ((dive::problems::ProblemThermal const *)arg1)->Stabilization();
  resultobj = SWIG_NewPointerObj((new Sparse(result)), SWIGTYPE_p_eilig__Ellpack, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ProblemThermal_Energy(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  dive::problems::ProblemThermal *arg1 = (dive::problems::ProblemThermal *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< dive::problems::ProblemThermal const > tempshared1 ;
  std::shared_ptr< dive::problems::ProblemThermal const > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  Vector result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_dive__problems__ProblemThermal_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ProblemThermal_Energy" "', argument " "1"" of type '" "dive::problems::ProblemThermal const *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const dive::problems::ProblemThermal > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const dive::problems::ProblemThermal > * >(argp1);
      arg1 = const_cast< dive::problems::ProblemThermal * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const dive::problems::ProblemThermal > * >(argp1);
      arg1 = const_cast< dive::problems::ProblemThermal * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = ((dive::problems::ProblemThermal const *)arg1)->Energy();
  resultobj = SWIG_NewPointerObj((new Vector(result)), SWIGTYPE_p_eilig__Vector, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *ProblemThermal_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_std__shared_ptrT_dive__problems__ProblemThermal_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_CreateProblemFluid__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **SWIGUNUSEDPARM(swig_obj)) {
  PyObject *resultobj = 0;
  ProblemFluidPtr result;
  
  (void)self;
  if ((nobjs < 0) || (nobjs > 0)) SWIG_fail;
  result = dive::problems::CreateProblemFluid();
  {
    std::shared_ptr<  dive::problems::ProblemFluid > *smartresult = result ? new std::shared_ptr<  dive::problems::ProblemFluid >(result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_std__shared_ptrT_dive__problems__ProblemFluid_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CreateProblemFluid__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  Tag arg1 ;
  size_t val1 ;
  int ecode1 = 0 ;
  ProblemFluidPtr result;
  
  (void)self;
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "CreateProblemFluid" "', argument " "1"" of type '" "Tag""'");
  } 
  arg1 = static_cast< Tag >(val1);
  result = dive::problems::CreateProblemFluid(SWIG_STD_MOVE(arg1));
  {
    std::shared_ptr<  dive::problems::ProblemFluid > *smartresult = result ? new std::shared_ptr<  dive::problems::ProblemFluid >(result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_std__shared_ptrT_dive__problems__ProblemFluid_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CreateProblemFluid(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "CreateProblemFluid", 0, 1, argv))) SWIG_fail;
  --argc;
  if (argc == 0) {
    return _wrap_CreateProblemFluid__SWIG_0(self, argc, argv);
  }
  if (argc == 1) {
    int _v = 0;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_CreateProblemFluid__SWIG_1(self, argc, argv);
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'CreateProblemFluid'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    dive::problems::CreateProblemFluid()\n"
    "    dive::problems::CreateProblemFluid(Tag)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_ProblemFluid(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  dive::problems::ProblemFluid *arg1 = (dive::problems::ProblemFluid *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< dive::problems::ProblemFluid > tempshared1 ;
  std::shared_ptr< dive::problems::ProblemFluid > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_dive__problems__ProblemFluid_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ProblemFluid" "', argument " "1"" of type '" "dive::problems::ProblemFluid *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  dive::problems::ProblemFluid > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  dive::problems::ProblemFluid > * >(argp1);
      arg1 = const_cast< dive::problems::ProblemFluid * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  dive::problems::ProblemFluid > * >(argp1);
      arg1 = const_cast< dive::problems::ProblemFluid * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  (void)arg1; delete smartarg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ProblemFluid_Create(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ProblemFluidPtr result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "ProblemFluid_Create", 0, 0, 0)) SWIG_fail;
  result = dive::problems::ProblemFluid::Create();
  {
    std::shared_ptr<  dive::problems::ProblemFluid > *smartresult = result ? new std::shared_ptr<  dive::problems::ProblemFluid >(result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_std__shared_ptrT_dive__problems__ProblemFluid_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ProblemFluid_GetPtr__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  dive::problems::ProblemFluid *arg1 = (dive::problems::ProblemFluid *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< dive::problems::ProblemFluid > tempshared1 ;
  std::shared_ptr< dive::problems::ProblemFluid > *smartarg1 = 0 ;
  ProblemFluidPtr result;
  
  (void)self;
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_dive__problems__ProblemFluid_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ProblemFluid_GetPtr" "', argument " "1"" of type '" "dive::problems::ProblemFluid *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  dive::problems::ProblemFluid > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  dive::problems::ProblemFluid > * >(argp1);
      arg1 = const_cast< dive::problems::ProblemFluid * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  dive::problems::ProblemFluid > * >(argp1);
      arg1 = const_cast< dive::problems::ProblemFluid * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = (arg1)->GetPtr();
  {
    std::shared_ptr<  dive::problems::ProblemFluid > *smartresult = result ? new std::shared_ptr<  dive::problems::ProblemFluid >(result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_std__shared_ptrT_dive__problems__ProblemFluid_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ProblemFluid_GetPtr__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  dive::problems::ProblemFluid *arg1 = (dive::problems::ProblemFluid *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< dive::problems::ProblemFluid const > tempshared1 ;
  std::shared_ptr< dive::problems::ProblemFluid const > *smartarg1 = 0 ;
  ConstProblemFluidPtr result;
  
  (void)self;
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_dive__problems__ProblemFluid_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ProblemFluid_GetPtr" "', argument " "1"" of type '" "dive::problems::ProblemFluid const *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const dive::problems::ProblemFluid > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const dive::problems::ProblemFluid > * >(argp1);
      arg1 = const_cast< dive::problems::ProblemFluid * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const dive::problems::ProblemFluid > * >(argp1);
      arg1 = const_cast< dive::problems::ProblemFluid * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = ((dive::problems::ProblemFluid const *)arg1)->GetPtr();
  {
    std::shared_ptr< const dive::problems::ProblemFluid > *smartresult = result ? new std::shared_ptr< const dive::problems::ProblemFluid >(result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_std__shared_ptrT_dive__problems__ProblemFluid_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ProblemFluid_GetPtr(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "ProblemFluid_GetPtr", 0, 1, argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    int _v = 0;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_std__shared_ptrT_dive__problems__ProblemFluid_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_ProblemFluid_GetPtr__SWIG_0(self, argc, argv);
    }
  }
  if (argc == 1) {
    int _v = 0;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_std__shared_ptrT_dive__problems__ProblemFluid_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_ProblemFluid_GetPtr__SWIG_1(self, argc, argv);
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'ProblemFluid_GetPtr'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    dive::problems::ProblemFluid::GetPtr()\n"
    "    dive::problems::ProblemFluid::GetPtr() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ProblemFluid_GetNumberDof(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  dive::problems::ProblemFluid *arg1 = (dive::problems::ProblemFluid *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< dive::problems::ProblemFluid const > tempshared1 ;
  std::shared_ptr< dive::problems::ProblemFluid const > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  NumberDof result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_dive__problems__ProblemFluid_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ProblemFluid_GetNumberDof" "', argument " "1"" of type '" "dive::problems::ProblemFluid const *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const dive::problems::ProblemFluid > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const dive::problems::ProblemFluid > * >(argp1);
      arg1 = const_cast< dive::problems::ProblemFluid * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const dive::problems::ProblemFluid > * >(argp1);
      arg1 = const_cast< dive::problems::ProblemFluid * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = ((dive::problems::ProblemFluid const *)arg1)->GetNumberDof();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ProblemFluid_GetTotalDof(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  dive::problems::ProblemFluid *arg1 = (dive::problems::ProblemFluid *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< dive::problems::ProblemFluid const > tempshared1 ;
  std::shared_ptr< dive::problems::ProblemFluid const > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  NumberDof result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_dive__problems__ProblemFluid_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ProblemFluid_GetTotalDof" "', argument " "1"" of type '" "dive::problems::ProblemFluid const *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const dive::problems::ProblemFluid > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const dive::problems::ProblemFluid > * >(argp1);
      arg1 = const_cast< dive::problems::ProblemFluid * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const dive::problems::ProblemFluid > * >(argp1);
      arg1 = const_cast< dive::problems::ProblemFluid * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = ((dive::problems::ProblemFluid const *)arg1)->GetTotalDof();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ProblemFluid_GetPivot(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  dive::problems::ProblemFluid *arg1 = (dive::problems::ProblemFluid *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< dive::problems::ProblemFluid const > tempshared1 ;
  std::shared_ptr< dive::problems::ProblemFluid const > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  DofIndex result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_dive__problems__ProblemFluid_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ProblemFluid_GetPivot" "', argument " "1"" of type '" "dive::problems::ProblemFluid const *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const dive::problems::ProblemFluid > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const dive::problems::ProblemFluid > * >(argp1);
      arg1 = const_cast< dive::problems::ProblemFluid * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const dive::problems::ProblemFluid > * >(argp1);
      arg1 = const_cast< dive::problems::ProblemFluid * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = ((dive::problems::ProblemFluid const *)arg1)->GetPivot();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ProblemFluid_GetTimer(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  dive::problems::ProblemFluid *arg1 = (dive::problems::ProblemFluid *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< dive::problems::ProblemFluid const > tempshared1 ;
  std::shared_ptr< dive::problems::ProblemFluid const > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  ITimerPtr result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_dive__problems__ProblemFluid_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ProblemFluid_GetTimer" "', argument " "1"" of type '" "dive::problems::ProblemFluid const *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const dive::problems::ProblemFluid > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const dive::problems::ProblemFluid > * >(argp1);
      arg1 = const_cast< dive::problems::ProblemFluid * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const dive::problems::ProblemFluid > * >(argp1);
      arg1 = const_cast< dive::problems::ProblemFluid * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = ((dive::problems::ProblemFluid const *)arg1)->GetTimer();
  {
    std::shared_ptr<  dive::timers::ITimer > *smartresult = result ? new std::shared_ptr<  dive::timers::ITimer >(result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_std__shared_ptrT_dive__timers__ITimer_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ProblemFluid_GetTemperature(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  dive::problems::ProblemFluid *arg1 = (dive::problems::ProblemFluid *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< dive::problems::ProblemFluid const > tempshared1 ;
  std::shared_ptr< dive::problems::ProblemFluid const > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  IScalar3DPtr result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_dive__problems__ProblemFluid_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ProblemFluid_GetTemperature" "', argument " "1"" of type '" "dive::problems::ProblemFluid const *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const dive::problems::ProblemFluid > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const dive::problems::ProblemFluid > * >(argp1);
      arg1 = const_cast< dive::problems::ProblemFluid * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const dive::problems::ProblemFluid > * >(argp1);
      arg1 = const_cast< dive::problems::ProblemFluid * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = ((dive::problems::ProblemFluid const *)arg1)->GetTemperature();
  {
    std::shared_ptr<  values::IScalar3D > *smartresult = result ? new std::shared_ptr<  values::IScalar3D >(result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_std__shared_ptrT_values__IScalar3D_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ProblemFluid_GetPressure(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  dive::problems::ProblemFluid *arg1 = (dive::problems::ProblemFluid *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< dive::problems::ProblemFluid const > tempshared1 ;
  std::shared_ptr< dive::problems::ProblemFluid const > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  IScalar3DPtr result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_dive__problems__ProblemFluid_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ProblemFluid_GetPressure" "', argument " "1"" of type '" "dive::problems::ProblemFluid const *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const dive::problems::ProblemFluid > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const dive::problems::ProblemFluid > * >(argp1);
      arg1 = const_cast< dive::problems::ProblemFluid * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const dive::problems::ProblemFluid > * >(argp1);
      arg1 = const_cast< dive::problems::ProblemFluid * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = ((dive::problems::ProblemFluid const *)arg1)->GetPressure();
  {
    std::shared_ptr<  values::IScalar3D > *smartresult = result ? new std::shared_ptr<  values::IScalar3D >(result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_std__shared_ptrT_values__IScalar3D_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ProblemFluid_GetVelocity(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  dive::problems::ProblemFluid *arg1 = (dive::problems::ProblemFluid *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< dive::problems::ProblemFluid const > tempshared1 ;
  std::shared_ptr< dive::problems::ProblemFluid const > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  IMatrix3DPtr result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_dive__problems__ProblemFluid_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ProblemFluid_GetVelocity" "', argument " "1"" of type '" "dive::problems::ProblemFluid const *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const dive::problems::ProblemFluid > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const dive::problems::ProblemFluid > * >(argp1);
      arg1 = const_cast< dive::problems::ProblemFluid * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const dive::problems::ProblemFluid > * >(argp1);
      arg1 = const_cast< dive::problems::ProblemFluid * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = ((dive::problems::ProblemFluid const *)arg1)->GetVelocity();
  {
    std::shared_ptr<  values::IMatrix3D > *smartresult = result ? new std::shared_ptr<  values::IMatrix3D >(result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_std__shared_ptrT_values__IMatrix3D_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ProblemFluid_GetMesh(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  dive::problems::ProblemFluid *arg1 = (dive::problems::ProblemFluid *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< dive::problems::ProblemFluid const > tempshared1 ;
  std::shared_ptr< dive::problems::ProblemFluid const > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  IMeshPtr result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_dive__problems__ProblemFluid_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ProblemFluid_GetMesh" "', argument " "1"" of type '" "dive::problems::ProblemFluid const *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const dive::problems::ProblemFluid > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const dive::problems::ProblemFluid > * >(argp1);
      arg1 = const_cast< dive::problems::ProblemFluid * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const dive::problems::ProblemFluid > * >(argp1);
      arg1 = const_cast< dive::problems::ProblemFluid * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = ((dive::problems::ProblemFluid const *)arg1)->GetMesh();
  {
    std::shared_ptr<  dive::meshes::IMesh > *smartresult = result ? new std::shared_ptr<  dive::meshes::IMesh >(result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_std__shared_ptrT_dive__meshes__IMesh_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ProblemFluid_GetType(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  dive::problems::ProblemFluid *arg1 = (dive::problems::ProblemFluid *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< dive::problems::ProblemFluid const > tempshared1 ;
  std::shared_ptr< dive::problems::ProblemFluid const > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  Type result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_dive__problems__ProblemFluid_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ProblemFluid_GetType" "', argument " "1"" of type '" "dive::problems::ProblemFluid const *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const dive::problems::ProblemFluid > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const dive::problems::ProblemFluid > * >(argp1);
      arg1 = const_cast< dive::problems::ProblemFluid * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const dive::problems::ProblemFluid > * >(argp1);
      arg1 = const_cast< dive::problems::ProblemFluid * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = ((dive::problems::ProblemFluid const *)arg1)->GetType();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ProblemFluid_GetTag(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  dive::problems::ProblemFluid *arg1 = (dive::problems::ProblemFluid *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< dive::problems::ProblemFluid const > tempshared1 ;
  std::shared_ptr< dive::problems::ProblemFluid const > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  Tag result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_dive__problems__ProblemFluid_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ProblemFluid_GetTag" "', argument " "1"" of type '" "dive::problems::ProblemFluid const *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const dive::problems::ProblemFluid > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const dive::problems::ProblemFluid > * >(argp1);
      arg1 = const_cast< dive::problems::ProblemFluid * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const dive::problems::ProblemFluid > * >(argp1);
      arg1 = const_cast< dive::problems::ProblemFluid * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = ((dive::problems::ProblemFluid const *)arg1)->GetTag();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ProblemFluid_GetDirichlets(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  dive::problems::ProblemFluid *arg1 = (dive::problems::ProblemFluid *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< dive::problems::ProblemFluid const > tempshared1 ;
  std::shared_ptr< dive::problems::ProblemFluid const > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  Dirichlets *result = 0 ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_dive__problems__ProblemFluid_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ProblemFluid_GetDirichlets" "', argument " "1"" of type '" "dive::problems::ProblemFluid const *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const dive::problems::ProblemFluid > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const dive::problems::ProblemFluid > * >(argp1);
      arg1 = const_cast< dive::problems::ProblemFluid * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const dive::problems::ProblemFluid > * >(argp1);
      arg1 = const_cast< dive::problems::ProblemFluid * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = (Dirichlets *) &((dive::problems::ProblemFluid const *)arg1)->GetDirichlets();
  resultobj = swig::from(static_cast< std::vector< std::shared_ptr< dive::loads::IDirichlet >,std::allocator< std::shared_ptr< dive::loads::IDirichlet > > > >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ProblemFluid_GetLoads(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  dive::problems::ProblemFluid *arg1 = (dive::problems::ProblemFluid *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< dive::problems::ProblemFluid const > tempshared1 ;
  std::shared_ptr< dive::problems::ProblemFluid const > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  Loads *result = 0 ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_dive__problems__ProblemFluid_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ProblemFluid_GetLoads" "', argument " "1"" of type '" "dive::problems::ProblemFluid const *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const dive::problems::ProblemFluid > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const dive::problems::ProblemFluid > * >(argp1);
      arg1 = const_cast< dive::problems::ProblemFluid * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const dive::problems::ProblemFluid > * >(argp1);
      arg1 = const_cast< dive::problems::ProblemFluid * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = (Loads *) &((dive::problems::ProblemFluid const *)arg1)->GetLoads();
  resultobj = swig::from(static_cast< std::vector< std::shared_ptr< dive::loads::ILoad >,std::allocator< std::shared_ptr< dive::loads::ILoad > > > >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ProblemFluid_GetDofMeshIndices(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  dive::problems::ProblemFluid *arg1 = (dive::problems::ProblemFluid *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< dive::problems::ProblemFluid const > tempshared1 ;
  std::shared_ptr< dive::problems::ProblemFluid const > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  dive::DofMeshIndices *result = 0 ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_dive__problems__ProblemFluid_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ProblemFluid_GetDofMeshIndices" "', argument " "1"" of type '" "dive::problems::ProblemFluid const *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const dive::problems::ProblemFluid > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const dive::problems::ProblemFluid > * >(argp1);
      arg1 = const_cast< dive::problems::ProblemFluid * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const dive::problems::ProblemFluid > * >(argp1);
      arg1 = const_cast< dive::problems::ProblemFluid * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = (dive::DofMeshIndices *) &((dive::problems::ProblemFluid const *)arg1)->GetDofMeshIndices();
  resultobj = swig::from(static_cast< std::vector< dive::DofMeshIndex,std::allocator< dive::DofMeshIndex > > >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ProblemFluid_GetNodeMeshIndices(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  dive::problems::ProblemFluid *arg1 = (dive::problems::ProblemFluid *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< dive::problems::ProblemFluid const > tempshared1 ;
  std::shared_ptr< dive::problems::ProblemFluid const > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  dive::NodeMeshIndices *result = 0 ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_dive__problems__ProblemFluid_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ProblemFluid_GetNodeMeshIndices" "', argument " "1"" of type '" "dive::problems::ProblemFluid const *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const dive::problems::ProblemFluid > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const dive::problems::ProblemFluid > * >(argp1);
      arg1 = const_cast< dive::problems::ProblemFluid * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const dive::problems::ProblemFluid > * >(argp1);
      arg1 = const_cast< dive::problems::ProblemFluid * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = (dive::NodeMeshIndices *) &((dive::problems::ProblemFluid const *)arg1)->GetNodeMeshIndices();
  resultobj = swig::from(static_cast< std::vector< std::vector< dive::NodeMeshIndex,std::allocator< dive::NodeMeshIndex > >,std::allocator< std::vector< dive::NodeMeshIndex,std::allocator< dive::NodeMeshIndex > > > > >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ProblemFluid_GetDirichletMeshIndices(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  dive::problems::ProblemFluid *arg1 = (dive::problems::ProblemFluid *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< dive::problems::ProblemFluid const > tempshared1 ;
  std::shared_ptr< dive::problems::ProblemFluid const > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  dive::DirichletMeshIndices *result = 0 ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_dive__problems__ProblemFluid_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ProblemFluid_GetDirichletMeshIndices" "', argument " "1"" of type '" "dive::problems::ProblemFluid const *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const dive::problems::ProblemFluid > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const dive::problems::ProblemFluid > * >(argp1);
      arg1 = const_cast< dive::problems::ProblemFluid * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const dive::problems::ProblemFluid > * >(argp1);
      arg1 = const_cast< dive::problems::ProblemFluid * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = (dive::DirichletMeshIndices *) &((dive::problems::ProblemFluid const *)arg1)->GetDirichletMeshIndices();
  resultobj = swig::from(static_cast< std::vector< dive::DirichletMeshIndex,std::allocator< dive::DirichletMeshIndex > > >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ProblemFluid_SetTimer(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  dive::problems::ProblemFluid *arg1 = (dive::problems::ProblemFluid *) 0 ;
  ITimerPtr arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< dive::problems::ProblemFluid > tempshared1 ;
  std::shared_ptr< dive::problems::ProblemFluid > *smartarg1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "ProblemFluid_SetTimer", 2, 2, swig_obj)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_dive__problems__ProblemFluid_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ProblemFluid_SetTimer" "', argument " "1"" of type '" "dive::problems::ProblemFluid *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  dive::problems::ProblemFluid > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  dive::problems::ProblemFluid > * >(argp1);
      arg1 = const_cast< dive::problems::ProblemFluid * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  dive::problems::ProblemFluid > * >(argp1);
      arg1 = const_cast< dive::problems::ProblemFluid * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    int newmem = 0;
    res2 = SWIG_ConvertPtrAndOwn(swig_obj[1], &argp2, SWIGTYPE_p_std__shared_ptrT_dive__timers__ITimer_t,  0 , &newmem);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ProblemFluid_SetTimer" "', argument " "2"" of type '" "ITimerPtr""'");
    }
    if (argp2) arg2 = *(reinterpret_cast< ITimerPtr * >(argp2));
    if (newmem & SWIG_CAST_NEW_MEMORY) delete reinterpret_cast< ITimerPtr * >(argp2);
  }
  (arg1)->SetTimer(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ProblemFluid_SetTemperature(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  dive::problems::ProblemFluid *arg1 = (dive::problems::ProblemFluid *) 0 ;
  IScalar3DPtr arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< dive::problems::ProblemFluid > tempshared1 ;
  std::shared_ptr< dive::problems::ProblemFluid > *smartarg1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "ProblemFluid_SetTemperature", 2, 2, swig_obj)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_dive__problems__ProblemFluid_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ProblemFluid_SetTemperature" "', argument " "1"" of type '" "dive::problems::ProblemFluid *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  dive::problems::ProblemFluid > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  dive::problems::ProblemFluid > * >(argp1);
      arg1 = const_cast< dive::problems::ProblemFluid * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  dive::problems::ProblemFluid > * >(argp1);
      arg1 = const_cast< dive::problems::ProblemFluid * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    int newmem = 0;
    res2 = SWIG_ConvertPtrAndOwn(swig_obj[1], &argp2, SWIGTYPE_p_std__shared_ptrT_values__IScalar3D_t,  0 , &newmem);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ProblemFluid_SetTemperature" "', argument " "2"" of type '" "IScalar3DPtr""'");
    }
    if (argp2) arg2 = *(reinterpret_cast< IScalar3DPtr * >(argp2));
    if (newmem & SWIG_CAST_NEW_MEMORY) delete reinterpret_cast< IScalar3DPtr * >(argp2);
  }
  (arg1)->SetTemperature(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ProblemFluid_SetPressure(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  dive::problems::ProblemFluid *arg1 = (dive::problems::ProblemFluid *) 0 ;
  IScalar3DPtr arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< dive::problems::ProblemFluid > tempshared1 ;
  std::shared_ptr< dive::problems::ProblemFluid > *smartarg1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "ProblemFluid_SetPressure", 2, 2, swig_obj)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_dive__problems__ProblemFluid_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ProblemFluid_SetPressure" "', argument " "1"" of type '" "dive::problems::ProblemFluid *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  dive::problems::ProblemFluid > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  dive::problems::ProblemFluid > * >(argp1);
      arg1 = const_cast< dive::problems::ProblemFluid * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  dive::problems::ProblemFluid > * >(argp1);
      arg1 = const_cast< dive::problems::ProblemFluid * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    int newmem = 0;
    res2 = SWIG_ConvertPtrAndOwn(swig_obj[1], &argp2, SWIGTYPE_p_std__shared_ptrT_values__IScalar3D_t,  0 , &newmem);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ProblemFluid_SetPressure" "', argument " "2"" of type '" "IScalar3DPtr""'");
    }
    if (argp2) arg2 = *(reinterpret_cast< IScalar3DPtr * >(argp2));
    if (newmem & SWIG_CAST_NEW_MEMORY) delete reinterpret_cast< IScalar3DPtr * >(argp2);
  }
  (arg1)->SetPressure(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ProblemFluid_SetMesh(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  dive::problems::ProblemFluid *arg1 = (dive::problems::ProblemFluid *) 0 ;
  IMeshPtr arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< dive::problems::ProblemFluid > tempshared1 ;
  std::shared_ptr< dive::problems::ProblemFluid > *smartarg1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "ProblemFluid_SetMesh", 2, 2, swig_obj)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_dive__problems__ProblemFluid_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ProblemFluid_SetMesh" "', argument " "1"" of type '" "dive::problems::ProblemFluid *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  dive::problems::ProblemFluid > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  dive::problems::ProblemFluid > * >(argp1);
      arg1 = const_cast< dive::problems::ProblemFluid * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  dive::problems::ProblemFluid > * >(argp1);
      arg1 = const_cast< dive::problems::ProblemFluid * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    int newmem = 0;
    res2 = SWIG_ConvertPtrAndOwn(swig_obj[1], &argp2, SWIGTYPE_p_std__shared_ptrT_dive__meshes__IMesh_t,  0 , &newmem);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ProblemFluid_SetMesh" "', argument " "2"" of type '" "IMeshPtr""'");
    }
    if (argp2) arg2 = *(reinterpret_cast< IMeshPtr * >(argp2));
    if (newmem & SWIG_CAST_NEW_MEMORY) delete reinterpret_cast< IMeshPtr * >(argp2);
  }
  (arg1)->SetMesh(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ProblemFluid_SetTag(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  dive::problems::ProblemFluid *arg1 = (dive::problems::ProblemFluid *) 0 ;
  Tag arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< dive::problems::ProblemFluid > tempshared1 ;
  std::shared_ptr< dive::problems::ProblemFluid > *smartarg1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "ProblemFluid_SetTag", 2, 2, swig_obj)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_dive__problems__ProblemFluid_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ProblemFluid_SetTag" "', argument " "1"" of type '" "dive::problems::ProblemFluid *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  dive::problems::ProblemFluid > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  dive::problems::ProblemFluid > * >(argp1);
      arg1 = const_cast< dive::problems::ProblemFluid * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  dive::problems::ProblemFluid > * >(argp1);
      arg1 = const_cast< dive::problems::ProblemFluid * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ProblemFluid_SetTag" "', argument " "2"" of type '" "Tag""'");
  } 
  arg2 = static_cast< Tag >(val2);
  (arg1)->SetTag(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ProblemFluid_AddDirichlet(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  dive::problems::ProblemFluid *arg1 = (dive::problems::ProblemFluid *) 0 ;
  IDirichletPtr arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< dive::problems::ProblemFluid > tempshared1 ;
  std::shared_ptr< dive::problems::ProblemFluid > *smartarg1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "ProblemFluid_AddDirichlet", 2, 2, swig_obj)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_dive__problems__ProblemFluid_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ProblemFluid_AddDirichlet" "', argument " "1"" of type '" "dive::problems::ProblemFluid *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  dive::problems::ProblemFluid > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  dive::problems::ProblemFluid > * >(argp1);
      arg1 = const_cast< dive::problems::ProblemFluid * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  dive::problems::ProblemFluid > * >(argp1);
      arg1 = const_cast< dive::problems::ProblemFluid * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    int newmem = 0;
    res2 = SWIG_ConvertPtrAndOwn(swig_obj[1], &argp2, SWIGTYPE_p_std__shared_ptrT_dive__loads__IDirichlet_t,  0 , &newmem);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ProblemFluid_AddDirichlet" "', argument " "2"" of type '" "IDirichletPtr""'");
    }
    if (argp2) arg2 = *(reinterpret_cast< IDirichletPtr * >(argp2));
    if (newmem & SWIG_CAST_NEW_MEMORY) delete reinterpret_cast< IDirichletPtr * >(argp2);
  }
  (arg1)->AddDirichlet(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ProblemFluid_AddLoad(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  dive::problems::ProblemFluid *arg1 = (dive::problems::ProblemFluid *) 0 ;
  ILoadPtr arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< dive::problems::ProblemFluid > tempshared1 ;
  std::shared_ptr< dive::problems::ProblemFluid > *smartarg1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "ProblemFluid_AddLoad", 2, 2, swig_obj)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_dive__problems__ProblemFluid_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ProblemFluid_AddLoad" "', argument " "1"" of type '" "dive::problems::ProblemFluid *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  dive::problems::ProblemFluid > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  dive::problems::ProblemFluid > * >(argp1);
      arg1 = const_cast< dive::problems::ProblemFluid * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  dive::problems::ProblemFluid > * >(argp1);
      arg1 = const_cast< dive::problems::ProblemFluid * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    int newmem = 0;
    res2 = SWIG_ConvertPtrAndOwn(swig_obj[1], &argp2, SWIGTYPE_p_std__shared_ptrT_dive__loads__ILoad_t,  0 , &newmem);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ProblemFluid_AddLoad" "', argument " "2"" of type '" "ILoadPtr""'");
    }
    if (argp2) arg2 = *(reinterpret_cast< ILoadPtr * >(argp2));
    if (newmem & SWIG_CAST_NEW_MEMORY) delete reinterpret_cast< ILoadPtr * >(argp2);
  }
  (arg1)->AddLoad(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ProblemFluid_Initialize(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  dive::problems::ProblemFluid *arg1 = (dive::problems::ProblemFluid *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< dive::problems::ProblemFluid > tempshared1 ;
  std::shared_ptr< dive::problems::ProblemFluid > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_dive__problems__ProblemFluid_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ProblemFluid_Initialize" "', argument " "1"" of type '" "dive::problems::ProblemFluid *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  dive::problems::ProblemFluid > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  dive::problems::ProblemFluid > * >(argp1);
      arg1 = const_cast< dive::problems::ProblemFluid * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  dive::problems::ProblemFluid > * >(argp1);
      arg1 = const_cast< dive::problems::ProblemFluid * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  (arg1)->Initialize();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ProblemFluid_UpdateMeshValues(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  dive::problems::ProblemFluid *arg1 = (dive::problems::ProblemFluid *) 0 ;
  Vector *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< dive::problems::ProblemFluid > tempshared1 ;
  std::shared_ptr< dive::problems::ProblemFluid > *smartarg1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "ProblemFluid_UpdateMeshValues", 2, 2, swig_obj)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_dive__problems__ProblemFluid_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ProblemFluid_UpdateMeshValues" "', argument " "1"" of type '" "dive::problems::ProblemFluid *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  dive::problems::ProblemFluid > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  dive::problems::ProblemFluid > * >(argp1);
      arg1 = const_cast< dive::problems::ProblemFluid * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  dive::problems::ProblemFluid > * >(argp1);
      arg1 = const_cast< dive::problems::ProblemFluid * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_eilig__Vector,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ProblemFluid_UpdateMeshValues" "', argument " "2"" of type '" "Vector const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ProblemFluid_UpdateMeshValues" "', argument " "2"" of type '" "Vector const &""'"); 
  }
  arg2 = reinterpret_cast< Vector * >(argp2);
  (arg1)->UpdateMeshValues((Vector const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ProblemFluid_UpdateMeshValuesMomentum(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  dive::problems::ProblemFluid *arg1 = (dive::problems::ProblemFluid *) 0 ;
  Vector *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< dive::problems::ProblemFluid > tempshared1 ;
  std::shared_ptr< dive::problems::ProblemFluid > *smartarg1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "ProblemFluid_UpdateMeshValuesMomentum", 2, 2, swig_obj)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_dive__problems__ProblemFluid_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ProblemFluid_UpdateMeshValuesMomentum" "', argument " "1"" of type '" "dive::problems::ProblemFluid *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  dive::problems::ProblemFluid > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  dive::problems::ProblemFluid > * >(argp1);
      arg1 = const_cast< dive::problems::ProblemFluid * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  dive::problems::ProblemFluid > * >(argp1);
      arg1 = const_cast< dive::problems::ProblemFluid * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_eilig__Vector,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ProblemFluid_UpdateMeshValuesMomentum" "', argument " "2"" of type '" "Vector const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ProblemFluid_UpdateMeshValuesMomentum" "', argument " "2"" of type '" "Vector const &""'"); 
  }
  arg2 = reinterpret_cast< Vector * >(argp2);
  (arg1)->UpdateMeshValuesMomentum((Vector const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ProblemFluid_Mass(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  dive::problems::ProblemFluid *arg1 = (dive::problems::ProblemFluid *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< dive::problems::ProblemFluid const > tempshared1 ;
  std::shared_ptr< dive::problems::ProblemFluid const > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  Sparse result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_dive__problems__ProblemFluid_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ProblemFluid_Mass" "', argument " "1"" of type '" "dive::problems::ProblemFluid const *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const dive::problems::ProblemFluid > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const dive::problems::ProblemFluid > * >(argp1);
      arg1 = const_cast< dive::problems::ProblemFluid * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const dive::problems::ProblemFluid > * >(argp1);
      arg1 = const_cast< dive::problems::ProblemFluid * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = ((dive::problems::ProblemFluid const *)arg1)->Mass();
  resultobj = SWIG_NewPointerObj((new Sparse(result)), SWIGTYPE_p_eilig__Ellpack, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ProblemFluid_Stiffness(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  dive::problems::ProblemFluid *arg1 = (dive::problems::ProblemFluid *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< dive::problems::ProblemFluid const > tempshared1 ;
  std::shared_ptr< dive::problems::ProblemFluid const > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  Sparse result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_dive__problems__ProblemFluid_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ProblemFluid_Stiffness" "', argument " "1"" of type '" "dive::problems::ProblemFluid const *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const dive::problems::ProblemFluid > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const dive::problems::ProblemFluid > * >(argp1);
      arg1 = const_cast< dive::problems::ProblemFluid * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const dive::problems::ProblemFluid > * >(argp1);
      arg1 = const_cast< dive::problems::ProblemFluid * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = ((dive::problems::ProblemFluid const *)arg1)->Stiffness();
  resultobj = SWIG_NewPointerObj((new Sparse(result)), SWIGTYPE_p_eilig__Ellpack, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ProblemFluid_Convection(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  dive::problems::ProblemFluid *arg1 = (dive::problems::ProblemFluid *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< dive::problems::ProblemFluid const > tempshared1 ;
  std::shared_ptr< dive::problems::ProblemFluid const > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  Sparse result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_dive__problems__ProblemFluid_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ProblemFluid_Convection" "', argument " "1"" of type '" "dive::problems::ProblemFluid const *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const dive::problems::ProblemFluid > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const dive::problems::ProblemFluid > * >(argp1);
      arg1 = const_cast< dive::problems::ProblemFluid * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const dive::problems::ProblemFluid > * >(argp1);
      arg1 = const_cast< dive::problems::ProblemFluid * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = ((dive::problems::ProblemFluid const *)arg1)->Convection();
  resultobj = SWIG_NewPointerObj((new Sparse(result)), SWIGTYPE_p_eilig__Ellpack, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ProblemFluid_Stabilization(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  dive::problems::ProblemFluid *arg1 = (dive::problems::ProblemFluid *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< dive::problems::ProblemFluid const > tempshared1 ;
  std::shared_ptr< dive::problems::ProblemFluid const > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  Sparse result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_dive__problems__ProblemFluid_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ProblemFluid_Stabilization" "', argument " "1"" of type '" "dive::problems::ProblemFluid const *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const dive::problems::ProblemFluid > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const dive::problems::ProblemFluid > * >(argp1);
      arg1 = const_cast< dive::problems::ProblemFluid * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const dive::problems::ProblemFluid > * >(argp1);
      arg1 = const_cast< dive::problems::ProblemFluid * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = ((dive::problems::ProblemFluid const *)arg1)->Stabilization();
  resultobj = SWIG_NewPointerObj((new Sparse(result)), SWIGTYPE_p_eilig__Ellpack, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ProblemFluid_LoadDistributedVolume(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  dive::problems::ProblemFluid *arg1 = (dive::problems::ProblemFluid *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< dive::problems::ProblemFluid const > tempshared1 ;
  std::shared_ptr< dive::problems::ProblemFluid const > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  Vector result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_dive__problems__ProblemFluid_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ProblemFluid_LoadDistributedVolume" "', argument " "1"" of type '" "dive::problems::ProblemFluid const *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const dive::problems::ProblemFluid > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const dive::problems::ProblemFluid > * >(argp1);
      arg1 = const_cast< dive::problems::ProblemFluid * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const dive::problems::ProblemFluid > * >(argp1);
      arg1 = const_cast< dive::problems::ProblemFluid * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = ((dive::problems::ProblemFluid const *)arg1)->LoadDistributedVolume();
  resultobj = SWIG_NewPointerObj((new Vector(result)), SWIGTYPE_p_eilig__Vector, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ProblemFluid_LoadDistributedVolumeStabilization(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  dive::problems::ProblemFluid *arg1 = (dive::problems::ProblemFluid *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< dive::problems::ProblemFluid const > tempshared1 ;
  std::shared_ptr< dive::problems::ProblemFluid const > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  Vector result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_dive__problems__ProblemFluid_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ProblemFluid_LoadDistributedVolumeStabilization" "', argument " "1"" of type '" "dive::problems::ProblemFluid const *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const dive::problems::ProblemFluid > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const dive::problems::ProblemFluid > * >(argp1);
      arg1 = const_cast< dive::problems::ProblemFluid * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const dive::problems::ProblemFluid > * >(argp1);
      arg1 = const_cast< dive::problems::ProblemFluid * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = ((dive::problems::ProblemFluid const *)arg1)->LoadDistributedVolumeStabilization();
  resultobj = SWIG_NewPointerObj((new Vector(result)), SWIGTYPE_p_eilig__Vector, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ProblemFluid_Momentum(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  dive::problems::ProblemFluid *arg1 = (dive::problems::ProblemFluid *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< dive::problems::ProblemFluid const > tempshared1 ;
  std::shared_ptr< dive::problems::ProblemFluid const > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  Vector result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_dive__problems__ProblemFluid_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ProblemFluid_Momentum" "', argument " "1"" of type '" "dive::problems::ProblemFluid const *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const dive::problems::ProblemFluid > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const dive::problems::ProblemFluid > * >(argp1);
      arg1 = const_cast< dive::problems::ProblemFluid * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const dive::problems::ProblemFluid > * >(argp1);
      arg1 = const_cast< dive::problems::ProblemFluid * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = ((dive::problems::ProblemFluid const *)arg1)->Momentum();
  resultobj = SWIG_NewPointerObj((new Vector(result)), SWIGTYPE_p_eilig__Vector, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ProblemFluid_Velocity(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  dive::problems::ProblemFluid *arg1 = (dive::problems::ProblemFluid *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< dive::problems::ProblemFluid const > tempshared1 ;
  std::shared_ptr< dive::problems::ProblemFluid const > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  Vector result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_dive__problems__ProblemFluid_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ProblemFluid_Velocity" "', argument " "1"" of type '" "dive::problems::ProblemFluid const *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const dive::problems::ProblemFluid > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const dive::problems::ProblemFluid > * >(argp1);
      arg1 = const_cast< dive::problems::ProblemFluid * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const dive::problems::ProblemFluid > * >(argp1);
      arg1 = const_cast< dive::problems::ProblemFluid * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = ((dive::problems::ProblemFluid const *)arg1)->Velocity();
  resultobj = SWIG_NewPointerObj((new Vector(result)), SWIGTYPE_p_eilig__Vector, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *ProblemFluid_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_std__shared_ptrT_dive__problems__ProblemFluid_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_CreateProblemPressure__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **SWIGUNUSEDPARM(swig_obj)) {
  PyObject *resultobj = 0;
  ProblemPressurePtr result;
  
  (void)self;
  if ((nobjs < 0) || (nobjs > 0)) SWIG_fail;
  result = dive::problems::CreateProblemPressure();
  {
    std::shared_ptr<  dive::problems::ProblemPressure > *smartresult = result ? new std::shared_ptr<  dive::problems::ProblemPressure >(result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_std__shared_ptrT_dive__problems__ProblemPressure_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CreateProblemPressure__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  Tag arg1 ;
  size_t val1 ;
  int ecode1 = 0 ;
  ProblemPressurePtr result;
  
  (void)self;
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "CreateProblemPressure" "', argument " "1"" of type '" "Tag""'");
  } 
  arg1 = static_cast< Tag >(val1);
  result = dive::problems::CreateProblemPressure(SWIG_STD_MOVE(arg1));
  {
    std::shared_ptr<  dive::problems::ProblemPressure > *smartresult = result ? new std::shared_ptr<  dive::problems::ProblemPressure >(result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_std__shared_ptrT_dive__problems__ProblemPressure_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CreateProblemPressure(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "CreateProblemPressure", 0, 1, argv))) SWIG_fail;
  --argc;
  if (argc == 0) {
    return _wrap_CreateProblemPressure__SWIG_0(self, argc, argv);
  }
  if (argc == 1) {
    int _v = 0;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_CreateProblemPressure__SWIG_1(self, argc, argv);
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'CreateProblemPressure'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    dive::problems::CreateProblemPressure()\n"
    "    dive::problems::CreateProblemPressure(Tag)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_ProblemPressure(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  dive::problems::ProblemPressure *arg1 = (dive::problems::ProblemPressure *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< dive::problems::ProblemPressure > tempshared1 ;
  std::shared_ptr< dive::problems::ProblemPressure > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_dive__problems__ProblemPressure_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ProblemPressure" "', argument " "1"" of type '" "dive::problems::ProblemPressure *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  dive::problems::ProblemPressure > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  dive::problems::ProblemPressure > * >(argp1);
      arg1 = const_cast< dive::problems::ProblemPressure * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  dive::problems::ProblemPressure > * >(argp1);
      arg1 = const_cast< dive::problems::ProblemPressure * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  (void)arg1; delete smartarg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ProblemPressure_Create(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ProblemPressurePtr result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "ProblemPressure_Create", 0, 0, 0)) SWIG_fail;
  result = dive::problems::ProblemPressure::Create();
  {
    std::shared_ptr<  dive::problems::ProblemPressure > *smartresult = result ? new std::shared_ptr<  dive::problems::ProblemPressure >(result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_std__shared_ptrT_dive__problems__ProblemPressure_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ProblemPressure_GetPtr__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  dive::problems::ProblemPressure *arg1 = (dive::problems::ProblemPressure *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< dive::problems::ProblemPressure > tempshared1 ;
  std::shared_ptr< dive::problems::ProblemPressure > *smartarg1 = 0 ;
  ProblemPressurePtr result;
  
  (void)self;
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_dive__problems__ProblemPressure_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ProblemPressure_GetPtr" "', argument " "1"" of type '" "dive::problems::ProblemPressure *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  dive::problems::ProblemPressure > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  dive::problems::ProblemPressure > * >(argp1);
      arg1 = const_cast< dive::problems::ProblemPressure * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  dive::problems::ProblemPressure > * >(argp1);
      arg1 = const_cast< dive::problems::ProblemPressure * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = (arg1)->GetPtr();
  {
    std::shared_ptr<  dive::problems::ProblemPressure > *smartresult = result ? new std::shared_ptr<  dive::problems::ProblemPressure >(result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_std__shared_ptrT_dive__problems__ProblemPressure_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ProblemPressure_GetPtr__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  dive::problems::ProblemPressure *arg1 = (dive::problems::ProblemPressure *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< dive::problems::ProblemPressure const > tempshared1 ;
  std::shared_ptr< dive::problems::ProblemPressure const > *smartarg1 = 0 ;
  ConstProblemPressurePtr result;
  
  (void)self;
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_dive__problems__ProblemPressure_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ProblemPressure_GetPtr" "', argument " "1"" of type '" "dive::problems::ProblemPressure const *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const dive::problems::ProblemPressure > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const dive::problems::ProblemPressure > * >(argp1);
      arg1 = const_cast< dive::problems::ProblemPressure * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const dive::problems::ProblemPressure > * >(argp1);
      arg1 = const_cast< dive::problems::ProblemPressure * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = ((dive::problems::ProblemPressure const *)arg1)->GetPtr();
  {
    std::shared_ptr< const dive::problems::ProblemPressure > *smartresult = result ? new std::shared_ptr< const dive::problems::ProblemPressure >(result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_std__shared_ptrT_dive__problems__ProblemPressure_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ProblemPressure_GetPtr(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "ProblemPressure_GetPtr", 0, 1, argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    int _v = 0;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_std__shared_ptrT_dive__problems__ProblemPressure_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_ProblemPressure_GetPtr__SWIG_0(self, argc, argv);
    }
  }
  if (argc == 1) {
    int _v = 0;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_std__shared_ptrT_dive__problems__ProblemPressure_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_ProblemPressure_GetPtr__SWIG_1(self, argc, argv);
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'ProblemPressure_GetPtr'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    dive::problems::ProblemPressure::GetPtr()\n"
    "    dive::problems::ProblemPressure::GetPtr() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ProblemPressure_GetNumberDof(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  dive::problems::ProblemPressure *arg1 = (dive::problems::ProblemPressure *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< dive::problems::ProblemPressure const > tempshared1 ;
  std::shared_ptr< dive::problems::ProblemPressure const > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  NumberDof result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_dive__problems__ProblemPressure_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ProblemPressure_GetNumberDof" "', argument " "1"" of type '" "dive::problems::ProblemPressure const *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const dive::problems::ProblemPressure > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const dive::problems::ProblemPressure > * >(argp1);
      arg1 = const_cast< dive::problems::ProblemPressure * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const dive::problems::ProblemPressure > * >(argp1);
      arg1 = const_cast< dive::problems::ProblemPressure * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = ((dive::problems::ProblemPressure const *)arg1)->GetNumberDof();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ProblemPressure_GetTotalDof(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  dive::problems::ProblemPressure *arg1 = (dive::problems::ProblemPressure *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< dive::problems::ProblemPressure const > tempshared1 ;
  std::shared_ptr< dive::problems::ProblemPressure const > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  NumberDof result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_dive__problems__ProblemPressure_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ProblemPressure_GetTotalDof" "', argument " "1"" of type '" "dive::problems::ProblemPressure const *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const dive::problems::ProblemPressure > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const dive::problems::ProblemPressure > * >(argp1);
      arg1 = const_cast< dive::problems::ProblemPressure * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const dive::problems::ProblemPressure > * >(argp1);
      arg1 = const_cast< dive::problems::ProblemPressure * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = ((dive::problems::ProblemPressure const *)arg1)->GetTotalDof();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ProblemPressure_GetPivot(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  dive::problems::ProblemPressure *arg1 = (dive::problems::ProblemPressure *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< dive::problems::ProblemPressure const > tempshared1 ;
  std::shared_ptr< dive::problems::ProblemPressure const > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  DofIndex result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_dive__problems__ProblemPressure_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ProblemPressure_GetPivot" "', argument " "1"" of type '" "dive::problems::ProblemPressure const *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const dive::problems::ProblemPressure > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const dive::problems::ProblemPressure > * >(argp1);
      arg1 = const_cast< dive::problems::ProblemPressure * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const dive::problems::ProblemPressure > * >(argp1);
      arg1 = const_cast< dive::problems::ProblemPressure * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = ((dive::problems::ProblemPressure const *)arg1)->GetPivot();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ProblemPressure_GetTimer(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  dive::problems::ProblemPressure *arg1 = (dive::problems::ProblemPressure *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< dive::problems::ProblemPressure const > tempshared1 ;
  std::shared_ptr< dive::problems::ProblemPressure const > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  ITimerPtr result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_dive__problems__ProblemPressure_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ProblemPressure_GetTimer" "', argument " "1"" of type '" "dive::problems::ProblemPressure const *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const dive::problems::ProblemPressure > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const dive::problems::ProblemPressure > * >(argp1);
      arg1 = const_cast< dive::problems::ProblemPressure * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const dive::problems::ProblemPressure > * >(argp1);
      arg1 = const_cast< dive::problems::ProblemPressure * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = ((dive::problems::ProblemPressure const *)arg1)->GetTimer();
  {
    std::shared_ptr<  dive::timers::ITimer > *smartresult = result ? new std::shared_ptr<  dive::timers::ITimer >(result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_std__shared_ptrT_dive__timers__ITimer_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ProblemPressure_GetTemperature(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  dive::problems::ProblemPressure *arg1 = (dive::problems::ProblemPressure *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< dive::problems::ProblemPressure const > tempshared1 ;
  std::shared_ptr< dive::problems::ProblemPressure const > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  IScalar3DPtr result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_dive__problems__ProblemPressure_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ProblemPressure_GetTemperature" "', argument " "1"" of type '" "dive::problems::ProblemPressure const *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const dive::problems::ProblemPressure > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const dive::problems::ProblemPressure > * >(argp1);
      arg1 = const_cast< dive::problems::ProblemPressure * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const dive::problems::ProblemPressure > * >(argp1);
      arg1 = const_cast< dive::problems::ProblemPressure * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = ((dive::problems::ProblemPressure const *)arg1)->GetTemperature();
  {
    std::shared_ptr<  values::IScalar3D > *smartresult = result ? new std::shared_ptr<  values::IScalar3D >(result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_std__shared_ptrT_values__IScalar3D_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ProblemPressure_GetPressure(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  dive::problems::ProblemPressure *arg1 = (dive::problems::ProblemPressure *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< dive::problems::ProblemPressure const > tempshared1 ;
  std::shared_ptr< dive::problems::ProblemPressure const > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  IScalar3DPtr result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_dive__problems__ProblemPressure_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ProblemPressure_GetPressure" "', argument " "1"" of type '" "dive::problems::ProblemPressure const *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const dive::problems::ProblemPressure > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const dive::problems::ProblemPressure > * >(argp1);
      arg1 = const_cast< dive::problems::ProblemPressure * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const dive::problems::ProblemPressure > * >(argp1);
      arg1 = const_cast< dive::problems::ProblemPressure * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = ((dive::problems::ProblemPressure const *)arg1)->GetPressure();
  {
    std::shared_ptr<  values::IScalar3D > *smartresult = result ? new std::shared_ptr<  values::IScalar3D >(result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_std__shared_ptrT_values__IScalar3D_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ProblemPressure_GetVelocity(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  dive::problems::ProblemPressure *arg1 = (dive::problems::ProblemPressure *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< dive::problems::ProblemPressure const > tempshared1 ;
  std::shared_ptr< dive::problems::ProblemPressure const > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  IMatrix3DPtr result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_dive__problems__ProblemPressure_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ProblemPressure_GetVelocity" "', argument " "1"" of type '" "dive::problems::ProblemPressure const *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const dive::problems::ProblemPressure > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const dive::problems::ProblemPressure > * >(argp1);
      arg1 = const_cast< dive::problems::ProblemPressure * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const dive::problems::ProblemPressure > * >(argp1);
      arg1 = const_cast< dive::problems::ProblemPressure * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = ((dive::problems::ProblemPressure const *)arg1)->GetVelocity();
  {
    std::shared_ptr<  values::IMatrix3D > *smartresult = result ? new std::shared_ptr<  values::IMatrix3D >(result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_std__shared_ptrT_values__IMatrix3D_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ProblemPressure_GetMesh(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  dive::problems::ProblemPressure *arg1 = (dive::problems::ProblemPressure *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< dive::problems::ProblemPressure const > tempshared1 ;
  std::shared_ptr< dive::problems::ProblemPressure const > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  IMeshPtr result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_dive__problems__ProblemPressure_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ProblemPressure_GetMesh" "', argument " "1"" of type '" "dive::problems::ProblemPressure const *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const dive::problems::ProblemPressure > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const dive::problems::ProblemPressure > * >(argp1);
      arg1 = const_cast< dive::problems::ProblemPressure * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const dive::problems::ProblemPressure > * >(argp1);
      arg1 = const_cast< dive::problems::ProblemPressure * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = ((dive::problems::ProblemPressure const *)arg1)->GetMesh();
  {
    std::shared_ptr<  dive::meshes::IMesh > *smartresult = result ? new std::shared_ptr<  dive::meshes::IMesh >(result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_std__shared_ptrT_dive__meshes__IMesh_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ProblemPressure_GetType(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  dive::problems::ProblemPressure *arg1 = (dive::problems::ProblemPressure *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< dive::problems::ProblemPressure const > tempshared1 ;
  std::shared_ptr< dive::problems::ProblemPressure const > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  Type result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_dive__problems__ProblemPressure_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ProblemPressure_GetType" "', argument " "1"" of type '" "dive::problems::ProblemPressure const *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const dive::problems::ProblemPressure > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const dive::problems::ProblemPressure > * >(argp1);
      arg1 = const_cast< dive::problems::ProblemPressure * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const dive::problems::ProblemPressure > * >(argp1);
      arg1 = const_cast< dive::problems::ProblemPressure * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = ((dive::problems::ProblemPressure const *)arg1)->GetType();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ProblemPressure_GetTag(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  dive::problems::ProblemPressure *arg1 = (dive::problems::ProblemPressure *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< dive::problems::ProblemPressure const > tempshared1 ;
  std::shared_ptr< dive::problems::ProblemPressure const > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  Tag result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_dive__problems__ProblemPressure_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ProblemPressure_GetTag" "', argument " "1"" of type '" "dive::problems::ProblemPressure const *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const dive::problems::ProblemPressure > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const dive::problems::ProblemPressure > * >(argp1);
      arg1 = const_cast< dive::problems::ProblemPressure * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const dive::problems::ProblemPressure > * >(argp1);
      arg1 = const_cast< dive::problems::ProblemPressure * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = ((dive::problems::ProblemPressure const *)arg1)->GetTag();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ProblemPressure_GetDirichlets(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  dive::problems::ProblemPressure *arg1 = (dive::problems::ProblemPressure *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< dive::problems::ProblemPressure const > tempshared1 ;
  std::shared_ptr< dive::problems::ProblemPressure const > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  Dirichlets *result = 0 ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_dive__problems__ProblemPressure_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ProblemPressure_GetDirichlets" "', argument " "1"" of type '" "dive::problems::ProblemPressure const *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const dive::problems::ProblemPressure > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const dive::problems::ProblemPressure > * >(argp1);
      arg1 = const_cast< dive::problems::ProblemPressure * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const dive::problems::ProblemPressure > * >(argp1);
      arg1 = const_cast< dive::problems::ProblemPressure * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = (Dirichlets *) &((dive::problems::ProblemPressure const *)arg1)->GetDirichlets();
  resultobj = swig::from(static_cast< std::vector< std::shared_ptr< dive::loads::IDirichlet >,std::allocator< std::shared_ptr< dive::loads::IDirichlet > > > >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ProblemPressure_GetLoads(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  dive::problems::ProblemPressure *arg1 = (dive::problems::ProblemPressure *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< dive::problems::ProblemPressure const > tempshared1 ;
  std::shared_ptr< dive::problems::ProblemPressure const > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  Loads *result = 0 ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_dive__problems__ProblemPressure_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ProblemPressure_GetLoads" "', argument " "1"" of type '" "dive::problems::ProblemPressure const *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const dive::problems::ProblemPressure > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const dive::problems::ProblemPressure > * >(argp1);
      arg1 = const_cast< dive::problems::ProblemPressure * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const dive::problems::ProblemPressure > * >(argp1);
      arg1 = const_cast< dive::problems::ProblemPressure * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = (Loads *) &((dive::problems::ProblemPressure const *)arg1)->GetLoads();
  resultobj = swig::from(static_cast< std::vector< std::shared_ptr< dive::loads::ILoad >,std::allocator< std::shared_ptr< dive::loads::ILoad > > > >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ProblemPressure_GetDofMeshIndices(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  dive::problems::ProblemPressure *arg1 = (dive::problems::ProblemPressure *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< dive::problems::ProblemPressure const > tempshared1 ;
  std::shared_ptr< dive::problems::ProblemPressure const > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  dive::DofMeshIndices *result = 0 ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_dive__problems__ProblemPressure_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ProblemPressure_GetDofMeshIndices" "', argument " "1"" of type '" "dive::problems::ProblemPressure const *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const dive::problems::ProblemPressure > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const dive::problems::ProblemPressure > * >(argp1);
      arg1 = const_cast< dive::problems::ProblemPressure * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const dive::problems::ProblemPressure > * >(argp1);
      arg1 = const_cast< dive::problems::ProblemPressure * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = (dive::DofMeshIndices *) &((dive::problems::ProblemPressure const *)arg1)->GetDofMeshIndices();
  resultobj = swig::from(static_cast< std::vector< dive::DofMeshIndex,std::allocator< dive::DofMeshIndex > > >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ProblemPressure_GetNodeMeshIndices(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  dive::problems::ProblemPressure *arg1 = (dive::problems::ProblemPressure *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< dive::problems::ProblemPressure const > tempshared1 ;
  std::shared_ptr< dive::problems::ProblemPressure const > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  dive::NodeMeshIndices *result = 0 ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_dive__problems__ProblemPressure_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ProblemPressure_GetNodeMeshIndices" "', argument " "1"" of type '" "dive::problems::ProblemPressure const *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const dive::problems::ProblemPressure > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const dive::problems::ProblemPressure > * >(argp1);
      arg1 = const_cast< dive::problems::ProblemPressure * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const dive::problems::ProblemPressure > * >(argp1);
      arg1 = const_cast< dive::problems::ProblemPressure * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = (dive::NodeMeshIndices *) &((dive::problems::ProblemPressure const *)arg1)->GetNodeMeshIndices();
  resultobj = swig::from(static_cast< std::vector< std::vector< dive::NodeMeshIndex,std::allocator< dive::NodeMeshIndex > >,std::allocator< std::vector< dive::NodeMeshIndex,std::allocator< dive::NodeMeshIndex > > > > >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ProblemPressure_GetDirichletMeshIndices(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  dive::problems::ProblemPressure *arg1 = (dive::problems::ProblemPressure *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< dive::problems::ProblemPressure const > tempshared1 ;
  std::shared_ptr< dive::problems::ProblemPressure const > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  dive::DirichletMeshIndices *result = 0 ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_dive__problems__ProblemPressure_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ProblemPressure_GetDirichletMeshIndices" "', argument " "1"" of type '" "dive::problems::ProblemPressure const *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const dive::problems::ProblemPressure > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const dive::problems::ProblemPressure > * >(argp1);
      arg1 = const_cast< dive::problems::ProblemPressure * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const dive::problems::ProblemPressure > * >(argp1);
      arg1 = const_cast< dive::problems::ProblemPressure * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = (dive::DirichletMeshIndices *) &((dive::problems::ProblemPressure const *)arg1)->GetDirichletMeshIndices();
  resultobj = swig::from(static_cast< std::vector< dive::DirichletMeshIndex,std::allocator< dive::DirichletMeshIndex > > >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ProblemPressure_SetTimer(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  dive::problems::ProblemPressure *arg1 = (dive::problems::ProblemPressure *) 0 ;
  ITimerPtr arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< dive::problems::ProblemPressure > tempshared1 ;
  std::shared_ptr< dive::problems::ProblemPressure > *smartarg1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "ProblemPressure_SetTimer", 2, 2, swig_obj)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_dive__problems__ProblemPressure_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ProblemPressure_SetTimer" "', argument " "1"" of type '" "dive::problems::ProblemPressure *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  dive::problems::ProblemPressure > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  dive::problems::ProblemPressure > * >(argp1);
      arg1 = const_cast< dive::problems::ProblemPressure * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  dive::problems::ProblemPressure > * >(argp1);
      arg1 = const_cast< dive::problems::ProblemPressure * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    int newmem = 0;
    res2 = SWIG_ConvertPtrAndOwn(swig_obj[1], &argp2, SWIGTYPE_p_std__shared_ptrT_dive__timers__ITimer_t,  0 , &newmem);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ProblemPressure_SetTimer" "', argument " "2"" of type '" "ITimerPtr""'");
    }
    if (argp2) arg2 = *(reinterpret_cast< ITimerPtr * >(argp2));
    if (newmem & SWIG_CAST_NEW_MEMORY) delete reinterpret_cast< ITimerPtr * >(argp2);
  }
  (arg1)->SetTimer(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ProblemPressure_SetTemperature(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  dive::problems::ProblemPressure *arg1 = (dive::problems::ProblemPressure *) 0 ;
  IScalar3DPtr arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< dive::problems::ProblemPressure > tempshared1 ;
  std::shared_ptr< dive::problems::ProblemPressure > *smartarg1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "ProblemPressure_SetTemperature", 2, 2, swig_obj)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_dive__problems__ProblemPressure_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ProblemPressure_SetTemperature" "', argument " "1"" of type '" "dive::problems::ProblemPressure *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  dive::problems::ProblemPressure > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  dive::problems::ProblemPressure > * >(argp1);
      arg1 = const_cast< dive::problems::ProblemPressure * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  dive::problems::ProblemPressure > * >(argp1);
      arg1 = const_cast< dive::problems::ProblemPressure * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    int newmem = 0;
    res2 = SWIG_ConvertPtrAndOwn(swig_obj[1], &argp2, SWIGTYPE_p_std__shared_ptrT_values__IScalar3D_t,  0 , &newmem);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ProblemPressure_SetTemperature" "', argument " "2"" of type '" "IScalar3DPtr""'");
    }
    if (argp2) arg2 = *(reinterpret_cast< IScalar3DPtr * >(argp2));
    if (newmem & SWIG_CAST_NEW_MEMORY) delete reinterpret_cast< IScalar3DPtr * >(argp2);
  }
  (arg1)->SetTemperature(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ProblemPressure_SetVelocity(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  dive::problems::ProblemPressure *arg1 = (dive::problems::ProblemPressure *) 0 ;
  IMatrix3DPtr arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< dive::problems::ProblemPressure > tempshared1 ;
  std::shared_ptr< dive::problems::ProblemPressure > *smartarg1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "ProblemPressure_SetVelocity", 2, 2, swig_obj)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_dive__problems__ProblemPressure_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ProblemPressure_SetVelocity" "', argument " "1"" of type '" "dive::problems::ProblemPressure *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  dive::problems::ProblemPressure > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  dive::problems::ProblemPressure > * >(argp1);
      arg1 = const_cast< dive::problems::ProblemPressure * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  dive::problems::ProblemPressure > * >(argp1);
      arg1 = const_cast< dive::problems::ProblemPressure * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    int newmem = 0;
    res2 = SWIG_ConvertPtrAndOwn(swig_obj[1], &argp2, SWIGTYPE_p_std__shared_ptrT_values__IMatrix3D_t,  0 , &newmem);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ProblemPressure_SetVelocity" "', argument " "2"" of type '" "IMatrix3DPtr""'");
    }
    if (argp2) arg2 = *(reinterpret_cast< IMatrix3DPtr * >(argp2));
    if (newmem & SWIG_CAST_NEW_MEMORY) delete reinterpret_cast< IMatrix3DPtr * >(argp2);
  }
  (arg1)->SetVelocity(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ProblemPressure_SetMesh(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  dive::problems::ProblemPressure *arg1 = (dive::problems::ProblemPressure *) 0 ;
  IMeshPtr arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< dive::problems::ProblemPressure > tempshared1 ;
  std::shared_ptr< dive::problems::ProblemPressure > *smartarg1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "ProblemPressure_SetMesh", 2, 2, swig_obj)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_dive__problems__ProblemPressure_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ProblemPressure_SetMesh" "', argument " "1"" of type '" "dive::problems::ProblemPressure *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  dive::problems::ProblemPressure > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  dive::problems::ProblemPressure > * >(argp1);
      arg1 = const_cast< dive::problems::ProblemPressure * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  dive::problems::ProblemPressure > * >(argp1);
      arg1 = const_cast< dive::problems::ProblemPressure * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    int newmem = 0;
    res2 = SWIG_ConvertPtrAndOwn(swig_obj[1], &argp2, SWIGTYPE_p_std__shared_ptrT_dive__meshes__IMesh_t,  0 , &newmem);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ProblemPressure_SetMesh" "', argument " "2"" of type '" "IMeshPtr""'");
    }
    if (argp2) arg2 = *(reinterpret_cast< IMeshPtr * >(argp2));
    if (newmem & SWIG_CAST_NEW_MEMORY) delete reinterpret_cast< IMeshPtr * >(argp2);
  }
  (arg1)->SetMesh(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ProblemPressure_SetTag(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  dive::problems::ProblemPressure *arg1 = (dive::problems::ProblemPressure *) 0 ;
  Tag arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< dive::problems::ProblemPressure > tempshared1 ;
  std::shared_ptr< dive::problems::ProblemPressure > *smartarg1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "ProblemPressure_SetTag", 2, 2, swig_obj)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_dive__problems__ProblemPressure_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ProblemPressure_SetTag" "', argument " "1"" of type '" "dive::problems::ProblemPressure *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  dive::problems::ProblemPressure > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  dive::problems::ProblemPressure > * >(argp1);
      arg1 = const_cast< dive::problems::ProblemPressure * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  dive::problems::ProblemPressure > * >(argp1);
      arg1 = const_cast< dive::problems::ProblemPressure * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ProblemPressure_SetTag" "', argument " "2"" of type '" "Tag""'");
  } 
  arg2 = static_cast< Tag >(val2);
  (arg1)->SetTag(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ProblemPressure_AddDirichlet(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  dive::problems::ProblemPressure *arg1 = (dive::problems::ProblemPressure *) 0 ;
  IDirichletPtr arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< dive::problems::ProblemPressure > tempshared1 ;
  std::shared_ptr< dive::problems::ProblemPressure > *smartarg1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "ProblemPressure_AddDirichlet", 2, 2, swig_obj)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_dive__problems__ProblemPressure_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ProblemPressure_AddDirichlet" "', argument " "1"" of type '" "dive::problems::ProblemPressure *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  dive::problems::ProblemPressure > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  dive::problems::ProblemPressure > * >(argp1);
      arg1 = const_cast< dive::problems::ProblemPressure * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  dive::problems::ProblemPressure > * >(argp1);
      arg1 = const_cast< dive::problems::ProblemPressure * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    int newmem = 0;
    res2 = SWIG_ConvertPtrAndOwn(swig_obj[1], &argp2, SWIGTYPE_p_std__shared_ptrT_dive__loads__IDirichlet_t,  0 , &newmem);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ProblemPressure_AddDirichlet" "', argument " "2"" of type '" "IDirichletPtr""'");
    }
    if (argp2) arg2 = *(reinterpret_cast< IDirichletPtr * >(argp2));
    if (newmem & SWIG_CAST_NEW_MEMORY) delete reinterpret_cast< IDirichletPtr * >(argp2);
  }
  (arg1)->AddDirichlet(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ProblemPressure_AddLoad(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  dive::problems::ProblemPressure *arg1 = (dive::problems::ProblemPressure *) 0 ;
  ILoadPtr arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< dive::problems::ProblemPressure > tempshared1 ;
  std::shared_ptr< dive::problems::ProblemPressure > *smartarg1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "ProblemPressure_AddLoad", 2, 2, swig_obj)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_dive__problems__ProblemPressure_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ProblemPressure_AddLoad" "', argument " "1"" of type '" "dive::problems::ProblemPressure *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  dive::problems::ProblemPressure > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  dive::problems::ProblemPressure > * >(argp1);
      arg1 = const_cast< dive::problems::ProblemPressure * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  dive::problems::ProblemPressure > * >(argp1);
      arg1 = const_cast< dive::problems::ProblemPressure * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    int newmem = 0;
    res2 = SWIG_ConvertPtrAndOwn(swig_obj[1], &argp2, SWIGTYPE_p_std__shared_ptrT_dive__loads__ILoad_t,  0 , &newmem);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ProblemPressure_AddLoad" "', argument " "2"" of type '" "ILoadPtr""'");
    }
    if (argp2) arg2 = *(reinterpret_cast< ILoadPtr * >(argp2));
    if (newmem & SWIG_CAST_NEW_MEMORY) delete reinterpret_cast< ILoadPtr * >(argp2);
  }
  (arg1)->AddLoad(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ProblemPressure_Initialize(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  dive::problems::ProblemPressure *arg1 = (dive::problems::ProblemPressure *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< dive::problems::ProblemPressure > tempshared1 ;
  std::shared_ptr< dive::problems::ProblemPressure > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_dive__problems__ProblemPressure_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ProblemPressure_Initialize" "', argument " "1"" of type '" "dive::problems::ProblemPressure *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  dive::problems::ProblemPressure > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  dive::problems::ProblemPressure > * >(argp1);
      arg1 = const_cast< dive::problems::ProblemPressure * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  dive::problems::ProblemPressure > * >(argp1);
      arg1 = const_cast< dive::problems::ProblemPressure * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  (arg1)->Initialize();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ProblemPressure_UpdateMeshValues(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  dive::problems::ProblemPressure *arg1 = (dive::problems::ProblemPressure *) 0 ;
  Vector *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< dive::problems::ProblemPressure > tempshared1 ;
  std::shared_ptr< dive::problems::ProblemPressure > *smartarg1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "ProblemPressure_UpdateMeshValues", 2, 2, swig_obj)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_dive__problems__ProblemPressure_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ProblemPressure_UpdateMeshValues" "', argument " "1"" of type '" "dive::problems::ProblemPressure *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  dive::problems::ProblemPressure > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  dive::problems::ProblemPressure > * >(argp1);
      arg1 = const_cast< dive::problems::ProblemPressure * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  dive::problems::ProblemPressure > * >(argp1);
      arg1 = const_cast< dive::problems::ProblemPressure * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_eilig__Vector,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ProblemPressure_UpdateMeshValues" "', argument " "2"" of type '" "Vector const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ProblemPressure_UpdateMeshValues" "', argument " "2"" of type '" "Vector const &""'"); 
  }
  arg2 = reinterpret_cast< Vector * >(argp2);
  (arg1)->UpdateMeshValues((Vector const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ProblemPressure_Mass(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  dive::problems::ProblemPressure *arg1 = (dive::problems::ProblemPressure *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< dive::problems::ProblemPressure const > tempshared1 ;
  std::shared_ptr< dive::problems::ProblemPressure const > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  Sparse result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_dive__problems__ProblemPressure_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ProblemPressure_Mass" "', argument " "1"" of type '" "dive::problems::ProblemPressure const *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const dive::problems::ProblemPressure > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const dive::problems::ProblemPressure > * >(argp1);
      arg1 = const_cast< dive::problems::ProblemPressure * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const dive::problems::ProblemPressure > * >(argp1);
      arg1 = const_cast< dive::problems::ProblemPressure * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = ((dive::problems::ProblemPressure const *)arg1)->Mass();
  resultobj = SWIG_NewPointerObj((new Sparse(result)), SWIGTYPE_p_eilig__Ellpack, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ProblemPressure_Stiffness(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  dive::problems::ProblemPressure *arg1 = (dive::problems::ProblemPressure *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< dive::problems::ProblemPressure const > tempshared1 ;
  std::shared_ptr< dive::problems::ProblemPressure const > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  Sparse result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_dive__problems__ProblemPressure_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ProblemPressure_Stiffness" "', argument " "1"" of type '" "dive::problems::ProblemPressure const *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const dive::problems::ProblemPressure > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const dive::problems::ProblemPressure > * >(argp1);
      arg1 = const_cast< dive::problems::ProblemPressure * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const dive::problems::ProblemPressure > * >(argp1);
      arg1 = const_cast< dive::problems::ProblemPressure * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = ((dive::problems::ProblemPressure const *)arg1)->Stiffness();
  resultobj = SWIG_NewPointerObj((new Sparse(result)), SWIGTYPE_p_eilig__Ellpack, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ProblemPressure_Crossed(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  dive::problems::ProblemPressure *arg1 = (dive::problems::ProblemPressure *) 0 ;
  IProblemPtr arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< dive::problems::ProblemPressure const > tempshared1 ;
  std::shared_ptr< dive::problems::ProblemPressure const > *smartarg1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  Sparse result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "ProblemPressure_Crossed", 2, 2, swig_obj)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_dive__problems__ProblemPressure_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ProblemPressure_Crossed" "', argument " "1"" of type '" "dive::problems::ProblemPressure const *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const dive::problems::ProblemPressure > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const dive::problems::ProblemPressure > * >(argp1);
      arg1 = const_cast< dive::problems::ProblemPressure * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const dive::problems::ProblemPressure > * >(argp1);
      arg1 = const_cast< dive::problems::ProblemPressure * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    int newmem = 0;
    res2 = SWIG_ConvertPtrAndOwn(swig_obj[1], &argp2, SWIGTYPE_p_std__shared_ptrT_dive__problems__IProblem_t,  0 , &newmem);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ProblemPressure_Crossed" "', argument " "2"" of type '" "IProblemPtr""'");
    }
    if (argp2) arg2 = *(reinterpret_cast< IProblemPtr * >(argp2));
    if (newmem & SWIG_CAST_NEW_MEMORY) delete reinterpret_cast< IProblemPtr * >(argp2);
  }
  result = ((dive::problems::ProblemPressure const *)arg1)->Crossed(arg2);
  resultobj = SWIG_NewPointerObj((new Sparse(result)), SWIGTYPE_p_eilig__Ellpack, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ProblemPressure_Stabilization(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  dive::problems::ProblemPressure *arg1 = (dive::problems::ProblemPressure *) 0 ;
  IProblemPtr arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< dive::problems::ProblemPressure const > tempshared1 ;
  std::shared_ptr< dive::problems::ProblemPressure const > *smartarg1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  Sparse result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "ProblemPressure_Stabilization", 2, 2, swig_obj)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_dive__problems__ProblemPressure_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ProblemPressure_Stabilization" "', argument " "1"" of type '" "dive::problems::ProblemPressure const *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const dive::problems::ProblemPressure > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const dive::problems::ProblemPressure > * >(argp1);
      arg1 = const_cast< dive::problems::ProblemPressure * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const dive::problems::ProblemPressure > * >(argp1);
      arg1 = const_cast< dive::problems::ProblemPressure * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    int newmem = 0;
    res2 = SWIG_ConvertPtrAndOwn(swig_obj[1], &argp2, SWIGTYPE_p_std__shared_ptrT_dive__problems__IProblem_t,  0 , &newmem);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ProblemPressure_Stabilization" "', argument " "2"" of type '" "IProblemPtr""'");
    }
    if (argp2) arg2 = *(reinterpret_cast< IProblemPtr * >(argp2));
    if (newmem & SWIG_CAST_NEW_MEMORY) delete reinterpret_cast< IProblemPtr * >(argp2);
  }
  result = ((dive::problems::ProblemPressure const *)arg1)->Stabilization(arg2);
  resultobj = SWIG_NewPointerObj((new Sparse(result)), SWIGTYPE_p_eilig__Ellpack, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ProblemPressure_LoadDistributedFaceFlux(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  dive::problems::ProblemPressure *arg1 = (dive::problems::ProblemPressure *) 0 ;
  IProblemPtr arg2 ;
  Vector *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< dive::problems::ProblemPressure const > tempshared1 ;
  std::shared_ptr< dive::problems::ProblemPressure const > *smartarg1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject *swig_obj[3] ;
  Vector result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "ProblemPressure_LoadDistributedFaceFlux", 3, 3, swig_obj)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_dive__problems__ProblemPressure_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ProblemPressure_LoadDistributedFaceFlux" "', argument " "1"" of type '" "dive::problems::ProblemPressure const *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const dive::problems::ProblemPressure > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const dive::problems::ProblemPressure > * >(argp1);
      arg1 = const_cast< dive::problems::ProblemPressure * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const dive::problems::ProblemPressure > * >(argp1);
      arg1 = const_cast< dive::problems::ProblemPressure * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    int newmem = 0;
    res2 = SWIG_ConvertPtrAndOwn(swig_obj[1], &argp2, SWIGTYPE_p_std__shared_ptrT_dive__problems__IProblem_t,  0 , &newmem);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ProblemPressure_LoadDistributedFaceFlux" "', argument " "2"" of type '" "IProblemPtr""'");
    }
    if (argp2) arg2 = *(reinterpret_cast< IProblemPtr * >(argp2));
    if (newmem & SWIG_CAST_NEW_MEMORY) delete reinterpret_cast< IProblemPtr * >(argp2);
  }
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_eilig__Vector,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ProblemPressure_LoadDistributedFaceFlux" "', argument " "3"" of type '" "Vector const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ProblemPressure_LoadDistributedFaceFlux" "', argument " "3"" of type '" "Vector const &""'"); 
  }
  arg3 = reinterpret_cast< Vector * >(argp3);
  result = ((dive::problems::ProblemPressure const *)arg1)->LoadDistributedFaceFlux(arg2,(Vector const &)*arg3);
  resultobj = SWIG_NewPointerObj((new Vector(result)), SWIGTYPE_p_eilig__Vector, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ProblemPressure_Pressure(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  dive::problems::ProblemPressure *arg1 = (dive::problems::ProblemPressure *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< dive::problems::ProblemPressure const > tempshared1 ;
  std::shared_ptr< dive::problems::ProblemPressure const > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  Vector result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_dive__problems__ProblemPressure_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ProblemPressure_Pressure" "', argument " "1"" of type '" "dive::problems::ProblemPressure const *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const dive::problems::ProblemPressure > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const dive::problems::ProblemPressure > * >(argp1);
      arg1 = const_cast< dive::problems::ProblemPressure * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const dive::problems::ProblemPressure > * >(argp1);
      arg1 = const_cast< dive::problems::ProblemPressure * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = ((dive::problems::ProblemPressure const *)arg1)->Pressure();
  resultobj = SWIG_NewPointerObj((new Vector(result)), SWIGTYPE_p_eilig__Vector, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *ProblemPressure_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_std__shared_ptrT_dive__problems__ProblemPressure_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_Face_faceIndex_set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  dive::selection::Face *arg1 = (dive::selection::Face *) 0 ;
  FaceIndex arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "Face_faceIndex_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_dive__selection__Face, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Face_faceIndex_set" "', argument " "1"" of type '" "dive::selection::Face *""'"); 
  }
  arg1 = reinterpret_cast< dive::selection::Face * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Face_faceIndex_set" "', argument " "2"" of type '" "FaceIndex""'");
  } 
  arg2 = static_cast< FaceIndex >(val2);
  if (arg1) (arg1)->faceIndex = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Face_faceIndex_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  dive::selection::Face *arg1 = (dive::selection::Face *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  FaceIndex result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_dive__selection__Face, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Face_faceIndex_get" "', argument " "1"" of type '" "dive::selection::Face *""'"); 
  }
  arg1 = reinterpret_cast< dive::selection::Face * >(argp1);
  result =  ((arg1)->faceIndex);
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Face_element_set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  dive::selection::Face *arg1 = (dive::selection::Face *) 0 ;
  IElementPtr *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  IElementPtr tempshared2 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "Face_element_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_dive__selection__Face, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Face_element_set" "', argument " "1"" of type '" "dive::selection::Face *""'"); 
  }
  arg1 = reinterpret_cast< dive::selection::Face * >(argp1);
  {
    int newmem = 0;
    res2 = SWIG_ConvertPtrAndOwn(swig_obj[1], &argp2, SWIGTYPE_p_std__shared_ptrT_dive__elements__IElement_t,  0 , &newmem);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Face_element_set" "', argument " "2"" of type '" "IElementPtr const &""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      if (argp2) tempshared2 = *reinterpret_cast< IElementPtr * >(argp2);
      delete reinterpret_cast< IElementPtr * >(argp2);
      arg2 = &tempshared2;
    } else {
      arg2 = (argp2) ? reinterpret_cast< IElementPtr * >(argp2) : &tempshared2;
    }
  }
  if (arg1) (arg1)->element = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Face_element_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  dive::selection::Face *arg1 = (dive::selection::Face *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  IElementPtr *result = 0 ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_dive__selection__Face, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Face_element_get" "', argument " "1"" of type '" "dive::selection::Face *""'"); 
  }
  arg1 = reinterpret_cast< dive::selection::Face * >(argp1);
  result = (IElementPtr *) & ((arg1)->element);
  {
    std::shared_ptr<  dive::elements::IElement > *smartresult = *result ? new std::shared_ptr<  dive::elements::IElement >(*result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_std__shared_ptrT_dive__elements__IElement_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Face(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  dive::selection::Face *result = 0 ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "new_Face", 0, 0, 0)) SWIG_fail;
  result = (dive::selection::Face *)new dive::selection::Face();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_dive__selection__Face, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_Face(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  dive::selection::Face *arg1 = (dive::selection::Face *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_dive__selection__Face, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Face" "', argument " "1"" of type '" "dive::selection::Face *""'"); 
  }
  arg1 = reinterpret_cast< dive::selection::Face * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *Face_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_dive__selection__Face, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *Face_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_NodeCmp___call__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  dive::selection::NodeCmp *arg1 = (dive::selection::NodeCmp *) 0 ;
  INodePtr arg2 ;
  INodePtr arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  PyObject *swig_obj[3] ;
  bool result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "NodeCmp___call__", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_dive__selection__NodeCmp, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NodeCmp___call__" "', argument " "1"" of type '" "dive::selection::NodeCmp const *""'"); 
  }
  arg1 = reinterpret_cast< dive::selection::NodeCmp * >(argp1);
  {
    int newmem = 0;
    res2 = SWIG_ConvertPtrAndOwn(swig_obj[1], &argp2, SWIGTYPE_p_std__shared_ptrT_nodes__INode_t,  0 , &newmem);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NodeCmp___call__" "', argument " "2"" of type '" "INodePtr""'");
    }
    if (argp2) arg2 = *(reinterpret_cast< INodePtr * >(argp2));
    if (newmem & SWIG_CAST_NEW_MEMORY) delete reinterpret_cast< INodePtr * >(argp2);
  }
  {
    int newmem = 0;
    res3 = SWIG_ConvertPtrAndOwn(swig_obj[2], &argp3, SWIGTYPE_p_std__shared_ptrT_nodes__INode_t,  0 , &newmem);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "NodeCmp___call__" "', argument " "3"" of type '" "INodePtr""'");
    }
    if (argp3) arg3 = *(reinterpret_cast< INodePtr * >(argp3));
    if (newmem & SWIG_CAST_NEW_MEMORY) delete reinterpret_cast< INodePtr * >(argp3);
  }
  result = (bool)((dive::selection::NodeCmp const *)arg1)->operator ()(arg2,arg3);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_NodeCmp(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  dive::selection::NodeCmp *result = 0 ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "new_NodeCmp", 0, 0, 0)) SWIG_fail;
  result = (dive::selection::NodeCmp *)new dive::selection::NodeCmp();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_dive__selection__NodeCmp, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_NodeCmp(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  dive::selection::NodeCmp *arg1 = (dive::selection::NodeCmp *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_dive__selection__NodeCmp, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_NodeCmp" "', argument " "1"" of type '" "dive::selection::NodeCmp *""'"); 
  }
  arg1 = reinterpret_cast< dive::selection::NodeCmp * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *NodeCmp_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_dive__selection__NodeCmp, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *NodeCmp_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_ElementCmp___call__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  dive::selection::ElementCmp *arg1 = (dive::selection::ElementCmp *) 0 ;
  IElementPtr arg2 ;
  IElementPtr arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  PyObject *swig_obj[3] ;
  bool result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "ElementCmp___call__", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_dive__selection__ElementCmp, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ElementCmp___call__" "', argument " "1"" of type '" "dive::selection::ElementCmp const *""'"); 
  }
  arg1 = reinterpret_cast< dive::selection::ElementCmp * >(argp1);
  {
    int newmem = 0;
    res2 = SWIG_ConvertPtrAndOwn(swig_obj[1], &argp2, SWIGTYPE_p_std__shared_ptrT_dive__elements__IElement_t,  0 , &newmem);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ElementCmp___call__" "', argument " "2"" of type '" "IElementPtr""'");
    }
    if (argp2) arg2 = *(reinterpret_cast< IElementPtr * >(argp2));
    if (newmem & SWIG_CAST_NEW_MEMORY) delete reinterpret_cast< IElementPtr * >(argp2);
  }
  {
    int newmem = 0;
    res3 = SWIG_ConvertPtrAndOwn(swig_obj[2], &argp3, SWIGTYPE_p_std__shared_ptrT_dive__elements__IElement_t,  0 , &newmem);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ElementCmp___call__" "', argument " "3"" of type '" "IElementPtr""'");
    }
    if (argp3) arg3 = *(reinterpret_cast< IElementPtr * >(argp3));
    if (newmem & SWIG_CAST_NEW_MEMORY) delete reinterpret_cast< IElementPtr * >(argp3);
  }
  result = (bool)((dive::selection::ElementCmp const *)arg1)->operator ()(arg2,arg3);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ElementCmp(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  dive::selection::ElementCmp *result = 0 ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "new_ElementCmp", 0, 0, 0)) SWIG_fail;
  result = (dive::selection::ElementCmp *)new dive::selection::ElementCmp();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_dive__selection__ElementCmp, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_ElementCmp(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  dive::selection::ElementCmp *arg1 = (dive::selection::ElementCmp *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_dive__selection__ElementCmp, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ElementCmp" "', argument " "1"" of type '" "dive::selection::ElementCmp *""'"); 
  }
  arg1 = reinterpret_cast< dive::selection::ElementCmp * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *ElementCmp_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_dive__selection__ElementCmp, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *ElementCmp_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_FaceCmp___call__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  dive::selection::FaceCmp *arg1 = (dive::selection::FaceCmp *) 0 ;
  dive::selection::Face arg2 ;
  dive::selection::Face arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  PyObject *swig_obj[3] ;
  bool result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "FaceCmp___call__", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_dive__selection__FaceCmp, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FaceCmp___call__" "', argument " "1"" of type '" "dive::selection::FaceCmp const *""'"); 
  }
  arg1 = reinterpret_cast< dive::selection::FaceCmp * >(argp1);
  {
    res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_dive__selection__Face,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "FaceCmp___call__" "', argument " "2"" of type '" "dive::selection::Face""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "FaceCmp___call__" "', argument " "2"" of type '" "dive::selection::Face""'");
    } else {
      dive::selection::Face * temp = reinterpret_cast< dive::selection::Face * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_dive__selection__Face,  0  | 0);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "FaceCmp___call__" "', argument " "3"" of type '" "dive::selection::Face""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "FaceCmp___call__" "', argument " "3"" of type '" "dive::selection::Face""'");
    } else {
      dive::selection::Face * temp = reinterpret_cast< dive::selection::Face * >(argp3);
      arg3 = *temp;
      if (SWIG_IsNewObj(res3)) delete temp;
    }
  }
  result = (bool)((dive::selection::FaceCmp const *)arg1)->operator ()(arg2,arg3);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_FaceCmp(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  dive::selection::FaceCmp *result = 0 ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "new_FaceCmp", 0, 0, 0)) SWIG_fail;
  result = (dive::selection::FaceCmp *)new dive::selection::FaceCmp();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_dive__selection__FaceCmp, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_FaceCmp(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  dive::selection::FaceCmp *arg1 = (dive::selection::FaceCmp *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_dive__selection__FaceCmp, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_FaceCmp" "', argument " "1"" of type '" "dive::selection::FaceCmp *""'"); 
  }
  arg1 = reinterpret_cast< dive::selection::FaceCmp * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *FaceCmp_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_dive__selection__FaceCmp, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *FaceCmp_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_TypeCmp___call__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  dive::selection::TypeCmp *arg1 = (dive::selection::TypeCmp *) 0 ;
  Type arg2 ;
  Type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  bool result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "TypeCmp___call__", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_dive__selection__TypeCmp, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TypeCmp___call__" "', argument " "1"" of type '" "dive::selection::TypeCmp const *""'"); 
  }
  arg1 = reinterpret_cast< dive::selection::TypeCmp * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TypeCmp___call__" "', argument " "2"" of type '" "Type""'");
  } 
  arg2 = static_cast< Type >(val2);
  ecode3 = SWIG_AsVal_size_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "TypeCmp___call__" "', argument " "3"" of type '" "Type""'");
  } 
  arg3 = static_cast< Type >(val3);
  result = (bool)((dive::selection::TypeCmp const *)arg1)->operator ()(arg2,arg3);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_TypeCmp(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  dive::selection::TypeCmp *result = 0 ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "new_TypeCmp", 0, 0, 0)) SWIG_fail;
  result = (dive::selection::TypeCmp *)new dive::selection::TypeCmp();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_dive__selection__TypeCmp, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_TypeCmp(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  dive::selection::TypeCmp *arg1 = (dive::selection::TypeCmp *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_dive__selection__TypeCmp, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_TypeCmp" "', argument " "1"" of type '" "dive::selection::TypeCmp *""'"); 
  }
  arg1 = reinterpret_cast< dive::selection::TypeCmp * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *TypeCmp_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_dive__selection__TypeCmp, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *TypeCmp_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_SpecNodesByCoordinate_axis__set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  dive::selection::SpecNodesByCoordinate *arg1 = (dive::selection::SpecNodesByCoordinate *) 0 ;
  Axis arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "SpecNodesByCoordinate_axis__set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_dive__selection__SpecNodesByCoordinate, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SpecNodesByCoordinate_axis__set" "', argument " "1"" of type '" "dive::selection::SpecNodesByCoordinate *""'"); 
  }
  arg1 = reinterpret_cast< dive::selection::SpecNodesByCoordinate * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SpecNodesByCoordinate_axis__set" "', argument " "2"" of type '" "Axis""'");
  } 
  arg2 = static_cast< Axis >(val2);
  if (arg1) (arg1)->axis_ = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SpecNodesByCoordinate_axis__get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  dive::selection::SpecNodesByCoordinate *arg1 = (dive::selection::SpecNodesByCoordinate *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  Axis result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_dive__selection__SpecNodesByCoordinate, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SpecNodesByCoordinate_axis__get" "', argument " "1"" of type '" "dive::selection::SpecNodesByCoordinate *""'"); 
  }
  arg1 = reinterpret_cast< dive::selection::SpecNodesByCoordinate * >(argp1);
  result =  ((arg1)->axis_);
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SpecNodesByCoordinate_pos__set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  dive::selection::SpecNodesByCoordinate *arg1 = (dive::selection::SpecNodesByCoordinate *) 0 ;
  Scalar arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "SpecNodesByCoordinate_pos__set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_dive__selection__SpecNodesByCoordinate, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SpecNodesByCoordinate_pos__set" "', argument " "1"" of type '" "dive::selection::SpecNodesByCoordinate *""'"); 
  }
  arg1 = reinterpret_cast< dive::selection::SpecNodesByCoordinate * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SpecNodesByCoordinate_pos__set" "', argument " "2"" of type '" "Scalar""'");
  } 
  arg2 = static_cast< Scalar >(val2);
  if (arg1) (arg1)->pos_ = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SpecNodesByCoordinate_pos__get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  dive::selection::SpecNodesByCoordinate *arg1 = (dive::selection::SpecNodesByCoordinate *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  Scalar result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_dive__selection__SpecNodesByCoordinate, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SpecNodesByCoordinate_pos__get" "', argument " "1"" of type '" "dive::selection::SpecNodesByCoordinate *""'"); 
  }
  arg1 = reinterpret_cast< dive::selection::SpecNodesByCoordinate * >(argp1);
  result = (Scalar) ((arg1)->pos_);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SpecNodesByCoordinate_tol__set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  dive::selection::SpecNodesByCoordinate *arg1 = (dive::selection::SpecNodesByCoordinate *) 0 ;
  Scalar arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "SpecNodesByCoordinate_tol__set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_dive__selection__SpecNodesByCoordinate, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SpecNodesByCoordinate_tol__set" "', argument " "1"" of type '" "dive::selection::SpecNodesByCoordinate *""'"); 
  }
  arg1 = reinterpret_cast< dive::selection::SpecNodesByCoordinate * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SpecNodesByCoordinate_tol__set" "', argument " "2"" of type '" "Scalar""'");
  } 
  arg2 = static_cast< Scalar >(val2);
  if (arg1) (arg1)->tol_ = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SpecNodesByCoordinate_tol__get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  dive::selection::SpecNodesByCoordinate *arg1 = (dive::selection::SpecNodesByCoordinate *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  Scalar result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_dive__selection__SpecNodesByCoordinate, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SpecNodesByCoordinate_tol__get" "', argument " "1"" of type '" "dive::selection::SpecNodesByCoordinate *""'"); 
  }
  arg1 = reinterpret_cast< dive::selection::SpecNodesByCoordinate * >(argp1);
  result = (Scalar) ((arg1)->tol_);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SpecNodesByCoordinate_basis__set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  dive::selection::SpecNodesByCoordinate *arg1 = (dive::selection::SpecNodesByCoordinate *) 0 ;
  IBasisPtr *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  IBasisPtr tempshared2 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "SpecNodesByCoordinate_basis__set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_dive__selection__SpecNodesByCoordinate, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SpecNodesByCoordinate_basis__set" "', argument " "1"" of type '" "dive::selection::SpecNodesByCoordinate *""'"); 
  }
  arg1 = reinterpret_cast< dive::selection::SpecNodesByCoordinate * >(argp1);
  {
    int newmem = 0;
    res2 = SWIG_ConvertPtrAndOwn(swig_obj[1], &argp2, SWIGTYPE_p_std__shared_ptrT_basis__IBasis_t,  0 , &newmem);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SpecNodesByCoordinate_basis__set" "', argument " "2"" of type '" "IBasisPtr const &""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      if (argp2) tempshared2 = *reinterpret_cast< IBasisPtr * >(argp2);
      delete reinterpret_cast< IBasisPtr * >(argp2);
      arg2 = &tempshared2;
    } else {
      arg2 = (argp2) ? reinterpret_cast< IBasisPtr * >(argp2) : &tempshared2;
    }
  }
  if (arg1) (arg1)->basis_ = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SpecNodesByCoordinate_basis__get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  dive::selection::SpecNodesByCoordinate *arg1 = (dive::selection::SpecNodesByCoordinate *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  IBasisPtr *result = 0 ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_dive__selection__SpecNodesByCoordinate, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SpecNodesByCoordinate_basis__get" "', argument " "1"" of type '" "dive::selection::SpecNodesByCoordinate *""'"); 
  }
  arg1 = reinterpret_cast< dive::selection::SpecNodesByCoordinate * >(argp1);
  result = (IBasisPtr *) & ((arg1)->basis_);
  {
    std::shared_ptr<  basis::IBasis > *smartresult = *result ? new std::shared_ptr<  basis::IBasis >(*result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_std__shared_ptrT_basis__IBasis_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_SpecNodesByCoordinate(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  IBasisPtr arg1 ;
  Axis arg2 ;
  Scalar arg3 ;
  Scalar arg4 ;
  void *argp1 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  PyObject *swig_obj[4] ;
  dive::selection::SpecNodesByCoordinate *result = 0 ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "new_SpecNodesByCoordinate", 4, 4, swig_obj)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_basis__IBasis_t,  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_SpecNodesByCoordinate" "', argument " "1"" of type '" "IBasisPtr""'");
    }
    if (argp1) arg1 = *(reinterpret_cast< IBasisPtr * >(argp1));
    if (newmem & SWIG_CAST_NEW_MEMORY) delete reinterpret_cast< IBasisPtr * >(argp1);
  }
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_SpecNodesByCoordinate" "', argument " "2"" of type '" "Axis""'");
  } 
  arg2 = static_cast< Axis >(val2);
  ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_SpecNodesByCoordinate" "', argument " "3"" of type '" "Scalar""'");
  } 
  arg3 = static_cast< Scalar >(val3);
  ecode4 = SWIG_AsVal_double(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_SpecNodesByCoordinate" "', argument " "4"" of type '" "Scalar""'");
  } 
  arg4 = static_cast< Scalar >(val4);
  result = (dive::selection::SpecNodesByCoordinate *)new dive::selection::SpecNodesByCoordinate(arg1,arg2,arg3,arg4);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_dive__selection__SpecNodesByCoordinate, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SpecNodesByCoordinate_IsSatisfied(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  dive::selection::SpecNodesByCoordinate *arg1 = (dive::selection::SpecNodesByCoordinate *) 0 ;
  INodePtr arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  bool result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "SpecNodesByCoordinate_IsSatisfied", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_dive__selection__SpecNodesByCoordinate, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SpecNodesByCoordinate_IsSatisfied" "', argument " "1"" of type '" "dive::selection::SpecNodesByCoordinate *""'"); 
  }
  arg1 = reinterpret_cast< dive::selection::SpecNodesByCoordinate * >(argp1);
  {
    int newmem = 0;
    res2 = SWIG_ConvertPtrAndOwn(swig_obj[1], &argp2, SWIGTYPE_p_std__shared_ptrT_nodes__INode_t,  0 , &newmem);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SpecNodesByCoordinate_IsSatisfied" "', argument " "2"" of type '" "INodePtr""'");
    }
    if (argp2) arg2 = *(reinterpret_cast< INodePtr * >(argp2));
    if (newmem & SWIG_CAST_NEW_MEMORY) delete reinterpret_cast< INodePtr * >(argp2);
  }
  result = (bool)(arg1)->IsSatisfied(arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_SpecNodesByCoordinate(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  dive::selection::SpecNodesByCoordinate *arg1 = (dive::selection::SpecNodesByCoordinate *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_dive__selection__SpecNodesByCoordinate, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_SpecNodesByCoordinate" "', argument " "1"" of type '" "dive::selection::SpecNodesByCoordinate *""'"); 
  }
  arg1 = reinterpret_cast< dive::selection::SpecNodesByCoordinate * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *SpecNodesByCoordinate_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_dive__selection__SpecNodesByCoordinate, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *SpecNodesByCoordinate_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_SpecNodesByRange_axis__set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  dive::selection::SpecNodesByRange *arg1 = (dive::selection::SpecNodesByRange *) 0 ;
  Axis arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "SpecNodesByRange_axis__set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_dive__selection__SpecNodesByRange, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SpecNodesByRange_axis__set" "', argument " "1"" of type '" "dive::selection::SpecNodesByRange *""'"); 
  }
  arg1 = reinterpret_cast< dive::selection::SpecNodesByRange * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SpecNodesByRange_axis__set" "', argument " "2"" of type '" "Axis""'");
  } 
  arg2 = static_cast< Axis >(val2);
  if (arg1) (arg1)->axis_ = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SpecNodesByRange_axis__get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  dive::selection::SpecNodesByRange *arg1 = (dive::selection::SpecNodesByRange *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  Axis result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_dive__selection__SpecNodesByRange, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SpecNodesByRange_axis__get" "', argument " "1"" of type '" "dive::selection::SpecNodesByRange *""'"); 
  }
  arg1 = reinterpret_cast< dive::selection::SpecNodesByRange * >(argp1);
  result =  ((arg1)->axis_);
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SpecNodesByRange_min__set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  dive::selection::SpecNodesByRange *arg1 = (dive::selection::SpecNodesByRange *) 0 ;
  Scalar arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "SpecNodesByRange_min__set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_dive__selection__SpecNodesByRange, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SpecNodesByRange_min__set" "', argument " "1"" of type '" "dive::selection::SpecNodesByRange *""'"); 
  }
  arg1 = reinterpret_cast< dive::selection::SpecNodesByRange * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SpecNodesByRange_min__set" "', argument " "2"" of type '" "Scalar""'");
  } 
  arg2 = static_cast< Scalar >(val2);
  if (arg1) (arg1)->min_ = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SpecNodesByRange_min__get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  dive::selection::SpecNodesByRange *arg1 = (dive::selection::SpecNodesByRange *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  Scalar result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_dive__selection__SpecNodesByRange, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SpecNodesByRange_min__get" "', argument " "1"" of type '" "dive::selection::SpecNodesByRange *""'"); 
  }
  arg1 = reinterpret_cast< dive::selection::SpecNodesByRange * >(argp1);
  result = (Scalar) ((arg1)->min_);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SpecNodesByRange_max__set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  dive::selection::SpecNodesByRange *arg1 = (dive::selection::SpecNodesByRange *) 0 ;
  Scalar arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "SpecNodesByRange_max__set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_dive__selection__SpecNodesByRange, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SpecNodesByRange_max__set" "', argument " "1"" of type '" "dive::selection::SpecNodesByRange *""'"); 
  }
  arg1 = reinterpret_cast< dive::selection::SpecNodesByRange * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SpecNodesByRange_max__set" "', argument " "2"" of type '" "Scalar""'");
  } 
  arg2 = static_cast< Scalar >(val2);
  if (arg1) (arg1)->max_ = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SpecNodesByRange_max__get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  dive::selection::SpecNodesByRange *arg1 = (dive::selection::SpecNodesByRange *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  Scalar result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_dive__selection__SpecNodesByRange, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SpecNodesByRange_max__get" "', argument " "1"" of type '" "dive::selection::SpecNodesByRange *""'"); 
  }
  arg1 = reinterpret_cast< dive::selection::SpecNodesByRange * >(argp1);
  result = (Scalar) ((arg1)->max_);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SpecNodesByRange_tol__set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  dive::selection::SpecNodesByRange *arg1 = (dive::selection::SpecNodesByRange *) 0 ;
  Scalar arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "SpecNodesByRange_tol__set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_dive__selection__SpecNodesByRange, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SpecNodesByRange_tol__set" "', argument " "1"" of type '" "dive::selection::SpecNodesByRange *""'"); 
  }
  arg1 = reinterpret_cast< dive::selection::SpecNodesByRange * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SpecNodesByRange_tol__set" "', argument " "2"" of type '" "Scalar""'");
  } 
  arg2 = static_cast< Scalar >(val2);
  if (arg1) (arg1)->tol_ = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SpecNodesByRange_tol__get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  dive::selection::SpecNodesByRange *arg1 = (dive::selection::SpecNodesByRange *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  Scalar result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_dive__selection__SpecNodesByRange, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SpecNodesByRange_tol__get" "', argument " "1"" of type '" "dive::selection::SpecNodesByRange *""'"); 
  }
  arg1 = reinterpret_cast< dive::selection::SpecNodesByRange * >(argp1);
  result = (Scalar) ((arg1)->tol_);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SpecNodesByRange_basis__set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  dive::selection::SpecNodesByRange *arg1 = (dive::selection::SpecNodesByRange *) 0 ;
  IBasisPtr *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  IBasisPtr tempshared2 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "SpecNodesByRange_basis__set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_dive__selection__SpecNodesByRange, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SpecNodesByRange_basis__set" "', argument " "1"" of type '" "dive::selection::SpecNodesByRange *""'"); 
  }
  arg1 = reinterpret_cast< dive::selection::SpecNodesByRange * >(argp1);
  {
    int newmem = 0;
    res2 = SWIG_ConvertPtrAndOwn(swig_obj[1], &argp2, SWIGTYPE_p_std__shared_ptrT_basis__IBasis_t,  0 , &newmem);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SpecNodesByRange_basis__set" "', argument " "2"" of type '" "IBasisPtr const &""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      if (argp2) tempshared2 = *reinterpret_cast< IBasisPtr * >(argp2);
      delete reinterpret_cast< IBasisPtr * >(argp2);
      arg2 = &tempshared2;
    } else {
      arg2 = (argp2) ? reinterpret_cast< IBasisPtr * >(argp2) : &tempshared2;
    }
  }
  if (arg1) (arg1)->basis_ = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SpecNodesByRange_basis__get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  dive::selection::SpecNodesByRange *arg1 = (dive::selection::SpecNodesByRange *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  IBasisPtr *result = 0 ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_dive__selection__SpecNodesByRange, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SpecNodesByRange_basis__get" "', argument " "1"" of type '" "dive::selection::SpecNodesByRange *""'"); 
  }
  arg1 = reinterpret_cast< dive::selection::SpecNodesByRange * >(argp1);
  result = (IBasisPtr *) & ((arg1)->basis_);
  {
    std::shared_ptr<  basis::IBasis > *smartresult = *result ? new std::shared_ptr<  basis::IBasis >(*result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_std__shared_ptrT_basis__IBasis_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_SpecNodesByRange(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  IBasisPtr arg1 ;
  Axis arg2 ;
  Scalar arg3 ;
  Scalar arg4 ;
  Scalar arg5 ;
  void *argp1 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  double val5 ;
  int ecode5 = 0 ;
  PyObject *swig_obj[5] ;
  dive::selection::SpecNodesByRange *result = 0 ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "new_SpecNodesByRange", 5, 5, swig_obj)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_basis__IBasis_t,  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_SpecNodesByRange" "', argument " "1"" of type '" "IBasisPtr""'");
    }
    if (argp1) arg1 = *(reinterpret_cast< IBasisPtr * >(argp1));
    if (newmem & SWIG_CAST_NEW_MEMORY) delete reinterpret_cast< IBasisPtr * >(argp1);
  }
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_SpecNodesByRange" "', argument " "2"" of type '" "Axis""'");
  } 
  arg2 = static_cast< Axis >(val2);
  ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_SpecNodesByRange" "', argument " "3"" of type '" "Scalar""'");
  } 
  arg3 = static_cast< Scalar >(val3);
  ecode4 = SWIG_AsVal_double(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_SpecNodesByRange" "', argument " "4"" of type '" "Scalar""'");
  } 
  arg4 = static_cast< Scalar >(val4);
  ecode5 = SWIG_AsVal_double(swig_obj[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "new_SpecNodesByRange" "', argument " "5"" of type '" "Scalar""'");
  } 
  arg5 = static_cast< Scalar >(val5);
  result = (dive::selection::SpecNodesByRange *)new dive::selection::SpecNodesByRange(arg1,arg2,arg3,arg4,arg5);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_dive__selection__SpecNodesByRange, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SpecNodesByRange_IsSatisfied(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  dive::selection::SpecNodesByRange *arg1 = (dive::selection::SpecNodesByRange *) 0 ;
  INodePtr arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  bool result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "SpecNodesByRange_IsSatisfied", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_dive__selection__SpecNodesByRange, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SpecNodesByRange_IsSatisfied" "', argument " "1"" of type '" "dive::selection::SpecNodesByRange *""'"); 
  }
  arg1 = reinterpret_cast< dive::selection::SpecNodesByRange * >(argp1);
  {
    int newmem = 0;
    res2 = SWIG_ConvertPtrAndOwn(swig_obj[1], &argp2, SWIGTYPE_p_std__shared_ptrT_nodes__INode_t,  0 , &newmem);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SpecNodesByRange_IsSatisfied" "', argument " "2"" of type '" "INodePtr""'");
    }
    if (argp2) arg2 = *(reinterpret_cast< INodePtr * >(argp2));
    if (newmem & SWIG_CAST_NEW_MEMORY) delete reinterpret_cast< INodePtr * >(argp2);
  }
  result = (bool)(arg1)->IsSatisfied(arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_SpecNodesByRange(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  dive::selection::SpecNodesByRange *arg1 = (dive::selection::SpecNodesByRange *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_dive__selection__SpecNodesByRange, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_SpecNodesByRange" "', argument " "1"" of type '" "dive::selection::SpecNodesByRange *""'"); 
  }
  arg1 = reinterpret_cast< dive::selection::SpecNodesByRange * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *SpecNodesByRange_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_dive__selection__SpecNodesByRange, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *SpecNodesByRange_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_SpecNodesByTag_min__set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  dive::selection::SpecNodesByTag *arg1 = (dive::selection::SpecNodesByTag *) 0 ;
  Tag arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "SpecNodesByTag_min__set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_dive__selection__SpecNodesByTag, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SpecNodesByTag_min__set" "', argument " "1"" of type '" "dive::selection::SpecNodesByTag *""'"); 
  }
  arg1 = reinterpret_cast< dive::selection::SpecNodesByTag * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SpecNodesByTag_min__set" "', argument " "2"" of type '" "Tag""'");
  } 
  arg2 = static_cast< Tag >(val2);
  if (arg1) (arg1)->min_ = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SpecNodesByTag_min__get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  dive::selection::SpecNodesByTag *arg1 = (dive::selection::SpecNodesByTag *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  Tag result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_dive__selection__SpecNodesByTag, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SpecNodesByTag_min__get" "', argument " "1"" of type '" "dive::selection::SpecNodesByTag *""'"); 
  }
  arg1 = reinterpret_cast< dive::selection::SpecNodesByTag * >(argp1);
  result =  ((arg1)->min_);
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SpecNodesByTag_max__set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  dive::selection::SpecNodesByTag *arg1 = (dive::selection::SpecNodesByTag *) 0 ;
  Tag arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "SpecNodesByTag_max__set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_dive__selection__SpecNodesByTag, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SpecNodesByTag_max__set" "', argument " "1"" of type '" "dive::selection::SpecNodesByTag *""'"); 
  }
  arg1 = reinterpret_cast< dive::selection::SpecNodesByTag * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SpecNodesByTag_max__set" "', argument " "2"" of type '" "Tag""'");
  } 
  arg2 = static_cast< Tag >(val2);
  if (arg1) (arg1)->max_ = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SpecNodesByTag_max__get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  dive::selection::SpecNodesByTag *arg1 = (dive::selection::SpecNodesByTag *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  Tag result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_dive__selection__SpecNodesByTag, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SpecNodesByTag_max__get" "', argument " "1"" of type '" "dive::selection::SpecNodesByTag *""'"); 
  }
  arg1 = reinterpret_cast< dive::selection::SpecNodesByTag * >(argp1);
  result =  ((arg1)->max_);
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_SpecNodesByTag(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Tag arg1 ;
  Tag arg2 ;
  size_t val1 ;
  int ecode1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  dive::selection::SpecNodesByTag *result = 0 ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "new_SpecNodesByTag", 2, 2, swig_obj)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_SpecNodesByTag" "', argument " "1"" of type '" "Tag""'");
  } 
  arg1 = static_cast< Tag >(val1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_SpecNodesByTag" "', argument " "2"" of type '" "Tag""'");
  } 
  arg2 = static_cast< Tag >(val2);
  result = (dive::selection::SpecNodesByTag *)new dive::selection::SpecNodesByTag(arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_dive__selection__SpecNodesByTag, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SpecNodesByTag_IsSatisfied(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  dive::selection::SpecNodesByTag *arg1 = (dive::selection::SpecNodesByTag *) 0 ;
  INodePtr arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  bool result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "SpecNodesByTag_IsSatisfied", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_dive__selection__SpecNodesByTag, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SpecNodesByTag_IsSatisfied" "', argument " "1"" of type '" "dive::selection::SpecNodesByTag *""'"); 
  }
  arg1 = reinterpret_cast< dive::selection::SpecNodesByTag * >(argp1);
  {
    int newmem = 0;
    res2 = SWIG_ConvertPtrAndOwn(swig_obj[1], &argp2, SWIGTYPE_p_std__shared_ptrT_nodes__INode_t,  0 , &newmem);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SpecNodesByTag_IsSatisfied" "', argument " "2"" of type '" "INodePtr""'");
    }
    if (argp2) arg2 = *(reinterpret_cast< INodePtr * >(argp2));
    if (newmem & SWIG_CAST_NEW_MEMORY) delete reinterpret_cast< INodePtr * >(argp2);
  }
  result = (bool)(arg1)->IsSatisfied(arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_SpecNodesByTag(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  dive::selection::SpecNodesByTag *arg1 = (dive::selection::SpecNodesByTag *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_dive__selection__SpecNodesByTag, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_SpecNodesByTag" "', argument " "1"" of type '" "dive::selection::SpecNodesByTag *""'"); 
  }
  arg1 = reinterpret_cast< dive::selection::SpecNodesByTag * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *SpecNodesByTag_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_dive__selection__SpecNodesByTag, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *SpecNodesByTag_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_SpecElementsByTag_min__set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  dive::selection::SpecElementsByTag *arg1 = (dive::selection::SpecElementsByTag *) 0 ;
  Tag arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "SpecElementsByTag_min__set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_dive__selection__SpecElementsByTag, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SpecElementsByTag_min__set" "', argument " "1"" of type '" "dive::selection::SpecElementsByTag *""'"); 
  }
  arg1 = reinterpret_cast< dive::selection::SpecElementsByTag * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SpecElementsByTag_min__set" "', argument " "2"" of type '" "Tag""'");
  } 
  arg2 = static_cast< Tag >(val2);
  if (arg1) (arg1)->min_ = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SpecElementsByTag_min__get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  dive::selection::SpecElementsByTag *arg1 = (dive::selection::SpecElementsByTag *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  Tag result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_dive__selection__SpecElementsByTag, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SpecElementsByTag_min__get" "', argument " "1"" of type '" "dive::selection::SpecElementsByTag *""'"); 
  }
  arg1 = reinterpret_cast< dive::selection::SpecElementsByTag * >(argp1);
  result =  ((arg1)->min_);
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SpecElementsByTag_max__set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  dive::selection::SpecElementsByTag *arg1 = (dive::selection::SpecElementsByTag *) 0 ;
  Tag arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "SpecElementsByTag_max__set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_dive__selection__SpecElementsByTag, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SpecElementsByTag_max__set" "', argument " "1"" of type '" "dive::selection::SpecElementsByTag *""'"); 
  }
  arg1 = reinterpret_cast< dive::selection::SpecElementsByTag * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SpecElementsByTag_max__set" "', argument " "2"" of type '" "Tag""'");
  } 
  arg2 = static_cast< Tag >(val2);
  if (arg1) (arg1)->max_ = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SpecElementsByTag_max__get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  dive::selection::SpecElementsByTag *arg1 = (dive::selection::SpecElementsByTag *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  Tag result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_dive__selection__SpecElementsByTag, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SpecElementsByTag_max__get" "', argument " "1"" of type '" "dive::selection::SpecElementsByTag *""'"); 
  }
  arg1 = reinterpret_cast< dive::selection::SpecElementsByTag * >(argp1);
  result =  ((arg1)->max_);
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_SpecElementsByTag(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Tag arg1 ;
  Tag arg2 ;
  size_t val1 ;
  int ecode1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  dive::selection::SpecElementsByTag *result = 0 ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "new_SpecElementsByTag", 2, 2, swig_obj)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_SpecElementsByTag" "', argument " "1"" of type '" "Tag""'");
  } 
  arg1 = static_cast< Tag >(val1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_SpecElementsByTag" "', argument " "2"" of type '" "Tag""'");
  } 
  arg2 = static_cast< Tag >(val2);
  result = (dive::selection::SpecElementsByTag *)new dive::selection::SpecElementsByTag(arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_dive__selection__SpecElementsByTag, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SpecElementsByTag_IsSatisfied(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  dive::selection::SpecElementsByTag *arg1 = (dive::selection::SpecElementsByTag *) 0 ;
  IElementPtr arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  bool result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "SpecElementsByTag_IsSatisfied", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_dive__selection__SpecElementsByTag, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SpecElementsByTag_IsSatisfied" "', argument " "1"" of type '" "dive::selection::SpecElementsByTag *""'"); 
  }
  arg1 = reinterpret_cast< dive::selection::SpecElementsByTag * >(argp1);
  {
    int newmem = 0;
    res2 = SWIG_ConvertPtrAndOwn(swig_obj[1], &argp2, SWIGTYPE_p_std__shared_ptrT_dive__elements__IElement_t,  0 , &newmem);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SpecElementsByTag_IsSatisfied" "', argument " "2"" of type '" "IElementPtr""'");
    }
    if (argp2) arg2 = *(reinterpret_cast< IElementPtr * >(argp2));
    if (newmem & SWIG_CAST_NEW_MEMORY) delete reinterpret_cast< IElementPtr * >(argp2);
  }
  result = (bool)(arg1)->IsSatisfied(arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_SpecElementsByTag(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  dive::selection::SpecElementsByTag *arg1 = (dive::selection::SpecElementsByTag *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_dive__selection__SpecElementsByTag, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_SpecElementsByTag" "', argument " "1"" of type '" "dive::selection::SpecElementsByTag *""'"); 
  }
  arg1 = reinterpret_cast< dive::selection::SpecElementsByTag * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *SpecElementsByTag_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_dive__selection__SpecElementsByTag, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *SpecElementsByTag_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_SpecElementsByType_selectionTypes__set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  dive::selection::SpecElementsByType *arg1 = (dive::selection::SpecElementsByType *) 0 ;
  dive::selection::SelectionTypes *arg2 = (dive::selection::SelectionTypes *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "SpecElementsByType_selectionTypes__set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_dive__selection__SpecElementsByType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SpecElementsByType_selectionTypes__set" "', argument " "1"" of type '" "dive::selection::SpecElementsByType *""'"); 
  }
  arg1 = reinterpret_cast< dive::selection::SpecElementsByType * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_std__setT_std__size_t_dive__selection__TypeCmp_std__allocatorT_std__size_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SpecElementsByType_selectionTypes__set" "', argument " "2"" of type '" "dive::selection::SelectionTypes *""'"); 
  }
  arg2 = reinterpret_cast< dive::selection::SelectionTypes * >(argp2);
  if (arg1) (arg1)->selectionTypes_ = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SpecElementsByType_selectionTypes__get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  dive::selection::SpecElementsByType *arg1 = (dive::selection::SpecElementsByType *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  dive::selection::SelectionTypes *result = 0 ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_dive__selection__SpecElementsByType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SpecElementsByType_selectionTypes__get" "', argument " "1"" of type '" "dive::selection::SpecElementsByType *""'"); 
  }
  arg1 = reinterpret_cast< dive::selection::SpecElementsByType * >(argp1);
  result = (dive::selection::SelectionTypes *)& ((arg1)->selectionTypes_);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__setT_std__size_t_dive__selection__TypeCmp_std__allocatorT_std__size_t_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_SpecElementsByType(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  dive::selection::SpecElementsByType *result = 0 ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "new_SpecElementsByType", 0, 0, 0)) SWIG_fail;
  result = (dive::selection::SpecElementsByType *)new dive::selection::SpecElementsByType();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_dive__selection__SpecElementsByType, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SpecElementsByType_IsSatisfied(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  dive::selection::SpecElementsByType *arg1 = (dive::selection::SpecElementsByType *) 0 ;
  IElementPtr arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  bool result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "SpecElementsByType_IsSatisfied", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_dive__selection__SpecElementsByType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SpecElementsByType_IsSatisfied" "', argument " "1"" of type '" "dive::selection::SpecElementsByType *""'"); 
  }
  arg1 = reinterpret_cast< dive::selection::SpecElementsByType * >(argp1);
  {
    int newmem = 0;
    res2 = SWIG_ConvertPtrAndOwn(swig_obj[1], &argp2, SWIGTYPE_p_std__shared_ptrT_dive__elements__IElement_t,  0 , &newmem);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SpecElementsByType_IsSatisfied" "', argument " "2"" of type '" "IElementPtr""'");
    }
    if (argp2) arg2 = *(reinterpret_cast< IElementPtr * >(argp2));
    if (newmem & SWIG_CAST_NEW_MEMORY) delete reinterpret_cast< IElementPtr * >(argp2);
  }
  result = (bool)(arg1)->IsSatisfied(arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_SpecElementsByType(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  dive::selection::SpecElementsByType *arg1 = (dive::selection::SpecElementsByType *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_dive__selection__SpecElementsByType, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_SpecElementsByType" "', argument " "1"" of type '" "dive::selection::SpecElementsByType *""'"); 
  }
  arg1 = reinterpret_cast< dive::selection::SpecElementsByType * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *SpecElementsByType_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_dive__selection__SpecElementsByType, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *SpecElementsByType_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_FilterNodes(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  dive::selection::Specification< INodePtr > *arg1 = 0 ;
  Nodes *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject *swig_obj[2] ;
  Nodes result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "FilterNodes", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_dive__selection__SpecificationT_std__shared_ptrT_nodes__INode_t_t,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FilterNodes" "', argument " "1"" of type '" "dive::selection::Specification< INodePtr > &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "FilterNodes" "', argument " "1"" of type '" "dive::selection::Specification< INodePtr > &""'"); 
  }
  arg1 = reinterpret_cast< dive::selection::Specification< INodePtr > * >(argp1);
  {
    std::vector< std::shared_ptr< nodes::INode >,std::allocator< std::shared_ptr< nodes::INode > > > *ptr = (std::vector< std::shared_ptr< nodes::INode >,std::allocator< std::shared_ptr< nodes::INode > > > *)0;
    res2 = swig::asptr(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "FilterNodes" "', argument " "2"" of type '" "Nodes const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "FilterNodes" "', argument " "2"" of type '" "Nodes const &""'"); 
    }
    arg2 = ptr;
  }
  result = dive::selection::FilterNodes(*arg1,(std::vector< std::shared_ptr< nodes::INode >,std::allocator< std::shared_ptr< nodes::INode > > > const &)*arg2);
  resultobj = swig::from(static_cast< std::vector< std::shared_ptr< nodes::INode >,std::allocator< std::shared_ptr< nodes::INode > > > >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_FilterNodesRemoveDuplicates(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Nodes *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  PyObject *swig_obj[1] ;
  Nodes result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    std::vector< std::shared_ptr< nodes::INode >,std::allocator< std::shared_ptr< nodes::INode > > > *ptr = (std::vector< std::shared_ptr< nodes::INode >,std::allocator< std::shared_ptr< nodes::INode > > > *)0;
    res1 = swig::asptr(swig_obj[0], &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FilterNodesRemoveDuplicates" "', argument " "1"" of type '" "Nodes const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "FilterNodesRemoveDuplicates" "', argument " "1"" of type '" "Nodes const &""'"); 
    }
    arg1 = ptr;
  }
  result = dive::selection::FilterNodesRemoveDuplicates((std::vector< std::shared_ptr< nodes::INode >,std::allocator< std::shared_ptr< nodes::INode > > > const &)*arg1);
  resultobj = swig::from(static_cast< std::vector< std::shared_ptr< nodes::INode >,std::allocator< std::shared_ptr< nodes::INode > > > >(result));
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_FilterNodesByCoordinate(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Nodes *arg1 = 0 ;
  IBasisPtr arg2 ;
  Axis arg3 ;
  Scalar arg4 ;
  Scalar arg5 ;
  int res1 = SWIG_OLDOBJ ;
  void *argp2 ;
  int res2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  double val5 ;
  int ecode5 = 0 ;
  PyObject *swig_obj[5] ;
  Nodes result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "FilterNodesByCoordinate", 5, 5, swig_obj)) SWIG_fail;
  {
    std::vector< std::shared_ptr< nodes::INode >,std::allocator< std::shared_ptr< nodes::INode > > > *ptr = (std::vector< std::shared_ptr< nodes::INode >,std::allocator< std::shared_ptr< nodes::INode > > > *)0;
    res1 = swig::asptr(swig_obj[0], &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FilterNodesByCoordinate" "', argument " "1"" of type '" "Nodes const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "FilterNodesByCoordinate" "', argument " "1"" of type '" "Nodes const &""'"); 
    }
    arg1 = ptr;
  }
  {
    int newmem = 0;
    res2 = SWIG_ConvertPtrAndOwn(swig_obj[1], &argp2, SWIGTYPE_p_std__shared_ptrT_basis__IBasis_t,  0 , &newmem);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "FilterNodesByCoordinate" "', argument " "2"" of type '" "IBasisPtr""'");
    }
    if (argp2) arg2 = *(reinterpret_cast< IBasisPtr * >(argp2));
    if (newmem & SWIG_CAST_NEW_MEMORY) delete reinterpret_cast< IBasisPtr * >(argp2);
  }
  ecode3 = SWIG_AsVal_size_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "FilterNodesByCoordinate" "', argument " "3"" of type '" "Axis""'");
  } 
  arg3 = static_cast< Axis >(val3);
  ecode4 = SWIG_AsVal_double(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "FilterNodesByCoordinate" "', argument " "4"" of type '" "Scalar""'");
  } 
  arg4 = static_cast< Scalar >(val4);
  ecode5 = SWIG_AsVal_double(swig_obj[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "FilterNodesByCoordinate" "', argument " "5"" of type '" "Scalar""'");
  } 
  arg5 = static_cast< Scalar >(val5);
  result = dive::selection::FilterNodesByCoordinate((std::vector< std::shared_ptr< nodes::INode >,std::allocator< std::shared_ptr< nodes::INode > > > const &)*arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3),arg4,arg5);
  resultobj = swig::from(static_cast< std::vector< std::shared_ptr< nodes::INode >,std::allocator< std::shared_ptr< nodes::INode > > > >(result));
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_FilterNodesByRange(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Nodes *arg1 = 0 ;
  IBasisPtr arg2 ;
  Axis arg3 ;
  Scalar arg4 ;
  Scalar arg5 ;
  Scalar arg6 ;
  int res1 = SWIG_OLDOBJ ;
  void *argp2 ;
  int res2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  double val5 ;
  int ecode5 = 0 ;
  double val6 ;
  int ecode6 = 0 ;
  PyObject *swig_obj[6] ;
  Nodes result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "FilterNodesByRange", 6, 6, swig_obj)) SWIG_fail;
  {
    std::vector< std::shared_ptr< nodes::INode >,std::allocator< std::shared_ptr< nodes::INode > > > *ptr = (std::vector< std::shared_ptr< nodes::INode >,std::allocator< std::shared_ptr< nodes::INode > > > *)0;
    res1 = swig::asptr(swig_obj[0], &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FilterNodesByRange" "', argument " "1"" of type '" "Nodes const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "FilterNodesByRange" "', argument " "1"" of type '" "Nodes const &""'"); 
    }
    arg1 = ptr;
  }
  {
    int newmem = 0;
    res2 = SWIG_ConvertPtrAndOwn(swig_obj[1], &argp2, SWIGTYPE_p_std__shared_ptrT_basis__IBasis_t,  0 , &newmem);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "FilterNodesByRange" "', argument " "2"" of type '" "IBasisPtr""'");
    }
    if (argp2) arg2 = *(reinterpret_cast< IBasisPtr * >(argp2));
    if (newmem & SWIG_CAST_NEW_MEMORY) delete reinterpret_cast< IBasisPtr * >(argp2);
  }
  ecode3 = SWIG_AsVal_size_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "FilterNodesByRange" "', argument " "3"" of type '" "Axis""'");
  } 
  arg3 = static_cast< Axis >(val3);
  ecode4 = SWIG_AsVal_double(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "FilterNodesByRange" "', argument " "4"" of type '" "Scalar""'");
  } 
  arg4 = static_cast< Scalar >(val4);
  ecode5 = SWIG_AsVal_double(swig_obj[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "FilterNodesByRange" "', argument " "5"" of type '" "Scalar""'");
  } 
  arg5 = static_cast< Scalar >(val5);
  ecode6 = SWIG_AsVal_double(swig_obj[5], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "FilterNodesByRange" "', argument " "6"" of type '" "Scalar""'");
  } 
  arg6 = static_cast< Scalar >(val6);
  result = dive::selection::FilterNodesByRange((std::vector< std::shared_ptr< nodes::INode >,std::allocator< std::shared_ptr< nodes::INode > > > const &)*arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3),arg4,arg5,arg6);
  resultobj = swig::from(static_cast< std::vector< std::shared_ptr< nodes::INode >,std::allocator< std::shared_ptr< nodes::INode > > > >(result));
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_FilterNodesByTag(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Nodes *arg1 = 0 ;
  Tag arg2 ;
  Tag arg3 ;
  int res1 = SWIG_OLDOBJ ;
  size_t val2 ;
  int ecode2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  Nodes result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "FilterNodesByTag", 3, 3, swig_obj)) SWIG_fail;
  {
    std::vector< std::shared_ptr< nodes::INode >,std::allocator< std::shared_ptr< nodes::INode > > > *ptr = (std::vector< std::shared_ptr< nodes::INode >,std::allocator< std::shared_ptr< nodes::INode > > > *)0;
    res1 = swig::asptr(swig_obj[0], &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FilterNodesByTag" "', argument " "1"" of type '" "Nodes const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "FilterNodesByTag" "', argument " "1"" of type '" "Nodes const &""'"); 
    }
    arg1 = ptr;
  }
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "FilterNodesByTag" "', argument " "2"" of type '" "Tag""'");
  } 
  arg2 = static_cast< Tag >(val2);
  ecode3 = SWIG_AsVal_size_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "FilterNodesByTag" "', argument " "3"" of type '" "Tag""'");
  } 
  arg3 = static_cast< Tag >(val3);
  result = dive::selection::FilterNodesByTag((std::vector< std::shared_ptr< nodes::INode >,std::allocator< std::shared_ptr< nodes::INode > > > const &)*arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3));
  resultobj = swig::from(static_cast< std::vector< std::shared_ptr< nodes::INode >,std::allocator< std::shared_ptr< nodes::INode > > > >(result));
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_FilterNodesByElements(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Elements *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  PyObject *swig_obj[1] ;
  Nodes result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    std::vector< std::shared_ptr< dive::elements::IElement >,std::allocator< std::shared_ptr< dive::elements::IElement > > > *ptr = (std::vector< std::shared_ptr< dive::elements::IElement >,std::allocator< std::shared_ptr< dive::elements::IElement > > > *)0;
    res1 = swig::asptr(swig_obj[0], &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FilterNodesByElements" "', argument " "1"" of type '" "Elements const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "FilterNodesByElements" "', argument " "1"" of type '" "Elements const &""'"); 
    }
    arg1 = ptr;
  }
  result = dive::selection::FilterNodesByElements((std::vector< std::shared_ptr< dive::elements::IElement >,std::allocator< std::shared_ptr< dive::elements::IElement > > > const &)*arg1);
  resultobj = swig::from(static_cast< std::vector< std::shared_ptr< nodes::INode >,std::allocator< std::shared_ptr< nodes::INode > > > >(result));
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_FilterElements(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  dive::selection::Specification< IElementPtr > *arg1 = 0 ;
  Elements *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject *swig_obj[2] ;
  Elements result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "FilterElements", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_dive__selection__SpecificationT_std__shared_ptrT_dive__elements__IElement_t_t,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FilterElements" "', argument " "1"" of type '" "dive::selection::Specification< IElementPtr > &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "FilterElements" "', argument " "1"" of type '" "dive::selection::Specification< IElementPtr > &""'"); 
  }
  arg1 = reinterpret_cast< dive::selection::Specification< IElementPtr > * >(argp1);
  {
    std::vector< std::shared_ptr< dive::elements::IElement >,std::allocator< std::shared_ptr< dive::elements::IElement > > > *ptr = (std::vector< std::shared_ptr< dive::elements::IElement >,std::allocator< std::shared_ptr< dive::elements::IElement > > > *)0;
    res2 = swig::asptr(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "FilterElements" "', argument " "2"" of type '" "Elements const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "FilterElements" "', argument " "2"" of type '" "Elements const &""'"); 
    }
    arg2 = ptr;
  }
  result = dive::selection::FilterElements(*arg1,(std::vector< std::shared_ptr< dive::elements::IElement >,std::allocator< std::shared_ptr< dive::elements::IElement > > > const &)*arg2);
  resultobj = swig::from(static_cast< std::vector< std::shared_ptr< dive::elements::IElement >,std::allocator< std::shared_ptr< dive::elements::IElement > > > >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_FilterElementsRemoveDuplicates(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Elements *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  PyObject *swig_obj[1] ;
  Elements result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    std::vector< std::shared_ptr< dive::elements::IElement >,std::allocator< std::shared_ptr< dive::elements::IElement > > > *ptr = (std::vector< std::shared_ptr< dive::elements::IElement >,std::allocator< std::shared_ptr< dive::elements::IElement > > > *)0;
    res1 = swig::asptr(swig_obj[0], &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FilterElementsRemoveDuplicates" "', argument " "1"" of type '" "Elements const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "FilterElementsRemoveDuplicates" "', argument " "1"" of type '" "Elements const &""'"); 
    }
    arg1 = ptr;
  }
  result = dive::selection::FilterElementsRemoveDuplicates((std::vector< std::shared_ptr< dive::elements::IElement >,std::allocator< std::shared_ptr< dive::elements::IElement > > > const &)*arg1);
  resultobj = swig::from(static_cast< std::vector< std::shared_ptr< dive::elements::IElement >,std::allocator< std::shared_ptr< dive::elements::IElement > > > >(result));
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_FilterElementsByTag(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Elements *arg1 = 0 ;
  Tag arg2 ;
  Tag arg3 ;
  int res1 = SWIG_OLDOBJ ;
  size_t val2 ;
  int ecode2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  Elements result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "FilterElementsByTag", 3, 3, swig_obj)) SWIG_fail;
  {
    std::vector< std::shared_ptr< dive::elements::IElement >,std::allocator< std::shared_ptr< dive::elements::IElement > > > *ptr = (std::vector< std::shared_ptr< dive::elements::IElement >,std::allocator< std::shared_ptr< dive::elements::IElement > > > *)0;
    res1 = swig::asptr(swig_obj[0], &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FilterElementsByTag" "', argument " "1"" of type '" "Elements const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "FilterElementsByTag" "', argument " "1"" of type '" "Elements const &""'"); 
    }
    arg1 = ptr;
  }
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "FilterElementsByTag" "', argument " "2"" of type '" "Tag""'");
  } 
  arg2 = static_cast< Tag >(val2);
  ecode3 = SWIG_AsVal_size_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "FilterElementsByTag" "', argument " "3"" of type '" "Tag""'");
  } 
  arg3 = static_cast< Tag >(val3);
  result = dive::selection::FilterElementsByTag((std::vector< std::shared_ptr< dive::elements::IElement >,std::allocator< std::shared_ptr< dive::elements::IElement > > > const &)*arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3));
  resultobj = swig::from(static_cast< std::vector< std::shared_ptr< dive::elements::IElement >,std::allocator< std::shared_ptr< dive::elements::IElement > > > >(result));
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_FilterElementsByType(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Elements *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  PyObject *swig_obj[1] ;
  Elements result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    std::vector< std::shared_ptr< dive::elements::IElement >,std::allocator< std::shared_ptr< dive::elements::IElement > > > *ptr = (std::vector< std::shared_ptr< dive::elements::IElement >,std::allocator< std::shared_ptr< dive::elements::IElement > > > *)0;
    res1 = swig::asptr(swig_obj[0], &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FilterElementsByType" "', argument " "1"" of type '" "Elements const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "FilterElementsByType" "', argument " "1"" of type '" "Elements const &""'"); 
    }
    arg1 = ptr;
  }
  result = dive::selection::FilterElementsByType((std::vector< std::shared_ptr< dive::elements::IElement >,std::allocator< std::shared_ptr< dive::elements::IElement > > > const &)*arg1);
  resultobj = swig::from(static_cast< std::vector< std::shared_ptr< dive::elements::IElement >,std::allocator< std::shared_ptr< dive::elements::IElement > > > >(result));
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_FilterElementsByNodes(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Nodes *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  PyObject *swig_obj[1] ;
  Elements result;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    std::vector< std::shared_ptr< nodes::INode >,std::allocator< std::shared_ptr< nodes::INode > > > *ptr = (std::vector< std::shared_ptr< nodes::INode >,std::allocator< std::shared_ptr< nodes::INode > > > *)0;
    res1 = swig::asptr(swig_obj[0], &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FilterElementsByNodes" "', argument " "1"" of type '" "Nodes const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "FilterElementsByNodes" "', argument " "1"" of type '" "Nodes const &""'"); 
    }
    arg1 = ptr;
  }
  result = dive::selection::FilterElementsByNodes((std::vector< std::shared_ptr< nodes::INode >,std::allocator< std::shared_ptr< nodes::INode > > > const &)*arg1);
  resultobj = swig::from(static_cast< std::vector< std::shared_ptr< dive::elements::IElement >,std::allocator< std::shared_ptr< dive::elements::IElement > > > >(result));
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


static PyMethodDef SwigMethods[] = {
	 { "delete_SwigPyIterator", _wrap_delete_SwigPyIterator, METH_O, NULL},
	 { "SwigPyIterator_value", _wrap_SwigPyIterator_value, METH_O, NULL},
	 { "SwigPyIterator_incr", _wrap_SwigPyIterator_incr, METH_VARARGS, NULL},
	 { "SwigPyIterator_decr", _wrap_SwigPyIterator_decr, METH_VARARGS, NULL},
	 { "SwigPyIterator_distance", _wrap_SwigPyIterator_distance, METH_VARARGS, NULL},
	 { "SwigPyIterator_equal", _wrap_SwigPyIterator_equal, METH_VARARGS, NULL},
	 { "SwigPyIterator_copy", _wrap_SwigPyIterator_copy, METH_O, NULL},
	 { "SwigPyIterator_next", _wrap_SwigPyIterator_next, METH_O, NULL},
	 { "SwigPyIterator___next__", _wrap_SwigPyIterator___next__, METH_O, NULL},
	 { "SwigPyIterator_previous", _wrap_SwigPyIterator_previous, METH_O, NULL},
	 { "SwigPyIterator_advance", _wrap_SwigPyIterator_advance, METH_VARARGS, NULL},
	 { "SwigPyIterator___eq__", _wrap_SwigPyIterator___eq__, METH_VARARGS, NULL},
	 { "SwigPyIterator___ne__", _wrap_SwigPyIterator___ne__, METH_VARARGS, NULL},
	 { "SwigPyIterator___iadd__", _wrap_SwigPyIterator___iadd__, METH_VARARGS, NULL},
	 { "SwigPyIterator___isub__", _wrap_SwigPyIterator___isub__, METH_VARARGS, NULL},
	 { "SwigPyIterator___add__", _wrap_SwigPyIterator___add__, METH_VARARGS, NULL},
	 { "SwigPyIterator___sub__", _wrap_SwigPyIterator___sub__, METH_VARARGS, NULL},
	 { "SwigPyIterator_swigregister", SwigPyIterator_swigregister, METH_O, NULL},
	 { "vecSizeT_iterator", _wrap_vecSizeT_iterator, METH_O, NULL},
	 { "vecSizeT___nonzero__", _wrap_vecSizeT___nonzero__, METH_O, NULL},
	 { "vecSizeT___bool__", _wrap_vecSizeT___bool__, METH_O, NULL},
	 { "vecSizeT___len__", _wrap_vecSizeT___len__, METH_O, NULL},
	 { "vecSizeT___getslice__", _wrap_vecSizeT___getslice__, METH_VARARGS, NULL},
	 { "vecSizeT___setslice__", _wrap_vecSizeT___setslice__, METH_VARARGS, NULL},
	 { "vecSizeT___delslice__", _wrap_vecSizeT___delslice__, METH_VARARGS, NULL},
	 { "vecSizeT___delitem__", _wrap_vecSizeT___delitem__, METH_VARARGS, NULL},
	 { "vecSizeT___getitem__", _wrap_vecSizeT___getitem__, METH_VARARGS, NULL},
	 { "vecSizeT___setitem__", _wrap_vecSizeT___setitem__, METH_VARARGS, NULL},
	 { "vecSizeT_pop", _wrap_vecSizeT_pop, METH_O, NULL},
	 { "vecSizeT_append", _wrap_vecSizeT_append, METH_VARARGS, NULL},
	 { "vecSizeT_empty", _wrap_vecSizeT_empty, METH_O, NULL},
	 { "vecSizeT_size", _wrap_vecSizeT_size, METH_O, NULL},
	 { "vecSizeT_swap", _wrap_vecSizeT_swap, METH_VARARGS, NULL},
	 { "vecSizeT_begin", _wrap_vecSizeT_begin, METH_O, NULL},
	 { "vecSizeT_end", _wrap_vecSizeT_end, METH_O, NULL},
	 { "vecSizeT_rbegin", _wrap_vecSizeT_rbegin, METH_O, NULL},
	 { "vecSizeT_rend", _wrap_vecSizeT_rend, METH_O, NULL},
	 { "vecSizeT_clear", _wrap_vecSizeT_clear, METH_O, NULL},
	 { "vecSizeT_get_allocator", _wrap_vecSizeT_get_allocator, METH_O, NULL},
	 { "vecSizeT_pop_back", _wrap_vecSizeT_pop_back, METH_O, NULL},
	 { "vecSizeT_erase", _wrap_vecSizeT_erase, METH_VARARGS, NULL},
	 { "new_vecSizeT", _wrap_new_vecSizeT, METH_VARARGS, NULL},
	 { "vecSizeT_push_back", _wrap_vecSizeT_push_back, METH_VARARGS, NULL},
	 { "vecSizeT_front", _wrap_vecSizeT_front, METH_O, NULL},
	 { "vecSizeT_back", _wrap_vecSizeT_back, METH_O, NULL},
	 { "vecSizeT_assign", _wrap_vecSizeT_assign, METH_VARARGS, NULL},
	 { "vecSizeT_resize", _wrap_vecSizeT_resize, METH_VARARGS, NULL},
	 { "vecSizeT_insert", _wrap_vecSizeT_insert, METH_VARARGS, NULL},
	 { "vecSizeT_reserve", _wrap_vecSizeT_reserve, METH_VARARGS, NULL},
	 { "vecSizeT_capacity", _wrap_vecSizeT_capacity, METH_O, NULL},
	 { "delete_vecSizeT", _wrap_delete_vecSizeT, METH_O, NULL},
	 { "vecSizeT_swigregister", vecSizeT_swigregister, METH_O, NULL},
	 { "vecSizeT_swiginit", vecSizeT_swiginit, METH_VARARGS, NULL},
	 { "vecDouble_iterator", _wrap_vecDouble_iterator, METH_O, NULL},
	 { "vecDouble___nonzero__", _wrap_vecDouble___nonzero__, METH_O, NULL},
	 { "vecDouble___bool__", _wrap_vecDouble___bool__, METH_O, NULL},
	 { "vecDouble___len__", _wrap_vecDouble___len__, METH_O, NULL},
	 { "vecDouble___getslice__", _wrap_vecDouble___getslice__, METH_VARARGS, NULL},
	 { "vecDouble___setslice__", _wrap_vecDouble___setslice__, METH_VARARGS, NULL},
	 { "vecDouble___delslice__", _wrap_vecDouble___delslice__, METH_VARARGS, NULL},
	 { "vecDouble___delitem__", _wrap_vecDouble___delitem__, METH_VARARGS, NULL},
	 { "vecDouble___getitem__", _wrap_vecDouble___getitem__, METH_VARARGS, NULL},
	 { "vecDouble___setitem__", _wrap_vecDouble___setitem__, METH_VARARGS, NULL},
	 { "vecDouble_pop", _wrap_vecDouble_pop, METH_O, NULL},
	 { "vecDouble_append", _wrap_vecDouble_append, METH_VARARGS, NULL},
	 { "vecDouble_empty", _wrap_vecDouble_empty, METH_O, NULL},
	 { "vecDouble_size", _wrap_vecDouble_size, METH_O, NULL},
	 { "vecDouble_swap", _wrap_vecDouble_swap, METH_VARARGS, NULL},
	 { "vecDouble_begin", _wrap_vecDouble_begin, METH_O, NULL},
	 { "vecDouble_end", _wrap_vecDouble_end, METH_O, NULL},
	 { "vecDouble_rbegin", _wrap_vecDouble_rbegin, METH_O, NULL},
	 { "vecDouble_rend", _wrap_vecDouble_rend, METH_O, NULL},
	 { "vecDouble_clear", _wrap_vecDouble_clear, METH_O, NULL},
	 { "vecDouble_get_allocator", _wrap_vecDouble_get_allocator, METH_O, NULL},
	 { "vecDouble_pop_back", _wrap_vecDouble_pop_back, METH_O, NULL},
	 { "vecDouble_erase", _wrap_vecDouble_erase, METH_VARARGS, NULL},
	 { "new_vecDouble", _wrap_new_vecDouble, METH_VARARGS, NULL},
	 { "vecDouble_push_back", _wrap_vecDouble_push_back, METH_VARARGS, NULL},
	 { "vecDouble_front", _wrap_vecDouble_front, METH_O, NULL},
	 { "vecDouble_back", _wrap_vecDouble_back, METH_O, NULL},
	 { "vecDouble_assign", _wrap_vecDouble_assign, METH_VARARGS, NULL},
	 { "vecDouble_resize", _wrap_vecDouble_resize, METH_VARARGS, NULL},
	 { "vecDouble_insert", _wrap_vecDouble_insert, METH_VARARGS, NULL},
	 { "vecDouble_reserve", _wrap_vecDouble_reserve, METH_VARARGS, NULL},
	 { "vecDouble_capacity", _wrap_vecDouble_capacity, METH_O, NULL},
	 { "delete_vecDouble", _wrap_delete_vecDouble, METH_O, NULL},
	 { "vecDouble_swigregister", vecDouble_swigregister, METH_O, NULL},
	 { "vecDouble_swiginit", vecDouble_swiginit, METH_VARARGS, NULL},
	 { "arrDouble_iterator", _wrap_arrDouble_iterator, METH_O, NULL},
	 { "arrDouble___nonzero__", _wrap_arrDouble___nonzero__, METH_O, NULL},
	 { "arrDouble___bool__", _wrap_arrDouble___bool__, METH_O, NULL},
	 { "arrDouble___len__", _wrap_arrDouble___len__, METH_O, NULL},
	 { "arrDouble___getslice__", _wrap_arrDouble___getslice__, METH_VARARGS, NULL},
	 { "arrDouble___setslice__", _wrap_arrDouble___setslice__, METH_VARARGS, NULL},
	 { "arrDouble___delslice__", _wrap_arrDouble___delslice__, METH_VARARGS, NULL},
	 { "arrDouble___delitem__", _wrap_arrDouble___delitem__, METH_VARARGS, NULL},
	 { "arrDouble___getitem__", _wrap_arrDouble___getitem__, METH_VARARGS, NULL},
	 { "arrDouble___setitem__", _wrap_arrDouble___setitem__, METH_VARARGS, NULL},
	 { "arrDouble_pop", _wrap_arrDouble_pop, METH_O, NULL},
	 { "arrDouble_append", _wrap_arrDouble_append, METH_VARARGS, NULL},
	 { "arrDouble_empty", _wrap_arrDouble_empty, METH_O, NULL},
	 { "arrDouble_size", _wrap_arrDouble_size, METH_O, NULL},
	 { "arrDouble_swap", _wrap_arrDouble_swap, METH_VARARGS, NULL},
	 { "arrDouble_begin", _wrap_arrDouble_begin, METH_O, NULL},
	 { "arrDouble_end", _wrap_arrDouble_end, METH_O, NULL},
	 { "arrDouble_rbegin", _wrap_arrDouble_rbegin, METH_O, NULL},
	 { "arrDouble_rend", _wrap_arrDouble_rend, METH_O, NULL},
	 { "arrDouble_clear", _wrap_arrDouble_clear, METH_O, NULL},
	 { "arrDouble_get_allocator", _wrap_arrDouble_get_allocator, METH_O, NULL},
	 { "arrDouble_pop_back", _wrap_arrDouble_pop_back, METH_O, NULL},
	 { "arrDouble_erase", _wrap_arrDouble_erase, METH_VARARGS, NULL},
	 { "new_arrDouble", _wrap_new_arrDouble, METH_VARARGS, NULL},
	 { "arrDouble_push_back", _wrap_arrDouble_push_back, METH_VARARGS, NULL},
	 { "arrDouble_front", _wrap_arrDouble_front, METH_O, NULL},
	 { "arrDouble_back", _wrap_arrDouble_back, METH_O, NULL},
	 { "arrDouble_assign", _wrap_arrDouble_assign, METH_VARARGS, NULL},
	 { "arrDouble_resize", _wrap_arrDouble_resize, METH_VARARGS, NULL},
	 { "arrDouble_insert", _wrap_arrDouble_insert, METH_VARARGS, NULL},
	 { "arrDouble_reserve", _wrap_arrDouble_reserve, METH_VARARGS, NULL},
	 { "arrDouble_capacity", _wrap_arrDouble_capacity, METH_O, NULL},
	 { "delete_arrDouble", _wrap_delete_arrDouble, METH_O, NULL},
	 { "arrDouble_swigregister", arrDouble_swigregister, METH_O, NULL},
	 { "arrDouble_swiginit", arrDouble_swiginit, METH_VARARGS, NULL},
	 { "new_Vector", _wrap_new_Vector, METH_VARARGS, NULL},
	 { "delete_Vector", _wrap_delete_Vector, METH_O, NULL},
	 { "Vector_Resize", _wrap_Vector_Resize, METH_VARARGS, NULL},
	 { "Vector_Fill", _wrap_Vector_Fill, METH_VARARGS, NULL},
	 { "Vector___call__", _wrap_Vector___call__, METH_VARARGS, NULL},
	 { "Vector___add__", _wrap_Vector___add__, METH_VARARGS, NULL},
	 { "Vector___pos__", _wrap_Vector___pos__, METH_O, NULL},
	 { "Vector___sub__", _wrap_Vector___sub__, METH_VARARGS, NULL},
	 { "Vector___neg__", _wrap_Vector___neg__, METH_O, NULL},
	 { "Vector___mul__", _wrap_Vector___mul__, METH_VARARGS, NULL},
	 { "Vector_SwapRows", _wrap_Vector_SwapRows, METH_VARARGS, NULL},
	 { "Vector_Region", _wrap_Vector_Region, METH_VARARGS, NULL},
	 { "Vector_GetRows", _wrap_Vector_GetRows, METH_O, NULL},
	 { "Vector_GetCols", _wrap_Vector_GetCols, METH_O, NULL},
	 { "Vector_GetValue", _wrap_Vector_GetValue, METH_VARARGS, NULL},
	 { "Vector_GetData", _wrap_Vector_GetData, METH_O, NULL},
	 { "Vector_SetValue", _wrap_Vector_SetValue, METH_VARARGS, NULL},
	 { "Vector___str__", _wrap_Vector___str__, METH_O, NULL},
	 { "Vector___radd__", _wrap_Vector___radd__, METH_VARARGS, NULL},
	 { "Vector___rsub__", _wrap_Vector___rsub__, METH_VARARGS, NULL},
	 { "Vector___rmul__", _wrap_Vector___rmul__, METH_VARARGS, NULL},
	 { "Vector_swigregister", Vector_swigregister, METH_O, NULL},
	 { "Vector_swiginit", Vector_swiginit, METH_VARARGS, NULL},
	 { "new_Matrix", _wrap_new_Matrix, METH_VARARGS, NULL},
	 { "delete_Matrix", _wrap_delete_Matrix, METH_O, NULL},
	 { "Matrix_Resize", _wrap_Matrix_Resize, METH_VARARGS, NULL},
	 { "Matrix_Fill", _wrap_Matrix_Fill, METH_VARARGS, NULL},
	 { "Matrix___call__", _wrap_Matrix___call__, METH_VARARGS, NULL},
	 { "Matrix___add__", _wrap_Matrix___add__, METH_VARARGS, NULL},
	 { "Matrix___pos__", _wrap_Matrix___pos__, METH_O, NULL},
	 { "Matrix___sub__", _wrap_Matrix___sub__, METH_VARARGS, NULL},
	 { "Matrix___neg__", _wrap_Matrix___neg__, METH_O, NULL},
	 { "Matrix___mul__", _wrap_Matrix___mul__, METH_VARARGS, NULL},
	 { "Matrix_SwapRows", _wrap_Matrix_SwapRows, METH_VARARGS, NULL},
	 { "Matrix_SwapCols", _wrap_Matrix_SwapCols, METH_VARARGS, NULL},
	 { "Matrix_Transpose", _wrap_Matrix_Transpose, METH_O, NULL},
	 { "Matrix_Diagonal", _wrap_Matrix_Diagonal, METH_O, NULL},
	 { "Matrix_Lower", _wrap_Matrix_Lower, METH_VARARGS, NULL},
	 { "Matrix_LowerWithDiagonal", _wrap_Matrix_LowerWithDiagonal, METH_O, NULL},
	 { "Matrix_LowerWithoutDiagonal", _wrap_Matrix_LowerWithoutDiagonal, METH_O, NULL},
	 { "Matrix_Upper", _wrap_Matrix_Upper, METH_VARARGS, NULL},
	 { "Matrix_UpperWithDiagonal", _wrap_Matrix_UpperWithDiagonal, METH_O, NULL},
	 { "Matrix_UpperWithoutDiagonal", _wrap_Matrix_UpperWithoutDiagonal, METH_O, NULL},
	 { "Matrix_Region", _wrap_Matrix_Region, METH_VARARGS, NULL},
	 { "Matrix_GetRows", _wrap_Matrix_GetRows, METH_O, NULL},
	 { "Matrix_GetCols", _wrap_Matrix_GetCols, METH_O, NULL},
	 { "Matrix_GetValue", _wrap_Matrix_GetValue, METH_VARARGS, NULL},
	 { "Matrix_GetData", _wrap_Matrix_GetData, METH_O, NULL},
	 { "Matrix_SetValue", _wrap_Matrix_SetValue, METH_VARARGS, NULL},
	 { "Matrix___str__", _wrap_Matrix___str__, METH_O, NULL},
	 { "Matrix___radd__", _wrap_Matrix___radd__, METH_VARARGS, NULL},
	 { "Matrix___rsub__", _wrap_Matrix___rsub__, METH_VARARGS, NULL},
	 { "Matrix___rmul__", _wrap_Matrix___rmul__, METH_VARARGS, NULL},
	 { "Matrix_swigregister", Matrix_swigregister, METH_O, NULL},
	 { "Matrix_swiginit", Matrix_swiginit, METH_VARARGS, NULL},
	 { "new_Ellpack", _wrap_new_Ellpack, METH_VARARGS, NULL},
	 { "delete_Ellpack", _wrap_delete_Ellpack, METH_O, NULL},
	 { "Ellpack_IsUsed", _wrap_Ellpack_IsUsed, METH_VARARGS, NULL},
	 { "Ellpack_Add", _wrap_Ellpack_Add, METH_VARARGS, NULL},
	 { "Ellpack_Remove", _wrap_Ellpack_Remove, METH_VARARGS, NULL},
	 { "Ellpack_Resize", _wrap_Ellpack_Resize, METH_VARARGS, NULL},
	 { "Ellpack_Fill", _wrap_Ellpack_Fill, METH_VARARGS, NULL},
	 { "Ellpack_Dump", _wrap_Ellpack_Dump, METH_O, NULL},
	 { "Ellpack___call__", _wrap_Ellpack___call__, METH_VARARGS, NULL},
	 { "Ellpack___add__", _wrap_Ellpack___add__, METH_VARARGS, NULL},
	 { "Ellpack___pos__", _wrap_Ellpack___pos__, METH_O, NULL},
	 { "Ellpack___sub__", _wrap_Ellpack___sub__, METH_VARARGS, NULL},
	 { "Ellpack___neg__", _wrap_Ellpack___neg__, METH_O, NULL},
	 { "Ellpack___mul__", _wrap_Ellpack___mul__, METH_VARARGS, NULL},
	 { "Ellpack_SwapRows", _wrap_Ellpack_SwapRows, METH_VARARGS, NULL},
	 { "Ellpack_SwapCols", _wrap_Ellpack_SwapCols, METH_VARARGS, NULL},
	 { "Ellpack_Transpose", _wrap_Ellpack_Transpose, METH_O, NULL},
	 { "Ellpack_Diagonal", _wrap_Ellpack_Diagonal, METH_O, NULL},
	 { "Ellpack_Lower", _wrap_Ellpack_Lower, METH_VARARGS, NULL},
	 { "Ellpack_LowerWithDiagonal", _wrap_Ellpack_LowerWithDiagonal, METH_O, NULL},
	 { "Ellpack_LowerWithoutDiagonal", _wrap_Ellpack_LowerWithoutDiagonal, METH_O, NULL},
	 { "Ellpack_Upper", _wrap_Ellpack_Upper, METH_VARARGS, NULL},
	 { "Ellpack_UpperWithDiagonal", _wrap_Ellpack_UpperWithDiagonal, METH_O, NULL},
	 { "Ellpack_UpperWithoutDiagonal", _wrap_Ellpack_UpperWithoutDiagonal, METH_O, NULL},
	 { "Ellpack_Region", _wrap_Ellpack_Region, METH_VARARGS, NULL},
	 { "Ellpack_GetRows", _wrap_Ellpack_GetRows, METH_O, NULL},
	 { "Ellpack_GetCols", _wrap_Ellpack_GetCols, METH_O, NULL},
	 { "Ellpack_GetWidth", _wrap_Ellpack_GetWidth, METH_O, NULL},
	 { "Ellpack_GetValue", _wrap_Ellpack_GetValue, METH_VARARGS, NULL},
	 { "Ellpack_GetCount", _wrap_Ellpack_GetCount, METH_O, NULL},
	 { "Ellpack_GetPosition", _wrap_Ellpack_GetPosition, METH_O, NULL},
	 { "Ellpack_GetData", _wrap_Ellpack_GetData, METH_O, NULL},
	 { "Ellpack_SetValue", _wrap_Ellpack_SetValue, METH_VARARGS, NULL},
	 { "Ellpack___str__", _wrap_Ellpack___str__, METH_O, NULL},
	 { "Ellpack___radd__", _wrap_Ellpack___radd__, METH_VARARGS, NULL},
	 { "Ellpack___rsub__", _wrap_Ellpack___rsub__, METH_VARARGS, NULL},
	 { "Ellpack___rmul__", _wrap_Ellpack___rmul__, METH_VARARGS, NULL},
	 { "Ellpack_swigregister", Ellpack_swigregister, METH_O, NULL},
	 { "Ellpack_swiginit", Ellpack_swiginit, METH_VARARGS, NULL},
	 { "NormMax", _wrap_NormMax, METH_O, NULL},
	 { "NormP", _wrap_NormP, METH_VARARGS, NULL},
	 { "NormP2", _wrap_NormP2, METH_VARARGS, NULL},
	 { "Dot", _wrap_Dot, METH_VARARGS, NULL},
	 { "Cross", _wrap_Cross, METH_VARARGS, NULL},
	 { "DeterminantLUP", _wrap_DeterminantLUP, METH_VARARGS, NULL},
	 { "Determinant", _wrap_Determinant, METH_O, NULL},
	 { "Inverse", _wrap_Inverse, METH_O, NULL},
	 { "ScaleByVector", _wrap_ScaleByVector, METH_VARARGS, NULL},
	 { "Solve", _wrap_Solve, METH_VARARGS, NULL},
	 { "DecomposeLUP", _wrap_DecomposeLUP, METH_VARARGS, NULL},
	 { "InverseLUP", _wrap_InverseLUP, METH_VARARGS, NULL},
	 { "DiagonalLinearSystem", _wrap_DiagonalLinearSystem, METH_VARARGS, NULL},
	 { "ForwardLinearSystem", _wrap_ForwardLinearSystem, METH_VARARGS, NULL},
	 { "DirectLUP", _wrap_DirectLUP, METH_VARARGS, NULL},
	 { "IterativeBiCGStab", _wrap_IterativeBiCGStab, METH_VARARGS, NULL},
	 { "WriteToFile", _wrap_WriteToFile, METH_VARARGS, NULL},
	 { "ReadFromFile", _wrap_ReadFromFile, METH_VARARGS, NULL},
	 { "ListVector", _wrap_ListVector, METH_O, NULL},
	 { "ListMatrix", _wrap_ListMatrix, METH_VARARGS, NULL},
	 { "RotationMatrix", _wrap_RotationMatrix, METH_VARARGS, NULL},
	 { "Rotate", _wrap_Rotate, METH_VARARGS, NULL},
	 { "Translate", _wrap_Translate, METH_VARARGS, NULL},
	 { "Mirror", _wrap_Mirror, METH_VARARGS, NULL},
	 { "Scale", _wrap_Scale, METH_VARARGS, NULL},
	 { "TablePointsRotate", _wrap_TablePointsRotate, METH_VARARGS, NULL},
	 { "TablePointsTranslate", _wrap_TablePointsTranslate, METH_VARARGS, NULL},
	 { "TablePointsMirror", _wrap_TablePointsMirror, METH_VARARGS, NULL},
	 { "TablePointsScale", _wrap_TablePointsScale, METH_VARARGS, NULL},
	 { "TableValuesScale", _wrap_TableValuesScale, METH_VARARGS, NULL},
	 { "TableValuesAdd", _wrap_TableValuesAdd, METH_VARARGS, NULL},
	 { "TableValuesClipBiggerThan", _wrap_TableValuesClipBiggerThan, METH_VARARGS, NULL},
	 { "TableValuesClipSmallerThan", _wrap_TableValuesClipSmallerThan, METH_VARARGS, NULL},
	 { "TableAppend", _wrap_TableAppend, METH_VARARGS, NULL},
	 { "vecBasis_iterator", _wrap_vecBasis_iterator, METH_O, NULL},
	 { "vecBasis___nonzero__", _wrap_vecBasis___nonzero__, METH_O, NULL},
	 { "vecBasis___bool__", _wrap_vecBasis___bool__, METH_O, NULL},
	 { "vecBasis___len__", _wrap_vecBasis___len__, METH_O, NULL},
	 { "vecBasis___getslice__", _wrap_vecBasis___getslice__, METH_VARARGS, NULL},
	 { "vecBasis___setslice__", _wrap_vecBasis___setslice__, METH_VARARGS, NULL},
	 { "vecBasis___delslice__", _wrap_vecBasis___delslice__, METH_VARARGS, NULL},
	 { "vecBasis___delitem__", _wrap_vecBasis___delitem__, METH_VARARGS, NULL},
	 { "vecBasis___getitem__", _wrap_vecBasis___getitem__, METH_VARARGS, NULL},
	 { "vecBasis___setitem__", _wrap_vecBasis___setitem__, METH_VARARGS, NULL},
	 { "vecBasis_pop", _wrap_vecBasis_pop, METH_O, NULL},
	 { "vecBasis_append", _wrap_vecBasis_append, METH_VARARGS, NULL},
	 { "vecBasis_empty", _wrap_vecBasis_empty, METH_O, NULL},
	 { "vecBasis_size", _wrap_vecBasis_size, METH_O, NULL},
	 { "vecBasis_swap", _wrap_vecBasis_swap, METH_VARARGS, NULL},
	 { "vecBasis_begin", _wrap_vecBasis_begin, METH_O, NULL},
	 { "vecBasis_end", _wrap_vecBasis_end, METH_O, NULL},
	 { "vecBasis_rbegin", _wrap_vecBasis_rbegin, METH_O, NULL},
	 { "vecBasis_rend", _wrap_vecBasis_rend, METH_O, NULL},
	 { "vecBasis_clear", _wrap_vecBasis_clear, METH_O, NULL},
	 { "vecBasis_get_allocator", _wrap_vecBasis_get_allocator, METH_O, NULL},
	 { "vecBasis_pop_back", _wrap_vecBasis_pop_back, METH_O, NULL},
	 { "vecBasis_erase", _wrap_vecBasis_erase, METH_VARARGS, NULL},
	 { "new_vecBasis", _wrap_new_vecBasis, METH_VARARGS, NULL},
	 { "vecBasis_push_back", _wrap_vecBasis_push_back, METH_VARARGS, NULL},
	 { "vecBasis_front", _wrap_vecBasis_front, METH_O, NULL},
	 { "vecBasis_back", _wrap_vecBasis_back, METH_O, NULL},
	 { "vecBasis_assign", _wrap_vecBasis_assign, METH_VARARGS, NULL},
	 { "vecBasis_resize", _wrap_vecBasis_resize, METH_VARARGS, NULL},
	 { "vecBasis_insert", _wrap_vecBasis_insert, METH_VARARGS, NULL},
	 { "vecBasis_reserve", _wrap_vecBasis_reserve, METH_VARARGS, NULL},
	 { "vecBasis_capacity", _wrap_vecBasis_capacity, METH_O, NULL},
	 { "delete_vecBasis", _wrap_delete_vecBasis, METH_O, NULL},
	 { "vecBasis_swigregister", vecBasis_swigregister, METH_O, NULL},
	 { "vecBasis_swiginit", vecBasis_swiginit, METH_VARARGS, NULL},
	 { "delete_IBasis", _wrap_delete_IBasis, METH_O, NULL},
	 { "IBasis_Distance", _wrap_IBasis_Distance, METH_VARARGS, NULL},
	 { "IBasis_DistanceSquared", _wrap_IBasis_DistanceSquared, METH_VARARGS, NULL},
	 { "IBasis_LocalToGlobal", _wrap_IBasis_LocalToGlobal, METH_VARARGS, NULL},
	 { "IBasis_LocalToGlobalVector", _wrap_IBasis_LocalToGlobalVector, METH_VARARGS, NULL},
	 { "IBasis_GlobalToLocal", _wrap_IBasis_GlobalToLocal, METH_VARARGS, NULL},
	 { "IBasis_GlobalToLocalVector", _wrap_IBasis_GlobalToLocalVector, METH_VARARGS, NULL},
	 { "IBasis_GetBasis", _wrap_IBasis_GetBasis, METH_O, NULL},
	 { "IBasis_GetOrigin", _wrap_IBasis_GetOrigin, METH_O, NULL},
	 { "IBasis_GetTag", _wrap_IBasis_GetTag, METH_O, NULL},
	 { "IBasis_GetDim", _wrap_IBasis_GetDim, METH_O, NULL},
	 { "IBasis_GetType", _wrap_IBasis_GetType, METH_O, NULL},
	 { "IBasis_Offset", _wrap_IBasis_Offset, METH_VARARGS, NULL},
	 { "IBasis_Rotate", _wrap_IBasis_Rotate, METH_VARARGS, NULL},
	 { "IBasis_SetTag", _wrap_IBasis_SetTag, METH_VARARGS, NULL},
	 { "IBasis_swigregister", IBasis_swigregister, METH_O, NULL},
	 { "CreateBasisCartesian", _wrap_CreateBasisCartesian, METH_VARARGS, NULL},
	 { "delete_Cartesian", _wrap_delete_Cartesian, METH_O, NULL},
	 { "Cartesian_Create", _wrap_Cartesian_Create, METH_NOARGS, NULL},
	 { "Cartesian_GetPtr", _wrap_Cartesian_GetPtr, METH_VARARGS, NULL},
	 { "Cartesian_Distance", _wrap_Cartesian_Distance, METH_VARARGS, NULL},
	 { "Cartesian_DistanceSquared", _wrap_Cartesian_DistanceSquared, METH_VARARGS, NULL},
	 { "Cartesian_LocalToGlobal", _wrap_Cartesian_LocalToGlobal, METH_VARARGS, NULL},
	 { "Cartesian_LocalToGlobalVector", _wrap_Cartesian_LocalToGlobalVector, METH_VARARGS, NULL},
	 { "Cartesian_GlobalToLocal", _wrap_Cartesian_GlobalToLocal, METH_VARARGS, NULL},
	 { "Cartesian_GlobalToLocalVector", _wrap_Cartesian_GlobalToLocalVector, METH_VARARGS, NULL},
	 { "Cartesian_GetBasis", _wrap_Cartesian_GetBasis, METH_O, NULL},
	 { "Cartesian_GetOrigin", _wrap_Cartesian_GetOrigin, METH_O, NULL},
	 { "Cartesian_GetTag", _wrap_Cartesian_GetTag, METH_O, NULL},
	 { "Cartesian_GetDim", _wrap_Cartesian_GetDim, METH_O, NULL},
	 { "Cartesian_GetType", _wrap_Cartesian_GetType, METH_O, NULL},
	 { "Cartesian_Offset", _wrap_Cartesian_Offset, METH_VARARGS, NULL},
	 { "Cartesian_Rotate", _wrap_Cartesian_Rotate, METH_VARARGS, NULL},
	 { "Cartesian_SetTag", _wrap_Cartesian_SetTag, METH_VARARGS, NULL},
	 { "Cartesian_swigregister", Cartesian_swigregister, METH_O, NULL},
	 { "CreateBasisCylindrical", _wrap_CreateBasisCylindrical, METH_VARARGS, NULL},
	 { "delete_Cylindrical", _wrap_delete_Cylindrical, METH_O, NULL},
	 { "Cylindrical_Create", _wrap_Cylindrical_Create, METH_NOARGS, NULL},
	 { "Cylindrical_GetPtr", _wrap_Cylindrical_GetPtr, METH_VARARGS, NULL},
	 { "Cylindrical_Distance", _wrap_Cylindrical_Distance, METH_VARARGS, NULL},
	 { "Cylindrical_DistanceSquared", _wrap_Cylindrical_DistanceSquared, METH_VARARGS, NULL},
	 { "Cylindrical_LocalToGlobal", _wrap_Cylindrical_LocalToGlobal, METH_VARARGS, NULL},
	 { "Cylindrical_LocalToGlobalVector", _wrap_Cylindrical_LocalToGlobalVector, METH_VARARGS, NULL},
	 { "Cylindrical_GlobalToLocal", _wrap_Cylindrical_GlobalToLocal, METH_VARARGS, NULL},
	 { "Cylindrical_GlobalToLocalVector", _wrap_Cylindrical_GlobalToLocalVector, METH_VARARGS, NULL},
	 { "Cylindrical_GetBasis", _wrap_Cylindrical_GetBasis, METH_O, NULL},
	 { "Cylindrical_GetOrigin", _wrap_Cylindrical_GetOrigin, METH_O, NULL},
	 { "Cylindrical_GetTag", _wrap_Cylindrical_GetTag, METH_O, NULL},
	 { "Cylindrical_GetDim", _wrap_Cylindrical_GetDim, METH_O, NULL},
	 { "Cylindrical_GetType", _wrap_Cylindrical_GetType, METH_O, NULL},
	 { "Cylindrical_Offset", _wrap_Cylindrical_Offset, METH_VARARGS, NULL},
	 { "Cylindrical_Rotate", _wrap_Cylindrical_Rotate, METH_VARARGS, NULL},
	 { "Cylindrical_SetTag", _wrap_Cylindrical_SetTag, METH_VARARGS, NULL},
	 { "Cylindrical_swigregister", Cylindrical_swigregister, METH_O, NULL},
	 { "delete_ITimer", _wrap_delete_ITimer, METH_O, NULL},
	 { "ITimer_GetCurrentTime", _wrap_ITimer_GetCurrentTime, METH_O, NULL},
	 { "ITimer_GetInitialTime", _wrap_ITimer_GetInitialTime, METH_O, NULL},
	 { "ITimer_GetEndTime", _wrap_ITimer_GetEndTime, METH_O, NULL},
	 { "ITimer_GetStepSize", _wrap_ITimer_GetStepSize, METH_O, NULL},
	 { "ITimer_GetStepNumber", _wrap_ITimer_GetStepNumber, METH_O, NULL},
	 { "ITimer_GetType", _wrap_ITimer_GetType, METH_O, NULL},
	 { "ITimer_GetTag", _wrap_ITimer_GetTag, METH_O, NULL},
	 { "ITimer_SetNextStep", _wrap_ITimer_SetNextStep, METH_O, NULL},
	 { "ITimer_SetInitialTime", _wrap_ITimer_SetInitialTime, METH_VARARGS, NULL},
	 { "ITimer_SetEndTime", _wrap_ITimer_SetEndTime, METH_VARARGS, NULL},
	 { "ITimer_SetStepSize", _wrap_ITimer_SetStepSize, METH_VARARGS, NULL},
	 { "ITimer_SetTag", _wrap_ITimer_SetTag, METH_VARARGS, NULL},
	 { "ITimer_swigregister", ITimer_swigregister, METH_O, NULL},
	 { "CreateTimerStationary", _wrap_CreateTimerStationary, METH_VARARGS, NULL},
	 { "delete_TimerStationary", _wrap_delete_TimerStationary, METH_O, NULL},
	 { "TimerStationary_Create", _wrap_TimerStationary_Create, METH_NOARGS, NULL},
	 { "TimerStationary_GetPtr", _wrap_TimerStationary_GetPtr, METH_VARARGS, NULL},
	 { "TimerStationary_GetCurrentTime", _wrap_TimerStationary_GetCurrentTime, METH_O, NULL},
	 { "TimerStationary_GetInitialTime", _wrap_TimerStationary_GetInitialTime, METH_O, NULL},
	 { "TimerStationary_GetEndTime", _wrap_TimerStationary_GetEndTime, METH_O, NULL},
	 { "TimerStationary_GetStepSize", _wrap_TimerStationary_GetStepSize, METH_O, NULL},
	 { "TimerStationary_GetStepNumber", _wrap_TimerStationary_GetStepNumber, METH_O, NULL},
	 { "TimerStationary_GetType", _wrap_TimerStationary_GetType, METH_O, NULL},
	 { "TimerStationary_GetTag", _wrap_TimerStationary_GetTag, METH_O, NULL},
	 { "TimerStationary_SetNextStep", _wrap_TimerStationary_SetNextStep, METH_O, NULL},
	 { "TimerStationary_SetInitialTime", _wrap_TimerStationary_SetInitialTime, METH_VARARGS, NULL},
	 { "TimerStationary_SetEndTime", _wrap_TimerStationary_SetEndTime, METH_VARARGS, NULL},
	 { "TimerStationary_SetStepSize", _wrap_TimerStationary_SetStepSize, METH_VARARGS, NULL},
	 { "TimerStationary_SetTag", _wrap_TimerStationary_SetTag, METH_VARARGS, NULL},
	 { "TimerStationary_swigregister", TimerStationary_swigregister, METH_O, NULL},
	 { "CreateTimerStepped", _wrap_CreateTimerStepped, METH_VARARGS, NULL},
	 { "delete_TimerStepped", _wrap_delete_TimerStepped, METH_O, NULL},
	 { "TimerStepped_Create", _wrap_TimerStepped_Create, METH_NOARGS, NULL},
	 { "TimerStepped_GetPtr", _wrap_TimerStepped_GetPtr, METH_VARARGS, NULL},
	 { "TimerStepped_GetCurrentTime", _wrap_TimerStepped_GetCurrentTime, METH_O, NULL},
	 { "TimerStepped_GetInitialTime", _wrap_TimerStepped_GetInitialTime, METH_O, NULL},
	 { "TimerStepped_GetEndTime", _wrap_TimerStepped_GetEndTime, METH_O, NULL},
	 { "TimerStepped_GetStepSize", _wrap_TimerStepped_GetStepSize, METH_O, NULL},
	 { "TimerStepped_GetStepNumber", _wrap_TimerStepped_GetStepNumber, METH_O, NULL},
	 { "TimerStepped_GetType", _wrap_TimerStepped_GetType, METH_O, NULL},
	 { "TimerStepped_GetTag", _wrap_TimerStepped_GetTag, METH_O, NULL},
	 { "TimerStepped_SetNextStep", _wrap_TimerStepped_SetNextStep, METH_O, NULL},
	 { "TimerStepped_SetInitialTime", _wrap_TimerStepped_SetInitialTime, METH_VARARGS, NULL},
	 { "TimerStepped_SetEndTime", _wrap_TimerStepped_SetEndTime, METH_VARARGS, NULL},
	 { "TimerStepped_SetStepSize", _wrap_TimerStepped_SetStepSize, METH_VARARGS, NULL},
	 { "TimerStepped_SetTag", _wrap_TimerStepped_SetTag, METH_VARARGS, NULL},
	 { "TimerStepped_swigregister", TimerStepped_swigregister, METH_O, NULL},
	 { "delete_IValue", _wrap_delete_IValue, METH_O, NULL},
	 { "IValue_GetType", _wrap_IValue_GetType, METH_O, NULL},
	 { "IValue_GetName", _wrap_IValue_GetName, METH_O, NULL},
	 { "IValue_GetKey", _wrap_IValue_GetKey, METH_O, NULL},
	 { "IValue_SetName", _wrap_IValue_SetName, METH_VARARGS, NULL},
	 { "IValue_SetKey", _wrap_IValue_SetKey, METH_VARARGS, NULL},
	 { "IValue_swigregister", IValue_swigregister, METH_O, NULL},
	 { "delete_IBool", _wrap_delete_IBool, METH_O, NULL},
	 { "IBool_GetValue", _wrap_IBool_GetValue, METH_O, NULL},
	 { "IBool_swigregister", IBool_swigregister, METH_O, NULL},
	 { "delete_IString", _wrap_delete_IString, METH_O, NULL},
	 { "IString_GetValue", _wrap_IString_GetValue, METH_O, NULL},
	 { "IString_swigregister", IString_swigregister, METH_O, NULL},
	 { "delete_IScalar", _wrap_delete_IScalar, METH_O, NULL},
	 { "IScalar_GetValue", _wrap_IScalar_GetValue, METH_O, NULL},
	 { "IScalar_swigregister", IScalar_swigregister, METH_O, NULL},
	 { "delete_IScalar1D", _wrap_delete_IScalar1D, METH_O, NULL},
	 { "IScalar1D_GetValue", _wrap_IScalar1D_GetValue, METH_VARARGS, NULL},
	 { "IScalar1D_swigregister", IScalar1D_swigregister, METH_O, NULL},
	 { "delete_IScalar2D", _wrap_delete_IScalar2D, METH_O, NULL},
	 { "IScalar2D_GetValue", _wrap_IScalar2D_GetValue, METH_VARARGS, NULL},
	 { "IScalar2D_swigregister", IScalar2D_swigregister, METH_O, NULL},
	 { "delete_IScalar3D", _wrap_delete_IScalar3D, METH_O, NULL},
	 { "IScalar3D_GetValue", _wrap_IScalar3D_GetValue, METH_VARARGS, NULL},
	 { "IScalar3D_swigregister", IScalar3D_swigregister, METH_O, NULL},
	 { "delete_IVector3D", _wrap_delete_IVector3D, METH_O, NULL},
	 { "IVector3D_GetValue", _wrap_IVector3D_GetValue, METH_VARARGS, NULL},
	 { "IVector3D_swigregister", IVector3D_swigregister, METH_O, NULL},
	 { "delete_IMatrix3D", _wrap_delete_IMatrix3D, METH_O, NULL},
	 { "IMatrix3D_GetValue", _wrap_IMatrix3D_GetValue, METH_VARARGS, NULL},
	 { "IMatrix3D_swigregister", IMatrix3D_swigregister, METH_O, NULL},
	 { "CreateValueBool", _wrap_CreateValueBool, METH_VARARGS, NULL},
	 { "delete_ValueBool", _wrap_delete_ValueBool, METH_O, NULL},
	 { "ValueBool_Create", _wrap_ValueBool_Create, METH_NOARGS, NULL},
	 { "ValueBool_GetType", _wrap_ValueBool_GetType, METH_O, NULL},
	 { "ValueBool_GetName", _wrap_ValueBool_GetName, METH_O, NULL},
	 { "ValueBool_GetKey", _wrap_ValueBool_GetKey, METH_O, NULL},
	 { "ValueBool_GetValue", _wrap_ValueBool_GetValue, METH_O, NULL},
	 { "ValueBool_SetName", _wrap_ValueBool_SetName, METH_VARARGS, NULL},
	 { "ValueBool_SetKey", _wrap_ValueBool_SetKey, METH_VARARGS, NULL},
	 { "ValueBool_SetValue", _wrap_ValueBool_SetValue, METH_VARARGS, NULL},
	 { "ValueBool_swigregister", ValueBool_swigregister, METH_O, NULL},
	 { "CreateValueScalar", _wrap_CreateValueScalar, METH_VARARGS, NULL},
	 { "delete_ValueScalar", _wrap_delete_ValueScalar, METH_O, NULL},
	 { "ValueScalar_Create", _wrap_ValueScalar_Create, METH_NOARGS, NULL},
	 { "ValueScalar_GetType", _wrap_ValueScalar_GetType, METH_O, NULL},
	 { "ValueScalar_GetName", _wrap_ValueScalar_GetName, METH_O, NULL},
	 { "ValueScalar_GetKey", _wrap_ValueScalar_GetKey, METH_O, NULL},
	 { "ValueScalar_GetValue", _wrap_ValueScalar_GetValue, METH_O, NULL},
	 { "ValueScalar_SetName", _wrap_ValueScalar_SetName, METH_VARARGS, NULL},
	 { "ValueScalar_SetKey", _wrap_ValueScalar_SetKey, METH_VARARGS, NULL},
	 { "ValueScalar_SetValue", _wrap_ValueScalar_SetValue, METH_VARARGS, NULL},
	 { "ValueScalar_swigregister", ValueScalar_swigregister, METH_O, NULL},
	 { "CreateValueScalar1D", _wrap_CreateValueScalar1D, METH_VARARGS, NULL},
	 { "delete_ValueScalar1D", _wrap_delete_ValueScalar1D, METH_O, NULL},
	 { "ValueScalar1D_Create", _wrap_ValueScalar1D_Create, METH_NOARGS, NULL},
	 { "ValueScalar1D_GetType", _wrap_ValueScalar1D_GetType, METH_O, NULL},
	 { "ValueScalar1D_GetName", _wrap_ValueScalar1D_GetName, METH_O, NULL},
	 { "ValueScalar1D_GetKey", _wrap_ValueScalar1D_GetKey, METH_O, NULL},
	 { "ValueScalar1D_GetValue", _wrap_ValueScalar1D_GetValue, METH_VARARGS, NULL},
	 { "ValueScalar1D_SetName", _wrap_ValueScalar1D_SetName, METH_VARARGS, NULL},
	 { "ValueScalar1D_SetKey", _wrap_ValueScalar1D_SetKey, METH_VARARGS, NULL},
	 { "ValueScalar1D_SetValue", _wrap_ValueScalar1D_SetValue, METH_VARARGS, NULL},
	 { "ValueScalar1D_swigregister", ValueScalar1D_swigregister, METH_O, NULL},
	 { "CreateValueScalar2D", _wrap_CreateValueScalar2D, METH_VARARGS, NULL},
	 { "delete_ValueScalar2D", _wrap_delete_ValueScalar2D, METH_O, NULL},
	 { "ValueScalar2D_Create", _wrap_ValueScalar2D_Create, METH_NOARGS, NULL},
	 { "ValueScalar2D_GetType", _wrap_ValueScalar2D_GetType, METH_O, NULL},
	 { "ValueScalar2D_GetName", _wrap_ValueScalar2D_GetName, METH_O, NULL},
	 { "ValueScalar2D_GetKey", _wrap_ValueScalar2D_GetKey, METH_O, NULL},
	 { "ValueScalar2D_GetValue", _wrap_ValueScalar2D_GetValue, METH_VARARGS, NULL},
	 { "ValueScalar2D_SetName", _wrap_ValueScalar2D_SetName, METH_VARARGS, NULL},
	 { "ValueScalar2D_SetKey", _wrap_ValueScalar2D_SetKey, METH_VARARGS, NULL},
	 { "ValueScalar2D_SetValue", _wrap_ValueScalar2D_SetValue, METH_VARARGS, NULL},
	 { "ValueScalar2D_swigregister", ValueScalar2D_swigregister, METH_O, NULL},
	 { "CreateValueScalar3D", _wrap_CreateValueScalar3D, METH_VARARGS, NULL},
	 { "delete_ValueScalar3D", _wrap_delete_ValueScalar3D, METH_O, NULL},
	 { "ValueScalar3D_Create", _wrap_ValueScalar3D_Create, METH_NOARGS, NULL},
	 { "ValueScalar3D_GetType", _wrap_ValueScalar3D_GetType, METH_O, NULL},
	 { "ValueScalar3D_GetName", _wrap_ValueScalar3D_GetName, METH_O, NULL},
	 { "ValueScalar3D_GetKey", _wrap_ValueScalar3D_GetKey, METH_O, NULL},
	 { "ValueScalar3D_GetValue", _wrap_ValueScalar3D_GetValue, METH_VARARGS, NULL},
	 { "ValueScalar3D_SetName", _wrap_ValueScalar3D_SetName, METH_VARARGS, NULL},
	 { "ValueScalar3D_SetKey", _wrap_ValueScalar3D_SetKey, METH_VARARGS, NULL},
	 { "ValueScalar3D_SetValue", _wrap_ValueScalar3D_SetValue, METH_VARARGS, NULL},
	 { "ValueScalar3D_swigregister", ValueScalar3D_swigregister, METH_O, NULL},
	 { "CreateValueScalar1DFunction", _wrap_CreateValueScalar1DFunction, METH_VARARGS, NULL},
	 { "delete_ValueScalar1DFunction", _wrap_delete_ValueScalar1DFunction, METH_O, NULL},
	 { "ValueScalar1DFunction_Create", _wrap_ValueScalar1DFunction_Create, METH_NOARGS, NULL},
	 { "ValueScalar1DFunction_GetType", _wrap_ValueScalar1DFunction_GetType, METH_O, NULL},
	 { "ValueScalar1DFunction_GetName", _wrap_ValueScalar1DFunction_GetName, METH_O, NULL},
	 { "ValueScalar1DFunction_GetKey", _wrap_ValueScalar1DFunction_GetKey, METH_O, NULL},
	 { "ValueScalar1DFunction_GetValue", _wrap_ValueScalar1DFunction_GetValue, METH_VARARGS, NULL},
	 { "ValueScalar1DFunction_SetName", _wrap_ValueScalar1DFunction_SetName, METH_VARARGS, NULL},
	 { "ValueScalar1DFunction_SetKey", _wrap_ValueScalar1DFunction_SetKey, METH_VARARGS, NULL},
	 { "ValueScalar1DFunction_SetFunction", _wrap_ValueScalar1DFunction_SetFunction, METH_VARARGS, NULL},
	 { "ValueScalar1DFunction_swigregister", ValueScalar1DFunction_swigregister, METH_O, NULL},
	 { "CreateValueScalar2DFunction", _wrap_CreateValueScalar2DFunction, METH_VARARGS, NULL},
	 { "delete_ValueScalar2DFunction", _wrap_delete_ValueScalar2DFunction, METH_O, NULL},
	 { "ValueScalar2DFunction_Create", _wrap_ValueScalar2DFunction_Create, METH_NOARGS, NULL},
	 { "ValueScalar2DFunction_GetType", _wrap_ValueScalar2DFunction_GetType, METH_O, NULL},
	 { "ValueScalar2DFunction_GetName", _wrap_ValueScalar2DFunction_GetName, METH_O, NULL},
	 { "ValueScalar2DFunction_GetKey", _wrap_ValueScalar2DFunction_GetKey, METH_O, NULL},
	 { "ValueScalar2DFunction_GetValue", _wrap_ValueScalar2DFunction_GetValue, METH_VARARGS, NULL},
	 { "ValueScalar2DFunction_SetName", _wrap_ValueScalar2DFunction_SetName, METH_VARARGS, NULL},
	 { "ValueScalar2DFunction_SetKey", _wrap_ValueScalar2DFunction_SetKey, METH_VARARGS, NULL},
	 { "ValueScalar2DFunction_SetFunction", _wrap_ValueScalar2DFunction_SetFunction, METH_VARARGS, NULL},
	 { "ValueScalar2DFunction_swigregister", ValueScalar2DFunction_swigregister, METH_O, NULL},
	 { "CreateValueScalar3DFunction", _wrap_CreateValueScalar3DFunction, METH_VARARGS, NULL},
	 { "delete_ValueScalar3DFunction", _wrap_delete_ValueScalar3DFunction, METH_O, NULL},
	 { "ValueScalar3DFunction_Create", _wrap_ValueScalar3DFunction_Create, METH_NOARGS, NULL},
	 { "ValueScalar3DFunction_GetType", _wrap_ValueScalar3DFunction_GetType, METH_O, NULL},
	 { "ValueScalar3DFunction_GetName", _wrap_ValueScalar3DFunction_GetName, METH_O, NULL},
	 { "ValueScalar3DFunction_GetKey", _wrap_ValueScalar3DFunction_GetKey, METH_O, NULL},
	 { "ValueScalar3DFunction_GetValue", _wrap_ValueScalar3DFunction_GetValue, METH_VARARGS, NULL},
	 { "ValueScalar3DFunction_SetName", _wrap_ValueScalar3DFunction_SetName, METH_VARARGS, NULL},
	 { "ValueScalar3DFunction_SetKey", _wrap_ValueScalar3DFunction_SetKey, METH_VARARGS, NULL},
	 { "ValueScalar3DFunction_SetFunction", _wrap_ValueScalar3DFunction_SetFunction, METH_VARARGS, NULL},
	 { "ValueScalar3DFunction_swigregister", ValueScalar3DFunction_swigregister, METH_O, NULL},
	 { "CreateValueScalar3DInterpolation", _wrap_CreateValueScalar3DInterpolation, METH_VARARGS, NULL},
	 { "delete_ValueScalar3DInterpolation", _wrap_delete_ValueScalar3DInterpolation, METH_O, NULL},
	 { "ValueScalar3DInterpolation_Create", _wrap_ValueScalar3DInterpolation_Create, METH_NOARGS, NULL},
	 { "ValueScalar3DInterpolation_GetType", _wrap_ValueScalar3DInterpolation_GetType, METH_O, NULL},
	 { "ValueScalar3DInterpolation_GetName", _wrap_ValueScalar3DInterpolation_GetName, METH_O, NULL},
	 { "ValueScalar3DInterpolation_GetKey", _wrap_ValueScalar3DInterpolation_GetKey, METH_O, NULL},
	 { "ValueScalar3DInterpolation_GetValue", _wrap_ValueScalar3DInterpolation_GetValue, METH_VARARGS, NULL},
	 { "ValueScalar3DInterpolation_GetInterpolation", _wrap_ValueScalar3DInterpolation_GetInterpolation, METH_O, NULL},
	 { "ValueScalar3DInterpolation_SetName", _wrap_ValueScalar3DInterpolation_SetName, METH_VARARGS, NULL},
	 { "ValueScalar3DInterpolation_SetKey", _wrap_ValueScalar3DInterpolation_SetKey, METH_VARARGS, NULL},
	 { "ValueScalar3DInterpolation_SetNodes", _wrap_ValueScalar3DInterpolation_SetNodes, METH_VARARGS, NULL},
	 { "ValueScalar3DInterpolation_swigregister", ValueScalar3DInterpolation_swigregister, METH_O, NULL},
	 { "CreateValueVector3D", _wrap_CreateValueVector3D, METH_VARARGS, NULL},
	 { "delete_ValueVector3D", _wrap_delete_ValueVector3D, METH_O, NULL},
	 { "ValueVector3D_Create", _wrap_ValueVector3D_Create, METH_NOARGS, NULL},
	 { "ValueVector3D_GetType", _wrap_ValueVector3D_GetType, METH_O, NULL},
	 { "ValueVector3D_GetName", _wrap_ValueVector3D_GetName, METH_O, NULL},
	 { "ValueVector3D_GetKey", _wrap_ValueVector3D_GetKey, METH_O, NULL},
	 { "ValueVector3D_GetValue", _wrap_ValueVector3D_GetValue, METH_VARARGS, NULL},
	 { "ValueVector3D_SetName", _wrap_ValueVector3D_SetName, METH_VARARGS, NULL},
	 { "ValueVector3D_SetKey", _wrap_ValueVector3D_SetKey, METH_VARARGS, NULL},
	 { "ValueVector3D_SetValue", _wrap_ValueVector3D_SetValue, METH_VARARGS, NULL},
	 { "ValueVector3D_swigregister", ValueVector3D_swigregister, METH_O, NULL},
	 { "CreateValueMatrix3DInterpolation", _wrap_CreateValueMatrix3DInterpolation, METH_VARARGS, NULL},
	 { "delete_ValueMatrix3DInterpolation", _wrap_delete_ValueMatrix3DInterpolation, METH_O, NULL},
	 { "ValueMatrix3DInterpolation_Create", _wrap_ValueMatrix3DInterpolation_Create, METH_NOARGS, NULL},
	 { "ValueMatrix3DInterpolation_GetType", _wrap_ValueMatrix3DInterpolation_GetType, METH_O, NULL},
	 { "ValueMatrix3DInterpolation_GetName", _wrap_ValueMatrix3DInterpolation_GetName, METH_O, NULL},
	 { "ValueMatrix3DInterpolation_GetKey", _wrap_ValueMatrix3DInterpolation_GetKey, METH_O, NULL},
	 { "ValueMatrix3DInterpolation_GetValue", _wrap_ValueMatrix3DInterpolation_GetValue, METH_VARARGS, NULL},
	 { "ValueMatrix3DInterpolation_GetInterpolation", _wrap_ValueMatrix3DInterpolation_GetInterpolation, METH_O, NULL},
	 { "ValueMatrix3DInterpolation_SetName", _wrap_ValueMatrix3DInterpolation_SetName, METH_VARARGS, NULL},
	 { "ValueMatrix3DInterpolation_SetKey", _wrap_ValueMatrix3DInterpolation_SetKey, METH_VARARGS, NULL},
	 { "ValueMatrix3DInterpolation_SetNodes", _wrap_ValueMatrix3DInterpolation_SetNodes, METH_VARARGS, NULL},
	 { "ValueMatrix3DInterpolation_swigregister", ValueMatrix3DInterpolation_swigregister, METH_O, NULL},
	 { "CreateValueString", _wrap_CreateValueString, METH_VARARGS, NULL},
	 { "delete_ValueString", _wrap_delete_ValueString, METH_O, NULL},
	 { "ValueString_Create", _wrap_ValueString_Create, METH_NOARGS, NULL},
	 { "ValueString_GetType", _wrap_ValueString_GetType, METH_O, NULL},
	 { "ValueString_GetName", _wrap_ValueString_GetName, METH_O, NULL},
	 { "ValueString_GetKey", _wrap_ValueString_GetKey, METH_O, NULL},
	 { "ValueString_GetValue", _wrap_ValueString_GetValue, METH_O, NULL},
	 { "ValueString_SetName", _wrap_ValueString_SetName, METH_VARARGS, NULL},
	 { "ValueString_SetKey", _wrap_ValueString_SetKey, METH_VARARGS, NULL},
	 { "ValueString_SetValue", _wrap_ValueString_SetValue, METH_VARARGS, NULL},
	 { "ValueString_swigregister", ValueString_swigregister, METH_O, NULL},
	 { "GetValue", _wrap_GetValue, METH_VARARGS, NULL},
	 { "CreateValueScalar3DCongruent", _wrap_CreateValueScalar3DCongruent, METH_VARARGS, NULL},
	 { "delete_ValueScalar3DCongruent", _wrap_delete_ValueScalar3DCongruent, METH_O, NULL},
	 { "ValueScalar3DCongruent_Create", _wrap_ValueScalar3DCongruent_Create, METH_NOARGS, NULL},
	 { "ValueScalar3DCongruent_GetType", _wrap_ValueScalar3DCongruent_GetType, METH_O, NULL},
	 { "ValueScalar3DCongruent_GetName", _wrap_ValueScalar3DCongruent_GetName, METH_O, NULL},
	 { "ValueScalar3DCongruent_GetKey", _wrap_ValueScalar3DCongruent_GetKey, METH_O, NULL},
	 { "ValueScalar3DCongruent_GetValue", _wrap_ValueScalar3DCongruent_GetValue, METH_VARARGS, NULL},
	 { "ValueScalar3DCongruent_GetMesh", _wrap_ValueScalar3DCongruent_GetMesh, METH_O, NULL},
	 { "ValueScalar3DCongruent_SetName", _wrap_ValueScalar3DCongruent_SetName, METH_VARARGS, NULL},
	 { "ValueScalar3DCongruent_SetKey", _wrap_ValueScalar3DCongruent_SetKey, METH_VARARGS, NULL},
	 { "ValueScalar3DCongruent_SetMesh", _wrap_ValueScalar3DCongruent_SetMesh, METH_VARARGS, NULL},
	 { "ValueScalar3DCongruent_SetElementIndex", _wrap_ValueScalar3DCongruent_SetElementIndex, METH_VARARGS, NULL},
	 { "ValueScalar3DCongruent_swigregister", ValueScalar3DCongruent_swigregister, METH_O, NULL},
	 { "GetValueVector3D", _wrap_GetValueVector3D, METH_VARARGS, NULL},
	 { "CreateValueVector3DCongruent", _wrap_CreateValueVector3DCongruent, METH_VARARGS, NULL},
	 { "delete_ValueVector3DCongruent", _wrap_delete_ValueVector3DCongruent, METH_O, NULL},
	 { "ValueVector3DCongruent_Create", _wrap_ValueVector3DCongruent_Create, METH_NOARGS, NULL},
	 { "ValueVector3DCongruent_GetType", _wrap_ValueVector3DCongruent_GetType, METH_O, NULL},
	 { "ValueVector3DCongruent_GetName", _wrap_ValueVector3DCongruent_GetName, METH_O, NULL},
	 { "ValueVector3DCongruent_GetKey", _wrap_ValueVector3DCongruent_GetKey, METH_O, NULL},
	 { "ValueVector3DCongruent_GetValue", _wrap_ValueVector3DCongruent_GetValue, METH_VARARGS, NULL},
	 { "ValueVector3DCongruent_GetMesh", _wrap_ValueVector3DCongruent_GetMesh, METH_O, NULL},
	 { "ValueVector3DCongruent_SetName", _wrap_ValueVector3DCongruent_SetName, METH_VARARGS, NULL},
	 { "ValueVector3DCongruent_SetKey", _wrap_ValueVector3DCongruent_SetKey, METH_VARARGS, NULL},
	 { "ValueVector3DCongruent_SetMesh", _wrap_ValueVector3DCongruent_SetMesh, METH_VARARGS, NULL},
	 { "ValueVector3DCongruent_SetElementIndex", _wrap_ValueVector3DCongruent_SetElementIndex, METH_VARARGS, NULL},
	 { "ValueVector3DCongruent_swigregister", ValueVector3DCongruent_swigregister, METH_O, NULL},
	 { "GetValueMatrix3D", _wrap_GetValueMatrix3D, METH_VARARGS, NULL},
	 { "CreateValueMatrix3DCongruent", _wrap_CreateValueMatrix3DCongruent, METH_VARARGS, NULL},
	 { "delete_ValueMatrix3DCongruent", _wrap_delete_ValueMatrix3DCongruent, METH_O, NULL},
	 { "ValueMatrix3DCongruent_Create", _wrap_ValueMatrix3DCongruent_Create, METH_NOARGS, NULL},
	 { "ValueMatrix3DCongruent_GetType", _wrap_ValueMatrix3DCongruent_GetType, METH_O, NULL},
	 { "ValueMatrix3DCongruent_GetName", _wrap_ValueMatrix3DCongruent_GetName, METH_O, NULL},
	 { "ValueMatrix3DCongruent_GetKey", _wrap_ValueMatrix3DCongruent_GetKey, METH_O, NULL},
	 { "ValueMatrix3DCongruent_GetValue", _wrap_ValueMatrix3DCongruent_GetValue, METH_VARARGS, NULL},
	 { "ValueMatrix3DCongruent_GetMesh", _wrap_ValueMatrix3DCongruent_GetMesh, METH_O, NULL},
	 { "ValueMatrix3DCongruent_SetName", _wrap_ValueMatrix3DCongruent_SetName, METH_VARARGS, NULL},
	 { "ValueMatrix3DCongruent_SetKey", _wrap_ValueMatrix3DCongruent_SetKey, METH_VARARGS, NULL},
	 { "ValueMatrix3DCongruent_SetMesh", _wrap_ValueMatrix3DCongruent_SetMesh, METH_VARARGS, NULL},
	 { "ValueMatrix3DCongruent_SetElementIndex", _wrap_ValueMatrix3DCongruent_SetElementIndex, METH_VARARGS, NULL},
	 { "ValueMatrix3DCongruent_swigregister", ValueMatrix3DCongruent_swigregister, METH_O, NULL},
	 { "delete_IGauss", _wrap_delete_IGauss, METH_O, NULL},
	 { "IGauss_GetPoints", _wrap_IGauss_GetPoints, METH_O, NULL},
	 { "IGauss_GetWeights", _wrap_IGauss_GetWeights, METH_O, NULL},
	 { "IGauss_GetCounter", _wrap_IGauss_GetCounter, METH_O, NULL},
	 { "IGauss_GetQuadrature", _wrap_IGauss_GetQuadrature, METH_O, NULL},
	 { "IGauss_SetQuadrature", _wrap_IGauss_SetQuadrature, METH_VARARGS, NULL},
	 { "IGauss_swigregister", IGauss_swigregister, METH_O, NULL},
	 { "CreateGaussHexa", _wrap_CreateGaussHexa, METH_NOARGS, NULL},
	 { "delete_GaussHexa", _wrap_delete_GaussHexa, METH_O, NULL},
	 { "GaussHexa_Create", _wrap_GaussHexa_Create, METH_NOARGS, NULL},
	 { "GaussHexa_GetPtr", _wrap_GaussHexa_GetPtr, METH_VARARGS, NULL},
	 { "GaussHexa_GetPoints", _wrap_GaussHexa_GetPoints, METH_O, NULL},
	 { "GaussHexa_GetWeights", _wrap_GaussHexa_GetWeights, METH_O, NULL},
	 { "GaussHexa_GetCounter", _wrap_GaussHexa_GetCounter, METH_O, NULL},
	 { "GaussHexa_GetQuadrature", _wrap_GaussHexa_GetQuadrature, METH_O, NULL},
	 { "GaussHexa_SetQuadrature", _wrap_GaussHexa_SetQuadrature, METH_VARARGS, NULL},
	 { "GaussHexa_swigregister", GaussHexa_swigregister, METH_O, NULL},
	 { "CreateGaussRect", _wrap_CreateGaussRect, METH_NOARGS, NULL},
	 { "delete_GaussRect", _wrap_delete_GaussRect, METH_O, NULL},
	 { "GaussRect_Create", _wrap_GaussRect_Create, METH_NOARGS, NULL},
	 { "GaussRect_GetPtr", _wrap_GaussRect_GetPtr, METH_VARARGS, NULL},
	 { "GaussRect_GetPoints", _wrap_GaussRect_GetPoints, METH_O, NULL},
	 { "GaussRect_GetWeights", _wrap_GaussRect_GetWeights, METH_O, NULL},
	 { "GaussRect_GetCounter", _wrap_GaussRect_GetCounter, METH_O, NULL},
	 { "GaussRect_GetQuadrature", _wrap_GaussRect_GetQuadrature, METH_O, NULL},
	 { "GaussRect_SetQuadrature", _wrap_GaussRect_SetQuadrature, METH_VARARGS, NULL},
	 { "GaussRect_swigregister", GaussRect_swigregister, METH_O, NULL},
	 { "CreateGaussLine", _wrap_CreateGaussLine, METH_NOARGS, NULL},
	 { "delete_GaussLine", _wrap_delete_GaussLine, METH_O, NULL},
	 { "GaussLine_Create", _wrap_GaussLine_Create, METH_NOARGS, NULL},
	 { "GaussLine_GetPtr", _wrap_GaussLine_GetPtr, METH_VARARGS, NULL},
	 { "GaussLine_GetPoints", _wrap_GaussLine_GetPoints, METH_O, NULL},
	 { "GaussLine_GetWeights", _wrap_GaussLine_GetWeights, METH_O, NULL},
	 { "GaussLine_GetCounter", _wrap_GaussLine_GetCounter, METH_O, NULL},
	 { "GaussLine_GetQuadrature", _wrap_GaussLine_GetQuadrature, METH_O, NULL},
	 { "GaussLine_SetQuadrature", _wrap_GaussLine_SetQuadrature, METH_VARARGS, NULL},
	 { "GaussLine_swigregister", GaussLine_swigregister, METH_O, NULL},
	 { "delete_IInterpolation", _wrap_delete_IInterpolation, METH_O, NULL},
	 { "IInterpolation_GetType", _wrap_IInterpolation_GetType, METH_O, NULL},
	 { "IInterpolation_GetValue", _wrap_IInterpolation_GetValue, METH_VARARGS, NULL},
	 { "IInterpolation_SetNodes", _wrap_IInterpolation_SetNodes, METH_VARARGS, NULL},
	 { "IInterpolation_SetBasis", _wrap_IInterpolation_SetBasis, METH_VARARGS, NULL},
	 { "IInterpolation_swigregister", IInterpolation_swigregister, METH_O, NULL},
	 { "CreateInterpolationFixed", _wrap_CreateInterpolationFixed, METH_NOARGS, NULL},
	 { "InterpolationFixed_Create", _wrap_InterpolationFixed_Create, METH_NOARGS, NULL},
	 { "InterpolationFixed_GetPtr", _wrap_InterpolationFixed_GetPtr, METH_VARARGS, NULL},
	 { "delete_InterpolationFixed", _wrap_delete_InterpolationFixed, METH_O, NULL},
	 { "InterpolationFixed_GetType", _wrap_InterpolationFixed_GetType, METH_O, NULL},
	 { "InterpolationFixed_GetValue", _wrap_InterpolationFixed_GetValue, METH_VARARGS, NULL},
	 { "InterpolationFixed_SetNodes", _wrap_InterpolationFixed_SetNodes, METH_VARARGS, NULL},
	 { "InterpolationFixed_SetBasis", _wrap_InterpolationFixed_SetBasis, METH_VARARGS, NULL},
	 { "InterpolationFixed_SetNodeIndex", _wrap_InterpolationFixed_SetNodeIndex, METH_VARARGS, NULL},
	 { "InterpolationFixed_swigregister", InterpolationFixed_swigregister, METH_O, NULL},
	 { "CreateInterpolationIDW", _wrap_CreateInterpolationIDW, METH_NOARGS, NULL},
	 { "delete_InterpolationIDW", _wrap_delete_InterpolationIDW, METH_O, NULL},
	 { "InterpolationIDW_Create", _wrap_InterpolationIDW_Create, METH_NOARGS, NULL},
	 { "InterpolationIDW_GetPtr", _wrap_InterpolationIDW_GetPtr, METH_VARARGS, NULL},
	 { "InterpolationIDW_GetType", _wrap_InterpolationIDW_GetType, METH_O, NULL},
	 { "InterpolationIDW_GetValue", _wrap_InterpolationIDW_GetValue, METH_VARARGS, NULL},
	 { "InterpolationIDW_SetNodes", _wrap_InterpolationIDW_SetNodes, METH_VARARGS, NULL},
	 { "InterpolationIDW_SetBasis", _wrap_InterpolationIDW_SetBasis, METH_VARARGS, NULL},
	 { "InterpolationIDW_SetShape", _wrap_InterpolationIDW_SetShape, METH_VARARGS, NULL},
	 { "InterpolationIDW_SetNumberNodes", _wrap_InterpolationIDW_SetNumberNodes, METH_VARARGS, NULL},
	 { "InterpolationIDW_swigregister", InterpolationIDW_swigregister, METH_O, NULL},
	 { "CreateInterpolationNN", _wrap_CreateInterpolationNN, METH_NOARGS, NULL},
	 { "InterpolationNN_Create", _wrap_InterpolationNN_Create, METH_NOARGS, NULL},
	 { "InterpolationNN_GetPtr", _wrap_InterpolationNN_GetPtr, METH_VARARGS, NULL},
	 { "delete_InterpolationNN", _wrap_delete_InterpolationNN, METH_O, NULL},
	 { "InterpolationNN_GetType", _wrap_InterpolationNN_GetType, METH_O, NULL},
	 { "InterpolationNN_GetValue", _wrap_InterpolationNN_GetValue, METH_VARARGS, NULL},
	 { "InterpolationNN_SetNodes", _wrap_InterpolationNN_SetNodes, METH_VARARGS, NULL},
	 { "InterpolationNN_SetBasis", _wrap_InterpolationNN_SetBasis, METH_VARARGS, NULL},
	 { "InterpolationNN_swigregister", InterpolationNN_swigregister, METH_O, NULL},
	 { "CreateInterpolationRBF", _wrap_CreateInterpolationRBF, METH_NOARGS, NULL},
	 { "delete_InterpolationRBF", _wrap_delete_InterpolationRBF, METH_O, NULL},
	 { "InterpolationRBF_Create", _wrap_InterpolationRBF_Create, METH_NOARGS, NULL},
	 { "InterpolationRBF_GetPtr", _wrap_InterpolationRBF_GetPtr, METH_VARARGS, NULL},
	 { "InterpolationRBF_GetType", _wrap_InterpolationRBF_GetType, METH_O, NULL},
	 { "InterpolationRBF_GetValue", _wrap_InterpolationRBF_GetValue, METH_VARARGS, NULL},
	 { "InterpolationRBF_SetNodes", _wrap_InterpolationRBF_SetNodes, METH_VARARGS, NULL},
	 { "InterpolationRBF_SetBasis", _wrap_InterpolationRBF_SetBasis, METH_VARARGS, NULL},
	 { "InterpolationRBF_SetShape", _wrap_InterpolationRBF_SetShape, METH_VARARGS, NULL},
	 { "InterpolationRBF_SetFunction", _wrap_InterpolationRBF_SetFunction, METH_VARARGS, NULL},
	 { "InterpolationRBF_swigregister", InterpolationRBF_swigregister, METH_O, NULL},
	 { "delete_IBase", _wrap_delete_IBase, METH_O, NULL},
	 { "IBase_GetTag", _wrap_IBase_GetTag, METH_O, NULL},
	 { "IBase_GetType", _wrap_IBase_GetType, METH_O, NULL},
	 { "IBase_GetClass", _wrap_IBase_GetClass, METH_O, NULL},
	 { "IBase_GetGroup", _wrap_IBase_GetGroup, METH_O, NULL},
	 { "IBase_GetDescription", _wrap_IBase_GetDescription, METH_O, NULL},
	 { "IBase_GetName", _wrap_IBase_GetName, METH_O, NULL},
	 { "IBase_SetClass", _wrap_IBase_SetClass, METH_VARARGS, NULL},
	 { "IBase_SetGroup", _wrap_IBase_SetGroup, METH_VARARGS, NULL},
	 { "IBase_SetDescription", _wrap_IBase_SetDescription, METH_VARARGS, NULL},
	 { "IBase_SetName", _wrap_IBase_SetName, METH_VARARGS, NULL},
	 { "IBase_SetTag", _wrap_IBase_SetTag, METH_VARARGS, NULL},
	 { "IBase_swigregister", IBase_swigregister, METH_O, NULL},
	 { "delete_IMaterial", _wrap_delete_IMaterial, METH_O, NULL},
	 { "IMaterial_GetDensity", _wrap_IMaterial_GetDensity, METH_VARARGS, NULL},
	 { "IMaterial_GetSpecificHeat", _wrap_IMaterial_GetSpecificHeat, METH_VARARGS, NULL},
	 { "IMaterial_GetThermalConductivity", _wrap_IMaterial_GetThermalConductivity, METH_VARARGS, NULL},
	 { "IMaterial_SetDensity", _wrap_IMaterial_SetDensity, METH_VARARGS, NULL},
	 { "IMaterial_SetSpecificHeat", _wrap_IMaterial_SetSpecificHeat, METH_VARARGS, NULL},
	 { "IMaterial_SetThermalConductivity", _wrap_IMaterial_SetThermalConductivity, METH_VARARGS, NULL},
	 { "IMaterial_K", _wrap_IMaterial_K, METH_VARARGS, NULL},
	 { "IMaterial_swigregister", IMaterial_swigregister, METH_O, NULL},
	 { "delete_IMaterialFluid", _wrap_delete_IMaterialFluid, METH_O, NULL},
	 { "IMaterialFluid_GetDynamicViscosity", _wrap_IMaterialFluid_GetDynamicViscosity, METH_VARARGS, NULL},
	 { "IMaterialFluid_SetDynamicViscosity", _wrap_IMaterialFluid_SetDynamicViscosity, METH_VARARGS, NULL},
	 { "IMaterialFluid_D", _wrap_IMaterialFluid_D, METH_VARARGS, NULL},
	 { "IMaterialFluid_swigregister", IMaterialFluid_swigregister, METH_O, NULL},
	 { "delete_IMaterialSolid", _wrap_delete_IMaterialSolid, METH_O, NULL},
	 { "IMaterialSolid_GetPoissonRatio", _wrap_IMaterialSolid_GetPoissonRatio, METH_VARARGS, NULL},
	 { "IMaterialSolid_GetThermalExpansion", _wrap_IMaterialSolid_GetThermalExpansion, METH_VARARGS, NULL},
	 { "IMaterialSolid_GetElasticModulus", _wrap_IMaterialSolid_GetElasticModulus, METH_VARARGS, NULL},
	 { "IMaterialSolid_GetTensileStrength", _wrap_IMaterialSolid_GetTensileStrength, METH_VARARGS, NULL},
	 { "IMaterialSolid_GetYieldStrength", _wrap_IMaterialSolid_GetYieldStrength, METH_VARARGS, NULL},
	 { "IMaterialSolid_GetShearStrength", _wrap_IMaterialSolid_GetShearStrength, METH_VARARGS, NULL},
	 { "IMaterialSolid_GetLimitingSurfacePressure", _wrap_IMaterialSolid_GetLimitingSurfacePressure, METH_VARARGS, NULL},
	 { "IMaterialSolid_SetPoissonRatio", _wrap_IMaterialSolid_SetPoissonRatio, METH_VARARGS, NULL},
	 { "IMaterialSolid_SetThermalExpansion", _wrap_IMaterialSolid_SetThermalExpansion, METH_VARARGS, NULL},
	 { "IMaterialSolid_SetElasticModulus", _wrap_IMaterialSolid_SetElasticModulus, METH_VARARGS, NULL},
	 { "IMaterialSolid_SetTensileStrength", _wrap_IMaterialSolid_SetTensileStrength, METH_VARARGS, NULL},
	 { "IMaterialSolid_SetYieldStrength", _wrap_IMaterialSolid_SetYieldStrength, METH_VARARGS, NULL},
	 { "IMaterialSolid_SetShearStrength", _wrap_IMaterialSolid_SetShearStrength, METH_VARARGS, NULL},
	 { "IMaterialSolid_SetLimitingSurfacePressure", _wrap_IMaterialSolid_SetLimitingSurfacePressure, METH_VARARGS, NULL},
	 { "IMaterialSolid_A", _wrap_IMaterialSolid_A, METH_VARARGS, NULL},
	 { "IMaterialSolid_D", _wrap_IMaterialSolid_D, METH_VARARGS, NULL},
	 { "IMaterialSolid_swigregister", IMaterialSolid_swigregister, METH_O, NULL},
	 { "CreateMaterialFluid", _wrap_CreateMaterialFluid, METH_O, NULL},
	 { "delete_MaterialFluid", _wrap_delete_MaterialFluid, METH_O, NULL},
	 { "MaterialFluid_Create", _wrap_MaterialFluid_Create, METH_NOARGS, NULL},
	 { "MaterialFluid_GetPtr", _wrap_MaterialFluid_GetPtr, METH_VARARGS, NULL},
	 { "MaterialFluid_GetTag", _wrap_MaterialFluid_GetTag, METH_O, NULL},
	 { "MaterialFluid_GetType", _wrap_MaterialFluid_GetType, METH_O, NULL},
	 { "MaterialFluid_GetClass", _wrap_MaterialFluid_GetClass, METH_O, NULL},
	 { "MaterialFluid_GetGroup", _wrap_MaterialFluid_GetGroup, METH_O, NULL},
	 { "MaterialFluid_GetDescription", _wrap_MaterialFluid_GetDescription, METH_O, NULL},
	 { "MaterialFluid_GetName", _wrap_MaterialFluid_GetName, METH_O, NULL},
	 { "MaterialFluid_SetClass", _wrap_MaterialFluid_SetClass, METH_VARARGS, NULL},
	 { "MaterialFluid_SetGroup", _wrap_MaterialFluid_SetGroup, METH_VARARGS, NULL},
	 { "MaterialFluid_SetDescription", _wrap_MaterialFluid_SetDescription, METH_VARARGS, NULL},
	 { "MaterialFluid_SetName", _wrap_MaterialFluid_SetName, METH_VARARGS, NULL},
	 { "MaterialFluid_SetTag", _wrap_MaterialFluid_SetTag, METH_VARARGS, NULL},
	 { "MaterialFluid_GetDensity", _wrap_MaterialFluid_GetDensity, METH_VARARGS, NULL},
	 { "MaterialFluid_GetSpecificHeat", _wrap_MaterialFluid_GetSpecificHeat, METH_VARARGS, NULL},
	 { "MaterialFluid_GetThermalConductivity", _wrap_MaterialFluid_GetThermalConductivity, METH_VARARGS, NULL},
	 { "MaterialFluid_SetDensity", _wrap_MaterialFluid_SetDensity, METH_VARARGS, NULL},
	 { "MaterialFluid_SetSpecificHeat", _wrap_MaterialFluid_SetSpecificHeat, METH_VARARGS, NULL},
	 { "MaterialFluid_SetThermalConductivity", _wrap_MaterialFluid_SetThermalConductivity, METH_VARARGS, NULL},
	 { "MaterialFluid_GetDynamicViscosity", _wrap_MaterialFluid_GetDynamicViscosity, METH_VARARGS, NULL},
	 { "MaterialFluid_SetDynamicViscosity", _wrap_MaterialFluid_SetDynamicViscosity, METH_VARARGS, NULL},
	 { "MaterialFluid_D", _wrap_MaterialFluid_D, METH_VARARGS, NULL},
	 { "MaterialFluid_K", _wrap_MaterialFluid_K, METH_VARARGS, NULL},
	 { "MaterialFluid_swigregister", MaterialFluid_swigregister, METH_O, NULL},
	 { "CreateMaterialSolid", _wrap_CreateMaterialSolid, METH_O, NULL},
	 { "delete_MaterialSolid", _wrap_delete_MaterialSolid, METH_O, NULL},
	 { "MaterialSolid_Create", _wrap_MaterialSolid_Create, METH_NOARGS, NULL},
	 { "MaterialSolid_GetPtr", _wrap_MaterialSolid_GetPtr, METH_VARARGS, NULL},
	 { "MaterialSolid_GetTag", _wrap_MaterialSolid_GetTag, METH_O, NULL},
	 { "MaterialSolid_GetType", _wrap_MaterialSolid_GetType, METH_O, NULL},
	 { "MaterialSolid_GetClass", _wrap_MaterialSolid_GetClass, METH_O, NULL},
	 { "MaterialSolid_GetGroup", _wrap_MaterialSolid_GetGroup, METH_O, NULL},
	 { "MaterialSolid_GetDescription", _wrap_MaterialSolid_GetDescription, METH_O, NULL},
	 { "MaterialSolid_GetName", _wrap_MaterialSolid_GetName, METH_O, NULL},
	 { "MaterialSolid_SetClass", _wrap_MaterialSolid_SetClass, METH_VARARGS, NULL},
	 { "MaterialSolid_SetGroup", _wrap_MaterialSolid_SetGroup, METH_VARARGS, NULL},
	 { "MaterialSolid_SetDescription", _wrap_MaterialSolid_SetDescription, METH_VARARGS, NULL},
	 { "MaterialSolid_SetName", _wrap_MaterialSolid_SetName, METH_VARARGS, NULL},
	 { "MaterialSolid_SetTag", _wrap_MaterialSolid_SetTag, METH_VARARGS, NULL},
	 { "MaterialSolid_GetDensity", _wrap_MaterialSolid_GetDensity, METH_VARARGS, NULL},
	 { "MaterialSolid_GetSpecificHeat", _wrap_MaterialSolid_GetSpecificHeat, METH_VARARGS, NULL},
	 { "MaterialSolid_GetThermalConductivity", _wrap_MaterialSolid_GetThermalConductivity, METH_VARARGS, NULL},
	 { "MaterialSolid_GetThermalExpansion", _wrap_MaterialSolid_GetThermalExpansion, METH_VARARGS, NULL},
	 { "MaterialSolid_SetDensity", _wrap_MaterialSolid_SetDensity, METH_VARARGS, NULL},
	 { "MaterialSolid_SetSpecificHeat", _wrap_MaterialSolid_SetSpecificHeat, METH_VARARGS, NULL},
	 { "MaterialSolid_SetThermalConductivity", _wrap_MaterialSolid_SetThermalConductivity, METH_VARARGS, NULL},
	 { "MaterialSolid_GetPoissonRatio", _wrap_MaterialSolid_GetPoissonRatio, METH_VARARGS, NULL},
	 { "MaterialSolid_GetElasticModulus", _wrap_MaterialSolid_GetElasticModulus, METH_VARARGS, NULL},
	 { "MaterialSolid_GetTensileStrength", _wrap_MaterialSolid_GetTensileStrength, METH_VARARGS, NULL},
	 { "MaterialSolid_GetYieldStrength", _wrap_MaterialSolid_GetYieldStrength, METH_VARARGS, NULL},
	 { "MaterialSolid_GetShearStrength", _wrap_MaterialSolid_GetShearStrength, METH_VARARGS, NULL},
	 { "MaterialSolid_GetLimitingSurfacePressure", _wrap_MaterialSolid_GetLimitingSurfacePressure, METH_VARARGS, NULL},
	 { "MaterialSolid_SetPoissonRatio", _wrap_MaterialSolid_SetPoissonRatio, METH_VARARGS, NULL},
	 { "MaterialSolid_SetThermalExpansion", _wrap_MaterialSolid_SetThermalExpansion, METH_VARARGS, NULL},
	 { "MaterialSolid_SetElasticModulus", _wrap_MaterialSolid_SetElasticModulus, METH_VARARGS, NULL},
	 { "MaterialSolid_SetTensileStrength", _wrap_MaterialSolid_SetTensileStrength, METH_VARARGS, NULL},
	 { "MaterialSolid_SetYieldStrength", _wrap_MaterialSolid_SetYieldStrength, METH_VARARGS, NULL},
	 { "MaterialSolid_SetShearStrength", _wrap_MaterialSolid_SetShearStrength, METH_VARARGS, NULL},
	 { "MaterialSolid_SetLimitingSurfacePressure", _wrap_MaterialSolid_SetLimitingSurfacePressure, METH_VARARGS, NULL},
	 { "MaterialSolid_A", _wrap_MaterialSolid_A, METH_VARARGS, NULL},
	 { "MaterialSolid_D", _wrap_MaterialSolid_D, METH_VARARGS, NULL},
	 { "MaterialSolid_K", _wrap_MaterialSolid_K, METH_VARARGS, NULL},
	 { "MaterialSolid_swigregister", MaterialSolid_swigregister, METH_O, NULL},
	 { "ListNodes", _wrap_ListNodes, METH_O, NULL},
	 { "ListElements", _wrap_ListElements, METH_O, NULL},
	 { "ListVolumes", _wrap_ListVolumes, METH_O, NULL},
	 { "ListDofMeshIndices", _wrap_ListDofMeshIndices, METH_O, NULL},
	 { "ListNodeMeshIndices", _wrap_ListNodeMeshIndices, METH_O, NULL},
	 { "ListDirichletMeshIndices", _wrap_ListDirichletMeshIndices, METH_O, NULL},
	 { "vecNodes_iterator", _wrap_vecNodes_iterator, METH_O, NULL},
	 { "vecNodes___nonzero__", _wrap_vecNodes___nonzero__, METH_O, NULL},
	 { "vecNodes___bool__", _wrap_vecNodes___bool__, METH_O, NULL},
	 { "vecNodes___len__", _wrap_vecNodes___len__, METH_O, NULL},
	 { "vecNodes___getslice__", _wrap_vecNodes___getslice__, METH_VARARGS, NULL},
	 { "vecNodes___setslice__", _wrap_vecNodes___setslice__, METH_VARARGS, NULL},
	 { "vecNodes___delslice__", _wrap_vecNodes___delslice__, METH_VARARGS, NULL},
	 { "vecNodes___delitem__", _wrap_vecNodes___delitem__, METH_VARARGS, NULL},
	 { "vecNodes___getitem__", _wrap_vecNodes___getitem__, METH_VARARGS, NULL},
	 { "vecNodes___setitem__", _wrap_vecNodes___setitem__, METH_VARARGS, NULL},
	 { "vecNodes_pop", _wrap_vecNodes_pop, METH_O, NULL},
	 { "vecNodes_append", _wrap_vecNodes_append, METH_VARARGS, NULL},
	 { "vecNodes_empty", _wrap_vecNodes_empty, METH_O, NULL},
	 { "vecNodes_size", _wrap_vecNodes_size, METH_O, NULL},
	 { "vecNodes_swap", _wrap_vecNodes_swap, METH_VARARGS, NULL},
	 { "vecNodes_begin", _wrap_vecNodes_begin, METH_O, NULL},
	 { "vecNodes_end", _wrap_vecNodes_end, METH_O, NULL},
	 { "vecNodes_rbegin", _wrap_vecNodes_rbegin, METH_O, NULL},
	 { "vecNodes_rend", _wrap_vecNodes_rend, METH_O, NULL},
	 { "vecNodes_clear", _wrap_vecNodes_clear, METH_O, NULL},
	 { "vecNodes_get_allocator", _wrap_vecNodes_get_allocator, METH_O, NULL},
	 { "vecNodes_pop_back", _wrap_vecNodes_pop_back, METH_O, NULL},
	 { "vecNodes_erase", _wrap_vecNodes_erase, METH_VARARGS, NULL},
	 { "new_vecNodes", _wrap_new_vecNodes, METH_VARARGS, NULL},
	 { "vecNodes_push_back", _wrap_vecNodes_push_back, METH_VARARGS, NULL},
	 { "vecNodes_front", _wrap_vecNodes_front, METH_O, NULL},
	 { "vecNodes_back", _wrap_vecNodes_back, METH_O, NULL},
	 { "vecNodes_assign", _wrap_vecNodes_assign, METH_VARARGS, NULL},
	 { "vecNodes_resize", _wrap_vecNodes_resize, METH_VARARGS, NULL},
	 { "vecNodes_insert", _wrap_vecNodes_insert, METH_VARARGS, NULL},
	 { "vecNodes_reserve", _wrap_vecNodes_reserve, METH_VARARGS, NULL},
	 { "vecNodes_capacity", _wrap_vecNodes_capacity, METH_O, NULL},
	 { "vecNodes___str__", _wrap_vecNodes___str__, METH_O, NULL},
	 { "delete_vecNodes", _wrap_delete_vecNodes, METH_O, NULL},
	 { "vecNodes_swigregister", vecNodes_swigregister, METH_O, NULL},
	 { "vecNodes_swiginit", vecNodes_swiginit, METH_VARARGS, NULL},
	 { "delete_INode", _wrap_delete_INode, METH_O, NULL},
	 { "INode_GetPoint", _wrap_INode_GetPoint, METH_O, NULL},
	 { "INode_GetValue", _wrap_INode_GetValue, METH_VARARGS, NULL},
	 { "INode_GetTag", _wrap_INode_GetTag, METH_O, NULL},
	 { "INode_SetPoint", _wrap_INode_SetPoint, METH_VARARGS, NULL},
	 { "INode_SetValue", _wrap_INode_SetValue, METH_VARARGS, NULL},
	 { "INode_SetTag", _wrap_INode_SetTag, METH_VARARGS, NULL},
	 { "INode_SetNodeIndex", _wrap_INode_SetNodeIndex, METH_VARARGS, NULL},
	 { "INode_SetNumberDof", _wrap_INode_SetNumberDof, METH_VARARGS, NULL},
	 { "INode_GetNodeIndex", _wrap_INode_GetNodeIndex, METH_O, NULL},
	 { "INode_GetNumberDof", _wrap_INode_GetNumberDof, METH_O, NULL},
	 { "INode_GetElements", _wrap_INode_GetElements, METH_O, NULL},
	 { "INode_AddElement", _wrap_INode_AddElement, METH_VARARGS, NULL},
	 { "INode_RemoveElement", _wrap_INode_RemoveElement, METH_VARARGS, NULL},
	 { "INode_ClearElements", _wrap_INode_ClearElements, METH_O, NULL},
	 { "INode_swigregister", INode_swigregister, METH_O, NULL},
	 { "CreateNode", _wrap_CreateNode, METH_VARARGS, NULL},
	 { "CreateNodes", _wrap_CreateNodes, METH_VARARGS, NULL},
	 { "delete_Node", _wrap_delete_Node, METH_O, NULL},
	 { "Node_Create", _wrap_Node_Create, METH_NOARGS, NULL},
	 { "Node_GetPtr", _wrap_Node_GetPtr, METH_VARARGS, NULL},
	 { "Node_GetPoint", _wrap_Node_GetPoint, METH_O, NULL},
	 { "Node_GetValue", _wrap_Node_GetValue, METH_VARARGS, NULL},
	 { "Node_GetTag", _wrap_Node_GetTag, METH_O, NULL},
	 { "Node_SetPoint", _wrap_Node_SetPoint, METH_VARARGS, NULL},
	 { "Node_SetValue", _wrap_Node_SetValue, METH_VARARGS, NULL},
	 { "Node_SetTag", _wrap_Node_SetTag, METH_VARARGS, NULL},
	 { "Node_SetNodeIndex", _wrap_Node_SetNodeIndex, METH_VARARGS, NULL},
	 { "Node_SetNumberDof", _wrap_Node_SetNumberDof, METH_VARARGS, NULL},
	 { "Node_GetNodeIndex", _wrap_Node_GetNodeIndex, METH_O, NULL},
	 { "Node_GetNumberDof", _wrap_Node_GetNumberDof, METH_O, NULL},
	 { "Node_GetElements", _wrap_Node_GetElements, METH_O, NULL},
	 { "Node_AddElement", _wrap_Node_AddElement, METH_VARARGS, NULL},
	 { "Node_RemoveElement", _wrap_Node_RemoveElement, METH_VARARGS, NULL},
	 { "Node_ClearElements", _wrap_Node_ClearElements, METH_O, NULL},
	 { "Node_swigregister", Node_swigregister, METH_O, NULL},
	 { "vecElements_iterator", _wrap_vecElements_iterator, METH_O, NULL},
	 { "vecElements___nonzero__", _wrap_vecElements___nonzero__, METH_O, NULL},
	 { "vecElements___bool__", _wrap_vecElements___bool__, METH_O, NULL},
	 { "vecElements___len__", _wrap_vecElements___len__, METH_O, NULL},
	 { "vecElements___getslice__", _wrap_vecElements___getslice__, METH_VARARGS, NULL},
	 { "vecElements___setslice__", _wrap_vecElements___setslice__, METH_VARARGS, NULL},
	 { "vecElements___delslice__", _wrap_vecElements___delslice__, METH_VARARGS, NULL},
	 { "vecElements___delitem__", _wrap_vecElements___delitem__, METH_VARARGS, NULL},
	 { "vecElements___getitem__", _wrap_vecElements___getitem__, METH_VARARGS, NULL},
	 { "vecElements___setitem__", _wrap_vecElements___setitem__, METH_VARARGS, NULL},
	 { "vecElements_pop", _wrap_vecElements_pop, METH_O, NULL},
	 { "vecElements_append", _wrap_vecElements_append, METH_VARARGS, NULL},
	 { "vecElements_empty", _wrap_vecElements_empty, METH_O, NULL},
	 { "vecElements_size", _wrap_vecElements_size, METH_O, NULL},
	 { "vecElements_swap", _wrap_vecElements_swap, METH_VARARGS, NULL},
	 { "vecElements_begin", _wrap_vecElements_begin, METH_O, NULL},
	 { "vecElements_end", _wrap_vecElements_end, METH_O, NULL},
	 { "vecElements_rbegin", _wrap_vecElements_rbegin, METH_O, NULL},
	 { "vecElements_rend", _wrap_vecElements_rend, METH_O, NULL},
	 { "vecElements_clear", _wrap_vecElements_clear, METH_O, NULL},
	 { "vecElements_get_allocator", _wrap_vecElements_get_allocator, METH_O, NULL},
	 { "vecElements_pop_back", _wrap_vecElements_pop_back, METH_O, NULL},
	 { "vecElements_erase", _wrap_vecElements_erase, METH_VARARGS, NULL},
	 { "new_vecElements", _wrap_new_vecElements, METH_VARARGS, NULL},
	 { "vecElements_push_back", _wrap_vecElements_push_back, METH_VARARGS, NULL},
	 { "vecElements_front", _wrap_vecElements_front, METH_O, NULL},
	 { "vecElements_back", _wrap_vecElements_back, METH_O, NULL},
	 { "vecElements_assign", _wrap_vecElements_assign, METH_VARARGS, NULL},
	 { "vecElements_resize", _wrap_vecElements_resize, METH_VARARGS, NULL},
	 { "vecElements_insert", _wrap_vecElements_insert, METH_VARARGS, NULL},
	 { "vecElements_reserve", _wrap_vecElements_reserve, METH_VARARGS, NULL},
	 { "vecElements_capacity", _wrap_vecElements_capacity, METH_O, NULL},
	 { "vecElements___str__", _wrap_vecElements___str__, METH_O, NULL},
	 { "delete_vecElements", _wrap_delete_vecElements, METH_O, NULL},
	 { "vecElements_swigregister", vecElements_swigregister, METH_O, NULL},
	 { "vecElements_swiginit", vecElements_swiginit, METH_VARARGS, NULL},
	 { "IntegralAreaHelper_dim1_set", _wrap_IntegralAreaHelper_dim1_set, METH_VARARGS, NULL},
	 { "IntegralAreaHelper_dim1_get", _wrap_IntegralAreaHelper_dim1_get, METH_O, NULL},
	 { "IntegralAreaHelper_dim2_set", _wrap_IntegralAreaHelper_dim2_set, METH_VARARGS, NULL},
	 { "IntegralAreaHelper_dim2_get", _wrap_IntegralAreaHelper_dim2_get, METH_O, NULL},
	 { "IntegralAreaHelper_dim3_set", _wrap_IntegralAreaHelper_dim3_set, METH_VARARGS, NULL},
	 { "IntegralAreaHelper_dim3_get", _wrap_IntegralAreaHelper_dim3_get, METH_O, NULL},
	 { "IntegralAreaHelper_coord3_set", _wrap_IntegralAreaHelper_coord3_set, METH_VARARGS, NULL},
	 { "IntegralAreaHelper_coord3_get", _wrap_IntegralAreaHelper_coord3_get, METH_O, NULL},
	 { "new_IntegralAreaHelper", _wrap_new_IntegralAreaHelper, METH_NOARGS, NULL},
	 { "delete_IntegralAreaHelper", _wrap_delete_IntegralAreaHelper, METH_O, NULL},
	 { "IntegralAreaHelper_swigregister", IntegralAreaHelper_swigregister, METH_O, NULL},
	 { "IntegralAreaHelper_swiginit", IntegralAreaHelper_swiginit, METH_VARARGS, NULL},
	 { "IntegralEdgeHelper_dim1_set", _wrap_IntegralEdgeHelper_dim1_set, METH_VARARGS, NULL},
	 { "IntegralEdgeHelper_dim1_get", _wrap_IntegralEdgeHelper_dim1_get, METH_O, NULL},
	 { "IntegralEdgeHelper_dim2_set", _wrap_IntegralEdgeHelper_dim2_set, METH_VARARGS, NULL},
	 { "IntegralEdgeHelper_dim2_get", _wrap_IntegralEdgeHelper_dim2_get, METH_O, NULL},
	 { "IntegralEdgeHelper_dim3_set", _wrap_IntegralEdgeHelper_dim3_set, METH_VARARGS, NULL},
	 { "IntegralEdgeHelper_dim3_get", _wrap_IntegralEdgeHelper_dim3_get, METH_O, NULL},
	 { "IntegralEdgeHelper_coord2_set", _wrap_IntegralEdgeHelper_coord2_set, METH_VARARGS, NULL},
	 { "IntegralEdgeHelper_coord2_get", _wrap_IntegralEdgeHelper_coord2_get, METH_O, NULL},
	 { "IntegralEdgeHelper_coord3_set", _wrap_IntegralEdgeHelper_coord3_set, METH_VARARGS, NULL},
	 { "IntegralEdgeHelper_coord3_get", _wrap_IntegralEdgeHelper_coord3_get, METH_O, NULL},
	 { "new_IntegralEdgeHelper", _wrap_new_IntegralEdgeHelper, METH_NOARGS, NULL},
	 { "delete_IntegralEdgeHelper", _wrap_delete_IntegralEdgeHelper, METH_O, NULL},
	 { "IntegralEdgeHelper_swigregister", IntegralEdgeHelper_swigregister, METH_O, NULL},
	 { "IntegralEdgeHelper_swiginit", IntegralEdgeHelper_swiginit, METH_VARARGS, NULL},
	 { "delete_IElement", _wrap_delete_IElement, METH_O, NULL},
	 { "IElement_u", _wrap_IElement_u, METH_VARARGS, NULL},
	 { "IElement_du", _wrap_IElement_du, METH_VARARGS, NULL},
	 { "IElement_J", _wrap_IElement_J, METH_VARARGS, NULL},
	 { "IElement_InvJ", _wrap_IElement_InvJ, METH_VARARGS, NULL},
	 { "IElement_N", _wrap_IElement_N, METH_VARARGS, NULL},
	 { "IElement_dN", _wrap_IElement_dN, METH_VARARGS, NULL},
	 { "IElement_DelA", _wrap_IElement_DelA, METH_VARARGS, NULL},
	 { "IElement_DelL", _wrap_IElement_DelL, METH_VARARGS, NULL},
	 { "IElement_DetJ", _wrap_IElement_DetJ, METH_VARARGS, NULL},
	 { "IElement_Volume", _wrap_IElement_Volume, METH_O, NULL},
	 { "IElement_Area", _wrap_IElement_Area, METH_VARARGS, NULL},
	 { "IElement_Length", _wrap_IElement_Length, METH_VARARGS, NULL},
	 { "IElement_CalculateHeight", _wrap_IElement_CalculateHeight, METH_O, NULL},
	 { "IElement_LocalCoordinates", _wrap_IElement_LocalCoordinates, METH_VARARGS, NULL},
	 { "IElement_GlobalCoordinates", _wrap_IElement_GlobalCoordinates, METH_VARARGS, NULL},
	 { "IElement_GlobalDerivatives", _wrap_IElement_GlobalDerivatives, METH_VARARGS, NULL},
	 { "IElement_GetNodeFace", _wrap_IElement_GetNodeFace, METH_VARARGS, NULL},
	 { "IElement_GetNodeEdge", _wrap_IElement_GetNodeEdge, METH_VARARGS, NULL},
	 { "IElement_GetNode", _wrap_IElement_GetNode, METH_VARARGS, NULL},
	 { "IElement_GetNodes", _wrap_IElement_GetNodes, METH_O, NULL},
	 { "IElement_GetOrder", _wrap_IElement_GetOrder, METH_O, NULL},
	 { "IElement_GetParametric", _wrap_IElement_GetParametric, METH_O, NULL},
	 { "IElement_GetType", _wrap_IElement_GetType, METH_O, NULL},
	 { "IElement_GetNodeIndex", _wrap_IElement_GetNodeIndex, METH_VARARGS, NULL},
	 { "IElement_GetNumberNodesFace", _wrap_IElement_GetNumberNodesFace, METH_VARARGS, NULL},
	 { "IElement_GetNumberNodesEdge", _wrap_IElement_GetNumberNodesEdge, METH_VARARGS, NULL},
	 { "IElement_GetNumberNodes", _wrap_IElement_GetNumberNodes, METH_O, NULL},
	 { "IElement_GetNumberFaces", _wrap_IElement_GetNumberFaces, METH_O, NULL},
	 { "IElement_GetNumberEdges", _wrap_IElement_GetNumberEdges, METH_O, NULL},
	 { "IElement_GetDimension", _wrap_IElement_GetDimension, METH_O, NULL},
	 { "IElement_GetCenter", _wrap_IElement_GetCenter, METH_O, NULL},
	 { "IElement_GetTag", _wrap_IElement_GetTag, METH_O, NULL},
	 { "IElement_GetMaterial", _wrap_IElement_GetMaterial, METH_O, NULL},
	 { "IElement_GetElementIndex", _wrap_IElement_GetElementIndex, METH_O, NULL},
	 { "IElement_GetHeight", _wrap_IElement_GetHeight, METH_O, NULL},
	 { "IElement_GetNumberDof", _wrap_IElement_GetNumberDof, METH_O, NULL},
	 { "IElement_IntegralVolume", _wrap_IElement_IntegralVolume, METH_O, NULL},
	 { "IElement_IntegralArea", _wrap_IElement_IntegralArea, METH_O, NULL},
	 { "IElement_IntegralEdge", _wrap_IElement_IntegralEdge, METH_O, NULL},
	 { "IElement_GetIntegralAreaHelper", _wrap_IElement_GetIntegralAreaHelper, METH_VARARGS, NULL},
	 { "IElement_GetIntegralEdgeHelper", _wrap_IElement_GetIntegralEdgeHelper, METH_VARARGS, NULL},
	 { "IElement_SetNumberDof", _wrap_IElement_SetNumberDof, METH_VARARGS, NULL},
	 { "IElement_SetNode", _wrap_IElement_SetNode, METH_VARARGS, NULL},
	 { "IElement_SetOrder", _wrap_IElement_SetOrder, METH_VARARGS, NULL},
	 { "IElement_SetParametric", _wrap_IElement_SetParametric, METH_VARARGS, NULL},
	 { "IElement_SetTag", _wrap_IElement_SetTag, METH_VARARGS, NULL},
	 { "IElement_SetMaterial", _wrap_IElement_SetMaterial, METH_VARARGS, NULL},
	 { "IElement_SetElementIndex", _wrap_IElement_SetElementIndex, METH_VARARGS, NULL},
	 { "IElement_IsUsed", _wrap_IElement_IsUsed, METH_VARARGS, NULL},
	 { "IElement_InitializeCache", _wrap_IElement_InitializeCache, METH_O, NULL},
	 { "IElement_swigregister", IElement_swigregister, METH_O, NULL},
	 { "CreateElementHexa", _wrap_CreateElementHexa, METH_VARARGS, NULL},
	 { "delete_ElementHexa", _wrap_delete_ElementHexa, METH_O, NULL},
	 { "ElementHexa_Create", _wrap_ElementHexa_Create, METH_NOARGS, NULL},
	 { "ElementHexa_GetPtr", _wrap_ElementHexa_GetPtr, METH_VARARGS, NULL},
	 { "ElementHexa_u", _wrap_ElementHexa_u, METH_VARARGS, NULL},
	 { "ElementHexa_du", _wrap_ElementHexa_du, METH_VARARGS, NULL},
	 { "ElementHexa_J", _wrap_ElementHexa_J, METH_VARARGS, NULL},
	 { "ElementHexa_InvJ", _wrap_ElementHexa_InvJ, METH_VARARGS, NULL},
	 { "ElementHexa_N", _wrap_ElementHexa_N, METH_VARARGS, NULL},
	 { "ElementHexa_dN", _wrap_ElementHexa_dN, METH_VARARGS, NULL},
	 { "ElementHexa_DelA", _wrap_ElementHexa_DelA, METH_VARARGS, NULL},
	 { "ElementHexa_DelL", _wrap_ElementHexa_DelL, METH_VARARGS, NULL},
	 { "ElementHexa_DetJ", _wrap_ElementHexa_DetJ, METH_VARARGS, NULL},
	 { "ElementHexa_Volume", _wrap_ElementHexa_Volume, METH_O, NULL},
	 { "ElementHexa_Area", _wrap_ElementHexa_Area, METH_VARARGS, NULL},
	 { "ElementHexa_Length", _wrap_ElementHexa_Length, METH_VARARGS, NULL},
	 { "ElementHexa_CalculateHeight", _wrap_ElementHexa_CalculateHeight, METH_O, NULL},
	 { "ElementHexa_LocalCoordinates", _wrap_ElementHexa_LocalCoordinates, METH_VARARGS, NULL},
	 { "ElementHexa_GlobalCoordinates", _wrap_ElementHexa_GlobalCoordinates, METH_VARARGS, NULL},
	 { "ElementHexa_GlobalDerivatives", _wrap_ElementHexa_GlobalDerivatives, METH_VARARGS, NULL},
	 { "ElementHexa_GetNodeFace", _wrap_ElementHexa_GetNodeFace, METH_VARARGS, NULL},
	 { "ElementHexa_GetNodeEdge", _wrap_ElementHexa_GetNodeEdge, METH_VARARGS, NULL},
	 { "ElementHexa_GetNode", _wrap_ElementHexa_GetNode, METH_VARARGS, NULL},
	 { "ElementHexa_GetNodes", _wrap_ElementHexa_GetNodes, METH_O, NULL},
	 { "ElementHexa_GetOrder", _wrap_ElementHexa_GetOrder, METH_O, NULL},
	 { "ElementHexa_GetParametric", _wrap_ElementHexa_GetParametric, METH_O, NULL},
	 { "ElementHexa_GetType", _wrap_ElementHexa_GetType, METH_O, NULL},
	 { "ElementHexa_GetNodeIndex", _wrap_ElementHexa_GetNodeIndex, METH_VARARGS, NULL},
	 { "ElementHexa_GetNumberNodesFace", _wrap_ElementHexa_GetNumberNodesFace, METH_VARARGS, NULL},
	 { "ElementHexa_GetNumberNodesEdge", _wrap_ElementHexa_GetNumberNodesEdge, METH_VARARGS, NULL},
	 { "ElementHexa_GetNumberNodes", _wrap_ElementHexa_GetNumberNodes, METH_O, NULL},
	 { "ElementHexa_GetNumberFaces", _wrap_ElementHexa_GetNumberFaces, METH_O, NULL},
	 { "ElementHexa_GetNumberEdges", _wrap_ElementHexa_GetNumberEdges, METH_O, NULL},
	 { "ElementHexa_GetDimension", _wrap_ElementHexa_GetDimension, METH_O, NULL},
	 { "ElementHexa_GetCenter", _wrap_ElementHexa_GetCenter, METH_O, NULL},
	 { "ElementHexa_GetTag", _wrap_ElementHexa_GetTag, METH_O, NULL},
	 { "ElementHexa_GetMaterial", _wrap_ElementHexa_GetMaterial, METH_O, NULL},
	 { "ElementHexa_GetElementIndex", _wrap_ElementHexa_GetElementIndex, METH_O, NULL},
	 { "ElementHexa_GetHeight", _wrap_ElementHexa_GetHeight, METH_O, NULL},
	 { "ElementHexa_GetNumberDof", _wrap_ElementHexa_GetNumberDof, METH_O, NULL},
	 { "ElementHexa_IntegralVolume", _wrap_ElementHexa_IntegralVolume, METH_O, NULL},
	 { "ElementHexa_IntegralArea", _wrap_ElementHexa_IntegralArea, METH_O, NULL},
	 { "ElementHexa_IntegralEdge", _wrap_ElementHexa_IntegralEdge, METH_O, NULL},
	 { "ElementHexa_GetIntegralAreaHelper", _wrap_ElementHexa_GetIntegralAreaHelper, METH_VARARGS, NULL},
	 { "ElementHexa_GetIntegralEdgeHelper", _wrap_ElementHexa_GetIntegralEdgeHelper, METH_VARARGS, NULL},
	 { "ElementHexa_SetNumberDof", _wrap_ElementHexa_SetNumberDof, METH_VARARGS, NULL},
	 { "ElementHexa_SetNode", _wrap_ElementHexa_SetNode, METH_VARARGS, NULL},
	 { "ElementHexa_SetOrder", _wrap_ElementHexa_SetOrder, METH_VARARGS, NULL},
	 { "ElementHexa_SetParametric", _wrap_ElementHexa_SetParametric, METH_VARARGS, NULL},
	 { "ElementHexa_SetTag", _wrap_ElementHexa_SetTag, METH_VARARGS, NULL},
	 { "ElementHexa_SetMaterial", _wrap_ElementHexa_SetMaterial, METH_VARARGS, NULL},
	 { "ElementHexa_SetElementIndex", _wrap_ElementHexa_SetElementIndex, METH_VARARGS, NULL},
	 { "ElementHexa_IsUsed", _wrap_ElementHexa_IsUsed, METH_VARARGS, NULL},
	 { "ElementHexa_InitializeCache", _wrap_ElementHexa_InitializeCache, METH_O, NULL},
	 { "ElementHexa_linearFunctions__set", _wrap_ElementHexa_linearFunctions__set, METH_VARARGS, NULL},
	 { "ElementHexa_linearFunctions__get", _wrap_ElementHexa_linearFunctions__get, METH_O, NULL},
	 { "ElementHexa_quadraticFunctions__set", _wrap_ElementHexa_quadraticFunctions__set, METH_VARARGS, NULL},
	 { "ElementHexa_quadraticFunctions__get", _wrap_ElementHexa_quadraticFunctions__get, METH_O, NULL},
	 { "ElementHexa_swigregister", ElementHexa_swigregister, METH_O, NULL},
	 { "vecDirichlets_iterator", _wrap_vecDirichlets_iterator, METH_O, NULL},
	 { "vecDirichlets___nonzero__", _wrap_vecDirichlets___nonzero__, METH_O, NULL},
	 { "vecDirichlets___bool__", _wrap_vecDirichlets___bool__, METH_O, NULL},
	 { "vecDirichlets___len__", _wrap_vecDirichlets___len__, METH_O, NULL},
	 { "vecDirichlets___getslice__", _wrap_vecDirichlets___getslice__, METH_VARARGS, NULL},
	 { "vecDirichlets___setslice__", _wrap_vecDirichlets___setslice__, METH_VARARGS, NULL},
	 { "vecDirichlets___delslice__", _wrap_vecDirichlets___delslice__, METH_VARARGS, NULL},
	 { "vecDirichlets___delitem__", _wrap_vecDirichlets___delitem__, METH_VARARGS, NULL},
	 { "vecDirichlets___getitem__", _wrap_vecDirichlets___getitem__, METH_VARARGS, NULL},
	 { "vecDirichlets___setitem__", _wrap_vecDirichlets___setitem__, METH_VARARGS, NULL},
	 { "vecDirichlets_pop", _wrap_vecDirichlets_pop, METH_O, NULL},
	 { "vecDirichlets_append", _wrap_vecDirichlets_append, METH_VARARGS, NULL},
	 { "vecDirichlets_empty", _wrap_vecDirichlets_empty, METH_O, NULL},
	 { "vecDirichlets_size", _wrap_vecDirichlets_size, METH_O, NULL},
	 { "vecDirichlets_swap", _wrap_vecDirichlets_swap, METH_VARARGS, NULL},
	 { "vecDirichlets_begin", _wrap_vecDirichlets_begin, METH_O, NULL},
	 { "vecDirichlets_end", _wrap_vecDirichlets_end, METH_O, NULL},
	 { "vecDirichlets_rbegin", _wrap_vecDirichlets_rbegin, METH_O, NULL},
	 { "vecDirichlets_rend", _wrap_vecDirichlets_rend, METH_O, NULL},
	 { "vecDirichlets_clear", _wrap_vecDirichlets_clear, METH_O, NULL},
	 { "vecDirichlets_get_allocator", _wrap_vecDirichlets_get_allocator, METH_O, NULL},
	 { "vecDirichlets_pop_back", _wrap_vecDirichlets_pop_back, METH_O, NULL},
	 { "vecDirichlets_erase", _wrap_vecDirichlets_erase, METH_VARARGS, NULL},
	 { "new_vecDirichlets", _wrap_new_vecDirichlets, METH_VARARGS, NULL},
	 { "vecDirichlets_push_back", _wrap_vecDirichlets_push_back, METH_VARARGS, NULL},
	 { "vecDirichlets_front", _wrap_vecDirichlets_front, METH_O, NULL},
	 { "vecDirichlets_back", _wrap_vecDirichlets_back, METH_O, NULL},
	 { "vecDirichlets_assign", _wrap_vecDirichlets_assign, METH_VARARGS, NULL},
	 { "vecDirichlets_resize", _wrap_vecDirichlets_resize, METH_VARARGS, NULL},
	 { "vecDirichlets_insert", _wrap_vecDirichlets_insert, METH_VARARGS, NULL},
	 { "vecDirichlets_reserve", _wrap_vecDirichlets_reserve, METH_VARARGS, NULL},
	 { "vecDirichlets_capacity", _wrap_vecDirichlets_capacity, METH_O, NULL},
	 { "delete_vecDirichlets", _wrap_delete_vecDirichlets, METH_O, NULL},
	 { "vecDirichlets_swigregister", vecDirichlets_swigregister, METH_O, NULL},
	 { "vecDirichlets_swiginit", vecDirichlets_swiginit, METH_VARARGS, NULL},
	 { "vecLoads_iterator", _wrap_vecLoads_iterator, METH_O, NULL},
	 { "vecLoads___nonzero__", _wrap_vecLoads___nonzero__, METH_O, NULL},
	 { "vecLoads___bool__", _wrap_vecLoads___bool__, METH_O, NULL},
	 { "vecLoads___len__", _wrap_vecLoads___len__, METH_O, NULL},
	 { "vecLoads___getslice__", _wrap_vecLoads___getslice__, METH_VARARGS, NULL},
	 { "vecLoads___setslice__", _wrap_vecLoads___setslice__, METH_VARARGS, NULL},
	 { "vecLoads___delslice__", _wrap_vecLoads___delslice__, METH_VARARGS, NULL},
	 { "vecLoads___delitem__", _wrap_vecLoads___delitem__, METH_VARARGS, NULL},
	 { "vecLoads___getitem__", _wrap_vecLoads___getitem__, METH_VARARGS, NULL},
	 { "vecLoads___setitem__", _wrap_vecLoads___setitem__, METH_VARARGS, NULL},
	 { "vecLoads_pop", _wrap_vecLoads_pop, METH_O, NULL},
	 { "vecLoads_append", _wrap_vecLoads_append, METH_VARARGS, NULL},
	 { "vecLoads_empty", _wrap_vecLoads_empty, METH_O, NULL},
	 { "vecLoads_size", _wrap_vecLoads_size, METH_O, NULL},
	 { "vecLoads_swap", _wrap_vecLoads_swap, METH_VARARGS, NULL},
	 { "vecLoads_begin", _wrap_vecLoads_begin, METH_O, NULL},
	 { "vecLoads_end", _wrap_vecLoads_end, METH_O, NULL},
	 { "vecLoads_rbegin", _wrap_vecLoads_rbegin, METH_O, NULL},
	 { "vecLoads_rend", _wrap_vecLoads_rend, METH_O, NULL},
	 { "vecLoads_clear", _wrap_vecLoads_clear, METH_O, NULL},
	 { "vecLoads_get_allocator", _wrap_vecLoads_get_allocator, METH_O, NULL},
	 { "vecLoads_pop_back", _wrap_vecLoads_pop_back, METH_O, NULL},
	 { "vecLoads_erase", _wrap_vecLoads_erase, METH_VARARGS, NULL},
	 { "new_vecLoads", _wrap_new_vecLoads, METH_VARARGS, NULL},
	 { "vecLoads_push_back", _wrap_vecLoads_push_back, METH_VARARGS, NULL},
	 { "vecLoads_front", _wrap_vecLoads_front, METH_O, NULL},
	 { "vecLoads_back", _wrap_vecLoads_back, METH_O, NULL},
	 { "vecLoads_assign", _wrap_vecLoads_assign, METH_VARARGS, NULL},
	 { "vecLoads_resize", _wrap_vecLoads_resize, METH_VARARGS, NULL},
	 { "vecLoads_insert", _wrap_vecLoads_insert, METH_VARARGS, NULL},
	 { "vecLoads_reserve", _wrap_vecLoads_reserve, METH_VARARGS, NULL},
	 { "vecLoads_capacity", _wrap_vecLoads_capacity, METH_O, NULL},
	 { "delete_vecLoads", _wrap_delete_vecLoads, METH_O, NULL},
	 { "vecLoads_swigregister", vecLoads_swigregister, METH_O, NULL},
	 { "vecLoads_swiginit", vecLoads_swiginit, METH_VARARGS, NULL},
	 { "delete_IDirichlet", _wrap_delete_IDirichlet, METH_O, NULL},
	 { "IDirichlet_GetType", _wrap_IDirichlet_GetType, METH_O, NULL},
	 { "IDirichlet_GetNode", _wrap_IDirichlet_GetNode, METH_O, NULL},
	 { "IDirichlet_GetDofIndex", _wrap_IDirichlet_GetDofIndex, METH_O, NULL},
	 { "IDirichlet_GetValue", _wrap_IDirichlet_GetValue, METH_O, NULL},
	 { "IDirichlet_SetNode", _wrap_IDirichlet_SetNode, METH_VARARGS, NULL},
	 { "IDirichlet_SetDofIndex", _wrap_IDirichlet_SetDofIndex, METH_VARARGS, NULL},
	 { "IDirichlet_SetValue", _wrap_IDirichlet_SetValue, METH_VARARGS, NULL},
	 { "IDirichlet_swigregister", IDirichlet_swigregister, METH_O, NULL},
	 { "delete_ILoad", _wrap_delete_ILoad, METH_O, NULL},
	 { "ILoad_GetType", _wrap_ILoad_GetType, METH_O, NULL},
	 { "ILoad_GetElement", _wrap_ILoad_GetElement, METH_O, NULL},
	 { "ILoad_SetElement", _wrap_ILoad_SetElement, METH_VARARGS, NULL},
	 { "ILoad_swigregister", ILoad_swigregister, METH_O, NULL},
	 { "CreateDirichletByValue", _wrap_CreateDirichletByValue, METH_VARARGS, NULL},
	 { "CreateDirichletByFunction", _wrap_CreateDirichletByFunction, METH_VARARGS, NULL},
	 { "delete_Dirichlet", _wrap_delete_Dirichlet, METH_O, NULL},
	 { "Dirichlet_Create", _wrap_Dirichlet_Create, METH_NOARGS, NULL},
	 { "Dirichlet_GetPtr", _wrap_Dirichlet_GetPtr, METH_VARARGS, NULL},
	 { "Dirichlet_GetType", _wrap_Dirichlet_GetType, METH_O, NULL},
	 { "Dirichlet_GetNode", _wrap_Dirichlet_GetNode, METH_O, NULL},
	 { "Dirichlet_GetDofIndex", _wrap_Dirichlet_GetDofIndex, METH_O, NULL},
	 { "Dirichlet_GetValue", _wrap_Dirichlet_GetValue, METH_O, NULL},
	 { "Dirichlet_SetNode", _wrap_Dirichlet_SetNode, METH_VARARGS, NULL},
	 { "Dirichlet_SetDofIndex", _wrap_Dirichlet_SetDofIndex, METH_VARARGS, NULL},
	 { "Dirichlet_SetValue", _wrap_Dirichlet_SetValue, METH_VARARGS, NULL},
	 { "Dirichlet_swigregister", Dirichlet_swigregister, METH_O, NULL},
	 { "CreateLoadDistributedVolume", _wrap_CreateLoadDistributedVolume, METH_VARARGS, NULL},
	 { "delete_LoadDistributedVolume", _wrap_delete_LoadDistributedVolume, METH_O, NULL},
	 { "LoadDistributedVolume_Create", _wrap_LoadDistributedVolume_Create, METH_NOARGS, NULL},
	 { "LoadDistributedVolume_GetPtr", _wrap_LoadDistributedVolume_GetPtr, METH_VARARGS, NULL},
	 { "LoadDistributedVolume_GetType", _wrap_LoadDistributedVolume_GetType, METH_O, NULL},
	 { "LoadDistributedVolume_GetElement", _wrap_LoadDistributedVolume_GetElement, METH_O, NULL},
	 { "LoadDistributedVolume_GetValue", _wrap_LoadDistributedVolume_GetValue, METH_VARARGS, NULL},
	 { "LoadDistributedVolume_SetElement", _wrap_LoadDistributedVolume_SetElement, METH_VARARGS, NULL},
	 { "LoadDistributedVolume_SetValue", _wrap_LoadDistributedVolume_SetValue, METH_VARARGS, NULL},
	 { "LoadDistributedVolume_swigregister", LoadDistributedVolume_swigregister, METH_O, NULL},
	 { "CreateLoadDistributedFace", _wrap_CreateLoadDistributedFace, METH_VARARGS, NULL},
	 { "delete_LoadDistributedFace", _wrap_delete_LoadDistributedFace, METH_O, NULL},
	 { "LoadDistributedFace_Create", _wrap_LoadDistributedFace_Create, METH_NOARGS, NULL},
	 { "LoadDistributedFace_GetPtr", _wrap_LoadDistributedFace_GetPtr, METH_VARARGS, NULL},
	 { "LoadDistributedFace_GetType", _wrap_LoadDistributedFace_GetType, METH_O, NULL},
	 { "LoadDistributedFace_GetElement", _wrap_LoadDistributedFace_GetElement, METH_O, NULL},
	 { "LoadDistributedFace_GetValue", _wrap_LoadDistributedFace_GetValue, METH_VARARGS, NULL},
	 { "LoadDistributedFace_GetFaceIndex", _wrap_LoadDistributedFace_GetFaceIndex, METH_O, NULL},
	 { "LoadDistributedFace_SetElement", _wrap_LoadDistributedFace_SetElement, METH_VARARGS, NULL},
	 { "LoadDistributedFace_SetFaceIndex", _wrap_LoadDistributedFace_SetFaceIndex, METH_VARARGS, NULL},
	 { "LoadDistributedFace_SetValue", _wrap_LoadDistributedFace_SetValue, METH_VARARGS, NULL},
	 { "LoadDistributedFace_swigregister", LoadDistributedFace_swigregister, METH_O, NULL},
	 { "vecMeshes_iterator", _wrap_vecMeshes_iterator, METH_O, NULL},
	 { "vecMeshes___nonzero__", _wrap_vecMeshes___nonzero__, METH_O, NULL},
	 { "vecMeshes___bool__", _wrap_vecMeshes___bool__, METH_O, NULL},
	 { "vecMeshes___len__", _wrap_vecMeshes___len__, METH_O, NULL},
	 { "vecMeshes___getslice__", _wrap_vecMeshes___getslice__, METH_VARARGS, NULL},
	 { "vecMeshes___setslice__", _wrap_vecMeshes___setslice__, METH_VARARGS, NULL},
	 { "vecMeshes___delslice__", _wrap_vecMeshes___delslice__, METH_VARARGS, NULL},
	 { "vecMeshes___delitem__", _wrap_vecMeshes___delitem__, METH_VARARGS, NULL},
	 { "vecMeshes___getitem__", _wrap_vecMeshes___getitem__, METH_VARARGS, NULL},
	 { "vecMeshes___setitem__", _wrap_vecMeshes___setitem__, METH_VARARGS, NULL},
	 { "vecMeshes_pop", _wrap_vecMeshes_pop, METH_O, NULL},
	 { "vecMeshes_append", _wrap_vecMeshes_append, METH_VARARGS, NULL},
	 { "vecMeshes_empty", _wrap_vecMeshes_empty, METH_O, NULL},
	 { "vecMeshes_size", _wrap_vecMeshes_size, METH_O, NULL},
	 { "vecMeshes_swap", _wrap_vecMeshes_swap, METH_VARARGS, NULL},
	 { "vecMeshes_begin", _wrap_vecMeshes_begin, METH_O, NULL},
	 { "vecMeshes_end", _wrap_vecMeshes_end, METH_O, NULL},
	 { "vecMeshes_rbegin", _wrap_vecMeshes_rbegin, METH_O, NULL},
	 { "vecMeshes_rend", _wrap_vecMeshes_rend, METH_O, NULL},
	 { "vecMeshes_clear", _wrap_vecMeshes_clear, METH_O, NULL},
	 { "vecMeshes_get_allocator", _wrap_vecMeshes_get_allocator, METH_O, NULL},
	 { "vecMeshes_pop_back", _wrap_vecMeshes_pop_back, METH_O, NULL},
	 { "vecMeshes_erase", _wrap_vecMeshes_erase, METH_VARARGS, NULL},
	 { "new_vecMeshes", _wrap_new_vecMeshes, METH_VARARGS, NULL},
	 { "vecMeshes_push_back", _wrap_vecMeshes_push_back, METH_VARARGS, NULL},
	 { "vecMeshes_front", _wrap_vecMeshes_front, METH_O, NULL},
	 { "vecMeshes_back", _wrap_vecMeshes_back, METH_O, NULL},
	 { "vecMeshes_assign", _wrap_vecMeshes_assign, METH_VARARGS, NULL},
	 { "vecMeshes_resize", _wrap_vecMeshes_resize, METH_VARARGS, NULL},
	 { "vecMeshes_insert", _wrap_vecMeshes_insert, METH_VARARGS, NULL},
	 { "vecMeshes_reserve", _wrap_vecMeshes_reserve, METH_VARARGS, NULL},
	 { "vecMeshes_capacity", _wrap_vecMeshes_capacity, METH_O, NULL},
	 { "delete_vecMeshes", _wrap_delete_vecMeshes, METH_O, NULL},
	 { "vecMeshes_swigregister", vecMeshes_swigregister, METH_O, NULL},
	 { "vecMeshes_swiginit", vecMeshes_swiginit, METH_VARARGS, NULL},
	 { "vecDofMeshIndices_iterator", _wrap_vecDofMeshIndices_iterator, METH_O, NULL},
	 { "vecDofMeshIndices___nonzero__", _wrap_vecDofMeshIndices___nonzero__, METH_O, NULL},
	 { "vecDofMeshIndices___bool__", _wrap_vecDofMeshIndices___bool__, METH_O, NULL},
	 { "vecDofMeshIndices___len__", _wrap_vecDofMeshIndices___len__, METH_O, NULL},
	 { "vecDofMeshIndices___getslice__", _wrap_vecDofMeshIndices___getslice__, METH_VARARGS, NULL},
	 { "vecDofMeshIndices___setslice__", _wrap_vecDofMeshIndices___setslice__, METH_VARARGS, NULL},
	 { "vecDofMeshIndices___delslice__", _wrap_vecDofMeshIndices___delslice__, METH_VARARGS, NULL},
	 { "vecDofMeshIndices___delitem__", _wrap_vecDofMeshIndices___delitem__, METH_VARARGS, NULL},
	 { "vecDofMeshIndices___getitem__", _wrap_vecDofMeshIndices___getitem__, METH_VARARGS, NULL},
	 { "vecDofMeshIndices___setitem__", _wrap_vecDofMeshIndices___setitem__, METH_VARARGS, NULL},
	 { "vecDofMeshIndices_pop", _wrap_vecDofMeshIndices_pop, METH_O, NULL},
	 { "vecDofMeshIndices_append", _wrap_vecDofMeshIndices_append, METH_VARARGS, NULL},
	 { "vecDofMeshIndices_empty", _wrap_vecDofMeshIndices_empty, METH_O, NULL},
	 { "vecDofMeshIndices_size", _wrap_vecDofMeshIndices_size, METH_O, NULL},
	 { "vecDofMeshIndices_swap", _wrap_vecDofMeshIndices_swap, METH_VARARGS, NULL},
	 { "vecDofMeshIndices_begin", _wrap_vecDofMeshIndices_begin, METH_O, NULL},
	 { "vecDofMeshIndices_end", _wrap_vecDofMeshIndices_end, METH_O, NULL},
	 { "vecDofMeshIndices_rbegin", _wrap_vecDofMeshIndices_rbegin, METH_O, NULL},
	 { "vecDofMeshIndices_rend", _wrap_vecDofMeshIndices_rend, METH_O, NULL},
	 { "vecDofMeshIndices_clear", _wrap_vecDofMeshIndices_clear, METH_O, NULL},
	 { "vecDofMeshIndices_get_allocator", _wrap_vecDofMeshIndices_get_allocator, METH_O, NULL},
	 { "vecDofMeshIndices_pop_back", _wrap_vecDofMeshIndices_pop_back, METH_O, NULL},
	 { "vecDofMeshIndices_erase", _wrap_vecDofMeshIndices_erase, METH_VARARGS, NULL},
	 { "new_vecDofMeshIndices", _wrap_new_vecDofMeshIndices, METH_VARARGS, NULL},
	 { "vecDofMeshIndices_push_back", _wrap_vecDofMeshIndices_push_back, METH_VARARGS, NULL},
	 { "vecDofMeshIndices_front", _wrap_vecDofMeshIndices_front, METH_O, NULL},
	 { "vecDofMeshIndices_back", _wrap_vecDofMeshIndices_back, METH_O, NULL},
	 { "vecDofMeshIndices_assign", _wrap_vecDofMeshIndices_assign, METH_VARARGS, NULL},
	 { "vecDofMeshIndices_resize", _wrap_vecDofMeshIndices_resize, METH_VARARGS, NULL},
	 { "vecDofMeshIndices_insert", _wrap_vecDofMeshIndices_insert, METH_VARARGS, NULL},
	 { "vecDofMeshIndices_reserve", _wrap_vecDofMeshIndices_reserve, METH_VARARGS, NULL},
	 { "vecDofMeshIndices_capacity", _wrap_vecDofMeshIndices_capacity, METH_O, NULL},
	 { "vecDofMeshIndices___str__", _wrap_vecDofMeshIndices___str__, METH_O, NULL},
	 { "delete_vecDofMeshIndices", _wrap_delete_vecDofMeshIndices, METH_O, NULL},
	 { "vecDofMeshIndices_swigregister", vecDofMeshIndices_swigregister, METH_O, NULL},
	 { "vecDofMeshIndices_swiginit", vecDofMeshIndices_swiginit, METH_VARARGS, NULL},
	 { "vecNodeMeshIndices_iterator", _wrap_vecNodeMeshIndices_iterator, METH_O, NULL},
	 { "vecNodeMeshIndices___nonzero__", _wrap_vecNodeMeshIndices___nonzero__, METH_O, NULL},
	 { "vecNodeMeshIndices___bool__", _wrap_vecNodeMeshIndices___bool__, METH_O, NULL},
	 { "vecNodeMeshIndices___len__", _wrap_vecNodeMeshIndices___len__, METH_O, NULL},
	 { "vecNodeMeshIndices___getslice__", _wrap_vecNodeMeshIndices___getslice__, METH_VARARGS, NULL},
	 { "vecNodeMeshIndices___setslice__", _wrap_vecNodeMeshIndices___setslice__, METH_VARARGS, NULL},
	 { "vecNodeMeshIndices___delslice__", _wrap_vecNodeMeshIndices___delslice__, METH_VARARGS, NULL},
	 { "vecNodeMeshIndices___delitem__", _wrap_vecNodeMeshIndices___delitem__, METH_VARARGS, NULL},
	 { "vecNodeMeshIndices___getitem__", _wrap_vecNodeMeshIndices___getitem__, METH_VARARGS, NULL},
	 { "vecNodeMeshIndices___setitem__", _wrap_vecNodeMeshIndices___setitem__, METH_VARARGS, NULL},
	 { "vecNodeMeshIndices_pop", _wrap_vecNodeMeshIndices_pop, METH_O, NULL},
	 { "vecNodeMeshIndices_append", _wrap_vecNodeMeshIndices_append, METH_VARARGS, NULL},
	 { "vecNodeMeshIndices_empty", _wrap_vecNodeMeshIndices_empty, METH_O, NULL},
	 { "vecNodeMeshIndices_size", _wrap_vecNodeMeshIndices_size, METH_O, NULL},
	 { "vecNodeMeshIndices_swap", _wrap_vecNodeMeshIndices_swap, METH_VARARGS, NULL},
	 { "vecNodeMeshIndices_begin", _wrap_vecNodeMeshIndices_begin, METH_O, NULL},
	 { "vecNodeMeshIndices_end", _wrap_vecNodeMeshIndices_end, METH_O, NULL},
	 { "vecNodeMeshIndices_rbegin", _wrap_vecNodeMeshIndices_rbegin, METH_O, NULL},
	 { "vecNodeMeshIndices_rend", _wrap_vecNodeMeshIndices_rend, METH_O, NULL},
	 { "vecNodeMeshIndices_clear", _wrap_vecNodeMeshIndices_clear, METH_O, NULL},
	 { "vecNodeMeshIndices_get_allocator", _wrap_vecNodeMeshIndices_get_allocator, METH_O, NULL},
	 { "vecNodeMeshIndices_pop_back", _wrap_vecNodeMeshIndices_pop_back, METH_O, NULL},
	 { "vecNodeMeshIndices_erase", _wrap_vecNodeMeshIndices_erase, METH_VARARGS, NULL},
	 { "new_vecNodeMeshIndices", _wrap_new_vecNodeMeshIndices, METH_VARARGS, NULL},
	 { "vecNodeMeshIndices_push_back", _wrap_vecNodeMeshIndices_push_back, METH_VARARGS, NULL},
	 { "vecNodeMeshIndices_front", _wrap_vecNodeMeshIndices_front, METH_O, NULL},
	 { "vecNodeMeshIndices_back", _wrap_vecNodeMeshIndices_back, METH_O, NULL},
	 { "vecNodeMeshIndices_assign", _wrap_vecNodeMeshIndices_assign, METH_VARARGS, NULL},
	 { "vecNodeMeshIndices_resize", _wrap_vecNodeMeshIndices_resize, METH_VARARGS, NULL},
	 { "vecNodeMeshIndices_insert", _wrap_vecNodeMeshIndices_insert, METH_VARARGS, NULL},
	 { "vecNodeMeshIndices_reserve", _wrap_vecNodeMeshIndices_reserve, METH_VARARGS, NULL},
	 { "vecNodeMeshIndices_capacity", _wrap_vecNodeMeshIndices_capacity, METH_O, NULL},
	 { "delete_vecNodeMeshIndices", _wrap_delete_vecNodeMeshIndices, METH_O, NULL},
	 { "vecNodeMeshIndices_swigregister", vecNodeMeshIndices_swigregister, METH_O, NULL},
	 { "vecNodeMeshIndices_swiginit", vecNodeMeshIndices_swiginit, METH_VARARGS, NULL},
	 { "arrNodeMeshIndices_iterator", _wrap_arrNodeMeshIndices_iterator, METH_O, NULL},
	 { "arrNodeMeshIndices___nonzero__", _wrap_arrNodeMeshIndices___nonzero__, METH_O, NULL},
	 { "arrNodeMeshIndices___bool__", _wrap_arrNodeMeshIndices___bool__, METH_O, NULL},
	 { "arrNodeMeshIndices___len__", _wrap_arrNodeMeshIndices___len__, METH_O, NULL},
	 { "arrNodeMeshIndices___getslice__", _wrap_arrNodeMeshIndices___getslice__, METH_VARARGS, NULL},
	 { "arrNodeMeshIndices___setslice__", _wrap_arrNodeMeshIndices___setslice__, METH_VARARGS, NULL},
	 { "arrNodeMeshIndices___delslice__", _wrap_arrNodeMeshIndices___delslice__, METH_VARARGS, NULL},
	 { "arrNodeMeshIndices___delitem__", _wrap_arrNodeMeshIndices___delitem__, METH_VARARGS, NULL},
	 { "arrNodeMeshIndices___getitem__", _wrap_arrNodeMeshIndices___getitem__, METH_VARARGS, NULL},
	 { "arrNodeMeshIndices___setitem__", _wrap_arrNodeMeshIndices___setitem__, METH_VARARGS, NULL},
	 { "arrNodeMeshIndices_pop", _wrap_arrNodeMeshIndices_pop, METH_O, NULL},
	 { "arrNodeMeshIndices_append", _wrap_arrNodeMeshIndices_append, METH_VARARGS, NULL},
	 { "arrNodeMeshIndices_empty", _wrap_arrNodeMeshIndices_empty, METH_O, NULL},
	 { "arrNodeMeshIndices_size", _wrap_arrNodeMeshIndices_size, METH_O, NULL},
	 { "arrNodeMeshIndices_swap", _wrap_arrNodeMeshIndices_swap, METH_VARARGS, NULL},
	 { "arrNodeMeshIndices_begin", _wrap_arrNodeMeshIndices_begin, METH_O, NULL},
	 { "arrNodeMeshIndices_end", _wrap_arrNodeMeshIndices_end, METH_O, NULL},
	 { "arrNodeMeshIndices_rbegin", _wrap_arrNodeMeshIndices_rbegin, METH_O, NULL},
	 { "arrNodeMeshIndices_rend", _wrap_arrNodeMeshIndices_rend, METH_O, NULL},
	 { "arrNodeMeshIndices_clear", _wrap_arrNodeMeshIndices_clear, METH_O, NULL},
	 { "arrNodeMeshIndices_get_allocator", _wrap_arrNodeMeshIndices_get_allocator, METH_O, NULL},
	 { "arrNodeMeshIndices_pop_back", _wrap_arrNodeMeshIndices_pop_back, METH_O, NULL},
	 { "arrNodeMeshIndices_erase", _wrap_arrNodeMeshIndices_erase, METH_VARARGS, NULL},
	 { "new_arrNodeMeshIndices", _wrap_new_arrNodeMeshIndices, METH_VARARGS, NULL},
	 { "arrNodeMeshIndices_push_back", _wrap_arrNodeMeshIndices_push_back, METH_VARARGS, NULL},
	 { "arrNodeMeshIndices_front", _wrap_arrNodeMeshIndices_front, METH_O, NULL},
	 { "arrNodeMeshIndices_back", _wrap_arrNodeMeshIndices_back, METH_O, NULL},
	 { "arrNodeMeshIndices_assign", _wrap_arrNodeMeshIndices_assign, METH_VARARGS, NULL},
	 { "arrNodeMeshIndices_resize", _wrap_arrNodeMeshIndices_resize, METH_VARARGS, NULL},
	 { "arrNodeMeshIndices_insert", _wrap_arrNodeMeshIndices_insert, METH_VARARGS, NULL},
	 { "arrNodeMeshIndices_reserve", _wrap_arrNodeMeshIndices_reserve, METH_VARARGS, NULL},
	 { "arrNodeMeshIndices_capacity", _wrap_arrNodeMeshIndices_capacity, METH_O, NULL},
	 { "arrNodeMeshIndices___str__", _wrap_arrNodeMeshIndices___str__, METH_O, NULL},
	 { "delete_arrNodeMeshIndices", _wrap_delete_arrNodeMeshIndices, METH_O, NULL},
	 { "arrNodeMeshIndices_swigregister", arrNodeMeshIndices_swigregister, METH_O, NULL},
	 { "arrNodeMeshIndices_swiginit", arrNodeMeshIndices_swiginit, METH_VARARGS, NULL},
	 { "vecDirichletMeshIndices_iterator", _wrap_vecDirichletMeshIndices_iterator, METH_O, NULL},
	 { "vecDirichletMeshIndices___nonzero__", _wrap_vecDirichletMeshIndices___nonzero__, METH_O, NULL},
	 { "vecDirichletMeshIndices___bool__", _wrap_vecDirichletMeshIndices___bool__, METH_O, NULL},
	 { "vecDirichletMeshIndices___len__", _wrap_vecDirichletMeshIndices___len__, METH_O, NULL},
	 { "vecDirichletMeshIndices___getslice__", _wrap_vecDirichletMeshIndices___getslice__, METH_VARARGS, NULL},
	 { "vecDirichletMeshIndices___setslice__", _wrap_vecDirichletMeshIndices___setslice__, METH_VARARGS, NULL},
	 { "vecDirichletMeshIndices___delslice__", _wrap_vecDirichletMeshIndices___delslice__, METH_VARARGS, NULL},
	 { "vecDirichletMeshIndices___delitem__", _wrap_vecDirichletMeshIndices___delitem__, METH_VARARGS, NULL},
	 { "vecDirichletMeshIndices___getitem__", _wrap_vecDirichletMeshIndices___getitem__, METH_VARARGS, NULL},
	 { "vecDirichletMeshIndices___setitem__", _wrap_vecDirichletMeshIndices___setitem__, METH_VARARGS, NULL},
	 { "vecDirichletMeshIndices_pop", _wrap_vecDirichletMeshIndices_pop, METH_O, NULL},
	 { "vecDirichletMeshIndices_append", _wrap_vecDirichletMeshIndices_append, METH_VARARGS, NULL},
	 { "vecDirichletMeshIndices_empty", _wrap_vecDirichletMeshIndices_empty, METH_O, NULL},
	 { "vecDirichletMeshIndices_size", _wrap_vecDirichletMeshIndices_size, METH_O, NULL},
	 { "vecDirichletMeshIndices_swap", _wrap_vecDirichletMeshIndices_swap, METH_VARARGS, NULL},
	 { "vecDirichletMeshIndices_begin", _wrap_vecDirichletMeshIndices_begin, METH_O, NULL},
	 { "vecDirichletMeshIndices_end", _wrap_vecDirichletMeshIndices_end, METH_O, NULL},
	 { "vecDirichletMeshIndices_rbegin", _wrap_vecDirichletMeshIndices_rbegin, METH_O, NULL},
	 { "vecDirichletMeshIndices_rend", _wrap_vecDirichletMeshIndices_rend, METH_O, NULL},
	 { "vecDirichletMeshIndices_clear", _wrap_vecDirichletMeshIndices_clear, METH_O, NULL},
	 { "vecDirichletMeshIndices_get_allocator", _wrap_vecDirichletMeshIndices_get_allocator, METH_O, NULL},
	 { "vecDirichletMeshIndices_pop_back", _wrap_vecDirichletMeshIndices_pop_back, METH_O, NULL},
	 { "vecDirichletMeshIndices_erase", _wrap_vecDirichletMeshIndices_erase, METH_VARARGS, NULL},
	 { "new_vecDirichletMeshIndices", _wrap_new_vecDirichletMeshIndices, METH_VARARGS, NULL},
	 { "vecDirichletMeshIndices_push_back", _wrap_vecDirichletMeshIndices_push_back, METH_VARARGS, NULL},
	 { "vecDirichletMeshIndices_front", _wrap_vecDirichletMeshIndices_front, METH_O, NULL},
	 { "vecDirichletMeshIndices_back", _wrap_vecDirichletMeshIndices_back, METH_O, NULL},
	 { "vecDirichletMeshIndices_assign", _wrap_vecDirichletMeshIndices_assign, METH_VARARGS, NULL},
	 { "vecDirichletMeshIndices_resize", _wrap_vecDirichletMeshIndices_resize, METH_VARARGS, NULL},
	 { "vecDirichletMeshIndices_insert", _wrap_vecDirichletMeshIndices_insert, METH_VARARGS, NULL},
	 { "vecDirichletMeshIndices_reserve", _wrap_vecDirichletMeshIndices_reserve, METH_VARARGS, NULL},
	 { "vecDirichletMeshIndices_capacity", _wrap_vecDirichletMeshIndices_capacity, METH_O, NULL},
	 { "vecDirichletMeshIndices___str__", _wrap_vecDirichletMeshIndices___str__, METH_O, NULL},
	 { "delete_vecDirichletMeshIndices", _wrap_delete_vecDirichletMeshIndices, METH_O, NULL},
	 { "vecDirichletMeshIndices_swigregister", vecDirichletMeshIndices_swigregister, METH_O, NULL},
	 { "vecDirichletMeshIndices_swiginit", vecDirichletMeshIndices_swiginit, METH_VARARGS, NULL},
	 { "DofMeshIndex_node_set", _wrap_DofMeshIndex_node_set, METH_VARARGS, NULL},
	 { "DofMeshIndex_node_get", _wrap_DofMeshIndex_node_get, METH_O, NULL},
	 { "DofMeshIndex_nodeIndex_set", _wrap_DofMeshIndex_nodeIndex_set, METH_VARARGS, NULL},
	 { "DofMeshIndex_nodeIndex_get", _wrap_DofMeshIndex_nodeIndex_get, METH_O, NULL},
	 { "DofMeshIndex_dofIndex_set", _wrap_DofMeshIndex_dofIndex_set, METH_VARARGS, NULL},
	 { "DofMeshIndex_dofIndex_get", _wrap_DofMeshIndex_dofIndex_get, METH_O, NULL},
	 { "DofMeshIndex_globalIndex_set", _wrap_DofMeshIndex_globalIndex_set, METH_VARARGS, NULL},
	 { "DofMeshIndex_globalIndex_get", _wrap_DofMeshIndex_globalIndex_get, METH_O, NULL},
	 { "DofMeshIndex_dirichlet_set", _wrap_DofMeshIndex_dirichlet_set, METH_VARARGS, NULL},
	 { "DofMeshIndex_dirichlet_get", _wrap_DofMeshIndex_dirichlet_get, METH_O, NULL},
	 { "DofMeshIndex_dirichletIndex_set", _wrap_DofMeshIndex_dirichletIndex_set, METH_VARARGS, NULL},
	 { "DofMeshIndex_dirichletIndex_get", _wrap_DofMeshIndex_dirichletIndex_get, METH_O, NULL},
	 { "DofMeshIndex_dirichletReordered_set", _wrap_DofMeshIndex_dirichletReordered_set, METH_VARARGS, NULL},
	 { "DofMeshIndex_dirichletReordered_get", _wrap_DofMeshIndex_dirichletReordered_get, METH_O, NULL},
	 { "new_DofMeshIndex", _wrap_new_DofMeshIndex, METH_NOARGS, NULL},
	 { "delete_DofMeshIndex", _wrap_delete_DofMeshIndex, METH_O, NULL},
	 { "DofMeshIndex_swigregister", DofMeshIndex_swigregister, METH_O, NULL},
	 { "DofMeshIndex_swiginit", DofMeshIndex_swiginit, METH_VARARGS, NULL},
	 { "NodeMeshIndex_index_set", _wrap_NodeMeshIndex_index_set, METH_VARARGS, NULL},
	 { "NodeMeshIndex_index_get", _wrap_NodeMeshIndex_index_get, METH_O, NULL},
	 { "NodeMeshIndex_node_set", _wrap_NodeMeshIndex_node_set, METH_VARARGS, NULL},
	 { "NodeMeshIndex_node_get", _wrap_NodeMeshIndex_node_get, METH_O, NULL},
	 { "NodeMeshIndex_dofIndices_set", _wrap_NodeMeshIndex_dofIndices_set, METH_VARARGS, NULL},
	 { "NodeMeshIndex_dofIndices_get", _wrap_NodeMeshIndex_dofIndices_get, METH_O, NULL},
	 { "new_NodeMeshIndex", _wrap_new_NodeMeshIndex, METH_NOARGS, NULL},
	 { "delete_NodeMeshIndex", _wrap_delete_NodeMeshIndex, METH_O, NULL},
	 { "NodeMeshIndex_swigregister", NodeMeshIndex_swigregister, METH_O, NULL},
	 { "NodeMeshIndex_swiginit", NodeMeshIndex_swiginit, METH_VARARGS, NULL},
	 { "DirichletMeshIndex_node_set", _wrap_DirichletMeshIndex_node_set, METH_VARARGS, NULL},
	 { "DirichletMeshIndex_node_get", _wrap_DirichletMeshIndex_node_get, METH_O, NULL},
	 { "DirichletMeshIndex_dofIndex_set", _wrap_DirichletMeshIndex_dofIndex_set, METH_VARARGS, NULL},
	 { "DirichletMeshIndex_dofIndex_get", _wrap_DirichletMeshIndex_dofIndex_get, METH_O, NULL},
	 { "new_DirichletMeshIndex", _wrap_new_DirichletMeshIndex, METH_NOARGS, NULL},
	 { "delete_DirichletMeshIndex", _wrap_delete_DirichletMeshIndex, METH_O, NULL},
	 { "DirichletMeshIndex_swigregister", DirichletMeshIndex_swigregister, METH_O, NULL},
	 { "DirichletMeshIndex_swiginit", DirichletMeshIndex_swiginit, METH_VARARGS, NULL},
	 { "delete_IMesh", _wrap_delete_IMesh, METH_O, NULL},
	 { "IMesh_AddNode", _wrap_IMesh_AddNode, METH_VARARGS, NULL},
	 { "IMesh_AddElement", _wrap_IMesh_AddElement, METH_VARARGS, NULL},
	 { "IMesh_RemoveNode", _wrap_IMesh_RemoveNode, METH_VARARGS, NULL},
	 { "IMesh_RemoveElement", _wrap_IMesh_RemoveElement, METH_VARARGS, NULL},
	 { "IMesh_GetNodes", _wrap_IMesh_GetNodes, METH_O, NULL},
	 { "IMesh_GetElements", _wrap_IMesh_GetElements, METH_O, NULL},
	 { "IMesh_GetNode", _wrap_IMesh_GetNode, METH_VARARGS, NULL},
	 { "IMesh_GetNodeIndex", _wrap_IMesh_GetNodeIndex, METH_VARARGS, NULL},
	 { "IMesh_GetNodeSorted", _wrap_IMesh_GetNodeSorted, METH_VARARGS, NULL},
	 { "IMesh_GetElement", _wrap_IMesh_GetElement, METH_VARARGS, NULL},
	 { "IMesh_GetElementIndex", _wrap_IMesh_GetElementIndex, METH_VARARGS, NULL},
	 { "IMesh_GetElementSorted", _wrap_IMesh_GetElementSorted, METH_VARARGS, NULL},
	 { "IMesh_GetElementHeightMinium", _wrap_IMesh_GetElementHeightMinium, METH_O, NULL},
	 { "IMesh_GetTotalDof", _wrap_IMesh_GetTotalDof, METH_O, NULL},
	 { "IMesh_GetPivot", _wrap_IMesh_GetPivot, METH_O, NULL},
	 { "IMesh_GetTag", _wrap_IMesh_GetTag, METH_O, NULL},
	 { "IMesh_SetTag", _wrap_IMesh_SetTag, METH_VARARGS, NULL},
	 { "IMesh_SortNodesTag", _wrap_IMesh_SortNodesTag, METH_O, NULL},
	 { "IMesh_SortElementsTag", _wrap_IMesh_SortElementsTag, METH_O, NULL},
	 { "IMesh_GetIndexNode", _wrap_IMesh_GetIndexNode, METH_VARARGS, NULL},
	 { "IMesh_GetIndexNodeSorted", _wrap_IMesh_GetIndexNodeSorted, METH_VARARGS, NULL},
	 { "IMesh_GetIndexElement", _wrap_IMesh_GetIndexElement, METH_VARARGS, NULL},
	 { "IMesh_GetIndexElementSorted", _wrap_IMesh_GetIndexElementSorted, METH_VARARGS, NULL},
	 { "IMesh_swigregister", IMesh_swigregister, METH_O, NULL},
	 { "CreateMesh", _wrap_CreateMesh, METH_VARARGS, NULL},
	 { "delete_Mesh", _wrap_delete_Mesh, METH_O, NULL},
	 { "Mesh_Create", _wrap_Mesh_Create, METH_NOARGS, NULL},
	 { "Mesh_GetPtr", _wrap_Mesh_GetPtr, METH_VARARGS, NULL},
	 { "Mesh_AddNode", _wrap_Mesh_AddNode, METH_VARARGS, NULL},
	 { "Mesh_AddElement", _wrap_Mesh_AddElement, METH_VARARGS, NULL},
	 { "Mesh_RemoveNode", _wrap_Mesh_RemoveNode, METH_VARARGS, NULL},
	 { "Mesh_RemoveElement", _wrap_Mesh_RemoveElement, METH_VARARGS, NULL},
	 { "Mesh_GetNodes", _wrap_Mesh_GetNodes, METH_O, NULL},
	 { "Mesh_GetElements", _wrap_Mesh_GetElements, METH_O, NULL},
	 { "Mesh_GetNode", _wrap_Mesh_GetNode, METH_VARARGS, NULL},
	 { "Mesh_GetNodeIndex", _wrap_Mesh_GetNodeIndex, METH_VARARGS, NULL},
	 { "Mesh_GetNodeSorted", _wrap_Mesh_GetNodeSorted, METH_VARARGS, NULL},
	 { "Mesh_GetElement", _wrap_Mesh_GetElement, METH_VARARGS, NULL},
	 { "Mesh_GetElementIndex", _wrap_Mesh_GetElementIndex, METH_VARARGS, NULL},
	 { "Mesh_GetElementSorted", _wrap_Mesh_GetElementSorted, METH_VARARGS, NULL},
	 { "Mesh_GetElementHeightMinium", _wrap_Mesh_GetElementHeightMinium, METH_O, NULL},
	 { "Mesh_GetTotalDof", _wrap_Mesh_GetTotalDof, METH_O, NULL},
	 { "Mesh_GetPivot", _wrap_Mesh_GetPivot, METH_O, NULL},
	 { "Mesh_GetTag", _wrap_Mesh_GetTag, METH_O, NULL},
	 { "Mesh_SetTag", _wrap_Mesh_SetTag, METH_VARARGS, NULL},
	 { "Mesh_SortNodesTag", _wrap_Mesh_SortNodesTag, METH_O, NULL},
	 { "Mesh_SortElementsTag", _wrap_Mesh_SortElementsTag, METH_O, NULL},
	 { "Mesh_GetIndexNode", _wrap_Mesh_GetIndexNode, METH_VARARGS, NULL},
	 { "Mesh_GetIndexNodeSorted", _wrap_Mesh_GetIndexNodeSorted, METH_VARARGS, NULL},
	 { "Mesh_GetIndexElement", _wrap_Mesh_GetIndexElement, METH_VARARGS, NULL},
	 { "Mesh_GetIndexElementSorted", _wrap_Mesh_GetIndexElementSorted, METH_VARARGS, NULL},
	 { "Mesh_swigregister", Mesh_swigregister, METH_O, NULL},
	 { "LoadGmsh", _wrap_LoadGmsh, METH_VARARGS, NULL},
	 { "DeformByInterpolation", _wrap_DeformByInterpolation, METH_VARARGS, NULL},
	 { "delete_IProblem", _wrap_delete_IProblem, METH_O, NULL},
	 { "IProblem_GetNumberDof", _wrap_IProblem_GetNumberDof, METH_O, NULL},
	 { "IProblem_GetTotalDof", _wrap_IProblem_GetTotalDof, METH_O, NULL},
	 { "IProblem_GetPivot", _wrap_IProblem_GetPivot, METH_O, NULL},
	 { "IProblem_GetTimer", _wrap_IProblem_GetTimer, METH_O, NULL},
	 { "IProblem_GetMesh", _wrap_IProblem_GetMesh, METH_O, NULL},
	 { "IProblem_GetType", _wrap_IProblem_GetType, METH_O, NULL},
	 { "IProblem_GetTag", _wrap_IProblem_GetTag, METH_O, NULL},
	 { "IProblem_GetDirichlets", _wrap_IProblem_GetDirichlets, METH_O, NULL},
	 { "IProblem_GetLoads", _wrap_IProblem_GetLoads, METH_O, NULL},
	 { "IProblem_GetDofMeshIndices", _wrap_IProblem_GetDofMeshIndices, METH_O, NULL},
	 { "IProblem_GetNodeMeshIndices", _wrap_IProblem_GetNodeMeshIndices, METH_O, NULL},
	 { "IProblem_GetDirichletMeshIndices", _wrap_IProblem_GetDirichletMeshIndices, METH_O, NULL},
	 { "IProblem_SetTimer", _wrap_IProblem_SetTimer, METH_VARARGS, NULL},
	 { "IProblem_SetMesh", _wrap_IProblem_SetMesh, METH_VARARGS, NULL},
	 { "IProblem_SetTag", _wrap_IProblem_SetTag, METH_VARARGS, NULL},
	 { "IProblem_AddDirichlet", _wrap_IProblem_AddDirichlet, METH_VARARGS, NULL},
	 { "IProblem_AddLoad", _wrap_IProblem_AddLoad, METH_VARARGS, NULL},
	 { "IProblem_Initialize", _wrap_IProblem_Initialize, METH_O, NULL},
	 { "IProblem_UpdateMeshValues", _wrap_IProblem_UpdateMeshValues, METH_VARARGS, NULL},
	 { "IProblem_swigregister", IProblem_swigregister, METH_O, NULL},
	 { "delete_IFluid", _wrap_delete_IFluid, METH_O, NULL},
	 { "IFluid_GetTemperature", _wrap_IFluid_GetTemperature, METH_O, NULL},
	 { "IFluid_GetPressure", _wrap_IFluid_GetPressure, METH_O, NULL},
	 { "IFluid_GetVelocity", _wrap_IFluid_GetVelocity, METH_O, NULL},
	 { "IFluid_SetTemperature", _wrap_IFluid_SetTemperature, METH_VARARGS, NULL},
	 { "IFluid_SetPressure", _wrap_IFluid_SetPressure, METH_VARARGS, NULL},
	 { "IFluid_Mass", _wrap_IFluid_Mass, METH_O, NULL},
	 { "IFluid_Stiffness", _wrap_IFluid_Stiffness, METH_O, NULL},
	 { "IFluid_Convection", _wrap_IFluid_Convection, METH_O, NULL},
	 { "IFluid_Stabilization", _wrap_IFluid_Stabilization, METH_O, NULL},
	 { "IFluid_LoadDistributedVolume", _wrap_IFluid_LoadDistributedVolume, METH_O, NULL},
	 { "IFluid_LoadDistributedVolumeStabilization", _wrap_IFluid_LoadDistributedVolumeStabilization, METH_O, NULL},
	 { "IFluid_Momentum", _wrap_IFluid_Momentum, METH_O, NULL},
	 { "IFluid_Velocity", _wrap_IFluid_Velocity, METH_O, NULL},
	 { "IFluid_swigregister", IFluid_swigregister, METH_O, NULL},
	 { "delete_IPressure", _wrap_delete_IPressure, METH_O, NULL},
	 { "IPressure_GetTemperature", _wrap_IPressure_GetTemperature, METH_O, NULL},
	 { "IPressure_GetPressure", _wrap_IPressure_GetPressure, METH_O, NULL},
	 { "IPressure_GetVelocity", _wrap_IPressure_GetVelocity, METH_O, NULL},
	 { "IPressure_SetTemperature", _wrap_IPressure_SetTemperature, METH_VARARGS, NULL},
	 { "IPressure_SetVelocity", _wrap_IPressure_SetVelocity, METH_VARARGS, NULL},
	 { "IPressure_Mass", _wrap_IPressure_Mass, METH_O, NULL},
	 { "IPressure_Stiffness", _wrap_IPressure_Stiffness, METH_O, NULL},
	 { "IPressure_Crossed", _wrap_IPressure_Crossed, METH_VARARGS, NULL},
	 { "IPressure_Stabilization", _wrap_IPressure_Stabilization, METH_VARARGS, NULL},
	 { "IPressure_LoadDistributedFaceFlux", _wrap_IPressure_LoadDistributedFaceFlux, METH_VARARGS, NULL},
	 { "IPressure_Pressure", _wrap_IPressure_Pressure, METH_O, NULL},
	 { "IPressure_swigregister", IPressure_swigregister, METH_O, NULL},
	 { "delete_IThermal", _wrap_delete_IThermal, METH_O, NULL},
	 { "IThermal_GetTemperature", _wrap_IThermal_GetTemperature, METH_O, NULL},
	 { "IThermal_GetPressure", _wrap_IThermal_GetPressure, METH_O, NULL},
	 { "IThermal_GetVelocity", _wrap_IThermal_GetVelocity, METH_O, NULL},
	 { "IThermal_SetPressure", _wrap_IThermal_SetPressure, METH_VARARGS, NULL},
	 { "IThermal_SetVelocity", _wrap_IThermal_SetVelocity, METH_VARARGS, NULL},
	 { "IThermal_Mass", _wrap_IThermal_Mass, METH_O, NULL},
	 { "IThermal_Stiffness", _wrap_IThermal_Stiffness, METH_O, NULL},
	 { "IThermal_Convection", _wrap_IThermal_Convection, METH_O, NULL},
	 { "IThermal_Stabilization", _wrap_IThermal_Stabilization, METH_O, NULL},
	 { "IThermal_Energy", _wrap_IThermal_Energy, METH_O, NULL},
	 { "IThermal_swigregister", IThermal_swigregister, METH_O, NULL},
	 { "CreateProblemThermal", _wrap_CreateProblemThermal, METH_VARARGS, NULL},
	 { "delete_ProblemThermal", _wrap_delete_ProblemThermal, METH_O, NULL},
	 { "ProblemThermal_Create", _wrap_ProblemThermal_Create, METH_NOARGS, NULL},
	 { "ProblemThermal_GetPtr", _wrap_ProblemThermal_GetPtr, METH_VARARGS, NULL},
	 { "ProblemThermal_GetNumberDof", _wrap_ProblemThermal_GetNumberDof, METH_O, NULL},
	 { "ProblemThermal_GetTotalDof", _wrap_ProblemThermal_GetTotalDof, METH_O, NULL},
	 { "ProblemThermal_GetPivot", _wrap_ProblemThermal_GetPivot, METH_O, NULL},
	 { "ProblemThermal_GetTimer", _wrap_ProblemThermal_GetTimer, METH_O, NULL},
	 { "ProblemThermal_GetTemperature", _wrap_ProblemThermal_GetTemperature, METH_O, NULL},
	 { "ProblemThermal_GetPressure", _wrap_ProblemThermal_GetPressure, METH_O, NULL},
	 { "ProblemThermal_GetVelocity", _wrap_ProblemThermal_GetVelocity, METH_O, NULL},
	 { "ProblemThermal_GetMesh", _wrap_ProblemThermal_GetMesh, METH_O, NULL},
	 { "ProblemThermal_GetType", _wrap_ProblemThermal_GetType, METH_O, NULL},
	 { "ProblemThermal_GetTag", _wrap_ProblemThermal_GetTag, METH_O, NULL},
	 { "ProblemThermal_GetDirichlets", _wrap_ProblemThermal_GetDirichlets, METH_O, NULL},
	 { "ProblemThermal_GetLoads", _wrap_ProblemThermal_GetLoads, METH_O, NULL},
	 { "ProblemThermal_GetDofMeshIndices", _wrap_ProblemThermal_GetDofMeshIndices, METH_O, NULL},
	 { "ProblemThermal_GetNodeMeshIndices", _wrap_ProblemThermal_GetNodeMeshIndices, METH_O, NULL},
	 { "ProblemThermal_GetDirichletMeshIndices", _wrap_ProblemThermal_GetDirichletMeshIndices, METH_O, NULL},
	 { "ProblemThermal_SetTimer", _wrap_ProblemThermal_SetTimer, METH_VARARGS, NULL},
	 { "ProblemThermal_SetPressure", _wrap_ProblemThermal_SetPressure, METH_VARARGS, NULL},
	 { "ProblemThermal_SetVelocity", _wrap_ProblemThermal_SetVelocity, METH_VARARGS, NULL},
	 { "ProblemThermal_SetMesh", _wrap_ProblemThermal_SetMesh, METH_VARARGS, NULL},
	 { "ProblemThermal_SetTag", _wrap_ProblemThermal_SetTag, METH_VARARGS, NULL},
	 { "ProblemThermal_AddDirichlet", _wrap_ProblemThermal_AddDirichlet, METH_VARARGS, NULL},
	 { "ProblemThermal_AddLoad", _wrap_ProblemThermal_AddLoad, METH_VARARGS, NULL},
	 { "ProblemThermal_Initialize", _wrap_ProblemThermal_Initialize, METH_O, NULL},
	 { "ProblemThermal_UpdateMeshValues", _wrap_ProblemThermal_UpdateMeshValues, METH_VARARGS, NULL},
	 { "ProblemThermal_Mass", _wrap_ProblemThermal_Mass, METH_O, NULL},
	 { "ProblemThermal_Stiffness", _wrap_ProblemThermal_Stiffness, METH_O, NULL},
	 { "ProblemThermal_Convection", _wrap_ProblemThermal_Convection, METH_O, NULL},
	 { "ProblemThermal_Stabilization", _wrap_ProblemThermal_Stabilization, METH_O, NULL},
	 { "ProblemThermal_Energy", _wrap_ProblemThermal_Energy, METH_O, NULL},
	 { "ProblemThermal_swigregister", ProblemThermal_swigregister, METH_O, NULL},
	 { "CreateProblemFluid", _wrap_CreateProblemFluid, METH_VARARGS, NULL},
	 { "delete_ProblemFluid", _wrap_delete_ProblemFluid, METH_O, NULL},
	 { "ProblemFluid_Create", _wrap_ProblemFluid_Create, METH_NOARGS, NULL},
	 { "ProblemFluid_GetPtr", _wrap_ProblemFluid_GetPtr, METH_VARARGS, NULL},
	 { "ProblemFluid_GetNumberDof", _wrap_ProblemFluid_GetNumberDof, METH_O, NULL},
	 { "ProblemFluid_GetTotalDof", _wrap_ProblemFluid_GetTotalDof, METH_O, NULL},
	 { "ProblemFluid_GetPivot", _wrap_ProblemFluid_GetPivot, METH_O, NULL},
	 { "ProblemFluid_GetTimer", _wrap_ProblemFluid_GetTimer, METH_O, NULL},
	 { "ProblemFluid_GetTemperature", _wrap_ProblemFluid_GetTemperature, METH_O, NULL},
	 { "ProblemFluid_GetPressure", _wrap_ProblemFluid_GetPressure, METH_O, NULL},
	 { "ProblemFluid_GetVelocity", _wrap_ProblemFluid_GetVelocity, METH_O, NULL},
	 { "ProblemFluid_GetMesh", _wrap_ProblemFluid_GetMesh, METH_O, NULL},
	 { "ProblemFluid_GetType", _wrap_ProblemFluid_GetType, METH_O, NULL},
	 { "ProblemFluid_GetTag", _wrap_ProblemFluid_GetTag, METH_O, NULL},
	 { "ProblemFluid_GetDirichlets", _wrap_ProblemFluid_GetDirichlets, METH_O, NULL},
	 { "ProblemFluid_GetLoads", _wrap_ProblemFluid_GetLoads, METH_O, NULL},
	 { "ProblemFluid_GetDofMeshIndices", _wrap_ProblemFluid_GetDofMeshIndices, METH_O, NULL},
	 { "ProblemFluid_GetNodeMeshIndices", _wrap_ProblemFluid_GetNodeMeshIndices, METH_O, NULL},
	 { "ProblemFluid_GetDirichletMeshIndices", _wrap_ProblemFluid_GetDirichletMeshIndices, METH_O, NULL},
	 { "ProblemFluid_SetTimer", _wrap_ProblemFluid_SetTimer, METH_VARARGS, NULL},
	 { "ProblemFluid_SetTemperature", _wrap_ProblemFluid_SetTemperature, METH_VARARGS, NULL},
	 { "ProblemFluid_SetPressure", _wrap_ProblemFluid_SetPressure, METH_VARARGS, NULL},
	 { "ProblemFluid_SetMesh", _wrap_ProblemFluid_SetMesh, METH_VARARGS, NULL},
	 { "ProblemFluid_SetTag", _wrap_ProblemFluid_SetTag, METH_VARARGS, NULL},
	 { "ProblemFluid_AddDirichlet", _wrap_ProblemFluid_AddDirichlet, METH_VARARGS, NULL},
	 { "ProblemFluid_AddLoad", _wrap_ProblemFluid_AddLoad, METH_VARARGS, NULL},
	 { "ProblemFluid_Initialize", _wrap_ProblemFluid_Initialize, METH_O, NULL},
	 { "ProblemFluid_UpdateMeshValues", _wrap_ProblemFluid_UpdateMeshValues, METH_VARARGS, NULL},
	 { "ProblemFluid_UpdateMeshValuesMomentum", _wrap_ProblemFluid_UpdateMeshValuesMomentum, METH_VARARGS, NULL},
	 { "ProblemFluid_Mass", _wrap_ProblemFluid_Mass, METH_O, NULL},
	 { "ProblemFluid_Stiffness", _wrap_ProblemFluid_Stiffness, METH_O, NULL},
	 { "ProblemFluid_Convection", _wrap_ProblemFluid_Convection, METH_O, NULL},
	 { "ProblemFluid_Stabilization", _wrap_ProblemFluid_Stabilization, METH_O, NULL},
	 { "ProblemFluid_LoadDistributedVolume", _wrap_ProblemFluid_LoadDistributedVolume, METH_O, NULL},
	 { "ProblemFluid_LoadDistributedVolumeStabilization", _wrap_ProblemFluid_LoadDistributedVolumeStabilization, METH_O, NULL},
	 { "ProblemFluid_Momentum", _wrap_ProblemFluid_Momentum, METH_O, NULL},
	 { "ProblemFluid_Velocity", _wrap_ProblemFluid_Velocity, METH_O, NULL},
	 { "ProblemFluid_swigregister", ProblemFluid_swigregister, METH_O, NULL},
	 { "CreateProblemPressure", _wrap_CreateProblemPressure, METH_VARARGS, NULL},
	 { "delete_ProblemPressure", _wrap_delete_ProblemPressure, METH_O, NULL},
	 { "ProblemPressure_Create", _wrap_ProblemPressure_Create, METH_NOARGS, NULL},
	 { "ProblemPressure_GetPtr", _wrap_ProblemPressure_GetPtr, METH_VARARGS, NULL},
	 { "ProblemPressure_GetNumberDof", _wrap_ProblemPressure_GetNumberDof, METH_O, NULL},
	 { "ProblemPressure_GetTotalDof", _wrap_ProblemPressure_GetTotalDof, METH_O, NULL},
	 { "ProblemPressure_GetPivot", _wrap_ProblemPressure_GetPivot, METH_O, NULL},
	 { "ProblemPressure_GetTimer", _wrap_ProblemPressure_GetTimer, METH_O, NULL},
	 { "ProblemPressure_GetTemperature", _wrap_ProblemPressure_GetTemperature, METH_O, NULL},
	 { "ProblemPressure_GetPressure", _wrap_ProblemPressure_GetPressure, METH_O, NULL},
	 { "ProblemPressure_GetVelocity", _wrap_ProblemPressure_GetVelocity, METH_O, NULL},
	 { "ProblemPressure_GetMesh", _wrap_ProblemPressure_GetMesh, METH_O, NULL},
	 { "ProblemPressure_GetType", _wrap_ProblemPressure_GetType, METH_O, NULL},
	 { "ProblemPressure_GetTag", _wrap_ProblemPressure_GetTag, METH_O, NULL},
	 { "ProblemPressure_GetDirichlets", _wrap_ProblemPressure_GetDirichlets, METH_O, NULL},
	 { "ProblemPressure_GetLoads", _wrap_ProblemPressure_GetLoads, METH_O, NULL},
	 { "ProblemPressure_GetDofMeshIndices", _wrap_ProblemPressure_GetDofMeshIndices, METH_O, NULL},
	 { "ProblemPressure_GetNodeMeshIndices", _wrap_ProblemPressure_GetNodeMeshIndices, METH_O, NULL},
	 { "ProblemPressure_GetDirichletMeshIndices", _wrap_ProblemPressure_GetDirichletMeshIndices, METH_O, NULL},
	 { "ProblemPressure_SetTimer", _wrap_ProblemPressure_SetTimer, METH_VARARGS, NULL},
	 { "ProblemPressure_SetTemperature", _wrap_ProblemPressure_SetTemperature, METH_VARARGS, NULL},
	 { "ProblemPressure_SetVelocity", _wrap_ProblemPressure_SetVelocity, METH_VARARGS, NULL},
	 { "ProblemPressure_SetMesh", _wrap_ProblemPressure_SetMesh, METH_VARARGS, NULL},
	 { "ProblemPressure_SetTag", _wrap_ProblemPressure_SetTag, METH_VARARGS, NULL},
	 { "ProblemPressure_AddDirichlet", _wrap_ProblemPressure_AddDirichlet, METH_VARARGS, NULL},
	 { "ProblemPressure_AddLoad", _wrap_ProblemPressure_AddLoad, METH_VARARGS, NULL},
	 { "ProblemPressure_Initialize", _wrap_ProblemPressure_Initialize, METH_O, NULL},
	 { "ProblemPressure_UpdateMeshValues", _wrap_ProblemPressure_UpdateMeshValues, METH_VARARGS, NULL},
	 { "ProblemPressure_Mass", _wrap_ProblemPressure_Mass, METH_O, NULL},
	 { "ProblemPressure_Stiffness", _wrap_ProblemPressure_Stiffness, METH_O, NULL},
	 { "ProblemPressure_Crossed", _wrap_ProblemPressure_Crossed, METH_VARARGS, NULL},
	 { "ProblemPressure_Stabilization", _wrap_ProblemPressure_Stabilization, METH_VARARGS, NULL},
	 { "ProblemPressure_LoadDistributedFaceFlux", _wrap_ProblemPressure_LoadDistributedFaceFlux, METH_VARARGS, NULL},
	 { "ProblemPressure_Pressure", _wrap_ProblemPressure_Pressure, METH_O, NULL},
	 { "ProblemPressure_swigregister", ProblemPressure_swigregister, METH_O, NULL},
	 { "Face_faceIndex_set", _wrap_Face_faceIndex_set, METH_VARARGS, NULL},
	 { "Face_faceIndex_get", _wrap_Face_faceIndex_get, METH_O, NULL},
	 { "Face_element_set", _wrap_Face_element_set, METH_VARARGS, NULL},
	 { "Face_element_get", _wrap_Face_element_get, METH_O, NULL},
	 { "new_Face", _wrap_new_Face, METH_NOARGS, NULL},
	 { "delete_Face", _wrap_delete_Face, METH_O, NULL},
	 { "Face_swigregister", Face_swigregister, METH_O, NULL},
	 { "Face_swiginit", Face_swiginit, METH_VARARGS, NULL},
	 { "NodeCmp___call__", _wrap_NodeCmp___call__, METH_VARARGS, NULL},
	 { "new_NodeCmp", _wrap_new_NodeCmp, METH_NOARGS, NULL},
	 { "delete_NodeCmp", _wrap_delete_NodeCmp, METH_O, NULL},
	 { "NodeCmp_swigregister", NodeCmp_swigregister, METH_O, NULL},
	 { "NodeCmp_swiginit", NodeCmp_swiginit, METH_VARARGS, NULL},
	 { "ElementCmp___call__", _wrap_ElementCmp___call__, METH_VARARGS, NULL},
	 { "new_ElementCmp", _wrap_new_ElementCmp, METH_NOARGS, NULL},
	 { "delete_ElementCmp", _wrap_delete_ElementCmp, METH_O, NULL},
	 { "ElementCmp_swigregister", ElementCmp_swigregister, METH_O, NULL},
	 { "ElementCmp_swiginit", ElementCmp_swiginit, METH_VARARGS, NULL},
	 { "FaceCmp___call__", _wrap_FaceCmp___call__, METH_VARARGS, NULL},
	 { "new_FaceCmp", _wrap_new_FaceCmp, METH_NOARGS, NULL},
	 { "delete_FaceCmp", _wrap_delete_FaceCmp, METH_O, NULL},
	 { "FaceCmp_swigregister", FaceCmp_swigregister, METH_O, NULL},
	 { "FaceCmp_swiginit", FaceCmp_swiginit, METH_VARARGS, NULL},
	 { "TypeCmp___call__", _wrap_TypeCmp___call__, METH_VARARGS, NULL},
	 { "new_TypeCmp", _wrap_new_TypeCmp, METH_NOARGS, NULL},
	 { "delete_TypeCmp", _wrap_delete_TypeCmp, METH_O, NULL},
	 { "TypeCmp_swigregister", TypeCmp_swigregister, METH_O, NULL},
	 { "TypeCmp_swiginit", TypeCmp_swiginit, METH_VARARGS, NULL},
	 { "SpecNodesByCoordinate_axis__set", _wrap_SpecNodesByCoordinate_axis__set, METH_VARARGS, NULL},
	 { "SpecNodesByCoordinate_axis__get", _wrap_SpecNodesByCoordinate_axis__get, METH_O, NULL},
	 { "SpecNodesByCoordinate_pos__set", _wrap_SpecNodesByCoordinate_pos__set, METH_VARARGS, NULL},
	 { "SpecNodesByCoordinate_pos__get", _wrap_SpecNodesByCoordinate_pos__get, METH_O, NULL},
	 { "SpecNodesByCoordinate_tol__set", _wrap_SpecNodesByCoordinate_tol__set, METH_VARARGS, NULL},
	 { "SpecNodesByCoordinate_tol__get", _wrap_SpecNodesByCoordinate_tol__get, METH_O, NULL},
	 { "SpecNodesByCoordinate_basis__set", _wrap_SpecNodesByCoordinate_basis__set, METH_VARARGS, NULL},
	 { "SpecNodesByCoordinate_basis__get", _wrap_SpecNodesByCoordinate_basis__get, METH_O, NULL},
	 { "new_SpecNodesByCoordinate", _wrap_new_SpecNodesByCoordinate, METH_VARARGS, NULL},
	 { "SpecNodesByCoordinate_IsSatisfied", _wrap_SpecNodesByCoordinate_IsSatisfied, METH_VARARGS, NULL},
	 { "delete_SpecNodesByCoordinate", _wrap_delete_SpecNodesByCoordinate, METH_O, NULL},
	 { "SpecNodesByCoordinate_swigregister", SpecNodesByCoordinate_swigregister, METH_O, NULL},
	 { "SpecNodesByCoordinate_swiginit", SpecNodesByCoordinate_swiginit, METH_VARARGS, NULL},
	 { "SpecNodesByRange_axis__set", _wrap_SpecNodesByRange_axis__set, METH_VARARGS, NULL},
	 { "SpecNodesByRange_axis__get", _wrap_SpecNodesByRange_axis__get, METH_O, NULL},
	 { "SpecNodesByRange_min__set", _wrap_SpecNodesByRange_min__set, METH_VARARGS, NULL},
	 { "SpecNodesByRange_min__get", _wrap_SpecNodesByRange_min__get, METH_O, NULL},
	 { "SpecNodesByRange_max__set", _wrap_SpecNodesByRange_max__set, METH_VARARGS, NULL},
	 { "SpecNodesByRange_max__get", _wrap_SpecNodesByRange_max__get, METH_O, NULL},
	 { "SpecNodesByRange_tol__set", _wrap_SpecNodesByRange_tol__set, METH_VARARGS, NULL},
	 { "SpecNodesByRange_tol__get", _wrap_SpecNodesByRange_tol__get, METH_O, NULL},
	 { "SpecNodesByRange_basis__set", _wrap_SpecNodesByRange_basis__set, METH_VARARGS, NULL},
	 { "SpecNodesByRange_basis__get", _wrap_SpecNodesByRange_basis__get, METH_O, NULL},
	 { "new_SpecNodesByRange", _wrap_new_SpecNodesByRange, METH_VARARGS, NULL},
	 { "SpecNodesByRange_IsSatisfied", _wrap_SpecNodesByRange_IsSatisfied, METH_VARARGS, NULL},
	 { "delete_SpecNodesByRange", _wrap_delete_SpecNodesByRange, METH_O, NULL},
	 { "SpecNodesByRange_swigregister", SpecNodesByRange_swigregister, METH_O, NULL},
	 { "SpecNodesByRange_swiginit", SpecNodesByRange_swiginit, METH_VARARGS, NULL},
	 { "SpecNodesByTag_min__set", _wrap_SpecNodesByTag_min__set, METH_VARARGS, NULL},
	 { "SpecNodesByTag_min__get", _wrap_SpecNodesByTag_min__get, METH_O, NULL},
	 { "SpecNodesByTag_max__set", _wrap_SpecNodesByTag_max__set, METH_VARARGS, NULL},
	 { "SpecNodesByTag_max__get", _wrap_SpecNodesByTag_max__get, METH_O, NULL},
	 { "new_SpecNodesByTag", _wrap_new_SpecNodesByTag, METH_VARARGS, NULL},
	 { "SpecNodesByTag_IsSatisfied", _wrap_SpecNodesByTag_IsSatisfied, METH_VARARGS, NULL},
	 { "delete_SpecNodesByTag", _wrap_delete_SpecNodesByTag, METH_O, NULL},
	 { "SpecNodesByTag_swigregister", SpecNodesByTag_swigregister, METH_O, NULL},
	 { "SpecNodesByTag_swiginit", SpecNodesByTag_swiginit, METH_VARARGS, NULL},
	 { "SpecElementsByTag_min__set", _wrap_SpecElementsByTag_min__set, METH_VARARGS, NULL},
	 { "SpecElementsByTag_min__get", _wrap_SpecElementsByTag_min__get, METH_O, NULL},
	 { "SpecElementsByTag_max__set", _wrap_SpecElementsByTag_max__set, METH_VARARGS, NULL},
	 { "SpecElementsByTag_max__get", _wrap_SpecElementsByTag_max__get, METH_O, NULL},
	 { "new_SpecElementsByTag", _wrap_new_SpecElementsByTag, METH_VARARGS, NULL},
	 { "SpecElementsByTag_IsSatisfied", _wrap_SpecElementsByTag_IsSatisfied, METH_VARARGS, NULL},
	 { "delete_SpecElementsByTag", _wrap_delete_SpecElementsByTag, METH_O, NULL},
	 { "SpecElementsByTag_swigregister", SpecElementsByTag_swigregister, METH_O, NULL},
	 { "SpecElementsByTag_swiginit", SpecElementsByTag_swiginit, METH_VARARGS, NULL},
	 { "SpecElementsByType_selectionTypes__set", _wrap_SpecElementsByType_selectionTypes__set, METH_VARARGS, NULL},
	 { "SpecElementsByType_selectionTypes__get", _wrap_SpecElementsByType_selectionTypes__get, METH_O, NULL},
	 { "new_SpecElementsByType", _wrap_new_SpecElementsByType, METH_NOARGS, NULL},
	 { "SpecElementsByType_IsSatisfied", _wrap_SpecElementsByType_IsSatisfied, METH_VARARGS, NULL},
	 { "delete_SpecElementsByType", _wrap_delete_SpecElementsByType, METH_O, NULL},
	 { "SpecElementsByType_swigregister", SpecElementsByType_swigregister, METH_O, NULL},
	 { "SpecElementsByType_swiginit", SpecElementsByType_swiginit, METH_VARARGS, NULL},
	 { "FilterNodes", _wrap_FilterNodes, METH_VARARGS, NULL},
	 { "FilterNodesRemoveDuplicates", _wrap_FilterNodesRemoveDuplicates, METH_O, NULL},
	 { "FilterNodesByCoordinate", _wrap_FilterNodesByCoordinate, METH_VARARGS, NULL},
	 { "FilterNodesByRange", _wrap_FilterNodesByRange, METH_VARARGS, NULL},
	 { "FilterNodesByTag", _wrap_FilterNodesByTag, METH_VARARGS, NULL},
	 { "FilterNodesByElements", _wrap_FilterNodesByElements, METH_O, NULL},
	 { "FilterElements", _wrap_FilterElements, METH_VARARGS, NULL},
	 { "FilterElementsRemoveDuplicates", _wrap_FilterElementsRemoveDuplicates, METH_O, NULL},
	 { "FilterElementsByTag", _wrap_FilterElementsByTag, METH_VARARGS, NULL},
	 { "FilterElementsByType", _wrap_FilterElementsByType, METH_O, NULL},
	 { "FilterElementsByNodes", _wrap_FilterElementsByNodes, METH_O, NULL},
	 { NULL, NULL, 0, NULL }
};


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (BEGIN) -------- */

static void *_p_basis__CartesianTo_p_basis__IBasis(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((basis::IBasis *)  ((basis::Cartesian *) x));
}
static void *_p_basis__CylindricalTo_p_basis__IBasis(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((basis::IBasis *)  ((basis::Cylindrical *) x));
}
static void *_p_dive__elements__ElementHexaTo_p_dive__elements__IElement(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((dive::elements::IElement *)  ((dive::elements::ElementHexa *) x));
}
static void *_p_dive__loads__DirichletTo_p_dive__loads__IDirichlet(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((dive::loads::IDirichlet *)  ((dive::loads::Dirichlet *) x));
}
static void *_p_dive__loads__LoadDistributedFaceTo_p_dive__loads__ILoad(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((dive::loads::ILoad *)  ((dive::loads::LoadDistributedFace *) x));
}
static void *_p_dive__loads__LoadDistributedVolumeTo_p_dive__loads__ILoad(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((dive::loads::ILoad *)  ((dive::loads::LoadDistributedVolume *) x));
}
static void *_p_dive__meshes__MeshTo_p_dive__meshes__IMesh(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((dive::meshes::IMesh *)  ((dive::meshes::Mesh *) x));
}
static void *_p_dive__problems__ProblemFluidTo_p_dive__problems__IFluid(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((dive::problems::IFluid *)  ((dive::problems::ProblemFluid *) x));
}
static void *_p_dive__problems__ProblemPressureTo_p_dive__problems__IPressure(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((dive::problems::IPressure *)  ((dive::problems::ProblemPressure *) x));
}
static void *_p_dive__problems__IFluidTo_p_dive__problems__IProblem(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((dive::problems::IProblem *)  ((dive::problems::IFluid *) x));
}
static void *_p_dive__problems__IPressureTo_p_dive__problems__IProblem(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((dive::problems::IProblem *)  ((dive::problems::IPressure *) x));
}
static void *_p_dive__problems__IThermalTo_p_dive__problems__IProblem(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((dive::problems::IProblem *)  ((dive::problems::IThermal *) x));
}
static void *_p_dive__problems__ProblemFluidTo_p_dive__problems__IProblem(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((dive::problems::IProblem *) (dive::problems::IFluid *) ((dive::problems::ProblemFluid *) x));
}
static void *_p_dive__problems__ProblemPressureTo_p_dive__problems__IProblem(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((dive::problems::IProblem *) (dive::problems::IPressure *) ((dive::problems::ProblemPressure *) x));
}
static void *_p_dive__problems__ProblemThermalTo_p_dive__problems__IProblem(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((dive::problems::IProblem *) (dive::problems::IThermal *) ((dive::problems::ProblemThermal *) x));
}
static void *_p_dive__problems__ProblemThermalTo_p_dive__problems__IThermal(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((dive::problems::IThermal *)  ((dive::problems::ProblemThermal *) x));
}
static void *_p_dive__selection__SpecElementsByTagTo_p_dive__selection__SpecificationT_std__shared_ptrT_dive__elements__IElement_t_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((dive::selection::Specification< std::shared_ptr< dive::elements::IElement > > *)  ((dive::selection::SpecElementsByTag *) x));
}
static void *_p_dive__selection__SpecElementsByTypeTo_p_dive__selection__SpecificationT_std__shared_ptrT_dive__elements__IElement_t_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((dive::selection::Specification< std::shared_ptr< dive::elements::IElement > > *)  ((dive::selection::SpecElementsByType *) x));
}
static void *_p_dive__selection__SpecNodesByCoordinateTo_p_dive__selection__SpecificationT_std__shared_ptrT_nodes__INode_t_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((dive::selection::Specification< std::shared_ptr< nodes::INode > > *)  ((dive::selection::SpecNodesByCoordinate *) x));
}
static void *_p_dive__selection__SpecNodesByRangeTo_p_dive__selection__SpecificationT_std__shared_ptrT_nodes__INode_t_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((dive::selection::Specification< std::shared_ptr< nodes::INode > > *)  ((dive::selection::SpecNodesByRange *) x));
}
static void *_p_dive__selection__SpecNodesByTagTo_p_dive__selection__SpecificationT_std__shared_ptrT_nodes__INode_t_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((dive::selection::Specification< std::shared_ptr< nodes::INode > > *)  ((dive::selection::SpecNodesByTag *) x));
}
static void *_p_dive__timers__TimerStationaryTo_p_dive__timers__ITimer(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((dive::timers::ITimer *)  ((dive::timers::TimerStationary *) x));
}
static void *_p_dive__timers__TimerSteppedTo_p_dive__timers__ITimer(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((dive::timers::ITimer *)  ((dive::timers::TimerStepped *) x));
}
static void *_p_interpolation__InterpolationFixedTo_p_interpolation__IInterpolation(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((interpolation::IInterpolation *)  ((interpolation::InterpolationFixed *) x));
}
static void *_p_interpolation__InterpolationIDWTo_p_interpolation__IInterpolation(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((interpolation::IInterpolation *)  ((interpolation::InterpolationIDW *) x));
}
static void *_p_interpolation__InterpolationNNTo_p_interpolation__IInterpolation(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((interpolation::IInterpolation *)  ((interpolation::InterpolationNN *) x));
}
static void *_p_interpolation__InterpolationRBFTo_p_interpolation__IInterpolation(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((interpolation::IInterpolation *)  ((interpolation::InterpolationRBF *) x));
}
static void *_p_material__IMaterialTo_p_material__IBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((material::IBase *)  ((material::IMaterial *) x));
}
static void *_p_material__IMaterialFluidTo_p_material__IBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((material::IBase *) (material::IMaterial *) ((material::IMaterialFluid *) x));
}
static void *_p_material__IMaterialSolidTo_p_material__IBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((material::IBase *) (material::IMaterial *) ((material::IMaterialSolid *) x));
}
static void *_p_material__MaterialFluidTo_p_material__IBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((material::IBase *) (material::IMaterial *)(material::IMaterialFluid *) ((material::MaterialFluid *) x));
}
static void *_p_material__MaterialSolidTo_p_material__IBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((material::IBase *) (material::IMaterial *)(material::IMaterialSolid *) ((material::MaterialSolid *) x));
}
static void *_p_material__IMaterialFluidTo_p_material__IMaterial(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((material::IMaterial *)  ((material::IMaterialFluid *) x));
}
static void *_p_material__IMaterialSolidTo_p_material__IMaterial(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((material::IMaterial *)  ((material::IMaterialSolid *) x));
}
static void *_p_material__MaterialFluidTo_p_material__IMaterial(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((material::IMaterial *) (material::IMaterialFluid *) ((material::MaterialFluid *) x));
}
static void *_p_material__MaterialSolidTo_p_material__IMaterial(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((material::IMaterial *) (material::IMaterialSolid *) ((material::MaterialSolid *) x));
}
static void *_p_material__MaterialFluidTo_p_material__IMaterialFluid(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((material::IMaterialFluid *)  ((material::MaterialFluid *) x));
}
static void *_p_material__MaterialSolidTo_p_material__IMaterialSolid(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((material::IMaterialSolid *)  ((material::MaterialSolid *) x));
}
static void *_p_nodes__NodeTo_p_nodes__INode(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((nodes::INode *)  ((nodes::Node *) x));
}
static void *_p_quadrature__GaussHexaTo_p_quadrature__IGauss(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((quadrature::IGauss *)  ((quadrature::GaussHexa *) x));
}
static void *_p_quadrature__GaussLineTo_p_quadrature__IGauss(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((quadrature::IGauss *)  ((quadrature::GaussLine *) x));
}
static void *_p_quadrature__GaussRectTo_p_quadrature__IGauss(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((quadrature::IGauss *)  ((quadrature::GaussRect *) x));
}
static void *_p_std__shared_ptrT_basis__Cartesian_tTo_p_std__shared_ptrT_basis__IBasis_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new std::shared_ptr< basis::IBasis >(*(std::shared_ptr< basis::Cartesian > *)x);
}
static void *_p_std__shared_ptrT_basis__Cylindrical_tTo_p_std__shared_ptrT_basis__IBasis_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new std::shared_ptr< basis::IBasis >(*(std::shared_ptr< basis::Cylindrical > *)x);
}
static void *_p_std__shared_ptrT_dive__elements__ElementHexa_tTo_p_std__shared_ptrT_dive__elements__IElement_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new std::shared_ptr< dive::elements::IElement >(*(std::shared_ptr< dive::elements::ElementHexa > *)x);
}
static void *_p_std__shared_ptrT_dive__loads__Dirichlet_tTo_p_std__shared_ptrT_dive__loads__IDirichlet_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new std::shared_ptr< dive::loads::IDirichlet >(*(std::shared_ptr< dive::loads::Dirichlet > *)x);
}
static void *_p_std__shared_ptrT_dive__loads__LoadDistributedFace_tTo_p_std__shared_ptrT_dive__loads__ILoad_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new std::shared_ptr< dive::loads::ILoad >(*(std::shared_ptr< dive::loads::LoadDistributedFace > *)x);
}
static void *_p_std__shared_ptrT_dive__loads__LoadDistributedVolume_tTo_p_std__shared_ptrT_dive__loads__ILoad_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new std::shared_ptr< dive::loads::ILoad >(*(std::shared_ptr< dive::loads::LoadDistributedVolume > *)x);
}
static void *_p_std__shared_ptrT_dive__meshes__Mesh_tTo_p_std__shared_ptrT_dive__meshes__IMesh_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new std::shared_ptr< dive::meshes::IMesh >(*(std::shared_ptr< dive::meshes::Mesh > *)x);
}
static void *_p_std__shared_ptrT_dive__problems__ProblemFluid_tTo_p_std__shared_ptrT_dive__problems__IFluid_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new std::shared_ptr< dive::problems::IFluid >(*(std::shared_ptr< dive::problems::ProblemFluid > *)x);
}
static void *_p_std__shared_ptrT_dive__problems__ProblemPressure_tTo_p_std__shared_ptrT_dive__problems__IPressure_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new std::shared_ptr< dive::problems::IPressure >(*(std::shared_ptr< dive::problems::ProblemPressure > *)x);
}
static void *_p_std__shared_ptrT_dive__problems__IFluid_tTo_p_std__shared_ptrT_dive__problems__IProblem_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new std::shared_ptr< dive::problems::IProblem >(*(std::shared_ptr< dive::problems::IFluid > *)x);
}
static void *_p_std__shared_ptrT_dive__problems__IPressure_tTo_p_std__shared_ptrT_dive__problems__IProblem_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new std::shared_ptr< dive::problems::IProblem >(*(std::shared_ptr< dive::problems::IPressure > *)x);
}
static void *_p_std__shared_ptrT_dive__problems__IThermal_tTo_p_std__shared_ptrT_dive__problems__IProblem_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new std::shared_ptr< dive::problems::IProblem >(*(std::shared_ptr< dive::problems::IThermal > *)x);
}
static void *_p_std__shared_ptrT_dive__problems__ProblemFluid_tTo_p_std__shared_ptrT_dive__problems__IProblem_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new std::shared_ptr< dive::problems::IProblem >(*(std::shared_ptr< dive::problems::ProblemFluid > *)x);
}
static void *_p_std__shared_ptrT_dive__problems__ProblemPressure_tTo_p_std__shared_ptrT_dive__problems__IProblem_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new std::shared_ptr< dive::problems::IProblem >(*(std::shared_ptr< dive::problems::ProblemPressure > *)x);
}
static void *_p_std__shared_ptrT_dive__problems__ProblemThermal_tTo_p_std__shared_ptrT_dive__problems__IProblem_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new std::shared_ptr< dive::problems::IProblem >(*(std::shared_ptr< dive::problems::ProblemThermal > *)x);
}
static void *_p_std__shared_ptrT_dive__problems__ProblemThermal_tTo_p_std__shared_ptrT_dive__problems__IThermal_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new std::shared_ptr< dive::problems::IThermal >(*(std::shared_ptr< dive::problems::ProblemThermal > *)x);
}
static void *_p_std__shared_ptrT_dive__timers__TimerStationary_tTo_p_std__shared_ptrT_dive__timers__ITimer_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new std::shared_ptr< dive::timers::ITimer >(*(std::shared_ptr< dive::timers::TimerStationary > *)x);
}
static void *_p_std__shared_ptrT_dive__timers__TimerStepped_tTo_p_std__shared_ptrT_dive__timers__ITimer_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new std::shared_ptr< dive::timers::ITimer >(*(std::shared_ptr< dive::timers::TimerStepped > *)x);
}
static void *_p_std__shared_ptrT_interpolation__InterpolationFixed_tTo_p_std__shared_ptrT_interpolation__IInterpolation_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new std::shared_ptr< interpolation::IInterpolation >(*(std::shared_ptr< interpolation::InterpolationFixed > *)x);
}
static void *_p_std__shared_ptrT_interpolation__InterpolationIDW_tTo_p_std__shared_ptrT_interpolation__IInterpolation_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new std::shared_ptr< interpolation::IInterpolation >(*(std::shared_ptr< interpolation::InterpolationIDW > *)x);
}
static void *_p_std__shared_ptrT_interpolation__InterpolationNN_tTo_p_std__shared_ptrT_interpolation__IInterpolation_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new std::shared_ptr< interpolation::IInterpolation >(*(std::shared_ptr< interpolation::InterpolationNN > *)x);
}
static void *_p_std__shared_ptrT_interpolation__InterpolationRBF_tTo_p_std__shared_ptrT_interpolation__IInterpolation_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new std::shared_ptr< interpolation::IInterpolation >(*(std::shared_ptr< interpolation::InterpolationRBF > *)x);
}
static void *_p_std__shared_ptrT_material__IMaterial_tTo_p_std__shared_ptrT_material__IBase_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new std::shared_ptr< material::IBase >(*(std::shared_ptr< material::IMaterial > *)x);
}
static void *_p_std__shared_ptrT_material__IMaterialFluid_tTo_p_std__shared_ptrT_material__IBase_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new std::shared_ptr< material::IBase >(*(std::shared_ptr< material::IMaterialFluid > *)x);
}
static void *_p_std__shared_ptrT_material__IMaterialSolid_tTo_p_std__shared_ptrT_material__IBase_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new std::shared_ptr< material::IBase >(*(std::shared_ptr< material::IMaterialSolid > *)x);
}
static void *_p_std__shared_ptrT_material__MaterialFluid_tTo_p_std__shared_ptrT_material__IBase_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new std::shared_ptr< material::IBase >(*(std::shared_ptr< material::MaterialFluid > *)x);
}
static void *_p_std__shared_ptrT_material__MaterialSolid_tTo_p_std__shared_ptrT_material__IBase_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new std::shared_ptr< material::IBase >(*(std::shared_ptr< material::MaterialSolid > *)x);
}
static void *_p_std__shared_ptrT_material__IMaterialFluid_tTo_p_std__shared_ptrT_material__IMaterial_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new std::shared_ptr< material::IMaterial >(*(std::shared_ptr< material::IMaterialFluid > *)x);
}
static void *_p_std__shared_ptrT_material__IMaterialSolid_tTo_p_std__shared_ptrT_material__IMaterial_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new std::shared_ptr< material::IMaterial >(*(std::shared_ptr< material::IMaterialSolid > *)x);
}
static void *_p_std__shared_ptrT_material__MaterialFluid_tTo_p_std__shared_ptrT_material__IMaterial_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new std::shared_ptr< material::IMaterial >(*(std::shared_ptr< material::MaterialFluid > *)x);
}
static void *_p_std__shared_ptrT_material__MaterialSolid_tTo_p_std__shared_ptrT_material__IMaterial_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new std::shared_ptr< material::IMaterial >(*(std::shared_ptr< material::MaterialSolid > *)x);
}
static void *_p_std__shared_ptrT_material__MaterialFluid_tTo_p_std__shared_ptrT_material__IMaterialFluid_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new std::shared_ptr< material::IMaterialFluid >(*(std::shared_ptr< material::MaterialFluid > *)x);
}
static void *_p_std__shared_ptrT_material__MaterialSolid_tTo_p_std__shared_ptrT_material__IMaterialSolid_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new std::shared_ptr< material::IMaterialSolid >(*(std::shared_ptr< material::MaterialSolid > *)x);
}
static void *_p_std__shared_ptrT_nodes__Node_tTo_p_std__shared_ptrT_nodes__INode_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new std::shared_ptr< nodes::INode >(*(std::shared_ptr< nodes::Node > *)x);
}
static void *_p_std__shared_ptrT_quadrature__GaussHexa_tTo_p_std__shared_ptrT_quadrature__IGauss_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new std::shared_ptr< quadrature::IGauss >(*(std::shared_ptr< quadrature::GaussHexa > *)x);
}
static void *_p_std__shared_ptrT_quadrature__GaussLine_tTo_p_std__shared_ptrT_quadrature__IGauss_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new std::shared_ptr< quadrature::IGauss >(*(std::shared_ptr< quadrature::GaussLine > *)x);
}
static void *_p_std__shared_ptrT_quadrature__GaussRect_tTo_p_std__shared_ptrT_quadrature__IGauss_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new std::shared_ptr< quadrature::IGauss >(*(std::shared_ptr< quadrature::GaussRect > *)x);
}
static void *_p_std__shared_ptrT_values__ValueBool_tTo_p_std__shared_ptrT_values__IBool_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new std::shared_ptr< values::IBool >(*(std::shared_ptr< values::ValueBool > *)x);
}
static void *_p_std__shared_ptrT_values__ValueMatrix3DCongruent_tTo_p_std__shared_ptrT_values__IMatrix3D_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new std::shared_ptr< values::IMatrix3D >(*(std::shared_ptr< values::ValueMatrix3DCongruent > *)x);
}
static void *_p_std__shared_ptrT_values__ValueMatrix3DInterpolation_tTo_p_std__shared_ptrT_values__IMatrix3D_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new std::shared_ptr< values::IMatrix3D >(*(std::shared_ptr< values::ValueMatrix3DInterpolation > *)x);
}
static void *_p_std__shared_ptrT_values__ValueScalar_tTo_p_std__shared_ptrT_values__IScalar_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new std::shared_ptr< values::IScalar >(*(std::shared_ptr< values::ValueScalar > *)x);
}
static void *_p_std__shared_ptrT_values__ValueScalar1D_tTo_p_std__shared_ptrT_values__IScalar1D_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new std::shared_ptr< values::IScalar1D >(*(std::shared_ptr< values::ValueScalar1D > *)x);
}
static void *_p_std__shared_ptrT_values__ValueScalar1DFunction_tTo_p_std__shared_ptrT_values__IScalar1D_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new std::shared_ptr< values::IScalar1D >(*(std::shared_ptr< values::ValueScalar1DFunction > *)x);
}
static void *_p_std__shared_ptrT_values__ValueScalar2D_tTo_p_std__shared_ptrT_values__IScalar2D_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new std::shared_ptr< values::IScalar2D >(*(std::shared_ptr< values::ValueScalar2D > *)x);
}
static void *_p_std__shared_ptrT_values__ValueScalar2DFunction_tTo_p_std__shared_ptrT_values__IScalar2D_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new std::shared_ptr< values::IScalar2D >(*(std::shared_ptr< values::ValueScalar2DFunction > *)x);
}
static void *_p_std__shared_ptrT_values__ValueScalar3D_tTo_p_std__shared_ptrT_values__IScalar3D_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new std::shared_ptr< values::IScalar3D >(*(std::shared_ptr< values::ValueScalar3D > *)x);
}
static void *_p_std__shared_ptrT_values__ValueScalar3DCongruent_tTo_p_std__shared_ptrT_values__IScalar3D_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new std::shared_ptr< values::IScalar3D >(*(std::shared_ptr< values::ValueScalar3DCongruent > *)x);
}
static void *_p_std__shared_ptrT_values__ValueScalar3DFunction_tTo_p_std__shared_ptrT_values__IScalar3D_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new std::shared_ptr< values::IScalar3D >(*(std::shared_ptr< values::ValueScalar3DFunction > *)x);
}
static void *_p_std__shared_ptrT_values__ValueScalar3DInterpolation_tTo_p_std__shared_ptrT_values__IScalar3D_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new std::shared_ptr< values::IScalar3D >(*(std::shared_ptr< values::ValueScalar3DInterpolation > *)x);
}
static void *_p_std__shared_ptrT_values__ValueString_tTo_p_std__shared_ptrT_values__IString_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new std::shared_ptr< values::IString >(*(std::shared_ptr< values::ValueString > *)x);
}
static void *_p_std__shared_ptrT_values__IBool_tTo_p_std__shared_ptrT_values__IValue_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new std::shared_ptr< values::IValue >(*(std::shared_ptr< values::IBool > *)x);
}
static void *_p_std__shared_ptrT_values__IMatrix3D_tTo_p_std__shared_ptrT_values__IValue_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new std::shared_ptr< values::IValue >(*(std::shared_ptr< values::IMatrix3D > *)x);
}
static void *_p_std__shared_ptrT_values__IScalar_tTo_p_std__shared_ptrT_values__IValue_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new std::shared_ptr< values::IValue >(*(std::shared_ptr< values::IScalar > *)x);
}
static void *_p_std__shared_ptrT_values__IScalar1D_tTo_p_std__shared_ptrT_values__IValue_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new std::shared_ptr< values::IValue >(*(std::shared_ptr< values::IScalar1D > *)x);
}
static void *_p_std__shared_ptrT_values__IScalar2D_tTo_p_std__shared_ptrT_values__IValue_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new std::shared_ptr< values::IValue >(*(std::shared_ptr< values::IScalar2D > *)x);
}
static void *_p_std__shared_ptrT_values__IScalar3D_tTo_p_std__shared_ptrT_values__IValue_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new std::shared_ptr< values::IValue >(*(std::shared_ptr< values::IScalar3D > *)x);
}
static void *_p_std__shared_ptrT_values__IString_tTo_p_std__shared_ptrT_values__IValue_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new std::shared_ptr< values::IValue >(*(std::shared_ptr< values::IString > *)x);
}
static void *_p_std__shared_ptrT_values__IVector3D_tTo_p_std__shared_ptrT_values__IValue_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new std::shared_ptr< values::IValue >(*(std::shared_ptr< values::IVector3D > *)x);
}
static void *_p_std__shared_ptrT_values__ValueBool_tTo_p_std__shared_ptrT_values__IValue_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new std::shared_ptr< values::IValue >(*(std::shared_ptr< values::ValueBool > *)x);
}
static void *_p_std__shared_ptrT_values__ValueMatrix3DCongruent_tTo_p_std__shared_ptrT_values__IValue_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new std::shared_ptr< values::IValue >(*(std::shared_ptr< values::ValueMatrix3DCongruent > *)x);
}
static void *_p_std__shared_ptrT_values__ValueMatrix3DInterpolation_tTo_p_std__shared_ptrT_values__IValue_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new std::shared_ptr< values::IValue >(*(std::shared_ptr< values::ValueMatrix3DInterpolation > *)x);
}
static void *_p_std__shared_ptrT_values__ValueScalar_tTo_p_std__shared_ptrT_values__IValue_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new std::shared_ptr< values::IValue >(*(std::shared_ptr< values::ValueScalar > *)x);
}
static void *_p_std__shared_ptrT_values__ValueScalar1D_tTo_p_std__shared_ptrT_values__IValue_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new std::shared_ptr< values::IValue >(*(std::shared_ptr< values::ValueScalar1D > *)x);
}
static void *_p_std__shared_ptrT_values__ValueScalar1DFunction_tTo_p_std__shared_ptrT_values__IValue_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new std::shared_ptr< values::IValue >(*(std::shared_ptr< values::ValueScalar1DFunction > *)x);
}
static void *_p_std__shared_ptrT_values__ValueScalar2D_tTo_p_std__shared_ptrT_values__IValue_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new std::shared_ptr< values::IValue >(*(std::shared_ptr< values::ValueScalar2D > *)x);
}
static void *_p_std__shared_ptrT_values__ValueScalar2DFunction_tTo_p_std__shared_ptrT_values__IValue_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new std::shared_ptr< values::IValue >(*(std::shared_ptr< values::ValueScalar2DFunction > *)x);
}
static void *_p_std__shared_ptrT_values__ValueScalar3D_tTo_p_std__shared_ptrT_values__IValue_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new std::shared_ptr< values::IValue >(*(std::shared_ptr< values::ValueScalar3D > *)x);
}
static void *_p_std__shared_ptrT_values__ValueScalar3DCongruent_tTo_p_std__shared_ptrT_values__IValue_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new std::shared_ptr< values::IValue >(*(std::shared_ptr< values::ValueScalar3DCongruent > *)x);
}
static void *_p_std__shared_ptrT_values__ValueScalar3DFunction_tTo_p_std__shared_ptrT_values__IValue_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new std::shared_ptr< values::IValue >(*(std::shared_ptr< values::ValueScalar3DFunction > *)x);
}
static void *_p_std__shared_ptrT_values__ValueScalar3DInterpolation_tTo_p_std__shared_ptrT_values__IValue_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new std::shared_ptr< values::IValue >(*(std::shared_ptr< values::ValueScalar3DInterpolation > *)x);
}
static void *_p_std__shared_ptrT_values__ValueString_tTo_p_std__shared_ptrT_values__IValue_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new std::shared_ptr< values::IValue >(*(std::shared_ptr< values::ValueString > *)x);
}
static void *_p_std__shared_ptrT_values__ValueVector3D_tTo_p_std__shared_ptrT_values__IValue_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new std::shared_ptr< values::IValue >(*(std::shared_ptr< values::ValueVector3D > *)x);
}
static void *_p_std__shared_ptrT_values__ValueVector3DCongruent_tTo_p_std__shared_ptrT_values__IValue_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new std::shared_ptr< values::IValue >(*(std::shared_ptr< values::ValueVector3DCongruent > *)x);
}
static void *_p_std__shared_ptrT_values__ValueVector3D_tTo_p_std__shared_ptrT_values__IVector3D_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new std::shared_ptr< values::IVector3D >(*(std::shared_ptr< values::ValueVector3D > *)x);
}
static void *_p_std__shared_ptrT_values__ValueVector3DCongruent_tTo_p_std__shared_ptrT_values__IVector3D_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new std::shared_ptr< values::IVector3D >(*(std::shared_ptr< values::ValueVector3DCongruent > *)x);
}
static void *_p_values__ValueBoolTo_p_values__IBool(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((values::IBool *)  ((values::ValueBool *) x));
}
static void *_p_values__ValueMatrix3DCongruentTo_p_values__IMatrix3D(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((values::IMatrix3D *)  ((values::ValueMatrix3DCongruent *) x));
}
static void *_p_values__ValueMatrix3DInterpolationTo_p_values__IMatrix3D(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((values::IMatrix3D *)  ((values::ValueMatrix3DInterpolation *) x));
}
static void *_p_values__ValueScalarTo_p_values__IScalar(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((values::IScalar *)  ((values::ValueScalar *) x));
}
static void *_p_values__ValueScalar1DTo_p_values__IScalar1D(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((values::IScalar1D *)  ((values::ValueScalar1D *) x));
}
static void *_p_values__ValueScalar1DFunctionTo_p_values__IScalar1D(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((values::IScalar1D *)  ((values::ValueScalar1DFunction *) x));
}
static void *_p_values__ValueScalar2DTo_p_values__IScalar2D(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((values::IScalar2D *)  ((values::ValueScalar2D *) x));
}
static void *_p_values__ValueScalar2DFunctionTo_p_values__IScalar2D(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((values::IScalar2D *)  ((values::ValueScalar2DFunction *) x));
}
static void *_p_values__ValueScalar3DTo_p_values__IScalar3D(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((values::IScalar3D *)  ((values::ValueScalar3D *) x));
}
static void *_p_values__ValueScalar3DCongruentTo_p_values__IScalar3D(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((values::IScalar3D *)  ((values::ValueScalar3DCongruent *) x));
}
static void *_p_values__ValueScalar3DFunctionTo_p_values__IScalar3D(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((values::IScalar3D *)  ((values::ValueScalar3DFunction *) x));
}
static void *_p_values__ValueScalar3DInterpolationTo_p_values__IScalar3D(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((values::IScalar3D *)  ((values::ValueScalar3DInterpolation *) x));
}
static void *_p_values__ValueStringTo_p_values__IString(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((values::IString *)  ((values::ValueString *) x));
}
static void *_p_values__IBoolTo_p_values__IValue(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((values::IValue *)  ((values::IBool *) x));
}
static void *_p_values__IMatrix3DTo_p_values__IValue(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((values::IValue *)  ((values::IMatrix3D *) x));
}
static void *_p_values__IScalarTo_p_values__IValue(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((values::IValue *)  ((values::IScalar *) x));
}
static void *_p_values__IScalar1DTo_p_values__IValue(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((values::IValue *)  ((values::IScalar1D *) x));
}
static void *_p_values__IScalar2DTo_p_values__IValue(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((values::IValue *)  ((values::IScalar2D *) x));
}
static void *_p_values__IScalar3DTo_p_values__IValue(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((values::IValue *)  ((values::IScalar3D *) x));
}
static void *_p_values__IStringTo_p_values__IValue(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((values::IValue *)  ((values::IString *) x));
}
static void *_p_values__IVector3DTo_p_values__IValue(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((values::IValue *)  ((values::IVector3D *) x));
}
static void *_p_values__ValueBoolTo_p_values__IValue(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((values::IValue *) (values::IBool *) ((values::ValueBool *) x));
}
static void *_p_values__ValueMatrix3DCongruentTo_p_values__IValue(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((values::IValue *) (values::IMatrix3D *) ((values::ValueMatrix3DCongruent *) x));
}
static void *_p_values__ValueMatrix3DInterpolationTo_p_values__IValue(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((values::IValue *) (values::IMatrix3D *) ((values::ValueMatrix3DInterpolation *) x));
}
static void *_p_values__ValueScalarTo_p_values__IValue(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((values::IValue *) (values::IScalar *) ((values::ValueScalar *) x));
}
static void *_p_values__ValueScalar1DTo_p_values__IValue(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((values::IValue *) (values::IScalar1D *) ((values::ValueScalar1D *) x));
}
static void *_p_values__ValueScalar1DFunctionTo_p_values__IValue(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((values::IValue *) (values::IScalar1D *) ((values::ValueScalar1DFunction *) x));
}
static void *_p_values__ValueScalar2DTo_p_values__IValue(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((values::IValue *) (values::IScalar2D *) ((values::ValueScalar2D *) x));
}
static void *_p_values__ValueScalar2DFunctionTo_p_values__IValue(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((values::IValue *) (values::IScalar2D *) ((values::ValueScalar2DFunction *) x));
}
static void *_p_values__ValueScalar3DTo_p_values__IValue(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((values::IValue *) (values::IScalar3D *) ((values::ValueScalar3D *) x));
}
static void *_p_values__ValueScalar3DCongruentTo_p_values__IValue(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((values::IValue *) (values::IScalar3D *) ((values::ValueScalar3DCongruent *) x));
}
static void *_p_values__ValueScalar3DFunctionTo_p_values__IValue(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((values::IValue *) (values::IScalar3D *) ((values::ValueScalar3DFunction *) x));
}
static void *_p_values__ValueScalar3DInterpolationTo_p_values__IValue(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((values::IValue *) (values::IScalar3D *) ((values::ValueScalar3DInterpolation *) x));
}
static void *_p_values__ValueStringTo_p_values__IValue(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((values::IValue *) (values::IString *) ((values::ValueString *) x));
}
static void *_p_values__ValueVector3DTo_p_values__IValue(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((values::IValue *) (values::IVector3D *) ((values::ValueVector3D *) x));
}
static void *_p_values__ValueVector3DCongruentTo_p_values__IValue(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((values::IValue *) (values::IVector3D *) ((values::ValueVector3DCongruent *) x));
}
static void *_p_values__ValueVector3DTo_p_values__IVector3D(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((values::IVector3D *)  ((values::ValueVector3D *) x));
}
static void *_p_values__ValueVector3DCongruentTo_p_values__IVector3D(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((values::IVector3D *)  ((values::ValueVector3DCongruent *) x));
}
static swig_type_info _swigt__p_FunctionScalar = {"_p_FunctionScalar", "FunctionScalar *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_a_2__double = {"_p_a_2__double", "quadrature::Scalar (*)[2]|double (*)[2]", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_allocator_type = {"_p_allocator_type", "allocator_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_basis__Cartesian = {"_p_basis__Cartesian", "basis::Cartesian *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_basis__Cylindrical = {"_p_basis__Cylindrical", "basis::Cylindrical *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_basis__IBasis = {"_p_basis__IBasis", "basis::IBasis *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_char = {"_p_char", "char *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_difference_type = {"_p_difference_type", "difference_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_dive__DirichletMeshIndex = {"_p_dive__DirichletMeshIndex", "DirichletMeshIndex *|std::vector< dive::DirichletMeshIndex >::value_type *|dive::DirichletMeshIndex *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_dive__DofMeshIndex = {"_p_dive__DofMeshIndex", "DofMeshIndex *|std::vector< dive::DofMeshIndex >::value_type *|dive::DofMeshIndex *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_dive__NodeMeshIndex = {"_p_dive__NodeMeshIndex", "NodeMeshIndex *|std::vector< dive::NodeMeshIndex >::value_type *|dive::NodeMeshIndex *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_dive__elements__ElementHexa = {"_p_dive__elements__ElementHexa", "dive::elements::ElementHexa *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_dive__elements__ElementHexa__LinearFunctions = {"_p_dive__elements__ElementHexa__LinearFunctions", "dive::elements::ElementHexa::LinearFunctions *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_dive__elements__ElementHexa__QuadraticFunctions = {"_p_dive__elements__ElementHexa__QuadraticFunctions", "dive::elements::ElementHexa::QuadraticFunctions *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_dive__elements__IElement = {"_p_dive__elements__IElement", "dive::elements::IElement *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_dive__elements__IntegralAreaHelper = {"_p_dive__elements__IntegralAreaHelper", "dive::elements::IntegralAreaHelper *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_dive__elements__IntegralEdgeHelper = {"_p_dive__elements__IntegralEdgeHelper", "dive::elements::IntegralEdgeHelper *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_dive__loads__Dirichlet = {"_p_dive__loads__Dirichlet", "dive::loads::Dirichlet *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_dive__loads__IDirichlet = {"_p_dive__loads__IDirichlet", "dive::loads::IDirichlet *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_dive__loads__ILoad = {"_p_dive__loads__ILoad", "dive::loads::ILoad *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_dive__loads__LoadDistributedFace = {"_p_dive__loads__LoadDistributedFace", "dive::loads::LoadDistributedFace *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_dive__loads__LoadDistributedVolume = {"_p_dive__loads__LoadDistributedVolume", "dive::loads::LoadDistributedVolume *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_dive__meshes__IMesh = {"_p_dive__meshes__IMesh", "dive::meshes::IMesh *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_dive__meshes__Mesh = {"_p_dive__meshes__Mesh", "dive::meshes::Mesh *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_dive__problems__IFluid = {"_p_dive__problems__IFluid", "dive::problems::IFluid *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_dive__problems__IPressure = {"_p_dive__problems__IPressure", "dive::problems::IPressure *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_dive__problems__IProblem = {"_p_dive__problems__IProblem", "dive::problems::IProblem *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_dive__problems__IThermal = {"_p_dive__problems__IThermal", "dive::problems::IThermal *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_dive__problems__ProblemFluid = {"_p_dive__problems__ProblemFluid", "dive::problems::ProblemFluid *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_dive__problems__ProblemPressure = {"_p_dive__problems__ProblemPressure", "dive::problems::ProblemPressure *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_dive__problems__ProblemThermal = {"_p_dive__problems__ProblemThermal", "dive::problems::ProblemThermal *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_dive__selection__ElementCmp = {"_p_dive__selection__ElementCmp", "dive::selection::ElementCmp *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_dive__selection__Face = {"_p_dive__selection__Face", "dive::selection::Face *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_dive__selection__FaceCmp = {"_p_dive__selection__FaceCmp", "dive::selection::FaceCmp *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_dive__selection__NodeCmp = {"_p_dive__selection__NodeCmp", "dive::selection::NodeCmp *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_dive__selection__SpecElementsByTag = {"_p_dive__selection__SpecElementsByTag", "dive::selection::SpecElementsByTag *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_dive__selection__SpecElementsByType = {"_p_dive__selection__SpecElementsByType", "dive::selection::SpecElementsByType *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_dive__selection__SpecNodesByCoordinate = {"_p_dive__selection__SpecNodesByCoordinate", "dive::selection::SpecNodesByCoordinate *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_dive__selection__SpecNodesByRange = {"_p_dive__selection__SpecNodesByRange", "dive::selection::SpecNodesByRange *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_dive__selection__SpecNodesByTag = {"_p_dive__selection__SpecNodesByTag", "dive::selection::SpecNodesByTag *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_dive__selection__SpecificationT_std__shared_ptrT_dive__elements__IElement_t_t = {"_p_dive__selection__SpecificationT_std__shared_ptrT_dive__elements__IElement_t_t", "dive::selection::Specification< IElementPtr > *|dive::selection::Specification< std::shared_ptr< dive::elements::IElement > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_dive__selection__SpecificationT_std__shared_ptrT_nodes__INode_t_t = {"_p_dive__selection__SpecificationT_std__shared_ptrT_nodes__INode_t_t", "dive::selection::Specification< INodePtr > *|dive::selection::Specification< std::shared_ptr< nodes::INode > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_dive__selection__TypeCmp = {"_p_dive__selection__TypeCmp", "dive::selection::TypeCmp *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_dive__timers__ITimer = {"_p_dive__timers__ITimer", "dive::timers::ITimer *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_dive__timers__TimerStationary = {"_p_dive__timers__TimerStationary", "dive::timers::TimerStationary *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_dive__timers__TimerStepped = {"_p_dive__timers__TimerStepped", "dive::timers::TimerStepped *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_double = {"_p_double", "Scalar *|basis::Scalar *|eilig::Scalar *|interpolation::Scalar *|material::Scalar *|nodes::Scalar *|quadrature::Scalar *|values::Scalar *|double *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_eilig__Ellpack = {"_p_eilig__Ellpack", "Sparse *|eilig::Ellpack *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_eilig__Matrix = {"_p_eilig__Matrix", "Matrix *|basis::Matrix *|interpolation::Matrix *|material::Matrix *|nodes::Matrix *|values::Matrix *|eilig::Matrix *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_eilig__Vector = {"_p_eilig__Vector", "Vector *|basis::Vector *|interpolation::Vector *|nodes::Vector *|quadrature::Vector *|values::Vector *|eilig::Vector *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_f_double__double = {"_p_f_double__double", "values::Function_S_S|values::Scalar (*)(values::Scalar)|double (*)(double)", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_f_double_double__double = {"_p_f_double_double__double", "values::Function_S_SS|values::Scalar (*)(values::Scalar,values::Scalar)|double (*)(double,double)", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_f_double_double_double__double = {"_p_f_double_double_double__double", "Scalar (*)(Scalar,Scalar,Scalar)|values::Function_S_SSS|values::Scalar (*)(values::Scalar,values::Scalar,values::Scalar)|double (*)(double,double,double)", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_f_long_long___size_t_double__long_long = {"_p_f_long_long___size_t_double__long_long", "CallbackIterative|long long (*)(long long,::size_t,double)", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_interpolation__IInterpolation = {"_p_interpolation__IInterpolation", "interpolation::IInterpolation *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_interpolation__InterpolationFixed = {"_p_interpolation__InterpolationFixed", "interpolation::InterpolationFixed *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_interpolation__InterpolationIDW = {"_p_interpolation__InterpolationIDW", "interpolation::InterpolationIDW *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_interpolation__InterpolationNN = {"_p_interpolation__InterpolationNN", "interpolation::InterpolationNN *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_interpolation__InterpolationRBF = {"_p_interpolation__InterpolationRBF", "interpolation::InterpolationRBF *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_kdtree__TreePtr = {"_p_kdtree__TreePtr", "interpolation::TreePtr *|kdtree::TreePtr *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_long_long = {"_p_long_long", "Status *|eilig::Status *|interpolation::Status *|material::Status *|values::Status *|long long *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_material__IBase = {"_p_material__IBase", "material::IBase *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_material__IMaterial = {"_p_material__IMaterial", "material::IMaterial *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_material__IMaterialFluid = {"_p_material__IMaterialFluid", "material::IMaterialFluid *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_material__IMaterialSolid = {"_p_material__IMaterialSolid", "material::IMaterialSolid *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_material__MaterialFluid = {"_p_material__MaterialFluid", "material::MaterialFluid *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_material__MaterialSolid = {"_p_material__MaterialSolid", "material::MaterialSolid *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_nodes__INode = {"_p_nodes__INode", "nodes::INode *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_nodes__Node = {"_p_nodes__Node", "nodes::Node *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_PyObject = {"_p_p_PyObject", "PyObject **", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_quadrature__GaussHexa = {"_p_quadrature__GaussHexa", "quadrature::GaussHexa *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_quadrature__GaussLine = {"_p_quadrature__GaussLine", "quadrature::GaussLine *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_quadrature__GaussRect = {"_p_quadrature__GaussRect", "quadrature::GaussRect *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_quadrature__IGauss = {"_p_quadrature__IGauss", "quadrature::IGauss *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_size_t = {"_p_size_t", "Axis *|CacheIndex *|Dimension *|DirichletIndex *|DofIndex *|EdgeIndex *|ElementIndex *|FaceIndex *|Index *|NodeIndex *|Number *|NumberCols *|NumberDof *|NumberEdges *|NumberFaces *|NumberNodes *|NumberRows *|Tag *|Type *|basis::Axis *|basis::Dimension *|basis::Index *|basis::Tag *|basis::Type *|dive::elements::Order *|dive::elements::Parametric *|eilig::Axis *|eilig::Index *|eilig::NumberCols *|eilig::NumberRows *|interpolation::Dimension *|interpolation::Index *|interpolation::NumberNodes *|interpolation::Type *|material::Tag *|material::Type *|nodes::Dimension *|nodes::DofIndex *|nodes::Index *|nodes::Number *|nodes::NumberDof *|nodes::Tag *|quadrature::Counter *|quadrature::Index *|quadrature::Quadrature *|std::size_t *|values::DofIndex *|values::ElementIndex *|values::Tag *|values::Type *|::size_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_size_type = {"_p_size_type", "size_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__allocatorT_dive__DirichletMeshIndex_t = {"_p_std__allocatorT_dive__DirichletMeshIndex_t", "std::vector< dive::DirichletMeshIndex >::allocator_type *|std::allocator< dive::DirichletMeshIndex > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__allocatorT_dive__DofMeshIndex_t = {"_p_std__allocatorT_dive__DofMeshIndex_t", "std::vector< dive::DofMeshIndex >::allocator_type *|std::allocator< dive::DofMeshIndex > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__allocatorT_dive__NodeMeshIndex_t = {"_p_std__allocatorT_dive__NodeMeshIndex_t", "std::vector< dive::NodeMeshIndex >::allocator_type *|std::allocator< dive::NodeMeshIndex > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__allocatorT_double_t = {"_p_std__allocatorT_double_t", "std::vector< double >::allocator_type *|std::allocator< double > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__allocatorT_std__shared_ptrT_basis__IBasis_t_t = {"_p_std__allocatorT_std__shared_ptrT_basis__IBasis_t_t", "std::vector< std::shared_ptr< basis::IBasis > >::allocator_type *|std::allocator< std::shared_ptr< basis::IBasis > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__allocatorT_std__shared_ptrT_dive__elements__IElement_t_t = {"_p_std__allocatorT_std__shared_ptrT_dive__elements__IElement_t_t", "std::vector< std::shared_ptr< dive::elements::IElement > >::allocator_type *|std::allocator< std::shared_ptr< dive::elements::IElement > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__allocatorT_std__shared_ptrT_dive__loads__IDirichlet_t_t = {"_p_std__allocatorT_std__shared_ptrT_dive__loads__IDirichlet_t_t", "std::vector< std::shared_ptr< dive::loads::IDirichlet > >::allocator_type *|std::allocator< std::shared_ptr< dive::loads::IDirichlet > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__allocatorT_std__shared_ptrT_dive__loads__ILoad_t_t = {"_p_std__allocatorT_std__shared_ptrT_dive__loads__ILoad_t_t", "std::vector< std::shared_ptr< dive::loads::ILoad > >::allocator_type *|std::allocator< std::shared_ptr< dive::loads::ILoad > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__allocatorT_std__shared_ptrT_dive__meshes__IMesh_t_t = {"_p_std__allocatorT_std__shared_ptrT_dive__meshes__IMesh_t_t", "std::vector< std::shared_ptr< dive::meshes::IMesh > >::allocator_type *|std::allocator< std::shared_ptr< dive::meshes::IMesh > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__allocatorT_std__shared_ptrT_nodes__INode_t_t = {"_p_std__allocatorT_std__shared_ptrT_nodes__INode_t_t", "std::vector< std::shared_ptr< nodes::INode > >::allocator_type *|std::allocator< std::shared_ptr< nodes::INode > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__allocatorT_std__size_t_t = {"_p_std__allocatorT_std__size_t_t", "std::vector< ::size_t >::allocator_type *|std::allocator< ::size_t > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__allocatorT_std__vectorT_dive__NodeMeshIndex_t_t = {"_p_std__allocatorT_std__vectorT_dive__NodeMeshIndex_t_t", "std::vector< std::vector< dive::NodeMeshIndex > >::allocator_type *|std::allocator< std::vector< dive::NodeMeshIndex,std::allocator< dive::NodeMeshIndex > > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__allocatorT_std__vectorT_double_t_t = {"_p_std__allocatorT_std__vectorT_double_t_t", "std::vector< std::vector< double > >::allocator_type *|std::allocator< std::vector< double,std::allocator< double > > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__invalid_argument = {"_p_std__invalid_argument", "std::invalid_argument *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__mapT_long_long_std__string_t = {"_p_std__mapT_long_long_std__string_t", "std::map< eilig::Status,eilig::String > *|std::map< long long,std::string > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__setT_dive__selection__Face_dive__selection__FaceCmp_std__allocatorT_dive__selection__Face_t_t = {"_p_std__setT_dive__selection__Face_dive__selection__FaceCmp_std__allocatorT_dive__selection__Face_t_t", "dive::selection::SelectionFaces *|std::set< dive::selection::Face,dive::selection::FaceCmp,std::allocator< dive::selection::Face > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__setT_std__shared_ptrT_dive__elements__IElement_t_dive__selection__ElementCmp_std__allocatorT_std__shared_ptrT_dive__elements__IElement_t_t_t = {"_p_std__setT_std__shared_ptrT_dive__elements__IElement_t_dive__selection__ElementCmp_std__allocatorT_std__shared_ptrT_dive__elements__IElement_t_t_t", "dive::selection::SelectionElements *|std::set< std::shared_ptr< dive::elements::IElement >,dive::selection::ElementCmp,std::allocator< std::shared_ptr< dive::elements::IElement > > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__setT_std__shared_ptrT_nodes__INode_t_dive__selection__NodeCmp_std__allocatorT_std__shared_ptrT_nodes__INode_t_t_t = {"_p_std__setT_std__shared_ptrT_nodes__INode_t_dive__selection__NodeCmp_std__allocatorT_std__shared_ptrT_nodes__INode_t_t_t", "dive::selection::SelectionNodes *|std::set< std::shared_ptr< nodes::INode >,dive::selection::NodeCmp,std::allocator< std::shared_ptr< nodes::INode > > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__setT_std__size_t_dive__selection__TypeCmp_std__allocatorT_std__size_t_t_t = {"_p_std__setT_std__size_t_dive__selection__TypeCmp_std__allocatorT_std__size_t_t_t", "dive::selection::SelectionTypes *|std::set< ::size_t,dive::selection::TypeCmp,std::allocator< ::size_t > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__shared_ptrT_basis__Cartesian_const_t = {"_p_std__shared_ptrT_basis__Cartesian_const_t", "ConstCartesianPtr *|basis::ConstCartesianPtr *|std::shared_ptr< basis::Cartesian const > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__shared_ptrT_basis__Cartesian_t = {"_p_std__shared_ptrT_basis__Cartesian_t", "CartesianPtr *|basis::CartesianPtr *|std::shared_ptr< basis::Cartesian > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__shared_ptrT_basis__Cylindrical_const_t = {"_p_std__shared_ptrT_basis__Cylindrical_const_t", "ConstCylindricalPtr *|basis::ConstCylindricalPtr *|std::shared_ptr< basis::Cylindrical const > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__shared_ptrT_basis__Cylindrical_t = {"_p_std__shared_ptrT_basis__Cylindrical_t", "CylindricalPtr *|basis::CylindricalPtr *|std::shared_ptr< basis::Cylindrical > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__shared_ptrT_basis__IBasis_const_t = {"_p_std__shared_ptrT_basis__IBasis_const_t", "ConstIBasisPtr *|basis::ConstIBasisPtr *|std::shared_ptr< basis::IBasis const > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__shared_ptrT_basis__IBasis_t = {"_p_std__shared_ptrT_basis__IBasis_t", "IBasisPtr *|basis::IBasisPtr *|interpolation::IBasisPtr *|std::shared_ptr< basis::IBasis > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__shared_ptrT_dive__elements__ElementHexa_const_t = {"_p_std__shared_ptrT_dive__elements__ElementHexa_const_t", "ConstElementHexaPtr *|std::shared_ptr< dive::elements::ElementHexa const > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__shared_ptrT_dive__elements__ElementHexa_t = {"_p_std__shared_ptrT_dive__elements__ElementHexa_t", "ElementHexaPtr *|std::shared_ptr< dive::elements::ElementHexa > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__shared_ptrT_dive__elements__IElement_const_t = {"_p_std__shared_ptrT_dive__elements__IElement_const_t", "ConstIElementPtr *|dive::elements::ConstIElementPtr *|std::shared_ptr< dive::elements::IElement const > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__shared_ptrT_dive__elements__IElement_t = {"_p_std__shared_ptrT_dive__elements__IElement_t", "IElementPtr *|dive::elements::IElementPtr *|nodes::IElementPtr *|values::IElementPtr *|std::shared_ptr< dive::elements::IElement > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__shared_ptrT_dive__loads__Dirichlet_const_t = {"_p_std__shared_ptrT_dive__loads__Dirichlet_const_t", "ConstDirichletPtr *|std::shared_ptr< dive::loads::Dirichlet const > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__shared_ptrT_dive__loads__Dirichlet_t = {"_p_std__shared_ptrT_dive__loads__Dirichlet_t", "DirichletPtr *|std::shared_ptr< dive::loads::Dirichlet > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__shared_ptrT_dive__loads__IDirichlet_const_t = {"_p_std__shared_ptrT_dive__loads__IDirichlet_const_t", "ConstIDirichletPtr *|std::shared_ptr< dive::loads::IDirichlet const > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__shared_ptrT_dive__loads__IDirichlet_t = {"_p_std__shared_ptrT_dive__loads__IDirichlet_t", "IDirichletPtr *|std::shared_ptr< dive::loads::IDirichlet > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__shared_ptrT_dive__loads__ILoad_const_t = {"_p_std__shared_ptrT_dive__loads__ILoad_const_t", "ConstILoadPtr *|std::shared_ptr< dive::loads::ILoad const > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__shared_ptrT_dive__loads__ILoad_t = {"_p_std__shared_ptrT_dive__loads__ILoad_t", "ILoadPtr *|std::shared_ptr< dive::loads::ILoad > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__shared_ptrT_dive__loads__LoadDistributedFace_const_t = {"_p_std__shared_ptrT_dive__loads__LoadDistributedFace_const_t", "ConstLoadDistributedFacePtr *|std::shared_ptr< dive::loads::LoadDistributedFace const > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__shared_ptrT_dive__loads__LoadDistributedFace_t = {"_p_std__shared_ptrT_dive__loads__LoadDistributedFace_t", "LoadDistributedFacePtr *|std::shared_ptr< dive::loads::LoadDistributedFace > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__shared_ptrT_dive__loads__LoadDistributedVolume_const_t = {"_p_std__shared_ptrT_dive__loads__LoadDistributedVolume_const_t", "ConstLoadDistributedVolumePtr *|std::shared_ptr< dive::loads::LoadDistributedVolume const > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__shared_ptrT_dive__loads__LoadDistributedVolume_t = {"_p_std__shared_ptrT_dive__loads__LoadDistributedVolume_t", "LoadDistributedVolumePtr *|std::shared_ptr< dive::loads::LoadDistributedVolume > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__shared_ptrT_dive__meshes__IMesh_const_t = {"_p_std__shared_ptrT_dive__meshes__IMesh_const_t", "ConstIMeshPtr *|std::shared_ptr< dive::meshes::IMesh const > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__shared_ptrT_dive__meshes__IMesh_t = {"_p_std__shared_ptrT_dive__meshes__IMesh_t", "IMeshPtr *|values::IMeshPtr *|std::shared_ptr< dive::meshes::IMesh > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__shared_ptrT_dive__meshes__Mesh_const_t = {"_p_std__shared_ptrT_dive__meshes__Mesh_const_t", "ConstMeshPtr *|std::shared_ptr< dive::meshes::Mesh const > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__shared_ptrT_dive__meshes__Mesh_t = {"_p_std__shared_ptrT_dive__meshes__Mesh_t", "MeshPtr *|std::shared_ptr< dive::meshes::Mesh > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__shared_ptrT_dive__problems__IFluid_t = {"_p_std__shared_ptrT_dive__problems__IFluid_t", "std::shared_ptr< dive::problems::IFluid > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__shared_ptrT_dive__problems__IPressure_t = {"_p_std__shared_ptrT_dive__problems__IPressure_t", "std::shared_ptr< dive::problems::IPressure > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__shared_ptrT_dive__problems__IProblem_const_t = {"_p_std__shared_ptrT_dive__problems__IProblem_const_t", "ConstIProblemPtr *|std::shared_ptr< dive::problems::IProblem const > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__shared_ptrT_dive__problems__IProblem_t = {"_p_std__shared_ptrT_dive__problems__IProblem_t", "IProblemPtr *|std::shared_ptr< dive::problems::IProblem > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__shared_ptrT_dive__problems__IThermal_t = {"_p_std__shared_ptrT_dive__problems__IThermal_t", "std::shared_ptr< dive::problems::IThermal > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__shared_ptrT_dive__problems__ProblemFluid_const_t = {"_p_std__shared_ptrT_dive__problems__ProblemFluid_const_t", "ConstProblemFluidPtr *|std::shared_ptr< dive::problems::ProblemFluid const > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__shared_ptrT_dive__problems__ProblemFluid_t = {"_p_std__shared_ptrT_dive__problems__ProblemFluid_t", "ProblemFluidPtr *|std::shared_ptr< dive::problems::ProblemFluid > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__shared_ptrT_dive__problems__ProblemPressure_const_t = {"_p_std__shared_ptrT_dive__problems__ProblemPressure_const_t", "ConstProblemPressurePtr *|std::shared_ptr< dive::problems::ProblemPressure const > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__shared_ptrT_dive__problems__ProblemPressure_t = {"_p_std__shared_ptrT_dive__problems__ProblemPressure_t", "ProblemPressurePtr *|std::shared_ptr< dive::problems::ProblemPressure > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__shared_ptrT_dive__problems__ProblemThermal_const_t = {"_p_std__shared_ptrT_dive__problems__ProblemThermal_const_t", "ConstProblemThermalPtr *|std::shared_ptr< dive::problems::ProblemThermal const > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__shared_ptrT_dive__problems__ProblemThermal_t = {"_p_std__shared_ptrT_dive__problems__ProblemThermal_t", "ProblemThermalPtr *|std::shared_ptr< dive::problems::ProblemThermal > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__shared_ptrT_dive__timers__ITimer_const_t = {"_p_std__shared_ptrT_dive__timers__ITimer_const_t", "ConstITimerPtr *|std::shared_ptr< dive::timers::ITimer const > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__shared_ptrT_dive__timers__ITimer_t = {"_p_std__shared_ptrT_dive__timers__ITimer_t", "ITimerPtr *|std::shared_ptr< dive::timers::ITimer > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__shared_ptrT_dive__timers__TimerStationary_const_t = {"_p_std__shared_ptrT_dive__timers__TimerStationary_const_t", "ConstTimerStationaryPtr *|std::shared_ptr< dive::timers::TimerStationary const > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__shared_ptrT_dive__timers__TimerStationary_t = {"_p_std__shared_ptrT_dive__timers__TimerStationary_t", "TimerStationaryPtr *|std::shared_ptr< dive::timers::TimerStationary > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__shared_ptrT_dive__timers__TimerStepped_const_t = {"_p_std__shared_ptrT_dive__timers__TimerStepped_const_t", "ConstTimerSteppedPtr *|std::shared_ptr< dive::timers::TimerStepped const > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__shared_ptrT_dive__timers__TimerStepped_t = {"_p_std__shared_ptrT_dive__timers__TimerStepped_t", "TimerSteppedPtr *|std::shared_ptr< dive::timers::TimerStepped > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__shared_ptrT_interpolation__IInterpolation_const_t = {"_p_std__shared_ptrT_interpolation__IInterpolation_const_t", "ConstIInterpolationPtr *|interpolation::ConstIInterpolationPtr *|std::shared_ptr< interpolation::IInterpolation const > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__shared_ptrT_interpolation__IInterpolation_t = {"_p_std__shared_ptrT_interpolation__IInterpolation_t", "IInterpolationPtr *|interpolation::IInterpolationPtr *|values::IInterpolationPtr *|std::shared_ptr< interpolation::IInterpolation > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__shared_ptrT_interpolation__InterpolationFixed_const_t = {"_p_std__shared_ptrT_interpolation__InterpolationFixed_const_t", "ConstInterpolationFixedPtr *|interpolation::ConstInterpolationFixedPtr *|std::shared_ptr< interpolation::InterpolationFixed const > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__shared_ptrT_interpolation__InterpolationFixed_t = {"_p_std__shared_ptrT_interpolation__InterpolationFixed_t", "InterpolationFixedPtr *|interpolation::InterpolationFixedPtr *|std::shared_ptr< interpolation::InterpolationFixed > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__shared_ptrT_interpolation__InterpolationIDW_const_t = {"_p_std__shared_ptrT_interpolation__InterpolationIDW_const_t", "ConstInterpolationIDWPtr *|interpolation::ConstInterpolationIDWPtr *|std::shared_ptr< interpolation::InterpolationIDW const > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__shared_ptrT_interpolation__InterpolationIDW_t = {"_p_std__shared_ptrT_interpolation__InterpolationIDW_t", "InterpolationIDWPtr *|interpolation::InterpolationIDWPtr *|std::shared_ptr< interpolation::InterpolationIDW > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__shared_ptrT_interpolation__InterpolationNN_const_t = {"_p_std__shared_ptrT_interpolation__InterpolationNN_const_t", "ConstInterpolationNNPtr *|interpolation::ConstInterpolationNNPtr *|std::shared_ptr< interpolation::InterpolationNN const > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__shared_ptrT_interpolation__InterpolationNN_t = {"_p_std__shared_ptrT_interpolation__InterpolationNN_t", "InterpolationNNPtr *|interpolation::InterpolationNNPtr *|std::shared_ptr< interpolation::InterpolationNN > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__shared_ptrT_interpolation__InterpolationRBF_const_t = {"_p_std__shared_ptrT_interpolation__InterpolationRBF_const_t", "ConstInterpolationRBFPtr *|interpolation::ConstInterpolationRBFPtr *|std::shared_ptr< interpolation::InterpolationRBF const > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__shared_ptrT_interpolation__InterpolationRBF_t = {"_p_std__shared_ptrT_interpolation__InterpolationRBF_t", "InterpolationRBFPtr *|interpolation::InterpolationRBFPtr *|std::shared_ptr< interpolation::InterpolationRBF > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__shared_ptrT_material__IBase_const_t = {"_p_std__shared_ptrT_material__IBase_const_t", "ConstIBasePtr *|material::ConstIBasePtr *|std::shared_ptr< material::IBase const > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__shared_ptrT_material__IBase_t = {"_p_std__shared_ptrT_material__IBase_t", "IBasePtr *|material::IBasePtr *|std::shared_ptr< material::IBase > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__shared_ptrT_material__IMaterialFluid_const_t = {"_p_std__shared_ptrT_material__IMaterialFluid_const_t", "ConstIMaterialFluidPtr *|material::ConstIMaterialFluidPtr *|std::shared_ptr< material::IMaterialFluid const > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__shared_ptrT_material__IMaterialFluid_t = {"_p_std__shared_ptrT_material__IMaterialFluid_t", "IMaterialFluidPtr *|material::IMaterialFluidPtr *|std::shared_ptr< material::IMaterialFluid > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__shared_ptrT_material__IMaterialSolid_const_t = {"_p_std__shared_ptrT_material__IMaterialSolid_const_t", "ConstIMaterialSolidPtr *|material::ConstIMaterialSolidPtr *|std::shared_ptr< material::IMaterialSolid const > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__shared_ptrT_material__IMaterialSolid_t = {"_p_std__shared_ptrT_material__IMaterialSolid_t", "IMaterialSolidPtr *|material::IMaterialSolidPtr *|std::shared_ptr< material::IMaterialSolid > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__shared_ptrT_material__IMaterial_const_t = {"_p_std__shared_ptrT_material__IMaterial_const_t", "ConstIMaterialPtr *|material::ConstIMaterialPtr *|std::shared_ptr< material::IMaterial const > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__shared_ptrT_material__IMaterial_t = {"_p_std__shared_ptrT_material__IMaterial_t", "IMaterialPtr *|material::IMaterialPtr *|std::shared_ptr< material::IMaterial > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__shared_ptrT_material__MaterialFluid_const_t = {"_p_std__shared_ptrT_material__MaterialFluid_const_t", "ConstMaterialFluidPtr *|material::ConstMaterialFluidPtr *|std::shared_ptr< material::MaterialFluid const > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__shared_ptrT_material__MaterialFluid_t = {"_p_std__shared_ptrT_material__MaterialFluid_t", "MaterialFluidPtr *|material::MaterialFluidPtr *|std::shared_ptr< material::MaterialFluid > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__shared_ptrT_material__MaterialSolid_const_t = {"_p_std__shared_ptrT_material__MaterialSolid_const_t", "ConstMaterialSolidPtr *|material::ConstMaterialSolidPtr *|std::shared_ptr< material::MaterialSolid const > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__shared_ptrT_material__MaterialSolid_t = {"_p_std__shared_ptrT_material__MaterialSolid_t", "MaterialSolidPtr *|material::MaterialSolidPtr *|std::shared_ptr< material::MaterialSolid > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__shared_ptrT_nodes__INode_const_t = {"_p_std__shared_ptrT_nodes__INode_const_t", "ConstINodePtr *|nodes::ConstINodePtr *|std::shared_ptr< nodes::INode const > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__shared_ptrT_nodes__INode_t = {"_p_std__shared_ptrT_nodes__INode_t", "INodePtr *|interpolation::INodePtr *|nodes::INodePtr *|values::INodePtr *|std::shared_ptr< nodes::INode > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__shared_ptrT_nodes__Node_const_t = {"_p_std__shared_ptrT_nodes__Node_const_t", "ConstNodePtr *|nodes::ConstNodePtr *|std::shared_ptr< nodes::Node const > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__shared_ptrT_nodes__Node_t = {"_p_std__shared_ptrT_nodes__Node_t", "NodePtr *|nodes::NodePtr *|std::shared_ptr< nodes::Node > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__shared_ptrT_quadrature__GaussHexa_const_t = {"_p_std__shared_ptrT_quadrature__GaussHexa_const_t", "ConstGaussHexaPtr *|quadrature::ConstGaussHexaPtr *|std::shared_ptr< quadrature::GaussHexa const > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__shared_ptrT_quadrature__GaussHexa_t = {"_p_std__shared_ptrT_quadrature__GaussHexa_t", "GaussHexaPtr *|quadrature::GaussHexaPtr *|std::shared_ptr< quadrature::GaussHexa > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__shared_ptrT_quadrature__GaussLine_const_t = {"_p_std__shared_ptrT_quadrature__GaussLine_const_t", "ConstGaussLinePtr *|quadrature::ConstGaussLinePtr *|std::shared_ptr< quadrature::GaussLine const > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__shared_ptrT_quadrature__GaussLine_t = {"_p_std__shared_ptrT_quadrature__GaussLine_t", "GaussLinePtr *|quadrature::GaussLinePtr *|std::shared_ptr< quadrature::GaussLine > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__shared_ptrT_quadrature__GaussRect_const_t = {"_p_std__shared_ptrT_quadrature__GaussRect_const_t", "ConstGaussRectPtr *|quadrature::ConstGaussRectPtr *|std::shared_ptr< quadrature::GaussRect const > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__shared_ptrT_quadrature__GaussRect_t = {"_p_std__shared_ptrT_quadrature__GaussRect_t", "GaussRectPtr *|quadrature::GaussRectPtr *|std::shared_ptr< quadrature::GaussRect > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__shared_ptrT_quadrature__IGauss_const_t = {"_p_std__shared_ptrT_quadrature__IGauss_const_t", "ConstIGaussPtr *|quadrature::ConstIGaussPtr *|std::shared_ptr< quadrature::IGauss const > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__shared_ptrT_quadrature__IGauss_t = {"_p_std__shared_ptrT_quadrature__IGauss_t", "IGaussPtr *|quadrature::IGaussPtr *|std::shared_ptr< quadrature::IGauss > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__shared_ptrT_values__IBool_t = {"_p_std__shared_ptrT_values__IBool_t", "IBoolPtr *|values::IBoolPtr *|std::shared_ptr< values::IBool > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__shared_ptrT_values__IMatrix3D_t = {"_p_std__shared_ptrT_values__IMatrix3D_t", "IMatrix3DPtr *|values::IMatrix3DPtr *|std::shared_ptr< values::IMatrix3D > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__shared_ptrT_values__IScalar1D_t = {"_p_std__shared_ptrT_values__IScalar1D_t", "IScalar1DPtr *|material::IScalar1DPtr *|values::IScalar1DPtr *|std::shared_ptr< values::IScalar1D > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__shared_ptrT_values__IScalar2D_t = {"_p_std__shared_ptrT_values__IScalar2D_t", "IScalar2DPtr *|material::IScalar2DPtr *|values::IScalar2DPtr *|std::shared_ptr< values::IScalar2D > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__shared_ptrT_values__IScalar3D_t = {"_p_std__shared_ptrT_values__IScalar3D_t", "IScalar3DPtr *|material::IScalar3DPtr *|values::IScalar3DPtr *|std::shared_ptr< values::IScalar3D > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__shared_ptrT_values__IScalar_t = {"_p_std__shared_ptrT_values__IScalar_t", "IScalarPtr *|values::IScalarPtr *|std::shared_ptr< values::IScalar > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__shared_ptrT_values__IString_t = {"_p_std__shared_ptrT_values__IString_t", "IStringPtr *|material::IStringPtr *|values::IStringPtr *|std::shared_ptr< values::IString > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__shared_ptrT_values__IValue_t = {"_p_std__shared_ptrT_values__IValue_t", "IValuePtr *|values::IValuePtr *|std::shared_ptr< values::IValue > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__shared_ptrT_values__IVector3D_t = {"_p_std__shared_ptrT_values__IVector3D_t", "IVector3DPtr *|values::IVector3DPtr *|std::shared_ptr< values::IVector3D > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__shared_ptrT_values__ValueBool_const_t = {"_p_std__shared_ptrT_values__ValueBool_const_t", "values::ConstValueBoolPtr *|std::shared_ptr< values::ValueBool const > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__shared_ptrT_values__ValueBool_t = {"_p_std__shared_ptrT_values__ValueBool_t", "ValueBoolPtr *|values::ValueBoolPtr *|std::shared_ptr< values::ValueBool > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__shared_ptrT_values__ValueMatrix3DCongruent_const_t = {"_p_std__shared_ptrT_values__ValueMatrix3DCongruent_const_t", "values::ConstValueMatrix3DCongruentPtr *|std::shared_ptr< values::ValueMatrix3DCongruent const > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__shared_ptrT_values__ValueMatrix3DCongruent_t = {"_p_std__shared_ptrT_values__ValueMatrix3DCongruent_t", "ValueMatrix3DCongruentPtr *|values::ValueMatrix3DCongruentPtr *|std::shared_ptr< values::ValueMatrix3DCongruent > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__shared_ptrT_values__ValueMatrix3DInterpolation_const_t = {"_p_std__shared_ptrT_values__ValueMatrix3DInterpolation_const_t", "values::ConstValueMatrix3DInterpolationPtr *|std::shared_ptr< values::ValueMatrix3DInterpolation const > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__shared_ptrT_values__ValueMatrix3DInterpolation_t = {"_p_std__shared_ptrT_values__ValueMatrix3DInterpolation_t", "ValueMatrix3DInterpolationPtr *|values::ValueMatrix3DInterpolationPtr *|std::shared_ptr< values::ValueMatrix3DInterpolation > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__shared_ptrT_values__ValueScalar1DFunction_const_t = {"_p_std__shared_ptrT_values__ValueScalar1DFunction_const_t", "values::ConstValueScalar1DFunctionPtr *|std::shared_ptr< values::ValueScalar1DFunction const > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__shared_ptrT_values__ValueScalar1DFunction_t = {"_p_std__shared_ptrT_values__ValueScalar1DFunction_t", "ValueScalar1DFunctionPtr *|values::ValueScalar1DFunctionPtr *|std::shared_ptr< values::ValueScalar1DFunction > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__shared_ptrT_values__ValueScalar1D_const_t = {"_p_std__shared_ptrT_values__ValueScalar1D_const_t", "values::ConstValueScalar1DPtr *|std::shared_ptr< values::ValueScalar1D const > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__shared_ptrT_values__ValueScalar1D_t = {"_p_std__shared_ptrT_values__ValueScalar1D_t", "ValueScalar1DPtr *|values::ValueScalar1DPtr *|std::shared_ptr< values::ValueScalar1D > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__shared_ptrT_values__ValueScalar2DFunction_const_t = {"_p_std__shared_ptrT_values__ValueScalar2DFunction_const_t", "values::ConstValueScalar2DFunctionPtr *|std::shared_ptr< values::ValueScalar2DFunction const > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__shared_ptrT_values__ValueScalar2DFunction_t = {"_p_std__shared_ptrT_values__ValueScalar2DFunction_t", "ValueScalar2DFunctionPtr *|values::ValueScalar2DFunctionPtr *|std::shared_ptr< values::ValueScalar2DFunction > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__shared_ptrT_values__ValueScalar2D_const_t = {"_p_std__shared_ptrT_values__ValueScalar2D_const_t", "values::ConstValueScalar2DPtr *|std::shared_ptr< values::ValueScalar2D const > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__shared_ptrT_values__ValueScalar2D_t = {"_p_std__shared_ptrT_values__ValueScalar2D_t", "ValueScalar2DPtr *|values::ValueScalar2DPtr *|std::shared_ptr< values::ValueScalar2D > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__shared_ptrT_values__ValueScalar3DCongruent_const_t = {"_p_std__shared_ptrT_values__ValueScalar3DCongruent_const_t", "values::ConstValueScalar3DCongruentPtr *|std::shared_ptr< values::ValueScalar3DCongruent const > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__shared_ptrT_values__ValueScalar3DCongruent_t = {"_p_std__shared_ptrT_values__ValueScalar3DCongruent_t", "ValueScalar3DCongruentPtr *|values::ValueScalar3DCongruentPtr *|std::shared_ptr< values::ValueScalar3DCongruent > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__shared_ptrT_values__ValueScalar3DFunction_const_t = {"_p_std__shared_ptrT_values__ValueScalar3DFunction_const_t", "values::ConstValueScalar3DFunctionPtr *|std::shared_ptr< values::ValueScalar3DFunction const > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__shared_ptrT_values__ValueScalar3DFunction_t = {"_p_std__shared_ptrT_values__ValueScalar3DFunction_t", "ValueScalar3DFunctionPtr *|values::ValueScalar3DFunctionPtr *|std::shared_ptr< values::ValueScalar3DFunction > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__shared_ptrT_values__ValueScalar3DInterpolation_const_t = {"_p_std__shared_ptrT_values__ValueScalar3DInterpolation_const_t", "values::ConstValueScalar3DInterpolationPtr *|std::shared_ptr< values::ValueScalar3DInterpolation const > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__shared_ptrT_values__ValueScalar3DInterpolation_t = {"_p_std__shared_ptrT_values__ValueScalar3DInterpolation_t", "ValueScalar3DInterpolationPtr *|values::ValueScalar3DInterpolationPtr *|std::shared_ptr< values::ValueScalar3DInterpolation > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__shared_ptrT_values__ValueScalar3D_const_t = {"_p_std__shared_ptrT_values__ValueScalar3D_const_t", "values::ConstValueScalar3DPtr *|std::shared_ptr< values::ValueScalar3D const > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__shared_ptrT_values__ValueScalar3D_t = {"_p_std__shared_ptrT_values__ValueScalar3D_t", "ValueScalar3DPtr *|values::ValueScalar3DPtr *|std::shared_ptr< values::ValueScalar3D > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__shared_ptrT_values__ValueScalar_const_t = {"_p_std__shared_ptrT_values__ValueScalar_const_t", "values::ConstValueScalarPtr *|std::shared_ptr< values::ValueScalar const > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__shared_ptrT_values__ValueScalar_t = {"_p_std__shared_ptrT_values__ValueScalar_t", "ValueScalarPtr *|values::ValueScalarPtr *|std::shared_ptr< values::ValueScalar > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__shared_ptrT_values__ValueString_const_t = {"_p_std__shared_ptrT_values__ValueString_const_t", "values::ConstValueStringPtr *|std::shared_ptr< values::ValueString const > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__shared_ptrT_values__ValueString_t = {"_p_std__shared_ptrT_values__ValueString_t", "ValueStringPtr *|values::ValueStringPtr *|std::shared_ptr< values::ValueString > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__shared_ptrT_values__ValueVector3DCongruent_const_t = {"_p_std__shared_ptrT_values__ValueVector3DCongruent_const_t", "values::ConstValueVector3DCongruentPtr *|std::shared_ptr< values::ValueVector3DCongruent const > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__shared_ptrT_values__ValueVector3DCongruent_t = {"_p_std__shared_ptrT_values__ValueVector3DCongruent_t", "ValueVector3DCongruentPtr *|values::ValueVector3DCongruentPtr *|std::shared_ptr< values::ValueVector3DCongruent > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__shared_ptrT_values__ValueVector3D_const_t = {"_p_std__shared_ptrT_values__ValueVector3D_const_t", "values::ConstValueVector3DPtr *|std::shared_ptr< values::ValueVector3D const > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__shared_ptrT_values__ValueVector3D_t = {"_p_std__shared_ptrT_values__ValueVector3D_t", "ValueVector3DPtr *|values::ValueVector3DPtr *|std::shared_ptr< values::ValueVector3D > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__string = {"_p_std__string", "String *|eilig::String *|interpolation::String *|material::String *|nodes::String *|values::String *|std::string *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_dive__DirichletMeshIndex_t = {"_p_std__vectorT_dive__DirichletMeshIndex_t", "DirichletMeshIndices *|dive::DirichletMeshIndices *|std::vector< dive::DirichletMeshIndex,std::allocator< dive::DirichletMeshIndex > > *|std::vector< dive::DirichletMeshIndex > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_dive__DofMeshIndex_t = {"_p_std__vectorT_dive__DofMeshIndex_t", "DofMeshIndices *|dive::DofMeshIndices *|std::vector< dive::DofMeshIndex,std::allocator< dive::DofMeshIndex > > *|std::vector< dive::DofMeshIndex > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_dive__NodeMeshIndex_t = {"_p_std__vectorT_dive__NodeMeshIndex_t", "std::vector< dive::NodeMeshIndex,std::allocator< dive::NodeMeshIndex > > *|std::vector< dive::NodeMeshIndex > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_double_t = {"_p_std__vectorT_double_t", "Scalars *|eilig::Scalars *|interpolation::Scalars *|material::Scalars *|quadrature::Weights *|std::vector< double,std::allocator< double > > *|values::Scalars *|std::vector< double > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_eilig__Ellpack_std__allocatorT_eilig__Ellpack_t_t = {"_p_std__vectorT_eilig__Ellpack_std__allocatorT_eilig__Ellpack_t_t", "eilig::Ellpacks *|std::vector< eilig::Ellpack,std::allocator< eilig::Ellpack > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_eilig__Matrix_std__allocatorT_eilig__Matrix_t_t = {"_p_std__vectorT_eilig__Matrix_std__allocatorT_eilig__Matrix_t_t", "eilig::Matrices *|material::Matrices *|nodes::Matrices *|values::Matrices *|std::vector< eilig::Matrix,std::allocator< eilig::Matrix > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_eilig__Vector_std__allocatorT_eilig__Vector_t_t = {"_p_std__vectorT_eilig__Vector_std__allocatorT_eilig__Vector_t_t", "eilig::Vectors *|interpolation::Vectors *|quadrature::Points *|values::Vectors *|std::vector< eilig::Vector,std::allocator< eilig::Vector > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_std__shared_ptrT_basis__IBasis_t_t = {"_p_std__vectorT_std__shared_ptrT_basis__IBasis_t_t", "std::vector< std::shared_ptr< basis::IBasis >,std::allocator< std::shared_ptr< basis::IBasis > > > *|std::vector< std::shared_ptr< basis::IBasis > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_std__shared_ptrT_dive__elements__IElement_t_t = {"_p_std__vectorT_std__shared_ptrT_dive__elements__IElement_t_t", "Elements *|nodes::Elements *|std::vector< std::shared_ptr< dive::elements::IElement >,std::allocator< std::shared_ptr< dive::elements::IElement > > > *|std::vector< std::shared_ptr< dive::elements::IElement > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_std__shared_ptrT_dive__loads__IDirichlet_t_t = {"_p_std__vectorT_std__shared_ptrT_dive__loads__IDirichlet_t_t", "Dirichlets *|std::vector< std::shared_ptr< dive::loads::IDirichlet >,std::allocator< std::shared_ptr< dive::loads::IDirichlet > > > *|std::vector< std::shared_ptr< dive::loads::IDirichlet > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_std__shared_ptrT_dive__loads__ILoad_t_t = {"_p_std__vectorT_std__shared_ptrT_dive__loads__ILoad_t_t", "Loads *|std::vector< std::shared_ptr< dive::loads::ILoad >,std::allocator< std::shared_ptr< dive::loads::ILoad > > > *|std::vector< std::shared_ptr< dive::loads::ILoad > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_std__shared_ptrT_dive__meshes__IMesh_t_t = {"_p_std__vectorT_std__shared_ptrT_dive__meshes__IMesh_t_t", "Meshes *|std::vector< std::shared_ptr< dive::meshes::IMesh >,std::allocator< std::shared_ptr< dive::meshes::IMesh > > > *|std::vector< std::shared_ptr< dive::meshes::IMesh > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_std__shared_ptrT_nodes__INode_t_t = {"_p_std__vectorT_std__shared_ptrT_nodes__INode_t_t", "Nodes *|interpolation::Nodes *|nodes::Nodes *|std::vector< std::shared_ptr< nodes::INode >,std::allocator< std::shared_ptr< nodes::INode > > > *|values::Nodes *|std::vector< std::shared_ptr< nodes::INode > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_std__size_t_t = {"_p_std__vectorT_std__size_t_t", "Indices *|eilig::Indices *|std::vector< ::size_t,std::allocator< ::size_t > > *|std::vector< std::size_t > *|std::vector< ::size_t > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_std__vectorT_dive__NodeMeshIndex_t_t = {"_p_std__vectorT_std__vectorT_dive__NodeMeshIndex_t_t", "NodeMeshIndices *|dive::NodeMeshIndices *|std::vector< std::vector< dive::NodeMeshIndex,std::allocator< dive::NodeMeshIndex > > > *|std::vector< std::vector< dive::NodeMeshIndex,std::allocator< dive::NodeMeshIndex > >,std::allocator< std::vector< dive::NodeMeshIndex,std::allocator< dive::NodeMeshIndex > > > > *|std::vector< std::vector< dive::NodeMeshIndex > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_std__vectorT_double_t_t = {"_p_std__vectorT_std__vectorT_double_t_t", "std::vector< std::vector< double,std::allocator< double > > > *|std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > > *|std::vector< std::vector< double > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_swig__SwigPyIterator = {"_p_swig__SwigPyIterator", "swig::SwigPyIterator *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_utils__Strings = {"_p_utils__Strings", "material::Strings *|values::Strings *|utils::Strings *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_utils__file__Text = {"_p_utils__file__Text", "eilig::File *|utils::file::Text *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_value_type = {"_p_value_type", "value_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_values__IBool = {"_p_values__IBool", "values::IBool *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_values__IMatrix3D = {"_p_values__IMatrix3D", "values::IMatrix3D *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_values__IScalar = {"_p_values__IScalar", "values::IScalar *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_values__IScalar1D = {"_p_values__IScalar1D", "values::IScalar1D *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_values__IScalar2D = {"_p_values__IScalar2D", "values::IScalar2D *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_values__IScalar3D = {"_p_values__IScalar3D", "values::IScalar3D *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_values__IString = {"_p_values__IString", "values::IString *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_values__IValue = {"_p_values__IValue", "values::IValue *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_values__IVector3D = {"_p_values__IVector3D", "values::IVector3D *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_values__ValueBool = {"_p_values__ValueBool", "values::ValueBool *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_values__ValueMatrix3DCongruent = {"_p_values__ValueMatrix3DCongruent", "values::ValueMatrix3DCongruent *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_values__ValueMatrix3DInterpolation = {"_p_values__ValueMatrix3DInterpolation", "values::ValueMatrix3DInterpolation *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_values__ValueScalar = {"_p_values__ValueScalar", "values::ValueScalar *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_values__ValueScalar1D = {"_p_values__ValueScalar1D", "values::ValueScalar1D *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_values__ValueScalar1DFunction = {"_p_values__ValueScalar1DFunction", "values::ValueScalar1DFunction *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_values__ValueScalar2D = {"_p_values__ValueScalar2D", "values::ValueScalar2D *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_values__ValueScalar2DFunction = {"_p_values__ValueScalar2DFunction", "values::ValueScalar2DFunction *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_values__ValueScalar3D = {"_p_values__ValueScalar3D", "values::ValueScalar3D *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_values__ValueScalar3DCongruent = {"_p_values__ValueScalar3DCongruent", "values::ValueScalar3DCongruent *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_values__ValueScalar3DFunction = {"_p_values__ValueScalar3DFunction", "values::ValueScalar3DFunction *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_values__ValueScalar3DInterpolation = {"_p_values__ValueScalar3DInterpolation", "values::ValueScalar3DInterpolation *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_values__ValueString = {"_p_values__ValueString", "values::ValueString *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_values__ValueVector3D = {"_p_values__ValueVector3D", "values::ValueVector3D *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_values__ValueVector3DCongruent = {"_p_values__ValueVector3DCongruent", "values::ValueVector3DCongruent *", 0, 0, (void*)0, 0};

static swig_type_info *swig_type_initial[] = {
  &_swigt__p_FunctionScalar,
  &_swigt__p_a_2__double,
  &_swigt__p_allocator_type,
  &_swigt__p_basis__Cartesian,
  &_swigt__p_basis__Cylindrical,
  &_swigt__p_basis__IBasis,
  &_swigt__p_char,
  &_swigt__p_difference_type,
  &_swigt__p_dive__DirichletMeshIndex,
  &_swigt__p_dive__DofMeshIndex,
  &_swigt__p_dive__NodeMeshIndex,
  &_swigt__p_dive__elements__ElementHexa,
  &_swigt__p_dive__elements__ElementHexa__LinearFunctions,
  &_swigt__p_dive__elements__ElementHexa__QuadraticFunctions,
  &_swigt__p_dive__elements__IElement,
  &_swigt__p_dive__elements__IntegralAreaHelper,
  &_swigt__p_dive__elements__IntegralEdgeHelper,
  &_swigt__p_dive__loads__Dirichlet,
  &_swigt__p_dive__loads__IDirichlet,
  &_swigt__p_dive__loads__ILoad,
  &_swigt__p_dive__loads__LoadDistributedFace,
  &_swigt__p_dive__loads__LoadDistributedVolume,
  &_swigt__p_dive__meshes__IMesh,
  &_swigt__p_dive__meshes__Mesh,
  &_swigt__p_dive__problems__IFluid,
  &_swigt__p_dive__problems__IPressure,
  &_swigt__p_dive__problems__IProblem,
  &_swigt__p_dive__problems__IThermal,
  &_swigt__p_dive__problems__ProblemFluid,
  &_swigt__p_dive__problems__ProblemPressure,
  &_swigt__p_dive__problems__ProblemThermal,
  &_swigt__p_dive__selection__ElementCmp,
  &_swigt__p_dive__selection__Face,
  &_swigt__p_dive__selection__FaceCmp,
  &_swigt__p_dive__selection__NodeCmp,
  &_swigt__p_dive__selection__SpecElementsByTag,
  &_swigt__p_dive__selection__SpecElementsByType,
  &_swigt__p_dive__selection__SpecNodesByCoordinate,
  &_swigt__p_dive__selection__SpecNodesByRange,
  &_swigt__p_dive__selection__SpecNodesByTag,
  &_swigt__p_dive__selection__SpecificationT_std__shared_ptrT_dive__elements__IElement_t_t,
  &_swigt__p_dive__selection__SpecificationT_std__shared_ptrT_nodes__INode_t_t,
  &_swigt__p_dive__selection__TypeCmp,
  &_swigt__p_dive__timers__ITimer,
  &_swigt__p_dive__timers__TimerStationary,
  &_swigt__p_dive__timers__TimerStepped,
  &_swigt__p_double,
  &_swigt__p_eilig__Ellpack,
  &_swigt__p_eilig__Matrix,
  &_swigt__p_eilig__Vector,
  &_swigt__p_f_double__double,
  &_swigt__p_f_double_double__double,
  &_swigt__p_f_double_double_double__double,
  &_swigt__p_f_long_long___size_t_double__long_long,
  &_swigt__p_interpolation__IInterpolation,
  &_swigt__p_interpolation__InterpolationFixed,
  &_swigt__p_interpolation__InterpolationIDW,
  &_swigt__p_interpolation__InterpolationNN,
  &_swigt__p_interpolation__InterpolationRBF,
  &_swigt__p_kdtree__TreePtr,
  &_swigt__p_long_long,
  &_swigt__p_material__IBase,
  &_swigt__p_material__IMaterial,
  &_swigt__p_material__IMaterialFluid,
  &_swigt__p_material__IMaterialSolid,
  &_swigt__p_material__MaterialFluid,
  &_swigt__p_material__MaterialSolid,
  &_swigt__p_nodes__INode,
  &_swigt__p_nodes__Node,
  &_swigt__p_p_PyObject,
  &_swigt__p_quadrature__GaussHexa,
  &_swigt__p_quadrature__GaussLine,
  &_swigt__p_quadrature__GaussRect,
  &_swigt__p_quadrature__IGauss,
  &_swigt__p_size_t,
  &_swigt__p_size_type,
  &_swigt__p_std__allocatorT_dive__DirichletMeshIndex_t,
  &_swigt__p_std__allocatorT_dive__DofMeshIndex_t,
  &_swigt__p_std__allocatorT_dive__NodeMeshIndex_t,
  &_swigt__p_std__allocatorT_double_t,
  &_swigt__p_std__allocatorT_std__shared_ptrT_basis__IBasis_t_t,
  &_swigt__p_std__allocatorT_std__shared_ptrT_dive__elements__IElement_t_t,
  &_swigt__p_std__allocatorT_std__shared_ptrT_dive__loads__IDirichlet_t_t,
  &_swigt__p_std__allocatorT_std__shared_ptrT_dive__loads__ILoad_t_t,
  &_swigt__p_std__allocatorT_std__shared_ptrT_dive__meshes__IMesh_t_t,
  &_swigt__p_std__allocatorT_std__shared_ptrT_nodes__INode_t_t,
  &_swigt__p_std__allocatorT_std__size_t_t,
  &_swigt__p_std__allocatorT_std__vectorT_dive__NodeMeshIndex_t_t,
  &_swigt__p_std__allocatorT_std__vectorT_double_t_t,
  &_swigt__p_std__invalid_argument,
  &_swigt__p_std__mapT_long_long_std__string_t,
  &_swigt__p_std__setT_dive__selection__Face_dive__selection__FaceCmp_std__allocatorT_dive__selection__Face_t_t,
  &_swigt__p_std__setT_std__shared_ptrT_dive__elements__IElement_t_dive__selection__ElementCmp_std__allocatorT_std__shared_ptrT_dive__elements__IElement_t_t_t,
  &_swigt__p_std__setT_std__shared_ptrT_nodes__INode_t_dive__selection__NodeCmp_std__allocatorT_std__shared_ptrT_nodes__INode_t_t_t,
  &_swigt__p_std__setT_std__size_t_dive__selection__TypeCmp_std__allocatorT_std__size_t_t_t,
  &_swigt__p_std__shared_ptrT_basis__Cartesian_const_t,
  &_swigt__p_std__shared_ptrT_basis__Cartesian_t,
  &_swigt__p_std__shared_ptrT_basis__Cylindrical_const_t,
  &_swigt__p_std__shared_ptrT_basis__Cylindrical_t,
  &_swigt__p_std__shared_ptrT_basis__IBasis_const_t,
  &_swigt__p_std__shared_ptrT_basis__IBasis_t,
  &_swigt__p_std__shared_ptrT_dive__elements__ElementHexa_const_t,
  &_swigt__p_std__shared_ptrT_dive__elements__ElementHexa_t,
  &_swigt__p_std__shared_ptrT_dive__elements__IElement_const_t,
  &_swigt__p_std__shared_ptrT_dive__elements__IElement_t,
  &_swigt__p_std__shared_ptrT_dive__loads__Dirichlet_const_t,
  &_swigt__p_std__shared_ptrT_dive__loads__Dirichlet_t,
  &_swigt__p_std__shared_ptrT_dive__loads__IDirichlet_const_t,
  &_swigt__p_std__shared_ptrT_dive__loads__IDirichlet_t,
  &_swigt__p_std__shared_ptrT_dive__loads__ILoad_const_t,
  &_swigt__p_std__shared_ptrT_dive__loads__ILoad_t,
  &_swigt__p_std__shared_ptrT_dive__loads__LoadDistributedFace_const_t,
  &_swigt__p_std__shared_ptrT_dive__loads__LoadDistributedFace_t,
  &_swigt__p_std__shared_ptrT_dive__loads__LoadDistributedVolume_const_t,
  &_swigt__p_std__shared_ptrT_dive__loads__LoadDistributedVolume_t,
  &_swigt__p_std__shared_ptrT_dive__meshes__IMesh_const_t,
  &_swigt__p_std__shared_ptrT_dive__meshes__IMesh_t,
  &_swigt__p_std__shared_ptrT_dive__meshes__Mesh_const_t,
  &_swigt__p_std__shared_ptrT_dive__meshes__Mesh_t,
  &_swigt__p_std__shared_ptrT_dive__problems__IFluid_t,
  &_swigt__p_std__shared_ptrT_dive__problems__IPressure_t,
  &_swigt__p_std__shared_ptrT_dive__problems__IProblem_const_t,
  &_swigt__p_std__shared_ptrT_dive__problems__IProblem_t,
  &_swigt__p_std__shared_ptrT_dive__problems__IThermal_t,
  &_swigt__p_std__shared_ptrT_dive__problems__ProblemFluid_const_t,
  &_swigt__p_std__shared_ptrT_dive__problems__ProblemFluid_t,
  &_swigt__p_std__shared_ptrT_dive__problems__ProblemPressure_const_t,
  &_swigt__p_std__shared_ptrT_dive__problems__ProblemPressure_t,
  &_swigt__p_std__shared_ptrT_dive__problems__ProblemThermal_const_t,
  &_swigt__p_std__shared_ptrT_dive__problems__ProblemThermal_t,
  &_swigt__p_std__shared_ptrT_dive__timers__ITimer_const_t,
  &_swigt__p_std__shared_ptrT_dive__timers__ITimer_t,
  &_swigt__p_std__shared_ptrT_dive__timers__TimerStationary_const_t,
  &_swigt__p_std__shared_ptrT_dive__timers__TimerStationary_t,
  &_swigt__p_std__shared_ptrT_dive__timers__TimerStepped_const_t,
  &_swigt__p_std__shared_ptrT_dive__timers__TimerStepped_t,
  &_swigt__p_std__shared_ptrT_interpolation__IInterpolation_const_t,
  &_swigt__p_std__shared_ptrT_interpolation__IInterpolation_t,
  &_swigt__p_std__shared_ptrT_interpolation__InterpolationFixed_const_t,
  &_swigt__p_std__shared_ptrT_interpolation__InterpolationFixed_t,
  &_swigt__p_std__shared_ptrT_interpolation__InterpolationIDW_const_t,
  &_swigt__p_std__shared_ptrT_interpolation__InterpolationIDW_t,
  &_swigt__p_std__shared_ptrT_interpolation__InterpolationNN_const_t,
  &_swigt__p_std__shared_ptrT_interpolation__InterpolationNN_t,
  &_swigt__p_std__shared_ptrT_interpolation__InterpolationRBF_const_t,
  &_swigt__p_std__shared_ptrT_interpolation__InterpolationRBF_t,
  &_swigt__p_std__shared_ptrT_material__IBase_const_t,
  &_swigt__p_std__shared_ptrT_material__IBase_t,
  &_swigt__p_std__shared_ptrT_material__IMaterialFluid_const_t,
  &_swigt__p_std__shared_ptrT_material__IMaterialFluid_t,
  &_swigt__p_std__shared_ptrT_material__IMaterialSolid_const_t,
  &_swigt__p_std__shared_ptrT_material__IMaterialSolid_t,
  &_swigt__p_std__shared_ptrT_material__IMaterial_const_t,
  &_swigt__p_std__shared_ptrT_material__IMaterial_t,
  &_swigt__p_std__shared_ptrT_material__MaterialFluid_const_t,
  &_swigt__p_std__shared_ptrT_material__MaterialFluid_t,
  &_swigt__p_std__shared_ptrT_material__MaterialSolid_const_t,
  &_swigt__p_std__shared_ptrT_material__MaterialSolid_t,
  &_swigt__p_std__shared_ptrT_nodes__INode_const_t,
  &_swigt__p_std__shared_ptrT_nodes__INode_t,
  &_swigt__p_std__shared_ptrT_nodes__Node_const_t,
  &_swigt__p_std__shared_ptrT_nodes__Node_t,
  &_swigt__p_std__shared_ptrT_quadrature__GaussHexa_const_t,
  &_swigt__p_std__shared_ptrT_quadrature__GaussHexa_t,
  &_swigt__p_std__shared_ptrT_quadrature__GaussLine_const_t,
  &_swigt__p_std__shared_ptrT_quadrature__GaussLine_t,
  &_swigt__p_std__shared_ptrT_quadrature__GaussRect_const_t,
  &_swigt__p_std__shared_ptrT_quadrature__GaussRect_t,
  &_swigt__p_std__shared_ptrT_quadrature__IGauss_const_t,
  &_swigt__p_std__shared_ptrT_quadrature__IGauss_t,
  &_swigt__p_std__shared_ptrT_values__IBool_t,
  &_swigt__p_std__shared_ptrT_values__IMatrix3D_t,
  &_swigt__p_std__shared_ptrT_values__IScalar1D_t,
  &_swigt__p_std__shared_ptrT_values__IScalar2D_t,
  &_swigt__p_std__shared_ptrT_values__IScalar3D_t,
  &_swigt__p_std__shared_ptrT_values__IScalar_t,
  &_swigt__p_std__shared_ptrT_values__IString_t,
  &_swigt__p_std__shared_ptrT_values__IValue_t,
  &_swigt__p_std__shared_ptrT_values__IVector3D_t,
  &_swigt__p_std__shared_ptrT_values__ValueBool_const_t,
  &_swigt__p_std__shared_ptrT_values__ValueBool_t,
  &_swigt__p_std__shared_ptrT_values__ValueMatrix3DCongruent_const_t,
  &_swigt__p_std__shared_ptrT_values__ValueMatrix3DCongruent_t,
  &_swigt__p_std__shared_ptrT_values__ValueMatrix3DInterpolation_const_t,
  &_swigt__p_std__shared_ptrT_values__ValueMatrix3DInterpolation_t,
  &_swigt__p_std__shared_ptrT_values__ValueScalar1DFunction_const_t,
  &_swigt__p_std__shared_ptrT_values__ValueScalar1DFunction_t,
  &_swigt__p_std__shared_ptrT_values__ValueScalar1D_const_t,
  &_swigt__p_std__shared_ptrT_values__ValueScalar1D_t,
  &_swigt__p_std__shared_ptrT_values__ValueScalar2DFunction_const_t,
  &_swigt__p_std__shared_ptrT_values__ValueScalar2DFunction_t,
  &_swigt__p_std__shared_ptrT_values__ValueScalar2D_const_t,
  &_swigt__p_std__shared_ptrT_values__ValueScalar2D_t,
  &_swigt__p_std__shared_ptrT_values__ValueScalar3DCongruent_const_t,
  &_swigt__p_std__shared_ptrT_values__ValueScalar3DCongruent_t,
  &_swigt__p_std__shared_ptrT_values__ValueScalar3DFunction_const_t,
  &_swigt__p_std__shared_ptrT_values__ValueScalar3DFunction_t,
  &_swigt__p_std__shared_ptrT_values__ValueScalar3DInterpolation_const_t,
  &_swigt__p_std__shared_ptrT_values__ValueScalar3DInterpolation_t,
  &_swigt__p_std__shared_ptrT_values__ValueScalar3D_const_t,
  &_swigt__p_std__shared_ptrT_values__ValueScalar3D_t,
  &_swigt__p_std__shared_ptrT_values__ValueScalar_const_t,
  &_swigt__p_std__shared_ptrT_values__ValueScalar_t,
  &_swigt__p_std__shared_ptrT_values__ValueString_const_t,
  &_swigt__p_std__shared_ptrT_values__ValueString_t,
  &_swigt__p_std__shared_ptrT_values__ValueVector3DCongruent_const_t,
  &_swigt__p_std__shared_ptrT_values__ValueVector3DCongruent_t,
  &_swigt__p_std__shared_ptrT_values__ValueVector3D_const_t,
  &_swigt__p_std__shared_ptrT_values__ValueVector3D_t,
  &_swigt__p_std__string,
  &_swigt__p_std__vectorT_dive__DirichletMeshIndex_t,
  &_swigt__p_std__vectorT_dive__DofMeshIndex_t,
  &_swigt__p_std__vectorT_dive__NodeMeshIndex_t,
  &_swigt__p_std__vectorT_double_t,
  &_swigt__p_std__vectorT_eilig__Ellpack_std__allocatorT_eilig__Ellpack_t_t,
  &_swigt__p_std__vectorT_eilig__Matrix_std__allocatorT_eilig__Matrix_t_t,
  &_swigt__p_std__vectorT_eilig__Vector_std__allocatorT_eilig__Vector_t_t,
  &_swigt__p_std__vectorT_std__shared_ptrT_basis__IBasis_t_t,
  &_swigt__p_std__vectorT_std__shared_ptrT_dive__elements__IElement_t_t,
  &_swigt__p_std__vectorT_std__shared_ptrT_dive__loads__IDirichlet_t_t,
  &_swigt__p_std__vectorT_std__shared_ptrT_dive__loads__ILoad_t_t,
  &_swigt__p_std__vectorT_std__shared_ptrT_dive__meshes__IMesh_t_t,
  &_swigt__p_std__vectorT_std__shared_ptrT_nodes__INode_t_t,
  &_swigt__p_std__vectorT_std__size_t_t,
  &_swigt__p_std__vectorT_std__vectorT_dive__NodeMeshIndex_t_t,
  &_swigt__p_std__vectorT_std__vectorT_double_t_t,
  &_swigt__p_swig__SwigPyIterator,
  &_swigt__p_utils__Strings,
  &_swigt__p_utils__file__Text,
  &_swigt__p_value_type,
  &_swigt__p_values__IBool,
  &_swigt__p_values__IMatrix3D,
  &_swigt__p_values__IScalar,
  &_swigt__p_values__IScalar1D,
  &_swigt__p_values__IScalar2D,
  &_swigt__p_values__IScalar3D,
  &_swigt__p_values__IString,
  &_swigt__p_values__IValue,
  &_swigt__p_values__IVector3D,
  &_swigt__p_values__ValueBool,
  &_swigt__p_values__ValueMatrix3DCongruent,
  &_swigt__p_values__ValueMatrix3DInterpolation,
  &_swigt__p_values__ValueScalar,
  &_swigt__p_values__ValueScalar1D,
  &_swigt__p_values__ValueScalar1DFunction,
  &_swigt__p_values__ValueScalar2D,
  &_swigt__p_values__ValueScalar2DFunction,
  &_swigt__p_values__ValueScalar3D,
  &_swigt__p_values__ValueScalar3DCongruent,
  &_swigt__p_values__ValueScalar3DFunction,
  &_swigt__p_values__ValueScalar3DInterpolation,
  &_swigt__p_values__ValueString,
  &_swigt__p_values__ValueVector3D,
  &_swigt__p_values__ValueVector3DCongruent,
};

static swig_cast_info _swigc__p_FunctionScalar[] = {  {&_swigt__p_FunctionScalar, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_a_2__double[] = {  {&_swigt__p_a_2__double, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_allocator_type[] = {  {&_swigt__p_allocator_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_basis__Cartesian[] = {  {&_swigt__p_basis__Cartesian, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_basis__Cylindrical[] = {  {&_swigt__p_basis__Cylindrical, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_basis__IBasis[] = {  {&_swigt__p_basis__IBasis, 0, 0, 0},  {&_swigt__p_basis__Cartesian, _p_basis__CartesianTo_p_basis__IBasis, 0, 0},  {&_swigt__p_basis__Cylindrical, _p_basis__CylindricalTo_p_basis__IBasis, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_char[] = {  {&_swigt__p_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_difference_type[] = {  {&_swigt__p_difference_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_dive__DirichletMeshIndex[] = {  {&_swigt__p_dive__DirichletMeshIndex, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_dive__DofMeshIndex[] = {  {&_swigt__p_dive__DofMeshIndex, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_dive__NodeMeshIndex[] = {  {&_swigt__p_dive__NodeMeshIndex, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_dive__elements__ElementHexa[] = {  {&_swigt__p_dive__elements__ElementHexa, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_dive__elements__ElementHexa__LinearFunctions[] = {  {&_swigt__p_dive__elements__ElementHexa__LinearFunctions, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_dive__elements__ElementHexa__QuadraticFunctions[] = {  {&_swigt__p_dive__elements__ElementHexa__QuadraticFunctions, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_dive__elements__IElement[] = {  {&_swigt__p_dive__elements__IElement, 0, 0, 0},  {&_swigt__p_dive__elements__ElementHexa, _p_dive__elements__ElementHexaTo_p_dive__elements__IElement, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_dive__elements__IntegralAreaHelper[] = {  {&_swigt__p_dive__elements__IntegralAreaHelper, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_dive__elements__IntegralEdgeHelper[] = {  {&_swigt__p_dive__elements__IntegralEdgeHelper, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_dive__loads__Dirichlet[] = {  {&_swigt__p_dive__loads__Dirichlet, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_dive__loads__IDirichlet[] = {  {&_swigt__p_dive__loads__IDirichlet, 0, 0, 0},  {&_swigt__p_dive__loads__Dirichlet, _p_dive__loads__DirichletTo_p_dive__loads__IDirichlet, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_dive__loads__ILoad[] = {  {&_swigt__p_dive__loads__ILoad, 0, 0, 0},  {&_swigt__p_dive__loads__LoadDistributedFace, _p_dive__loads__LoadDistributedFaceTo_p_dive__loads__ILoad, 0, 0},  {&_swigt__p_dive__loads__LoadDistributedVolume, _p_dive__loads__LoadDistributedVolumeTo_p_dive__loads__ILoad, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_dive__loads__LoadDistributedFace[] = {  {&_swigt__p_dive__loads__LoadDistributedFace, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_dive__loads__LoadDistributedVolume[] = {  {&_swigt__p_dive__loads__LoadDistributedVolume, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_dive__meshes__IMesh[] = {  {&_swigt__p_dive__meshes__IMesh, 0, 0, 0},  {&_swigt__p_dive__meshes__Mesh, _p_dive__meshes__MeshTo_p_dive__meshes__IMesh, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_dive__meshes__Mesh[] = {  {&_swigt__p_dive__meshes__Mesh, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_dive__problems__IFluid[] = {  {&_swigt__p_dive__problems__IFluid, 0, 0, 0},  {&_swigt__p_dive__problems__ProblemFluid, _p_dive__problems__ProblemFluidTo_p_dive__problems__IFluid, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_dive__problems__IPressure[] = {  {&_swigt__p_dive__problems__IPressure, 0, 0, 0},  {&_swigt__p_dive__problems__ProblemPressure, _p_dive__problems__ProblemPressureTo_p_dive__problems__IPressure, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_dive__problems__IProblem[] = {  {&_swigt__p_dive__problems__IProblem, 0, 0, 0},  {&_swigt__p_dive__problems__IFluid, _p_dive__problems__IFluidTo_p_dive__problems__IProblem, 0, 0},  {&_swigt__p_dive__problems__IPressure, _p_dive__problems__IPressureTo_p_dive__problems__IProblem, 0, 0},  {&_swigt__p_dive__problems__IThermal, _p_dive__problems__IThermalTo_p_dive__problems__IProblem, 0, 0},  {&_swigt__p_dive__problems__ProblemFluid, _p_dive__problems__ProblemFluidTo_p_dive__problems__IProblem, 0, 0},  {&_swigt__p_dive__problems__ProblemPressure, _p_dive__problems__ProblemPressureTo_p_dive__problems__IProblem, 0, 0},  {&_swigt__p_dive__problems__ProblemThermal, _p_dive__problems__ProblemThermalTo_p_dive__problems__IProblem, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_dive__problems__IThermal[] = {  {&_swigt__p_dive__problems__IThermal, 0, 0, 0},  {&_swigt__p_dive__problems__ProblemThermal, _p_dive__problems__ProblemThermalTo_p_dive__problems__IThermal, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_dive__problems__ProblemFluid[] = {  {&_swigt__p_dive__problems__ProblemFluid, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_dive__problems__ProblemPressure[] = {  {&_swigt__p_dive__problems__ProblemPressure, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_dive__problems__ProblemThermal[] = {  {&_swigt__p_dive__problems__ProblemThermal, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_dive__selection__ElementCmp[] = {  {&_swigt__p_dive__selection__ElementCmp, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_dive__selection__Face[] = {  {&_swigt__p_dive__selection__Face, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_dive__selection__FaceCmp[] = {  {&_swigt__p_dive__selection__FaceCmp, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_dive__selection__NodeCmp[] = {  {&_swigt__p_dive__selection__NodeCmp, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_dive__selection__SpecElementsByTag[] = {  {&_swigt__p_dive__selection__SpecElementsByTag, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_dive__selection__SpecElementsByType[] = {  {&_swigt__p_dive__selection__SpecElementsByType, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_dive__selection__SpecNodesByCoordinate[] = {  {&_swigt__p_dive__selection__SpecNodesByCoordinate, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_dive__selection__SpecNodesByRange[] = {  {&_swigt__p_dive__selection__SpecNodesByRange, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_dive__selection__SpecNodesByTag[] = {  {&_swigt__p_dive__selection__SpecNodesByTag, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_dive__selection__SpecificationT_std__shared_ptrT_dive__elements__IElement_t_t[] = {  {&_swigt__p_dive__selection__SpecificationT_std__shared_ptrT_dive__elements__IElement_t_t, 0, 0, 0},  {&_swigt__p_dive__selection__SpecElementsByTag, _p_dive__selection__SpecElementsByTagTo_p_dive__selection__SpecificationT_std__shared_ptrT_dive__elements__IElement_t_t, 0, 0},  {&_swigt__p_dive__selection__SpecElementsByType, _p_dive__selection__SpecElementsByTypeTo_p_dive__selection__SpecificationT_std__shared_ptrT_dive__elements__IElement_t_t, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_dive__selection__SpecificationT_std__shared_ptrT_nodes__INode_t_t[] = {  {&_swigt__p_dive__selection__SpecificationT_std__shared_ptrT_nodes__INode_t_t, 0, 0, 0},  {&_swigt__p_dive__selection__SpecNodesByCoordinate, _p_dive__selection__SpecNodesByCoordinateTo_p_dive__selection__SpecificationT_std__shared_ptrT_nodes__INode_t_t, 0, 0},  {&_swigt__p_dive__selection__SpecNodesByRange, _p_dive__selection__SpecNodesByRangeTo_p_dive__selection__SpecificationT_std__shared_ptrT_nodes__INode_t_t, 0, 0},  {&_swigt__p_dive__selection__SpecNodesByTag, _p_dive__selection__SpecNodesByTagTo_p_dive__selection__SpecificationT_std__shared_ptrT_nodes__INode_t_t, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_dive__selection__TypeCmp[] = {  {&_swigt__p_dive__selection__TypeCmp, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_dive__timers__ITimer[] = {  {&_swigt__p_dive__timers__ITimer, 0, 0, 0},  {&_swigt__p_dive__timers__TimerStationary, _p_dive__timers__TimerStationaryTo_p_dive__timers__ITimer, 0, 0},  {&_swigt__p_dive__timers__TimerStepped, _p_dive__timers__TimerSteppedTo_p_dive__timers__ITimer, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_dive__timers__TimerStationary[] = {  {&_swigt__p_dive__timers__TimerStationary, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_dive__timers__TimerStepped[] = {  {&_swigt__p_dive__timers__TimerStepped, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_double[] = {  {&_swigt__p_double, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_eilig__Ellpack[] = {  {&_swigt__p_eilig__Ellpack, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_eilig__Matrix[] = {  {&_swigt__p_eilig__Matrix, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_eilig__Vector[] = {  {&_swigt__p_eilig__Vector, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_double__double[] = {  {&_swigt__p_f_double__double, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_double_double__double[] = {  {&_swigt__p_f_double_double__double, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_double_double_double__double[] = {  {&_swigt__p_f_double_double_double__double, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_long_long___size_t_double__long_long[] = {  {&_swigt__p_f_long_long___size_t_double__long_long, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_interpolation__IInterpolation[] = {  {&_swigt__p_interpolation__IInterpolation, 0, 0, 0},  {&_swigt__p_interpolation__InterpolationFixed, _p_interpolation__InterpolationFixedTo_p_interpolation__IInterpolation, 0, 0},  {&_swigt__p_interpolation__InterpolationIDW, _p_interpolation__InterpolationIDWTo_p_interpolation__IInterpolation, 0, 0},  {&_swigt__p_interpolation__InterpolationNN, _p_interpolation__InterpolationNNTo_p_interpolation__IInterpolation, 0, 0},  {&_swigt__p_interpolation__InterpolationRBF, _p_interpolation__InterpolationRBFTo_p_interpolation__IInterpolation, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_interpolation__InterpolationFixed[] = {  {&_swigt__p_interpolation__InterpolationFixed, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_interpolation__InterpolationIDW[] = {  {&_swigt__p_interpolation__InterpolationIDW, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_interpolation__InterpolationNN[] = {  {&_swigt__p_interpolation__InterpolationNN, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_interpolation__InterpolationRBF[] = {  {&_swigt__p_interpolation__InterpolationRBF, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_kdtree__TreePtr[] = {  {&_swigt__p_kdtree__TreePtr, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_long_long[] = {  {&_swigt__p_long_long, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_material__IBase[] = {  {&_swigt__p_material__IBase, 0, 0, 0},  {&_swigt__p_material__IMaterial, _p_material__IMaterialTo_p_material__IBase, 0, 0},  {&_swigt__p_material__IMaterialFluid, _p_material__IMaterialFluidTo_p_material__IBase, 0, 0},  {&_swigt__p_material__IMaterialSolid, _p_material__IMaterialSolidTo_p_material__IBase, 0, 0},  {&_swigt__p_material__MaterialFluid, _p_material__MaterialFluidTo_p_material__IBase, 0, 0},  {&_swigt__p_material__MaterialSolid, _p_material__MaterialSolidTo_p_material__IBase, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_material__IMaterial[] = {  {&_swigt__p_material__IMaterial, 0, 0, 0},  {&_swigt__p_material__IMaterialFluid, _p_material__IMaterialFluidTo_p_material__IMaterial, 0, 0},  {&_swigt__p_material__IMaterialSolid, _p_material__IMaterialSolidTo_p_material__IMaterial, 0, 0},  {&_swigt__p_material__MaterialFluid, _p_material__MaterialFluidTo_p_material__IMaterial, 0, 0},  {&_swigt__p_material__MaterialSolid, _p_material__MaterialSolidTo_p_material__IMaterial, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_material__IMaterialFluid[] = {  {&_swigt__p_material__IMaterialFluid, 0, 0, 0},  {&_swigt__p_material__MaterialFluid, _p_material__MaterialFluidTo_p_material__IMaterialFluid, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_material__IMaterialSolid[] = {  {&_swigt__p_material__IMaterialSolid, 0, 0, 0},  {&_swigt__p_material__MaterialSolid, _p_material__MaterialSolidTo_p_material__IMaterialSolid, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_material__MaterialFluid[] = {  {&_swigt__p_material__MaterialFluid, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_material__MaterialSolid[] = {  {&_swigt__p_material__MaterialSolid, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_nodes__INode[] = {  {&_swigt__p_nodes__INode, 0, 0, 0},  {&_swigt__p_nodes__Node, _p_nodes__NodeTo_p_nodes__INode, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_nodes__Node[] = {  {&_swigt__p_nodes__Node, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_PyObject[] = {  {&_swigt__p_p_PyObject, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_quadrature__GaussHexa[] = {  {&_swigt__p_quadrature__GaussHexa, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_quadrature__GaussLine[] = {  {&_swigt__p_quadrature__GaussLine, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_quadrature__GaussRect[] = {  {&_swigt__p_quadrature__GaussRect, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_quadrature__IGauss[] = {  {&_swigt__p_quadrature__IGauss, 0, 0, 0},  {&_swigt__p_quadrature__GaussHexa, _p_quadrature__GaussHexaTo_p_quadrature__IGauss, 0, 0},  {&_swigt__p_quadrature__GaussLine, _p_quadrature__GaussLineTo_p_quadrature__IGauss, 0, 0},  {&_swigt__p_quadrature__GaussRect, _p_quadrature__GaussRectTo_p_quadrature__IGauss, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_size_t[] = {  {&_swigt__p_size_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_size_type[] = {  {&_swigt__p_size_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__allocatorT_dive__DirichletMeshIndex_t[] = {  {&_swigt__p_std__allocatorT_dive__DirichletMeshIndex_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__allocatorT_dive__DofMeshIndex_t[] = {  {&_swigt__p_std__allocatorT_dive__DofMeshIndex_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__allocatorT_dive__NodeMeshIndex_t[] = {  {&_swigt__p_std__allocatorT_dive__NodeMeshIndex_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__allocatorT_double_t[] = {  {&_swigt__p_std__allocatorT_double_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__allocatorT_std__shared_ptrT_basis__IBasis_t_t[] = {  {&_swigt__p_std__allocatorT_std__shared_ptrT_basis__IBasis_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__allocatorT_std__shared_ptrT_dive__elements__IElement_t_t[] = {  {&_swigt__p_std__allocatorT_std__shared_ptrT_dive__elements__IElement_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__allocatorT_std__shared_ptrT_dive__loads__IDirichlet_t_t[] = {  {&_swigt__p_std__allocatorT_std__shared_ptrT_dive__loads__IDirichlet_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__allocatorT_std__shared_ptrT_dive__loads__ILoad_t_t[] = {  {&_swigt__p_std__allocatorT_std__shared_ptrT_dive__loads__ILoad_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__allocatorT_std__shared_ptrT_dive__meshes__IMesh_t_t[] = {  {&_swigt__p_std__allocatorT_std__shared_ptrT_dive__meshes__IMesh_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__allocatorT_std__shared_ptrT_nodes__INode_t_t[] = {  {&_swigt__p_std__allocatorT_std__shared_ptrT_nodes__INode_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__allocatorT_std__size_t_t[] = {  {&_swigt__p_std__allocatorT_std__size_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__allocatorT_std__vectorT_dive__NodeMeshIndex_t_t[] = {  {&_swigt__p_std__allocatorT_std__vectorT_dive__NodeMeshIndex_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__allocatorT_std__vectorT_double_t_t[] = {  {&_swigt__p_std__allocatorT_std__vectorT_double_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__invalid_argument[] = {  {&_swigt__p_std__invalid_argument, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__mapT_long_long_std__string_t[] = {  {&_swigt__p_std__mapT_long_long_std__string_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__setT_dive__selection__Face_dive__selection__FaceCmp_std__allocatorT_dive__selection__Face_t_t[] = {  {&_swigt__p_std__setT_dive__selection__Face_dive__selection__FaceCmp_std__allocatorT_dive__selection__Face_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__setT_std__shared_ptrT_dive__elements__IElement_t_dive__selection__ElementCmp_std__allocatorT_std__shared_ptrT_dive__elements__IElement_t_t_t[] = {  {&_swigt__p_std__setT_std__shared_ptrT_dive__elements__IElement_t_dive__selection__ElementCmp_std__allocatorT_std__shared_ptrT_dive__elements__IElement_t_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__setT_std__shared_ptrT_nodes__INode_t_dive__selection__NodeCmp_std__allocatorT_std__shared_ptrT_nodes__INode_t_t_t[] = {  {&_swigt__p_std__setT_std__shared_ptrT_nodes__INode_t_dive__selection__NodeCmp_std__allocatorT_std__shared_ptrT_nodes__INode_t_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__setT_std__size_t_dive__selection__TypeCmp_std__allocatorT_std__size_t_t_t[] = {  {&_swigt__p_std__setT_std__size_t_dive__selection__TypeCmp_std__allocatorT_std__size_t_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__shared_ptrT_basis__Cartesian_const_t[] = {  {&_swigt__p_std__shared_ptrT_basis__Cartesian_const_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__shared_ptrT_basis__Cartesian_t[] = {  {&_swigt__p_std__shared_ptrT_basis__Cartesian_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__shared_ptrT_basis__Cylindrical_const_t[] = {  {&_swigt__p_std__shared_ptrT_basis__Cylindrical_const_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__shared_ptrT_basis__Cylindrical_t[] = {  {&_swigt__p_std__shared_ptrT_basis__Cylindrical_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__shared_ptrT_basis__IBasis_const_t[] = {  {&_swigt__p_std__shared_ptrT_basis__IBasis_const_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__shared_ptrT_basis__IBasis_t[] = {  {&_swigt__p_std__shared_ptrT_basis__IBasis_t, 0, 0, 0},  {&_swigt__p_std__shared_ptrT_basis__Cartesian_t, _p_std__shared_ptrT_basis__Cartesian_tTo_p_std__shared_ptrT_basis__IBasis_t, 0, 0},  {&_swigt__p_std__shared_ptrT_basis__Cylindrical_t, _p_std__shared_ptrT_basis__Cylindrical_tTo_p_std__shared_ptrT_basis__IBasis_t, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__shared_ptrT_dive__elements__ElementHexa_const_t[] = {  {&_swigt__p_std__shared_ptrT_dive__elements__ElementHexa_const_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__shared_ptrT_dive__elements__ElementHexa_t[] = {  {&_swigt__p_std__shared_ptrT_dive__elements__ElementHexa_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__shared_ptrT_dive__elements__IElement_const_t[] = {  {&_swigt__p_std__shared_ptrT_dive__elements__IElement_const_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__shared_ptrT_dive__elements__IElement_t[] = {  {&_swigt__p_std__shared_ptrT_dive__elements__IElement_t, 0, 0, 0},  {&_swigt__p_std__shared_ptrT_dive__elements__ElementHexa_t, _p_std__shared_ptrT_dive__elements__ElementHexa_tTo_p_std__shared_ptrT_dive__elements__IElement_t, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__shared_ptrT_dive__loads__Dirichlet_const_t[] = {  {&_swigt__p_std__shared_ptrT_dive__loads__Dirichlet_const_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__shared_ptrT_dive__loads__Dirichlet_t[] = {  {&_swigt__p_std__shared_ptrT_dive__loads__Dirichlet_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__shared_ptrT_dive__loads__IDirichlet_const_t[] = {  {&_swigt__p_std__shared_ptrT_dive__loads__IDirichlet_const_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__shared_ptrT_dive__loads__IDirichlet_t[] = {  {&_swigt__p_std__shared_ptrT_dive__loads__IDirichlet_t, 0, 0, 0},  {&_swigt__p_std__shared_ptrT_dive__loads__Dirichlet_t, _p_std__shared_ptrT_dive__loads__Dirichlet_tTo_p_std__shared_ptrT_dive__loads__IDirichlet_t, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__shared_ptrT_dive__loads__ILoad_const_t[] = {  {&_swigt__p_std__shared_ptrT_dive__loads__ILoad_const_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__shared_ptrT_dive__loads__ILoad_t[] = {  {&_swigt__p_std__shared_ptrT_dive__loads__ILoad_t, 0, 0, 0},  {&_swigt__p_std__shared_ptrT_dive__loads__LoadDistributedFace_t, _p_std__shared_ptrT_dive__loads__LoadDistributedFace_tTo_p_std__shared_ptrT_dive__loads__ILoad_t, 0, 0},  {&_swigt__p_std__shared_ptrT_dive__loads__LoadDistributedVolume_t, _p_std__shared_ptrT_dive__loads__LoadDistributedVolume_tTo_p_std__shared_ptrT_dive__loads__ILoad_t, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__shared_ptrT_dive__loads__LoadDistributedFace_const_t[] = {  {&_swigt__p_std__shared_ptrT_dive__loads__LoadDistributedFace_const_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__shared_ptrT_dive__loads__LoadDistributedFace_t[] = {  {&_swigt__p_std__shared_ptrT_dive__loads__LoadDistributedFace_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__shared_ptrT_dive__loads__LoadDistributedVolume_const_t[] = {  {&_swigt__p_std__shared_ptrT_dive__loads__LoadDistributedVolume_const_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__shared_ptrT_dive__loads__LoadDistributedVolume_t[] = {  {&_swigt__p_std__shared_ptrT_dive__loads__LoadDistributedVolume_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__shared_ptrT_dive__meshes__IMesh_const_t[] = {  {&_swigt__p_std__shared_ptrT_dive__meshes__IMesh_const_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__shared_ptrT_dive__meshes__IMesh_t[] = {  {&_swigt__p_std__shared_ptrT_dive__meshes__IMesh_t, 0, 0, 0},  {&_swigt__p_std__shared_ptrT_dive__meshes__Mesh_t, _p_std__shared_ptrT_dive__meshes__Mesh_tTo_p_std__shared_ptrT_dive__meshes__IMesh_t, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__shared_ptrT_dive__meshes__Mesh_const_t[] = {  {&_swigt__p_std__shared_ptrT_dive__meshes__Mesh_const_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__shared_ptrT_dive__meshes__Mesh_t[] = {  {&_swigt__p_std__shared_ptrT_dive__meshes__Mesh_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__shared_ptrT_dive__problems__IFluid_t[] = {  {&_swigt__p_std__shared_ptrT_dive__problems__IFluid_t, 0, 0, 0},  {&_swigt__p_std__shared_ptrT_dive__problems__ProblemFluid_t, _p_std__shared_ptrT_dive__problems__ProblemFluid_tTo_p_std__shared_ptrT_dive__problems__IFluid_t, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__shared_ptrT_dive__problems__IPressure_t[] = {  {&_swigt__p_std__shared_ptrT_dive__problems__IPressure_t, 0, 0, 0},  {&_swigt__p_std__shared_ptrT_dive__problems__ProblemPressure_t, _p_std__shared_ptrT_dive__problems__ProblemPressure_tTo_p_std__shared_ptrT_dive__problems__IPressure_t, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__shared_ptrT_dive__problems__IProblem_const_t[] = {  {&_swigt__p_std__shared_ptrT_dive__problems__IProblem_const_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__shared_ptrT_dive__problems__IProblem_t[] = {  {&_swigt__p_std__shared_ptrT_dive__problems__IProblem_t, 0, 0, 0},  {&_swigt__p_std__shared_ptrT_dive__problems__IFluid_t, _p_std__shared_ptrT_dive__problems__IFluid_tTo_p_std__shared_ptrT_dive__problems__IProblem_t, 0, 0},  {&_swigt__p_std__shared_ptrT_dive__problems__IPressure_t, _p_std__shared_ptrT_dive__problems__IPressure_tTo_p_std__shared_ptrT_dive__problems__IProblem_t, 0, 0},  {&_swigt__p_std__shared_ptrT_dive__problems__IThermal_t, _p_std__shared_ptrT_dive__problems__IThermal_tTo_p_std__shared_ptrT_dive__problems__IProblem_t, 0, 0},  {&_swigt__p_std__shared_ptrT_dive__problems__ProblemFluid_t, _p_std__shared_ptrT_dive__problems__ProblemFluid_tTo_p_std__shared_ptrT_dive__problems__IProblem_t, 0, 0},  {&_swigt__p_std__shared_ptrT_dive__problems__ProblemPressure_t, _p_std__shared_ptrT_dive__problems__ProblemPressure_tTo_p_std__shared_ptrT_dive__problems__IProblem_t, 0, 0},  {&_swigt__p_std__shared_ptrT_dive__problems__ProblemThermal_t, _p_std__shared_ptrT_dive__problems__ProblemThermal_tTo_p_std__shared_ptrT_dive__problems__IProblem_t, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__shared_ptrT_dive__problems__IThermal_t[] = {  {&_swigt__p_std__shared_ptrT_dive__problems__IThermal_t, 0, 0, 0},  {&_swigt__p_std__shared_ptrT_dive__problems__ProblemThermal_t, _p_std__shared_ptrT_dive__problems__ProblemThermal_tTo_p_std__shared_ptrT_dive__problems__IThermal_t, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__shared_ptrT_dive__problems__ProblemFluid_const_t[] = {  {&_swigt__p_std__shared_ptrT_dive__problems__ProblemFluid_const_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__shared_ptrT_dive__problems__ProblemFluid_t[] = {  {&_swigt__p_std__shared_ptrT_dive__problems__ProblemFluid_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__shared_ptrT_dive__problems__ProblemPressure_const_t[] = {  {&_swigt__p_std__shared_ptrT_dive__problems__ProblemPressure_const_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__shared_ptrT_dive__problems__ProblemPressure_t[] = {  {&_swigt__p_std__shared_ptrT_dive__problems__ProblemPressure_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__shared_ptrT_dive__problems__ProblemThermal_const_t[] = {  {&_swigt__p_std__shared_ptrT_dive__problems__ProblemThermal_const_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__shared_ptrT_dive__problems__ProblemThermal_t[] = {  {&_swigt__p_std__shared_ptrT_dive__problems__ProblemThermal_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__shared_ptrT_dive__timers__ITimer_const_t[] = {  {&_swigt__p_std__shared_ptrT_dive__timers__ITimer_const_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__shared_ptrT_dive__timers__ITimer_t[] = {  {&_swigt__p_std__shared_ptrT_dive__timers__ITimer_t, 0, 0, 0},  {&_swigt__p_std__shared_ptrT_dive__timers__TimerStationary_t, _p_std__shared_ptrT_dive__timers__TimerStationary_tTo_p_std__shared_ptrT_dive__timers__ITimer_t, 0, 0},  {&_swigt__p_std__shared_ptrT_dive__timers__TimerStepped_t, _p_std__shared_ptrT_dive__timers__TimerStepped_tTo_p_std__shared_ptrT_dive__timers__ITimer_t, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__shared_ptrT_dive__timers__TimerStationary_const_t[] = {  {&_swigt__p_std__shared_ptrT_dive__timers__TimerStationary_const_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__shared_ptrT_dive__timers__TimerStationary_t[] = {  {&_swigt__p_std__shared_ptrT_dive__timers__TimerStationary_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__shared_ptrT_dive__timers__TimerStepped_const_t[] = {  {&_swigt__p_std__shared_ptrT_dive__timers__TimerStepped_const_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__shared_ptrT_dive__timers__TimerStepped_t[] = {  {&_swigt__p_std__shared_ptrT_dive__timers__TimerStepped_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__shared_ptrT_interpolation__IInterpolation_const_t[] = {  {&_swigt__p_std__shared_ptrT_interpolation__IInterpolation_const_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__shared_ptrT_interpolation__IInterpolation_t[] = {  {&_swigt__p_std__shared_ptrT_interpolation__IInterpolation_t, 0, 0, 0},  {&_swigt__p_std__shared_ptrT_interpolation__InterpolationFixed_t, _p_std__shared_ptrT_interpolation__InterpolationFixed_tTo_p_std__shared_ptrT_interpolation__IInterpolation_t, 0, 0},  {&_swigt__p_std__shared_ptrT_interpolation__InterpolationIDW_t, _p_std__shared_ptrT_interpolation__InterpolationIDW_tTo_p_std__shared_ptrT_interpolation__IInterpolation_t, 0, 0},  {&_swigt__p_std__shared_ptrT_interpolation__InterpolationNN_t, _p_std__shared_ptrT_interpolation__InterpolationNN_tTo_p_std__shared_ptrT_interpolation__IInterpolation_t, 0, 0},  {&_swigt__p_std__shared_ptrT_interpolation__InterpolationRBF_t, _p_std__shared_ptrT_interpolation__InterpolationRBF_tTo_p_std__shared_ptrT_interpolation__IInterpolation_t, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__shared_ptrT_interpolation__InterpolationFixed_const_t[] = {  {&_swigt__p_std__shared_ptrT_interpolation__InterpolationFixed_const_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__shared_ptrT_interpolation__InterpolationFixed_t[] = {  {&_swigt__p_std__shared_ptrT_interpolation__InterpolationFixed_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__shared_ptrT_interpolation__InterpolationIDW_const_t[] = {  {&_swigt__p_std__shared_ptrT_interpolation__InterpolationIDW_const_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__shared_ptrT_interpolation__InterpolationIDW_t[] = {  {&_swigt__p_std__shared_ptrT_interpolation__InterpolationIDW_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__shared_ptrT_interpolation__InterpolationNN_const_t[] = {  {&_swigt__p_std__shared_ptrT_interpolation__InterpolationNN_const_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__shared_ptrT_interpolation__InterpolationNN_t[] = {  {&_swigt__p_std__shared_ptrT_interpolation__InterpolationNN_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__shared_ptrT_interpolation__InterpolationRBF_const_t[] = {  {&_swigt__p_std__shared_ptrT_interpolation__InterpolationRBF_const_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__shared_ptrT_interpolation__InterpolationRBF_t[] = {  {&_swigt__p_std__shared_ptrT_interpolation__InterpolationRBF_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__shared_ptrT_material__IBase_const_t[] = {  {&_swigt__p_std__shared_ptrT_material__IBase_const_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__shared_ptrT_material__IBase_t[] = {  {&_swigt__p_std__shared_ptrT_material__IBase_t, 0, 0, 0},  {&_swigt__p_std__shared_ptrT_material__IMaterialFluid_t, _p_std__shared_ptrT_material__IMaterialFluid_tTo_p_std__shared_ptrT_material__IBase_t, 0, 0},  {&_swigt__p_std__shared_ptrT_material__IMaterialSolid_t, _p_std__shared_ptrT_material__IMaterialSolid_tTo_p_std__shared_ptrT_material__IBase_t, 0, 0},  {&_swigt__p_std__shared_ptrT_material__IMaterial_t, _p_std__shared_ptrT_material__IMaterial_tTo_p_std__shared_ptrT_material__IBase_t, 0, 0},  {&_swigt__p_std__shared_ptrT_material__MaterialFluid_t, _p_std__shared_ptrT_material__MaterialFluid_tTo_p_std__shared_ptrT_material__IBase_t, 0, 0},  {&_swigt__p_std__shared_ptrT_material__MaterialSolid_t, _p_std__shared_ptrT_material__MaterialSolid_tTo_p_std__shared_ptrT_material__IBase_t, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__shared_ptrT_material__IMaterialFluid_const_t[] = {  {&_swigt__p_std__shared_ptrT_material__IMaterialFluid_const_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__shared_ptrT_material__IMaterialFluid_t[] = {  {&_swigt__p_std__shared_ptrT_material__IMaterialFluid_t, 0, 0, 0},  {&_swigt__p_std__shared_ptrT_material__MaterialFluid_t, _p_std__shared_ptrT_material__MaterialFluid_tTo_p_std__shared_ptrT_material__IMaterialFluid_t, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__shared_ptrT_material__IMaterialSolid_const_t[] = {  {&_swigt__p_std__shared_ptrT_material__IMaterialSolid_const_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__shared_ptrT_material__IMaterialSolid_t[] = {  {&_swigt__p_std__shared_ptrT_material__IMaterialSolid_t, 0, 0, 0},  {&_swigt__p_std__shared_ptrT_material__MaterialSolid_t, _p_std__shared_ptrT_material__MaterialSolid_tTo_p_std__shared_ptrT_material__IMaterialSolid_t, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__shared_ptrT_material__IMaterial_const_t[] = {  {&_swigt__p_std__shared_ptrT_material__IMaterial_const_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__shared_ptrT_material__IMaterial_t[] = {  {&_swigt__p_std__shared_ptrT_material__IMaterial_t, 0, 0, 0},  {&_swigt__p_std__shared_ptrT_material__IMaterialFluid_t, _p_std__shared_ptrT_material__IMaterialFluid_tTo_p_std__shared_ptrT_material__IMaterial_t, 0, 0},  {&_swigt__p_std__shared_ptrT_material__IMaterialSolid_t, _p_std__shared_ptrT_material__IMaterialSolid_tTo_p_std__shared_ptrT_material__IMaterial_t, 0, 0},  {&_swigt__p_std__shared_ptrT_material__MaterialFluid_t, _p_std__shared_ptrT_material__MaterialFluid_tTo_p_std__shared_ptrT_material__IMaterial_t, 0, 0},  {&_swigt__p_std__shared_ptrT_material__MaterialSolid_t, _p_std__shared_ptrT_material__MaterialSolid_tTo_p_std__shared_ptrT_material__IMaterial_t, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__shared_ptrT_material__MaterialFluid_const_t[] = {  {&_swigt__p_std__shared_ptrT_material__MaterialFluid_const_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__shared_ptrT_material__MaterialFluid_t[] = {  {&_swigt__p_std__shared_ptrT_material__MaterialFluid_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__shared_ptrT_material__MaterialSolid_const_t[] = {  {&_swigt__p_std__shared_ptrT_material__MaterialSolid_const_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__shared_ptrT_material__MaterialSolid_t[] = {  {&_swigt__p_std__shared_ptrT_material__MaterialSolid_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__shared_ptrT_nodes__INode_const_t[] = {  {&_swigt__p_std__shared_ptrT_nodes__INode_const_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__shared_ptrT_nodes__INode_t[] = {  {&_swigt__p_std__shared_ptrT_nodes__INode_t, 0, 0, 0},  {&_swigt__p_std__shared_ptrT_nodes__Node_t, _p_std__shared_ptrT_nodes__Node_tTo_p_std__shared_ptrT_nodes__INode_t, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__shared_ptrT_nodes__Node_const_t[] = {  {&_swigt__p_std__shared_ptrT_nodes__Node_const_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__shared_ptrT_nodes__Node_t[] = {  {&_swigt__p_std__shared_ptrT_nodes__Node_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__shared_ptrT_quadrature__GaussHexa_const_t[] = {  {&_swigt__p_std__shared_ptrT_quadrature__GaussHexa_const_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__shared_ptrT_quadrature__GaussHexa_t[] = {  {&_swigt__p_std__shared_ptrT_quadrature__GaussHexa_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__shared_ptrT_quadrature__GaussLine_const_t[] = {  {&_swigt__p_std__shared_ptrT_quadrature__GaussLine_const_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__shared_ptrT_quadrature__GaussLine_t[] = {  {&_swigt__p_std__shared_ptrT_quadrature__GaussLine_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__shared_ptrT_quadrature__GaussRect_const_t[] = {  {&_swigt__p_std__shared_ptrT_quadrature__GaussRect_const_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__shared_ptrT_quadrature__GaussRect_t[] = {  {&_swigt__p_std__shared_ptrT_quadrature__GaussRect_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__shared_ptrT_quadrature__IGauss_const_t[] = {  {&_swigt__p_std__shared_ptrT_quadrature__IGauss_const_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__shared_ptrT_quadrature__IGauss_t[] = {  {&_swigt__p_std__shared_ptrT_quadrature__IGauss_t, 0, 0, 0},  {&_swigt__p_std__shared_ptrT_quadrature__GaussHexa_t, _p_std__shared_ptrT_quadrature__GaussHexa_tTo_p_std__shared_ptrT_quadrature__IGauss_t, 0, 0},  {&_swigt__p_std__shared_ptrT_quadrature__GaussLine_t, _p_std__shared_ptrT_quadrature__GaussLine_tTo_p_std__shared_ptrT_quadrature__IGauss_t, 0, 0},  {&_swigt__p_std__shared_ptrT_quadrature__GaussRect_t, _p_std__shared_ptrT_quadrature__GaussRect_tTo_p_std__shared_ptrT_quadrature__IGauss_t, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__shared_ptrT_values__IBool_t[] = {  {&_swigt__p_std__shared_ptrT_values__IBool_t, 0, 0, 0},  {&_swigt__p_std__shared_ptrT_values__ValueBool_t, _p_std__shared_ptrT_values__ValueBool_tTo_p_std__shared_ptrT_values__IBool_t, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__shared_ptrT_values__IMatrix3D_t[] = {  {&_swigt__p_std__shared_ptrT_values__IMatrix3D_t, 0, 0, 0},  {&_swigt__p_std__shared_ptrT_values__ValueMatrix3DCongruent_t, _p_std__shared_ptrT_values__ValueMatrix3DCongruent_tTo_p_std__shared_ptrT_values__IMatrix3D_t, 0, 0},  {&_swigt__p_std__shared_ptrT_values__ValueMatrix3DInterpolation_t, _p_std__shared_ptrT_values__ValueMatrix3DInterpolation_tTo_p_std__shared_ptrT_values__IMatrix3D_t, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__shared_ptrT_values__IScalar1D_t[] = {  {&_swigt__p_std__shared_ptrT_values__IScalar1D_t, 0, 0, 0},  {&_swigt__p_std__shared_ptrT_values__ValueScalar1DFunction_t, _p_std__shared_ptrT_values__ValueScalar1DFunction_tTo_p_std__shared_ptrT_values__IScalar1D_t, 0, 0},  {&_swigt__p_std__shared_ptrT_values__ValueScalar1D_t, _p_std__shared_ptrT_values__ValueScalar1D_tTo_p_std__shared_ptrT_values__IScalar1D_t, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__shared_ptrT_values__IScalar2D_t[] = {  {&_swigt__p_std__shared_ptrT_values__IScalar2D_t, 0, 0, 0},  {&_swigt__p_std__shared_ptrT_values__ValueScalar2DFunction_t, _p_std__shared_ptrT_values__ValueScalar2DFunction_tTo_p_std__shared_ptrT_values__IScalar2D_t, 0, 0},  {&_swigt__p_std__shared_ptrT_values__ValueScalar2D_t, _p_std__shared_ptrT_values__ValueScalar2D_tTo_p_std__shared_ptrT_values__IScalar2D_t, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__shared_ptrT_values__IScalar3D_t[] = {  {&_swigt__p_std__shared_ptrT_values__IScalar3D_t, 0, 0, 0},  {&_swigt__p_std__shared_ptrT_values__ValueScalar3DCongruent_t, _p_std__shared_ptrT_values__ValueScalar3DCongruent_tTo_p_std__shared_ptrT_values__IScalar3D_t, 0, 0},  {&_swigt__p_std__shared_ptrT_values__ValueScalar3DFunction_t, _p_std__shared_ptrT_values__ValueScalar3DFunction_tTo_p_std__shared_ptrT_values__IScalar3D_t, 0, 0},  {&_swigt__p_std__shared_ptrT_values__ValueScalar3DInterpolation_t, _p_std__shared_ptrT_values__ValueScalar3DInterpolation_tTo_p_std__shared_ptrT_values__IScalar3D_t, 0, 0},  {&_swigt__p_std__shared_ptrT_values__ValueScalar3D_t, _p_std__shared_ptrT_values__ValueScalar3D_tTo_p_std__shared_ptrT_values__IScalar3D_t, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__shared_ptrT_values__IScalar_t[] = {  {&_swigt__p_std__shared_ptrT_values__IScalar_t, 0, 0, 0},  {&_swigt__p_std__shared_ptrT_values__ValueScalar_t, _p_std__shared_ptrT_values__ValueScalar_tTo_p_std__shared_ptrT_values__IScalar_t, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__shared_ptrT_values__IString_t[] = {  {&_swigt__p_std__shared_ptrT_values__IString_t, 0, 0, 0},  {&_swigt__p_std__shared_ptrT_values__ValueString_t, _p_std__shared_ptrT_values__ValueString_tTo_p_std__shared_ptrT_values__IString_t, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__shared_ptrT_values__IValue_t[] = {  {&_swigt__p_std__shared_ptrT_values__IValue_t, 0, 0, 0},  {&_swigt__p_std__shared_ptrT_values__IBool_t, _p_std__shared_ptrT_values__IBool_tTo_p_std__shared_ptrT_values__IValue_t, 0, 0},  {&_swigt__p_std__shared_ptrT_values__IMatrix3D_t, _p_std__shared_ptrT_values__IMatrix3D_tTo_p_std__shared_ptrT_values__IValue_t, 0, 0},  {&_swigt__p_std__shared_ptrT_values__IScalar1D_t, _p_std__shared_ptrT_values__IScalar1D_tTo_p_std__shared_ptrT_values__IValue_t, 0, 0},  {&_swigt__p_std__shared_ptrT_values__IScalar2D_t, _p_std__shared_ptrT_values__IScalar2D_tTo_p_std__shared_ptrT_values__IValue_t, 0, 0},  {&_swigt__p_std__shared_ptrT_values__IScalar3D_t, _p_std__shared_ptrT_values__IScalar3D_tTo_p_std__shared_ptrT_values__IValue_t, 0, 0},  {&_swigt__p_std__shared_ptrT_values__IScalar_t, _p_std__shared_ptrT_values__IScalar_tTo_p_std__shared_ptrT_values__IValue_t, 0, 0},  {&_swigt__p_std__shared_ptrT_values__IString_t, _p_std__shared_ptrT_values__IString_tTo_p_std__shared_ptrT_values__IValue_t, 0, 0},  {&_swigt__p_std__shared_ptrT_values__IVector3D_t, _p_std__shared_ptrT_values__IVector3D_tTo_p_std__shared_ptrT_values__IValue_t, 0, 0},  {&_swigt__p_std__shared_ptrT_values__ValueBool_t, _p_std__shared_ptrT_values__ValueBool_tTo_p_std__shared_ptrT_values__IValue_t, 0, 0},  {&_swigt__p_std__shared_ptrT_values__ValueMatrix3DCongruent_t, _p_std__shared_ptrT_values__ValueMatrix3DCongruent_tTo_p_std__shared_ptrT_values__IValue_t, 0, 0},  {&_swigt__p_std__shared_ptrT_values__ValueMatrix3DInterpolation_t, _p_std__shared_ptrT_values__ValueMatrix3DInterpolation_tTo_p_std__shared_ptrT_values__IValue_t, 0, 0},  {&_swigt__p_std__shared_ptrT_values__ValueScalar1DFunction_t, _p_std__shared_ptrT_values__ValueScalar1DFunction_tTo_p_std__shared_ptrT_values__IValue_t, 0, 0},  {&_swigt__p_std__shared_ptrT_values__ValueScalar1D_t, _p_std__shared_ptrT_values__ValueScalar1D_tTo_p_std__shared_ptrT_values__IValue_t, 0, 0},  {&_swigt__p_std__shared_ptrT_values__ValueScalar2DFunction_t, _p_std__shared_ptrT_values__ValueScalar2DFunction_tTo_p_std__shared_ptrT_values__IValue_t, 0, 0},  {&_swigt__p_std__shared_ptrT_values__ValueScalar2D_t, _p_std__shared_ptrT_values__ValueScalar2D_tTo_p_std__shared_ptrT_values__IValue_t, 0, 0},  {&_swigt__p_std__shared_ptrT_values__ValueScalar3DCongruent_t, _p_std__shared_ptrT_values__ValueScalar3DCongruent_tTo_p_std__shared_ptrT_values__IValue_t, 0, 0},  {&_swigt__p_std__shared_ptrT_values__ValueScalar3DFunction_t, _p_std__shared_ptrT_values__ValueScalar3DFunction_tTo_p_std__shared_ptrT_values__IValue_t, 0, 0},  {&_swigt__p_std__shared_ptrT_values__ValueScalar3DInterpolation_t, _p_std__shared_ptrT_values__ValueScalar3DInterpolation_tTo_p_std__shared_ptrT_values__IValue_t, 0, 0},  {&_swigt__p_std__shared_ptrT_values__ValueScalar3D_t, _p_std__shared_ptrT_values__ValueScalar3D_tTo_p_std__shared_ptrT_values__IValue_t, 0, 0},  {&_swigt__p_std__shared_ptrT_values__ValueScalar_t, _p_std__shared_ptrT_values__ValueScalar_tTo_p_std__shared_ptrT_values__IValue_t, 0, 0},  {&_swigt__p_std__shared_ptrT_values__ValueString_t, _p_std__shared_ptrT_values__ValueString_tTo_p_std__shared_ptrT_values__IValue_t, 0, 0},  {&_swigt__p_std__shared_ptrT_values__ValueVector3DCongruent_t, _p_std__shared_ptrT_values__ValueVector3DCongruent_tTo_p_std__shared_ptrT_values__IValue_t, 0, 0},  {&_swigt__p_std__shared_ptrT_values__ValueVector3D_t, _p_std__shared_ptrT_values__ValueVector3D_tTo_p_std__shared_ptrT_values__IValue_t, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__shared_ptrT_values__IVector3D_t[] = {  {&_swigt__p_std__shared_ptrT_values__IVector3D_t, 0, 0, 0},  {&_swigt__p_std__shared_ptrT_values__ValueVector3DCongruent_t, _p_std__shared_ptrT_values__ValueVector3DCongruent_tTo_p_std__shared_ptrT_values__IVector3D_t, 0, 0},  {&_swigt__p_std__shared_ptrT_values__ValueVector3D_t, _p_std__shared_ptrT_values__ValueVector3D_tTo_p_std__shared_ptrT_values__IVector3D_t, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__shared_ptrT_values__ValueBool_const_t[] = {  {&_swigt__p_std__shared_ptrT_values__ValueBool_const_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__shared_ptrT_values__ValueBool_t[] = {  {&_swigt__p_std__shared_ptrT_values__ValueBool_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__shared_ptrT_values__ValueMatrix3DCongruent_const_t[] = {  {&_swigt__p_std__shared_ptrT_values__ValueMatrix3DCongruent_const_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__shared_ptrT_values__ValueMatrix3DCongruent_t[] = {  {&_swigt__p_std__shared_ptrT_values__ValueMatrix3DCongruent_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__shared_ptrT_values__ValueMatrix3DInterpolation_const_t[] = {  {&_swigt__p_std__shared_ptrT_values__ValueMatrix3DInterpolation_const_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__shared_ptrT_values__ValueMatrix3DInterpolation_t[] = {  {&_swigt__p_std__shared_ptrT_values__ValueMatrix3DInterpolation_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__shared_ptrT_values__ValueScalar1DFunction_const_t[] = {  {&_swigt__p_std__shared_ptrT_values__ValueScalar1DFunction_const_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__shared_ptrT_values__ValueScalar1DFunction_t[] = {  {&_swigt__p_std__shared_ptrT_values__ValueScalar1DFunction_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__shared_ptrT_values__ValueScalar1D_const_t[] = {  {&_swigt__p_std__shared_ptrT_values__ValueScalar1D_const_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__shared_ptrT_values__ValueScalar1D_t[] = {  {&_swigt__p_std__shared_ptrT_values__ValueScalar1D_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__shared_ptrT_values__ValueScalar2DFunction_const_t[] = {  {&_swigt__p_std__shared_ptrT_values__ValueScalar2DFunction_const_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__shared_ptrT_values__ValueScalar2DFunction_t[] = {  {&_swigt__p_std__shared_ptrT_values__ValueScalar2DFunction_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__shared_ptrT_values__ValueScalar2D_const_t[] = {  {&_swigt__p_std__shared_ptrT_values__ValueScalar2D_const_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__shared_ptrT_values__ValueScalar2D_t[] = {  {&_swigt__p_std__shared_ptrT_values__ValueScalar2D_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__shared_ptrT_values__ValueScalar3DCongruent_const_t[] = {  {&_swigt__p_std__shared_ptrT_values__ValueScalar3DCongruent_const_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__shared_ptrT_values__ValueScalar3DCongruent_t[] = {  {&_swigt__p_std__shared_ptrT_values__ValueScalar3DCongruent_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__shared_ptrT_values__ValueScalar3DFunction_const_t[] = {  {&_swigt__p_std__shared_ptrT_values__ValueScalar3DFunction_const_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__shared_ptrT_values__ValueScalar3DFunction_t[] = {  {&_swigt__p_std__shared_ptrT_values__ValueScalar3DFunction_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__shared_ptrT_values__ValueScalar3DInterpolation_const_t[] = {  {&_swigt__p_std__shared_ptrT_values__ValueScalar3DInterpolation_const_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__shared_ptrT_values__ValueScalar3DInterpolation_t[] = {  {&_swigt__p_std__shared_ptrT_values__ValueScalar3DInterpolation_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__shared_ptrT_values__ValueScalar3D_const_t[] = {  {&_swigt__p_std__shared_ptrT_values__ValueScalar3D_const_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__shared_ptrT_values__ValueScalar3D_t[] = {  {&_swigt__p_std__shared_ptrT_values__ValueScalar3D_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__shared_ptrT_values__ValueScalar_const_t[] = {  {&_swigt__p_std__shared_ptrT_values__ValueScalar_const_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__shared_ptrT_values__ValueScalar_t[] = {  {&_swigt__p_std__shared_ptrT_values__ValueScalar_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__shared_ptrT_values__ValueString_const_t[] = {  {&_swigt__p_std__shared_ptrT_values__ValueString_const_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__shared_ptrT_values__ValueString_t[] = {  {&_swigt__p_std__shared_ptrT_values__ValueString_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__shared_ptrT_values__ValueVector3DCongruent_const_t[] = {  {&_swigt__p_std__shared_ptrT_values__ValueVector3DCongruent_const_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__shared_ptrT_values__ValueVector3DCongruent_t[] = {  {&_swigt__p_std__shared_ptrT_values__ValueVector3DCongruent_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__shared_ptrT_values__ValueVector3D_const_t[] = {  {&_swigt__p_std__shared_ptrT_values__ValueVector3D_const_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__shared_ptrT_values__ValueVector3D_t[] = {  {&_swigt__p_std__shared_ptrT_values__ValueVector3D_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__string[] = {  {&_swigt__p_std__string, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_dive__DirichletMeshIndex_t[] = {  {&_swigt__p_std__vectorT_dive__DirichletMeshIndex_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_dive__DofMeshIndex_t[] = {  {&_swigt__p_std__vectorT_dive__DofMeshIndex_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_dive__NodeMeshIndex_t[] = {  {&_swigt__p_std__vectorT_dive__NodeMeshIndex_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_double_t[] = {  {&_swigt__p_std__vectorT_double_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_eilig__Ellpack_std__allocatorT_eilig__Ellpack_t_t[] = {  {&_swigt__p_std__vectorT_eilig__Ellpack_std__allocatorT_eilig__Ellpack_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_eilig__Matrix_std__allocatorT_eilig__Matrix_t_t[] = {  {&_swigt__p_std__vectorT_eilig__Matrix_std__allocatorT_eilig__Matrix_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_eilig__Vector_std__allocatorT_eilig__Vector_t_t[] = {  {&_swigt__p_std__vectorT_eilig__Vector_std__allocatorT_eilig__Vector_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_std__shared_ptrT_basis__IBasis_t_t[] = {  {&_swigt__p_std__vectorT_std__shared_ptrT_basis__IBasis_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_std__shared_ptrT_dive__elements__IElement_t_t[] = {  {&_swigt__p_std__vectorT_std__shared_ptrT_dive__elements__IElement_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_std__shared_ptrT_dive__loads__IDirichlet_t_t[] = {  {&_swigt__p_std__vectorT_std__shared_ptrT_dive__loads__IDirichlet_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_std__shared_ptrT_dive__loads__ILoad_t_t[] = {  {&_swigt__p_std__vectorT_std__shared_ptrT_dive__loads__ILoad_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_std__shared_ptrT_dive__meshes__IMesh_t_t[] = {  {&_swigt__p_std__vectorT_std__shared_ptrT_dive__meshes__IMesh_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_std__shared_ptrT_nodes__INode_t_t[] = {  {&_swigt__p_std__vectorT_std__shared_ptrT_nodes__INode_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_std__size_t_t[] = {  {&_swigt__p_std__vectorT_std__size_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_std__vectorT_dive__NodeMeshIndex_t_t[] = {  {&_swigt__p_std__vectorT_std__vectorT_dive__NodeMeshIndex_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_std__vectorT_double_t_t[] = {  {&_swigt__p_std__vectorT_std__vectorT_double_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_swig__SwigPyIterator[] = {  {&_swigt__p_swig__SwigPyIterator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_utils__Strings[] = {  {&_swigt__p_utils__Strings, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_utils__file__Text[] = {  {&_swigt__p_utils__file__Text, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_value_type[] = {  {&_swigt__p_value_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_values__IBool[] = {  {&_swigt__p_values__IBool, 0, 0, 0},  {&_swigt__p_values__ValueBool, _p_values__ValueBoolTo_p_values__IBool, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_values__IMatrix3D[] = {  {&_swigt__p_values__IMatrix3D, 0, 0, 0},  {&_swigt__p_values__ValueMatrix3DCongruent, _p_values__ValueMatrix3DCongruentTo_p_values__IMatrix3D, 0, 0},  {&_swigt__p_values__ValueMatrix3DInterpolation, _p_values__ValueMatrix3DInterpolationTo_p_values__IMatrix3D, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_values__IScalar[] = {  {&_swigt__p_values__IScalar, 0, 0, 0},  {&_swigt__p_values__ValueScalar, _p_values__ValueScalarTo_p_values__IScalar, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_values__IScalar1D[] = {  {&_swigt__p_values__IScalar1D, 0, 0, 0},  {&_swigt__p_values__ValueScalar1D, _p_values__ValueScalar1DTo_p_values__IScalar1D, 0, 0},  {&_swigt__p_values__ValueScalar1DFunction, _p_values__ValueScalar1DFunctionTo_p_values__IScalar1D, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_values__IScalar2D[] = {  {&_swigt__p_values__IScalar2D, 0, 0, 0},  {&_swigt__p_values__ValueScalar2D, _p_values__ValueScalar2DTo_p_values__IScalar2D, 0, 0},  {&_swigt__p_values__ValueScalar2DFunction, _p_values__ValueScalar2DFunctionTo_p_values__IScalar2D, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_values__IScalar3D[] = {  {&_swigt__p_values__IScalar3D, 0, 0, 0},  {&_swigt__p_values__ValueScalar3D, _p_values__ValueScalar3DTo_p_values__IScalar3D, 0, 0},  {&_swigt__p_values__ValueScalar3DCongruent, _p_values__ValueScalar3DCongruentTo_p_values__IScalar3D, 0, 0},  {&_swigt__p_values__ValueScalar3DFunction, _p_values__ValueScalar3DFunctionTo_p_values__IScalar3D, 0, 0},  {&_swigt__p_values__ValueScalar3DInterpolation, _p_values__ValueScalar3DInterpolationTo_p_values__IScalar3D, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_values__IString[] = {  {&_swigt__p_values__IString, 0, 0, 0},  {&_swigt__p_values__ValueString, _p_values__ValueStringTo_p_values__IString, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_values__IValue[] = {  {&_swigt__p_values__IValue, 0, 0, 0},  {&_swigt__p_values__IBool, _p_values__IBoolTo_p_values__IValue, 0, 0},  {&_swigt__p_values__IMatrix3D, _p_values__IMatrix3DTo_p_values__IValue, 0, 0},  {&_swigt__p_values__IScalar, _p_values__IScalarTo_p_values__IValue, 0, 0},  {&_swigt__p_values__IScalar1D, _p_values__IScalar1DTo_p_values__IValue, 0, 0},  {&_swigt__p_values__IScalar2D, _p_values__IScalar2DTo_p_values__IValue, 0, 0},  {&_swigt__p_values__IScalar3D, _p_values__IScalar3DTo_p_values__IValue, 0, 0},  {&_swigt__p_values__IString, _p_values__IStringTo_p_values__IValue, 0, 0},  {&_swigt__p_values__IVector3D, _p_values__IVector3DTo_p_values__IValue, 0, 0},  {&_swigt__p_values__ValueBool, _p_values__ValueBoolTo_p_values__IValue, 0, 0},  {&_swigt__p_values__ValueMatrix3DCongruent, _p_values__ValueMatrix3DCongruentTo_p_values__IValue, 0, 0},  {&_swigt__p_values__ValueMatrix3DInterpolation, _p_values__ValueMatrix3DInterpolationTo_p_values__IValue, 0, 0},  {&_swigt__p_values__ValueScalar, _p_values__ValueScalarTo_p_values__IValue, 0, 0},  {&_swigt__p_values__ValueScalar1D, _p_values__ValueScalar1DTo_p_values__IValue, 0, 0},  {&_swigt__p_values__ValueScalar1DFunction, _p_values__ValueScalar1DFunctionTo_p_values__IValue, 0, 0},  {&_swigt__p_values__ValueScalar2D, _p_values__ValueScalar2DTo_p_values__IValue, 0, 0},  {&_swigt__p_values__ValueScalar2DFunction, _p_values__ValueScalar2DFunctionTo_p_values__IValue, 0, 0},  {&_swigt__p_values__ValueScalar3D, _p_values__ValueScalar3DTo_p_values__IValue, 0, 0},  {&_swigt__p_values__ValueScalar3DCongruent, _p_values__ValueScalar3DCongruentTo_p_values__IValue, 0, 0},  {&_swigt__p_values__ValueScalar3DFunction, _p_values__ValueScalar3DFunctionTo_p_values__IValue, 0, 0},  {&_swigt__p_values__ValueScalar3DInterpolation, _p_values__ValueScalar3DInterpolationTo_p_values__IValue, 0, 0},  {&_swigt__p_values__ValueString, _p_values__ValueStringTo_p_values__IValue, 0, 0},  {&_swigt__p_values__ValueVector3D, _p_values__ValueVector3DTo_p_values__IValue, 0, 0},  {&_swigt__p_values__ValueVector3DCongruent, _p_values__ValueVector3DCongruentTo_p_values__IValue, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_values__IVector3D[] = {  {&_swigt__p_values__IVector3D, 0, 0, 0},  {&_swigt__p_values__ValueVector3D, _p_values__ValueVector3DTo_p_values__IVector3D, 0, 0},  {&_swigt__p_values__ValueVector3DCongruent, _p_values__ValueVector3DCongruentTo_p_values__IVector3D, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_values__ValueBool[] = {  {&_swigt__p_values__ValueBool, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_values__ValueMatrix3DCongruent[] = {  {&_swigt__p_values__ValueMatrix3DCongruent, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_values__ValueMatrix3DInterpolation[] = {  {&_swigt__p_values__ValueMatrix3DInterpolation, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_values__ValueScalar[] = {  {&_swigt__p_values__ValueScalar, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_values__ValueScalar1D[] = {  {&_swigt__p_values__ValueScalar1D, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_values__ValueScalar1DFunction[] = {  {&_swigt__p_values__ValueScalar1DFunction, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_values__ValueScalar2D[] = {  {&_swigt__p_values__ValueScalar2D, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_values__ValueScalar2DFunction[] = {  {&_swigt__p_values__ValueScalar2DFunction, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_values__ValueScalar3D[] = {  {&_swigt__p_values__ValueScalar3D, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_values__ValueScalar3DCongruent[] = {  {&_swigt__p_values__ValueScalar3DCongruent, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_values__ValueScalar3DFunction[] = {  {&_swigt__p_values__ValueScalar3DFunction, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_values__ValueScalar3DInterpolation[] = {  {&_swigt__p_values__ValueScalar3DInterpolation, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_values__ValueString[] = {  {&_swigt__p_values__ValueString, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_values__ValueVector3D[] = {  {&_swigt__p_values__ValueVector3D, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_values__ValueVector3DCongruent[] = {  {&_swigt__p_values__ValueVector3DCongruent, 0, 0, 0},{0, 0, 0, 0}};

static swig_cast_info *swig_cast_initial[] = {
  _swigc__p_FunctionScalar,
  _swigc__p_a_2__double,
  _swigc__p_allocator_type,
  _swigc__p_basis__Cartesian,
  _swigc__p_basis__Cylindrical,
  _swigc__p_basis__IBasis,
  _swigc__p_char,
  _swigc__p_difference_type,
  _swigc__p_dive__DirichletMeshIndex,
  _swigc__p_dive__DofMeshIndex,
  _swigc__p_dive__NodeMeshIndex,
  _swigc__p_dive__elements__ElementHexa,
  _swigc__p_dive__elements__ElementHexa__LinearFunctions,
  _swigc__p_dive__elements__ElementHexa__QuadraticFunctions,
  _swigc__p_dive__elements__IElement,
  _swigc__p_dive__elements__IntegralAreaHelper,
  _swigc__p_dive__elements__IntegralEdgeHelper,
  _swigc__p_dive__loads__Dirichlet,
  _swigc__p_dive__loads__IDirichlet,
  _swigc__p_dive__loads__ILoad,
  _swigc__p_dive__loads__LoadDistributedFace,
  _swigc__p_dive__loads__LoadDistributedVolume,
  _swigc__p_dive__meshes__IMesh,
  _swigc__p_dive__meshes__Mesh,
  _swigc__p_dive__problems__IFluid,
  _swigc__p_dive__problems__IPressure,
  _swigc__p_dive__problems__IProblem,
  _swigc__p_dive__problems__IThermal,
  _swigc__p_dive__problems__ProblemFluid,
  _swigc__p_dive__problems__ProblemPressure,
  _swigc__p_dive__problems__ProblemThermal,
  _swigc__p_dive__selection__ElementCmp,
  _swigc__p_dive__selection__Face,
  _swigc__p_dive__selection__FaceCmp,
  _swigc__p_dive__selection__NodeCmp,
  _swigc__p_dive__selection__SpecElementsByTag,
  _swigc__p_dive__selection__SpecElementsByType,
  _swigc__p_dive__selection__SpecNodesByCoordinate,
  _swigc__p_dive__selection__SpecNodesByRange,
  _swigc__p_dive__selection__SpecNodesByTag,
  _swigc__p_dive__selection__SpecificationT_std__shared_ptrT_dive__elements__IElement_t_t,
  _swigc__p_dive__selection__SpecificationT_std__shared_ptrT_nodes__INode_t_t,
  _swigc__p_dive__selection__TypeCmp,
  _swigc__p_dive__timers__ITimer,
  _swigc__p_dive__timers__TimerStationary,
  _swigc__p_dive__timers__TimerStepped,
  _swigc__p_double,
  _swigc__p_eilig__Ellpack,
  _swigc__p_eilig__Matrix,
  _swigc__p_eilig__Vector,
  _swigc__p_f_double__double,
  _swigc__p_f_double_double__double,
  _swigc__p_f_double_double_double__double,
  _swigc__p_f_long_long___size_t_double__long_long,
  _swigc__p_interpolation__IInterpolation,
  _swigc__p_interpolation__InterpolationFixed,
  _swigc__p_interpolation__InterpolationIDW,
  _swigc__p_interpolation__InterpolationNN,
  _swigc__p_interpolation__InterpolationRBF,
  _swigc__p_kdtree__TreePtr,
  _swigc__p_long_long,
  _swigc__p_material__IBase,
  _swigc__p_material__IMaterial,
  _swigc__p_material__IMaterialFluid,
  _swigc__p_material__IMaterialSolid,
  _swigc__p_material__MaterialFluid,
  _swigc__p_material__MaterialSolid,
  _swigc__p_nodes__INode,
  _swigc__p_nodes__Node,
  _swigc__p_p_PyObject,
  _swigc__p_quadrature__GaussHexa,
  _swigc__p_quadrature__GaussLine,
  _swigc__p_quadrature__GaussRect,
  _swigc__p_quadrature__IGauss,
  _swigc__p_size_t,
  _swigc__p_size_type,
  _swigc__p_std__allocatorT_dive__DirichletMeshIndex_t,
  _swigc__p_std__allocatorT_dive__DofMeshIndex_t,
  _swigc__p_std__allocatorT_dive__NodeMeshIndex_t,
  _swigc__p_std__allocatorT_double_t,
  _swigc__p_std__allocatorT_std__shared_ptrT_basis__IBasis_t_t,
  _swigc__p_std__allocatorT_std__shared_ptrT_dive__elements__IElement_t_t,
  _swigc__p_std__allocatorT_std__shared_ptrT_dive__loads__IDirichlet_t_t,
  _swigc__p_std__allocatorT_std__shared_ptrT_dive__loads__ILoad_t_t,
  _swigc__p_std__allocatorT_std__shared_ptrT_dive__meshes__IMesh_t_t,
  _swigc__p_std__allocatorT_std__shared_ptrT_nodes__INode_t_t,
  _swigc__p_std__allocatorT_std__size_t_t,
  _swigc__p_std__allocatorT_std__vectorT_dive__NodeMeshIndex_t_t,
  _swigc__p_std__allocatorT_std__vectorT_double_t_t,
  _swigc__p_std__invalid_argument,
  _swigc__p_std__mapT_long_long_std__string_t,
  _swigc__p_std__setT_dive__selection__Face_dive__selection__FaceCmp_std__allocatorT_dive__selection__Face_t_t,
  _swigc__p_std__setT_std__shared_ptrT_dive__elements__IElement_t_dive__selection__ElementCmp_std__allocatorT_std__shared_ptrT_dive__elements__IElement_t_t_t,
  _swigc__p_std__setT_std__shared_ptrT_nodes__INode_t_dive__selection__NodeCmp_std__allocatorT_std__shared_ptrT_nodes__INode_t_t_t,
  _swigc__p_std__setT_std__size_t_dive__selection__TypeCmp_std__allocatorT_std__size_t_t_t,
  _swigc__p_std__shared_ptrT_basis__Cartesian_const_t,
  _swigc__p_std__shared_ptrT_basis__Cartesian_t,
  _swigc__p_std__shared_ptrT_basis__Cylindrical_const_t,
  _swigc__p_std__shared_ptrT_basis__Cylindrical_t,
  _swigc__p_std__shared_ptrT_basis__IBasis_const_t,
  _swigc__p_std__shared_ptrT_basis__IBasis_t,
  _swigc__p_std__shared_ptrT_dive__elements__ElementHexa_const_t,
  _swigc__p_std__shared_ptrT_dive__elements__ElementHexa_t,
  _swigc__p_std__shared_ptrT_dive__elements__IElement_const_t,
  _swigc__p_std__shared_ptrT_dive__elements__IElement_t,
  _swigc__p_std__shared_ptrT_dive__loads__Dirichlet_const_t,
  _swigc__p_std__shared_ptrT_dive__loads__Dirichlet_t,
  _swigc__p_std__shared_ptrT_dive__loads__IDirichlet_const_t,
  _swigc__p_std__shared_ptrT_dive__loads__IDirichlet_t,
  _swigc__p_std__shared_ptrT_dive__loads__ILoad_const_t,
  _swigc__p_std__shared_ptrT_dive__loads__ILoad_t,
  _swigc__p_std__shared_ptrT_dive__loads__LoadDistributedFace_const_t,
  _swigc__p_std__shared_ptrT_dive__loads__LoadDistributedFace_t,
  _swigc__p_std__shared_ptrT_dive__loads__LoadDistributedVolume_const_t,
  _swigc__p_std__shared_ptrT_dive__loads__LoadDistributedVolume_t,
  _swigc__p_std__shared_ptrT_dive__meshes__IMesh_const_t,
  _swigc__p_std__shared_ptrT_dive__meshes__IMesh_t,
  _swigc__p_std__shared_ptrT_dive__meshes__Mesh_const_t,
  _swigc__p_std__shared_ptrT_dive__meshes__Mesh_t,
  _swigc__p_std__shared_ptrT_dive__problems__IFluid_t,
  _swigc__p_std__shared_ptrT_dive__problems__IPressure_t,
  _swigc__p_std__shared_ptrT_dive__problems__IProblem_const_t,
  _swigc__p_std__shared_ptrT_dive__problems__IProblem_t,
  _swigc__p_std__shared_ptrT_dive__problems__IThermal_t,
  _swigc__p_std__shared_ptrT_dive__problems__ProblemFluid_const_t,
  _swigc__p_std__shared_ptrT_dive__problems__ProblemFluid_t,
  _swigc__p_std__shared_ptrT_dive__problems__ProblemPressure_const_t,
  _swigc__p_std__shared_ptrT_dive__problems__ProblemPressure_t,
  _swigc__p_std__shared_ptrT_dive__problems__ProblemThermal_const_t,
  _swigc__p_std__shared_ptrT_dive__problems__ProblemThermal_t,
  _swigc__p_std__shared_ptrT_dive__timers__ITimer_const_t,
  _swigc__p_std__shared_ptrT_dive__timers__ITimer_t,
  _swigc__p_std__shared_ptrT_dive__timers__TimerStationary_const_t,
  _swigc__p_std__shared_ptrT_dive__timers__TimerStationary_t,
  _swigc__p_std__shared_ptrT_dive__timers__TimerStepped_const_t,
  _swigc__p_std__shared_ptrT_dive__timers__TimerStepped_t,
  _swigc__p_std__shared_ptrT_interpolation__IInterpolation_const_t,
  _swigc__p_std__shared_ptrT_interpolation__IInterpolation_t,
  _swigc__p_std__shared_ptrT_interpolation__InterpolationFixed_const_t,
  _swigc__p_std__shared_ptrT_interpolation__InterpolationFixed_t,
  _swigc__p_std__shared_ptrT_interpolation__InterpolationIDW_const_t,
  _swigc__p_std__shared_ptrT_interpolation__InterpolationIDW_t,
  _swigc__p_std__shared_ptrT_interpolation__InterpolationNN_const_t,
  _swigc__p_std__shared_ptrT_interpolation__InterpolationNN_t,
  _swigc__p_std__shared_ptrT_interpolation__InterpolationRBF_const_t,
  _swigc__p_std__shared_ptrT_interpolation__InterpolationRBF_t,
  _swigc__p_std__shared_ptrT_material__IBase_const_t,
  _swigc__p_std__shared_ptrT_material__IBase_t,
  _swigc__p_std__shared_ptrT_material__IMaterialFluid_const_t,
  _swigc__p_std__shared_ptrT_material__IMaterialFluid_t,
  _swigc__p_std__shared_ptrT_material__IMaterialSolid_const_t,
  _swigc__p_std__shared_ptrT_material__IMaterialSolid_t,
  _swigc__p_std__shared_ptrT_material__IMaterial_const_t,
  _swigc__p_std__shared_ptrT_material__IMaterial_t,
  _swigc__p_std__shared_ptrT_material__MaterialFluid_const_t,
  _swigc__p_std__shared_ptrT_material__MaterialFluid_t,
  _swigc__p_std__shared_ptrT_material__MaterialSolid_const_t,
  _swigc__p_std__shared_ptrT_material__MaterialSolid_t,
  _swigc__p_std__shared_ptrT_nodes__INode_const_t,
  _swigc__p_std__shared_ptrT_nodes__INode_t,
  _swigc__p_std__shared_ptrT_nodes__Node_const_t,
  _swigc__p_std__shared_ptrT_nodes__Node_t,
  _swigc__p_std__shared_ptrT_quadrature__GaussHexa_const_t,
  _swigc__p_std__shared_ptrT_quadrature__GaussHexa_t,
  _swigc__p_std__shared_ptrT_quadrature__GaussLine_const_t,
  _swigc__p_std__shared_ptrT_quadrature__GaussLine_t,
  _swigc__p_std__shared_ptrT_quadrature__GaussRect_const_t,
  _swigc__p_std__shared_ptrT_quadrature__GaussRect_t,
  _swigc__p_std__shared_ptrT_quadrature__IGauss_const_t,
  _swigc__p_std__shared_ptrT_quadrature__IGauss_t,
  _swigc__p_std__shared_ptrT_values__IBool_t,
  _swigc__p_std__shared_ptrT_values__IMatrix3D_t,
  _swigc__p_std__shared_ptrT_values__IScalar1D_t,
  _swigc__p_std__shared_ptrT_values__IScalar2D_t,
  _swigc__p_std__shared_ptrT_values__IScalar3D_t,
  _swigc__p_std__shared_ptrT_values__IScalar_t,
  _swigc__p_std__shared_ptrT_values__IString_t,
  _swigc__p_std__shared_ptrT_values__IValue_t,
  _swigc__p_std__shared_ptrT_values__IVector3D_t,
  _swigc__p_std__shared_ptrT_values__ValueBool_const_t,
  _swigc__p_std__shared_ptrT_values__ValueBool_t,
  _swigc__p_std__shared_ptrT_values__ValueMatrix3DCongruent_const_t,
  _swigc__p_std__shared_ptrT_values__ValueMatrix3DCongruent_t,
  _swigc__p_std__shared_ptrT_values__ValueMatrix3DInterpolation_const_t,
  _swigc__p_std__shared_ptrT_values__ValueMatrix3DInterpolation_t,
  _swigc__p_std__shared_ptrT_values__ValueScalar1DFunction_const_t,
  _swigc__p_std__shared_ptrT_values__ValueScalar1DFunction_t,
  _swigc__p_std__shared_ptrT_values__ValueScalar1D_const_t,
  _swigc__p_std__shared_ptrT_values__ValueScalar1D_t,
  _swigc__p_std__shared_ptrT_values__ValueScalar2DFunction_const_t,
  _swigc__p_std__shared_ptrT_values__ValueScalar2DFunction_t,
  _swigc__p_std__shared_ptrT_values__ValueScalar2D_const_t,
  _swigc__p_std__shared_ptrT_values__ValueScalar2D_t,
  _swigc__p_std__shared_ptrT_values__ValueScalar3DCongruent_const_t,
  _swigc__p_std__shared_ptrT_values__ValueScalar3DCongruent_t,
  _swigc__p_std__shared_ptrT_values__ValueScalar3DFunction_const_t,
  _swigc__p_std__shared_ptrT_values__ValueScalar3DFunction_t,
  _swigc__p_std__shared_ptrT_values__ValueScalar3DInterpolation_const_t,
  _swigc__p_std__shared_ptrT_values__ValueScalar3DInterpolation_t,
  _swigc__p_std__shared_ptrT_values__ValueScalar3D_const_t,
  _swigc__p_std__shared_ptrT_values__ValueScalar3D_t,
  _swigc__p_std__shared_ptrT_values__ValueScalar_const_t,
  _swigc__p_std__shared_ptrT_values__ValueScalar_t,
  _swigc__p_std__shared_ptrT_values__ValueString_const_t,
  _swigc__p_std__shared_ptrT_values__ValueString_t,
  _swigc__p_std__shared_ptrT_values__ValueVector3DCongruent_const_t,
  _swigc__p_std__shared_ptrT_values__ValueVector3DCongruent_t,
  _swigc__p_std__shared_ptrT_values__ValueVector3D_const_t,
  _swigc__p_std__shared_ptrT_values__ValueVector3D_t,
  _swigc__p_std__string,
  _swigc__p_std__vectorT_dive__DirichletMeshIndex_t,
  _swigc__p_std__vectorT_dive__DofMeshIndex_t,
  _swigc__p_std__vectorT_dive__NodeMeshIndex_t,
  _swigc__p_std__vectorT_double_t,
  _swigc__p_std__vectorT_eilig__Ellpack_std__allocatorT_eilig__Ellpack_t_t,
  _swigc__p_std__vectorT_eilig__Matrix_std__allocatorT_eilig__Matrix_t_t,
  _swigc__p_std__vectorT_eilig__Vector_std__allocatorT_eilig__Vector_t_t,
  _swigc__p_std__vectorT_std__shared_ptrT_basis__IBasis_t_t,
  _swigc__p_std__vectorT_std__shared_ptrT_dive__elements__IElement_t_t,
  _swigc__p_std__vectorT_std__shared_ptrT_dive__loads__IDirichlet_t_t,
  _swigc__p_std__vectorT_std__shared_ptrT_dive__loads__ILoad_t_t,
  _swigc__p_std__vectorT_std__shared_ptrT_dive__meshes__IMesh_t_t,
  _swigc__p_std__vectorT_std__shared_ptrT_nodes__INode_t_t,
  _swigc__p_std__vectorT_std__size_t_t,
  _swigc__p_std__vectorT_std__vectorT_dive__NodeMeshIndex_t_t,
  _swigc__p_std__vectorT_std__vectorT_double_t_t,
  _swigc__p_swig__SwigPyIterator,
  _swigc__p_utils__Strings,
  _swigc__p_utils__file__Text,
  _swigc__p_value_type,
  _swigc__p_values__IBool,
  _swigc__p_values__IMatrix3D,
  _swigc__p_values__IScalar,
  _swigc__p_values__IScalar1D,
  _swigc__p_values__IScalar2D,
  _swigc__p_values__IScalar3D,
  _swigc__p_values__IString,
  _swigc__p_values__IValue,
  _swigc__p_values__IVector3D,
  _swigc__p_values__ValueBool,
  _swigc__p_values__ValueMatrix3DCongruent,
  _swigc__p_values__ValueMatrix3DInterpolation,
  _swigc__p_values__ValueScalar,
  _swigc__p_values__ValueScalar1D,
  _swigc__p_values__ValueScalar1DFunction,
  _swigc__p_values__ValueScalar2D,
  _swigc__p_values__ValueScalar2DFunction,
  _swigc__p_values__ValueScalar3D,
  _swigc__p_values__ValueScalar3DCongruent,
  _swigc__p_values__ValueScalar3DFunction,
  _swigc__p_values__ValueScalar3DInterpolation,
  _swigc__p_values__ValueString,
  _swigc__p_values__ValueVector3D,
  _swigc__p_values__ValueVector3DCongruent,
};


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (END) -------- */

static swig_const_info swig_const_table[] = {
{0, 0, 0, 0.0, 0, 0}};

#ifdef __cplusplus
}
#endif
/* -----------------------------------------------------------------------------
 * Type initialization:
 * This problem is tough by the requirement that no dynamic
 * memory is used. Also, since swig_type_info structures store pointers to
 * swig_cast_info structures and swig_cast_info structures store pointers back
 * to swig_type_info structures, we need some lookup code at initialization.
 * The idea is that swig generates all the structures that are needed.
 * The runtime then collects these partially filled structures.
 * The SWIG_InitializeModule function takes these initial arrays out of
 * swig_module, and does all the lookup, filling in the swig_module.types
 * array with the correct data and linking the correct swig_cast_info
 * structures together.
 *
 * The generated swig_type_info structures are assigned statically to an initial
 * array. We just loop through that array, and handle each type individually.
 * First we lookup if this type has been already loaded, and if so, use the
 * loaded structure instead of the generated one. Then we have to fill in the
 * cast linked list. The cast data is initially stored in something like a
 * two-dimensional array. Each row corresponds to a type (there are the same
 * number of rows as there are in the swig_type_initial array). Each entry in
 * a column is one of the swig_cast_info structures for that type.
 * The cast_initial array is actually an array of arrays, because each row has
 * a variable number of columns. So to actually build the cast linked list,
 * we find the array of casts associated with the type, and loop through it
 * adding the casts to the list. The one last trick we need to do is making
 * sure the type pointer in the swig_cast_info struct is correct.
 *
 * First off, we lookup the cast->type name to see if it is already loaded.
 * There are three cases to handle:
 *  1) If the cast->type has already been loaded AND the type we are adding
 *     casting info to has not been loaded (it is in this module), THEN we
 *     replace the cast->type pointer with the type pointer that has already
 *     been loaded.
 *  2) If BOTH types (the one we are adding casting info to, and the
 *     cast->type) are loaded, THEN the cast info has already been loaded by
 *     the previous module so we just ignore it.
 *  3) Finally, if cast->type has not already been loaded, then we add that
 *     swig_cast_info to the linked list (because the cast->type) pointer will
 *     be correct.
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#if 0
} /* c-mode */
#endif
#endif

#if 0
#define SWIGRUNTIME_DEBUG
#endif

#ifndef SWIG_INIT_CLIENT_DATA_TYPE
#define SWIG_INIT_CLIENT_DATA_TYPE void *
#endif

SWIGRUNTIME void
SWIG_InitializeModule(SWIG_INIT_CLIENT_DATA_TYPE clientdata) {
  size_t i;
  swig_module_info *module_head, *iter;
  int init;
  
  /* check to see if the circular list has been setup, if not, set it up */
  if (swig_module.next==0) {
    /* Initialize the swig_module */
    swig_module.type_initial = swig_type_initial;
    swig_module.cast_initial = swig_cast_initial;
    swig_module.next = &swig_module;
    init = 1;
  } else {
    init = 0;
  }
  
  /* Try and load any already created modules */
  module_head = SWIG_GetModule(clientdata);
  if (!module_head) {
    /* This is the first module loaded for this interpreter */
    /* so set the swig module into the interpreter */
    SWIG_SetModule(clientdata, &swig_module);
  } else {
    /* the interpreter has loaded a SWIG module, but has it loaded this one? */
    iter=module_head;
    do {
      if (iter==&swig_module) {
        /* Our module is already in the list, so there's nothing more to do. */
        return;
      }
      iter=iter->next;
    } while (iter!= module_head);
    
    /* otherwise we must add our module into the list */
    swig_module.next = module_head->next;
    module_head->next = &swig_module;
  }
  
  /* When multiple interpreters are used, a module could have already been initialized in
       a different interpreter, but not yet have a pointer in this interpreter.
       In this case, we do not want to continue adding types... everything should be
       set up already */
  if (init == 0) return;
  
  /* Now work on filling in swig_module.types */
#ifdef SWIGRUNTIME_DEBUG
  printf("SWIG_InitializeModule: size %lu\n", (unsigned long)swig_module.size);
#endif
  for (i = 0; i < swig_module.size; ++i) {
    swig_type_info *type = 0;
    swig_type_info *ret;
    swig_cast_info *cast;
    
#ifdef SWIGRUNTIME_DEBUG
    printf("SWIG_InitializeModule: type %lu %s\n", (unsigned long)i, swig_module.type_initial[i]->name);
#endif
    
    /* if there is another module already loaded */
    if (swig_module.next != &swig_module) {
      type = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, swig_module.type_initial[i]->name);
    }
    if (type) {
      /* Overwrite clientdata field */
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: found type %s\n", type->name);
#endif
      if (swig_module.type_initial[i]->clientdata) {
        type->clientdata = swig_module.type_initial[i]->clientdata;
#ifdef SWIGRUNTIME_DEBUG
        printf("SWIG_InitializeModule: found and overwrite type %s \n", type->name);
#endif
      }
    } else {
      type = swig_module.type_initial[i];
    }
    
    /* Insert casting types */
    cast = swig_module.cast_initial[i];
    while (cast->type) {
      /* Don't need to add information already in the list */
      ret = 0;
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: look cast %s\n", cast->type->name);
#endif
      if (swig_module.next != &swig_module) {
        ret = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, cast->type->name);
#ifdef SWIGRUNTIME_DEBUG
        if (ret) printf("SWIG_InitializeModule: found cast %s\n", ret->name);
#endif
      }
      if (ret) {
        if (type == swig_module.type_initial[i]) {
#ifdef SWIGRUNTIME_DEBUG
          printf("SWIG_InitializeModule: skip old type %s\n", ret->name);
#endif
          cast->type = ret;
          ret = 0;
        } else {
          /* Check for casting already in the list */
          swig_cast_info *ocast = SWIG_TypeCheck(ret->name, type);
#ifdef SWIGRUNTIME_DEBUG
          if (ocast) printf("SWIG_InitializeModule: skip old cast %s\n", ret->name);
#endif
          if (!ocast) ret = 0;
        }
      }
      
      if (!ret) {
#ifdef SWIGRUNTIME_DEBUG
        printf("SWIG_InitializeModule: adding cast %s\n", cast->type->name);
#endif
        if (type->cast) {
          type->cast->prev = cast;
          cast->next = type->cast;
        }
        type->cast = cast;
      }
      cast++;
    }
    /* Set entry in modules->types array equal to the type */
    swig_module.types[i] = type;
  }
  swig_module.types[i] = 0;
  
#ifdef SWIGRUNTIME_DEBUG
  printf("**** SWIG_InitializeModule: Cast List ******\n");
  for (i = 0; i < swig_module.size; ++i) {
    int j = 0;
    swig_cast_info *cast = swig_module.cast_initial[i];
    printf("SWIG_InitializeModule: type %lu %s\n", (unsigned long)i, swig_module.type_initial[i]->name);
    while (cast->type) {
      printf("SWIG_InitializeModule: cast type %s\n", cast->type->name);
      cast++;
      ++j;
    }
    printf("---- Total casts: %d\n",j);
  }
  printf("**** SWIG_InitializeModule: Cast List ******\n");
#endif
}

/* This function will propagate the clientdata field of type to
* any new swig_type_info structures that have been added into the list
* of equivalent types.  It is like calling
* SWIG_TypeClientData(type, clientdata) a second time.
*/
SWIGRUNTIME void
SWIG_PropagateClientData(void) {
  size_t i;
  swig_cast_info *equiv;
  static int init_run = 0;
  
  if (init_run) return;
  init_run = 1;
  
  for (i = 0; i < swig_module.size; i++) {
    if (swig_module.types[i]->clientdata) {
      equiv = swig_module.types[i]->cast;
      while (equiv) {
        if (!equiv->converter) {
          if (equiv->type && !equiv->type->clientdata)
          SWIG_TypeClientData(equiv->type, swig_module.types[i]->clientdata);
        }
        equiv = equiv->next;
      }
    }
  }
}

#ifdef __cplusplus
#if 0
{
  /* c-mode */
#endif
}
#endif



#ifdef __cplusplus
extern "C" {
#endif
  
  /* -----------------------------------------------------------------------------
   * constants/methods manipulation
   * ----------------------------------------------------------------------------- */
  
  /* Install Constants */
  SWIGINTERN void
  SWIG_Python_InstallConstants(PyObject *d, swig_const_info constants[]) {
    PyObject *obj = 0;
    size_t i;
    for (i = 0; constants[i].type; ++i) {
      switch(constants[i].type) {
      case SWIG_PY_POINTER:
        obj = SWIG_InternalNewPointerObj(constants[i].pvalue, *(constants[i]).ptype,0);
        break;
      case SWIG_PY_BINARY:
        obj = SWIG_NewPackedObj(constants[i].pvalue, constants[i].lvalue, *(constants[i].ptype));
        break;
      default:
        obj = 0;
        break;
      }
      if (obj) {
        PyDict_SetItemString(d, constants[i].name, obj);
        Py_DECREF(obj);
      }
    }
  }
  
  /* -----------------------------------------------------------------------------
   * Patch %callback methods' docstrings to hold the callback ptrs
   * -----------------------------------------------------------------------------*/
  
  SWIGINTERN void
  SWIG_Python_FixMethods(PyMethodDef *methods, const swig_const_info *const_table, swig_type_info **types, swig_type_info **types_initial) {
    size_t i;
    for (i = 0; methods[i].ml_name; ++i) {
      const char *c = methods[i].ml_doc;
      if (!c) continue;
      c = strstr(c, "swig_ptr: ");
      if (c) {
        int j;
        const swig_const_info *ci = 0;
        const char *name = c + 10;
        for (j = 0; const_table[j].type; ++j) {
          if (strncmp(const_table[j].name, name, 
              strlen(const_table[j].name)) == 0) {
            ci = &(const_table[j]);
            break;
          }
        }
        if (ci) {
          void *ptr = (ci->type == SWIG_PY_POINTER) ? ci->pvalue : 0;
          if (ptr) {
            size_t shift = (ci->ptype) - types;
            swig_type_info *ty = types_initial[shift];
            size_t ldoc = (c - methods[i].ml_doc);
            size_t lptr = strlen(ty->name)+2*sizeof(void*)+2;
            char *ndoc = (char*)malloc(ldoc + lptr + 10);
            if (ndoc) {
              char *buff = ndoc;
              memcpy(buff, methods[i].ml_doc, ldoc);
              buff += ldoc;
              memcpy(buff, "swig_ptr: ", 10);
              buff += 10;
              SWIG_PackVoidPtr(buff, ptr, ty->name, lptr);
              methods[i].ml_doc = ndoc;
            }
          }
        }
      }
    }
  } 
  
#ifdef __cplusplus
}
#endif




/* -----------------------------------------------------------------------------*
 *  Partial Init method
 * -----------------------------------------------------------------------------*/

#ifdef __cplusplus
extern "C"
#endif

SWIGEXPORT 
#if PY_VERSION_HEX >= 0x03000000
PyObject*
#else
void
#endif
SWIG_init(void) {
  PyObject *m, *d, *md, *globals;
  
#if PY_VERSION_HEX >= 0x03000000
  static struct PyModuleDef SWIG_module = {
    PyModuleDef_HEAD_INIT,
    SWIG_name,
    NULL,
    -1,
    SwigMethods,
    NULL,
    NULL,
    NULL,
    NULL
  };
#endif
  
#if defined(SWIGPYTHON_BUILTIN)
  static SwigPyClientData SwigPyObject_clientdata = {
    0, 0, 0, 0, 0, 0, 0
  };
  static PyGetSetDef this_getset_def = {
    (char *)"this", &SwigPyBuiltin_ThisClosure, NULL, NULL, NULL
  };
  static SwigPyGetSet thisown_getset_closure = {
    SwigPyObject_own,
    SwigPyObject_own
  };
  static PyGetSetDef thisown_getset_def = {
    (char *)"thisown", SwigPyBuiltin_GetterClosure, SwigPyBuiltin_SetterClosure, NULL, &thisown_getset_closure
  };
  PyTypeObject *builtin_pytype;
  int builtin_base_count;
  swig_type_info *builtin_basetype;
  PyObject *tuple;
  PyGetSetDescrObject *static_getset;
  PyTypeObject *metatype;
  PyTypeObject *swigpyobject;
  SwigPyClientData *cd;
  PyObject *public_interface, *public_symbol;
  PyObject *this_descr;
  PyObject *thisown_descr;
  PyObject *self = 0;
  int i;
  
  (void)builtin_pytype;
  (void)builtin_base_count;
  (void)builtin_basetype;
  (void)tuple;
  (void)static_getset;
  (void)self;
  
  /* Metaclass is used to implement static member variables */
  metatype = SwigPyObjectType();
  assert(metatype);
#endif
  
  (void)globals;
  
  /* Create singletons now to avoid potential deadlocks with multi-threaded usage after module initialization */
  SWIG_This();
  SWIG_Python_TypeCache();
  SwigPyPacked_type();
#ifndef SWIGPYTHON_BUILTIN
  SwigPyObject_type();
#endif
  
  /* Fix SwigMethods to carry the callback ptrs when needed */
  SWIG_Python_FixMethods(SwigMethods, swig_const_table, swig_types, swig_type_initial);
  
#if PY_VERSION_HEX >= 0x03000000
  m = PyModule_Create(&SWIG_module);
#else
  m = Py_InitModule(SWIG_name, SwigMethods);
#endif
  
  md = d = PyModule_GetDict(m);
  (void)md;
  
  SWIG_InitializeModule(0);
  
#ifdef SWIGPYTHON_BUILTIN
  swigpyobject = SwigPyObject_TypeOnce();
  
  SwigPyObject_stype = SWIG_MangledTypeQuery("_p_SwigPyObject");
  assert(SwigPyObject_stype);
  cd = (SwigPyClientData*) SwigPyObject_stype->clientdata;
  if (!cd) {
    SwigPyObject_stype->clientdata = &SwigPyObject_clientdata;
    SwigPyObject_clientdata.pytype = swigpyobject;
  } else if (swigpyobject->tp_basicsize != cd->pytype->tp_basicsize) {
    PyErr_SetString(PyExc_RuntimeError, "Import error: attempted to load two incompatible swig-generated modules.");
# if PY_VERSION_HEX >= 0x03000000
    return NULL;
# else
    return;
# endif
  }
  
  /* All objects have a 'this' attribute */
  this_descr = PyDescr_NewGetSet(SwigPyObject_type(), &this_getset_def);
  (void)this_descr;
  
  /* All objects have a 'thisown' attribute */
  thisown_descr = PyDescr_NewGetSet(SwigPyObject_type(), &thisown_getset_def);
  (void)thisown_descr;
  
  public_interface = PyList_New(0);
  public_symbol = 0;
  (void)public_symbol;
  
  PyDict_SetItemString(md, "__all__", public_interface);
  Py_DECREF(public_interface);
  for (i = 0; SwigMethods[i].ml_name != NULL; ++i)
  SwigPyBuiltin_AddPublicSymbol(public_interface, SwigMethods[i].ml_name);
  for (i = 0; swig_const_table[i].name != 0; ++i)
  SwigPyBuiltin_AddPublicSymbol(public_interface, swig_const_table[i].name);
#endif
  
  SWIG_InstallConstants(d,swig_const_table);
  
  SWIG_Python_SetConstant(d, "SHARED_PTR_DISOWN",SWIG_From_int(static_cast< int >(0)));
  
  // thread safe initialization
  swig::container_owner_attribute();
  
  globals = SWIG_globals();
  if (!globals) {
    PyErr_SetString(PyExc_TypeError, "Failure to create SWIG globals.");
#if PY_VERSION_HEX >= 0x03000000
    return NULL;
#else
    return;
#endif
  }
  PyDict_SetItemString(md, "cvar", globals);
  SWIG_addvarlink(globals, "headerEilig", Swig_var_headerEilig_get, Swig_var_headerEilig_set);
  SWIG_addvarlink(globals, "axis_x", Swig_var_axis_x_get, Swig_var_axis_x_set);
  SWIG_addvarlink(globals, "axis_y", Swig_var_axis_y_get, Swig_var_axis_y_set);
  SWIG_addvarlink(globals, "axis_z", Swig_var_axis_z_get, Swig_var_axis_z_set);
  SWIG_addvarlink(globals, "EILIG_STOP", Swig_var_EILIG_STOP_get, Swig_var_EILIG_STOP_set);
  SWIG_addvarlink(globals, "EILIG_CONTINUE", Swig_var_EILIG_CONTINUE_get, Swig_var_EILIG_CONTINUE_set);
  SWIG_addvarlink(globals, "EILIG_RUNNING", Swig_var_EILIG_RUNNING_get, Swig_var_EILIG_RUNNING_set);
  SWIG_addvarlink(globals, "EILIG_SUCCESS", Swig_var_EILIG_SUCCESS_get, Swig_var_EILIG_SUCCESS_set);
  SWIG_addvarlink(globals, "EILIG_NOT_CONVERGED", Swig_var_EILIG_NOT_CONVERGED_get, Swig_var_EILIG_NOT_CONVERGED_set);
  SWIG_addvarlink(globals, "EILIG_INVALID_TOLERANCE", Swig_var_EILIG_INVALID_TOLERANCE_get, Swig_var_EILIG_INVALID_TOLERANCE_set);
  SWIG_addvarlink(globals, "EILIG_INVALID_FILE", Swig_var_EILIG_INVALID_FILE_get, Swig_var_EILIG_INVALID_FILE_set);
  SWIG_addvarlink(globals, "EILIG_NULLPTR", Swig_var_EILIG_NULLPTR_get, Swig_var_EILIG_NULLPTR_set);
  SWIG_addvarlink(globals, "messages", Swig_var_messages_get, Swig_var_messages_set);
  SWIG_addvarlink(globals, "basis_cartesian", Swig_var_basis_cartesian_get, Swig_var_basis_cartesian_set);
  SWIG_addvarlink(globals, "basis_cylindrical", Swig_var_basis_cylindrical_get, Swig_var_basis_cylindrical_set);
  SWIG_addvarlink(globals, "timer_stationary", Swig_var_timer_stationary_get, Swig_var_timer_stationary_set);
  SWIG_addvarlink(globals, "timer_stepped", Swig_var_timer_stepped_get, Swig_var_timer_stepped_set);
  SWIG_addvarlink(globals, "valuesLogger", Swig_var_valuesLogger_get, Swig_var_valuesLogger_set);
  SWIG_addvarlink(globals, "value_bool", Swig_var_value_bool_get, Swig_var_value_bool_set);
  SWIG_addvarlink(globals, "value_string", Swig_var_value_string_get, Swig_var_value_string_set);
  SWIG_addvarlink(globals, "value_scalar", Swig_var_value_scalar_get, Swig_var_value_scalar_set);
  SWIG_addvarlink(globals, "value_scalar1D", Swig_var_value_scalar1D_get, Swig_var_value_scalar1D_set);
  SWIG_addvarlink(globals, "value_scalar2D", Swig_var_value_scalar2D_get, Swig_var_value_scalar2D_set);
  SWIG_addvarlink(globals, "value_scalar3D", Swig_var_value_scalar3D_get, Swig_var_value_scalar3D_set);
  SWIG_addvarlink(globals, "value_scalar1D_function", Swig_var_value_scalar1D_function_get, Swig_var_value_scalar1D_function_set);
  SWIG_addvarlink(globals, "value_scalar2D_function", Swig_var_value_scalar2D_function_get, Swig_var_value_scalar2D_function_set);
  SWIG_addvarlink(globals, "value_scalar3D_function", Swig_var_value_scalar3D_function_get, Swig_var_value_scalar3D_function_set);
  SWIG_addvarlink(globals, "value_scalar3D_congruent", Swig_var_value_scalar3D_congruent_get, Swig_var_value_scalar3D_congruent_set);
  SWIG_addvarlink(globals, "value_scalar3D_interpolation", Swig_var_value_scalar3D_interpolation_get, Swig_var_value_scalar3D_interpolation_set);
  SWIG_addvarlink(globals, "value_vector3D", Swig_var_value_vector3D_get, Swig_var_value_vector3D_set);
  SWIG_addvarlink(globals, "value_vector3D_interpolation", Swig_var_value_vector3D_interpolation_get, Swig_var_value_vector3D_interpolation_set);
  SWIG_addvarlink(globals, "value_vector3D_congruent", Swig_var_value_vector3D_congruent_get, Swig_var_value_vector3D_congruent_set);
  SWIG_addvarlink(globals, "value_matrix3D_interpolation", Swig_var_value_matrix3D_interpolation_get, Swig_var_value_matrix3D_interpolation_set);
  SWIG_addvarlink(globals, "value_matrix3D_congruent", Swig_var_value_matrix3D_congruent_get, Swig_var_value_matrix3D_congruent_set);
  SWIG_addvarlink(globals, "GaussTable", Swig_var_GaussTable_get, Swig_var_GaussTable_set);
  SWIG_addvarlink(globals, "headerInterpolation", Swig_var_headerInterpolation_get, Swig_var_headerInterpolation_set);
  SWIG_addvarlink(globals, "interpolation_fixed", Swig_var_interpolation_fixed_get, Swig_var_interpolation_fixed_set);
  SWIG_addvarlink(globals, "interpolation_idw", Swig_var_interpolation_idw_get, Swig_var_interpolation_idw_set);
  SWIG_addvarlink(globals, "interpolation_nn", Swig_var_interpolation_nn_get, Swig_var_interpolation_nn_set);
  SWIG_addvarlink(globals, "interpolation_rbf", Swig_var_interpolation_rbf_get, Swig_var_interpolation_rbf_set);
  SWIG_addvarlink(globals, "interpolation_function_TPS", Swig_var_interpolation_function_TPS_get, Swig_var_interpolation_function_TPS_set);
  SWIG_addvarlink(globals, "interpolation_function_MQB", Swig_var_interpolation_function_MQB_get, Swig_var_interpolation_function_MQB_set);
  SWIG_addvarlink(globals, "materialLogger", Swig_var_materialLogger_get, Swig_var_materialLogger_set);
  SWIG_addvarlink(globals, "material_solid", Swig_var_material_solid_get, Swig_var_material_solid_set);
  SWIG_addvarlink(globals, "material_fluid", Swig_var_material_fluid_get, Swig_var_material_fluid_set);
  SWIG_addvarlink(globals, "headerNode", Swig_var_headerNode_get, Swig_var_headerNode_set);
  SWIG_addvarlink(globals, "linear", Swig_var_linear_get, Swig_var_linear_set);
  SWIG_addvarlink(globals, "quadratic", Swig_var_quadratic_get, Swig_var_quadratic_set);
  SWIG_addvarlink(globals, "element_hexa8", Swig_var_element_hexa8_get, Swig_var_element_hexa8_set);
  SWIG_addvarlink(globals, "element_hexa20", Swig_var_element_hexa20_get, Swig_var_element_hexa20_set);
  SWIG_addvarlink(globals, "nodeIndexInvalid", Swig_var_nodeIndexInvalid_get, Swig_var_nodeIndexInvalid_set);
  SWIG_addvarlink(globals, "load_dirichlet", Swig_var_load_dirichlet_get, Swig_var_load_dirichlet_set);
  SWIG_addvarlink(globals, "load_dirichletFunction", Swig_var_load_dirichletFunction_get, Swig_var_load_dirichletFunction_set);
  SWIG_addvarlink(globals, "load_distributedVolume", Swig_var_load_distributedVolume_get, Swig_var_load_distributedVolume_set);
  SWIG_addvarlink(globals, "load_distributedFace", Swig_var_load_distributedFace_get, Swig_var_load_distributedFace_set);
  SWIG_addvarlink(globals, "load_distributedEdge", Swig_var_load_distributedEdge_get, Swig_var_load_distributedEdge_set);
  SWIG_addvarlink(globals, "load_forceNode", Swig_var_load_forceNode_get, Swig_var_load_forceNode_set);
  SWIG_addvarlink(globals, "load_initialStrain", Swig_var_load_initialStrain_get, Swig_var_load_initialStrain_set);
  SWIG_addvarlink(globals, "load_temperatureStrain", Swig_var_load_temperatureStrain_get, Swig_var_load_temperatureStrain_set);
  SWIG_addvarlink(globals, "load_heatSourceVolume", Swig_var_load_heatSourceVolume_get, Swig_var_load_heatSourceVolume_set);
  SWIG_addvarlink(globals, "load_heatConductionFace", Swig_var_load_heatConductionFace_get, Swig_var_load_heatConductionFace_set);
  SWIG_addvarlink(globals, "load_couplingEquation", Swig_var_load_couplingEquation_get, Swig_var_load_couplingEquation_set);
  SWIG_addvarlink(globals, "load_problemPressure", Swig_var_load_problemPressure_get, Swig_var_load_problemPressure_set);
  SWIG_addvarlink(globals, "problem_thermal", Swig_var_problem_thermal_get, Swig_var_problem_thermal_set);
  SWIG_addvarlink(globals, "problem_fluid", Swig_var_problem_fluid_get, Swig_var_problem_fluid_set);
  SWIG_addvarlink(globals, "problem_pressure", Swig_var_problem_pressure_get, Swig_var_problem_pressure_set);
  SWIG_addvarlink(globals, "problem_structural", Swig_var_problem_structural_get, Swig_var_problem_structural_set);
#if PY_VERSION_HEX >= 0x03000000
  return m;
#else
  return;
#endif
}

