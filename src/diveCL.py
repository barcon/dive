# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.2.0
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _diveCL
else:
    import _diveCL

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


SHARED_PTR_DISOWN = _diveCL.SHARED_PTR_DISOWN
class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _diveCL.delete_SwigPyIterator

    def value(self):
        return _diveCL.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _diveCL.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _diveCL.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _diveCL.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _diveCL.SwigPyIterator_equal(self, x)

    def copy(self):
        return _diveCL.SwigPyIterator_copy(self)

    def next(self):
        return _diveCL.SwigPyIterator_next(self)

    def __next__(self):
        return _diveCL.SwigPyIterator___next__(self)

    def previous(self):
        return _diveCL.SwigPyIterator_previous(self)

    def advance(self, n):
        return _diveCL.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _diveCL.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _diveCL.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _diveCL.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _diveCL.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _diveCL.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _diveCL.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _diveCL:
_diveCL.SwigPyIterator_swigregister(SwigPyIterator)
class vecSizeT(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _diveCL.vecSizeT_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _diveCL.vecSizeT___nonzero__(self)

    def __bool__(self):
        return _diveCL.vecSizeT___bool__(self)

    def __len__(self):
        return _diveCL.vecSizeT___len__(self)

    def __getslice__(self, i, j):
        return _diveCL.vecSizeT___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _diveCL.vecSizeT___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _diveCL.vecSizeT___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _diveCL.vecSizeT___delitem__(self, *args)

    def __getitem__(self, *args):
        return _diveCL.vecSizeT___getitem__(self, *args)

    def __setitem__(self, *args):
        return _diveCL.vecSizeT___setitem__(self, *args)

    def pop(self):
        return _diveCL.vecSizeT_pop(self)

    def append(self, x):
        return _diveCL.vecSizeT_append(self, x)

    def empty(self):
        return _diveCL.vecSizeT_empty(self)

    def size(self):
        return _diveCL.vecSizeT_size(self)

    def swap(self, v):
        return _diveCL.vecSizeT_swap(self, v)

    def begin(self):
        return _diveCL.vecSizeT_begin(self)

    def end(self):
        return _diveCL.vecSizeT_end(self)

    def rbegin(self):
        return _diveCL.vecSizeT_rbegin(self)

    def rend(self):
        return _diveCL.vecSizeT_rend(self)

    def clear(self):
        return _diveCL.vecSizeT_clear(self)

    def get_allocator(self):
        return _diveCL.vecSizeT_get_allocator(self)

    def pop_back(self):
        return _diveCL.vecSizeT_pop_back(self)

    def erase(self, *args):
        return _diveCL.vecSizeT_erase(self, *args)

    def __init__(self, *args):
        _diveCL.vecSizeT_swiginit(self, _diveCL.new_vecSizeT(*args))

    def push_back(self, x):
        return _diveCL.vecSizeT_push_back(self, x)

    def front(self):
        return _diveCL.vecSizeT_front(self)

    def back(self):
        return _diveCL.vecSizeT_back(self)

    def assign(self, n, x):
        return _diveCL.vecSizeT_assign(self, n, x)

    def resize(self, *args):
        return _diveCL.vecSizeT_resize(self, *args)

    def insert(self, *args):
        return _diveCL.vecSizeT_insert(self, *args)

    def reserve(self, n):
        return _diveCL.vecSizeT_reserve(self, n)

    def capacity(self):
        return _diveCL.vecSizeT_capacity(self)
    __swig_destroy__ = _diveCL.delete_vecSizeT

# Register vecSizeT in _diveCL:
_diveCL.vecSizeT_swigregister(vecSizeT)
class vecDouble(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _diveCL.vecDouble_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _diveCL.vecDouble___nonzero__(self)

    def __bool__(self):
        return _diveCL.vecDouble___bool__(self)

    def __len__(self):
        return _diveCL.vecDouble___len__(self)

    def __getslice__(self, i, j):
        return _diveCL.vecDouble___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _diveCL.vecDouble___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _diveCL.vecDouble___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _diveCL.vecDouble___delitem__(self, *args)

    def __getitem__(self, *args):
        return _diveCL.vecDouble___getitem__(self, *args)

    def __setitem__(self, *args):
        return _diveCL.vecDouble___setitem__(self, *args)

    def pop(self):
        return _diveCL.vecDouble_pop(self)

    def append(self, x):
        return _diveCL.vecDouble_append(self, x)

    def empty(self):
        return _diveCL.vecDouble_empty(self)

    def size(self):
        return _diveCL.vecDouble_size(self)

    def swap(self, v):
        return _diveCL.vecDouble_swap(self, v)

    def begin(self):
        return _diveCL.vecDouble_begin(self)

    def end(self):
        return _diveCL.vecDouble_end(self)

    def rbegin(self):
        return _diveCL.vecDouble_rbegin(self)

    def rend(self):
        return _diveCL.vecDouble_rend(self)

    def clear(self):
        return _diveCL.vecDouble_clear(self)

    def get_allocator(self):
        return _diveCL.vecDouble_get_allocator(self)

    def pop_back(self):
        return _diveCL.vecDouble_pop_back(self)

    def erase(self, *args):
        return _diveCL.vecDouble_erase(self, *args)

    def __init__(self, *args):
        _diveCL.vecDouble_swiginit(self, _diveCL.new_vecDouble(*args))

    def push_back(self, x):
        return _diveCL.vecDouble_push_back(self, x)

    def front(self):
        return _diveCL.vecDouble_front(self)

    def back(self):
        return _diveCL.vecDouble_back(self)

    def assign(self, n, x):
        return _diveCL.vecDouble_assign(self, n, x)

    def resize(self, *args):
        return _diveCL.vecDouble_resize(self, *args)

    def insert(self, *args):
        return _diveCL.vecDouble_insert(self, *args)

    def reserve(self, n):
        return _diveCL.vecDouble_reserve(self, n)

    def capacity(self):
        return _diveCL.vecDouble_capacity(self)
    __swig_destroy__ = _diveCL.delete_vecDouble

# Register vecDouble in _diveCL:
_diveCL.vecDouble_swigregister(vecDouble)
class arrDouble(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _diveCL.arrDouble_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _diveCL.arrDouble___nonzero__(self)

    def __bool__(self):
        return _diveCL.arrDouble___bool__(self)

    def __len__(self):
        return _diveCL.arrDouble___len__(self)

    def __getslice__(self, i, j):
        return _diveCL.arrDouble___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _diveCL.arrDouble___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _diveCL.arrDouble___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _diveCL.arrDouble___delitem__(self, *args)

    def __getitem__(self, *args):
        return _diveCL.arrDouble___getitem__(self, *args)

    def __setitem__(self, *args):
        return _diveCL.arrDouble___setitem__(self, *args)

    def pop(self):
        return _diveCL.arrDouble_pop(self)

    def append(self, x):
        return _diveCL.arrDouble_append(self, x)

    def empty(self):
        return _diveCL.arrDouble_empty(self)

    def size(self):
        return _diveCL.arrDouble_size(self)

    def swap(self, v):
        return _diveCL.arrDouble_swap(self, v)

    def begin(self):
        return _diveCL.arrDouble_begin(self)

    def end(self):
        return _diveCL.arrDouble_end(self)

    def rbegin(self):
        return _diveCL.arrDouble_rbegin(self)

    def rend(self):
        return _diveCL.arrDouble_rend(self)

    def clear(self):
        return _diveCL.arrDouble_clear(self)

    def get_allocator(self):
        return _diveCL.arrDouble_get_allocator(self)

    def pop_back(self):
        return _diveCL.arrDouble_pop_back(self)

    def erase(self, *args):
        return _diveCL.arrDouble_erase(self, *args)

    def __init__(self, *args):
        _diveCL.arrDouble_swiginit(self, _diveCL.new_arrDouble(*args))

    def push_back(self, x):
        return _diveCL.arrDouble_push_back(self, x)

    def front(self):
        return _diveCL.arrDouble_front(self)

    def back(self):
        return _diveCL.arrDouble_back(self)

    def assign(self, n, x):
        return _diveCL.arrDouble_assign(self, n, x)

    def resize(self, *args):
        return _diveCL.arrDouble_resize(self, *args)

    def insert(self, *args):
        return _diveCL.arrDouble_insert(self, *args)

    def reserve(self, n):
        return _diveCL.arrDouble_reserve(self, n)

    def capacity(self):
        return _diveCL.arrDouble_capacity(self)
    __swig_destroy__ = _diveCL.delete_arrDouble

# Register arrDouble in _diveCL:
_diveCL.arrDouble_swigregister(arrDouble)

def GlobalSize(num1, num2):
    return _diveCL.GlobalSize(num1, num2)
class Vector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _diveCL.Vector_swiginit(self, _diveCL.new_Vector(*args))
    __swig_destroy__ = _diveCL.delete_Vector

    def Resize(self, *args):
        return _diveCL.Vector_Resize(self, *args)

    def Fill(self, value):
        return _diveCL.Vector_Fill(self, value)

    def __call__(self, *args):
        return _diveCL.Vector___call__(self, *args)

    def __add__(self, *args):
        return _diveCL.Vector___add__(self, *args)

    def __pos__(self):
        return _diveCL.Vector___pos__(self)

    def __sub__(self, *args):
        return _diveCL.Vector___sub__(self, *args)

    def __neg__(self):
        return _diveCL.Vector___neg__(self)

    def __mul__(self, rhs):
        return _diveCL.Vector___mul__(self, rhs)

    def SwapRows(self, row1, row2):
        return _diveCL.Vector_SwapRows(self, row1, row2)

    def Region(self, *args):
        return _diveCL.Vector_Region(self, *args)

    def GetRows(self):
        return _diveCL.Vector_GetRows(self)

    def GetCols(self):
        return _diveCL.Vector_GetCols(self)

    def GetValue(self, row):
        return _diveCL.Vector_GetValue(self, row)

    def GetData(self):
        return _diveCL.Vector_GetData(self)

    def SetValue(self, row, value):
        return _diveCL.Vector_SetValue(self, row, value)

    def __str__(self):
        return _diveCL.Vector___str__(self)

    def __radd__(self, value):
        return _diveCL.Vector___radd__(self, value)

    def __rsub__(self, value):
        return _diveCL.Vector___rsub__(self, value)

    def __rmul__(self, value):
        return _diveCL.Vector___rmul__(self, value)

# Register Vector in _diveCL:
_diveCL.Vector_swigregister(Vector)
cvar = _diveCL.cvar
headerEilig = cvar.headerEilig
axis_x = cvar.axis_x
axis_y = cvar.axis_y
axis_z = cvar.axis_z

class Matrix(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _diveCL.Matrix_swiginit(self, _diveCL.new_Matrix(*args))
    __swig_destroy__ = _diveCL.delete_Matrix

    def Resize(self, *args):
        return _diveCL.Matrix_Resize(self, *args)

    def Fill(self, value):
        return _diveCL.Matrix_Fill(self, value)

    def __call__(self, *args):
        return _diveCL.Matrix___call__(self, *args)

    def __add__(self, *args):
        return _diveCL.Matrix___add__(self, *args)

    def __pos__(self):
        return _diveCL.Matrix___pos__(self)

    def __sub__(self, *args):
        return _diveCL.Matrix___sub__(self, *args)

    def __neg__(self):
        return _diveCL.Matrix___neg__(self)

    def __mul__(self, *args):
        return _diveCL.Matrix___mul__(self, *args)

    def SwapRows(self, row1, row2):
        return _diveCL.Matrix_SwapRows(self, row1, row2)

    def SwapCols(self, cols1, cols2):
        return _diveCL.Matrix_SwapCols(self, cols1, cols2)

    def Transpose(self):
        return _diveCL.Matrix_Transpose(self)

    def Diagonal(self):
        return _diveCL.Matrix_Diagonal(self)

    def Lower(self, diag):
        return _diveCL.Matrix_Lower(self, diag)

    def LowerWithDiagonal(self):
        return _diveCL.Matrix_LowerWithDiagonal(self)

    def LowerWithoutDiagonal(self):
        return _diveCL.Matrix_LowerWithoutDiagonal(self)

    def Upper(self, diag):
        return _diveCL.Matrix_Upper(self, diag)

    def UpperWithDiagonal(self):
        return _diveCL.Matrix_UpperWithDiagonal(self)

    def UpperWithoutDiagonal(self):
        return _diveCL.Matrix_UpperWithoutDiagonal(self)

    def Region(self, *args):
        return _diveCL.Matrix_Region(self, *args)

    def GetRows(self):
        return _diveCL.Matrix_GetRows(self)

    def GetCols(self):
        return _diveCL.Matrix_GetCols(self)

    def GetValue(self, row, col):
        return _diveCL.Matrix_GetValue(self, row, col)

    def GetData(self):
        return _diveCL.Matrix_GetData(self)

    def SetValue(self, row, col, value):
        return _diveCL.Matrix_SetValue(self, row, col, value)

    def __str__(self):
        return _diveCL.Matrix___str__(self)

    def __radd__(self, value):
        return _diveCL.Matrix___radd__(self, value)

    def __rsub__(self, value):
        return _diveCL.Matrix___rsub__(self, value)

    def __rmul__(self, value):
        return _diveCL.Matrix___rmul__(self, value)

# Register Matrix in _diveCL:
_diveCL.Matrix_swigregister(Matrix)
class Ellpack(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _diveCL.Ellpack_swiginit(self, _diveCL.new_Ellpack(*args))
    __swig_destroy__ = _diveCL.delete_Ellpack

    def IsUsed(self, *args):
        return _diveCL.Ellpack_IsUsed(self, *args)

    def Add(self, row, col):
        return _diveCL.Ellpack_Add(self, row, col)

    def Remove(self, row, col):
        return _diveCL.Ellpack_Remove(self, row, col)

    def Resize(self, *args):
        return _diveCL.Ellpack_Resize(self, *args)

    def Fill(self, value):
        return _diveCL.Ellpack_Fill(self, value)

    def Dump(self):
        return _diveCL.Ellpack_Dump(self)

    def __call__(self, *args):
        return _diveCL.Ellpack___call__(self, *args)

    def __add__(self, *args):
        return _diveCL.Ellpack___add__(self, *args)

    def __pos__(self):
        return _diveCL.Ellpack___pos__(self)

    def __sub__(self, *args):
        return _diveCL.Ellpack___sub__(self, *args)

    def __neg__(self):
        return _diveCL.Ellpack___neg__(self)

    def __mul__(self, *args):
        return _diveCL.Ellpack___mul__(self, *args)

    def SwapRows(self, row1, row2):
        return _diveCL.Ellpack_SwapRows(self, row1, row2)

    def SwapCols(self, col1, col2):
        return _diveCL.Ellpack_SwapCols(self, col1, col2)

    def Transpose(self):
        return _diveCL.Ellpack_Transpose(self)

    def Diagonal(self):
        return _diveCL.Ellpack_Diagonal(self)

    def Lower(self, diag):
        return _diveCL.Ellpack_Lower(self, diag)

    def LowerWithDiagonal(self):
        return _diveCL.Ellpack_LowerWithDiagonal(self)

    def LowerWithoutDiagonal(self):
        return _diveCL.Ellpack_LowerWithoutDiagonal(self)

    def Upper(self, diag):
        return _diveCL.Ellpack_Upper(self, diag)

    def UpperWithDiagonal(self):
        return _diveCL.Ellpack_UpperWithDiagonal(self)

    def UpperWithoutDiagonal(self):
        return _diveCL.Ellpack_UpperWithoutDiagonal(self)

    def Region(self, *args):
        return _diveCL.Ellpack_Region(self, *args)

    def GetRows(self):
        return _diveCL.Ellpack_GetRows(self)

    def GetCols(self):
        return _diveCL.Ellpack_GetCols(self)

    def GetWidth(self):
        return _diveCL.Ellpack_GetWidth(self)

    def GetValue(self, row, col):
        return _diveCL.Ellpack_GetValue(self, row, col)

    def GetCount(self):
        return _diveCL.Ellpack_GetCount(self)

    def GetPosition(self):
        return _diveCL.Ellpack_GetPosition(self)

    def GetData(self):
        return _diveCL.Ellpack_GetData(self)

    def SetValue(self, row, col, value):
        return _diveCL.Ellpack_SetValue(self, row, col, value)

    def __str__(self):
        return _diveCL.Ellpack___str__(self)

    def __radd__(self, value):
        return _diveCL.Ellpack___radd__(self, value)

    def __rsub__(self, value):
        return _diveCL.Ellpack___rsub__(self, value)

    def __rmul__(self, value):
        return _diveCL.Ellpack___rmul__(self, value)

# Register Ellpack in _diveCL:
_diveCL.Ellpack_swigregister(Ellpack)
class EntryProxy(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, buffer, offset):
        _diveCL.EntryProxy_swiginit(self, _diveCL.new_EntryProxy(buffer, offset))

    def SetBuffer(self, buffer):
        return _diveCL.EntryProxy_SetBuffer(self, buffer)

    def SetIndex(self, index):
        return _diveCL.EntryProxy_SetIndex(self, index)

    def __call__(self):
        return _diveCL.EntryProxy___call__(self)

    def __iadd__(self, rhs):
        return _diveCL.EntryProxy___iadd__(self, rhs)

    def __isub__(self, rhs):
        return _diveCL.EntryProxy___isub__(self, rhs)
    __swig_destroy__ = _diveCL.delete_EntryProxy

# Register EntryProxy in _diveCL:
_diveCL.EntryProxy_swigregister(EntryProxy)

def CreateKernels(fileName, platformNumber, deviceNumber):
    return _diveCL.CreateKernels(fileName, platformNumber, deviceNumber)
class Kernels(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _diveCL.Kernels_swiginit(self, _diveCL.new_Kernels())
    __swig_destroy__ = _diveCL.delete_Kernels

    def Init(self, fileName, platformNumber, deviceNumber):
        return _diveCL.Kernels_Init(self, fileName, platformNumber, deviceNumber)
    platform_ = property(_diveCL.Kernels_platform__get, _diveCL.Kernels_platform__set)
    context_ = property(_diveCL.Kernels_context__get, _diveCL.Kernels_context__set)
    program_ = property(_diveCL.Kernels_program__get, _diveCL.Kernels_program__set)
    kVectorCopyS_ = property(_diveCL.Kernels_kVectorCopyS__get, _diveCL.Kernels_kVectorCopyS__set)
    kVectorAddS_ = property(_diveCL.Kernels_kVectorAddS__get, _diveCL.Kernels_kVectorAddS__set)
    kVectorAddSl_ = property(_diveCL.Kernels_kVectorAddSl__get, _diveCL.Kernels_kVectorAddSl__set)
    kVectorAddV_ = property(_diveCL.Kernels_kVectorAddV__get, _diveCL.Kernels_kVectorAddV__set)
    kVectorPlus_ = property(_diveCL.Kernels_kVectorPlus__get, _diveCL.Kernels_kVectorPlus__set)
    kVectorSubS_ = property(_diveCL.Kernels_kVectorSubS__get, _diveCL.Kernels_kVectorSubS__set)
    kVectorSubSl_ = property(_diveCL.Kernels_kVectorSubSl__get, _diveCL.Kernels_kVectorSubSl__set)
    kVectorSubV_ = property(_diveCL.Kernels_kVectorSubV__get, _diveCL.Kernels_kVectorSubV__set)
    kVectorMinus_ = property(_diveCL.Kernels_kVectorMinus__get, _diveCL.Kernels_kVectorMinus__set)
    kVectorMulS_ = property(_diveCL.Kernels_kVectorMulS__get, _diveCL.Kernels_kVectorMulS__set)
    kVectorDot_ = property(_diveCL.Kernels_kVectorDot__get, _diveCL.Kernels_kVectorDot__set)
    kVectorNormMax_ = property(_diveCL.Kernels_kVectorNormMax__get, _diveCL.Kernels_kVectorNormMax__set)
    kVectorNormP_ = property(_diveCL.Kernels_kVectorNormP__get, _diveCL.Kernels_kVectorNormP__set)
    kVectorNormP2_ = property(_diveCL.Kernels_kVectorNormP2__get, _diveCL.Kernels_kVectorNormP2__set)
    kEllpackNormP_ = property(_diveCL.Kernels_kEllpackNormP__get, _diveCL.Kernels_kEllpackNormP__set)
    kEllpackNormP2_ = property(_diveCL.Kernels_kEllpackNormP2__get, _diveCL.Kernels_kEllpackNormP2__set)
    kEllpackMaxCount_ = property(_diveCL.Kernels_kEllpackMaxCount__get, _diveCL.Kernels_kEllpackMaxCount__set)
    kEllpackExpandPosition_ = property(_diveCL.Kernels_kEllpackExpandPosition__get, _diveCL.Kernels_kEllpackExpandPosition__set)
    kEllpackExpandData_ = property(_diveCL.Kernels_kEllpackExpandData__get, _diveCL.Kernels_kEllpackExpandData__set)
    kEllpackShrinkPosition_ = property(_diveCL.Kernels_kEllpackShrinkPosition__get, _diveCL.Kernels_kEllpackShrinkPosition__set)
    kEllpackShrinkData_ = property(_diveCL.Kernels_kEllpackShrinkData__get, _diveCL.Kernels_kEllpackShrinkData__set)
    kEllpackCopyS_ = property(_diveCL.Kernels_kEllpackCopyS__get, _diveCL.Kernels_kEllpackCopyS__set)
    kEllpackAddS_ = property(_diveCL.Kernels_kEllpackAddS__get, _diveCL.Kernels_kEllpackAddS__set)
    kEllpackAddSl_ = property(_diveCL.Kernels_kEllpackAddSl__get, _diveCL.Kernels_kEllpackAddSl__set)
    kEllpackPlus_ = property(_diveCL.Kernels_kEllpackPlus__get, _diveCL.Kernels_kEllpackPlus__set)
    kEllpackSubS_ = property(_diveCL.Kernels_kEllpackSubS__get, _diveCL.Kernels_kEllpackSubS__set)
    kEllpackSubSl_ = property(_diveCL.Kernels_kEllpackSubSl__get, _diveCL.Kernels_kEllpackSubSl__set)
    kEllpackMinus_ = property(_diveCL.Kernels_kEllpackMinus__get, _diveCL.Kernels_kEllpackMinus__set)
    kEllpackMulS_ = property(_diveCL.Kernels_kEllpackMulS__get, _diveCL.Kernels_kEllpackMulS__set)
    kEllpackMulV_ = property(_diveCL.Kernels_kEllpackMulV__get, _diveCL.Kernels_kEllpackMulV__set)
    kEllpackMulM_ = property(_diveCL.Kernels_kEllpackMulM__get, _diveCL.Kernels_kEllpackMulM__set)
    kEllpackSwapRows_ = property(_diveCL.Kernels_kEllpackSwapRows__get, _diveCL.Kernels_kEllpackSwapRows__set)
    kEllpackSwapCols_ = property(_diveCL.Kernels_kEllpackSwapCols__get, _diveCL.Kernels_kEllpackSwapCols__set)
    kEllpackTranspose_ = property(_diveCL.Kernels_kEllpackTranspose__get, _diveCL.Kernels_kEllpackTranspose__set)
    kEllpackFindWidthTranspose_ = property(_diveCL.Kernels_kEllpackFindWidthTranspose__get, _diveCL.Kernels_kEllpackFindWidthTranspose__set)
    kEllpackDiagonal_ = property(_diveCL.Kernels_kEllpackDiagonal__get, _diveCL.Kernels_kEllpackDiagonal__set)
    kEllpackRegion_ = property(_diveCL.Kernels_kEllpackRegion__get, _diveCL.Kernels_kEllpackRegion__set)
    kEllpackLower1_ = property(_diveCL.Kernels_kEllpackLower1__get, _diveCL.Kernels_kEllpackLower1__set)
    kEllpackLower2_ = property(_diveCL.Kernels_kEllpackLower2__get, _diveCL.Kernels_kEllpackLower2__set)
    kEllpackUpper1_ = property(_diveCL.Kernels_kEllpackUpper1__get, _diveCL.Kernels_kEllpackUpper1__set)
    kEllpackUpper2_ = property(_diveCL.Kernels_kEllpackUpper2__get, _diveCL.Kernels_kEllpackUpper2__set)

# Register Kernels in _diveCL:
_diveCL.Kernels_swigregister(Kernels)
kVectorCopyS = cvar.kVectorCopyS
kVectorAddS = cvar.kVectorAddS
kVectorAddSl = cvar.kVectorAddSl
kVectorAddV = cvar.kVectorAddV
kVectorPlus = cvar.kVectorPlus
kVectorSubS = cvar.kVectorSubS
kVectorSubSl = cvar.kVectorSubSl
kVectorSubV = cvar.kVectorSubV
kVectorMinus = cvar.kVectorMinus
kVectorMulS = cvar.kVectorMulS
kVectorDot = cvar.kVectorDot
kVectorNormMax = cvar.kVectorNormMax
kVectorNormP = cvar.kVectorNormP
kVectorNormP2 = cvar.kVectorNormP2
kEllpackNormP = cvar.kEllpackNormP
kEllpackNormP2 = cvar.kEllpackNormP2
kEllpackMaxCount = cvar.kEllpackMaxCount
kEllpackExpandPosition = cvar.kEllpackExpandPosition
kEllpackExpandData = cvar.kEllpackExpandData
kEllpackShrinkPosition = cvar.kEllpackShrinkPosition
kEllpackShrinkData = cvar.kEllpackShrinkData
kEllpackCopyS = cvar.kEllpackCopyS
kEllpackAddS = cvar.kEllpackAddS
kEllpackAddSl = cvar.kEllpackAddSl
kEllpackPlus = cvar.kEllpackPlus
kEllpackSubS = cvar.kEllpackSubS
kEllpackSubSl = cvar.kEllpackSubSl
kEllpackMinus = cvar.kEllpackMinus
kEllpackMulS = cvar.kEllpackMulS
kEllpackMulV = cvar.kEllpackMulV
kEllpackMulM = cvar.kEllpackMulM
kEllpackSwapRows = cvar.kEllpackSwapRows
kEllpackSwapCols = cvar.kEllpackSwapCols
kEllpackTranspose = cvar.kEllpackTranspose
kEllpackFindWidthTranspose = cvar.kEllpackFindWidthTranspose
kEllpackDiagonal = cvar.kEllpackDiagonal
kEllpackRegion = cvar.kEllpackRegion
kEllpackLower1 = cvar.kEllpackLower1
kEllpackLower2 = cvar.kEllpackLower2
kEllpackUpper1 = cvar.kEllpackUpper1
kEllpackUpper2 = cvar.kEllpackUpper2

class VectorCL(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _diveCL.VectorCL_swiginit(self, _diveCL.new_VectorCL(*args))
    __swig_destroy__ = _diveCL.delete_VectorCL

    def Resize(self, *args):
        return _diveCL.VectorCL_Resize(self, *args)

    def Fill(self, value):
        return _diveCL.VectorCL_Fill(self, value)

    def __call__(self, row):
        return _diveCL.VectorCL___call__(self, row)

    def __add__(self, *args):
        return _diveCL.VectorCL___add__(self, *args)

    def __pos__(self):
        return _diveCL.VectorCL___pos__(self)

    def __sub__(self, *args):
        return _diveCL.VectorCL___sub__(self, *args)

    def __neg__(self):
        return _diveCL.VectorCL___neg__(self)

    def __mul__(self, rhs):
        return _diveCL.VectorCL___mul__(self, rhs)

    def SwapRows(self, row1, row2):
        return _diveCL.VectorCL_SwapRows(self, row1, row2)

    def Region(self, *args):
        return _diveCL.VectorCL_Region(self, *args)

    def GetRows(self):
        return _diveCL.VectorCL_GetRows(self)

    def GetCols(self):
        return _diveCL.VectorCL_GetCols(self)

    def GetValue(self, row):
        return _diveCL.VectorCL_GetValue(self, row)

    def GetKernels(self):
        return _diveCL.VectorCL_GetKernels(self)

    def GetDataGPU(self):
        return _diveCL.VectorCL_GetDataGPU(self)

    def SetValue(self, row, value):
        return _diveCL.VectorCL_SetValue(self, row, value)

    def __str__(self):
        return _diveCL.VectorCL___str__(self)

    def __radd__(self, value):
        return _diveCL.VectorCL___radd__(self, value)

    def __rsub__(self, value):
        return _diveCL.VectorCL___rsub__(self, value)

    def __rmul__(self, value):
        return _diveCL.VectorCL___rmul__(self, value)

# Register VectorCL in _diveCL:
_diveCL.VectorCL_swigregister(VectorCL)
class EllpackCL(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _diveCL.EllpackCL_swiginit(self, _diveCL.new_EllpackCL(*args))
    __swig_destroy__ = _diveCL.delete_EllpackCL

    def IsUsed(self, *args):
        return _diveCL.EllpackCL_IsUsed(self, *args)

    def Add(self, row, col):
        return _diveCL.EllpackCL_Add(self, row, col)

    def Remove(self, row, col):
        return _diveCL.EllpackCL_Remove(self, row, col)

    def Resize(self, *args):
        return _diveCL.EllpackCL_Resize(self, *args)

    def Fill(self, value):
        return _diveCL.EllpackCL_Fill(self, value)

    def Init(self, input):
        return _diveCL.EllpackCL_Init(self, input)

    def Dump(self):
        return _diveCL.EllpackCL_Dump(self)

    def __call__(self, row, col):
        return _diveCL.EllpackCL___call__(self, row, col)

    def __add__(self, *args):
        return _diveCL.EllpackCL___add__(self, *args)

    def __pos__(self):
        return _diveCL.EllpackCL___pos__(self)

    def __sub__(self, *args):
        return _diveCL.EllpackCL___sub__(self, *args)

    def __neg__(self):
        return _diveCL.EllpackCL___neg__(self)

    def __mul__(self, *args):
        return _diveCL.EllpackCL___mul__(self, *args)

    def SwapRows(self, row1, row2):
        return _diveCL.EllpackCL_SwapRows(self, row1, row2)

    def SwapCols(self, col1, col2):
        return _diveCL.EllpackCL_SwapCols(self, col1, col2)

    def Transpose(self):
        return _diveCL.EllpackCL_Transpose(self)

    def Diagonal(self):
        return _diveCL.EllpackCL_Diagonal(self)

    def Lower(self, diag):
        return _diveCL.EllpackCL_Lower(self, diag)

    def LowerWithDiagonal(self):
        return _diveCL.EllpackCL_LowerWithDiagonal(self)

    def LowerWithoutDiagonal(self):
        return _diveCL.EllpackCL_LowerWithoutDiagonal(self)

    def Upper(self, diag):
        return _diveCL.EllpackCL_Upper(self, diag)

    def UpperWithDiagonal(self):
        return _diveCL.EllpackCL_UpperWithDiagonal(self)

    def UpperWithoutDiagonal(self):
        return _diveCL.EllpackCL_UpperWithoutDiagonal(self)

    def Region(self, *args):
        return _diveCL.EllpackCL_Region(self, *args)

    def GetRows(self):
        return _diveCL.EllpackCL_GetRows(self)

    def GetCols(self):
        return _diveCL.EllpackCL_GetCols(self)

    def GetWidth(self):
        return _diveCL.EllpackCL_GetWidth(self)

    def GetValue(self, row, col):
        return _diveCL.EllpackCL_GetValue(self, row, col)

    def GetKernels(self):
        return _diveCL.EllpackCL_GetKernels(self)

    def GetCountGPU(self):
        return _diveCL.EllpackCL_GetCountGPU(self)

    def GetPositionGPU(self):
        return _diveCL.EllpackCL_GetPositionGPU(self)

    def GetDataGPU(self):
        return _diveCL.EllpackCL_GetDataGPU(self)

    def SetValue(self, row, col, value):
        return _diveCL.EllpackCL_SetValue(self, row, col, value)

    def __str__(self):
        return _diveCL.EllpackCL___str__(self)

    def __radd__(self, value):
        return _diveCL.EllpackCL___radd__(self, value)

    def __rsub__(self, value):
        return _diveCL.EllpackCL___rsub__(self, value)

    def __rmul__(self, value):
        return _diveCL.EllpackCL___rmul__(self, value)

# Register EllpackCL in _diveCL:
_diveCL.EllpackCL_swigregister(EllpackCL)

def Cross(in1, in2):
    return _diveCL.Cross(in1, in2)

def DeterminantLUP(LU, permutation):
    return _diveCL.DeterminantLUP(LU, permutation)

def Determinant(A):
    return _diveCL.Determinant(A)

def Inverse(A):
    return _diveCL.Inverse(A)

def ScaleByVector(A, alpha):
    return _diveCL.ScaleByVector(A, alpha)

def Solve(A, b):
    return _diveCL.Solve(A, b)

def DecomposeLUP(LU, permutation, A):
    return _diveCL.DecomposeLUP(LU, permutation, A)

def InverseLUP(IA, LU, permutation):
    return _diveCL.InverseLUP(IA, LU, permutation)

def DiagonalLinearSystem(*args):
    return _diveCL.DiagonalLinearSystem(*args)

def ForwardLinearSystem(*args):
    return _diveCL.ForwardLinearSystem(*args)

def DirectLUP(x, LU, permutation, b):
    return _diveCL.DirectLUP(x, LU, permutation, b)

def NormMax(*args):
    return _diveCL.NormMax(*args)

def NormP(*args):
    return _diveCL.NormP(*args)

def NormP2(*args):
    return _diveCL.NormP2(*args)

def Dot(*args):
    return _diveCL.Dot(*args)

def IterativeBiCGStab(*args):
    return _diveCL.IterativeBiCGStab(*args)

def WriteToFile(*args):
    return _diveCL.WriteToFile(*args)

def ReadFromFile(*args):
    return _diveCL.ReadFromFile(*args)

def ListVector(*args):
    return _diveCL.ListVector(*args)

def ListMatrix(*args):
    return _diveCL.ListMatrix(*args)

def RotationMatrix(*args):
    return _diveCL.RotationMatrix(*args)

def Rotate(*args):
    return _diveCL.Rotate(*args)

def Translate(point, axis, value):
    return _diveCL.Translate(point, axis, value)

def Mirror(point, axis):
    return _diveCL.Mirror(point, axis)

def Scale(point, value):
    return _diveCL.Scale(point, value)

def TablePointsRotate(input, axis, radians):
    return _diveCL.TablePointsRotate(input, axis, radians)

def TablePointsTranslate(input, axis, value):
    return _diveCL.TablePointsTranslate(input, axis, value)

def TablePointsMirror(input, axis):
    return _diveCL.TablePointsMirror(input, axis)

def TablePointsScale(input, value):
    return _diveCL.TablePointsScale(input, value)

def TableValuesScale(input, value):
    return _diveCL.TableValuesScale(input, value)

def TableValuesAdd(input, value):
    return _diveCL.TableValuesAdd(input, value)

def TableValuesClipBiggerThan(input, value, col):
    return _diveCL.TableValuesClipBiggerThan(input, value, col)

def TableValuesClipSmallerThan(input, value, col):
    return _diveCL.TableValuesClipSmallerThan(input, value, col)

def TableAppend(input1, input2):
    return _diveCL.TableAppend(input1, input2)


def GetItemVector(self, index):
    return self.GetValue(index)

def SetItemVector(self, index, value):
    return self.SetValue(index, value)

Vector.__getitem__ = GetItemVector
Vector.__setitem__ = SetItemVector

def GetItemMatrix(self, index):
    return self.GetValue(index[0], index[1])

def SetItemMatrix(self, index, value):
    return self.SetValue(index[0], index[1], value)

Matrix.__getitem__ = GetItemMatrix
Matrix.__setitem__ = SetItemMatrix

def GetItemEllpack(self, index):
    return self.GetValue(index[0], index[1])

def SetItemEllpack(self, index, value):
    return self.SetValue(index[0], index[1], value)

Ellpack.__getitem__ = GetItemEllpack
Ellpack.__setitem__ = SetItemEllpack

def GetItemVectorCL(self, index):
    return self.GetValue(index)

def SetItemVectorCL(self, index, value):
    return self.SetValue(index, value)

VectorCL.__getitem__ = GetItemVectorCL
VectorCL.__setitem__ = SetItemVectorCL

def GetItemEllpackCL(self, index):
    return self.GetValue(index[0], index[1])

def SetItemEllpackCL(self, index, value):
    return self.SetValue(index[0], index[1], value)

EllpackCL.__getitem__ = GetItemEllpackCL
EllpackCL.__setitem__ = SetItemEllpackCL

import ctypes

py_callback_iterative = ctypes.CFUNCTYPE(ctypes.c_longlong, ctypes.c_size_t, ctypes.c_double)

def IterativeBiCGStab(x, A, b, callback):

# wrap the python callback with a ctypes function pointer
    f = py_callback_iterative(callback)

# get the function pointer of the ctypes wrapper by casting it to void* and taking its value
    f_ptr = ctypes.cast(f, ctypes.c_void_p).value

    return _dive.IterativeBiCGStab(x, A, b, f_ptr)


class vecBasis(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _diveCL.vecBasis_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _diveCL.vecBasis___nonzero__(self)

    def __bool__(self):
        return _diveCL.vecBasis___bool__(self)

    def __len__(self):
        return _diveCL.vecBasis___len__(self)

    def __getslice__(self, i, j):
        return _diveCL.vecBasis___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _diveCL.vecBasis___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _diveCL.vecBasis___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _diveCL.vecBasis___delitem__(self, *args)

    def __getitem__(self, *args):
        return _diveCL.vecBasis___getitem__(self, *args)

    def __setitem__(self, *args):
        return _diveCL.vecBasis___setitem__(self, *args)

    def pop(self):
        return _diveCL.vecBasis_pop(self)

    def append(self, x):
        return _diveCL.vecBasis_append(self, x)

    def empty(self):
        return _diveCL.vecBasis_empty(self)

    def size(self):
        return _diveCL.vecBasis_size(self)

    def swap(self, v):
        return _diveCL.vecBasis_swap(self, v)

    def begin(self):
        return _diveCL.vecBasis_begin(self)

    def end(self):
        return _diveCL.vecBasis_end(self)

    def rbegin(self):
        return _diveCL.vecBasis_rbegin(self)

    def rend(self):
        return _diveCL.vecBasis_rend(self)

    def clear(self):
        return _diveCL.vecBasis_clear(self)

    def get_allocator(self):
        return _diveCL.vecBasis_get_allocator(self)

    def pop_back(self):
        return _diveCL.vecBasis_pop_back(self)

    def erase(self, *args):
        return _diveCL.vecBasis_erase(self, *args)

    def __init__(self, *args):
        _diveCL.vecBasis_swiginit(self, _diveCL.new_vecBasis(*args))

    def push_back(self, x):
        return _diveCL.vecBasis_push_back(self, x)

    def front(self):
        return _diveCL.vecBasis_front(self)

    def back(self):
        return _diveCL.vecBasis_back(self)

    def assign(self, n, x):
        return _diveCL.vecBasis_assign(self, n, x)

    def resize(self, *args):
        return _diveCL.vecBasis_resize(self, *args)

    def insert(self, *args):
        return _diveCL.vecBasis_insert(self, *args)

    def reserve(self, n):
        return _diveCL.vecBasis_reserve(self, n)

    def capacity(self):
        return _diveCL.vecBasis_capacity(self)
    __swig_destroy__ = _diveCL.delete_vecBasis

# Register vecBasis in _diveCL:
_diveCL.vecBasis_swigregister(vecBasis)
EILIG_STOP = cvar.EILIG_STOP
EILIG_CONTINUE = cvar.EILIG_CONTINUE
EILIG_SUCCESS = cvar.EILIG_SUCCESS
EILIG_NOT_CONVERGED = cvar.EILIG_NOT_CONVERGED
EILIG_INVALID_TOLERANCE = cvar.EILIG_INVALID_TOLERANCE
EILIG_INVALID_FILE = cvar.EILIG_INVALID_FILE
EILIG_NULLPTR = cvar.EILIG_NULLPTR
messages = cvar.messages

class IBasis(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _diveCL.delete_IBasis

    def Distance(self, pt1, pt2):
        return _diveCL.IBasis_Distance(self, pt1, pt2)

    def DistanceSquared(self, pt1, pt2):
        return _diveCL.IBasis_DistanceSquared(self, pt1, pt2)

    def LocalToGlobal(self, pt):
        return _diveCL.IBasis_LocalToGlobal(self, pt)

    def LocalToGlobalVector(self, vec):
        return _diveCL.IBasis_LocalToGlobalVector(self, vec)

    def GlobalToLocal(self, pt):
        return _diveCL.IBasis_GlobalToLocal(self, pt)

    def GlobalToLocalVector(self, vec):
        return _diveCL.IBasis_GlobalToLocalVector(self, vec)

    def GetBasis(self):
        return _diveCL.IBasis_GetBasis(self)

    def GetOrigin(self):
        return _diveCL.IBasis_GetOrigin(self)

    def GetTag(self):
        return _diveCL.IBasis_GetTag(self)

    def GetDim(self):
        return _diveCL.IBasis_GetDim(self)

    def GetType(self):
        return _diveCL.IBasis_GetType(self)

    def Offset(self, *args):
        return _diveCL.IBasis_Offset(self, *args)

    def Rotate(self, axis, radians):
        return _diveCL.IBasis_Rotate(self, axis, radians)

    def SetTag(self, tag):
        return _diveCL.IBasis_SetTag(self, tag)

# Register IBasis in _diveCL:
_diveCL.IBasis_swigregister(IBasis)
basis_cartesian = cvar.basis_cartesian
basis_cylindrical = cvar.basis_cylindrical


def CreateBasisCartesian(*args):
    return _diveCL.CreateBasisCartesian(*args)
class Cartesian(IBasis):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _diveCL.delete_Cartesian

    @staticmethod
    def Create():
        return _diveCL.Cartesian_Create()

    def GetPtr(self, *args):
        return _diveCL.Cartesian_GetPtr(self, *args)

    def Distance(self, pt1, pt2):
        return _diveCL.Cartesian_Distance(self, pt1, pt2)

    def DistanceSquared(self, pt1, pt2):
        return _diveCL.Cartesian_DistanceSquared(self, pt1, pt2)

    def LocalToGlobal(self, pt):
        return _diveCL.Cartesian_LocalToGlobal(self, pt)

    def LocalToGlobalVector(self, vec):
        return _diveCL.Cartesian_LocalToGlobalVector(self, vec)

    def GlobalToLocal(self, pt):
        return _diveCL.Cartesian_GlobalToLocal(self, pt)

    def GlobalToLocalVector(self, vec):
        return _diveCL.Cartesian_GlobalToLocalVector(self, vec)

    def GetBasis(self):
        return _diveCL.Cartesian_GetBasis(self)

    def GetOrigin(self):
        return _diveCL.Cartesian_GetOrigin(self)

    def GetTag(self):
        return _diveCL.Cartesian_GetTag(self)

    def GetDim(self):
        return _diveCL.Cartesian_GetDim(self)

    def GetType(self):
        return _diveCL.Cartesian_GetType(self)

    def Offset(self, *args):
        return _diveCL.Cartesian_Offset(self, *args)

    def Rotate(self, axis, radians):
        return _diveCL.Cartesian_Rotate(self, axis, radians)

    def SetTag(self, tag):
        return _diveCL.Cartesian_SetTag(self, tag)

# Register Cartesian in _diveCL:
_diveCL.Cartesian_swigregister(Cartesian)

def CreateBasisCylindrical(*args):
    return _diveCL.CreateBasisCylindrical(*args)
class Cylindrical(IBasis):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _diveCL.delete_Cylindrical

    @staticmethod
    def Create():
        return _diveCL.Cylindrical_Create()

    def GetPtr(self, *args):
        return _diveCL.Cylindrical_GetPtr(self, *args)

    def Distance(self, pt1, pt2):
        return _diveCL.Cylindrical_Distance(self, pt1, pt2)

    def DistanceSquared(self, pt1, pt2):
        return _diveCL.Cylindrical_DistanceSquared(self, pt1, pt2)

    def LocalToGlobal(self, pt):
        return _diveCL.Cylindrical_LocalToGlobal(self, pt)

    def LocalToGlobalVector(self, vec):
        return _diveCL.Cylindrical_LocalToGlobalVector(self, vec)

    def GlobalToLocal(self, pt):
        return _diveCL.Cylindrical_GlobalToLocal(self, pt)

    def GlobalToLocalVector(self, vec):
        return _diveCL.Cylindrical_GlobalToLocalVector(self, vec)

    def GetBasis(self):
        return _diveCL.Cylindrical_GetBasis(self)

    def GetOrigin(self):
        return _diveCL.Cylindrical_GetOrigin(self)

    def GetTag(self):
        return _diveCL.Cylindrical_GetTag(self)

    def GetDim(self):
        return _diveCL.Cylindrical_GetDim(self)

    def GetType(self):
        return _diveCL.Cylindrical_GetType(self)

    def Offset(self, *args):
        return _diveCL.Cylindrical_Offset(self, *args)

    def Rotate(self, axis, radians):
        return _diveCL.Cylindrical_Rotate(self, axis, radians)

    def SetTag(self, tag):
        return _diveCL.Cylindrical_SetTag(self, tag)

# Register Cylindrical in _diveCL:
_diveCL.Cylindrical_swigregister(Cylindrical)
class ITimer(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _diveCL.delete_ITimer

    def GetCurrentTime(self):
        return _diveCL.ITimer_GetCurrentTime(self)

    def GetInitialTime(self):
        return _diveCL.ITimer_GetInitialTime(self)

    def GetEndTime(self):
        return _diveCL.ITimer_GetEndTime(self)

    def GetStepSize(self):
        return _diveCL.ITimer_GetStepSize(self)

    def GetStepNumber(self):
        return _diveCL.ITimer_GetStepNumber(self)

    def GetType(self):
        return _diveCL.ITimer_GetType(self)

    def GetTag(self):
        return _diveCL.ITimer_GetTag(self)

    def SetNextStep(self):
        return _diveCL.ITimer_SetNextStep(self)

    def SetInitialTime(self, initialTime):
        return _diveCL.ITimer_SetInitialTime(self, initialTime)

    def SetEndTime(self, endTime):
        return _diveCL.ITimer_SetEndTime(self, endTime)

    def SetStepSize(self, stepSize):
        return _diveCL.ITimer_SetStepSize(self, stepSize)

    def SetTag(self, tag):
        return _diveCL.ITimer_SetTag(self, tag)

# Register ITimer in _diveCL:
_diveCL.ITimer_swigregister(ITimer)
timer_stationary = cvar.timer_stationary
timer_stepped = cvar.timer_stepped


def CreateTimerStationary(*args):
    return _diveCL.CreateTimerStationary(*args)
class TimerStationary(ITimer):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _diveCL.delete_TimerStationary

    @staticmethod
    def Create():
        return _diveCL.TimerStationary_Create()

    def GetPtr(self, *args):
        return _diveCL.TimerStationary_GetPtr(self, *args)

    def GetCurrentTime(self):
        return _diveCL.TimerStationary_GetCurrentTime(self)

    def GetInitialTime(self):
        return _diveCL.TimerStationary_GetInitialTime(self)

    def GetEndTime(self):
        return _diveCL.TimerStationary_GetEndTime(self)

    def GetStepSize(self):
        return _diveCL.TimerStationary_GetStepSize(self)

    def GetStepNumber(self):
        return _diveCL.TimerStationary_GetStepNumber(self)

    def GetType(self):
        return _diveCL.TimerStationary_GetType(self)

    def GetTag(self):
        return _diveCL.TimerStationary_GetTag(self)

    def SetNextStep(self):
        return _diveCL.TimerStationary_SetNextStep(self)

    def SetInitialTime(self, initialTime):
        return _diveCL.TimerStationary_SetInitialTime(self, initialTime)

    def SetEndTime(self, endTime):
        return _diveCL.TimerStationary_SetEndTime(self, endTime)

    def SetStepSize(self, stepSize):
        return _diveCL.TimerStationary_SetStepSize(self, stepSize)

    def SetTag(self, tag):
        return _diveCL.TimerStationary_SetTag(self, tag)

# Register TimerStationary in _diveCL:
_diveCL.TimerStationary_swigregister(TimerStationary)

def CreateTimerStepped(*args):
    return _diveCL.CreateTimerStepped(*args)
class TimerStepped(ITimer):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _diveCL.delete_TimerStepped

    @staticmethod
    def Create():
        return _diveCL.TimerStepped_Create()

    def GetPtr(self, *args):
        return _diveCL.TimerStepped_GetPtr(self, *args)

    def GetCurrentTime(self):
        return _diveCL.TimerStepped_GetCurrentTime(self)

    def GetInitialTime(self):
        return _diveCL.TimerStepped_GetInitialTime(self)

    def GetEndTime(self):
        return _diveCL.TimerStepped_GetEndTime(self)

    def GetStepSize(self):
        return _diveCL.TimerStepped_GetStepSize(self)

    def GetStepNumber(self):
        return _diveCL.TimerStepped_GetStepNumber(self)

    def GetType(self):
        return _diveCL.TimerStepped_GetType(self)

    def GetTag(self):
        return _diveCL.TimerStepped_GetTag(self)

    def SetNextStep(self):
        return _diveCL.TimerStepped_SetNextStep(self)

    def SetInitialTime(self, initialTime):
        return _diveCL.TimerStepped_SetInitialTime(self, initialTime)

    def SetEndTime(self, endTime):
        return _diveCL.TimerStepped_SetEndTime(self, endTime)

    def SetStepSize(self, stepSize):
        return _diveCL.TimerStepped_SetStepSize(self, stepSize)

    def SetTag(self, tag):
        return _diveCL.TimerStepped_SetTag(self, tag)

# Register TimerStepped in _diveCL:
_diveCL.TimerStepped_swigregister(TimerStepped)
class IValue(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _diveCL.delete_IValue

    def GetType(self):
        return _diveCL.IValue_GetType(self)

    def GetName(self):
        return _diveCL.IValue_GetName(self)

    def GetKey(self):
        return _diveCL.IValue_GetKey(self)

    def SetName(self, name):
        return _diveCL.IValue_SetName(self, name)

    def SetKey(self, key):
        return _diveCL.IValue_SetKey(self, key)

# Register IValue in _diveCL:
_diveCL.IValue_swigregister(IValue)
valuesLogger = cvar.valuesLogger
value_bool = cvar.value_bool
value_string = cvar.value_string
value_scalar = cvar.value_scalar
value_scalar_function = cvar.value_scalar_function
value_scalar1D = cvar.value_scalar1D
value_scalar1D_function = cvar.value_scalar1D_function
value_scalar2D = cvar.value_scalar2D
value_scalar2D_function = cvar.value_scalar2D_function
value_scalar3D = cvar.value_scalar3D
value_scalar3D_function = cvar.value_scalar3D_function
value_scalar3D_interpolation = cvar.value_scalar3D_interpolation
value_scalar3D_congruent = cvar.value_scalar3D_congruent
value_vector = cvar.value_vector
value_vector_function = cvar.value_vector_function
value_vector1D = cvar.value_vector1D
value_vector1D_function = cvar.value_vector1D_function
value_vector2D = cvar.value_vector2D
value_vector2D_function = cvar.value_vector2D_function
value_vector3D = cvar.value_vector3D
value_vector3D_interpolation = cvar.value_vector3D_interpolation
value_vector3D_congruent = cvar.value_vector3D_congruent
value_matrix = cvar.value_matrix
value_matrix_function = cvar.value_matrix_function
value_matrix1D = cvar.value_matrix1D
value_matrix1D_function = cvar.value_matrix1D_function
value_matrix2D = cvar.value_matrix2D
value_matrix2D_function = cvar.value_matrix2D_function
value_matrix3D = cvar.value_matrix3D
value_matrix3D_function = cvar.value_matrix3D_function
value_matrix3D_interpolation = cvar.value_matrix3D_interpolation
value_matrix3D_congruent = cvar.value_matrix3D_congruent

class IBool(IValue):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _diveCL.delete_IBool

    def GetValue(self):
        return _diveCL.IBool_GetValue(self)

# Register IBool in _diveCL:
_diveCL.IBool_swigregister(IBool)
class IString(IValue):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _diveCL.delete_IString

    def GetValue(self):
        return _diveCL.IString_GetValue(self)

# Register IString in _diveCL:
_diveCL.IString_swigregister(IString)
class IScalar(IValue):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _diveCL.delete_IScalar

    def GetValue(self):
        return _diveCL.IScalar_GetValue(self)

# Register IScalar in _diveCL:
_diveCL.IScalar_swigregister(IScalar)
class IScalar1D(IValue):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _diveCL.delete_IScalar1D

    def GetValue(self, *args):
        return _diveCL.IScalar1D_GetValue(self, *args)

# Register IScalar1D in _diveCL:
_diveCL.IScalar1D_swigregister(IScalar1D)
class IScalar2D(IValue):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _diveCL.delete_IScalar2D

    def GetValue(self, *args):
        return _diveCL.IScalar2D_GetValue(self, *args)

# Register IScalar2D in _diveCL:
_diveCL.IScalar2D_swigregister(IScalar2D)
class IScalar3D(IValue):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _diveCL.delete_IScalar3D

    def GetValue(self, *args):
        return _diveCL.IScalar3D_GetValue(self, *args)

# Register IScalar3D in _diveCL:
_diveCL.IScalar3D_swigregister(IScalar3D)
class IVector(IValue):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _diveCL.delete_IVector

    def GetValue(self):
        return _diveCL.IVector_GetValue(self)

# Register IVector in _diveCL:
_diveCL.IVector_swigregister(IVector)
class IVector1D(IValue):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _diveCL.delete_IVector1D

    def GetValue(self, *args):
        return _diveCL.IVector1D_GetValue(self, *args)

# Register IVector1D in _diveCL:
_diveCL.IVector1D_swigregister(IVector1D)
class IVector2D(IValue):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _diveCL.delete_IVector2D

    def GetValue(self, *args):
        return _diveCL.IVector2D_GetValue(self, *args)

# Register IVector2D in _diveCL:
_diveCL.IVector2D_swigregister(IVector2D)
class IVector3D(IValue):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _diveCL.delete_IVector3D

    def GetValue(self, *args):
        return _diveCL.IVector3D_GetValue(self, *args)

# Register IVector3D in _diveCL:
_diveCL.IVector3D_swigregister(IVector3D)
class IMatrix(IValue):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _diveCL.delete_IMatrix

    def GetValue(self):
        return _diveCL.IMatrix_GetValue(self)

# Register IMatrix in _diveCL:
_diveCL.IMatrix_swigregister(IMatrix)
class IMatrix1D(IValue):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _diveCL.delete_IMatrix1D

    def GetValue(self, *args):
        return _diveCL.IMatrix1D_GetValue(self, *args)

# Register IMatrix1D in _diveCL:
_diveCL.IMatrix1D_swigregister(IMatrix1D)
class IMatrix2D(IValue):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _diveCL.delete_IMatrix2D

    def GetValue(self, *args):
        return _diveCL.IMatrix2D_GetValue(self, *args)

# Register IMatrix2D in _diveCL:
_diveCL.IMatrix2D_swigregister(IMatrix2D)
class IMatrix3D(IValue):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _diveCL.delete_IMatrix3D

    def GetValue(self, *args):
        return _diveCL.IMatrix3D_GetValue(self, *args)

# Register IMatrix3D in _diveCL:
_diveCL.IMatrix3D_swigregister(IMatrix3D)

def CreateValueBool(value, name, key):
    return _diveCL.CreateValueBool(value, name, key)

def CastToBool(value):
    return _diveCL.CastToBool(value)
class ValueBool(IBool):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _diveCL.delete_ValueBool

    @staticmethod
    def Create():
        return _diveCL.ValueBool_Create()

    def GetType(self):
        return _diveCL.ValueBool_GetType(self)

    def GetName(self):
        return _diveCL.ValueBool_GetName(self)

    def GetKey(self):
        return _diveCL.ValueBool_GetKey(self)

    def GetValue(self):
        return _diveCL.ValueBool_GetValue(self)

    def SetName(self, name):
        return _diveCL.ValueBool_SetName(self, name)

    def SetKey(self, key):
        return _diveCL.ValueBool_SetKey(self, key)

    def SetValue(self, value):
        return _diveCL.ValueBool_SetValue(self, value)

# Register ValueBool in _diveCL:
_diveCL.ValueBool_swigregister(ValueBool)

def CreateValueString(value, name, key):
    return _diveCL.CreateValueString(value, name, key)

def CastToString(value):
    return _diveCL.CastToString(value)
class ValueString(IString):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _diveCL.delete_ValueString

    @staticmethod
    def Create():
        return _diveCL.ValueString_Create()

    def GetType(self):
        return _diveCL.ValueString_GetType(self)

    def GetName(self):
        return _diveCL.ValueString_GetName(self)

    def GetKey(self):
        return _diveCL.ValueString_GetKey(self)

    def GetValue(self):
        return _diveCL.ValueString_GetValue(self)

    def SetName(self, name):
        return _diveCL.ValueString_SetName(self, name)

    def SetKey(self, key):
        return _diveCL.ValueString_SetKey(self, key)

    def SetValue(self, value):
        return _diveCL.ValueString_SetValue(self, value)

# Register ValueString in _diveCL:
_diveCL.ValueString_swigregister(ValueString)

def CreateValueScalar(value, name, key):
    return _diveCL.CreateValueScalar(value, name, key)

def CastToScalar(value):
    return _diveCL.CastToScalar(value)
class ValueScalar(IScalar):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _diveCL.delete_ValueScalar

    @staticmethod
    def Create():
        return _diveCL.ValueScalar_Create()

    def GetType(self):
        return _diveCL.ValueScalar_GetType(self)

    def GetName(self):
        return _diveCL.ValueScalar_GetName(self)

    def GetKey(self):
        return _diveCL.ValueScalar_GetKey(self)

    def GetValue(self):
        return _diveCL.ValueScalar_GetValue(self)

    def SetName(self, name):
        return _diveCL.ValueScalar_SetName(self, name)

    def SetKey(self, key):
        return _diveCL.ValueScalar_SetKey(self, key)

    def SetValue(self, value):
        return _diveCL.ValueScalar_SetValue(self, value)

# Register ValueScalar in _diveCL:
_diveCL.ValueScalar_swigregister(ValueScalar)

def CreateValueScalar1D(value, name, key):
    return _diveCL.CreateValueScalar1D(value, name, key)

def CastToScalar1D(value):
    return _diveCL.CastToScalar1D(value)
class ValueScalar1D(IScalar1D):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _diveCL.delete_ValueScalar1D

    @staticmethod
    def Create():
        return _diveCL.ValueScalar1D_Create()

    def GetType(self):
        return _diveCL.ValueScalar1D_GetType(self)

    def GetName(self):
        return _diveCL.ValueScalar1D_GetName(self)

    def GetKey(self):
        return _diveCL.ValueScalar1D_GetKey(self)

    def GetValue(self, *args):
        return _diveCL.ValueScalar1D_GetValue(self, *args)

    def SetName(self, name):
        return _diveCL.ValueScalar1D_SetName(self, name)

    def SetKey(self, key):
        return _diveCL.ValueScalar1D_SetKey(self, key)

    def SetValue(self, value):
        return _diveCL.ValueScalar1D_SetValue(self, value)

# Register ValueScalar1D in _diveCL:
_diveCL.ValueScalar1D_swigregister(ValueScalar1D)

def CreateValueScalar2D(value, name, key):
    return _diveCL.CreateValueScalar2D(value, name, key)

def CastToScalar2D(value):
    return _diveCL.CastToScalar2D(value)
class ValueScalar2D(IScalar2D):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _diveCL.delete_ValueScalar2D

    @staticmethod
    def Create():
        return _diveCL.ValueScalar2D_Create()

    def GetType(self):
        return _diveCL.ValueScalar2D_GetType(self)

    def GetName(self):
        return _diveCL.ValueScalar2D_GetName(self)

    def GetKey(self):
        return _diveCL.ValueScalar2D_GetKey(self)

    def GetValue(self, *args):
        return _diveCL.ValueScalar2D_GetValue(self, *args)

    def SetName(self, name):
        return _diveCL.ValueScalar2D_SetName(self, name)

    def SetKey(self, key):
        return _diveCL.ValueScalar2D_SetKey(self, key)

    def SetValue(self, value):
        return _diveCL.ValueScalar2D_SetValue(self, value)

# Register ValueScalar2D in _diveCL:
_diveCL.ValueScalar2D_swigregister(ValueScalar2D)

def CreateValueScalar3D(value, name, key):
    return _diveCL.CreateValueScalar3D(value, name, key)

def CastToScalar3D(value):
    return _diveCL.CastToScalar3D(value)
class ValueScalar3D(IScalar3D):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _diveCL.delete_ValueScalar3D

    @staticmethod
    def Create():
        return _diveCL.ValueScalar3D_Create()

    def GetType(self):
        return _diveCL.ValueScalar3D_GetType(self)

    def GetName(self):
        return _diveCL.ValueScalar3D_GetName(self)

    def GetKey(self):
        return _diveCL.ValueScalar3D_GetKey(self)

    def GetValue(self, *args):
        return _diveCL.ValueScalar3D_GetValue(self, *args)

    def SetName(self, name):
        return _diveCL.ValueScalar3D_SetName(self, name)

    def SetKey(self, key):
        return _diveCL.ValueScalar3D_SetKey(self, key)

    def SetValue(self, value):
        return _diveCL.ValueScalar3D_SetValue(self, value)

# Register ValueScalar3D in _diveCL:
_diveCL.ValueScalar3D_swigregister(ValueScalar3D)

def CreateValueScalar1DFunction(function_Pointer_D_D, name, key):
    return _diveCL.CreateValueScalar1DFunction(function_Pointer_D_D, name, key)

def CastToScalar1DFunction(value):
    return _diveCL.CastToScalar1DFunction(value)
class ValueScalar1DFunction(IScalar1D):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _diveCL.delete_ValueScalar1DFunction

    @staticmethod
    def Create():
        return _diveCL.ValueScalar1DFunction_Create()

    def GetType(self):
        return _diveCL.ValueScalar1DFunction_GetType(self)

    def GetName(self):
        return _diveCL.ValueScalar1DFunction_GetName(self)

    def GetKey(self):
        return _diveCL.ValueScalar1DFunction_GetKey(self)

    def GetValue(self, *args):
        return _diveCL.ValueScalar1DFunction_GetValue(self, *args)

    def SetName(self, name):
        return _diveCL.ValueScalar1DFunction_SetName(self, name)

    def SetKey(self, key):
        return _diveCL.ValueScalar1DFunction_SetKey(self, key)

    def SetFunction(self, function_Pointer_D_D):
        return _diveCL.ValueScalar1DFunction_SetFunction(self, function_Pointer_D_D)

# Register ValueScalar1DFunction in _diveCL:
_diveCL.ValueScalar1DFunction_swigregister(ValueScalar1DFunction)

def CreateValueScalar2DFunction(function_Pointer_D_DD, name, key):
    return _diveCL.CreateValueScalar2DFunction(function_Pointer_D_DD, name, key)

def CastToScalar2DFunction(value):
    return _diveCL.CastToScalar2DFunction(value)
class ValueScalar2DFunction(IScalar2D):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _diveCL.delete_ValueScalar2DFunction

    @staticmethod
    def Create():
        return _diveCL.ValueScalar2DFunction_Create()

    def GetType(self):
        return _diveCL.ValueScalar2DFunction_GetType(self)

    def GetName(self):
        return _diveCL.ValueScalar2DFunction_GetName(self)

    def GetKey(self):
        return _diveCL.ValueScalar2DFunction_GetKey(self)

    def GetValue(self, *args):
        return _diveCL.ValueScalar2DFunction_GetValue(self, *args)

    def SetName(self, name):
        return _diveCL.ValueScalar2DFunction_SetName(self, name)

    def SetKey(self, key):
        return _diveCL.ValueScalar2DFunction_SetKey(self, key)

    def SetFunction(self, function_Pointer_D_DD):
        return _diveCL.ValueScalar2DFunction_SetFunction(self, function_Pointer_D_DD)

# Register ValueScalar2DFunction in _diveCL:
_diveCL.ValueScalar2DFunction_swigregister(ValueScalar2DFunction)

def CreateValueScalar3DFunction(function_Pointer_D_DDD, name, key):
    return _diveCL.CreateValueScalar3DFunction(function_Pointer_D_DDD, name, key)

def CastToScalar3DFunction(value):
    return _diveCL.CastToScalar3DFunction(value)
class ValueScalar3DFunction(IScalar3D):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _diveCL.delete_ValueScalar3DFunction

    @staticmethod
    def Create():
        return _diveCL.ValueScalar3DFunction_Create()

    def GetType(self):
        return _diveCL.ValueScalar3DFunction_GetType(self)

    def GetName(self):
        return _diveCL.ValueScalar3DFunction_GetName(self)

    def GetKey(self):
        return _diveCL.ValueScalar3DFunction_GetKey(self)

    def GetValue(self, *args):
        return _diveCL.ValueScalar3DFunction_GetValue(self, *args)

    def SetName(self, name):
        return _diveCL.ValueScalar3DFunction_SetName(self, name)

    def SetKey(self, key):
        return _diveCL.ValueScalar3DFunction_SetKey(self, key)

    def SetFunction(self, function_Pointer_D_DDD):
        return _diveCL.ValueScalar3DFunction_SetFunction(self, function_Pointer_D_DDD)

# Register ValueScalar3DFunction in _diveCL:
_diveCL.ValueScalar3DFunction_swigregister(ValueScalar3DFunction)

def CreateValueScalar3DInterpolation(nodes, interpolationType, name, key):
    return _diveCL.CreateValueScalar3DInterpolation(nodes, interpolationType, name, key)

def CastToScalar3DInterpolation(value):
    return _diveCL.CastToScalar3DInterpolation(value)
class ValueScalar3DInterpolation(IScalar3D):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _diveCL.delete_ValueScalar3DInterpolation

    @staticmethod
    def Create():
        return _diveCL.ValueScalar3DInterpolation_Create()

    def GetType(self):
        return _diveCL.ValueScalar3DInterpolation_GetType(self)

    def GetName(self):
        return _diveCL.ValueScalar3DInterpolation_GetName(self)

    def GetKey(self):
        return _diveCL.ValueScalar3DInterpolation_GetKey(self)

    def GetValue(self, *args):
        return _diveCL.ValueScalar3DInterpolation_GetValue(self, *args)

    def GetInterpolation(self):
        return _diveCL.ValueScalar3DInterpolation_GetInterpolation(self)

    def SetName(self, name):
        return _diveCL.ValueScalar3DInterpolation_SetName(self, name)

    def SetKey(self, key):
        return _diveCL.ValueScalar3DInterpolation_SetKey(self, key)

    def SetNodes(self, nodes, interpolationType):
        return _diveCL.ValueScalar3DInterpolation_SetNodes(self, nodes, interpolationType)

# Register ValueScalar3DInterpolation in _diveCL:
_diveCL.ValueScalar3DInterpolation_swigregister(ValueScalar3DInterpolation)

def CreateValueVector(value, name, key):
    return _diveCL.CreateValueVector(value, name, key)

def CastToVector(value):
    return _diveCL.CastToVector(value)
class ValueVector(IVector):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _diveCL.delete_ValueVector

    @staticmethod
    def Create():
        return _diveCL.ValueVector_Create()

    def GetType(self):
        return _diveCL.ValueVector_GetType(self)

    def GetName(self):
        return _diveCL.ValueVector_GetName(self)

    def GetKey(self):
        return _diveCL.ValueVector_GetKey(self)

    def GetValue(self):
        return _diveCL.ValueVector_GetValue(self)

    def SetName(self, name):
        return _diveCL.ValueVector_SetName(self, name)

    def SetKey(self, key):
        return _diveCL.ValueVector_SetKey(self, key)

    def SetValue(self, value):
        return _diveCL.ValueVector_SetValue(self, value)

# Register ValueVector in _diveCL:
_diveCL.ValueVector_swigregister(ValueVector)

def CreateValueVector1D(value, name, key):
    return _diveCL.CreateValueVector1D(value, name, key)

def CastToVector1D(value):
    return _diveCL.CastToVector1D(value)
class ValueVector1D(IVector1D):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _diveCL.delete_ValueVector1D

    @staticmethod
    def Create():
        return _diveCL.ValueVector1D_Create()

    def GetType(self):
        return _diveCL.ValueVector1D_GetType(self)

    def GetName(self):
        return _diveCL.ValueVector1D_GetName(self)

    def GetKey(self):
        return _diveCL.ValueVector1D_GetKey(self)

    def GetValue(self, *args):
        return _diveCL.ValueVector1D_GetValue(self, *args)

    def SetName(self, name):
        return _diveCL.ValueVector1D_SetName(self, name)

    def SetKey(self, key):
        return _diveCL.ValueVector1D_SetKey(self, key)

    def SetValue(self, value):
        return _diveCL.ValueVector1D_SetValue(self, value)

# Register ValueVector1D in _diveCL:
_diveCL.ValueVector1D_swigregister(ValueVector1D)

def CreateValueVector2D(value, name, key):
    return _diveCL.CreateValueVector2D(value, name, key)

def CastToVector2D(value):
    return _diveCL.CastToVector2D(value)
class ValueVector2D(IVector2D):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _diveCL.delete_ValueVector2D

    @staticmethod
    def Create():
        return _diveCL.ValueVector2D_Create()

    def GetType(self):
        return _diveCL.ValueVector2D_GetType(self)

    def GetName(self):
        return _diveCL.ValueVector2D_GetName(self)

    def GetKey(self):
        return _diveCL.ValueVector2D_GetKey(self)

    def GetValue(self, *args):
        return _diveCL.ValueVector2D_GetValue(self, *args)

    def SetName(self, name):
        return _diveCL.ValueVector2D_SetName(self, name)

    def SetKey(self, key):
        return _diveCL.ValueVector2D_SetKey(self, key)

    def SetValue(self, value):
        return _diveCL.ValueVector2D_SetValue(self, value)

# Register ValueVector2D in _diveCL:
_diveCL.ValueVector2D_swigregister(ValueVector2D)

def CreateValueVector3D(value, name, key):
    return _diveCL.CreateValueVector3D(value, name, key)

def CastToVector3D(value):
    return _diveCL.CastToVector3D(value)
class ValueVector3D(IVector3D):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _diveCL.delete_ValueVector3D

    @staticmethod
    def Create():
        return _diveCL.ValueVector3D_Create()

    def GetType(self):
        return _diveCL.ValueVector3D_GetType(self)

    def GetName(self):
        return _diveCL.ValueVector3D_GetName(self)

    def GetKey(self):
        return _diveCL.ValueVector3D_GetKey(self)

    def GetValue(self, *args):
        return _diveCL.ValueVector3D_GetValue(self, *args)

    def SetName(self, name):
        return _diveCL.ValueVector3D_SetName(self, name)

    def SetKey(self, key):
        return _diveCL.ValueVector3D_SetKey(self, key)

    def SetValue(self, value):
        return _diveCL.ValueVector3D_SetValue(self, value)

# Register ValueVector3D in _diveCL:
_diveCL.ValueVector3D_swigregister(ValueVector3D)

def CreateValueMatrix(value, name, key):
    return _diveCL.CreateValueMatrix(value, name, key)

def CastToMatrix(value):
    return _diveCL.CastToMatrix(value)
class ValueMatrix(IMatrix):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _diveCL.delete_ValueMatrix

    @staticmethod
    def Create():
        return _diveCL.ValueMatrix_Create()

    def GetType(self):
        return _diveCL.ValueMatrix_GetType(self)

    def GetName(self):
        return _diveCL.ValueMatrix_GetName(self)

    def GetKey(self):
        return _diveCL.ValueMatrix_GetKey(self)

    def GetValue(self):
        return _diveCL.ValueMatrix_GetValue(self)

    def SetName(self, name):
        return _diveCL.ValueMatrix_SetName(self, name)

    def SetKey(self, key):
        return _diveCL.ValueMatrix_SetKey(self, key)

    def SetValue(self, value):
        return _diveCL.ValueMatrix_SetValue(self, value)

# Register ValueMatrix in _diveCL:
_diveCL.ValueMatrix_swigregister(ValueMatrix)

def CreateValueMatrix1D(value, name, key):
    return _diveCL.CreateValueMatrix1D(value, name, key)

def CastToMatrix1D(value):
    return _diveCL.CastToMatrix1D(value)
class ValueMatrix1D(IMatrix1D):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _diveCL.delete_ValueMatrix1D

    @staticmethod
    def Create():
        return _diveCL.ValueMatrix1D_Create()

    def GetType(self):
        return _diveCL.ValueMatrix1D_GetType(self)

    def GetName(self):
        return _diveCL.ValueMatrix1D_GetName(self)

    def GetKey(self):
        return _diveCL.ValueMatrix1D_GetKey(self)

    def GetValue(self, *args):
        return _diveCL.ValueMatrix1D_GetValue(self, *args)

    def SetName(self, name):
        return _diveCL.ValueMatrix1D_SetName(self, name)

    def SetKey(self, key):
        return _diveCL.ValueMatrix1D_SetKey(self, key)

    def SetValue(self, value):
        return _diveCL.ValueMatrix1D_SetValue(self, value)

# Register ValueMatrix1D in _diveCL:
_diveCL.ValueMatrix1D_swigregister(ValueMatrix1D)

def CreateValueMatrix2D(value, name, key):
    return _diveCL.CreateValueMatrix2D(value, name, key)

def CastToMatrix2D(value):
    return _diveCL.CastToMatrix2D(value)
class ValueMatrix2D(IMatrix2D):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _diveCL.delete_ValueMatrix2D

    @staticmethod
    def Create():
        return _diveCL.ValueMatrix2D_Create()

    def GetType(self):
        return _diveCL.ValueMatrix2D_GetType(self)

    def GetName(self):
        return _diveCL.ValueMatrix2D_GetName(self)

    def GetKey(self):
        return _diveCL.ValueMatrix2D_GetKey(self)

    def GetValue(self, *args):
        return _diveCL.ValueMatrix2D_GetValue(self, *args)

    def SetName(self, name):
        return _diveCL.ValueMatrix2D_SetName(self, name)

    def SetKey(self, key):
        return _diveCL.ValueMatrix2D_SetKey(self, key)

    def SetValue(self, value):
        return _diveCL.ValueMatrix2D_SetValue(self, value)

# Register ValueMatrix2D in _diveCL:
_diveCL.ValueMatrix2D_swigregister(ValueMatrix2D)

def CreateValueMatrix3D(value, name, key):
    return _diveCL.CreateValueMatrix3D(value, name, key)

def CastToMatrix3D(value):
    return _diveCL.CastToMatrix3D(value)
class ValueMatrix3D(IMatrix3D):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _diveCL.delete_ValueMatrix3D

    @staticmethod
    def Create():
        return _diveCL.ValueMatrix3D_Create()

    def GetType(self):
        return _diveCL.ValueMatrix3D_GetType(self)

    def GetName(self):
        return _diveCL.ValueMatrix3D_GetName(self)

    def GetKey(self):
        return _diveCL.ValueMatrix3D_GetKey(self)

    def GetValue(self, *args):
        return _diveCL.ValueMatrix3D_GetValue(self, *args)

    def SetName(self, name):
        return _diveCL.ValueMatrix3D_SetName(self, name)

    def SetKey(self, key):
        return _diveCL.ValueMatrix3D_SetKey(self, key)

    def SetValue(self, value):
        return _diveCL.ValueMatrix3D_SetValue(self, value)

# Register ValueMatrix3D in _diveCL:
_diveCL.ValueMatrix3D_swigregister(ValueMatrix3D)

def CreateValueMatrix3DInterpolation(nodes, interpolationType, name, key):
    return _diveCL.CreateValueMatrix3DInterpolation(nodes, interpolationType, name, key)

def CastToMatrix3DInterpolation(value):
    return _diveCL.CastToMatrix3DInterpolation(value)
class ValueMatrix3DInterpolation(IMatrix3D):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _diveCL.delete_ValueMatrix3DInterpolation

    @staticmethod
    def Create():
        return _diveCL.ValueMatrix3DInterpolation_Create()

    def GetType(self):
        return _diveCL.ValueMatrix3DInterpolation_GetType(self)

    def GetName(self):
        return _diveCL.ValueMatrix3DInterpolation_GetName(self)

    def GetKey(self):
        return _diveCL.ValueMatrix3DInterpolation_GetKey(self)

    def GetValue(self, *args):
        return _diveCL.ValueMatrix3DInterpolation_GetValue(self, *args)

    def GetInterpolation(self):
        return _diveCL.ValueMatrix3DInterpolation_GetInterpolation(self)

    def SetName(self, name):
        return _diveCL.ValueMatrix3DInterpolation_SetName(self, name)

    def SetKey(self, key):
        return _diveCL.ValueMatrix3DInterpolation_SetKey(self, key)

    def SetNodes(self, nodes, interpolationType):
        return _diveCL.ValueMatrix3DInterpolation_SetNodes(self, nodes, interpolationType)

# Register ValueMatrix3DInterpolation in _diveCL:
_diveCL.ValueMatrix3DInterpolation_swigregister(ValueMatrix3DInterpolation)

def GetValue(field, point, element):
    return _diveCL.GetValue(field, point, element)

def CreateValueScalar3DCongruent(*args):
    return _diveCL.CreateValueScalar3DCongruent(*args)
class ValueScalar3DCongruent(IScalar3D):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _diveCL.delete_ValueScalar3DCongruent

    @staticmethod
    def Create():
        return _diveCL.ValueScalar3DCongruent_Create()

    def GetType(self):
        return _diveCL.ValueScalar3DCongruent_GetType(self)

    def GetName(self):
        return _diveCL.ValueScalar3DCongruent_GetName(self)

    def GetKey(self):
        return _diveCL.ValueScalar3DCongruent_GetKey(self)

    def GetValue(self, *args):
        return _diveCL.ValueScalar3DCongruent_GetValue(self, *args)

    def GetMesh(self):
        return _diveCL.ValueScalar3DCongruent_GetMesh(self)

    def SetName(self, name):
        return _diveCL.ValueScalar3DCongruent_SetName(self, name)

    def SetKey(self, key):
        return _diveCL.ValueScalar3DCongruent_SetKey(self, key)

    def SetMesh(self, mesh):
        return _diveCL.ValueScalar3DCongruent_SetMesh(self, mesh)

    def SetElementIndex(self, elementIndex):
        return _diveCL.ValueScalar3DCongruent_SetElementIndex(self, elementIndex)

# Register ValueScalar3DCongruent in _diveCL:
_diveCL.ValueScalar3DCongruent_swigregister(ValueScalar3DCongruent)

def GetValueVector3D(field, point, element):
    return _diveCL.GetValueVector3D(field, point, element)

def CreateValueVector3DCongruent(*args):
    return _diveCL.CreateValueVector3DCongruent(*args)
class ValueVector3DCongruent(IVector3D):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _diveCL.delete_ValueVector3DCongruent

    @staticmethod
    def Create():
        return _diveCL.ValueVector3DCongruent_Create()

    def GetType(self):
        return _diveCL.ValueVector3DCongruent_GetType(self)

    def GetName(self):
        return _diveCL.ValueVector3DCongruent_GetName(self)

    def GetKey(self):
        return _diveCL.ValueVector3DCongruent_GetKey(self)

    def GetValue(self, *args):
        return _diveCL.ValueVector3DCongruent_GetValue(self, *args)

    def GetMesh(self):
        return _diveCL.ValueVector3DCongruent_GetMesh(self)

    def SetName(self, name):
        return _diveCL.ValueVector3DCongruent_SetName(self, name)

    def SetKey(self, key):
        return _diveCL.ValueVector3DCongruent_SetKey(self, key)

    def SetMesh(self, mesh):
        return _diveCL.ValueVector3DCongruent_SetMesh(self, mesh)

    def SetElementIndex(self, elementIndex):
        return _diveCL.ValueVector3DCongruent_SetElementIndex(self, elementIndex)

# Register ValueVector3DCongruent in _diveCL:
_diveCL.ValueVector3DCongruent_swigregister(ValueVector3DCongruent)

def GetValueMatrix3D(field, point, element):
    return _diveCL.GetValueMatrix3D(field, point, element)

def CreateValueMatrix3DCongruent(*args):
    return _diveCL.CreateValueMatrix3DCongruent(*args)
class ValueMatrix3DCongruent(IMatrix3D):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _diveCL.delete_ValueMatrix3DCongruent

    @staticmethod
    def Create():
        return _diveCL.ValueMatrix3DCongruent_Create()

    def GetType(self):
        return _diveCL.ValueMatrix3DCongruent_GetType(self)

    def GetName(self):
        return _diveCL.ValueMatrix3DCongruent_GetName(self)

    def GetKey(self):
        return _diveCL.ValueMatrix3DCongruent_GetKey(self)

    def GetValue(self, *args):
        return _diveCL.ValueMatrix3DCongruent_GetValue(self, *args)

    def GetMesh(self):
        return _diveCL.ValueMatrix3DCongruent_GetMesh(self)

    def SetName(self, name):
        return _diveCL.ValueMatrix3DCongruent_SetName(self, name)

    def SetKey(self, key):
        return _diveCL.ValueMatrix3DCongruent_SetKey(self, key)

    def SetMesh(self, mesh):
        return _diveCL.ValueMatrix3DCongruent_SetMesh(self, mesh)

    def SetElementIndex(self, elementIndex):
        return _diveCL.ValueMatrix3DCongruent_SetElementIndex(self, elementIndex)

# Register ValueMatrix3DCongruent in _diveCL:
_diveCL.ValueMatrix3DCongruent_swigregister(ValueMatrix3DCongruent)


import ctypes

py_function_pointer_D_D = ctypes.CFUNCTYPE(ctypes.c_double, ctypes.c_double)
py_function_pointer_D_DD = ctypes.CFUNCTYPE(ctypes.c_double, ctypes.c_double, ctypes.c_double)
py_function_pointer_D_DDD = ctypes.CFUNCTYPE(ctypes.c_double, ctypes.c_double, ctypes.c_double, ctypes.c_double)

def CreateValueScalar1DFunction(function, name, key):
	f = py_function_pointer_D_D(function)
	f_ptr = ctypes.cast(f, ctypes.c_void_p).value

	return _dive.CreateValueScalar1DFunction(f_ptr, name, key)

def CreateValueScalar2DFunction(function, name, key):
	f = py_function_pointer_D_DD(function)
	f_ptr = ctypes.cast(f, ctypes.c_void_p).value

	return _dive.CreateValueScalar2DFunction(f_ptr, name, key)

def CreateValueScalar3DFunction(function, name, key):
	f = py_function_pointer_D_DDD(function)
	f_ptr = ctypes.cast(f, ctypes.c_void_p).value

	return _dive.CreateValueScalar3DFunction(f_ptr, name, key)


class IGauss(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _diveCL.delete_IGauss

    def GetPoints(self):
        return _diveCL.IGauss_GetPoints(self)

    def GetWeights(self):
        return _diveCL.IGauss_GetWeights(self)

    def GetCounter(self):
        return _diveCL.IGauss_GetCounter(self)

    def GetQuadrature(self):
        return _diveCL.IGauss_GetQuadrature(self)

    def SetQuadrature(self, value):
        return _diveCL.IGauss_SetQuadrature(self, value)

# Register IGauss in _diveCL:
_diveCL.IGauss_swigregister(IGauss)
GaussTable = cvar.GaussTable


def CreateGaussHexa():
    return _diveCL.CreateGaussHexa()
class GaussHexa(IGauss):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _diveCL.delete_GaussHexa

    @staticmethod
    def Create():
        return _diveCL.GaussHexa_Create()

    def GetPtr(self, *args):
        return _diveCL.GaussHexa_GetPtr(self, *args)

    def GetPoints(self):
        return _diveCL.GaussHexa_GetPoints(self)

    def GetWeights(self):
        return _diveCL.GaussHexa_GetWeights(self)

    def GetCounter(self):
        return _diveCL.GaussHexa_GetCounter(self)

    def GetQuadrature(self):
        return _diveCL.GaussHexa_GetQuadrature(self)

    def SetQuadrature(self, value):
        return _diveCL.GaussHexa_SetQuadrature(self, value)

# Register GaussHexa in _diveCL:
_diveCL.GaussHexa_swigregister(GaussHexa)

def CreateGaussRect():
    return _diveCL.CreateGaussRect()
class GaussRect(IGauss):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _diveCL.delete_GaussRect

    @staticmethod
    def Create():
        return _diveCL.GaussRect_Create()

    def GetPtr(self, *args):
        return _diveCL.GaussRect_GetPtr(self, *args)

    def GetPoints(self):
        return _diveCL.GaussRect_GetPoints(self)

    def GetWeights(self):
        return _diveCL.GaussRect_GetWeights(self)

    def GetCounter(self):
        return _diveCL.GaussRect_GetCounter(self)

    def GetQuadrature(self):
        return _diveCL.GaussRect_GetQuadrature(self)

    def SetQuadrature(self, value):
        return _diveCL.GaussRect_SetQuadrature(self, value)

# Register GaussRect in _diveCL:
_diveCL.GaussRect_swigregister(GaussRect)

def CreateGaussLine():
    return _diveCL.CreateGaussLine()
class GaussLine(IGauss):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _diveCL.delete_GaussLine

    @staticmethod
    def Create():
        return _diveCL.GaussLine_Create()

    def GetPtr(self, *args):
        return _diveCL.GaussLine_GetPtr(self, *args)

    def GetPoints(self):
        return _diveCL.GaussLine_GetPoints(self)

    def GetWeights(self):
        return _diveCL.GaussLine_GetWeights(self)

    def GetCounter(self):
        return _diveCL.GaussLine_GetCounter(self)

    def GetQuadrature(self):
        return _diveCL.GaussLine_GetQuadrature(self)

    def SetQuadrature(self, value):
        return _diveCL.GaussLine_SetQuadrature(self, value)

# Register GaussLine in _diveCL:
_diveCL.GaussLine_swigregister(GaussLine)
class IInterpolation(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _diveCL.delete_IInterpolation

    def GetType(self):
        return _diveCL.IInterpolation_GetType(self)

    def GetValue(self, *args):
        return _diveCL.IInterpolation_GetValue(self, *args)

    def SetNodes(self, nodes):
        return _diveCL.IInterpolation_SetNodes(self, nodes)

    def SetBasis(self, basis):
        return _diveCL.IInterpolation_SetBasis(self, basis)

# Register IInterpolation in _diveCL:
_diveCL.IInterpolation_swigregister(IInterpolation)
headerInterpolation = cvar.headerInterpolation
interpolation_fixed = cvar.interpolation_fixed
interpolation_idw = cvar.interpolation_idw
interpolation_nn = cvar.interpolation_nn
interpolation_rbf = cvar.interpolation_rbf


def CreateInterpolationFixed():
    return _diveCL.CreateInterpolationFixed()
class InterpolationFixed(IInterpolation):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def Create():
        return _diveCL.InterpolationFixed_Create()

    def GetPtr(self, *args):
        return _diveCL.InterpolationFixed_GetPtr(self, *args)
    __swig_destroy__ = _diveCL.delete_InterpolationFixed

    def GetType(self):
        return _diveCL.InterpolationFixed_GetType(self)

    def GetValue(self, *args):
        return _diveCL.InterpolationFixed_GetValue(self, *args)

    def SetNodes(self, nodes):
        return _diveCL.InterpolationFixed_SetNodes(self, nodes)

    def SetBasis(self, basis):
        return _diveCL.InterpolationFixed_SetBasis(self, basis)

    def SetNodeIndex(self, index):
        return _diveCL.InterpolationFixed_SetNodeIndex(self, index)

# Register InterpolationFixed in _diveCL:
_diveCL.InterpolationFixed_swigregister(InterpolationFixed)

def CreateInterpolationIDW():
    return _diveCL.CreateInterpolationIDW()
class InterpolationIDW(IInterpolation):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _diveCL.delete_InterpolationIDW

    @staticmethod
    def Create():
        return _diveCL.InterpolationIDW_Create()

    def GetPtr(self, *args):
        return _diveCL.InterpolationIDW_GetPtr(self, *args)

    def GetType(self):
        return _diveCL.InterpolationIDW_GetType(self)

    def GetValue(self, *args):
        return _diveCL.InterpolationIDW_GetValue(self, *args)

    def SetNodes(self, nodes):
        return _diveCL.InterpolationIDW_SetNodes(self, nodes)

    def SetBasis(self, basis):
        return _diveCL.InterpolationIDW_SetBasis(self, basis)

    def SetShape(self, value):
        return _diveCL.InterpolationIDW_SetShape(self, value)

    def SetNumberNodes(self, numberNodes):
        return _diveCL.InterpolationIDW_SetNumberNodes(self, numberNodes)

# Register InterpolationIDW in _diveCL:
_diveCL.InterpolationIDW_swigregister(InterpolationIDW)

def CreateInterpolationNN():
    return _diveCL.CreateInterpolationNN()
class InterpolationNN(IInterpolation):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def Create():
        return _diveCL.InterpolationNN_Create()

    def GetPtr(self, *args):
        return _diveCL.InterpolationNN_GetPtr(self, *args)
    __swig_destroy__ = _diveCL.delete_InterpolationNN

    def GetType(self):
        return _diveCL.InterpolationNN_GetType(self)

    def GetValue(self, *args):
        return _diveCL.InterpolationNN_GetValue(self, *args)

    def SetNodes(self, nodes):
        return _diveCL.InterpolationNN_SetNodes(self, nodes)

    def SetBasis(self, basis):
        return _diveCL.InterpolationNN_SetBasis(self, basis)

# Register InterpolationNN in _diveCL:
_diveCL.InterpolationNN_swigregister(InterpolationNN)

def CreateInterpolationRBF():
    return _diveCL.CreateInterpolationRBF()
class InterpolationRBF(IInterpolation):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _diveCL.delete_InterpolationRBF

    @staticmethod
    def Create():
        return _diveCL.InterpolationRBF_Create()

    def GetPtr(self, *args):
        return _diveCL.InterpolationRBF_GetPtr(self, *args)

    def GetType(self):
        return _diveCL.InterpolationRBF_GetType(self)

    def GetValue(self, *args):
        return _diveCL.InterpolationRBF_GetValue(self, *args)

    def SetNodes(self, nodes):
        return _diveCL.InterpolationRBF_SetNodes(self, nodes)

    def SetBasis(self, basis):
        return _diveCL.InterpolationRBF_SetBasis(self, basis)

    def SetShape(self, value):
        return _diveCL.InterpolationRBF_SetShape(self, value)

    def SetFunction(self, function):
        return _diveCL.InterpolationRBF_SetFunction(self, function)

# Register InterpolationRBF in _diveCL:
_diveCL.InterpolationRBF_swigregister(InterpolationRBF)
interpolation_function_TPS = cvar.interpolation_function_TPS
interpolation_function_MQB = cvar.interpolation_function_MQB

class IBase(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _diveCL.delete_IBase

    def GetTag(self):
        return _diveCL.IBase_GetTag(self)

    def GetType(self):
        return _diveCL.IBase_GetType(self)

    def GetClass(self):
        return _diveCL.IBase_GetClass(self)

    def GetGroup(self):
        return _diveCL.IBase_GetGroup(self)

    def GetDescription(self):
        return _diveCL.IBase_GetDescription(self)

    def GetName(self):
        return _diveCL.IBase_GetName(self)

    def GetProperty(self, key):
        return _diveCL.IBase_GetProperty(self, key)

    def SetClass(self, value):
        return _diveCL.IBase_SetClass(self, value)

    def SetGroup(self, value):
        return _diveCL.IBase_SetGroup(self, value)

    def SetDescription(self, value):
        return _diveCL.IBase_SetDescription(self, value)

    def SetName(self, value):
        return _diveCL.IBase_SetName(self, value)

    def SetTag(self, tag):
        return _diveCL.IBase_SetTag(self, tag)

    def SetProperty(self, value):
        return _diveCL.IBase_SetProperty(self, value)

# Register IBase in _diveCL:
_diveCL.IBase_swigregister(IBase)
materialLogger = cvar.materialLogger
material_solid = cvar.material_solid
material_fluid = cvar.material_fluid

class IMaterial(IBase):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _diveCL.delete_IMaterial

    def GetDensity(self, temperature, pressure):
        return _diveCL.IMaterial_GetDensity(self, temperature, pressure)

    def GetSpecificHeat(self, temperature, pressure):
        return _diveCL.IMaterial_GetSpecificHeat(self, temperature, pressure)

    def GetThermalConductivity(self, temperature, pressure):
        return _diveCL.IMaterial_GetThermalConductivity(self, temperature, pressure)

    def SetDensity(self, value):
        return _diveCL.IMaterial_SetDensity(self, value)

    def SetSpecificHeat(self, value):
        return _diveCL.IMaterial_SetSpecificHeat(self, value)

    def SetThermalConductivity(self, value):
        return _diveCL.IMaterial_SetThermalConductivity(self, value)

    def K(self, temperature, pressure):
        return _diveCL.IMaterial_K(self, temperature, pressure)

# Register IMaterial in _diveCL:
_diveCL.IMaterial_swigregister(IMaterial)
class IMaterialFluid(IMaterial):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _diveCL.delete_IMaterialFluid

    def GetDynamicViscosity(self, temperature, pressure):
        return _diveCL.IMaterialFluid_GetDynamicViscosity(self, temperature, pressure)

    def SetDynamicViscosity(self, value):
        return _diveCL.IMaterialFluid_SetDynamicViscosity(self, value)

    def D(self, temperature, pressure):
        return _diveCL.IMaterialFluid_D(self, temperature, pressure)

# Register IMaterialFluid in _diveCL:
_diveCL.IMaterialFluid_swigregister(IMaterialFluid)
class IMaterialSolid(IMaterial):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _diveCL.delete_IMaterialSolid

    def GetPoissonRatio(self, temperature, pressure):
        return _diveCL.IMaterialSolid_GetPoissonRatio(self, temperature, pressure)

    def GetThermalExpansion(self, temperature, pressure):
        return _diveCL.IMaterialSolid_GetThermalExpansion(self, temperature, pressure)

    def GetElasticModulus(self, temperature, pressure):
        return _diveCL.IMaterialSolid_GetElasticModulus(self, temperature, pressure)

    def SetPoissonRatio(self, value):
        return _diveCL.IMaterialSolid_SetPoissonRatio(self, value)

    def SetThermalExpansion(self, value):
        return _diveCL.IMaterialSolid_SetThermalExpansion(self, value)

    def SetElasticModulus(self, value):
        return _diveCL.IMaterialSolid_SetElasticModulus(self, value)

    def A(self, temperature, pressure):
        return _diveCL.IMaterialSolid_A(self, temperature, pressure)

    def D(self, temperature, pressure):
        return _diveCL.IMaterialSolid_D(self, temperature, pressure)

# Register IMaterialSolid in _diveCL:
_diveCL.IMaterialSolid_swigregister(IMaterialSolid)

def CreateMaterialFluid(materialTag):
    return _diveCL.CreateMaterialFluid(materialTag)
class MaterialFluid(IMaterialFluid):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _diveCL.delete_MaterialFluid

    @staticmethod
    def Create():
        return _diveCL.MaterialFluid_Create()

    def GetPtr(self, *args):
        return _diveCL.MaterialFluid_GetPtr(self, *args)

    def GetTag(self):
        return _diveCL.MaterialFluid_GetTag(self)

    def GetType(self):
        return _diveCL.MaterialFluid_GetType(self)

    def GetClass(self):
        return _diveCL.MaterialFluid_GetClass(self)

    def GetGroup(self):
        return _diveCL.MaterialFluid_GetGroup(self)

    def GetDescription(self):
        return _diveCL.MaterialFluid_GetDescription(self)

    def GetName(self):
        return _diveCL.MaterialFluid_GetName(self)

    def GetDensity(self, temperature, pressure):
        return _diveCL.MaterialFluid_GetDensity(self, temperature, pressure)

    def GetSpecificHeat(self, temperature, pressure):
        return _diveCL.MaterialFluid_GetSpecificHeat(self, temperature, pressure)

    def GetThermalConductivity(self, temperature, pressure):
        return _diveCL.MaterialFluid_GetThermalConductivity(self, temperature, pressure)

    def GetDynamicViscosity(self, temperature, pressure):
        return _diveCL.MaterialFluid_GetDynamicViscosity(self, temperature, pressure)

    def GetProperty(self, key):
        return _diveCL.MaterialFluid_GetProperty(self, key)

    def SetClass(self, value):
        return _diveCL.MaterialFluid_SetClass(self, value)

    def SetGroup(self, value):
        return _diveCL.MaterialFluid_SetGroup(self, value)

    def SetDescription(self, value):
        return _diveCL.MaterialFluid_SetDescription(self, value)

    def SetName(self, value):
        return _diveCL.MaterialFluid_SetName(self, value)

    def SetTag(self, tag):
        return _diveCL.MaterialFluid_SetTag(self, tag)

    def SetDensity(self, value):
        return _diveCL.MaterialFluid_SetDensity(self, value)

    def SetSpecificHeat(self, value):
        return _diveCL.MaterialFluid_SetSpecificHeat(self, value)

    def SetThermalConductivity(self, value):
        return _diveCL.MaterialFluid_SetThermalConductivity(self, value)

    def SetDynamicViscosity(self, value):
        return _diveCL.MaterialFluid_SetDynamicViscosity(self, value)

    def SetProperty(self, value):
        return _diveCL.MaterialFluid_SetProperty(self, value)

    def D(self, temperature, pressure):
        return _diveCL.MaterialFluid_D(self, temperature, pressure)

    def K(self, temperature, pressure):
        return _diveCL.MaterialFluid_K(self, temperature, pressure)

# Register MaterialFluid in _diveCL:
_diveCL.MaterialFluid_swigregister(MaterialFluid)

def CreateMaterialSolid(materialTag):
    return _diveCL.CreateMaterialSolid(materialTag)
class MaterialSolid(IMaterialSolid):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _diveCL.delete_MaterialSolid

    @staticmethod
    def Create():
        return _diveCL.MaterialSolid_Create()

    def GetPtr(self, *args):
        return _diveCL.MaterialSolid_GetPtr(self, *args)

    def GetTag(self):
        return _diveCL.MaterialSolid_GetTag(self)

    def GetType(self):
        return _diveCL.MaterialSolid_GetType(self)

    def GetClass(self):
        return _diveCL.MaterialSolid_GetClass(self)

    def GetGroup(self):
        return _diveCL.MaterialSolid_GetGroup(self)

    def GetDescription(self):
        return _diveCL.MaterialSolid_GetDescription(self)

    def GetName(self):
        return _diveCL.MaterialSolid_GetName(self)

    def GetDensity(self, temperature, pressure):
        return _diveCL.MaterialSolid_GetDensity(self, temperature, pressure)

    def GetSpecificHeat(self, temperature, pressure):
        return _diveCL.MaterialSolid_GetSpecificHeat(self, temperature, pressure)

    def GetThermalConductivity(self, temperature, pressure):
        return _diveCL.MaterialSolid_GetThermalConductivity(self, temperature, pressure)

    def GetThermalExpansion(self, temperature, pressure):
        return _diveCL.MaterialSolid_GetThermalExpansion(self, temperature, pressure)

    def GetPoissonRatio(self, temperature, pressure):
        return _diveCL.MaterialSolid_GetPoissonRatio(self, temperature, pressure)

    def GetElasticModulus(self, temperature, pressure):
        return _diveCL.MaterialSolid_GetElasticModulus(self, temperature, pressure)

    def GetProperty(self, key):
        return _diveCL.MaterialSolid_GetProperty(self, key)

    def SetClass(self, value):
        return _diveCL.MaterialSolid_SetClass(self, value)

    def SetGroup(self, value):
        return _diveCL.MaterialSolid_SetGroup(self, value)

    def SetDescription(self, value):
        return _diveCL.MaterialSolid_SetDescription(self, value)

    def SetName(self, value):
        return _diveCL.MaterialSolid_SetName(self, value)

    def SetTag(self, tag):
        return _diveCL.MaterialSolid_SetTag(self, tag)

    def SetDensity(self, value):
        return _diveCL.MaterialSolid_SetDensity(self, value)

    def SetSpecificHeat(self, value):
        return _diveCL.MaterialSolid_SetSpecificHeat(self, value)

    def SetThermalConductivity(self, value):
        return _diveCL.MaterialSolid_SetThermalConductivity(self, value)

    def SetPoissonRatio(self, value):
        return _diveCL.MaterialSolid_SetPoissonRatio(self, value)

    def SetThermalExpansion(self, value):
        return _diveCL.MaterialSolid_SetThermalExpansion(self, value)

    def SetElasticModulus(self, value):
        return _diveCL.MaterialSolid_SetElasticModulus(self, value)

    def SetProperty(self, value):
        return _diveCL.MaterialSolid_SetProperty(self, value)

    def A(self, temperature, pressure):
        return _diveCL.MaterialSolid_A(self, temperature, pressure)

    def D(self, temperature, pressure):
        return _diveCL.MaterialSolid_D(self, temperature, pressure)

    def K(self, temperature, pressure):
        return _diveCL.MaterialSolid_K(self, temperature, pressure)

# Register MaterialSolid in _diveCL:
_diveCL.MaterialSolid_swigregister(MaterialSolid)

def ListNodes(nodes):
    return _diveCL.ListNodes(nodes)

def ListElements(elements):
    return _diveCL.ListElements(elements)

def ListVolumes(elements):
    return _diveCL.ListVolumes(elements)

def ListDofMeshIndices(dofMeshIndices):
    return _diveCL.ListDofMeshIndices(dofMeshIndices)

def ListNodeMeshIndices(nodeMeshIndices):
    return _diveCL.ListNodeMeshIndices(nodeMeshIndices)

def ListDirichletMeshIndices(dirichletMeshIndices):
    return _diveCL.ListDirichletMeshIndices(dirichletMeshIndices)
class vecNodes(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _diveCL.vecNodes_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _diveCL.vecNodes___nonzero__(self)

    def __bool__(self):
        return _diveCL.vecNodes___bool__(self)

    def __len__(self):
        return _diveCL.vecNodes___len__(self)

    def __getslice__(self, i, j):
        return _diveCL.vecNodes___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _diveCL.vecNodes___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _diveCL.vecNodes___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _diveCL.vecNodes___delitem__(self, *args)

    def __getitem__(self, *args):
        return _diveCL.vecNodes___getitem__(self, *args)

    def __setitem__(self, *args):
        return _diveCL.vecNodes___setitem__(self, *args)

    def pop(self):
        return _diveCL.vecNodes_pop(self)

    def append(self, x):
        return _diveCL.vecNodes_append(self, x)

    def empty(self):
        return _diveCL.vecNodes_empty(self)

    def size(self):
        return _diveCL.vecNodes_size(self)

    def swap(self, v):
        return _diveCL.vecNodes_swap(self, v)

    def begin(self):
        return _diveCL.vecNodes_begin(self)

    def end(self):
        return _diveCL.vecNodes_end(self)

    def rbegin(self):
        return _diveCL.vecNodes_rbegin(self)

    def rend(self):
        return _diveCL.vecNodes_rend(self)

    def clear(self):
        return _diveCL.vecNodes_clear(self)

    def get_allocator(self):
        return _diveCL.vecNodes_get_allocator(self)

    def pop_back(self):
        return _diveCL.vecNodes_pop_back(self)

    def erase(self, *args):
        return _diveCL.vecNodes_erase(self, *args)

    def __init__(self, *args):
        _diveCL.vecNodes_swiginit(self, _diveCL.new_vecNodes(*args))

    def push_back(self, x):
        return _diveCL.vecNodes_push_back(self, x)

    def front(self):
        return _diveCL.vecNodes_front(self)

    def back(self):
        return _diveCL.vecNodes_back(self)

    def assign(self, n, x):
        return _diveCL.vecNodes_assign(self, n, x)

    def resize(self, *args):
        return _diveCL.vecNodes_resize(self, *args)

    def insert(self, *args):
        return _diveCL.vecNodes_insert(self, *args)

    def reserve(self, n):
        return _diveCL.vecNodes_reserve(self, n)

    def capacity(self):
        return _diveCL.vecNodes_capacity(self)

    def __str__(self):
        return _diveCL.vecNodes___str__(self)
    __swig_destroy__ = _diveCL.delete_vecNodes

# Register vecNodes in _diveCL:
_diveCL.vecNodes_swigregister(vecNodes)
class INode(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _diveCL.delete_INode

    def GetPoint(self):
        return _diveCL.INode_GetPoint(self)

    def GetValue(self, *args):
        return _diveCL.INode_GetValue(self, *args)

    def GetTag(self):
        return _diveCL.INode_GetTag(self)

    def SetPoint(self, *args):
        return _diveCL.INode_SetPoint(self, *args)

    def SetValue(self, *args):
        return _diveCL.INode_SetValue(self, *args)

    def SetTag(self, tag):
        return _diveCL.INode_SetTag(self, tag)

    def SetNodeIndex(self, index):
        return _diveCL.INode_SetNodeIndex(self, index)

    def SetNumberDof(self, numberDof):
        return _diveCL.INode_SetNumberDof(self, numberDof)

    def GetNodeIndex(self):
        return _diveCL.INode_GetNodeIndex(self)

    def GetNumberDof(self):
        return _diveCL.INode_GetNumberDof(self)

    def GetElements(self):
        return _diveCL.INode_GetElements(self)

    def AddElement(self, element):
        return _diveCL.INode_AddElement(self, element)

    def RemoveElement(self, element):
        return _diveCL.INode_RemoveElement(self, element)

    def ClearElements(self):
        return _diveCL.INode_ClearElements(self)

# Register INode in _diveCL:
_diveCL.INode_swigregister(INode)
headerNode = cvar.headerNode


def CreateNode(*args):
    return _diveCL.CreateNode(*args)

def CreateNodes(input, dim):
    return _diveCL.CreateNodes(input, dim)
class Node(INode):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _diveCL.delete_Node

    @staticmethod
    def Create():
        return _diveCL.Node_Create()

    def GetPtr(self, *args):
        return _diveCL.Node_GetPtr(self, *args)

    def GetPoint(self):
        return _diveCL.Node_GetPoint(self)

    def GetValue(self, *args):
        return _diveCL.Node_GetValue(self, *args)

    def GetTag(self):
        return _diveCL.Node_GetTag(self)

    def SetPoint(self, *args):
        return _diveCL.Node_SetPoint(self, *args)

    def SetValue(self, *args):
        return _diveCL.Node_SetValue(self, *args)

    def SetTag(self, tag):
        return _diveCL.Node_SetTag(self, tag)

    def SetNodeIndex(self, index):
        return _diveCL.Node_SetNodeIndex(self, index)

    def SetNumberDof(self, numberDof):
        return _diveCL.Node_SetNumberDof(self, numberDof)

    def GetNodeIndex(self):
        return _diveCL.Node_GetNodeIndex(self)

    def GetNumberDof(self):
        return _diveCL.Node_GetNumberDof(self)

    def GetElements(self):
        return _diveCL.Node_GetElements(self)

    def AddElement(self, element):
        return _diveCL.Node_AddElement(self, element)

    def RemoveElement(self, element):
        return _diveCL.Node_RemoveElement(self, element)

    def ClearElements(self):
        return _diveCL.Node_ClearElements(self)

# Register Node in _diveCL:
_diveCL.Node_swigregister(Node)


def AddVecNodes(self, nodes):
    for node in nodes:
        self.append(node)
    return self

def CompVecNodes(self, other):
    return self.GetTag() == other.GetTag()

def HashVecNodes(self):
    return hash(self.GetTag())

vecNodes.__add__ = AddVecNodes
vecNodes.__eq__ = CompVecNodes
vecNodes.__hash__ = HashVecNodes


class vecElements(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _diveCL.vecElements_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _diveCL.vecElements___nonzero__(self)

    def __bool__(self):
        return _diveCL.vecElements___bool__(self)

    def __len__(self):
        return _diveCL.vecElements___len__(self)

    def __getslice__(self, i, j):
        return _diveCL.vecElements___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _diveCL.vecElements___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _diveCL.vecElements___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _diveCL.vecElements___delitem__(self, *args)

    def __getitem__(self, *args):
        return _diveCL.vecElements___getitem__(self, *args)

    def __setitem__(self, *args):
        return _diveCL.vecElements___setitem__(self, *args)

    def pop(self):
        return _diveCL.vecElements_pop(self)

    def append(self, x):
        return _diveCL.vecElements_append(self, x)

    def empty(self):
        return _diveCL.vecElements_empty(self)

    def size(self):
        return _diveCL.vecElements_size(self)

    def swap(self, v):
        return _diveCL.vecElements_swap(self, v)

    def begin(self):
        return _diveCL.vecElements_begin(self)

    def end(self):
        return _diveCL.vecElements_end(self)

    def rbegin(self):
        return _diveCL.vecElements_rbegin(self)

    def rend(self):
        return _diveCL.vecElements_rend(self)

    def clear(self):
        return _diveCL.vecElements_clear(self)

    def get_allocator(self):
        return _diveCL.vecElements_get_allocator(self)

    def pop_back(self):
        return _diveCL.vecElements_pop_back(self)

    def erase(self, *args):
        return _diveCL.vecElements_erase(self, *args)

    def __init__(self, *args):
        _diveCL.vecElements_swiginit(self, _diveCL.new_vecElements(*args))

    def push_back(self, x):
        return _diveCL.vecElements_push_back(self, x)

    def front(self):
        return _diveCL.vecElements_front(self)

    def back(self):
        return _diveCL.vecElements_back(self)

    def assign(self, n, x):
        return _diveCL.vecElements_assign(self, n, x)

    def resize(self, *args):
        return _diveCL.vecElements_resize(self, *args)

    def insert(self, *args):
        return _diveCL.vecElements_insert(self, *args)

    def reserve(self, n):
        return _diveCL.vecElements_reserve(self, n)

    def capacity(self):
        return _diveCL.vecElements_capacity(self)

    def __str__(self):
        return _diveCL.vecElements___str__(self)
    __swig_destroy__ = _diveCL.delete_vecElements

# Register vecElements in _diveCL:
_diveCL.vecElements_swigregister(vecElements)
class IntegralAreaHelper(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    dim1 = property(_diveCL.IntegralAreaHelper_dim1_get, _diveCL.IntegralAreaHelper_dim1_set)
    dim2 = property(_diveCL.IntegralAreaHelper_dim2_get, _diveCL.IntegralAreaHelper_dim2_set)
    dim3 = property(_diveCL.IntegralAreaHelper_dim3_get, _diveCL.IntegralAreaHelper_dim3_set)
    coord3 = property(_diveCL.IntegralAreaHelper_coord3_get, _diveCL.IntegralAreaHelper_coord3_set)

    def __init__(self):
        _diveCL.IntegralAreaHelper_swiginit(self, _diveCL.new_IntegralAreaHelper())
    __swig_destroy__ = _diveCL.delete_IntegralAreaHelper

# Register IntegralAreaHelper in _diveCL:
_diveCL.IntegralAreaHelper_swigregister(IntegralAreaHelper)
linear = cvar.linear
quadratic = cvar.quadratic
element_hexa8 = cvar.element_hexa8
element_hexa20 = cvar.element_hexa20

class IntegralEdgeHelper(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    dim1 = property(_diveCL.IntegralEdgeHelper_dim1_get, _diveCL.IntegralEdgeHelper_dim1_set)
    dim2 = property(_diveCL.IntegralEdgeHelper_dim2_get, _diveCL.IntegralEdgeHelper_dim2_set)
    dim3 = property(_diveCL.IntegralEdgeHelper_dim3_get, _diveCL.IntegralEdgeHelper_dim3_set)
    coord2 = property(_diveCL.IntegralEdgeHelper_coord2_get, _diveCL.IntegralEdgeHelper_coord2_set)
    coord3 = property(_diveCL.IntegralEdgeHelper_coord3_get, _diveCL.IntegralEdgeHelper_coord3_set)

    def __init__(self):
        _diveCL.IntegralEdgeHelper_swiginit(self, _diveCL.new_IntegralEdgeHelper())
    __swig_destroy__ = _diveCL.delete_IntegralEdgeHelper

# Register IntegralEdgeHelper in _diveCL:
_diveCL.IntegralEdgeHelper_swigregister(IntegralEdgeHelper)
class IElement(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _diveCL.delete_IElement

    def u(self, *args):
        return _diveCL.IElement_u(self, *args)

    def du(self, *args):
        return _diveCL.IElement_du(self, *args)

    def J(self, *args):
        return _diveCL.IElement_J(self, *args)

    def InvJ(self, *args):
        return _diveCL.IElement_InvJ(self, *args)

    def N(self, *args):
        return _diveCL.IElement_N(self, *args)

    def dN(self, *args):
        return _diveCL.IElement_dN(self, *args)

    def DelA(self, local, dim1, dim2):
        return _diveCL.IElement_DelA(self, local, dim1, dim2)

    def DelL(self, local, dim1):
        return _diveCL.IElement_DelL(self, local, dim1)

    def DetJ(self, *args):
        return _diveCL.IElement_DetJ(self, *args)

    def Volume(self):
        return _diveCL.IElement_Volume(self)

    def Area(self, face):
        return _diveCL.IElement_Area(self, face)

    def Length(self, edge):
        return _diveCL.IElement_Length(self, edge)

    def Size(self):
        return _diveCL.IElement_Size(self)

    def LocalCoordinates(self, *args):
        return _diveCL.IElement_LocalCoordinates(self, *args)

    def GlobalCoordinates(self, *args):
        return _diveCL.IElement_GlobalCoordinates(self, *args)

    def GlobalDerivatives(self, local, dim):
        return _diveCL.IElement_GlobalDerivatives(self, local, dim)

    def GetNodeFace(self, faceIndex, nodeIndex):
        return _diveCL.IElement_GetNodeFace(self, faceIndex, nodeIndex)

    def GetNodeEdge(self, edgeIndex, nodeIndex):
        return _diveCL.IElement_GetNodeEdge(self, edgeIndex, nodeIndex)

    def GetNode(self, nodeIndex):
        return _diveCL.IElement_GetNode(self, nodeIndex)

    def GetNodes(self):
        return _diveCL.IElement_GetNodes(self)

    def GetOrder(self):
        return _diveCL.IElement_GetOrder(self)

    def GetParametric(self):
        return _diveCL.IElement_GetParametric(self)

    def GetType(self):
        return _diveCL.IElement_GetType(self)

    def GetNodeIndex(self, node):
        return _diveCL.IElement_GetNodeIndex(self, node)

    def GetNumberNodesFace(self, faceIndex):
        return _diveCL.IElement_GetNumberNodesFace(self, faceIndex)

    def GetNumberNodesEdge(self, edgeIndex):
        return _diveCL.IElement_GetNumberNodesEdge(self, edgeIndex)

    def GetNumberNodes(self):
        return _diveCL.IElement_GetNumberNodes(self)

    def GetNumberFaces(self):
        return _diveCL.IElement_GetNumberFaces(self)

    def GetNumberEdges(self):
        return _diveCL.IElement_GetNumberEdges(self)

    def GetDimension(self):
        return _diveCL.IElement_GetDimension(self)

    def GetCenter(self):
        return _diveCL.IElement_GetCenter(self)

    def GetTag(self):
        return _diveCL.IElement_GetTag(self)

    def GetMaterial(self):
        return _diveCL.IElement_GetMaterial(self)

    def GetElementIndex(self):
        return _diveCL.IElement_GetElementIndex(self)

    def GetNumberDof(self):
        return _diveCL.IElement_GetNumberDof(self)

    def IntegralVolume(self):
        return _diveCL.IElement_IntegralVolume(self)

    def IntegralArea(self):
        return _diveCL.IElement_IntegralArea(self)

    def IntegralEdge(self):
        return _diveCL.IElement_IntegralEdge(self)

    def GetIntegralAreaHelper(self, faceIndex):
        return _diveCL.IElement_GetIntegralAreaHelper(self, faceIndex)

    def GetIntegralEdgeHelper(self, edgeIndex):
        return _diveCL.IElement_GetIntegralEdgeHelper(self, edgeIndex)

    def SetNumberDof(self, numberDof):
        return _diveCL.IElement_SetNumberDof(self, numberDof)

    def SetNode(self, nodeIndex, node):
        return _diveCL.IElement_SetNode(self, nodeIndex, node)

    def SetOrder(self, order):
        return _diveCL.IElement_SetOrder(self, order)

    def SetParametric(self, order):
        return _diveCL.IElement_SetParametric(self, order)

    def SetTag(self, elementTag):
        return _diveCL.IElement_SetTag(self, elementTag)

    def SetMaterial(self, material):
        return _diveCL.IElement_SetMaterial(self, material)

    def SetElementIndex(self, index):
        return _diveCL.IElement_SetElementIndex(self, index)

    def IsUsed(self, node):
        return _diveCL.IElement_IsUsed(self, node)

    def InitializeCache(self):
        return _diveCL.IElement_InitializeCache(self)

# Register IElement in _diveCL:
_diveCL.IElement_swigregister(IElement)
nodeIndexInvalid = cvar.nodeIndexInvalid


def CreateElementHexa(*args):
    return _diveCL.CreateElementHexa(*args)
class ElementHexa(IElement):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _diveCL.delete_ElementHexa

    @staticmethod
    def Create():
        return _diveCL.ElementHexa_Create()

    def GetPtr(self, *args):
        return _diveCL.ElementHexa_GetPtr(self, *args)

    def u(self, *args):
        return _diveCL.ElementHexa_u(self, *args)

    def du(self, *args):
        return _diveCL.ElementHexa_du(self, *args)

    def J(self, *args):
        return _diveCL.ElementHexa_J(self, *args)

    def InvJ(self, *args):
        return _diveCL.ElementHexa_InvJ(self, *args)

    def N(self, *args):
        return _diveCL.ElementHexa_N(self, *args)

    def dN(self, *args):
        return _diveCL.ElementHexa_dN(self, *args)

    def DelA(self, local, dim1, dim2):
        return _diveCL.ElementHexa_DelA(self, local, dim1, dim2)

    def DelL(self, local, dim1):
        return _diveCL.ElementHexa_DelL(self, local, dim1)

    def DetJ(self, *args):
        return _diveCL.ElementHexa_DetJ(self, *args)

    def Volume(self):
        return _diveCL.ElementHexa_Volume(self)

    def Area(self, face):
        return _diveCL.ElementHexa_Area(self, face)

    def Length(self, edge):
        return _diveCL.ElementHexa_Length(self, edge)

    def Size(self):
        return _diveCL.ElementHexa_Size(self)

    def LocalCoordinates(self, *args):
        return _diveCL.ElementHexa_LocalCoordinates(self, *args)

    def GlobalCoordinates(self, *args):
        return _diveCL.ElementHexa_GlobalCoordinates(self, *args)

    def GlobalDerivatives(self, local, dim):
        return _diveCL.ElementHexa_GlobalDerivatives(self, local, dim)

    def GetNodeFace(self, faceNumber, nodeNumber):
        return _diveCL.ElementHexa_GetNodeFace(self, faceNumber, nodeNumber)

    def GetNodeEdge(self, edgeNumber, nodeNumber):
        return _diveCL.ElementHexa_GetNodeEdge(self, edgeNumber, nodeNumber)

    def GetNode(self, nodeNumber):
        return _diveCL.ElementHexa_GetNode(self, nodeNumber)

    def GetNodes(self):
        return _diveCL.ElementHexa_GetNodes(self)

    def GetOrder(self):
        return _diveCL.ElementHexa_GetOrder(self)

    def GetParametric(self):
        return _diveCL.ElementHexa_GetParametric(self)

    def GetType(self):
        return _diveCL.ElementHexa_GetType(self)

    def GetNodeIndex(self, node):
        return _diveCL.ElementHexa_GetNodeIndex(self, node)

    def GetNumberNodesFace(self, faceNumber):
        return _diveCL.ElementHexa_GetNumberNodesFace(self, faceNumber)

    def GetNumberNodesEdge(self, edgeNode):
        return _diveCL.ElementHexa_GetNumberNodesEdge(self, edgeNode)

    def GetNumberNodes(self):
        return _diveCL.ElementHexa_GetNumberNodes(self)

    def GetNumberFaces(self):
        return _diveCL.ElementHexa_GetNumberFaces(self)

    def GetNumberEdges(self):
        return _diveCL.ElementHexa_GetNumberEdges(self)

    def GetDimension(self):
        return _diveCL.ElementHexa_GetDimension(self)

    def GetCenter(self):
        return _diveCL.ElementHexa_GetCenter(self)

    def GetTag(self):
        return _diveCL.ElementHexa_GetTag(self)

    def GetMaterial(self):
        return _diveCL.ElementHexa_GetMaterial(self)

    def GetElementIndex(self):
        return _diveCL.ElementHexa_GetElementIndex(self)

    def GetNumberDof(self):
        return _diveCL.ElementHexa_GetNumberDof(self)

    def IntegralVolume(self):
        return _diveCL.ElementHexa_IntegralVolume(self)

    def IntegralArea(self):
        return _diveCL.ElementHexa_IntegralArea(self)

    def IntegralEdge(self):
        return _diveCL.ElementHexa_IntegralEdge(self)

    def GetIntegralAreaHelper(self, faceIndex):
        return _diveCL.ElementHexa_GetIntegralAreaHelper(self, faceIndex)

    def GetIntegralEdgeHelper(self, edgeIndex):
        return _diveCL.ElementHexa_GetIntegralEdgeHelper(self, edgeIndex)

    def SetNumberDof(self, numberDof):
        return _diveCL.ElementHexa_SetNumberDof(self, numberDof)

    def SetNode(self, nodeNumber, node):
        return _diveCL.ElementHexa_SetNode(self, nodeNumber, node)

    def SetOrder(self, order):
        return _diveCL.ElementHexa_SetOrder(self, order)

    def SetParametric(self, order):
        return _diveCL.ElementHexa_SetParametric(self, order)

    def SetTag(self, elementTag):
        return _diveCL.ElementHexa_SetTag(self, elementTag)

    def SetMaterial(self, material):
        return _diveCL.ElementHexa_SetMaterial(self, material)

    def SetElementIndex(self, index):
        return _diveCL.ElementHexa_SetElementIndex(self, index)

    def IsUsed(self, node):
        return _diveCL.ElementHexa_IsUsed(self, node)

    def InitializeCache(self):
        return _diveCL.ElementHexa_InitializeCache(self)
    linearFunctions_ = property(_diveCL.ElementHexa_linearFunctions__get, _diveCL.ElementHexa_linearFunctions__set)
    quadraticFunctions_ = property(_diveCL.ElementHexa_quadraticFunctions__get, _diveCL.ElementHexa_quadraticFunctions__set)

# Register ElementHexa in _diveCL:
_diveCL.ElementHexa_swigregister(ElementHexa)


def AddVecElements(self, elements):
    for element in elements:
        self.append(element)
    return self

def CompVecElements(self, other):
    return self.GetTag() == other.GetTag()

def HashVecElements(self):
    return hash(self.GetTag())

vecElements.__add__ = AddVecElements
vecElements.__eq__ = CompVecElements
vecElements.__hash__ = HashVecElements


class vecDirichlets(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _diveCL.vecDirichlets_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _diveCL.vecDirichlets___nonzero__(self)

    def __bool__(self):
        return _diveCL.vecDirichlets___bool__(self)

    def __len__(self):
        return _diveCL.vecDirichlets___len__(self)

    def __getslice__(self, i, j):
        return _diveCL.vecDirichlets___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _diveCL.vecDirichlets___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _diveCL.vecDirichlets___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _diveCL.vecDirichlets___delitem__(self, *args)

    def __getitem__(self, *args):
        return _diveCL.vecDirichlets___getitem__(self, *args)

    def __setitem__(self, *args):
        return _diveCL.vecDirichlets___setitem__(self, *args)

    def pop(self):
        return _diveCL.vecDirichlets_pop(self)

    def append(self, x):
        return _diveCL.vecDirichlets_append(self, x)

    def empty(self):
        return _diveCL.vecDirichlets_empty(self)

    def size(self):
        return _diveCL.vecDirichlets_size(self)

    def swap(self, v):
        return _diveCL.vecDirichlets_swap(self, v)

    def begin(self):
        return _diveCL.vecDirichlets_begin(self)

    def end(self):
        return _diveCL.vecDirichlets_end(self)

    def rbegin(self):
        return _diveCL.vecDirichlets_rbegin(self)

    def rend(self):
        return _diveCL.vecDirichlets_rend(self)

    def clear(self):
        return _diveCL.vecDirichlets_clear(self)

    def get_allocator(self):
        return _diveCL.vecDirichlets_get_allocator(self)

    def pop_back(self):
        return _diveCL.vecDirichlets_pop_back(self)

    def erase(self, *args):
        return _diveCL.vecDirichlets_erase(self, *args)

    def __init__(self, *args):
        _diveCL.vecDirichlets_swiginit(self, _diveCL.new_vecDirichlets(*args))

    def push_back(self, x):
        return _diveCL.vecDirichlets_push_back(self, x)

    def front(self):
        return _diveCL.vecDirichlets_front(self)

    def back(self):
        return _diveCL.vecDirichlets_back(self)

    def assign(self, n, x):
        return _diveCL.vecDirichlets_assign(self, n, x)

    def resize(self, *args):
        return _diveCL.vecDirichlets_resize(self, *args)

    def insert(self, *args):
        return _diveCL.vecDirichlets_insert(self, *args)

    def reserve(self, n):
        return _diveCL.vecDirichlets_reserve(self, n)

    def capacity(self):
        return _diveCL.vecDirichlets_capacity(self)
    __swig_destroy__ = _diveCL.delete_vecDirichlets

# Register vecDirichlets in _diveCL:
_diveCL.vecDirichlets_swigregister(vecDirichlets)
class vecLoads(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _diveCL.vecLoads_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _diveCL.vecLoads___nonzero__(self)

    def __bool__(self):
        return _diveCL.vecLoads___bool__(self)

    def __len__(self):
        return _diveCL.vecLoads___len__(self)

    def __getslice__(self, i, j):
        return _diveCL.vecLoads___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _diveCL.vecLoads___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _diveCL.vecLoads___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _diveCL.vecLoads___delitem__(self, *args)

    def __getitem__(self, *args):
        return _diveCL.vecLoads___getitem__(self, *args)

    def __setitem__(self, *args):
        return _diveCL.vecLoads___setitem__(self, *args)

    def pop(self):
        return _diveCL.vecLoads_pop(self)

    def append(self, x):
        return _diveCL.vecLoads_append(self, x)

    def empty(self):
        return _diveCL.vecLoads_empty(self)

    def size(self):
        return _diveCL.vecLoads_size(self)

    def swap(self, v):
        return _diveCL.vecLoads_swap(self, v)

    def begin(self):
        return _diveCL.vecLoads_begin(self)

    def end(self):
        return _diveCL.vecLoads_end(self)

    def rbegin(self):
        return _diveCL.vecLoads_rbegin(self)

    def rend(self):
        return _diveCL.vecLoads_rend(self)

    def clear(self):
        return _diveCL.vecLoads_clear(self)

    def get_allocator(self):
        return _diveCL.vecLoads_get_allocator(self)

    def pop_back(self):
        return _diveCL.vecLoads_pop_back(self)

    def erase(self, *args):
        return _diveCL.vecLoads_erase(self, *args)

    def __init__(self, *args):
        _diveCL.vecLoads_swiginit(self, _diveCL.new_vecLoads(*args))

    def push_back(self, x):
        return _diveCL.vecLoads_push_back(self, x)

    def front(self):
        return _diveCL.vecLoads_front(self)

    def back(self):
        return _diveCL.vecLoads_back(self)

    def assign(self, n, x):
        return _diveCL.vecLoads_assign(self, n, x)

    def resize(self, *args):
        return _diveCL.vecLoads_resize(self, *args)

    def insert(self, *args):
        return _diveCL.vecLoads_insert(self, *args)

    def reserve(self, n):
        return _diveCL.vecLoads_reserve(self, n)

    def capacity(self):
        return _diveCL.vecLoads_capacity(self)
    __swig_destroy__ = _diveCL.delete_vecLoads

# Register vecLoads in _diveCL:
_diveCL.vecLoads_swigregister(vecLoads)
class IDirichlet(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _diveCL.delete_IDirichlet

    def GetType(self):
        return _diveCL.IDirichlet_GetType(self)

    def GetNode(self):
        return _diveCL.IDirichlet_GetNode(self)

    def GetDofIndex(self):
        return _diveCL.IDirichlet_GetDofIndex(self)

    def GetValue(self):
        return _diveCL.IDirichlet_GetValue(self)

    def SetNode(self, node):
        return _diveCL.IDirichlet_SetNode(self, node)

    def SetDofIndex(self, dofIndex):
        return _diveCL.IDirichlet_SetDofIndex(self, dofIndex)

    def SetValue(self, value):
        return _diveCL.IDirichlet_SetValue(self, value)

# Register IDirichlet in _diveCL:
_diveCL.IDirichlet_swigregister(IDirichlet)
load_dirichlet = cvar.load_dirichlet
load_distributedVolume = cvar.load_distributedVolume
load_distributedFace = cvar.load_distributedFace
load_distributedEdge = cvar.load_distributedEdge
load_node = cvar.load_node
load_initialStrain = cvar.load_initialStrain
load_temperatureStrain = cvar.load_temperatureStrain
load_heatSourceVolume = cvar.load_heatSourceVolume
load_heatConductionFace = cvar.load_heatConductionFace
load_couplingEquation = cvar.load_couplingEquation

class ILoad(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _diveCL.delete_ILoad

    def GetType(self):
        return _diveCL.ILoad_GetType(self)

# Register ILoad in _diveCL:
_diveCL.ILoad_swigregister(ILoad)
class ILoadDistributedVolume(ILoad):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _diveCL.delete_ILoadDistributedVolume

    def GetElement(self):
        return _diveCL.ILoadDistributedVolume_GetElement(self)

    def GetValue(self, point):
        return _diveCL.ILoadDistributedVolume_GetValue(self, point)

    def SetElement(self, element):
        return _diveCL.ILoadDistributedVolume_SetElement(self, element)

    def SetValue(self, value):
        return _diveCL.ILoadDistributedVolume_SetValue(self, value)

# Register ILoadDistributedVolume in _diveCL:
_diveCL.ILoadDistributedVolume_swigregister(ILoadDistributedVolume)
class ILoadDistributedFace(ILoad):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _diveCL.delete_ILoadDistributedFace

    def GetElement(self):
        return _diveCL.ILoadDistributedFace_GetElement(self)

    def GetFaceIndex(self):
        return _diveCL.ILoadDistributedFace_GetFaceIndex(self)

    def GetValue(self, point):
        return _diveCL.ILoadDistributedFace_GetValue(self, point)

    def SetElement(self, element):
        return _diveCL.ILoadDistributedFace_SetElement(self, element)

    def SetFaceIndex(self, faceIndex):
        return _diveCL.ILoadDistributedFace_SetFaceIndex(self, faceIndex)

    def SetValue(self, value):
        return _diveCL.ILoadDistributedFace_SetValue(self, value)

# Register ILoadDistributedFace in _diveCL:
_diveCL.ILoadDistributedFace_swigregister(ILoadDistributedFace)
class ILoadDistributedEdge(ILoad):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _diveCL.delete_ILoadDistributedEdge

    def GetElement(self):
        return _diveCL.ILoadDistributedEdge_GetElement(self)

    def GetEdgeIndex(self):
        return _diveCL.ILoadDistributedEdge_GetEdgeIndex(self)

    def GetValue(self, point):
        return _diveCL.ILoadDistributedEdge_GetValue(self, point)

    def SetElement(self, element):
        return _diveCL.ILoadDistributedEdge_SetElement(self, element)

    def SetEdgeIndex(self, edgeIndex):
        return _diveCL.ILoadDistributedEdge_SetEdgeIndex(self, edgeIndex)

    def SetValue(self, value):
        return _diveCL.ILoadDistributedEdge_SetValue(self, value)

# Register ILoadDistributedEdge in _diveCL:
_diveCL.ILoadDistributedEdge_swigregister(ILoadDistributedEdge)
class ILoadNode(ILoad):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _diveCL.delete_ILoadNode

    def GetNode(self):
        return _diveCL.ILoadNode_GetNode(self)

    def GetValue(self):
        return _diveCL.ILoadNode_GetValue(self)

    def SetNode(self, node):
        return _diveCL.ILoadNode_SetNode(self, node)

    def SetValue(self, value):
        return _diveCL.ILoadNode_SetValue(self, value)

# Register ILoadNode in _diveCL:
_diveCL.ILoadNode_swigregister(ILoadNode)

def CreateDirichletByValue(node, dofIndex, value):
    return _diveCL.CreateDirichletByValue(node, dofIndex, value)

def CreateDirichletByFunction(node, dofIndex, function):
    return _diveCL.CreateDirichletByFunction(node, dofIndex, function)
class Dirichlet(IDirichlet):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _diveCL.delete_Dirichlet

    @staticmethod
    def Create():
        return _diveCL.Dirichlet_Create()

    def GetPtr(self, *args):
        return _diveCL.Dirichlet_GetPtr(self, *args)

    def GetType(self):
        return _diveCL.Dirichlet_GetType(self)

    def GetNode(self):
        return _diveCL.Dirichlet_GetNode(self)

    def GetDofIndex(self):
        return _diveCL.Dirichlet_GetDofIndex(self)

    def GetValue(self):
        return _diveCL.Dirichlet_GetValue(self)

    def SetNode(self, node):
        return _diveCL.Dirichlet_SetNode(self, node)

    def SetDofIndex(self, dofIndex):
        return _diveCL.Dirichlet_SetDofIndex(self, dofIndex)

    def SetValue(self, value):
        return _diveCL.Dirichlet_SetValue(self, value)

# Register Dirichlet in _diveCL:
_diveCL.Dirichlet_swigregister(Dirichlet)

def CreateLoadDistributedVolume(element, value):
    return _diveCL.CreateLoadDistributedVolume(element, value)
class LoadDistributedVolume(ILoadDistributedVolume):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _diveCL.delete_LoadDistributedVolume

    @staticmethod
    def Create():
        return _diveCL.LoadDistributedVolume_Create()

    def GetPtr(self, *args):
        return _diveCL.LoadDistributedVolume_GetPtr(self, *args)

    def GetType(self):
        return _diveCL.LoadDistributedVolume_GetType(self)

    def GetElement(self):
        return _diveCL.LoadDistributedVolume_GetElement(self)

    def GetValue(self, point):
        return _diveCL.LoadDistributedVolume_GetValue(self, point)

    def SetElement(self, element):
        return _diveCL.LoadDistributedVolume_SetElement(self, element)

    def SetValue(self, value):
        return _diveCL.LoadDistributedVolume_SetValue(self, value)

# Register LoadDistributedVolume in _diveCL:
_diveCL.LoadDistributedVolume_swigregister(LoadDistributedVolume)

def CreateLoadDistributedFace(element, faceIndex, value):
    return _diveCL.CreateLoadDistributedFace(element, faceIndex, value)
class LoadDistributedFace(ILoadDistributedFace):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _diveCL.delete_LoadDistributedFace

    @staticmethod
    def Create():
        return _diveCL.LoadDistributedFace_Create()

    def GetPtr(self, *args):
        return _diveCL.LoadDistributedFace_GetPtr(self, *args)

    def GetType(self):
        return _diveCL.LoadDistributedFace_GetType(self)

    def GetElement(self):
        return _diveCL.LoadDistributedFace_GetElement(self)

    def GetValue(self, point):
        return _diveCL.LoadDistributedFace_GetValue(self, point)

    def GetFaceIndex(self):
        return _diveCL.LoadDistributedFace_GetFaceIndex(self)

    def SetElement(self, element):
        return _diveCL.LoadDistributedFace_SetElement(self, element)

    def SetFaceIndex(self, faceIndex):
        return _diveCL.LoadDistributedFace_SetFaceIndex(self, faceIndex)

    def SetValue(self, value):
        return _diveCL.LoadDistributedFace_SetValue(self, value)

# Register LoadDistributedFace in _diveCL:
_diveCL.LoadDistributedFace_swigregister(LoadDistributedFace)

def CreateLoadDistributedEdge(element, edgeIndex, value):
    return _diveCL.CreateLoadDistributedEdge(element, edgeIndex, value)
class LoadDistributedEdge(ILoadDistributedEdge):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _diveCL.delete_LoadDistributedEdge

    @staticmethod
    def Create():
        return _diveCL.LoadDistributedEdge_Create()

    def GetPtr(self, *args):
        return _diveCL.LoadDistributedEdge_GetPtr(self, *args)

    def GetType(self):
        return _diveCL.LoadDistributedEdge_GetType(self)

    def GetElement(self):
        return _diveCL.LoadDistributedEdge_GetElement(self)

    def GetValue(self, point):
        return _diveCL.LoadDistributedEdge_GetValue(self, point)

    def GetEdgeIndex(self):
        return _diveCL.LoadDistributedEdge_GetEdgeIndex(self)

    def SetElement(self, element):
        return _diveCL.LoadDistributedEdge_SetElement(self, element)

    def SetEdgeIndex(self, edgeIndex):
        return _diveCL.LoadDistributedEdge_SetEdgeIndex(self, edgeIndex)

    def SetValue(self, value):
        return _diveCL.LoadDistributedEdge_SetValue(self, value)

# Register LoadDistributedEdge in _diveCL:
_diveCL.LoadDistributedEdge_swigregister(LoadDistributedEdge)

def CreateLoadNode(node, value):
    return _diveCL.CreateLoadNode(node, value)
class LoadNode(ILoadNode):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _diveCL.delete_LoadNode

    @staticmethod
    def Create():
        return _diveCL.LoadNode_Create()

    def GetPtr(self, *args):
        return _diveCL.LoadNode_GetPtr(self, *args)

    def GetType(self):
        return _diveCL.LoadNode_GetType(self)

    def GetNode(self):
        return _diveCL.LoadNode_GetNode(self)

    def GetValue(self):
        return _diveCL.LoadNode_GetValue(self)

    def SetNode(self, node):
        return _diveCL.LoadNode_SetNode(self, node)

    def SetValue(self, value):
        return _diveCL.LoadNode_SetValue(self, value)

# Register LoadNode in _diveCL:
_diveCL.LoadNode_swigregister(LoadNode)
class vecMeshes(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _diveCL.vecMeshes_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _diveCL.vecMeshes___nonzero__(self)

    def __bool__(self):
        return _diveCL.vecMeshes___bool__(self)

    def __len__(self):
        return _diveCL.vecMeshes___len__(self)

    def __getslice__(self, i, j):
        return _diveCL.vecMeshes___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _diveCL.vecMeshes___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _diveCL.vecMeshes___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _diveCL.vecMeshes___delitem__(self, *args)

    def __getitem__(self, *args):
        return _diveCL.vecMeshes___getitem__(self, *args)

    def __setitem__(self, *args):
        return _diveCL.vecMeshes___setitem__(self, *args)

    def pop(self):
        return _diveCL.vecMeshes_pop(self)

    def append(self, x):
        return _diveCL.vecMeshes_append(self, x)

    def empty(self):
        return _diveCL.vecMeshes_empty(self)

    def size(self):
        return _diveCL.vecMeshes_size(self)

    def swap(self, v):
        return _diveCL.vecMeshes_swap(self, v)

    def begin(self):
        return _diveCL.vecMeshes_begin(self)

    def end(self):
        return _diveCL.vecMeshes_end(self)

    def rbegin(self):
        return _diveCL.vecMeshes_rbegin(self)

    def rend(self):
        return _diveCL.vecMeshes_rend(self)

    def clear(self):
        return _diveCL.vecMeshes_clear(self)

    def get_allocator(self):
        return _diveCL.vecMeshes_get_allocator(self)

    def pop_back(self):
        return _diveCL.vecMeshes_pop_back(self)

    def erase(self, *args):
        return _diveCL.vecMeshes_erase(self, *args)

    def __init__(self, *args):
        _diveCL.vecMeshes_swiginit(self, _diveCL.new_vecMeshes(*args))

    def push_back(self, x):
        return _diveCL.vecMeshes_push_back(self, x)

    def front(self):
        return _diveCL.vecMeshes_front(self)

    def back(self):
        return _diveCL.vecMeshes_back(self)

    def assign(self, n, x):
        return _diveCL.vecMeshes_assign(self, n, x)

    def resize(self, *args):
        return _diveCL.vecMeshes_resize(self, *args)

    def insert(self, *args):
        return _diveCL.vecMeshes_insert(self, *args)

    def reserve(self, n):
        return _diveCL.vecMeshes_reserve(self, n)

    def capacity(self):
        return _diveCL.vecMeshes_capacity(self)
    __swig_destroy__ = _diveCL.delete_vecMeshes

# Register vecMeshes in _diveCL:
_diveCL.vecMeshes_swigregister(vecMeshes)
class vecDofMeshIndices(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _diveCL.vecDofMeshIndices_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _diveCL.vecDofMeshIndices___nonzero__(self)

    def __bool__(self):
        return _diveCL.vecDofMeshIndices___bool__(self)

    def __len__(self):
        return _diveCL.vecDofMeshIndices___len__(self)

    def __getslice__(self, i, j):
        return _diveCL.vecDofMeshIndices___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _diveCL.vecDofMeshIndices___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _diveCL.vecDofMeshIndices___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _diveCL.vecDofMeshIndices___delitem__(self, *args)

    def __getitem__(self, *args):
        return _diveCL.vecDofMeshIndices___getitem__(self, *args)

    def __setitem__(self, *args):
        return _diveCL.vecDofMeshIndices___setitem__(self, *args)

    def pop(self):
        return _diveCL.vecDofMeshIndices_pop(self)

    def append(self, x):
        return _diveCL.vecDofMeshIndices_append(self, x)

    def empty(self):
        return _diveCL.vecDofMeshIndices_empty(self)

    def size(self):
        return _diveCL.vecDofMeshIndices_size(self)

    def swap(self, v):
        return _diveCL.vecDofMeshIndices_swap(self, v)

    def begin(self):
        return _diveCL.vecDofMeshIndices_begin(self)

    def end(self):
        return _diveCL.vecDofMeshIndices_end(self)

    def rbegin(self):
        return _diveCL.vecDofMeshIndices_rbegin(self)

    def rend(self):
        return _diveCL.vecDofMeshIndices_rend(self)

    def clear(self):
        return _diveCL.vecDofMeshIndices_clear(self)

    def get_allocator(self):
        return _diveCL.vecDofMeshIndices_get_allocator(self)

    def pop_back(self):
        return _diveCL.vecDofMeshIndices_pop_back(self)

    def erase(self, *args):
        return _diveCL.vecDofMeshIndices_erase(self, *args)

    def __init__(self, *args):
        _diveCL.vecDofMeshIndices_swiginit(self, _diveCL.new_vecDofMeshIndices(*args))

    def push_back(self, x):
        return _diveCL.vecDofMeshIndices_push_back(self, x)

    def front(self):
        return _diveCL.vecDofMeshIndices_front(self)

    def back(self):
        return _diveCL.vecDofMeshIndices_back(self)

    def assign(self, n, x):
        return _diveCL.vecDofMeshIndices_assign(self, n, x)

    def resize(self, *args):
        return _diveCL.vecDofMeshIndices_resize(self, *args)

    def insert(self, *args):
        return _diveCL.vecDofMeshIndices_insert(self, *args)

    def reserve(self, n):
        return _diveCL.vecDofMeshIndices_reserve(self, n)

    def capacity(self):
        return _diveCL.vecDofMeshIndices_capacity(self)

    def __str__(self):
        return _diveCL.vecDofMeshIndices___str__(self)
    __swig_destroy__ = _diveCL.delete_vecDofMeshIndices

# Register vecDofMeshIndices in _diveCL:
_diveCL.vecDofMeshIndices_swigregister(vecDofMeshIndices)
class vecNodeMeshIndices(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _diveCL.vecNodeMeshIndices_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _diveCL.vecNodeMeshIndices___nonzero__(self)

    def __bool__(self):
        return _diveCL.vecNodeMeshIndices___bool__(self)

    def __len__(self):
        return _diveCL.vecNodeMeshIndices___len__(self)

    def __getslice__(self, i, j):
        return _diveCL.vecNodeMeshIndices___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _diveCL.vecNodeMeshIndices___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _diveCL.vecNodeMeshIndices___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _diveCL.vecNodeMeshIndices___delitem__(self, *args)

    def __getitem__(self, *args):
        return _diveCL.vecNodeMeshIndices___getitem__(self, *args)

    def __setitem__(self, *args):
        return _diveCL.vecNodeMeshIndices___setitem__(self, *args)

    def pop(self):
        return _diveCL.vecNodeMeshIndices_pop(self)

    def append(self, x):
        return _diveCL.vecNodeMeshIndices_append(self, x)

    def empty(self):
        return _diveCL.vecNodeMeshIndices_empty(self)

    def size(self):
        return _diveCL.vecNodeMeshIndices_size(self)

    def swap(self, v):
        return _diveCL.vecNodeMeshIndices_swap(self, v)

    def begin(self):
        return _diveCL.vecNodeMeshIndices_begin(self)

    def end(self):
        return _diveCL.vecNodeMeshIndices_end(self)

    def rbegin(self):
        return _diveCL.vecNodeMeshIndices_rbegin(self)

    def rend(self):
        return _diveCL.vecNodeMeshIndices_rend(self)

    def clear(self):
        return _diveCL.vecNodeMeshIndices_clear(self)

    def get_allocator(self):
        return _diveCL.vecNodeMeshIndices_get_allocator(self)

    def pop_back(self):
        return _diveCL.vecNodeMeshIndices_pop_back(self)

    def erase(self, *args):
        return _diveCL.vecNodeMeshIndices_erase(self, *args)

    def __init__(self, *args):
        _diveCL.vecNodeMeshIndices_swiginit(self, _diveCL.new_vecNodeMeshIndices(*args))

    def push_back(self, x):
        return _diveCL.vecNodeMeshIndices_push_back(self, x)

    def front(self):
        return _diveCL.vecNodeMeshIndices_front(self)

    def back(self):
        return _diveCL.vecNodeMeshIndices_back(self)

    def assign(self, n, x):
        return _diveCL.vecNodeMeshIndices_assign(self, n, x)

    def resize(self, *args):
        return _diveCL.vecNodeMeshIndices_resize(self, *args)

    def insert(self, *args):
        return _diveCL.vecNodeMeshIndices_insert(self, *args)

    def reserve(self, n):
        return _diveCL.vecNodeMeshIndices_reserve(self, n)

    def capacity(self):
        return _diveCL.vecNodeMeshIndices_capacity(self)
    __swig_destroy__ = _diveCL.delete_vecNodeMeshIndices

# Register vecNodeMeshIndices in _diveCL:
_diveCL.vecNodeMeshIndices_swigregister(vecNodeMeshIndices)
class arrNodeMeshIndices(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _diveCL.arrNodeMeshIndices_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _diveCL.arrNodeMeshIndices___nonzero__(self)

    def __bool__(self):
        return _diveCL.arrNodeMeshIndices___bool__(self)

    def __len__(self):
        return _diveCL.arrNodeMeshIndices___len__(self)

    def __getslice__(self, i, j):
        return _diveCL.arrNodeMeshIndices___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _diveCL.arrNodeMeshIndices___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _diveCL.arrNodeMeshIndices___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _diveCL.arrNodeMeshIndices___delitem__(self, *args)

    def __getitem__(self, *args):
        return _diveCL.arrNodeMeshIndices___getitem__(self, *args)

    def __setitem__(self, *args):
        return _diveCL.arrNodeMeshIndices___setitem__(self, *args)

    def pop(self):
        return _diveCL.arrNodeMeshIndices_pop(self)

    def append(self, x):
        return _diveCL.arrNodeMeshIndices_append(self, x)

    def empty(self):
        return _diveCL.arrNodeMeshIndices_empty(self)

    def size(self):
        return _diveCL.arrNodeMeshIndices_size(self)

    def swap(self, v):
        return _diveCL.arrNodeMeshIndices_swap(self, v)

    def begin(self):
        return _diveCL.arrNodeMeshIndices_begin(self)

    def end(self):
        return _diveCL.arrNodeMeshIndices_end(self)

    def rbegin(self):
        return _diveCL.arrNodeMeshIndices_rbegin(self)

    def rend(self):
        return _diveCL.arrNodeMeshIndices_rend(self)

    def clear(self):
        return _diveCL.arrNodeMeshIndices_clear(self)

    def get_allocator(self):
        return _diveCL.arrNodeMeshIndices_get_allocator(self)

    def pop_back(self):
        return _diveCL.arrNodeMeshIndices_pop_back(self)

    def erase(self, *args):
        return _diveCL.arrNodeMeshIndices_erase(self, *args)

    def __init__(self, *args):
        _diveCL.arrNodeMeshIndices_swiginit(self, _diveCL.new_arrNodeMeshIndices(*args))

    def push_back(self, x):
        return _diveCL.arrNodeMeshIndices_push_back(self, x)

    def front(self):
        return _diveCL.arrNodeMeshIndices_front(self)

    def back(self):
        return _diveCL.arrNodeMeshIndices_back(self)

    def assign(self, n, x):
        return _diveCL.arrNodeMeshIndices_assign(self, n, x)

    def resize(self, *args):
        return _diveCL.arrNodeMeshIndices_resize(self, *args)

    def insert(self, *args):
        return _diveCL.arrNodeMeshIndices_insert(self, *args)

    def reserve(self, n):
        return _diveCL.arrNodeMeshIndices_reserve(self, n)

    def capacity(self):
        return _diveCL.arrNodeMeshIndices_capacity(self)

    def __str__(self):
        return _diveCL.arrNodeMeshIndices___str__(self)
    __swig_destroy__ = _diveCL.delete_arrNodeMeshIndices

# Register arrNodeMeshIndices in _diveCL:
_diveCL.arrNodeMeshIndices_swigregister(arrNodeMeshIndices)
class vecDirichletMeshIndices(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _diveCL.vecDirichletMeshIndices_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _diveCL.vecDirichletMeshIndices___nonzero__(self)

    def __bool__(self):
        return _diveCL.vecDirichletMeshIndices___bool__(self)

    def __len__(self):
        return _diveCL.vecDirichletMeshIndices___len__(self)

    def __getslice__(self, i, j):
        return _diveCL.vecDirichletMeshIndices___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _diveCL.vecDirichletMeshIndices___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _diveCL.vecDirichletMeshIndices___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _diveCL.vecDirichletMeshIndices___delitem__(self, *args)

    def __getitem__(self, *args):
        return _diveCL.vecDirichletMeshIndices___getitem__(self, *args)

    def __setitem__(self, *args):
        return _diveCL.vecDirichletMeshIndices___setitem__(self, *args)

    def pop(self):
        return _diveCL.vecDirichletMeshIndices_pop(self)

    def append(self, x):
        return _diveCL.vecDirichletMeshIndices_append(self, x)

    def empty(self):
        return _diveCL.vecDirichletMeshIndices_empty(self)

    def size(self):
        return _diveCL.vecDirichletMeshIndices_size(self)

    def swap(self, v):
        return _diveCL.vecDirichletMeshIndices_swap(self, v)

    def begin(self):
        return _diveCL.vecDirichletMeshIndices_begin(self)

    def end(self):
        return _diveCL.vecDirichletMeshIndices_end(self)

    def rbegin(self):
        return _diveCL.vecDirichletMeshIndices_rbegin(self)

    def rend(self):
        return _diveCL.vecDirichletMeshIndices_rend(self)

    def clear(self):
        return _diveCL.vecDirichletMeshIndices_clear(self)

    def get_allocator(self):
        return _diveCL.vecDirichletMeshIndices_get_allocator(self)

    def pop_back(self):
        return _diveCL.vecDirichletMeshIndices_pop_back(self)

    def erase(self, *args):
        return _diveCL.vecDirichletMeshIndices_erase(self, *args)

    def __init__(self, *args):
        _diveCL.vecDirichletMeshIndices_swiginit(self, _diveCL.new_vecDirichletMeshIndices(*args))

    def push_back(self, x):
        return _diveCL.vecDirichletMeshIndices_push_back(self, x)

    def front(self):
        return _diveCL.vecDirichletMeshIndices_front(self)

    def back(self):
        return _diveCL.vecDirichletMeshIndices_back(self)

    def assign(self, n, x):
        return _diveCL.vecDirichletMeshIndices_assign(self, n, x)

    def resize(self, *args):
        return _diveCL.vecDirichletMeshIndices_resize(self, *args)

    def insert(self, *args):
        return _diveCL.vecDirichletMeshIndices_insert(self, *args)

    def reserve(self, n):
        return _diveCL.vecDirichletMeshIndices_reserve(self, n)

    def capacity(self):
        return _diveCL.vecDirichletMeshIndices_capacity(self)

    def __str__(self):
        return _diveCL.vecDirichletMeshIndices___str__(self)
    __swig_destroy__ = _diveCL.delete_vecDirichletMeshIndices

# Register vecDirichletMeshIndices in _diveCL:
_diveCL.vecDirichletMeshIndices_swigregister(vecDirichletMeshIndices)
class DofMeshIndex(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    node = property(_diveCL.DofMeshIndex_node_get, _diveCL.DofMeshIndex_node_set)
    nodeIndex = property(_diveCL.DofMeshIndex_nodeIndex_get, _diveCL.DofMeshIndex_nodeIndex_set)
    dofIndex = property(_diveCL.DofMeshIndex_dofIndex_get, _diveCL.DofMeshIndex_dofIndex_set)
    globalIndex = property(_diveCL.DofMeshIndex_globalIndex_get, _diveCL.DofMeshIndex_globalIndex_set)
    dirichlet = property(_diveCL.DofMeshIndex_dirichlet_get, _diveCL.DofMeshIndex_dirichlet_set)
    dirichletIndex = property(_diveCL.DofMeshIndex_dirichletIndex_get, _diveCL.DofMeshIndex_dirichletIndex_set)
    dirichletReordered = property(_diveCL.DofMeshIndex_dirichletReordered_get, _diveCL.DofMeshIndex_dirichletReordered_set)

    def __init__(self):
        _diveCL.DofMeshIndex_swiginit(self, _diveCL.new_DofMeshIndex())
    __swig_destroy__ = _diveCL.delete_DofMeshIndex

# Register DofMeshIndex in _diveCL:
_diveCL.DofMeshIndex_swigregister(DofMeshIndex)
class NodeMeshIndex(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    index = property(_diveCL.NodeMeshIndex_index_get, _diveCL.NodeMeshIndex_index_set)
    node = property(_diveCL.NodeMeshIndex_node_get, _diveCL.NodeMeshIndex_node_set)
    dofIndices = property(_diveCL.NodeMeshIndex_dofIndices_get, _diveCL.NodeMeshIndex_dofIndices_set)

    def __init__(self):
        _diveCL.NodeMeshIndex_swiginit(self, _diveCL.new_NodeMeshIndex())
    __swig_destroy__ = _diveCL.delete_NodeMeshIndex

# Register NodeMeshIndex in _diveCL:
_diveCL.NodeMeshIndex_swigregister(NodeMeshIndex)
class DirichletMeshIndex(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    node = property(_diveCL.DirichletMeshIndex_node_get, _diveCL.DirichletMeshIndex_node_set)
    dofIndex = property(_diveCL.DirichletMeshIndex_dofIndex_get, _diveCL.DirichletMeshIndex_dofIndex_set)

    def __init__(self):
        _diveCL.DirichletMeshIndex_swiginit(self, _diveCL.new_DirichletMeshIndex())
    __swig_destroy__ = _diveCL.delete_DirichletMeshIndex

# Register DirichletMeshIndex in _diveCL:
_diveCL.DirichletMeshIndex_swigregister(DirichletMeshIndex)
class IMesh(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _diveCL.delete_IMesh

    def AddNode(self, node, status, IndexCheck=False):
        return _diveCL.IMesh_AddNode(self, node, status, IndexCheck)

    def AddElement(self, element, status, IndexCheck=False):
        return _diveCL.IMesh_AddElement(self, element, status, IndexCheck)

    def RemoveNode(self, *args):
        return _diveCL.IMesh_RemoveNode(self, *args)

    def RemoveElement(self, *args):
        return _diveCL.IMesh_RemoveElement(self, *args)

    def GetNodes(self):
        return _diveCL.IMesh_GetNodes(self)

    def GetElements(self):
        return _diveCL.IMesh_GetElements(self)

    def GetNode(self, tag, status):
        return _diveCL.IMesh_GetNode(self, tag, status)

    def GetNodeIndex(self, index, status):
        return _diveCL.IMesh_GetNodeIndex(self, index, status)

    def GetNodeSorted(self, tag, status):
        return _diveCL.IMesh_GetNodeSorted(self, tag, status)

    def GetElement(self, tag, status):
        return _diveCL.IMesh_GetElement(self, tag, status)

    def GetElementIndex(self, index, status):
        return _diveCL.IMesh_GetElementIndex(self, index, status)

    def GetElementSorted(self, tag, status):
        return _diveCL.IMesh_GetElementSorted(self, tag, status)

    def GetElementSizeMinimum(self):
        return _diveCL.IMesh_GetElementSizeMinimum(self)

    def GetTotalDof(self):
        return _diveCL.IMesh_GetTotalDof(self)

    def GetPivot(self):
        return _diveCL.IMesh_GetPivot(self)

    def GetTag(self):
        return _diveCL.IMesh_GetTag(self)

    def SetTag(self, tag):
        return _diveCL.IMesh_SetTag(self, tag)

    def SortNodesTag(self):
        return _diveCL.IMesh_SortNodesTag(self)

    def SortElementsTag(self):
        return _diveCL.IMesh_SortElementsTag(self)

    def GetIndexNode(self, tag, status):
        return _diveCL.IMesh_GetIndexNode(self, tag, status)

    def GetIndexNodeSorted(self, tag, status):
        return _diveCL.IMesh_GetIndexNodeSorted(self, tag, status)

    def GetIndexElement(self, tag, status):
        return _diveCL.IMesh_GetIndexElement(self, tag, status)

    def GetIndexElementSorted(self, tag, status):
        return _diveCL.IMesh_GetIndexElementSorted(self, tag, status)

# Register IMesh in _diveCL:
_diveCL.IMesh_swigregister(IMesh)

def CreateMesh(*args):
    return _diveCL.CreateMesh(*args)
class Mesh(IMesh):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _diveCL.delete_Mesh

    @staticmethod
    def Create():
        return _diveCL.Mesh_Create()

    def GetPtr(self, *args):
        return _diveCL.Mesh_GetPtr(self, *args)

    def AddNode(self, node, status, IndexCheck=False):
        return _diveCL.Mesh_AddNode(self, node, status, IndexCheck)

    def AddElement(self, element, status, IndexCheck=False):
        return _diveCL.Mesh_AddElement(self, element, status, IndexCheck)

    def RemoveNode(self, *args):
        return _diveCL.Mesh_RemoveNode(self, *args)

    def RemoveElement(self, *args):
        return _diveCL.Mesh_RemoveElement(self, *args)

    def GetNodes(self):
        return _diveCL.Mesh_GetNodes(self)

    def GetElements(self):
        return _diveCL.Mesh_GetElements(self)

    def GetNode(self, tag, status):
        return _diveCL.Mesh_GetNode(self, tag, status)

    def GetNodeIndex(self, index, status):
        return _diveCL.Mesh_GetNodeIndex(self, index, status)

    def GetNodeSorted(self, tag, status):
        return _diveCL.Mesh_GetNodeSorted(self, tag, status)

    def GetElement(self, tag, status):
        return _diveCL.Mesh_GetElement(self, tag, status)

    def GetElementIndex(self, index, status):
        return _diveCL.Mesh_GetElementIndex(self, index, status)

    def GetElementSorted(self, tag, status):
        return _diveCL.Mesh_GetElementSorted(self, tag, status)

    def GetElementSizeMinimum(self):
        return _diveCL.Mesh_GetElementSizeMinimum(self)

    def GetTotalDof(self):
        return _diveCL.Mesh_GetTotalDof(self)

    def GetPivot(self):
        return _diveCL.Mesh_GetPivot(self)

    def GetTag(self):
        return _diveCL.Mesh_GetTag(self)

    def SetTag(self, tag):
        return _diveCL.Mesh_SetTag(self, tag)

    def SortNodesTag(self):
        return _diveCL.Mesh_SortNodesTag(self)

    def SortElementsTag(self):
        return _diveCL.Mesh_SortElementsTag(self)

    def GetIndexNode(self, tag, status):
        return _diveCL.Mesh_GetIndexNode(self, tag, status)

    def GetIndexNodeSorted(self, tag, status):
        return _diveCL.Mesh_GetIndexNodeSorted(self, tag, status)

    def GetIndexElement(self, tag, status):
        return _diveCL.Mesh_GetIndexElement(self, tag, status)

    def GetIndexElementSorted(self, tag, status):
        return _diveCL.Mesh_GetIndexElementSorted(self, tag, status)

# Register Mesh in _diveCL:
_diveCL.Mesh_swigregister(Mesh)

def LoadGmsh(meshTag, fileName, numberDof, status):
    return _diveCL.LoadGmsh(meshTag, fileName, numberDof, status)

def DeformByInterpolation(mesh, interpolation):
    return _diveCL.DeformByInterpolation(mesh, interpolation)
class IProblem(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _diveCL.delete_IProblem

    def GetNumberDof(self):
        return _diveCL.IProblem_GetNumberDof(self)

    def GetTotalDof(self):
        return _diveCL.IProblem_GetTotalDof(self)

    def GetPivot(self):
        return _diveCL.IProblem_GetPivot(self)

    def GetTimer(self):
        return _diveCL.IProblem_GetTimer(self)

    def GetMesh(self):
        return _diveCL.IProblem_GetMesh(self)

    def GetType(self):
        return _diveCL.IProblem_GetType(self)

    def GetTag(self):
        return _diveCL.IProblem_GetTag(self)

    def GetDirichlets(self):
        return _diveCL.IProblem_GetDirichlets(self)

    def GetLoads(self):
        return _diveCL.IProblem_GetLoads(self)

    def GetDofMeshIndices(self):
        return _diveCL.IProblem_GetDofMeshIndices(self)

    def GetNodeMeshIndices(self):
        return _diveCL.IProblem_GetNodeMeshIndices(self)

    def GetDirichletMeshIndices(self):
        return _diveCL.IProblem_GetDirichletMeshIndices(self)

    def SetTimer(self, timer):
        return _diveCL.IProblem_SetTimer(self, timer)

    def SetMesh(self, mesh):
        return _diveCL.IProblem_SetMesh(self, mesh)

    def SetTag(self, tag):
        return _diveCL.IProblem_SetTag(self, tag)

    def AddDirichlet(self, dirichlet):
        return _diveCL.IProblem_AddDirichlet(self, dirichlet)

    def AddLoad(self, load):
        return _diveCL.IProblem_AddLoad(self, load)

    def Initialize(self):
        return _diveCL.IProblem_Initialize(self)

    def UpdateMeshValues(self, u):
        return _diveCL.IProblem_UpdateMeshValues(self, u)

# Register IProblem in _diveCL:
_diveCL.IProblem_swigregister(IProblem)
problem_fluid = cvar.problem_fluid
problem_pressure = cvar.problem_pressure
problem_thermal = cvar.problem_thermal
problem_structural = cvar.problem_structural

class IFluid(IProblem):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _diveCL.delete_IFluid

    def GetTemperature(self):
        return _diveCL.IFluid_GetTemperature(self)

    def GetPressure(self):
        return _diveCL.IFluid_GetPressure(self)

    def GetVelocity(self):
        return _diveCL.IFluid_GetVelocity(self)

    def SetTemperature(self, temperature):
        return _diveCL.IFluid_SetTemperature(self, temperature)

    def SetPressure(self, pressure):
        return _diveCL.IFluid_SetPressure(self, pressure)

    def Mass(self):
        return _diveCL.IFluid_Mass(self)

    def Stiffness(self):
        return _diveCL.IFluid_Stiffness(self)

    def Convection(self):
        return _diveCL.IFluid_Convection(self)

    def ConvectionSymmetric(self):
        return _diveCL.IFluid_ConvectionSymmetric(self)

    def ConvectionAsymmetric(self):
        return _diveCL.IFluid_ConvectionAsymmetric(self)

    def Stabilization(self):
        return _diveCL.IFluid_Stabilization(self)

    def LoadDistributedVolume(self):
        return _diveCL.IFluid_LoadDistributedVolume(self)

    def LoadDistributedVolumeStabilization(self):
        return _diveCL.IFluid_LoadDistributedVolumeStabilization(self)

    def Momentum(self):
        return _diveCL.IFluid_Momentum(self)

    def Velocity(self):
        return _diveCL.IFluid_Velocity(self)

# Register IFluid in _diveCL:
_diveCL.IFluid_swigregister(IFluid)
class IPressure(IProblem):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _diveCL.delete_IPressure

    def GetTemperature(self):
        return _diveCL.IPressure_GetTemperature(self)

    def GetPressure(self):
        return _diveCL.IPressure_GetPressure(self)

    def GetVelocity(self):
        return _diveCL.IPressure_GetVelocity(self)

    def SetTemperature(self, temperature):
        return _diveCL.IPressure_SetTemperature(self, temperature)

    def SetVelocity(self, velocity):
        return _diveCL.IPressure_SetVelocity(self, velocity)

    def Mass(self):
        return _diveCL.IPressure_Mass(self)

    def Stiffness(self):
        return _diveCL.IPressure_Stiffness(self)

    def Crossed(self, problemMomentum):
        return _diveCL.IPressure_Crossed(self, problemMomentum)

    def Stabilization(self, problemMomentum):
        return _diveCL.IPressure_Stabilization(self, problemMomentum)

    def DistributedVolumeDivergence(self, problemMomentum):
        return _diveCL.IPressure_DistributedVolumeDivergence(self, problemMomentum)

    def Pressure(self):
        return _diveCL.IPressure_Pressure(self)

# Register IPressure in _diveCL:
_diveCL.IPressure_swigregister(IPressure)
class IThermal(IProblem):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _diveCL.delete_IThermal

    def GetTemperature(self):
        return _diveCL.IThermal_GetTemperature(self)

    def GetPressure(self):
        return _diveCL.IThermal_GetPressure(self)

    def GetVelocity(self):
        return _diveCL.IThermal_GetVelocity(self)

    def SetPressure(self, pressure):
        return _diveCL.IThermal_SetPressure(self, pressure)

    def SetVelocity(self, velocity):
        return _diveCL.IThermal_SetVelocity(self, velocity)

    def Mass(self):
        return _diveCL.IThermal_Mass(self)

    def Stiffness(self):
        return _diveCL.IThermal_Stiffness(self)

    def Convection(self):
        return _diveCL.IThermal_Convection(self)

    def Stabilization(self):
        return _diveCL.IThermal_Stabilization(self)

    def Energy(self):
        return _diveCL.IThermal_Energy(self)

# Register IThermal in _diveCL:
_diveCL.IThermal_swigregister(IThermal)
class IStructural(IProblem):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _diveCL.delete_IStructural

    def GetTemperature(self):
        return _diveCL.IStructural_GetTemperature(self)

    def GetPressure(self):
        return _diveCL.IStructural_GetPressure(self)

    def SetTemperature(self, temperature):
        return _diveCL.IStructural_SetTemperature(self, temperature)

    def SetPressure(self, pressure):
        return _diveCL.IStructural_SetPressure(self, pressure)

    def Mass(self):
        return _diveCL.IStructural_Mass(self)

    def Stiffness(self):
        return _diveCL.IStructural_Stiffness(self)

    def LoadDistributedVolume(self):
        return _diveCL.IStructural_LoadDistributedVolume(self)

    def LoadDistributedFace(self):
        return _diveCL.IStructural_LoadDistributedFace(self)

    def LoadDistributedEdge(self):
        return _diveCL.IStructural_LoadDistributedEdge(self)

    def LoadNode(self):
        return _diveCL.IStructural_LoadNode(self)

    def Displacement(self):
        return _diveCL.IStructural_Displacement(self)

# Register IStructural in _diveCL:
_diveCL.IStructural_swigregister(IStructural)

def CreateProblemThermal(*args):
    return _diveCL.CreateProblemThermal(*args)
class ProblemThermal(IThermal):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _diveCL.delete_ProblemThermal

    @staticmethod
    def Create():
        return _diveCL.ProblemThermal_Create()

    def GetPtr(self, *args):
        return _diveCL.ProblemThermal_GetPtr(self, *args)

    def GetNumberDof(self):
        return _diveCL.ProblemThermal_GetNumberDof(self)

    def GetTotalDof(self):
        return _diveCL.ProblemThermal_GetTotalDof(self)

    def GetPivot(self):
        return _diveCL.ProblemThermal_GetPivot(self)

    def GetTimer(self):
        return _diveCL.ProblemThermal_GetTimer(self)

    def GetTemperature(self):
        return _diveCL.ProblemThermal_GetTemperature(self)

    def GetPressure(self):
        return _diveCL.ProblemThermal_GetPressure(self)

    def GetVelocity(self):
        return _diveCL.ProblemThermal_GetVelocity(self)

    def GetMesh(self):
        return _diveCL.ProblemThermal_GetMesh(self)

    def GetType(self):
        return _diveCL.ProblemThermal_GetType(self)

    def GetTag(self):
        return _diveCL.ProblemThermal_GetTag(self)

    def GetDirichlets(self):
        return _diveCL.ProblemThermal_GetDirichlets(self)

    def GetLoads(self):
        return _diveCL.ProblemThermal_GetLoads(self)

    def GetDofMeshIndices(self):
        return _diveCL.ProblemThermal_GetDofMeshIndices(self)

    def GetNodeMeshIndices(self):
        return _diveCL.ProblemThermal_GetNodeMeshIndices(self)

    def GetDirichletMeshIndices(self):
        return _diveCL.ProblemThermal_GetDirichletMeshIndices(self)

    def SetTimer(self, timer):
        return _diveCL.ProblemThermal_SetTimer(self, timer)

    def SetPressure(self, pressure):
        return _diveCL.ProblemThermal_SetPressure(self, pressure)

    def SetVelocity(self, velocity):
        return _diveCL.ProblemThermal_SetVelocity(self, velocity)

    def SetMesh(self, mesh):
        return _diveCL.ProblemThermal_SetMesh(self, mesh)

    def SetTag(self, tag):
        return _diveCL.ProblemThermal_SetTag(self, tag)

    def AddDirichlet(self, dirichlet):
        return _diveCL.ProblemThermal_AddDirichlet(self, dirichlet)

    def AddLoad(self, load):
        return _diveCL.ProblemThermal_AddLoad(self, load)

    def Initialize(self):
        return _diveCL.ProblemThermal_Initialize(self)

    def UpdateMeshValues(self, u):
        return _diveCL.ProblemThermal_UpdateMeshValues(self, u)

    def Mass(self):
        return _diveCL.ProblemThermal_Mass(self)

    def Stiffness(self):
        return _diveCL.ProblemThermal_Stiffness(self)

    def Convection(self):
        return _diveCL.ProblemThermal_Convection(self)

    def Stabilization(self):
        return _diveCL.ProblemThermal_Stabilization(self)

    def Energy(self):
        return _diveCL.ProblemThermal_Energy(self)

# Register ProblemThermal in _diveCL:
_diveCL.ProblemThermal_swigregister(ProblemThermal)

def CreateProblemFluid(*args):
    return _diveCL.CreateProblemFluid(*args)
class ProblemFluid(IFluid):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _diveCL.delete_ProblemFluid

    @staticmethod
    def Create():
        return _diveCL.ProblemFluid_Create()

    def GetPtr(self, *args):
        return _diveCL.ProblemFluid_GetPtr(self, *args)

    def GetNumberDof(self):
        return _diveCL.ProblemFluid_GetNumberDof(self)

    def GetTotalDof(self):
        return _diveCL.ProblemFluid_GetTotalDof(self)

    def GetPivot(self):
        return _diveCL.ProblemFluid_GetPivot(self)

    def GetTimer(self):
        return _diveCL.ProblemFluid_GetTimer(self)

    def GetTemperature(self):
        return _diveCL.ProblemFluid_GetTemperature(self)

    def GetPressure(self):
        return _diveCL.ProblemFluid_GetPressure(self)

    def GetVelocity(self):
        return _diveCL.ProblemFluid_GetVelocity(self)

    def GetMesh(self):
        return _diveCL.ProblemFluid_GetMesh(self)

    def GetType(self):
        return _diveCL.ProblemFluid_GetType(self)

    def GetTag(self):
        return _diveCL.ProblemFluid_GetTag(self)

    def GetDirichlets(self):
        return _diveCL.ProblemFluid_GetDirichlets(self)

    def GetLoads(self):
        return _diveCL.ProblemFluid_GetLoads(self)

    def GetDofMeshIndices(self):
        return _diveCL.ProblemFluid_GetDofMeshIndices(self)

    def GetNodeMeshIndices(self):
        return _diveCL.ProblemFluid_GetNodeMeshIndices(self)

    def GetDirichletMeshIndices(self):
        return _diveCL.ProblemFluid_GetDirichletMeshIndices(self)

    def SetTimer(self, timer):
        return _diveCL.ProblemFluid_SetTimer(self, timer)

    def SetTemperature(self, temperature):
        return _diveCL.ProblemFluid_SetTemperature(self, temperature)

    def SetPressure(self, pressure):
        return _diveCL.ProblemFluid_SetPressure(self, pressure)

    def SetMesh(self, mesh):
        return _diveCL.ProblemFluid_SetMesh(self, mesh)

    def SetTag(self, tag):
        return _diveCL.ProblemFluid_SetTag(self, tag)

    def AddDirichlet(self, dirichlet):
        return _diveCL.ProblemFluid_AddDirichlet(self, dirichlet)

    def AddLoad(self, load):
        return _diveCL.ProblemFluid_AddLoad(self, load)

    def Initialize(self):
        return _diveCL.ProblemFluid_Initialize(self)

    def UpdateMeshValues(self, u):
        return _diveCL.ProblemFluid_UpdateMeshValues(self, u)

    def UpdateMeshValuesMomentum(self, q):
        return _diveCL.ProblemFluid_UpdateMeshValuesMomentum(self, q)

    def Mass(self):
        return _diveCL.ProblemFluid_Mass(self)

    def Stiffness(self):
        return _diveCL.ProblemFluid_Stiffness(self)

    def Convection(self):
        return _diveCL.ProblemFluid_Convection(self)

    def ConvectionSymmetric(self):
        return _diveCL.ProblemFluid_ConvectionSymmetric(self)

    def ConvectionAsymmetric(self):
        return _diveCL.ProblemFluid_ConvectionAsymmetric(self)

    def Stabilization(self):
        return _diveCL.ProblemFluid_Stabilization(self)

    def LoadDistributedVolume(self):
        return _diveCL.ProblemFluid_LoadDistributedVolume(self)

    def LoadDistributedVolumeStabilization(self):
        return _diveCL.ProblemFluid_LoadDistributedVolumeStabilization(self)

    def Momentum(self):
        return _diveCL.ProblemFluid_Momentum(self)

    def Velocity(self):
        return _diveCL.ProblemFluid_Velocity(self)

# Register ProblemFluid in _diveCL:
_diveCL.ProblemFluid_swigregister(ProblemFluid)

def CreateProblemPressure(*args):
    return _diveCL.CreateProblemPressure(*args)
class ProblemPressure(IPressure):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _diveCL.delete_ProblemPressure

    @staticmethod
    def Create():
        return _diveCL.ProblemPressure_Create()

    def GetPtr(self, *args):
        return _diveCL.ProblemPressure_GetPtr(self, *args)

    def GetNumberDof(self):
        return _diveCL.ProblemPressure_GetNumberDof(self)

    def GetTotalDof(self):
        return _diveCL.ProblemPressure_GetTotalDof(self)

    def GetPivot(self):
        return _diveCL.ProblemPressure_GetPivot(self)

    def GetTimer(self):
        return _diveCL.ProblemPressure_GetTimer(self)

    def GetTemperature(self):
        return _diveCL.ProblemPressure_GetTemperature(self)

    def GetPressure(self):
        return _diveCL.ProblemPressure_GetPressure(self)

    def GetVelocity(self):
        return _diveCL.ProblemPressure_GetVelocity(self)

    def GetMesh(self):
        return _diveCL.ProblemPressure_GetMesh(self)

    def GetType(self):
        return _diveCL.ProblemPressure_GetType(self)

    def GetTag(self):
        return _diveCL.ProblemPressure_GetTag(self)

    def GetDirichlets(self):
        return _diveCL.ProblemPressure_GetDirichlets(self)

    def GetLoads(self):
        return _diveCL.ProblemPressure_GetLoads(self)

    def GetDofMeshIndices(self):
        return _diveCL.ProblemPressure_GetDofMeshIndices(self)

    def GetNodeMeshIndices(self):
        return _diveCL.ProblemPressure_GetNodeMeshIndices(self)

    def GetDirichletMeshIndices(self):
        return _diveCL.ProblemPressure_GetDirichletMeshIndices(self)

    def SetTimer(self, timer):
        return _diveCL.ProblemPressure_SetTimer(self, timer)

    def SetTemperature(self, temperature):
        return _diveCL.ProblemPressure_SetTemperature(self, temperature)

    def SetVelocity(self, velocity):
        return _diveCL.ProblemPressure_SetVelocity(self, velocity)

    def SetMesh(self, mesh):
        return _diveCL.ProblemPressure_SetMesh(self, mesh)

    def SetTag(self, tag):
        return _diveCL.ProblemPressure_SetTag(self, tag)

    def AddDirichlet(self, dirichlet):
        return _diveCL.ProblemPressure_AddDirichlet(self, dirichlet)

    def AddLoad(self, load):
        return _diveCL.ProblemPressure_AddLoad(self, load)

    def Initialize(self):
        return _diveCL.ProblemPressure_Initialize(self)

    def UpdateMeshValues(self, u):
        return _diveCL.ProblemPressure_UpdateMeshValues(self, u)

    def Mass(self):
        return _diveCL.ProblemPressure_Mass(self)

    def Stiffness(self):
        return _diveCL.ProblemPressure_Stiffness(self)

    def Crossed(self, problemMomentum):
        return _diveCL.ProblemPressure_Crossed(self, problemMomentum)

    def Stabilization(self, problemMomentum):
        return _diveCL.ProblemPressure_Stabilization(self, problemMomentum)

    def DistributedVolumeDivergence(self, problemMomentum):
        return _diveCL.ProblemPressure_DistributedVolumeDivergence(self, problemMomentum)

    def Pressure(self):
        return _diveCL.ProblemPressure_Pressure(self)

# Register ProblemPressure in _diveCL:
_diveCL.ProblemPressure_swigregister(ProblemPressure)

def CreateProblemStructural(*args):
    return _diveCL.CreateProblemStructural(*args)
class ProblemStructural(IStructural):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _diveCL.delete_ProblemStructural

    @staticmethod
    def Create():
        return _diveCL.ProblemStructural_Create()

    def GetPtr(self, *args):
        return _diveCL.ProblemStructural_GetPtr(self, *args)

    def GetNumberDof(self):
        return _diveCL.ProblemStructural_GetNumberDof(self)

    def GetTotalDof(self):
        return _diveCL.ProblemStructural_GetTotalDof(self)

    def GetPivot(self):
        return _diveCL.ProblemStructural_GetPivot(self)

    def GetTimer(self):
        return _diveCL.ProblemStructural_GetTimer(self)

    def GetTemperature(self):
        return _diveCL.ProblemStructural_GetTemperature(self)

    def GetPressure(self):
        return _diveCL.ProblemStructural_GetPressure(self)

    def GetMesh(self):
        return _diveCL.ProblemStructural_GetMesh(self)

    def GetType(self):
        return _diveCL.ProblemStructural_GetType(self)

    def GetTag(self):
        return _diveCL.ProblemStructural_GetTag(self)

    def GetDirichlets(self):
        return _diveCL.ProblemStructural_GetDirichlets(self)

    def GetLoads(self):
        return _diveCL.ProblemStructural_GetLoads(self)

    def GetDofMeshIndices(self):
        return _diveCL.ProblemStructural_GetDofMeshIndices(self)

    def GetNodeMeshIndices(self):
        return _diveCL.ProblemStructural_GetNodeMeshIndices(self)

    def GetDirichletMeshIndices(self):
        return _diveCL.ProblemStructural_GetDirichletMeshIndices(self)

    def SetTimer(self, timer):
        return _diveCL.ProblemStructural_SetTimer(self, timer)

    def SetTemperature(self, temperature):
        return _diveCL.ProblemStructural_SetTemperature(self, temperature)

    def SetPressure(self, pressure):
        return _diveCL.ProblemStructural_SetPressure(self, pressure)

    def SetMesh(self, mesh):
        return _diveCL.ProblemStructural_SetMesh(self, mesh)

    def SetTag(self, tag):
        return _diveCL.ProblemStructural_SetTag(self, tag)

    def AddDirichlet(self, dirichlet):
        return _diveCL.ProblemStructural_AddDirichlet(self, dirichlet)

    def AddLoad(self, load):
        return _diveCL.ProblemStructural_AddLoad(self, load)

    def Initialize(self):
        return _diveCL.ProblemStructural_Initialize(self)

    def UpdateMeshValues(self, u):
        return _diveCL.ProblemStructural_UpdateMeshValues(self, u)

    def Mass(self):
        return _diveCL.ProblemStructural_Mass(self)

    def Stiffness(self):
        return _diveCL.ProblemStructural_Stiffness(self)

    def LoadDistributedVolume(self):
        return _diveCL.ProblemStructural_LoadDistributedVolume(self)

    def LoadDistributedFace(self):
        return _diveCL.ProblemStructural_LoadDistributedFace(self)

    def LoadDistributedEdge(self):
        return _diveCL.ProblemStructural_LoadDistributedEdge(self)

    def LoadNode(self):
        return _diveCL.ProblemStructural_LoadNode(self)

    def Displacement(self):
        return _diveCL.ProblemStructural_Displacement(self)

# Register ProblemStructural in _diveCL:
_diveCL.ProblemStructural_swigregister(ProblemStructural)
class Face(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    faceIndex = property(_diveCL.Face_faceIndex_get, _diveCL.Face_faceIndex_set)
    element = property(_diveCL.Face_element_get, _diveCL.Face_element_set)

    def __init__(self):
        _diveCL.Face_swiginit(self, _diveCL.new_Face())
    __swig_destroy__ = _diveCL.delete_Face

# Register Face in _diveCL:
_diveCL.Face_swigregister(Face)
class NodeCmp(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __call__(self, node1, node2):
        return _diveCL.NodeCmp___call__(self, node1, node2)

    def __init__(self):
        _diveCL.NodeCmp_swiginit(self, _diveCL.new_NodeCmp())
    __swig_destroy__ = _diveCL.delete_NodeCmp

# Register NodeCmp in _diveCL:
_diveCL.NodeCmp_swigregister(NodeCmp)
class ElementCmp(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __call__(self, element1, element2):
        return _diveCL.ElementCmp___call__(self, element1, element2)

    def __init__(self):
        _diveCL.ElementCmp_swiginit(self, _diveCL.new_ElementCmp())
    __swig_destroy__ = _diveCL.delete_ElementCmp

# Register ElementCmp in _diveCL:
_diveCL.ElementCmp_swigregister(ElementCmp)
class FaceCmp(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __call__(self, face1, face2):
        return _diveCL.FaceCmp___call__(self, face1, face2)

    def __init__(self):
        _diveCL.FaceCmp_swiginit(self, _diveCL.new_FaceCmp())
    __swig_destroy__ = _diveCL.delete_FaceCmp

# Register FaceCmp in _diveCL:
_diveCL.FaceCmp_swigregister(FaceCmp)
class TypeCmp(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __call__(self, type1, type2):
        return _diveCL.TypeCmp___call__(self, type1, type2)

    def __init__(self):
        _diveCL.TypeCmp_swiginit(self, _diveCL.new_TypeCmp())
    __swig_destroy__ = _diveCL.delete_TypeCmp

# Register TypeCmp in _diveCL:
_diveCL.TypeCmp_swigregister(TypeCmp)
class SpecNodesByCoordinate(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    axis_ = property(_diveCL.SpecNodesByCoordinate_axis__get, _diveCL.SpecNodesByCoordinate_axis__set)
    pos_ = property(_diveCL.SpecNodesByCoordinate_pos__get, _diveCL.SpecNodesByCoordinate_pos__set)
    tol_ = property(_diveCL.SpecNodesByCoordinate_tol__get, _diveCL.SpecNodesByCoordinate_tol__set)
    basis_ = property(_diveCL.SpecNodesByCoordinate_basis__get, _diveCL.SpecNodesByCoordinate_basis__set)

    def __init__(self, basis, axis, pos, tol):
        _diveCL.SpecNodesByCoordinate_swiginit(self, _diveCL.new_SpecNodesByCoordinate(basis, axis, pos, tol))

    def IsSatisfied(self, item):
        return _diveCL.SpecNodesByCoordinate_IsSatisfied(self, item)
    __swig_destroy__ = _diveCL.delete_SpecNodesByCoordinate

# Register SpecNodesByCoordinate in _diveCL:
_diveCL.SpecNodesByCoordinate_swigregister(SpecNodesByCoordinate)
class SpecNodesByRange(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    axis_ = property(_diveCL.SpecNodesByRange_axis__get, _diveCL.SpecNodesByRange_axis__set)
    min_ = property(_diveCL.SpecNodesByRange_min__get, _diveCL.SpecNodesByRange_min__set)
    max_ = property(_diveCL.SpecNodesByRange_max__get, _diveCL.SpecNodesByRange_max__set)
    tol_ = property(_diveCL.SpecNodesByRange_tol__get, _diveCL.SpecNodesByRange_tol__set)
    basis_ = property(_diveCL.SpecNodesByRange_basis__get, _diveCL.SpecNodesByRange_basis__set)

    def __init__(self, basis, axis, min, max, tol):
        _diveCL.SpecNodesByRange_swiginit(self, _diveCL.new_SpecNodesByRange(basis, axis, min, max, tol))

    def IsSatisfied(self, item):
        return _diveCL.SpecNodesByRange_IsSatisfied(self, item)
    __swig_destroy__ = _diveCL.delete_SpecNodesByRange

# Register SpecNodesByRange in _diveCL:
_diveCL.SpecNodesByRange_swigregister(SpecNodesByRange)
class SpecNodesByTag(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    min_ = property(_diveCL.SpecNodesByTag_min__get, _diveCL.SpecNodesByTag_min__set)
    max_ = property(_diveCL.SpecNodesByTag_max__get, _diveCL.SpecNodesByTag_max__set)

    def __init__(self, min, max):
        _diveCL.SpecNodesByTag_swiginit(self, _diveCL.new_SpecNodesByTag(min, max))

    def IsSatisfied(self, item):
        return _diveCL.SpecNodesByTag_IsSatisfied(self, item)
    __swig_destroy__ = _diveCL.delete_SpecNodesByTag

# Register SpecNodesByTag in _diveCL:
_diveCL.SpecNodesByTag_swigregister(SpecNodesByTag)
class SpecElementsByTag(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    min_ = property(_diveCL.SpecElementsByTag_min__get, _diveCL.SpecElementsByTag_min__set)
    max_ = property(_diveCL.SpecElementsByTag_max__get, _diveCL.SpecElementsByTag_max__set)

    def __init__(self, min, max):
        _diveCL.SpecElementsByTag_swiginit(self, _diveCL.new_SpecElementsByTag(min, max))

    def IsSatisfied(self, item):
        return _diveCL.SpecElementsByTag_IsSatisfied(self, item)
    __swig_destroy__ = _diveCL.delete_SpecElementsByTag

# Register SpecElementsByTag in _diveCL:
_diveCL.SpecElementsByTag_swigregister(SpecElementsByTag)
class SpecElementsByType(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    selectionTypes_ = property(_diveCL.SpecElementsByType_selectionTypes__get, _diveCL.SpecElementsByType_selectionTypes__set)

    def __init__(self):
        _diveCL.SpecElementsByType_swiginit(self, _diveCL.new_SpecElementsByType())

    def IsSatisfied(self, item):
        return _diveCL.SpecElementsByType_IsSatisfied(self, item)
    __swig_destroy__ = _diveCL.delete_SpecElementsByType

# Register SpecElementsByType in _diveCL:
_diveCL.SpecElementsByType_swigregister(SpecElementsByType)

def FilterNodes(spec, input):
    return _diveCL.FilterNodes(spec, input)

def FilterNodesRemoveDuplicates(input):
    return _diveCL.FilterNodesRemoveDuplicates(input)

def FilterNodesByCoordinate(input, basis, axis, pos, tol):
    return _diveCL.FilterNodesByCoordinate(input, basis, axis, pos, tol)

def FilterNodesByRange(input, basis, axis, min, max, tol):
    return _diveCL.FilterNodesByRange(input, basis, axis, min, max, tol)

def FilterNodesByTag(input, min, max):
    return _diveCL.FilterNodesByTag(input, min, max)

def FilterNodesByElements(input):
    return _diveCL.FilterNodesByElements(input)

def FilterElements(spec, input):
    return _diveCL.FilterElements(spec, input)

def FilterElementsRemoveDuplicates(input):
    return _diveCL.FilterElementsRemoveDuplicates(input)

def FilterElementsByTag(input, min, max):
    return _diveCL.FilterElementsByTag(input, min, max)

def FilterElementsByType(input):
    return _diveCL.FilterElementsByType(input)

def FilterElementsByNodes(input):
    return _diveCL.FilterElementsByNodes(input)

