# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.1.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _dive
else:
    import _dive

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


SHARED_PTR_DISOWN = _dive.SHARED_PTR_DISOWN
class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _dive.delete_SwigPyIterator

    def value(self):
        return _dive.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _dive.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _dive.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _dive.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _dive.SwigPyIterator_equal(self, x)

    def copy(self):
        return _dive.SwigPyIterator_copy(self)

    def next(self):
        return _dive.SwigPyIterator_next(self)

    def __next__(self):
        return _dive.SwigPyIterator___next__(self)

    def previous(self):
        return _dive.SwigPyIterator_previous(self)

    def advance(self, n):
        return _dive.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _dive.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _dive.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _dive.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _dive.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _dive.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _dive.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _dive:
_dive.SwigPyIterator_swigregister(SwigPyIterator)
class vecSizeT(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _dive.vecSizeT_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _dive.vecSizeT___nonzero__(self)

    def __bool__(self):
        return _dive.vecSizeT___bool__(self)

    def __len__(self):
        return _dive.vecSizeT___len__(self)

    def __getslice__(self, i, j):
        return _dive.vecSizeT___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _dive.vecSizeT___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _dive.vecSizeT___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _dive.vecSizeT___delitem__(self, *args)

    def __getitem__(self, *args):
        return _dive.vecSizeT___getitem__(self, *args)

    def __setitem__(self, *args):
        return _dive.vecSizeT___setitem__(self, *args)

    def pop(self):
        return _dive.vecSizeT_pop(self)

    def append(self, x):
        return _dive.vecSizeT_append(self, x)

    def empty(self):
        return _dive.vecSizeT_empty(self)

    def size(self):
        return _dive.vecSizeT_size(self)

    def swap(self, v):
        return _dive.vecSizeT_swap(self, v)

    def begin(self):
        return _dive.vecSizeT_begin(self)

    def end(self):
        return _dive.vecSizeT_end(self)

    def rbegin(self):
        return _dive.vecSizeT_rbegin(self)

    def rend(self):
        return _dive.vecSizeT_rend(self)

    def clear(self):
        return _dive.vecSizeT_clear(self)

    def get_allocator(self):
        return _dive.vecSizeT_get_allocator(self)

    def pop_back(self):
        return _dive.vecSizeT_pop_back(self)

    def erase(self, *args):
        return _dive.vecSizeT_erase(self, *args)

    def __init__(self, *args):
        _dive.vecSizeT_swiginit(self, _dive.new_vecSizeT(*args))

    def push_back(self, x):
        return _dive.vecSizeT_push_back(self, x)

    def front(self):
        return _dive.vecSizeT_front(self)

    def back(self):
        return _dive.vecSizeT_back(self)

    def assign(self, n, x):
        return _dive.vecSizeT_assign(self, n, x)

    def resize(self, *args):
        return _dive.vecSizeT_resize(self, *args)

    def insert(self, *args):
        return _dive.vecSizeT_insert(self, *args)

    def reserve(self, n):
        return _dive.vecSizeT_reserve(self, n)

    def capacity(self):
        return _dive.vecSizeT_capacity(self)
    __swig_destroy__ = _dive.delete_vecSizeT

# Register vecSizeT in _dive:
_dive.vecSizeT_swigregister(vecSizeT)
class vecDouble(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _dive.vecDouble_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _dive.vecDouble___nonzero__(self)

    def __bool__(self):
        return _dive.vecDouble___bool__(self)

    def __len__(self):
        return _dive.vecDouble___len__(self)

    def __getslice__(self, i, j):
        return _dive.vecDouble___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _dive.vecDouble___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _dive.vecDouble___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _dive.vecDouble___delitem__(self, *args)

    def __getitem__(self, *args):
        return _dive.vecDouble___getitem__(self, *args)

    def __setitem__(self, *args):
        return _dive.vecDouble___setitem__(self, *args)

    def pop(self):
        return _dive.vecDouble_pop(self)

    def append(self, x):
        return _dive.vecDouble_append(self, x)

    def empty(self):
        return _dive.vecDouble_empty(self)

    def size(self):
        return _dive.vecDouble_size(self)

    def swap(self, v):
        return _dive.vecDouble_swap(self, v)

    def begin(self):
        return _dive.vecDouble_begin(self)

    def end(self):
        return _dive.vecDouble_end(self)

    def rbegin(self):
        return _dive.vecDouble_rbegin(self)

    def rend(self):
        return _dive.vecDouble_rend(self)

    def clear(self):
        return _dive.vecDouble_clear(self)

    def get_allocator(self):
        return _dive.vecDouble_get_allocator(self)

    def pop_back(self):
        return _dive.vecDouble_pop_back(self)

    def erase(self, *args):
        return _dive.vecDouble_erase(self, *args)

    def __init__(self, *args):
        _dive.vecDouble_swiginit(self, _dive.new_vecDouble(*args))

    def push_back(self, x):
        return _dive.vecDouble_push_back(self, x)

    def front(self):
        return _dive.vecDouble_front(self)

    def back(self):
        return _dive.vecDouble_back(self)

    def assign(self, n, x):
        return _dive.vecDouble_assign(self, n, x)

    def resize(self, *args):
        return _dive.vecDouble_resize(self, *args)

    def insert(self, *args):
        return _dive.vecDouble_insert(self, *args)

    def reserve(self, n):
        return _dive.vecDouble_reserve(self, n)

    def capacity(self):
        return _dive.vecDouble_capacity(self)
    __swig_destroy__ = _dive.delete_vecDouble

# Register vecDouble in _dive:
_dive.vecDouble_swigregister(vecDouble)
class arrDouble(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _dive.arrDouble_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _dive.arrDouble___nonzero__(self)

    def __bool__(self):
        return _dive.arrDouble___bool__(self)

    def __len__(self):
        return _dive.arrDouble___len__(self)

    def __getslice__(self, i, j):
        return _dive.arrDouble___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _dive.arrDouble___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _dive.arrDouble___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _dive.arrDouble___delitem__(self, *args)

    def __getitem__(self, *args):
        return _dive.arrDouble___getitem__(self, *args)

    def __setitem__(self, *args):
        return _dive.arrDouble___setitem__(self, *args)

    def pop(self):
        return _dive.arrDouble_pop(self)

    def append(self, x):
        return _dive.arrDouble_append(self, x)

    def empty(self):
        return _dive.arrDouble_empty(self)

    def size(self):
        return _dive.arrDouble_size(self)

    def swap(self, v):
        return _dive.arrDouble_swap(self, v)

    def begin(self):
        return _dive.arrDouble_begin(self)

    def end(self):
        return _dive.arrDouble_end(self)

    def rbegin(self):
        return _dive.arrDouble_rbegin(self)

    def rend(self):
        return _dive.arrDouble_rend(self)

    def clear(self):
        return _dive.arrDouble_clear(self)

    def get_allocator(self):
        return _dive.arrDouble_get_allocator(self)

    def pop_back(self):
        return _dive.arrDouble_pop_back(self)

    def erase(self, *args):
        return _dive.arrDouble_erase(self, *args)

    def __init__(self, *args):
        _dive.arrDouble_swiginit(self, _dive.new_arrDouble(*args))

    def push_back(self, x):
        return _dive.arrDouble_push_back(self, x)

    def front(self):
        return _dive.arrDouble_front(self)

    def back(self):
        return _dive.arrDouble_back(self)

    def assign(self, n, x):
        return _dive.arrDouble_assign(self, n, x)

    def resize(self, *args):
        return _dive.arrDouble_resize(self, *args)

    def insert(self, *args):
        return _dive.arrDouble_insert(self, *args)

    def reserve(self, n):
        return _dive.arrDouble_reserve(self, n)

    def capacity(self):
        return _dive.arrDouble_capacity(self)
    __swig_destroy__ = _dive.delete_arrDouble

# Register arrDouble in _dive:
_dive.arrDouble_swigregister(arrDouble)
class Vector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _dive.Vector_swiginit(self, _dive.new_Vector(*args))
    __swig_destroy__ = _dive.delete_Vector

    def Resize(self, *args):
        return _dive.Vector_Resize(self, *args)

    def Fill(self, value):
        return _dive.Vector_Fill(self, value)

    def __call__(self, *args):
        return _dive.Vector___call__(self, *args)

    def __add__(self, *args):
        return _dive.Vector___add__(self, *args)

    def __pos__(self):
        return _dive.Vector___pos__(self)

    def __sub__(self, *args):
        return _dive.Vector___sub__(self, *args)

    def __neg__(self):
        return _dive.Vector___neg__(self)

    def __mul__(self, rhs):
        return _dive.Vector___mul__(self, rhs)

    def SwapRows(self, row1, row2):
        return _dive.Vector_SwapRows(self, row1, row2)

    def Region(self, *args):
        return _dive.Vector_Region(self, *args)

    def GetRows(self):
        return _dive.Vector_GetRows(self)

    def GetCols(self):
        return _dive.Vector_GetCols(self)

    def GetValue(self, row):
        return _dive.Vector_GetValue(self, row)

    def GetData(self):
        return _dive.Vector_GetData(self)

    def SetValue(self, row, value):
        return _dive.Vector_SetValue(self, row, value)

    def __str__(self):
        return _dive.Vector___str__(self)

    def __radd__(self, value):
        return _dive.Vector___radd__(self, value)

    def __rsub__(self, value):
        return _dive.Vector___rsub__(self, value)

    def __rmul__(self, value):
        return _dive.Vector___rmul__(self, value)

# Register Vector in _dive:
_dive.Vector_swigregister(Vector)
cvar = _dive.cvar
headerEilig = cvar.headerEilig
axis_x = cvar.axis_x
axis_y = cvar.axis_y
axis_z = cvar.axis_z

class Matrix(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _dive.Matrix_swiginit(self, _dive.new_Matrix(*args))
    __swig_destroy__ = _dive.delete_Matrix

    def Resize(self, *args):
        return _dive.Matrix_Resize(self, *args)

    def Fill(self, value):
        return _dive.Matrix_Fill(self, value)

    def __call__(self, *args):
        return _dive.Matrix___call__(self, *args)

    def __add__(self, *args):
        return _dive.Matrix___add__(self, *args)

    def __pos__(self):
        return _dive.Matrix___pos__(self)

    def __sub__(self, *args):
        return _dive.Matrix___sub__(self, *args)

    def __neg__(self):
        return _dive.Matrix___neg__(self)

    def __mul__(self, *args):
        return _dive.Matrix___mul__(self, *args)

    def SwapRows(self, row1, row2):
        return _dive.Matrix_SwapRows(self, row1, row2)

    def SwapCols(self, cols1, cols2):
        return _dive.Matrix_SwapCols(self, cols1, cols2)

    def Transpose(self):
        return _dive.Matrix_Transpose(self)

    def Diagonal(self):
        return _dive.Matrix_Diagonal(self)

    def Lower(self, diag):
        return _dive.Matrix_Lower(self, diag)

    def LowerWithDiagonal(self):
        return _dive.Matrix_LowerWithDiagonal(self)

    def LowerWithoutDiagonal(self):
        return _dive.Matrix_LowerWithoutDiagonal(self)

    def Upper(self, diag):
        return _dive.Matrix_Upper(self, diag)

    def UpperWithDiagonal(self):
        return _dive.Matrix_UpperWithDiagonal(self)

    def UpperWithoutDiagonal(self):
        return _dive.Matrix_UpperWithoutDiagonal(self)

    def Region(self, *args):
        return _dive.Matrix_Region(self, *args)

    def GetRows(self):
        return _dive.Matrix_GetRows(self)

    def GetCols(self):
        return _dive.Matrix_GetCols(self)

    def GetValue(self, row, col):
        return _dive.Matrix_GetValue(self, row, col)

    def GetData(self):
        return _dive.Matrix_GetData(self)

    def SetValue(self, row, col, value):
        return _dive.Matrix_SetValue(self, row, col, value)

    def __str__(self):
        return _dive.Matrix___str__(self)

    def __radd__(self, value):
        return _dive.Matrix___radd__(self, value)

    def __rsub__(self, value):
        return _dive.Matrix___rsub__(self, value)

    def __rmul__(self, value):
        return _dive.Matrix___rmul__(self, value)

# Register Matrix in _dive:
_dive.Matrix_swigregister(Matrix)
class Ellpack(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _dive.Ellpack_swiginit(self, _dive.new_Ellpack(*args))
    __swig_destroy__ = _dive.delete_Ellpack

    def IsUsed(self, *args):
        return _dive.Ellpack_IsUsed(self, *args)

    def Add(self, row, col):
        return _dive.Ellpack_Add(self, row, col)

    def Remove(self, row, col):
        return _dive.Ellpack_Remove(self, row, col)

    def Resize(self, *args):
        return _dive.Ellpack_Resize(self, *args)

    def Fill(self, value):
        return _dive.Ellpack_Fill(self, value)

    def Dump(self):
        return _dive.Ellpack_Dump(self)

    def __call__(self, *args):
        return _dive.Ellpack___call__(self, *args)

    def __add__(self, *args):
        return _dive.Ellpack___add__(self, *args)

    def __pos__(self):
        return _dive.Ellpack___pos__(self)

    def __sub__(self, *args):
        return _dive.Ellpack___sub__(self, *args)

    def __neg__(self):
        return _dive.Ellpack___neg__(self)

    def __mul__(self, *args):
        return _dive.Ellpack___mul__(self, *args)

    def SwapRows(self, row1, row2):
        return _dive.Ellpack_SwapRows(self, row1, row2)

    def SwapCols(self, col1, col2):
        return _dive.Ellpack_SwapCols(self, col1, col2)

    def Transpose(self):
        return _dive.Ellpack_Transpose(self)

    def Diagonal(self):
        return _dive.Ellpack_Diagonal(self)

    def Lower(self, diag):
        return _dive.Ellpack_Lower(self, diag)

    def LowerWithDiagonal(self):
        return _dive.Ellpack_LowerWithDiagonal(self)

    def LowerWithoutDiagonal(self):
        return _dive.Ellpack_LowerWithoutDiagonal(self)

    def Upper(self, diag):
        return _dive.Ellpack_Upper(self, diag)

    def UpperWithDiagonal(self):
        return _dive.Ellpack_UpperWithDiagonal(self)

    def UpperWithoutDiagonal(self):
        return _dive.Ellpack_UpperWithoutDiagonal(self)

    def Region(self, *args):
        return _dive.Ellpack_Region(self, *args)

    def GetRows(self):
        return _dive.Ellpack_GetRows(self)

    def GetCols(self):
        return _dive.Ellpack_GetCols(self)

    def GetWidth(self):
        return _dive.Ellpack_GetWidth(self)

    def GetValue(self, row, col):
        return _dive.Ellpack_GetValue(self, row, col)

    def GetCount(self):
        return _dive.Ellpack_GetCount(self)

    def GetPosition(self):
        return _dive.Ellpack_GetPosition(self)

    def GetData(self):
        return _dive.Ellpack_GetData(self)

    def SetValue(self, row, col, value):
        return _dive.Ellpack_SetValue(self, row, col, value)

    def __str__(self):
        return _dive.Ellpack___str__(self)

    def __radd__(self, value):
        return _dive.Ellpack___radd__(self, value)

    def __rsub__(self, value):
        return _dive.Ellpack___rsub__(self, value)

    def __rmul__(self, value):
        return _dive.Ellpack___rmul__(self, value)

# Register Ellpack in _dive:
_dive.Ellpack_swigregister(Ellpack)

def NormMax(_in):
    return _dive.NormMax(_in)

def NormP(*args):
    return _dive.NormP(*args)

def NormP2(*args):
    return _dive.NormP2(*args)

def Dot(in1, in2):
    return _dive.Dot(in1, in2)

def Cross(in1, in2):
    return _dive.Cross(in1, in2)

def DeterminantLUP(LU, permutation):
    return _dive.DeterminantLUP(LU, permutation)

def Determinant(A):
    return _dive.Determinant(A)

def Inverse(A):
    return _dive.Inverse(A)

def ScaleByVector(A, alpha):
    return _dive.ScaleByVector(A, alpha)

def Solve(A, b):
    return _dive.Solve(A, b)

def DecomposeLUP(LU, permutation, A):
    return _dive.DecomposeLUP(LU, permutation, A)

def InverseLUP(IA, LU, permutation):
    return _dive.InverseLUP(IA, LU, permutation)

def DiagonalLinearSystem(*args):
    return _dive.DiagonalLinearSystem(*args)

def ForwardLinearSystem(*args):
    return _dive.ForwardLinearSystem(*args)

def DirectLUP(x, LU, permutation, b):
    return _dive.DirectLUP(x, LU, permutation, b)

def IterativeCG(A, x, b, callbackIterative):
    return _dive.IterativeCG(A, x, b, callbackIterative)

def IterativeBiCGStab(A, x, b, callbackIterative):
    return _dive.IterativeBiCGStab(A, x, b, callbackIterative)

def WriteToFile(*args):
    return _dive.WriteToFile(*args)

def ReadFromFile(*args):
    return _dive.ReadFromFile(*args)

def ListVector(vector):
    return _dive.ListVector(vector)

def ListMatrix(*args):
    return _dive.ListMatrix(*args)

def RotationMatrix(*args):
    return _dive.RotationMatrix(*args)

def Rotate(*args):
    return _dive.Rotate(*args)

def Translate(point, axis, value):
    return _dive.Translate(point, axis, value)

def Mirror(point, axis):
    return _dive.Mirror(point, axis)

def Scale(point, value):
    return _dive.Scale(point, value)

def TablePointsRotate(input, axis, radians):
    return _dive.TablePointsRotate(input, axis, radians)

def TablePointsTranslate(input, axis, value):
    return _dive.TablePointsTranslate(input, axis, value)

def TablePointsMirror(input, axis):
    return _dive.TablePointsMirror(input, axis)

def TablePointsScale(input, value):
    return _dive.TablePointsScale(input, value)

def TableValuesScale(input, value):
    return _dive.TableValuesScale(input, value)

def TableValuesAdd(input, value):
    return _dive.TableValuesAdd(input, value)

def TableValuesClipBiggerThan(input, value, col):
    return _dive.TableValuesClipBiggerThan(input, value, col)

def TableValuesClipSmallerThan(input, value, col):
    return _dive.TableValuesClipSmallerThan(input, value, col)

def TableAppend(input1, input2):
    return _dive.TableAppend(input1, input2)


def GetItemVector(self, index):
    return self.GetValue(index)

def SetItemVector(self, index, value):
    return self.SetValue(index, value)

Vector.__getitem__ = GetItemVector
Vector.__setitem__ = SetItemVector

def GetItemMatrix(self, index):
    return self.GetValue(index[0], index[1])

def SetItemMatrix(self, index, value):
    return self.SetValue(index[0], index[1], value)

Matrix.__getitem__ = GetItemMatrix
Matrix.__setitem__ = SetItemMatrix

def GetItemEllpack(self, index):
    return self.GetValue(index[0], index[1])

def SetItemEllpack(self, index, value):
    return self.SetValue(index[0], index[1], value)

Ellpack.__getitem__ = GetItemEllpack
Ellpack.__setitem__ = SetItemEllpack

import ctypes

py_callback_iterative = ctypes.CFUNCTYPE(ctypes.c_longlong, ctypes.c_size_t, ctypes.c_double)

def IterativeCG(A, x, b, callback):

# wrap the python callback with a ctypes function pointer
    f = py_callback_iterative(callback)

# get the function pointer of the ctypes wrapper by casting it to void* and taking its value
    f_ptr = ctypes.cast(f, ctypes.c_void_p).value

    return _dive.IterativeCG(A, x, b, f_ptr)

def IterativeBiCGStab(A, x, b, callback):

# wrap the python callback with a ctypes function pointer
    f = py_callback_iterative(callback)

# get the function pointer of the ctypes wrapper by casting it to void* and taking its value
    f_ptr = ctypes.cast(f, ctypes.c_void_p).value

    return _dive.IterativeBiCGStab(A, x, b, f_ptr)


class vecBasis(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _dive.vecBasis_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _dive.vecBasis___nonzero__(self)

    def __bool__(self):
        return _dive.vecBasis___bool__(self)

    def __len__(self):
        return _dive.vecBasis___len__(self)

    def __getslice__(self, i, j):
        return _dive.vecBasis___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _dive.vecBasis___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _dive.vecBasis___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _dive.vecBasis___delitem__(self, *args)

    def __getitem__(self, *args):
        return _dive.vecBasis___getitem__(self, *args)

    def __setitem__(self, *args):
        return _dive.vecBasis___setitem__(self, *args)

    def pop(self):
        return _dive.vecBasis_pop(self)

    def append(self, x):
        return _dive.vecBasis_append(self, x)

    def empty(self):
        return _dive.vecBasis_empty(self)

    def size(self):
        return _dive.vecBasis_size(self)

    def swap(self, v):
        return _dive.vecBasis_swap(self, v)

    def begin(self):
        return _dive.vecBasis_begin(self)

    def end(self):
        return _dive.vecBasis_end(self)

    def rbegin(self):
        return _dive.vecBasis_rbegin(self)

    def rend(self):
        return _dive.vecBasis_rend(self)

    def clear(self):
        return _dive.vecBasis_clear(self)

    def get_allocator(self):
        return _dive.vecBasis_get_allocator(self)

    def pop_back(self):
        return _dive.vecBasis_pop_back(self)

    def erase(self, *args):
        return _dive.vecBasis_erase(self, *args)

    def __init__(self, *args):
        _dive.vecBasis_swiginit(self, _dive.new_vecBasis(*args))

    def push_back(self, x):
        return _dive.vecBasis_push_back(self, x)

    def front(self):
        return _dive.vecBasis_front(self)

    def back(self):
        return _dive.vecBasis_back(self)

    def assign(self, n, x):
        return _dive.vecBasis_assign(self, n, x)

    def resize(self, *args):
        return _dive.vecBasis_resize(self, *args)

    def insert(self, *args):
        return _dive.vecBasis_insert(self, *args)

    def reserve(self, n):
        return _dive.vecBasis_reserve(self, n)

    def capacity(self):
        return _dive.vecBasis_capacity(self)
    __swig_destroy__ = _dive.delete_vecBasis

# Register vecBasis in _dive:
_dive.vecBasis_swigregister(vecBasis)
EILIG_STOP = cvar.EILIG_STOP
EILIG_CONTINUE = cvar.EILIG_CONTINUE
EILIG_SUCCESS = cvar.EILIG_SUCCESS
EILIG_NOT_CONVERGED = cvar.EILIG_NOT_CONVERGED
EILIG_INVALID_TOLERANCE = cvar.EILIG_INVALID_TOLERANCE
EILIG_INVALID_FILE = cvar.EILIG_INVALID_FILE
EILIG_NULLPTR = cvar.EILIG_NULLPTR
messages = cvar.messages

class IBasis(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _dive.delete_IBasis

    def Distance(self, pt1, pt2):
        return _dive.IBasis_Distance(self, pt1, pt2)

    def DistanceSquared(self, pt1, pt2):
        return _dive.IBasis_DistanceSquared(self, pt1, pt2)

    def LocalToGlobal(self, pt):
        return _dive.IBasis_LocalToGlobal(self, pt)

    def LocalToGlobalVector(self, vec):
        return _dive.IBasis_LocalToGlobalVector(self, vec)

    def GlobalToLocal(self, pt):
        return _dive.IBasis_GlobalToLocal(self, pt)

    def GlobalToLocalVector(self, vec):
        return _dive.IBasis_GlobalToLocalVector(self, vec)

    def GetBasis(self):
        return _dive.IBasis_GetBasis(self)

    def GetOrigin(self):
        return _dive.IBasis_GetOrigin(self)

    def GetTag(self):
        return _dive.IBasis_GetTag(self)

    def GetDim(self):
        return _dive.IBasis_GetDim(self)

    def GetType(self):
        return _dive.IBasis_GetType(self)

    def Offset(self, *args):
        return _dive.IBasis_Offset(self, *args)

    def Rotate(self, axis, radians):
        return _dive.IBasis_Rotate(self, axis, radians)

    def SetTag(self, tag):
        return _dive.IBasis_SetTag(self, tag)

# Register IBasis in _dive:
_dive.IBasis_swigregister(IBasis)
basis_cartesian = cvar.basis_cartesian
basis_cylindrical = cvar.basis_cylindrical


def CreateBasisCartesian(*args):
    return _dive.CreateBasisCartesian(*args)
class Cartesian(IBasis):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _dive.delete_Cartesian

    @staticmethod
    def Create():
        return _dive.Cartesian_Create()

    def GetPtr(self, *args):
        return _dive.Cartesian_GetPtr(self, *args)

    def Distance(self, pt1, pt2):
        return _dive.Cartesian_Distance(self, pt1, pt2)

    def DistanceSquared(self, pt1, pt2):
        return _dive.Cartesian_DistanceSquared(self, pt1, pt2)

    def LocalToGlobal(self, pt):
        return _dive.Cartesian_LocalToGlobal(self, pt)

    def LocalToGlobalVector(self, vec):
        return _dive.Cartesian_LocalToGlobalVector(self, vec)

    def GlobalToLocal(self, pt):
        return _dive.Cartesian_GlobalToLocal(self, pt)

    def GlobalToLocalVector(self, vec):
        return _dive.Cartesian_GlobalToLocalVector(self, vec)

    def GetBasis(self):
        return _dive.Cartesian_GetBasis(self)

    def GetOrigin(self):
        return _dive.Cartesian_GetOrigin(self)

    def GetTag(self):
        return _dive.Cartesian_GetTag(self)

    def GetDim(self):
        return _dive.Cartesian_GetDim(self)

    def GetType(self):
        return _dive.Cartesian_GetType(self)

    def Offset(self, *args):
        return _dive.Cartesian_Offset(self, *args)

    def Rotate(self, axis, radians):
        return _dive.Cartesian_Rotate(self, axis, radians)

    def SetTag(self, tag):
        return _dive.Cartesian_SetTag(self, tag)

# Register Cartesian in _dive:
_dive.Cartesian_swigregister(Cartesian)

def CreateBasisCylindrical(*args):
    return _dive.CreateBasisCylindrical(*args)
class Cylindrical(IBasis):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _dive.delete_Cylindrical

    @staticmethod
    def Create():
        return _dive.Cylindrical_Create()

    def GetPtr(self, *args):
        return _dive.Cylindrical_GetPtr(self, *args)

    def Distance(self, pt1, pt2):
        return _dive.Cylindrical_Distance(self, pt1, pt2)

    def DistanceSquared(self, pt1, pt2):
        return _dive.Cylindrical_DistanceSquared(self, pt1, pt2)

    def LocalToGlobal(self, pt):
        return _dive.Cylindrical_LocalToGlobal(self, pt)

    def LocalToGlobalVector(self, vec):
        return _dive.Cylindrical_LocalToGlobalVector(self, vec)

    def GlobalToLocal(self, pt):
        return _dive.Cylindrical_GlobalToLocal(self, pt)

    def GlobalToLocalVector(self, vec):
        return _dive.Cylindrical_GlobalToLocalVector(self, vec)

    def GetBasis(self):
        return _dive.Cylindrical_GetBasis(self)

    def GetOrigin(self):
        return _dive.Cylindrical_GetOrigin(self)

    def GetTag(self):
        return _dive.Cylindrical_GetTag(self)

    def GetDim(self):
        return _dive.Cylindrical_GetDim(self)

    def GetType(self):
        return _dive.Cylindrical_GetType(self)

    def Offset(self, *args):
        return _dive.Cylindrical_Offset(self, *args)

    def Rotate(self, axis, radians):
        return _dive.Cylindrical_Rotate(self, axis, radians)

    def SetTag(self, tag):
        return _dive.Cylindrical_SetTag(self, tag)

# Register Cylindrical in _dive:
_dive.Cylindrical_swigregister(Cylindrical)
class ITimer(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _dive.delete_ITimer

    def GetCurrent(self):
        return _dive.ITimer_GetCurrent(self)

    def GetInitial(self):
        return _dive.ITimer_GetInitial(self)

    def GetEnd(self):
        return _dive.ITimer_GetEnd(self)

    def GetStepSize(self):
        return _dive.ITimer_GetStepSize(self)

    def GetStepNumber(self):
        return _dive.ITimer_GetStepNumber(self)

    def GetType(self):
        return _dive.ITimer_GetType(self)

    def GetTag(self):
        return _dive.ITimer_GetTag(self)

    def SetNextStep(self):
        return _dive.ITimer_SetNextStep(self)

    def SetInitial(self, initialTime):
        return _dive.ITimer_SetInitial(self, initialTime)

    def SetEnd(self, endTime):
        return _dive.ITimer_SetEnd(self, endTime)

    def SetStepSize(self, stepSize):
        return _dive.ITimer_SetStepSize(self, stepSize)

    def SetTag(self, tag):
        return _dive.ITimer_SetTag(self, tag)

# Register ITimer in _dive:
_dive.ITimer_swigregister(ITimer)
timer_stationary = cvar.timer_stationary
timer_stepped = cvar.timer_stepped


def CreateTimerStationary(*args):
    return _dive.CreateTimerStationary(*args)
class TimerStationary(ITimer):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _dive.delete_TimerStationary

    @staticmethod
    def Create():
        return _dive.TimerStationary_Create()

    def GetPtr(self, *args):
        return _dive.TimerStationary_GetPtr(self, *args)

    def GetCurrent(self):
        return _dive.TimerStationary_GetCurrent(self)

    def GetInitial(self):
        return _dive.TimerStationary_GetInitial(self)

    def GetEnd(self):
        return _dive.TimerStationary_GetEnd(self)

    def GetStepSize(self):
        return _dive.TimerStationary_GetStepSize(self)

    def GetStepNumber(self):
        return _dive.TimerStationary_GetStepNumber(self)

    def GetType(self):
        return _dive.TimerStationary_GetType(self)

    def GetTag(self):
        return _dive.TimerStationary_GetTag(self)

    def SetNextStep(self):
        return _dive.TimerStationary_SetNextStep(self)

    def SetInitial(self, initialTime):
        return _dive.TimerStationary_SetInitial(self, initialTime)

    def SetEnd(self, endTime):
        return _dive.TimerStationary_SetEnd(self, endTime)

    def SetStepSize(self, stepSize):
        return _dive.TimerStationary_SetStepSize(self, stepSize)

    def SetTag(self, tag):
        return _dive.TimerStationary_SetTag(self, tag)

# Register TimerStationary in _dive:
_dive.TimerStationary_swigregister(TimerStationary)

def CreateTimerStepped(*args):
    return _dive.CreateTimerStepped(*args)
class TimerStepped(ITimer):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _dive.delete_TimerStepped

    @staticmethod
    def Create():
        return _dive.TimerStepped_Create()

    def GetPtr(self, *args):
        return _dive.TimerStepped_GetPtr(self, *args)

    def GetCurrent(self):
        return _dive.TimerStepped_GetCurrent(self)

    def GetInitial(self):
        return _dive.TimerStepped_GetInitial(self)

    def GetEnd(self):
        return _dive.TimerStepped_GetEnd(self)

    def GetStepSize(self):
        return _dive.TimerStepped_GetStepSize(self)

    def GetStepNumber(self):
        return _dive.TimerStepped_GetStepNumber(self)

    def GetType(self):
        return _dive.TimerStepped_GetType(self)

    def GetTag(self):
        return _dive.TimerStepped_GetTag(self)

    def SetNextStep(self):
        return _dive.TimerStepped_SetNextStep(self)

    def SetInitial(self, initialTime):
        return _dive.TimerStepped_SetInitial(self, initialTime)

    def SetEnd(self, endTime):
        return _dive.TimerStepped_SetEnd(self, endTime)

    def SetStepSize(self, stepSize):
        return _dive.TimerStepped_SetStepSize(self, stepSize)

    def SetTag(self, tag):
        return _dive.TimerStepped_SetTag(self, tag)

# Register TimerStepped in _dive:
_dive.TimerStepped_swigregister(TimerStepped)
class IValue(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _dive.delete_IValue

    def GetType(self):
        return _dive.IValue_GetType(self)

    def GetName(self):
        return _dive.IValue_GetName(self)

    def GetKey(self):
        return _dive.IValue_GetKey(self)

    def SetName(self, name):
        return _dive.IValue_SetName(self, name)

    def SetKey(self, key):
        return _dive.IValue_SetKey(self, key)

# Register IValue in _dive:
_dive.IValue_swigregister(IValue)
headerValues = cvar.headerValues
value_bool = cvar.value_bool
value_string = cvar.value_string
value_scalar = cvar.value_scalar
value_scalar_time = cvar.value_scalar_time
value_scalar_function = cvar.value_scalar_function
value_scalar_function_time = cvar.value_scalar_function_time
value_scalar_interpolation = cvar.value_scalar_interpolation
value_scalar_congruent = cvar.value_scalar_congruent
value_scalar1D = cvar.value_scalar1D
value_scalar1D_time = cvar.value_scalar1D_time
value_scalar1D_function = cvar.value_scalar1D_function
value_scalar1D_function_time = cvar.value_scalar1D_function_time
value_scalar1D_interpolation = cvar.value_scalar1D_interpolation
value_scalar1D_congruent = cvar.value_scalar1D_congruent
value_scalar2D = cvar.value_scalar2D
value_scalar2D_time = cvar.value_scalar2D_time
value_scalar2D_function = cvar.value_scalar2D_function
value_scalar2D_function_time = cvar.value_scalar2D_function_time
value_scalar2D_interpolation = cvar.value_scalar2D_interpolation
value_scalar2D_congruent = cvar.value_scalar2D_congruent
value_scalar3D = cvar.value_scalar3D
value_scalar3D_time = cvar.value_scalar3D_time
value_scalar3D_function = cvar.value_scalar3D_function
value_scalar3D_function_time = cvar.value_scalar3D_function_time
value_scalar3D_interpolation = cvar.value_scalar3D_interpolation
value_scalar3D_congruent = cvar.value_scalar3D_congruent
value_vector = cvar.value_vector
value_vector_scalars = cvar.value_vector_scalars
value_vector_scalars_time = cvar.value_vector_scalars_time
value_vector_interpolation = cvar.value_vector_interpolation
value_vector_congruent = cvar.value_vector_congruent
value_vector1D = cvar.value_vector1D
value_vector1D_scalars = cvar.value_vector1D_scalars
value_vector1D_scalars_time = cvar.value_vector1D_scalars_time
value_vector1D_interpolation = cvar.value_vector1D_interpolation
value_vector1D_congruent = cvar.value_vector1D_congruent
value_vector2D = cvar.value_vector2D
value_vector2D_scalars = cvar.value_vector2D_scalars
value_vector2D_scalars_time = cvar.value_vector2D_scalars_time
value_vector2D_interpolation = cvar.value_vector2D_interpolation
value_vector2D_congruent = cvar.value_vector2D_congruent
value_vector3D = cvar.value_vector3D
value_vector3D_scalars = cvar.value_vector3D_scalars
value_vector3D_scalars_time = cvar.value_vector3D_scalars_time
value_vector3D_interpolation = cvar.value_vector3D_interpolation
value_vector3D_congruent = cvar.value_vector3D_congruent
value_matrix = cvar.value_matrix
value_matrix_scalars = cvar.value_matrix_scalars
value_matrix_scalars_time = cvar.value_matrix_scalars_time
value_matrix_interpolation = cvar.value_matrix_interpolation
value_matrix_congruent = cvar.value_matrix_congruent
value_matrix1D = cvar.value_matrix1D
value_matrix1D_scalars = cvar.value_matrix1D_scalars
value_matrix1D_scalars_time = cvar.value_matrix1D_scalars_time
value_matrix1D_interpolaiton = cvar.value_matrix1D_interpolaiton
value_matrix1D_congruent = cvar.value_matrix1D_congruent
value_matrix2D = cvar.value_matrix2D
value_matrix2D_scalars = cvar.value_matrix2D_scalars
value_matrix2D_scalars_time = cvar.value_matrix2D_scalars_time
value_matrix2D_interpolation = cvar.value_matrix2D_interpolation
value_matrix2D_congruent = cvar.value_matrix2D_congruent
value_matrix3D = cvar.value_matrix3D
value_matrix3D_scalars = cvar.value_matrix3D_scalars
value_matrix3D_scalars_time = cvar.value_matrix3D_scalars_time
value_matrix3D_interpolation = cvar.value_matrix3D_interpolation
value_matrix3D_congruent = cvar.value_matrix3D_congruent

class IBool(IValue):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _dive.delete_IBool

    def GetValue(self):
        return _dive.IBool_GetValue(self)

# Register IBool in _dive:
_dive.IBool_swigregister(IBool)
class IString(IValue):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _dive.delete_IString

    def GetValue(self):
        return _dive.IString_GetValue(self)

# Register IString in _dive:
_dive.IString_swigregister(IString)
class IScalar(IValue):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _dive.delete_IScalar

    def GetValue(self):
        return _dive.IScalar_GetValue(self)

# Register IScalar in _dive:
_dive.IScalar_swigregister(IScalar)
class IScalarTime(IValue):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _dive.delete_IScalarTime

    def GetValue(self, time):
        return _dive.IScalarTime_GetValue(self, time)

# Register IScalarTime in _dive:
_dive.IScalarTime_swigregister(IScalarTime)
class IScalar1D(IValue):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _dive.delete_IScalar1D

    def GetValue(self, *args):
        return _dive.IScalar1D_GetValue(self, *args)

# Register IScalar1D in _dive:
_dive.IScalar1D_swigregister(IScalar1D)
class IScalar1DTime(IValue):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _dive.delete_IScalar1DTime

    def GetValue(self, *args):
        return _dive.IScalar1DTime_GetValue(self, *args)

# Register IScalar1DTime in _dive:
_dive.IScalar1DTime_swigregister(IScalar1DTime)
class IScalar2D(IValue):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _dive.delete_IScalar2D

    def GetValue(self, *args):
        return _dive.IScalar2D_GetValue(self, *args)

# Register IScalar2D in _dive:
_dive.IScalar2D_swigregister(IScalar2D)
class IScalar2DTime(IValue):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _dive.delete_IScalar2DTime

    def GetValue(self, *args):
        return _dive.IScalar2DTime_GetValue(self, *args)

# Register IScalar2DTime in _dive:
_dive.IScalar2DTime_swigregister(IScalar2DTime)
class IScalar3D(IValue):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _dive.delete_IScalar3D

    def GetValue(self, *args):
        return _dive.IScalar3D_GetValue(self, *args)

# Register IScalar3D in _dive:
_dive.IScalar3D_swigregister(IScalar3D)
class IScalar3DTime(IValue):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _dive.delete_IScalar3DTime

    def GetValue(self, *args):
        return _dive.IScalar3DTime_GetValue(self, *args)

# Register IScalar3DTime in _dive:
_dive.IScalar3DTime_swigregister(IScalar3DTime)
class IVector(IValue):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _dive.delete_IVector

    def GetValue(self):
        return _dive.IVector_GetValue(self)

# Register IVector in _dive:
_dive.IVector_swigregister(IVector)
class IVectorTime(IValue):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _dive.delete_IVectorTime

    def GetValue(self, time):
        return _dive.IVectorTime_GetValue(self, time)

# Register IVectorTime in _dive:
_dive.IVectorTime_swigregister(IVectorTime)
class IVector1D(IValue):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _dive.delete_IVector1D

    def GetValue(self, *args):
        return _dive.IVector1D_GetValue(self, *args)

# Register IVector1D in _dive:
_dive.IVector1D_swigregister(IVector1D)
class IVector1DTime(IValue):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _dive.delete_IVector1DTime

    def GetValue(self, *args):
        return _dive.IVector1DTime_GetValue(self, *args)

# Register IVector1DTime in _dive:
_dive.IVector1DTime_swigregister(IVector1DTime)
class IVector2D(IValue):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _dive.delete_IVector2D

    def GetValue(self, *args):
        return _dive.IVector2D_GetValue(self, *args)

# Register IVector2D in _dive:
_dive.IVector2D_swigregister(IVector2D)
class IVector2DTime(IValue):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _dive.delete_IVector2DTime

    def GetValue(self, *args):
        return _dive.IVector2DTime_GetValue(self, *args)

# Register IVector2DTime in _dive:
_dive.IVector2DTime_swigregister(IVector2DTime)
class IVector3D(IValue):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _dive.delete_IVector3D

    def GetValue(self, *args):
        return _dive.IVector3D_GetValue(self, *args)

# Register IVector3D in _dive:
_dive.IVector3D_swigregister(IVector3D)
class IVector3DTime(IValue):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _dive.delete_IVector3DTime

    def GetValue(self, *args):
        return _dive.IVector3DTime_GetValue(self, *args)

# Register IVector3DTime in _dive:
_dive.IVector3DTime_swigregister(IVector3DTime)
class IMatrix(IValue):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _dive.delete_IMatrix

    def GetValue(self):
        return _dive.IMatrix_GetValue(self)

# Register IMatrix in _dive:
_dive.IMatrix_swigregister(IMatrix)
class IMatrixTime(IValue):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _dive.delete_IMatrixTime

    def GetValue(self, time):
        return _dive.IMatrixTime_GetValue(self, time)

# Register IMatrixTime in _dive:
_dive.IMatrixTime_swigregister(IMatrixTime)
class IMatrix1D(IValue):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _dive.delete_IMatrix1D

    def GetValue(self, *args):
        return _dive.IMatrix1D_GetValue(self, *args)

# Register IMatrix1D in _dive:
_dive.IMatrix1D_swigregister(IMatrix1D)
class IMatrix1DTime(IValue):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _dive.delete_IMatrix1DTime

    def GetValue(self, *args):
        return _dive.IMatrix1DTime_GetValue(self, *args)

# Register IMatrix1DTime in _dive:
_dive.IMatrix1DTime_swigregister(IMatrix1DTime)
class IMatrix2D(IValue):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _dive.delete_IMatrix2D

    def GetValue(self, *args):
        return _dive.IMatrix2D_GetValue(self, *args)

# Register IMatrix2D in _dive:
_dive.IMatrix2D_swigregister(IMatrix2D)
class IMatrix2DTime(IValue):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _dive.delete_IMatrix2DTime

    def GetValue(self, *args):
        return _dive.IMatrix2DTime_GetValue(self, *args)

# Register IMatrix2DTime in _dive:
_dive.IMatrix2DTime_swigregister(IMatrix2DTime)
class IMatrix3D(IValue):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _dive.delete_IMatrix3D

    def GetValue(self, *args):
        return _dive.IMatrix3D_GetValue(self, *args)

# Register IMatrix3D in _dive:
_dive.IMatrix3D_swigregister(IMatrix3D)
class IMatrix3DTime(IValue):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _dive.delete_IMatrix3DTime

    def GetValue(self, *args):
        return _dive.IMatrix3DTime_GetValue(self, *args)

# Register IMatrix3DTime in _dive:
_dive.IMatrix3DTime_swigregister(IMatrix3DTime)

def CreateValueBool(*args):
    return _dive.CreateValueBool(*args)

def CastToValueBool(value):
    return _dive.CastToValueBool(value)
class ValueBool(IBool):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _dive.delete_ValueBool

    @staticmethod
    def Create():
        return _dive.ValueBool_Create()

    def GetType(self):
        return _dive.ValueBool_GetType(self)

    def GetName(self):
        return _dive.ValueBool_GetName(self)

    def GetKey(self):
        return _dive.ValueBool_GetKey(self)

    def GetValue(self):
        return _dive.ValueBool_GetValue(self)

    def SetName(self, name):
        return _dive.ValueBool_SetName(self, name)

    def SetKey(self, key):
        return _dive.ValueBool_SetKey(self, key)

    def SetValue(self, value):
        return _dive.ValueBool_SetValue(self, value)

# Register ValueBool in _dive:
_dive.ValueBool_swigregister(ValueBool)

def CreateValueString(*args):
    return _dive.CreateValueString(*args)

def CastToValueString(value):
    return _dive.CastToValueString(value)
class ValueString(IString):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _dive.delete_ValueString

    @staticmethod
    def Create():
        return _dive.ValueString_Create()

    def GetType(self):
        return _dive.ValueString_GetType(self)

    def GetName(self):
        return _dive.ValueString_GetName(self)

    def GetKey(self):
        return _dive.ValueString_GetKey(self)

    def GetValue(self):
        return _dive.ValueString_GetValue(self)

    def SetName(self, name):
        return _dive.ValueString_SetName(self, name)

    def SetKey(self, key):
        return _dive.ValueString_SetKey(self, key)

    def SetValue(self, value):
        return _dive.ValueString_SetValue(self, value)

# Register ValueString in _dive:
_dive.ValueString_swigregister(ValueString)

def CreateValueScalar(*args):
    return _dive.CreateValueScalar(*args)

def CastToValueScalar(value):
    return _dive.CastToValueScalar(value)
class ValueScalar(IScalar):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _dive.delete_ValueScalar

    @staticmethod
    def Create():
        return _dive.ValueScalar_Create()

    def GetType(self):
        return _dive.ValueScalar_GetType(self)

    def GetName(self):
        return _dive.ValueScalar_GetName(self)

    def GetKey(self):
        return _dive.ValueScalar_GetKey(self)

    def GetValue(self):
        return _dive.ValueScalar_GetValue(self)

    def SetName(self, name):
        return _dive.ValueScalar_SetName(self, name)

    def SetKey(self, key):
        return _dive.ValueScalar_SetKey(self, key)

    def SetValue(self, value):
        return _dive.ValueScalar_SetValue(self, value)

# Register ValueScalar in _dive:
_dive.ValueScalar_swigregister(ValueScalar)

def CreateValueScalar1D(*args):
    return _dive.CreateValueScalar1D(*args)

def CastToValueScalar1D(value):
    return _dive.CastToValueScalar1D(value)
class ValueScalar1D(IScalar1D):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _dive.delete_ValueScalar1D

    @staticmethod
    def Create():
        return _dive.ValueScalar1D_Create()

    def GetType(self):
        return _dive.ValueScalar1D_GetType(self)

    def GetName(self):
        return _dive.ValueScalar1D_GetName(self)

    def GetKey(self):
        return _dive.ValueScalar1D_GetKey(self)

    def GetValue(self, *args):
        return _dive.ValueScalar1D_GetValue(self, *args)

    def SetName(self, name):
        return _dive.ValueScalar1D_SetName(self, name)

    def SetKey(self, key):
        return _dive.ValueScalar1D_SetKey(self, key)

    def SetValue(self, value):
        return _dive.ValueScalar1D_SetValue(self, value)

# Register ValueScalar1D in _dive:
_dive.ValueScalar1D_swigregister(ValueScalar1D)

def CreateValueScalar2D(*args):
    return _dive.CreateValueScalar2D(*args)

def CastToValueScalar2D(value):
    return _dive.CastToValueScalar2D(value)
class ValueScalar2D(IScalar2D):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _dive.delete_ValueScalar2D

    @staticmethod
    def Create():
        return _dive.ValueScalar2D_Create()

    def GetType(self):
        return _dive.ValueScalar2D_GetType(self)

    def GetName(self):
        return _dive.ValueScalar2D_GetName(self)

    def GetKey(self):
        return _dive.ValueScalar2D_GetKey(self)

    def GetValue(self, *args):
        return _dive.ValueScalar2D_GetValue(self, *args)

    def SetName(self, name):
        return _dive.ValueScalar2D_SetName(self, name)

    def SetKey(self, key):
        return _dive.ValueScalar2D_SetKey(self, key)

    def SetValue(self, value):
        return _dive.ValueScalar2D_SetValue(self, value)

# Register ValueScalar2D in _dive:
_dive.ValueScalar2D_swigregister(ValueScalar2D)

def CreateValueScalar3D(*args):
    return _dive.CreateValueScalar3D(*args)

def CastToValueScalar3D(value):
    return _dive.CastToValueScalar3D(value)
class ValueScalar3D(IScalar3D):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _dive.delete_ValueScalar3D

    @staticmethod
    def Create():
        return _dive.ValueScalar3D_Create()

    def GetType(self):
        return _dive.ValueScalar3D_GetType(self)

    def GetName(self):
        return _dive.ValueScalar3D_GetName(self)

    def GetKey(self):
        return _dive.ValueScalar3D_GetKey(self)

    def GetValue(self, *args):
        return _dive.ValueScalar3D_GetValue(self, *args)

    def SetName(self, name):
        return _dive.ValueScalar3D_SetName(self, name)

    def SetKey(self, key):
        return _dive.ValueScalar3D_SetKey(self, key)

    def SetValue(self, value):
        return _dive.ValueScalar3D_SetValue(self, value)

# Register ValueScalar3D in _dive:
_dive.ValueScalar3D_swigregister(ValueScalar3D)

def CreateValueScalarTime(*args):
    return _dive.CreateValueScalarTime(*args)

def CastToValueScalarTime(value):
    return _dive.CastToValueScalarTime(value)
class ValueScalarTime(IScalarTime):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _dive.delete_ValueScalarTime

    @staticmethod
    def Create():
        return _dive.ValueScalarTime_Create()

    def GetType(self):
        return _dive.ValueScalarTime_GetType(self)

    def GetName(self):
        return _dive.ValueScalarTime_GetName(self)

    def GetKey(self):
        return _dive.ValueScalarTime_GetKey(self)

    def GetValue(self, time):
        return _dive.ValueScalarTime_GetValue(self, time)

    def SetName(self, name):
        return _dive.ValueScalarTime_SetName(self, name)

    def SetKey(self, key):
        return _dive.ValueScalarTime_SetKey(self, key)

    def SetValue(self, value):
        return _dive.ValueScalarTime_SetValue(self, value)

# Register ValueScalarTime in _dive:
_dive.ValueScalarTime_swigregister(ValueScalarTime)

def CreateValueScalar1DTime(*args):
    return _dive.CreateValueScalar1DTime(*args)

def CastToValueScalar1DTime(value):
    return _dive.CastToValueScalar1DTime(value)
class ValueScalar1DTime(IScalar1DTime):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _dive.delete_ValueScalar1DTime

    @staticmethod
    def Create():
        return _dive.ValueScalar1DTime_Create()

    def GetType(self):
        return _dive.ValueScalar1DTime_GetType(self)

    def GetName(self):
        return _dive.ValueScalar1DTime_GetName(self)

    def GetKey(self):
        return _dive.ValueScalar1DTime_GetKey(self)

    def GetValue(self, *args):
        return _dive.ValueScalar1DTime_GetValue(self, *args)

    def SetName(self, name):
        return _dive.ValueScalar1DTime_SetName(self, name)

    def SetKey(self, key):
        return _dive.ValueScalar1DTime_SetKey(self, key)

    def SetValue(self, value):
        return _dive.ValueScalar1DTime_SetValue(self, value)

# Register ValueScalar1DTime in _dive:
_dive.ValueScalar1DTime_swigregister(ValueScalar1DTime)

def CreateValueScalar2DTime(*args):
    return _dive.CreateValueScalar2DTime(*args)

def CastToValueScalar2DTime(value):
    return _dive.CastToValueScalar2DTime(value)
class ValueScalar2DTime(IScalar2DTime):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _dive.delete_ValueScalar2DTime

    @staticmethod
    def Create():
        return _dive.ValueScalar2DTime_Create()

    def GetType(self):
        return _dive.ValueScalar2DTime_GetType(self)

    def GetName(self):
        return _dive.ValueScalar2DTime_GetName(self)

    def GetKey(self):
        return _dive.ValueScalar2DTime_GetKey(self)

    def GetValue(self, *args):
        return _dive.ValueScalar2DTime_GetValue(self, *args)

    def SetName(self, name):
        return _dive.ValueScalar2DTime_SetName(self, name)

    def SetKey(self, key):
        return _dive.ValueScalar2DTime_SetKey(self, key)

    def SetValue(self, value):
        return _dive.ValueScalar2DTime_SetValue(self, value)

# Register ValueScalar2DTime in _dive:
_dive.ValueScalar2DTime_swigregister(ValueScalar2DTime)

def CreateValueScalar3DTime(*args):
    return _dive.CreateValueScalar3DTime(*args)

def CastToValueScalar3DTime(value):
    return _dive.CastToValueScalar3DTime(value)
class ValueScalar3DTime(IScalar3DTime):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _dive.delete_ValueScalar3DTime

    @staticmethod
    def Create():
        return _dive.ValueScalar3DTime_Create()

    def GetType(self):
        return _dive.ValueScalar3DTime_GetType(self)

    def GetName(self):
        return _dive.ValueScalar3DTime_GetName(self)

    def GetKey(self):
        return _dive.ValueScalar3DTime_GetKey(self)

    def GetValue(self, *args):
        return _dive.ValueScalar3DTime_GetValue(self, *args)

    def SetName(self, name):
        return _dive.ValueScalar3DTime_SetName(self, name)

    def SetKey(self, key):
        return _dive.ValueScalar3DTime_SetKey(self, key)

    def SetValue(self, value):
        return _dive.ValueScalar3DTime_SetValue(self, value)

# Register ValueScalar3DTime in _dive:
_dive.ValueScalar3DTime_swigregister(ValueScalar3DTime)

def CreateValueScalarFunction(*args):
    return _dive.CreateValueScalarFunction(*args)

def CastToValueScalarFunction(value):
    return _dive.CastToValueScalarFunction(value)
class ValueScalarFunction(IScalar):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _dive.delete_ValueScalarFunction

    @staticmethod
    def Create():
        return _dive.ValueScalarFunction_Create()

    def GetType(self):
        return _dive.ValueScalarFunction_GetType(self)

    def GetName(self):
        return _dive.ValueScalarFunction_GetName(self)

    def GetKey(self):
        return _dive.ValueScalarFunction_GetKey(self)

    def GetValue(self):
        return _dive.ValueScalarFunction_GetValue(self)

    def SetName(self, name):
        return _dive.ValueScalarFunction_SetName(self, name)

    def SetKey(self, key):
        return _dive.ValueScalarFunction_SetKey(self, key)

    def SetFunction(self, function_Pointer_D):
        return _dive.ValueScalarFunction_SetFunction(self, function_Pointer_D)

# Register ValueScalarFunction in _dive:
_dive.ValueScalarFunction_swigregister(ValueScalarFunction)

def CreateValueScalar1DFunction(*args):
    return _dive.CreateValueScalar1DFunction(*args)

def CastToValueScalar1DFunction(value):
    return _dive.CastToValueScalar1DFunction(value)
class ValueScalar1DFunction(IScalar1D):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _dive.delete_ValueScalar1DFunction

    @staticmethod
    def Create():
        return _dive.ValueScalar1DFunction_Create()

    def GetType(self):
        return _dive.ValueScalar1DFunction_GetType(self)

    def GetName(self):
        return _dive.ValueScalar1DFunction_GetName(self)

    def GetKey(self):
        return _dive.ValueScalar1DFunction_GetKey(self)

    def GetValue(self, *args):
        return _dive.ValueScalar1DFunction_GetValue(self, *args)

    def SetName(self, name):
        return _dive.ValueScalar1DFunction_SetName(self, name)

    def SetKey(self, key):
        return _dive.ValueScalar1DFunction_SetKey(self, key)

    def SetFunction(self, function_Pointer_D_D):
        return _dive.ValueScalar1DFunction_SetFunction(self, function_Pointer_D_D)

# Register ValueScalar1DFunction in _dive:
_dive.ValueScalar1DFunction_swigregister(ValueScalar1DFunction)

def CreateValueScalar2DFunction(function_Pointer_D_DD, name, key):
    return _dive.CreateValueScalar2DFunction(function_Pointer_D_DD, name, key)

def CastToValueScalar2DFunction(value):
    return _dive.CastToValueScalar2DFunction(value)
class ValueScalar2DFunction(IScalar2D):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _dive.delete_ValueScalar2DFunction

    @staticmethod
    def Create():
        return _dive.ValueScalar2DFunction_Create()

    def GetType(self):
        return _dive.ValueScalar2DFunction_GetType(self)

    def GetName(self):
        return _dive.ValueScalar2DFunction_GetName(self)

    def GetKey(self):
        return _dive.ValueScalar2DFunction_GetKey(self)

    def GetValue(self, *args):
        return _dive.ValueScalar2DFunction_GetValue(self, *args)

    def SetName(self, name):
        return _dive.ValueScalar2DFunction_SetName(self, name)

    def SetKey(self, key):
        return _dive.ValueScalar2DFunction_SetKey(self, key)

    def SetFunction(self, function_Pointer_D_DD):
        return _dive.ValueScalar2DFunction_SetFunction(self, function_Pointer_D_DD)

# Register ValueScalar2DFunction in _dive:
_dive.ValueScalar2DFunction_swigregister(ValueScalar2DFunction)

def CreateValueScalar3DFunction(function_Pointer_D_DDD, name, key):
    return _dive.CreateValueScalar3DFunction(function_Pointer_D_DDD, name, key)

def CastToValueScalar3DFunction(value):
    return _dive.CastToValueScalar3DFunction(value)
class ValueScalar3DFunction(IScalar3D):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _dive.delete_ValueScalar3DFunction

    @staticmethod
    def Create():
        return _dive.ValueScalar3DFunction_Create()

    def GetType(self):
        return _dive.ValueScalar3DFunction_GetType(self)

    def GetName(self):
        return _dive.ValueScalar3DFunction_GetName(self)

    def GetKey(self):
        return _dive.ValueScalar3DFunction_GetKey(self)

    def GetValue(self, *args):
        return _dive.ValueScalar3DFunction_GetValue(self, *args)

    def SetName(self, name):
        return _dive.ValueScalar3DFunction_SetName(self, name)

    def SetKey(self, key):
        return _dive.ValueScalar3DFunction_SetKey(self, key)

    def SetFunction(self, function_Pointer_D_DDD):
        return _dive.ValueScalar3DFunction_SetFunction(self, function_Pointer_D_DDD)

# Register ValueScalar3DFunction in _dive:
_dive.ValueScalar3DFunction_swigregister(ValueScalar3DFunction)

def CreateValueScalarFunctionTime(*args):
    return _dive.CreateValueScalarFunctionTime(*args)

def CastToValueScalarFunctionTime(value):
    return _dive.CastToValueScalarFunctionTime(value)
class ValueScalarFunctionTime(IScalarTime):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _dive.delete_ValueScalarFunctionTime

    @staticmethod
    def Create():
        return _dive.ValueScalarFunctionTime_Create()

    def GetType(self):
        return _dive.ValueScalarFunctionTime_GetType(self)

    def GetName(self):
        return _dive.ValueScalarFunctionTime_GetName(self)

    def GetKey(self):
        return _dive.ValueScalarFunctionTime_GetKey(self)

    def GetValue(self, time):
        return _dive.ValueScalarFunctionTime_GetValue(self, time)

    def SetName(self, name):
        return _dive.ValueScalarFunctionTime_SetName(self, name)

    def SetKey(self, key):
        return _dive.ValueScalarFunctionTime_SetKey(self, key)

    def SetFunction(self, function_Pointer_D_D):
        return _dive.ValueScalarFunctionTime_SetFunction(self, function_Pointer_D_D)

# Register ValueScalarFunctionTime in _dive:
_dive.ValueScalarFunctionTime_swigregister(ValueScalarFunctionTime)

def CreateValueScalar1DFunctionTime(*args):
    return _dive.CreateValueScalar1DFunctionTime(*args)

def CastToValueScalar1DFunctionTime(value):
    return _dive.CastToValueScalar1DFunctionTime(value)
class ValueScalar1DFunctionTime(IScalar1DTime):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _dive.delete_ValueScalar1DFunctionTime

    @staticmethod
    def Create():
        return _dive.ValueScalar1DFunctionTime_Create()

    def GetType(self):
        return _dive.ValueScalar1DFunctionTime_GetType(self)

    def GetName(self):
        return _dive.ValueScalar1DFunctionTime_GetName(self)

    def GetKey(self):
        return _dive.ValueScalar1DFunctionTime_GetKey(self)

    def GetValue(self, *args):
        return _dive.ValueScalar1DFunctionTime_GetValue(self, *args)

    def SetName(self, name):
        return _dive.ValueScalar1DFunctionTime_SetName(self, name)

    def SetKey(self, key):
        return _dive.ValueScalar1DFunctionTime_SetKey(self, key)

    def SetFunction(self, function_Pointer_D_DD):
        return _dive.ValueScalar1DFunctionTime_SetFunction(self, function_Pointer_D_DD)

# Register ValueScalar1DFunctionTime in _dive:
_dive.ValueScalar1DFunctionTime_swigregister(ValueScalar1DFunctionTime)

def CreateValueScalar2DFunctionTime(*args):
    return _dive.CreateValueScalar2DFunctionTime(*args)

def CastToValueScalar2DFunctionTime(value):
    return _dive.CastToValueScalar2DFunctionTime(value)
class ValueScalar2DFunctionTime(IScalar2DTime):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _dive.delete_ValueScalar2DFunctionTime

    @staticmethod
    def Create():
        return _dive.ValueScalar2DFunctionTime_Create()

    def GetType(self):
        return _dive.ValueScalar2DFunctionTime_GetType(self)

    def GetName(self):
        return _dive.ValueScalar2DFunctionTime_GetName(self)

    def GetKey(self):
        return _dive.ValueScalar2DFunctionTime_GetKey(self)

    def GetValue(self, *args):
        return _dive.ValueScalar2DFunctionTime_GetValue(self, *args)

    def SetName(self, name):
        return _dive.ValueScalar2DFunctionTime_SetName(self, name)

    def SetKey(self, key):
        return _dive.ValueScalar2DFunctionTime_SetKey(self, key)

    def SetFunction(self, function_Pointer_D_DDD):
        return _dive.ValueScalar2DFunctionTime_SetFunction(self, function_Pointer_D_DDD)

# Register ValueScalar2DFunctionTime in _dive:
_dive.ValueScalar2DFunctionTime_swigregister(ValueScalar2DFunctionTime)

def CreateValueScalar3DFunctionTime(*args):
    return _dive.CreateValueScalar3DFunctionTime(*args)

def CastToValueScalar3DFunctionTime(value):
    return _dive.CastToValueScalar3DFunctionTime(value)
class ValueScalar3DFunctionTime(IScalar3DTime):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _dive.delete_ValueScalar3DFunctionTime

    @staticmethod
    def Create():
        return _dive.ValueScalar3DFunctionTime_Create()

    def GetType(self):
        return _dive.ValueScalar3DFunctionTime_GetType(self)

    def GetName(self):
        return _dive.ValueScalar3DFunctionTime_GetName(self)

    def GetKey(self):
        return _dive.ValueScalar3DFunctionTime_GetKey(self)

    def GetValue(self, *args):
        return _dive.ValueScalar3DFunctionTime_GetValue(self, *args)

    def SetName(self, name):
        return _dive.ValueScalar3DFunctionTime_SetName(self, name)

    def SetKey(self, key):
        return _dive.ValueScalar3DFunctionTime_SetKey(self, key)

    def SetFunction(self, function_Pointer_D_DDDD):
        return _dive.ValueScalar3DFunctionTime_SetFunction(self, function_Pointer_D_DDDD)

# Register ValueScalar3DFunctionTime in _dive:
_dive.ValueScalar3DFunctionTime_swigregister(ValueScalar3DFunctionTime)

def CreateValueScalar3DInterpolation(*args):
    return _dive.CreateValueScalar3DInterpolation(*args)

def CastToValueScalar3DInterpolation(value):
    return _dive.CastToValueScalar3DInterpolation(value)
class ValueScalar3DInterpolation(IScalar3D):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _dive.delete_ValueScalar3DInterpolation

    @staticmethod
    def Create():
        return _dive.ValueScalar3DInterpolation_Create()

    def GetType(self):
        return _dive.ValueScalar3DInterpolation_GetType(self)

    def GetName(self):
        return _dive.ValueScalar3DInterpolation_GetName(self)

    def GetKey(self):
        return _dive.ValueScalar3DInterpolation_GetKey(self)

    def GetValue(self, *args):
        return _dive.ValueScalar3DInterpolation_GetValue(self, *args)

    def GetInterpolation(self):
        return _dive.ValueScalar3DInterpolation_GetInterpolation(self)

    def SetName(self, name):
        return _dive.ValueScalar3DInterpolation_SetName(self, name)

    def SetKey(self, key):
        return _dive.ValueScalar3DInterpolation_SetKey(self, key)

    def SetNodes(self, nodes, interpolationType):
        return _dive.ValueScalar3DInterpolation_SetNodes(self, nodes, interpolationType)

# Register ValueScalar3DInterpolation in _dive:
_dive.ValueScalar3DInterpolation_swigregister(ValueScalar3DInterpolation)

def CreateValueVector(*args):
    return _dive.CreateValueVector(*args)

def CastToValueVector(value):
    return _dive.CastToValueVector(value)
class ValueVector(IVector):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _dive.delete_ValueVector

    @staticmethod
    def Create():
        return _dive.ValueVector_Create()

    def GetType(self):
        return _dive.ValueVector_GetType(self)

    def GetName(self):
        return _dive.ValueVector_GetName(self)

    def GetKey(self):
        return _dive.ValueVector_GetKey(self)

    def GetValue(self):
        return _dive.ValueVector_GetValue(self)

    def SetName(self, name):
        return _dive.ValueVector_SetName(self, name)

    def SetKey(self, key):
        return _dive.ValueVector_SetKey(self, key)

    def SetValue(self, value):
        return _dive.ValueVector_SetValue(self, value)

# Register ValueVector in _dive:
_dive.ValueVector_swigregister(ValueVector)

def CreateValueVector1D(*args):
    return _dive.CreateValueVector1D(*args)

def CastToValueVector1D(value):
    return _dive.CastToValueVector1D(value)
class ValueVector1D(IVector1D):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _dive.delete_ValueVector1D

    @staticmethod
    def Create():
        return _dive.ValueVector1D_Create()

    def GetType(self):
        return _dive.ValueVector1D_GetType(self)

    def GetName(self):
        return _dive.ValueVector1D_GetName(self)

    def GetKey(self):
        return _dive.ValueVector1D_GetKey(self)

    def GetValue(self, *args):
        return _dive.ValueVector1D_GetValue(self, *args)

    def SetName(self, name):
        return _dive.ValueVector1D_SetName(self, name)

    def SetKey(self, key):
        return _dive.ValueVector1D_SetKey(self, key)

    def SetValue(self, value):
        return _dive.ValueVector1D_SetValue(self, value)

# Register ValueVector1D in _dive:
_dive.ValueVector1D_swigregister(ValueVector1D)

def CreateValueVector2D(*args):
    return _dive.CreateValueVector2D(*args)

def CastToValueVector2D(value):
    return _dive.CastToValueVector2D(value)
class ValueVector2D(IVector2D):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _dive.delete_ValueVector2D

    @staticmethod
    def Create():
        return _dive.ValueVector2D_Create()

    def GetType(self):
        return _dive.ValueVector2D_GetType(self)

    def GetName(self):
        return _dive.ValueVector2D_GetName(self)

    def GetKey(self):
        return _dive.ValueVector2D_GetKey(self)

    def GetValue(self, *args):
        return _dive.ValueVector2D_GetValue(self, *args)

    def SetName(self, name):
        return _dive.ValueVector2D_SetName(self, name)

    def SetKey(self, key):
        return _dive.ValueVector2D_SetKey(self, key)

    def SetValue(self, value):
        return _dive.ValueVector2D_SetValue(self, value)

# Register ValueVector2D in _dive:
_dive.ValueVector2D_swigregister(ValueVector2D)

def CreateValueVector3D(*args):
    return _dive.CreateValueVector3D(*args)

def CastToValueVector3D(value):
    return _dive.CastToValueVector3D(value)
class ValueVector3D(IVector3D):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _dive.delete_ValueVector3D

    @staticmethod
    def Create():
        return _dive.ValueVector3D_Create()

    def GetType(self):
        return _dive.ValueVector3D_GetType(self)

    def GetName(self):
        return _dive.ValueVector3D_GetName(self)

    def GetKey(self):
        return _dive.ValueVector3D_GetKey(self)

    def GetValue(self, *args):
        return _dive.ValueVector3D_GetValue(self, *args)

    def SetName(self, name):
        return _dive.ValueVector3D_SetName(self, name)

    def SetKey(self, key):
        return _dive.ValueVector3D_SetKey(self, key)

    def SetValue(self, value):
        return _dive.ValueVector3D_SetValue(self, value)

# Register ValueVector3D in _dive:
_dive.ValueVector3D_swigregister(ValueVector3D)

def CreateValueVectorScalars(*args):
    return _dive.CreateValueVectorScalars(*args)

def CastToValueVectorScalars(value):
    return _dive.CastToValueVectorScalars(value)
class ValueVectorScalars(IVector):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _dive.delete_ValueVectorScalars

    @staticmethod
    def Create():
        return _dive.ValueVectorScalars_Create()

    def GetType(self):
        return _dive.ValueVectorScalars_GetType(self)

    def GetName(self):
        return _dive.ValueVectorScalars_GetName(self)

    def GetKey(self):
        return _dive.ValueVectorScalars_GetKey(self)

    def GetValue(self):
        return _dive.ValueVectorScalars_GetValue(self)

    def SetName(self, name):
        return _dive.ValueVectorScalars_SetName(self, name)

    def SetKey(self, key):
        return _dive.ValueVectorScalars_SetKey(self, key)

    def SetNumberRows(self, numberRows):
        return _dive.ValueVectorScalars_SetNumberRows(self, numberRows)

    def SetScalar(self, row, scalar):
        return _dive.ValueVectorScalars_SetScalar(self, row, scalar)

# Register ValueVectorScalars in _dive:
_dive.ValueVectorScalars_swigregister(ValueVectorScalars)

def CreateValueVector1DScalars(*args):
    return _dive.CreateValueVector1DScalars(*args)

def CastToValueVector1DScalars(value):
    return _dive.CastToValueVector1DScalars(value)
class ValueVector1DScalars(IVector1D):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _dive.delete_ValueVector1DScalars

    @staticmethod
    def Create():
        return _dive.ValueVector1DScalars_Create()

    def GetType(self):
        return _dive.ValueVector1DScalars_GetType(self)

    def GetName(self):
        return _dive.ValueVector1DScalars_GetName(self)

    def GetKey(self):
        return _dive.ValueVector1DScalars_GetKey(self)

    def GetValue(self, *args):
        return _dive.ValueVector1DScalars_GetValue(self, *args)

    def SetName(self, name):
        return _dive.ValueVector1DScalars_SetName(self, name)

    def SetKey(self, key):
        return _dive.ValueVector1DScalars_SetKey(self, key)

    def SetNumberRows(self, numberRows):
        return _dive.ValueVector1DScalars_SetNumberRows(self, numberRows)

    def SetScalar(self, row, scalar):
        return _dive.ValueVector1DScalars_SetScalar(self, row, scalar)

# Register ValueVector1DScalars in _dive:
_dive.ValueVector1DScalars_swigregister(ValueVector1DScalars)

def CreateValueVector2DScalars(*args):
    return _dive.CreateValueVector2DScalars(*args)

def CastToValueVector2DScalars(value):
    return _dive.CastToValueVector2DScalars(value)
class ValueVector2DScalars(IVector2D):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _dive.delete_ValueVector2DScalars

    @staticmethod
    def Create():
        return _dive.ValueVector2DScalars_Create()

    def GetType(self):
        return _dive.ValueVector2DScalars_GetType(self)

    def GetName(self):
        return _dive.ValueVector2DScalars_GetName(self)

    def GetKey(self):
        return _dive.ValueVector2DScalars_GetKey(self)

    def GetValue(self, *args):
        return _dive.ValueVector2DScalars_GetValue(self, *args)

    def SetName(self, name):
        return _dive.ValueVector2DScalars_SetName(self, name)

    def SetKey(self, key):
        return _dive.ValueVector2DScalars_SetKey(self, key)

    def SetNumberRows(self, numberRows):
        return _dive.ValueVector2DScalars_SetNumberRows(self, numberRows)

    def SetScalar(self, row, scalar):
        return _dive.ValueVector2DScalars_SetScalar(self, row, scalar)

# Register ValueVector2DScalars in _dive:
_dive.ValueVector2DScalars_swigregister(ValueVector2DScalars)

def CreateValueVector3DScalars(*args):
    return _dive.CreateValueVector3DScalars(*args)

def CastToValueVector3DScalars(value):
    return _dive.CastToValueVector3DScalars(value)
class ValueVector3DScalars(IVector3D):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _dive.delete_ValueVector3DScalars

    @staticmethod
    def Create():
        return _dive.ValueVector3DScalars_Create()

    def GetType(self):
        return _dive.ValueVector3DScalars_GetType(self)

    def GetName(self):
        return _dive.ValueVector3DScalars_GetName(self)

    def GetKey(self):
        return _dive.ValueVector3DScalars_GetKey(self)

    def GetValue(self, *args):
        return _dive.ValueVector3DScalars_GetValue(self, *args)

    def SetName(self, name):
        return _dive.ValueVector3DScalars_SetName(self, name)

    def SetKey(self, key):
        return _dive.ValueVector3DScalars_SetKey(self, key)

    def SetNumberRows(self, numberRows):
        return _dive.ValueVector3DScalars_SetNumberRows(self, numberRows)

    def SetScalar(self, row, scalar):
        return _dive.ValueVector3DScalars_SetScalar(self, row, scalar)

# Register ValueVector3DScalars in _dive:
_dive.ValueVector3DScalars_swigregister(ValueVector3DScalars)

def CreateValueVectorScalarsTime(*args):
    return _dive.CreateValueVectorScalarsTime(*args)

def CastToValueVectorScalarsTime(value):
    return _dive.CastToValueVectorScalarsTime(value)
class ValueVectorScalarsTime(IVectorTime):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _dive.delete_ValueVectorScalarsTime

    @staticmethod
    def Create():
        return _dive.ValueVectorScalarsTime_Create()

    def GetType(self):
        return _dive.ValueVectorScalarsTime_GetType(self)

    def GetName(self):
        return _dive.ValueVectorScalarsTime_GetName(self)

    def GetKey(self):
        return _dive.ValueVectorScalarsTime_GetKey(self)

    def GetValue(self, time):
        return _dive.ValueVectorScalarsTime_GetValue(self, time)

    def SetName(self, name):
        return _dive.ValueVectorScalarsTime_SetName(self, name)

    def SetKey(self, key):
        return _dive.ValueVectorScalarsTime_SetKey(self, key)

    def SetNumberRows(self, numberRows):
        return _dive.ValueVectorScalarsTime_SetNumberRows(self, numberRows)

    def SetScalar(self, row, scalar):
        return _dive.ValueVectorScalarsTime_SetScalar(self, row, scalar)

# Register ValueVectorScalarsTime in _dive:
_dive.ValueVectorScalarsTime_swigregister(ValueVectorScalarsTime)

def CreateValueVector1DScalarsTime(*args):
    return _dive.CreateValueVector1DScalarsTime(*args)

def CastToValueVector1DScalarsTime(value):
    return _dive.CastToValueVector1DScalarsTime(value)
class ValueVector1DScalarsTime(IVector1DTime):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _dive.delete_ValueVector1DScalarsTime

    @staticmethod
    def Create():
        return _dive.ValueVector1DScalarsTime_Create()

    def GetType(self):
        return _dive.ValueVector1DScalarsTime_GetType(self)

    def GetName(self):
        return _dive.ValueVector1DScalarsTime_GetName(self)

    def GetKey(self):
        return _dive.ValueVector1DScalarsTime_GetKey(self)

    def GetValue(self, *args):
        return _dive.ValueVector1DScalarsTime_GetValue(self, *args)

    def SetName(self, name):
        return _dive.ValueVector1DScalarsTime_SetName(self, name)

    def SetKey(self, key):
        return _dive.ValueVector1DScalarsTime_SetKey(self, key)

    def SetNumberRows(self, numberRows):
        return _dive.ValueVector1DScalarsTime_SetNumberRows(self, numberRows)

    def SetScalar(self, row, scalar):
        return _dive.ValueVector1DScalarsTime_SetScalar(self, row, scalar)

# Register ValueVector1DScalarsTime in _dive:
_dive.ValueVector1DScalarsTime_swigregister(ValueVector1DScalarsTime)

def CreateValueVector2DScalarsTime(*args):
    return _dive.CreateValueVector2DScalarsTime(*args)

def CastToValueVector2DScalarsTime(value):
    return _dive.CastToValueVector2DScalarsTime(value)
class ValueVector2DScalarsTime(IVector2DTime):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _dive.delete_ValueVector2DScalarsTime

    @staticmethod
    def Create():
        return _dive.ValueVector2DScalarsTime_Create()

    def GetType(self):
        return _dive.ValueVector2DScalarsTime_GetType(self)

    def GetName(self):
        return _dive.ValueVector2DScalarsTime_GetName(self)

    def GetKey(self):
        return _dive.ValueVector2DScalarsTime_GetKey(self)

    def GetValue(self, *args):
        return _dive.ValueVector2DScalarsTime_GetValue(self, *args)

    def SetName(self, name):
        return _dive.ValueVector2DScalarsTime_SetName(self, name)

    def SetKey(self, key):
        return _dive.ValueVector2DScalarsTime_SetKey(self, key)

    def SetNumberRows(self, numberRows):
        return _dive.ValueVector2DScalarsTime_SetNumberRows(self, numberRows)

    def SetScalar(self, row, scalar):
        return _dive.ValueVector2DScalarsTime_SetScalar(self, row, scalar)

# Register ValueVector2DScalarsTime in _dive:
_dive.ValueVector2DScalarsTime_swigregister(ValueVector2DScalarsTime)

def CreateValueVector3DScalarsTime(*args):
    return _dive.CreateValueVector3DScalarsTime(*args)

def CastToValueVector3DScalarsTime(value):
    return _dive.CastToValueVector3DScalarsTime(value)
class ValueVector3DScalarsTime(IVector3DTime):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _dive.delete_ValueVector3DScalarsTime

    @staticmethod
    def Create():
        return _dive.ValueVector3DScalarsTime_Create()

    def GetType(self):
        return _dive.ValueVector3DScalarsTime_GetType(self)

    def GetName(self):
        return _dive.ValueVector3DScalarsTime_GetName(self)

    def GetKey(self):
        return _dive.ValueVector3DScalarsTime_GetKey(self)

    def GetValue(self, *args):
        return _dive.ValueVector3DScalarsTime_GetValue(self, *args)

    def SetName(self, name):
        return _dive.ValueVector3DScalarsTime_SetName(self, name)

    def SetKey(self, key):
        return _dive.ValueVector3DScalarsTime_SetKey(self, key)

    def SetNumberRows(self, numberRows):
        return _dive.ValueVector3DScalarsTime_SetNumberRows(self, numberRows)

    def SetScalar(self, row, scalar):
        return _dive.ValueVector3DScalarsTime_SetScalar(self, row, scalar)

# Register ValueVector3DScalarsTime in _dive:
_dive.ValueVector3DScalarsTime_swigregister(ValueVector3DScalarsTime)

def CreateValueMatrix(*args):
    return _dive.CreateValueMatrix(*args)

def CastToValueMatrix(value):
    return _dive.CastToValueMatrix(value)
class ValueMatrix(IMatrix):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _dive.delete_ValueMatrix

    @staticmethod
    def Create():
        return _dive.ValueMatrix_Create()

    def GetType(self):
        return _dive.ValueMatrix_GetType(self)

    def GetName(self):
        return _dive.ValueMatrix_GetName(self)

    def GetKey(self):
        return _dive.ValueMatrix_GetKey(self)

    def GetValue(self):
        return _dive.ValueMatrix_GetValue(self)

    def SetName(self, name):
        return _dive.ValueMatrix_SetName(self, name)

    def SetKey(self, key):
        return _dive.ValueMatrix_SetKey(self, key)

    def SetValue(self, value):
        return _dive.ValueMatrix_SetValue(self, value)

# Register ValueMatrix in _dive:
_dive.ValueMatrix_swigregister(ValueMatrix)

def CreateValueMatrix1D(value, name, key):
    return _dive.CreateValueMatrix1D(value, name, key)

def CastToValueMatrix1D(value):
    return _dive.CastToValueMatrix1D(value)
class ValueMatrix1D(IMatrix1D):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _dive.delete_ValueMatrix1D

    @staticmethod
    def Create():
        return _dive.ValueMatrix1D_Create()

    def GetType(self):
        return _dive.ValueMatrix1D_GetType(self)

    def GetName(self):
        return _dive.ValueMatrix1D_GetName(self)

    def GetKey(self):
        return _dive.ValueMatrix1D_GetKey(self)

    def GetValue(self, *args):
        return _dive.ValueMatrix1D_GetValue(self, *args)

    def SetName(self, name):
        return _dive.ValueMatrix1D_SetName(self, name)

    def SetKey(self, key):
        return _dive.ValueMatrix1D_SetKey(self, key)

    def SetValue(self, value):
        return _dive.ValueMatrix1D_SetValue(self, value)

# Register ValueMatrix1D in _dive:
_dive.ValueMatrix1D_swigregister(ValueMatrix1D)

def CreateValueMatrix2D(value, name, key):
    return _dive.CreateValueMatrix2D(value, name, key)

def CastToValueMatrix2D(value):
    return _dive.CastToValueMatrix2D(value)
class ValueMatrix2D(IMatrix2D):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _dive.delete_ValueMatrix2D

    @staticmethod
    def Create():
        return _dive.ValueMatrix2D_Create()

    def GetType(self):
        return _dive.ValueMatrix2D_GetType(self)

    def GetName(self):
        return _dive.ValueMatrix2D_GetName(self)

    def GetKey(self):
        return _dive.ValueMatrix2D_GetKey(self)

    def GetValue(self, *args):
        return _dive.ValueMatrix2D_GetValue(self, *args)

    def SetName(self, name):
        return _dive.ValueMatrix2D_SetName(self, name)

    def SetKey(self, key):
        return _dive.ValueMatrix2D_SetKey(self, key)

    def SetValue(self, value):
        return _dive.ValueMatrix2D_SetValue(self, value)

# Register ValueMatrix2D in _dive:
_dive.ValueMatrix2D_swigregister(ValueMatrix2D)

def CreateValueMatrix3D(value, name, key):
    return _dive.CreateValueMatrix3D(value, name, key)

def CastToValueMatrix3D(value):
    return _dive.CastToValueMatrix3D(value)
class ValueMatrix3D(IMatrix3D):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _dive.delete_ValueMatrix3D

    @staticmethod
    def Create():
        return _dive.ValueMatrix3D_Create()

    def GetType(self):
        return _dive.ValueMatrix3D_GetType(self)

    def GetName(self):
        return _dive.ValueMatrix3D_GetName(self)

    def GetKey(self):
        return _dive.ValueMatrix3D_GetKey(self)

    def GetValue(self, *args):
        return _dive.ValueMatrix3D_GetValue(self, *args)

    def SetName(self, name):
        return _dive.ValueMatrix3D_SetName(self, name)

    def SetKey(self, key):
        return _dive.ValueMatrix3D_SetKey(self, key)

    def SetValue(self, value):
        return _dive.ValueMatrix3D_SetValue(self, value)

# Register ValueMatrix3D in _dive:
_dive.ValueMatrix3D_swigregister(ValueMatrix3D)

def CreateValueMatrix3DInterpolation(*args):
    return _dive.CreateValueMatrix3DInterpolation(*args)

def CastToValueMatrix3DInterpolation(value):
    return _dive.CastToValueMatrix3DInterpolation(value)
class ValueMatrix3DInterpolation(IMatrix3D):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _dive.delete_ValueMatrix3DInterpolation

    @staticmethod
    def Create():
        return _dive.ValueMatrix3DInterpolation_Create()

    def GetType(self):
        return _dive.ValueMatrix3DInterpolation_GetType(self)

    def GetName(self):
        return _dive.ValueMatrix3DInterpolation_GetName(self)

    def GetKey(self):
        return _dive.ValueMatrix3DInterpolation_GetKey(self)

    def GetValue(self, *args):
        return _dive.ValueMatrix3DInterpolation_GetValue(self, *args)

    def GetInterpolation(self):
        return _dive.ValueMatrix3DInterpolation_GetInterpolation(self)

    def SetName(self, name):
        return _dive.ValueMatrix3DInterpolation_SetName(self, name)

    def SetKey(self, key):
        return _dive.ValueMatrix3DInterpolation_SetKey(self, key)

    def SetNodes(self, nodes, interpolationType):
        return _dive.ValueMatrix3DInterpolation_SetNodes(self, nodes, interpolationType)

# Register ValueMatrix3DInterpolation in _dive:
_dive.ValueMatrix3DInterpolation_swigregister(ValueMatrix3DInterpolation)

def GetValue(field, point, element):
    return _dive.GetValue(field, point, element)

def CreateValueScalar3DCongruent(*args):
    return _dive.CreateValueScalar3DCongruent(*args)
class ValueScalar3DCongruent(IScalar3D):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _dive.delete_ValueScalar3DCongruent

    @staticmethod
    def Create():
        return _dive.ValueScalar3DCongruent_Create()

    def GetType(self):
        return _dive.ValueScalar3DCongruent_GetType(self)

    def GetName(self):
        return _dive.ValueScalar3DCongruent_GetName(self)

    def GetKey(self):
        return _dive.ValueScalar3DCongruent_GetKey(self)

    def GetValue(self, *args):
        return _dive.ValueScalar3DCongruent_GetValue(self, *args)

    def GetMesh(self):
        return _dive.ValueScalar3DCongruent_GetMesh(self)

    def SetName(self, name):
        return _dive.ValueScalar3DCongruent_SetName(self, name)

    def SetKey(self, key):
        return _dive.ValueScalar3DCongruent_SetKey(self, key)

    def SetMesh(self, mesh):
        return _dive.ValueScalar3DCongruent_SetMesh(self, mesh)

    def SetElementIndex(self, elementIndex):
        return _dive.ValueScalar3DCongruent_SetElementIndex(self, elementIndex)

# Register ValueScalar3DCongruent in _dive:
_dive.ValueScalar3DCongruent_swigregister(ValueScalar3DCongruent)

def GetValueVector3D(field, point, element):
    return _dive.GetValueVector3D(field, point, element)

def CreateValueVector3DCongruent(*args):
    return _dive.CreateValueVector3DCongruent(*args)
class ValueVector3DCongruent(IVector3D):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _dive.delete_ValueVector3DCongruent

    @staticmethod
    def Create():
        return _dive.ValueVector3DCongruent_Create()

    def GetType(self):
        return _dive.ValueVector3DCongruent_GetType(self)

    def GetName(self):
        return _dive.ValueVector3DCongruent_GetName(self)

    def GetKey(self):
        return _dive.ValueVector3DCongruent_GetKey(self)

    def GetValue(self, *args):
        return _dive.ValueVector3DCongruent_GetValue(self, *args)

    def GetMesh(self):
        return _dive.ValueVector3DCongruent_GetMesh(self)

    def SetName(self, name):
        return _dive.ValueVector3DCongruent_SetName(self, name)

    def SetKey(self, key):
        return _dive.ValueVector3DCongruent_SetKey(self, key)

    def SetMesh(self, mesh):
        return _dive.ValueVector3DCongruent_SetMesh(self, mesh)

    def SetElementIndex(self, elementIndex):
        return _dive.ValueVector3DCongruent_SetElementIndex(self, elementIndex)

# Register ValueVector3DCongruent in _dive:
_dive.ValueVector3DCongruent_swigregister(ValueVector3DCongruent)

def GetValueMatrix3D(field, point, element):
    return _dive.GetValueMatrix3D(field, point, element)

def CreateValueMatrix3DCongruent(*args):
    return _dive.CreateValueMatrix3DCongruent(*args)
class ValueMatrix3DCongruent(IMatrix3D):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _dive.delete_ValueMatrix3DCongruent

    @staticmethod
    def Create():
        return _dive.ValueMatrix3DCongruent_Create()

    def GetType(self):
        return _dive.ValueMatrix3DCongruent_GetType(self)

    def GetName(self):
        return _dive.ValueMatrix3DCongruent_GetName(self)

    def GetKey(self):
        return _dive.ValueMatrix3DCongruent_GetKey(self)

    def GetValue(self, *args):
        return _dive.ValueMatrix3DCongruent_GetValue(self, *args)

    def GetMesh(self):
        return _dive.ValueMatrix3DCongruent_GetMesh(self)

    def SetName(self, name):
        return _dive.ValueMatrix3DCongruent_SetName(self, name)

    def SetKey(self, key):
        return _dive.ValueMatrix3DCongruent_SetKey(self, key)

    def SetMesh(self, mesh):
        return _dive.ValueMatrix3DCongruent_SetMesh(self, mesh)

    def SetElementIndex(self, elementIndex):
        return _dive.ValueMatrix3DCongruent_SetElementIndex(self, elementIndex)

# Register ValueMatrix3DCongruent in _dive:
_dive.ValueMatrix3DCongruent_swigregister(ValueMatrix3DCongruent)


import ctypes

py_function_pointer_D = ctypes.CFUNCTYPE(ctypes.c_double)
py_function_pointer_D_D = ctypes.CFUNCTYPE(ctypes.c_double, ctypes.c_double)
py_function_pointer_D_DD = ctypes.CFUNCTYPE(ctypes.c_double, ctypes.c_double, ctypes.c_double)
py_function_pointer_D_DDD = ctypes.CFUNCTYPE(ctypes.c_double, ctypes.c_double, ctypes.c_double, ctypes.c_double)
py_function_pointer_D_DDDD = ctypes.CFUNCTYPE(ctypes.c_double, ctypes.c_double, ctypes.c_double, ctypes.c_double, ctypes.c_double)

def CreateValueScalarFunction(function, name = "", key = ""):
	f = py_function_pointer_D(function)
	f_ptr = ctypes.cast(f, ctypes.c_void_p).value

	return _dive.CreateValueScalarFunction(f_ptr, name, key)

def CreateValueScalar1DFunction(function, name = "", key = ""):
	f = py_function_pointer_D_D(function)
	f_ptr = ctypes.cast(f, ctypes.c_void_p).value

	return _dive.CreateValueScalar1DFunction(f_ptr, name, key)

def CreateValueScalar2DFunction(function, name = "", key = ""):
	f = py_function_pointer_D_DD(function)
	f_ptr = ctypes.cast(f, ctypes.c_void_p).value

	return _dive.CreateValueScalar2DFunction(f_ptr, name, key)

def CreateValueScalar3DFunction(function, name = "", key = ""):
	f = py_function_pointer_D_DDD(function)
	f_ptr = ctypes.cast(f, ctypes.c_void_p).value

#------------------------------------------------------------------------------

def CreateValueScalarFunctionTime(function, name = "", key = ""):
	f = py_function_pointer_D_D(function)
	f_ptr = ctypes.cast(f, ctypes.c_void_p).value

	return _dive.CreateValueScalarFunctionTime(f_ptr, name, key)

def CreateValueScalar1DFunctionTime(function, name = "", key = ""):
	f = py_function_pointer_D_DD(function)
	f_ptr = ctypes.cast(f, ctypes.c_void_p).value

	return _dive.CreateValueScalar1DFunctionTime(f_ptr, name, key)

def CreateValueScalar2DFunctionTime(function, name = "", key = ""):
	f = py_function_pointer_D_DDD(function)
	f_ptr = ctypes.cast(f, ctypes.c_void_p).value

	return _dive.CreateValueScalar2DFunctionTime(f_ptr, name, key)

def CreateValueScalar3DFunctionTime(function, name = "", key = ""):
	f = py_function_pointer_D_DDDD(function)
	f_ptr = ctypes.cast(f, ctypes.c_void_p).value	

	return _dive.CreateValueScalar3DFunctionTime(f_ptr, name, key)	


class IGauss(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _dive.delete_IGauss

    def GetPoints(self):
        return _dive.IGauss_GetPoints(self)

    def GetWeights(self):
        return _dive.IGauss_GetWeights(self)

    def GetCounter(self):
        return _dive.IGauss_GetCounter(self)

    def GetQuadrature(self):
        return _dive.IGauss_GetQuadrature(self)

    def SetQuadrature(self, value):
        return _dive.IGauss_SetQuadrature(self, value)

# Register IGauss in _dive:
_dive.IGauss_swigregister(IGauss)
GaussTable = cvar.GaussTable


def CreateGaussHexa():
    return _dive.CreateGaussHexa()
class GaussHexa(IGauss):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _dive.delete_GaussHexa

    @staticmethod
    def Create():
        return _dive.GaussHexa_Create()

    def GetPtr(self, *args):
        return _dive.GaussHexa_GetPtr(self, *args)

    def GetPoints(self):
        return _dive.GaussHexa_GetPoints(self)

    def GetWeights(self):
        return _dive.GaussHexa_GetWeights(self)

    def GetCounter(self):
        return _dive.GaussHexa_GetCounter(self)

    def GetQuadrature(self):
        return _dive.GaussHexa_GetQuadrature(self)

    def SetQuadrature(self, value):
        return _dive.GaussHexa_SetQuadrature(self, value)

# Register GaussHexa in _dive:
_dive.GaussHexa_swigregister(GaussHexa)

def CreateGaussRect():
    return _dive.CreateGaussRect()
class GaussRect(IGauss):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _dive.delete_GaussRect

    @staticmethod
    def Create():
        return _dive.GaussRect_Create()

    def GetPtr(self, *args):
        return _dive.GaussRect_GetPtr(self, *args)

    def GetPoints(self):
        return _dive.GaussRect_GetPoints(self)

    def GetWeights(self):
        return _dive.GaussRect_GetWeights(self)

    def GetCounter(self):
        return _dive.GaussRect_GetCounter(self)

    def GetQuadrature(self):
        return _dive.GaussRect_GetQuadrature(self)

    def SetQuadrature(self, value):
        return _dive.GaussRect_SetQuadrature(self, value)

# Register GaussRect in _dive:
_dive.GaussRect_swigregister(GaussRect)

def CreateGaussLine():
    return _dive.CreateGaussLine()
class GaussLine(IGauss):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _dive.delete_GaussLine

    @staticmethod
    def Create():
        return _dive.GaussLine_Create()

    def GetPtr(self, *args):
        return _dive.GaussLine_GetPtr(self, *args)

    def GetPoints(self):
        return _dive.GaussLine_GetPoints(self)

    def GetWeights(self):
        return _dive.GaussLine_GetWeights(self)

    def GetCounter(self):
        return _dive.GaussLine_GetCounter(self)

    def GetQuadrature(self):
        return _dive.GaussLine_GetQuadrature(self)

    def SetQuadrature(self, value):
        return _dive.GaussLine_SetQuadrature(self, value)

# Register GaussLine in _dive:
_dive.GaussLine_swigregister(GaussLine)
class IInterpolation(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _dive.delete_IInterpolation

    def GetType(self):
        return _dive.IInterpolation_GetType(self)

    def GetValue(self, *args):
        return _dive.IInterpolation_GetValue(self, *args)

    def SetNodes(self, nodes):
        return _dive.IInterpolation_SetNodes(self, nodes)

    def SetBasis(self, basis):
        return _dive.IInterpolation_SetBasis(self, basis)

# Register IInterpolation in _dive:
_dive.IInterpolation_swigregister(IInterpolation)
headerInterpolation = cvar.headerInterpolation
interpolation_fixed = cvar.interpolation_fixed
interpolation_idw = cvar.interpolation_idw
interpolation_nn = cvar.interpolation_nn
interpolation_rbf = cvar.interpolation_rbf


def CreateInterpolationFixed():
    return _dive.CreateInterpolationFixed()
class InterpolationFixed(IInterpolation):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def Create():
        return _dive.InterpolationFixed_Create()

    def GetPtr(self, *args):
        return _dive.InterpolationFixed_GetPtr(self, *args)
    __swig_destroy__ = _dive.delete_InterpolationFixed

    def GetType(self):
        return _dive.InterpolationFixed_GetType(self)

    def GetValue(self, *args):
        return _dive.InterpolationFixed_GetValue(self, *args)

    def SetNodes(self, nodes):
        return _dive.InterpolationFixed_SetNodes(self, nodes)

    def SetBasis(self, basis):
        return _dive.InterpolationFixed_SetBasis(self, basis)

    def SetNodeIndex(self, index):
        return _dive.InterpolationFixed_SetNodeIndex(self, index)

# Register InterpolationFixed in _dive:
_dive.InterpolationFixed_swigregister(InterpolationFixed)

def CreateInterpolationIDW():
    return _dive.CreateInterpolationIDW()
class InterpolationIDW(IInterpolation):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _dive.delete_InterpolationIDW

    @staticmethod
    def Create():
        return _dive.InterpolationIDW_Create()

    def GetPtr(self, *args):
        return _dive.InterpolationIDW_GetPtr(self, *args)

    def GetType(self):
        return _dive.InterpolationIDW_GetType(self)

    def GetValue(self, *args):
        return _dive.InterpolationIDW_GetValue(self, *args)

    def SetNodes(self, nodes):
        return _dive.InterpolationIDW_SetNodes(self, nodes)

    def SetBasis(self, basis):
        return _dive.InterpolationIDW_SetBasis(self, basis)

    def SetShape(self, value):
        return _dive.InterpolationIDW_SetShape(self, value)

    def SetNumberNodes(self, numberNodes):
        return _dive.InterpolationIDW_SetNumberNodes(self, numberNodes)

# Register InterpolationIDW in _dive:
_dive.InterpolationIDW_swigregister(InterpolationIDW)

def CreateInterpolationNN():
    return _dive.CreateInterpolationNN()
class InterpolationNN(IInterpolation):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def Create():
        return _dive.InterpolationNN_Create()

    def GetPtr(self, *args):
        return _dive.InterpolationNN_GetPtr(self, *args)
    __swig_destroy__ = _dive.delete_InterpolationNN

    def GetType(self):
        return _dive.InterpolationNN_GetType(self)

    def GetValue(self, *args):
        return _dive.InterpolationNN_GetValue(self, *args)

    def SetNodes(self, nodes):
        return _dive.InterpolationNN_SetNodes(self, nodes)

    def SetBasis(self, basis):
        return _dive.InterpolationNN_SetBasis(self, basis)

# Register InterpolationNN in _dive:
_dive.InterpolationNN_swigregister(InterpolationNN)

def CreateInterpolationRBF():
    return _dive.CreateInterpolationRBF()
class InterpolationRBF(IInterpolation):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _dive.delete_InterpolationRBF

    @staticmethod
    def Create():
        return _dive.InterpolationRBF_Create()

    def GetPtr(self, *args):
        return _dive.InterpolationRBF_GetPtr(self, *args)

    def GetType(self):
        return _dive.InterpolationRBF_GetType(self)

    def GetValue(self, *args):
        return _dive.InterpolationRBF_GetValue(self, *args)

    def SetNodes(self, nodes):
        return _dive.InterpolationRBF_SetNodes(self, nodes)

    def SetBasis(self, basis):
        return _dive.InterpolationRBF_SetBasis(self, basis)

    def SetShape(self, value):
        return _dive.InterpolationRBF_SetShape(self, value)

    def SetFunction(self, function):
        return _dive.InterpolationRBF_SetFunction(self, function)

# Register InterpolationRBF in _dive:
_dive.InterpolationRBF_swigregister(InterpolationRBF)
interpolation_function_TPS = cvar.interpolation_function_TPS
interpolation_function_MQB = cvar.interpolation_function_MQB

class IBase(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _dive.delete_IBase

    def GetTag(self):
        return _dive.IBase_GetTag(self)

    def GetType(self):
        return _dive.IBase_GetType(self)

    def GetClass(self):
        return _dive.IBase_GetClass(self)

    def GetGroup(self):
        return _dive.IBase_GetGroup(self)

    def GetDescription(self):
        return _dive.IBase_GetDescription(self)

    def GetName(self):
        return _dive.IBase_GetName(self)

    def GetProperty(self, key):
        return _dive.IBase_GetProperty(self, key)

    def SetClass(self, value):
        return _dive.IBase_SetClass(self, value)

    def SetGroup(self, value):
        return _dive.IBase_SetGroup(self, value)

    def SetDescription(self, value):
        return _dive.IBase_SetDescription(self, value)

    def SetName(self, value):
        return _dive.IBase_SetName(self, value)

    def SetTag(self, tag):
        return _dive.IBase_SetTag(self, tag)

    def SetProperty(self, value):
        return _dive.IBase_SetProperty(self, value)

# Register IBase in _dive:
_dive.IBase_swigregister(IBase)
materialLogger = cvar.materialLogger
material_solid = cvar.material_solid
material_fluid = cvar.material_fluid

class IMaterial(IBase):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _dive.delete_IMaterial

    def GetDensity(self, temperature, pressure):
        return _dive.IMaterial_GetDensity(self, temperature, pressure)

    def GetSpecificHeat(self, temperature, pressure):
        return _dive.IMaterial_GetSpecificHeat(self, temperature, pressure)

    def GetThermalConductivity(self, temperature, pressure):
        return _dive.IMaterial_GetThermalConductivity(self, temperature, pressure)

    def SetDensity(self, value):
        return _dive.IMaterial_SetDensity(self, value)

    def SetSpecificHeat(self, value):
        return _dive.IMaterial_SetSpecificHeat(self, value)

    def SetThermalConductivity(self, value):
        return _dive.IMaterial_SetThermalConductivity(self, value)

    def K(self, temperature, pressure):
        return _dive.IMaterial_K(self, temperature, pressure)

# Register IMaterial in _dive:
_dive.IMaterial_swigregister(IMaterial)
class IMaterialFluid(IMaterial):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _dive.delete_IMaterialFluid

    def GetDynamicViscosity(self, temperature, pressure):
        return _dive.IMaterialFluid_GetDynamicViscosity(self, temperature, pressure)

    def SetDynamicViscosity(self, value):
        return _dive.IMaterialFluid_SetDynamicViscosity(self, value)

    def D(self, temperature, pressure):
        return _dive.IMaterialFluid_D(self, temperature, pressure)

# Register IMaterialFluid in _dive:
_dive.IMaterialFluid_swigregister(IMaterialFluid)
class IMaterialSolid(IMaterial):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _dive.delete_IMaterialSolid

    def GetPoissonRatio(self, temperature, pressure):
        return _dive.IMaterialSolid_GetPoissonRatio(self, temperature, pressure)

    def GetThermalExpansion(self, temperature, pressure):
        return _dive.IMaterialSolid_GetThermalExpansion(self, temperature, pressure)

    def GetElasticModulus(self, temperature, pressure):
        return _dive.IMaterialSolid_GetElasticModulus(self, temperature, pressure)

    def SetPoissonRatio(self, value):
        return _dive.IMaterialSolid_SetPoissonRatio(self, value)

    def SetThermalExpansion(self, value):
        return _dive.IMaterialSolid_SetThermalExpansion(self, value)

    def SetElasticModulus(self, value):
        return _dive.IMaterialSolid_SetElasticModulus(self, value)

    def A(self, temperature, pressure):
        return _dive.IMaterialSolid_A(self, temperature, pressure)

    def D(self, temperature, pressure):
        return _dive.IMaterialSolid_D(self, temperature, pressure)

# Register IMaterialSolid in _dive:
_dive.IMaterialSolid_swigregister(IMaterialSolid)

def CreateMaterialFluid(materialTag):
    return _dive.CreateMaterialFluid(materialTag)
class MaterialFluid(IMaterialFluid):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _dive.delete_MaterialFluid

    @staticmethod
    def Create():
        return _dive.MaterialFluid_Create()

    def GetPtr(self, *args):
        return _dive.MaterialFluid_GetPtr(self, *args)

    def GetTag(self):
        return _dive.MaterialFluid_GetTag(self)

    def GetType(self):
        return _dive.MaterialFluid_GetType(self)

    def GetClass(self):
        return _dive.MaterialFluid_GetClass(self)

    def GetGroup(self):
        return _dive.MaterialFluid_GetGroup(self)

    def GetDescription(self):
        return _dive.MaterialFluid_GetDescription(self)

    def GetName(self):
        return _dive.MaterialFluid_GetName(self)

    def GetDensity(self, temperature, pressure):
        return _dive.MaterialFluid_GetDensity(self, temperature, pressure)

    def GetSpecificHeat(self, temperature, pressure):
        return _dive.MaterialFluid_GetSpecificHeat(self, temperature, pressure)

    def GetThermalConductivity(self, temperature, pressure):
        return _dive.MaterialFluid_GetThermalConductivity(self, temperature, pressure)

    def GetDynamicViscosity(self, temperature, pressure):
        return _dive.MaterialFluid_GetDynamicViscosity(self, temperature, pressure)

    def GetProperty(self, key):
        return _dive.MaterialFluid_GetProperty(self, key)

    def SetClass(self, value):
        return _dive.MaterialFluid_SetClass(self, value)

    def SetGroup(self, value):
        return _dive.MaterialFluid_SetGroup(self, value)

    def SetDescription(self, value):
        return _dive.MaterialFluid_SetDescription(self, value)

    def SetName(self, value):
        return _dive.MaterialFluid_SetName(self, value)

    def SetTag(self, tag):
        return _dive.MaterialFluid_SetTag(self, tag)

    def SetDensity(self, value):
        return _dive.MaterialFluid_SetDensity(self, value)

    def SetSpecificHeat(self, value):
        return _dive.MaterialFluid_SetSpecificHeat(self, value)

    def SetThermalConductivity(self, value):
        return _dive.MaterialFluid_SetThermalConductivity(self, value)

    def SetDynamicViscosity(self, value):
        return _dive.MaterialFluid_SetDynamicViscosity(self, value)

    def SetProperty(self, value):
        return _dive.MaterialFluid_SetProperty(self, value)

    def D(self, temperature, pressure):
        return _dive.MaterialFluid_D(self, temperature, pressure)

    def K(self, temperature, pressure):
        return _dive.MaterialFluid_K(self, temperature, pressure)

# Register MaterialFluid in _dive:
_dive.MaterialFluid_swigregister(MaterialFluid)

def CreateMaterialSolid(materialTag):
    return _dive.CreateMaterialSolid(materialTag)
class MaterialSolid(IMaterialSolid):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _dive.delete_MaterialSolid

    @staticmethod
    def Create():
        return _dive.MaterialSolid_Create()

    def GetPtr(self, *args):
        return _dive.MaterialSolid_GetPtr(self, *args)

    def GetTag(self):
        return _dive.MaterialSolid_GetTag(self)

    def GetType(self):
        return _dive.MaterialSolid_GetType(self)

    def GetClass(self):
        return _dive.MaterialSolid_GetClass(self)

    def GetGroup(self):
        return _dive.MaterialSolid_GetGroup(self)

    def GetDescription(self):
        return _dive.MaterialSolid_GetDescription(self)

    def GetName(self):
        return _dive.MaterialSolid_GetName(self)

    def GetDensity(self, temperature, pressure):
        return _dive.MaterialSolid_GetDensity(self, temperature, pressure)

    def GetSpecificHeat(self, temperature, pressure):
        return _dive.MaterialSolid_GetSpecificHeat(self, temperature, pressure)

    def GetThermalConductivity(self, temperature, pressure):
        return _dive.MaterialSolid_GetThermalConductivity(self, temperature, pressure)

    def GetThermalExpansion(self, temperature, pressure):
        return _dive.MaterialSolid_GetThermalExpansion(self, temperature, pressure)

    def GetPoissonRatio(self, temperature, pressure):
        return _dive.MaterialSolid_GetPoissonRatio(self, temperature, pressure)

    def GetElasticModulus(self, temperature, pressure):
        return _dive.MaterialSolid_GetElasticModulus(self, temperature, pressure)

    def GetProperty(self, key):
        return _dive.MaterialSolid_GetProperty(self, key)

    def SetClass(self, value):
        return _dive.MaterialSolid_SetClass(self, value)

    def SetGroup(self, value):
        return _dive.MaterialSolid_SetGroup(self, value)

    def SetDescription(self, value):
        return _dive.MaterialSolid_SetDescription(self, value)

    def SetName(self, value):
        return _dive.MaterialSolid_SetName(self, value)

    def SetTag(self, tag):
        return _dive.MaterialSolid_SetTag(self, tag)

    def SetDensity(self, value):
        return _dive.MaterialSolid_SetDensity(self, value)

    def SetSpecificHeat(self, value):
        return _dive.MaterialSolid_SetSpecificHeat(self, value)

    def SetThermalConductivity(self, value):
        return _dive.MaterialSolid_SetThermalConductivity(self, value)

    def SetPoissonRatio(self, value):
        return _dive.MaterialSolid_SetPoissonRatio(self, value)

    def SetThermalExpansion(self, value):
        return _dive.MaterialSolid_SetThermalExpansion(self, value)

    def SetElasticModulus(self, value):
        return _dive.MaterialSolid_SetElasticModulus(self, value)

    def SetProperty(self, value):
        return _dive.MaterialSolid_SetProperty(self, value)

    def A(self, temperature, pressure):
        return _dive.MaterialSolid_A(self, temperature, pressure)

    def D(self, temperature, pressure):
        return _dive.MaterialSolid_D(self, temperature, pressure)

    def K(self, temperature, pressure):
        return _dive.MaterialSolid_K(self, temperature, pressure)

# Register MaterialSolid in _dive:
_dive.MaterialSolid_swigregister(MaterialSolid)

def ListNodes(nodes):
    return _dive.ListNodes(nodes)

def ListElements(elements):
    return _dive.ListElements(elements)

def ListVolumes(elements):
    return _dive.ListVolumes(elements)

def ListDofMeshIndices(dofMeshIndices):
    return _dive.ListDofMeshIndices(dofMeshIndices)

def ListNodeMeshIndices(nodeMeshIndices):
    return _dive.ListNodeMeshIndices(nodeMeshIndices)

def ListDirichletMeshIndices(dirichletMeshIndices):
    return _dive.ListDirichletMeshIndices(dirichletMeshIndices)
class vecNodes(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _dive.vecNodes_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _dive.vecNodes___nonzero__(self)

    def __bool__(self):
        return _dive.vecNodes___bool__(self)

    def __len__(self):
        return _dive.vecNodes___len__(self)

    def __getslice__(self, i, j):
        return _dive.vecNodes___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _dive.vecNodes___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _dive.vecNodes___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _dive.vecNodes___delitem__(self, *args)

    def __getitem__(self, *args):
        return _dive.vecNodes___getitem__(self, *args)

    def __setitem__(self, *args):
        return _dive.vecNodes___setitem__(self, *args)

    def pop(self):
        return _dive.vecNodes_pop(self)

    def append(self, x):
        return _dive.vecNodes_append(self, x)

    def empty(self):
        return _dive.vecNodes_empty(self)

    def size(self):
        return _dive.vecNodes_size(self)

    def swap(self, v):
        return _dive.vecNodes_swap(self, v)

    def begin(self):
        return _dive.vecNodes_begin(self)

    def end(self):
        return _dive.vecNodes_end(self)

    def rbegin(self):
        return _dive.vecNodes_rbegin(self)

    def rend(self):
        return _dive.vecNodes_rend(self)

    def clear(self):
        return _dive.vecNodes_clear(self)

    def get_allocator(self):
        return _dive.vecNodes_get_allocator(self)

    def pop_back(self):
        return _dive.vecNodes_pop_back(self)

    def erase(self, *args):
        return _dive.vecNodes_erase(self, *args)

    def __init__(self, *args):
        _dive.vecNodes_swiginit(self, _dive.new_vecNodes(*args))

    def push_back(self, x):
        return _dive.vecNodes_push_back(self, x)

    def front(self):
        return _dive.vecNodes_front(self)

    def back(self):
        return _dive.vecNodes_back(self)

    def assign(self, n, x):
        return _dive.vecNodes_assign(self, n, x)

    def resize(self, *args):
        return _dive.vecNodes_resize(self, *args)

    def insert(self, *args):
        return _dive.vecNodes_insert(self, *args)

    def reserve(self, n):
        return _dive.vecNodes_reserve(self, n)

    def capacity(self):
        return _dive.vecNodes_capacity(self)

    def __str__(self):
        return _dive.vecNodes___str__(self)
    __swig_destroy__ = _dive.delete_vecNodes

# Register vecNodes in _dive:
_dive.vecNodes_swigregister(vecNodes)
class Connectivity(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    nodeIndex = property(_dive.Connectivity_nodeIndex_get, _dive.Connectivity_nodeIndex_set)
    globalDofIndices = property(_dive.Connectivity_globalDofIndices_get, _dive.Connectivity_globalDofIndices_set)
    elements = property(_dive.Connectivity_elements_get, _dive.Connectivity_elements_set)

    def __init__(self):
        _dive.Connectivity_swiginit(self, _dive.new_Connectivity())
    __swig_destroy__ = _dive.delete_Connectivity

# Register Connectivity in _dive:
_dive.Connectivity_swigregister(Connectivity)
headerNode = cvar.headerNode

class INode(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _dive.delete_INode

    def GetPoint(self):
        return _dive.INode_GetPoint(self)

    def GetValue(self, *args):
        return _dive.INode_GetValue(self, *args)

    def GetTag(self):
        return _dive.INode_GetTag(self)

    def SetPoint(self, *args):
        return _dive.INode_SetPoint(self, *args)

    def SetValue(self, *args):
        return _dive.INode_SetValue(self, *args)

    def SetTag(self, tag):
        return _dive.INode_SetTag(self, tag)

    def SetNumberDof(self, numberDof):
        return _dive.INode_SetNumberDof(self, numberDof)

    def GetNumberDof(self):
        return _dive.INode_GetNumberDof(self)

    def GetConnectivity(self):
        return _dive.INode_GetConnectivity(self)

# Register INode in _dive:
_dive.INode_swigregister(INode)

def CreateNode(*args):
    return _dive.CreateNode(*args)

def CreateNodes(input, dim):
    return _dive.CreateNodes(input, dim)
class Node(INode):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _dive.delete_Node

    @staticmethod
    def Create():
        return _dive.Node_Create()

    def GetPtr(self, *args):
        return _dive.Node_GetPtr(self, *args)

    def GetPoint(self):
        return _dive.Node_GetPoint(self)

    def GetValue(self, *args):
        return _dive.Node_GetValue(self, *args)

    def GetTag(self):
        return _dive.Node_GetTag(self)

    def SetPoint(self, *args):
        return _dive.Node_SetPoint(self, *args)

    def SetValue(self, *args):
        return _dive.Node_SetValue(self, *args)

    def SetTag(self, tag):
        return _dive.Node_SetTag(self, tag)

    def SetNumberDof(self, numberDof):
        return _dive.Node_SetNumberDof(self, numberDof)

    def GetNumberDof(self):
        return _dive.Node_GetNumberDof(self)

    def GetConnectivity(self):
        return _dive.Node_GetConnectivity(self)

# Register Node in _dive:
_dive.Node_swigregister(Node)


def AddVecNodes(self, nodes):
    for node in nodes:
        self.append(node)
    return self

def CompVecNodes(self, other):
    return self.GetTag() == other.GetTag()

def HashVecNodes(self):
    return hash(self.GetTag())

vecNodes.__add__ = AddVecNodes
vecNodes.__eq__ = CompVecNodes
vecNodes.__hash__ = HashVecNodes


class vecElements(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _dive.vecElements_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _dive.vecElements___nonzero__(self)

    def __bool__(self):
        return _dive.vecElements___bool__(self)

    def __len__(self):
        return _dive.vecElements___len__(self)

    def __getslice__(self, i, j):
        return _dive.vecElements___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _dive.vecElements___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _dive.vecElements___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _dive.vecElements___delitem__(self, *args)

    def __getitem__(self, *args):
        return _dive.vecElements___getitem__(self, *args)

    def __setitem__(self, *args):
        return _dive.vecElements___setitem__(self, *args)

    def pop(self):
        return _dive.vecElements_pop(self)

    def append(self, x):
        return _dive.vecElements_append(self, x)

    def empty(self):
        return _dive.vecElements_empty(self)

    def size(self):
        return _dive.vecElements_size(self)

    def swap(self, v):
        return _dive.vecElements_swap(self, v)

    def begin(self):
        return _dive.vecElements_begin(self)

    def end(self):
        return _dive.vecElements_end(self)

    def rbegin(self):
        return _dive.vecElements_rbegin(self)

    def rend(self):
        return _dive.vecElements_rend(self)

    def clear(self):
        return _dive.vecElements_clear(self)

    def get_allocator(self):
        return _dive.vecElements_get_allocator(self)

    def pop_back(self):
        return _dive.vecElements_pop_back(self)

    def erase(self, *args):
        return _dive.vecElements_erase(self, *args)

    def __init__(self, *args):
        _dive.vecElements_swiginit(self, _dive.new_vecElements(*args))

    def push_back(self, x):
        return _dive.vecElements_push_back(self, x)

    def front(self):
        return _dive.vecElements_front(self)

    def back(self):
        return _dive.vecElements_back(self)

    def assign(self, n, x):
        return _dive.vecElements_assign(self, n, x)

    def resize(self, *args):
        return _dive.vecElements_resize(self, *args)

    def insert(self, *args):
        return _dive.vecElements_insert(self, *args)

    def reserve(self, n):
        return _dive.vecElements_reserve(self, n)

    def capacity(self):
        return _dive.vecElements_capacity(self)

    def __str__(self):
        return _dive.vecElements___str__(self)
    __swig_destroy__ = _dive.delete_vecElements

# Register vecElements in _dive:
_dive.vecElements_swigregister(vecElements)
class IntegralAreaHelper(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    index1 = property(_dive.IntegralAreaHelper_index1_get, _dive.IntegralAreaHelper_index1_set)
    index2 = property(_dive.IntegralAreaHelper_index2_get, _dive.IntegralAreaHelper_index2_set)
    index3 = property(_dive.IntegralAreaHelper_index3_get, _dive.IntegralAreaHelper_index3_set)
    coord3 = property(_dive.IntegralAreaHelper_coord3_get, _dive.IntegralAreaHelper_coord3_set)

    def __init__(self):
        _dive.IntegralAreaHelper_swiginit(self, _dive.new_IntegralAreaHelper())
    __swig_destroy__ = _dive.delete_IntegralAreaHelper

# Register IntegralAreaHelper in _dive:
_dive.IntegralAreaHelper_swigregister(IntegralAreaHelper)
parametric_linear = cvar.parametric_linear
parametric_quadratic = cvar.parametric_quadratic
order_linear = cvar.order_linear
order_quadratic = cvar.order_quadratic
element_mass = cvar.element_mass
element_spring = cvar.element_spring
element_hexa8 = cvar.element_hexa8
element_hexa20 = cvar.element_hexa20
dimension_point = cvar.dimension_point
dimension_beam = cvar.dimension_beam
dimension_shell = cvar.dimension_shell
dimension_solid = cvar.dimension_solid
coordinate_one = cvar.coordinate_one
coordinate_two = cvar.coordinate_two
coordinate_three = cvar.coordinate_three
nodeIndexInvalid = cvar.nodeIndexInvalid

class IntegralEdgeHelper(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    index1 = property(_dive.IntegralEdgeHelper_index1_get, _dive.IntegralEdgeHelper_index1_set)
    index2 = property(_dive.IntegralEdgeHelper_index2_get, _dive.IntegralEdgeHelper_index2_set)
    index3 = property(_dive.IntegralEdgeHelper_index3_get, _dive.IntegralEdgeHelper_index3_set)
    coord2 = property(_dive.IntegralEdgeHelper_coord2_get, _dive.IntegralEdgeHelper_coord2_set)
    coord3 = property(_dive.IntegralEdgeHelper_coord3_get, _dive.IntegralEdgeHelper_coord3_set)

    def __init__(self):
        _dive.IntegralEdgeHelper_swiginit(self, _dive.new_IntegralEdgeHelper())
    __swig_destroy__ = _dive.delete_IntegralEdgeHelper

# Register IntegralEdgeHelper in _dive:
_dive.IntegralEdgeHelper_swigregister(IntegralEdgeHelper)
class IElement(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _dive.delete_IElement

    def GetTag(self):
        return _dive.IElement_GetTag(self)

    def GetType(self):
        return _dive.IElement_GetType(self)

    def GetCenter(self):
        return _dive.IElement_GetCenter(self)

    def GetMaterial(self):
        return _dive.IElement_GetMaterial(self)

    def GetProperty(self, key):
        return _dive.IElement_GetProperty(self, key)

    def GetNodeIndex(self, node):
        return _dive.IElement_GetNodeIndex(self, node)

    def GetElementIndex(self):
        return _dive.IElement_GetElementIndex(self)

    def GetNumberDof(self):
        return _dive.IElement_GetNumberDof(self)

    def GetNumberNodes(self):
        return _dive.IElement_GetNumberNodes(self)

    def GetNumberFaces(self):
        return _dive.IElement_GetNumberFaces(self)

    def GetNumberEdges(self):
        return _dive.IElement_GetNumberEdges(self)

    def GetNumberNodesFace(self, faceIndex):
        return _dive.IElement_GetNumberNodesFace(self, faceIndex)

    def GetNumberNodesEdge(self, edgeIndex):
        return _dive.IElement_GetNumberNodesEdge(self, edgeIndex)

    def GetNumberDimensions(self):
        return _dive.IElement_GetNumberDimensions(self)

    def GetNumberCoordinates(self):
        return _dive.IElement_GetNumberCoordinates(self)

    def GetNode(self, nodeIndex):
        return _dive.IElement_GetNode(self, nodeIndex)

    def GetNodeFace(self, faceIndex, nodeIndex):
        return _dive.IElement_GetNodeFace(self, faceIndex, nodeIndex)

    def GetNodeEdge(self, edgeIndex, nodeIndex):
        return _dive.IElement_GetNodeEdge(self, edgeIndex, nodeIndex)

    def GetNodes(self):
        return _dive.IElement_GetNodes(self)

    def SetTag(self, elementTag):
        return _dive.IElement_SetTag(self, elementTag)

    def SetNumberDof(self, numberDof):
        return _dive.IElement_SetNumberDof(self, numberDof)

    def SetNode(self, nodeIndex, node):
        return _dive.IElement_SetNode(self, nodeIndex, node)

    def SetElementIndex(self, index):
        return _dive.IElement_SetElementIndex(self, index)

    def SetMaterial(self, material):
        return _dive.IElement_SetMaterial(self, material)

    def SetProperty(self, value):
        return _dive.IElement_SetProperty(self, value)

    def LocalCoordinates(self, *args):
        return _dive.IElement_LocalCoordinates(self, *args)

    def GlobalCoordinates(self, *args):
        return _dive.IElement_GlobalCoordinates(self, *args)

    def SizeMinimum(self):
        return _dive.IElement_SizeMinimum(self)

    def SizeMaximum(self):
        return _dive.IElement_SizeMaximum(self)

    def IsUsed(self, node):
        return _dive.IElement_IsUsed(self, node)

    def IsMapped(self):
        return _dive.IElement_IsMapped(self)

    def IsCacheable(self):
        return _dive.IElement_IsCacheable(self)

    def InitializeCache(self):
        return _dive.IElement_InitializeCache(self)

# Register IElement in _dive:
_dive.IElement_swigregister(IElement)
class IElementMapped(IElement):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _dive.delete_IElementMapped

    def u(self, *args):
        return _dive.IElementMapped_u(self, *args)

    def du(self, *args):
        return _dive.IElementMapped_du(self, *args)

    def J(self, *args):
        return _dive.IElementMapped_J(self, *args)

    def InvJ(self, *args):
        return _dive.IElementMapped_InvJ(self, *args)

    def N(self, *args):
        return _dive.IElementMapped_N(self, *args)

    def dN(self, *args):
        return _dive.IElementMapped_dN(self, *args)

    def DetJ(self, *args):
        return _dive.IElementMapped_DetJ(self, *args)

    def DelA(self, local, dim1, dim2):
        return _dive.IElementMapped_DelA(self, local, dim1, dim2)

    def DelL(self, local, dim1):
        return _dive.IElementMapped_DelL(self, local, dim1)

    def GetOrder(self):
        return _dive.IElementMapped_GetOrder(self)

    def GetParametric(self):
        return _dive.IElementMapped_GetParametric(self)

    def SetOrder(self, order):
        return _dive.IElementMapped_SetOrder(self, order)

    def SetParametric(self, order):
        return _dive.IElementMapped_SetParametric(self, order)

    def IntegralWeakFormElement(self, weakForm, output):
        return _dive.IElementMapped_IntegralWeakFormElement(self, weakForm, output)

    def IntegralWeakFormLoad(self, weakForm, load, output):
        return _dive.IElementMapped_IntegralWeakFormLoad(self, weakForm, load, output)

# Register IElementMapped in _dive:
_dive.IElementMapped_swigregister(IElementMapped)
class IElementBeam(IElementMapped):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _dive.delete_IElementBeam

    def Length(self):
        return _dive.IElementBeam_Length(self)

# Register IElementBeam in _dive:
_dive.IElementBeam_swigregister(IElementBeam)
class IElementShell(IElementMapped):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _dive.delete_IElementShell

    def GetThickness(self):
        return _dive.IElementShell_GetThickness(self)

    def SetThickness(self, thickness):
        return _dive.IElementShell_SetThickness(self, thickness)

    def Area(self):
        return _dive.IElementShell_Area(self)

    def Length(self, edge):
        return _dive.IElementShell_Length(self, edge)

# Register IElementShell in _dive:
_dive.IElementShell_swigregister(IElementShell)
class IElementSolid(IElementMapped):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _dive.delete_IElementSolid

    def Volume(self):
        return _dive.IElementSolid_Volume(self)

    def Area(self, face):
        return _dive.IElementSolid_Area(self, face)

    def Length(self, edge):
        return _dive.IElementSolid_Length(self, edge)

# Register IElementSolid in _dive:
_dive.IElementSolid_swigregister(IElementSolid)

def CreateElementHexa(*args):
    return _dive.CreateElementHexa(*args)

def CastToElementHexa(element):
    return _dive.CastToElementHexa(element)
class ElementHexa(IElementSolid):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _dive.delete_ElementHexa

    @staticmethod
    def Create():
        return _dive.ElementHexa_Create()

    def GetPtr(self, *args):
        return _dive.ElementHexa_GetPtr(self, *args)

    def u(self, *args):
        return _dive.ElementHexa_u(self, *args)

    def du(self, *args):
        return _dive.ElementHexa_du(self, *args)

    def J(self, *args):
        return _dive.ElementHexa_J(self, *args)

    def InvJ(self, *args):
        return _dive.ElementHexa_InvJ(self, *args)

    def N(self, *args):
        return _dive.ElementHexa_N(self, *args)

    def dN(self, *args):
        return _dive.ElementHexa_dN(self, *args)

    def DelA(self, local, dim1, dim2):
        return _dive.ElementHexa_DelA(self, local, dim1, dim2)

    def DelL(self, local, dim1):
        return _dive.ElementHexa_DelL(self, local, dim1)

    def DetJ(self, *args):
        return _dive.ElementHexa_DetJ(self, *args)

    def Volume(self):
        return _dive.ElementHexa_Volume(self)

    def Area(self, face):
        return _dive.ElementHexa_Area(self, face)

    def Length(self, edge):
        return _dive.ElementHexa_Length(self, edge)

    def SizeMinimum(self):
        return _dive.ElementHexa_SizeMinimum(self)

    def SizeMaximum(self):
        return _dive.ElementHexa_SizeMaximum(self)

    def LocalCoordinates(self, *args):
        return _dive.ElementHexa_LocalCoordinates(self, *args)

    def GlobalCoordinates(self, *args):
        return _dive.ElementHexa_GlobalCoordinates(self, *args)

    def GetNodeFace(self, faceNumber, nodeNumber):
        return _dive.ElementHexa_GetNodeFace(self, faceNumber, nodeNumber)

    def GetNodeEdge(self, edgeNumber, nodeNumber):
        return _dive.ElementHexa_GetNodeEdge(self, edgeNumber, nodeNumber)

    def GetNode(self, nodeNumber):
        return _dive.ElementHexa_GetNode(self, nodeNumber)

    def GetNodes(self):
        return _dive.ElementHexa_GetNodes(self)

    def GetOrder(self):
        return _dive.ElementHexa_GetOrder(self)

    def GetParametric(self):
        return _dive.ElementHexa_GetParametric(self)

    def GetType(self):
        return _dive.ElementHexa_GetType(self)

    def GetNodeIndex(self, node):
        return _dive.ElementHexa_GetNodeIndex(self, node)

    def GetNumberNodesFace(self, faceNumber):
        return _dive.ElementHexa_GetNumberNodesFace(self, faceNumber)

    def GetNumberNodesEdge(self, edgeNode):
        return _dive.ElementHexa_GetNumberNodesEdge(self, edgeNode)

    def GetNumberNodes(self):
        return _dive.ElementHexa_GetNumberNodes(self)

    def GetNumberFaces(self):
        return _dive.ElementHexa_GetNumberFaces(self)

    def GetNumberEdges(self):
        return _dive.ElementHexa_GetNumberEdges(self)

    def GetNumberDimensions(self):
        return _dive.ElementHexa_GetNumberDimensions(self)

    def GetNumberCoordinates(self):
        return _dive.ElementHexa_GetNumberCoordinates(self)

    def GetCenter(self):
        return _dive.ElementHexa_GetCenter(self)

    def GetTag(self):
        return _dive.ElementHexa_GetTag(self)

    def GetMaterial(self):
        return _dive.ElementHexa_GetMaterial(self)

    def GetElementIndex(self):
        return _dive.ElementHexa_GetElementIndex(self)

    def GetNumberDof(self):
        return _dive.ElementHexa_GetNumberDof(self)

    def GetProperty(self, key):
        return _dive.ElementHexa_GetProperty(self, key)

    def SetNumberDof(self, numberDof):
        return _dive.ElementHexa_SetNumberDof(self, numberDof)

    def SetNode(self, nodeNumber, node):
        return _dive.ElementHexa_SetNode(self, nodeNumber, node)

    def SetOrder(self, order):
        return _dive.ElementHexa_SetOrder(self, order)

    def SetParametric(self, order):
        return _dive.ElementHexa_SetParametric(self, order)

    def SetTag(self, elementTag):
        return _dive.ElementHexa_SetTag(self, elementTag)

    def SetMaterial(self, material):
        return _dive.ElementHexa_SetMaterial(self, material)

    def SetElementIndex(self, index):
        return _dive.ElementHexa_SetElementIndex(self, index)

    def SetProperty(self, value):
        return _dive.ElementHexa_SetProperty(self, value)

    def IsUsed(self, node):
        return _dive.ElementHexa_IsUsed(self, node)

    def IsMapped(self):
        return _dive.ElementHexa_IsMapped(self)

    def IsCacheable(self):
        return _dive.ElementHexa_IsCacheable(self)

    def InitializeCache(self):
        return _dive.ElementHexa_InitializeCache(self)

    def IntegralWeakFormElement(self, weakForm, output):
        return _dive.ElementHexa_IntegralWeakFormElement(self, weakForm, output)

    def IntegralWeakFormLoad(self, weakForm, load, output):
        return _dive.ElementHexa_IntegralWeakFormLoad(self, weakForm, load, output)
    linearFunctions_ = property(_dive.ElementHexa_linearFunctions__get, _dive.ElementHexa_linearFunctions__set)
    quadraticFunctions_ = property(_dive.ElementHexa_quadraticFunctions__get, _dive.ElementHexa_quadraticFunctions__set)

# Register ElementHexa in _dive:
_dive.ElementHexa_swigregister(ElementHexa)

def CreateElementMass(*args):
    return _dive.CreateElementMass(*args)

def CastToElementMass(element):
    return _dive.CastToElementMass(element)
class ElementMass(IElement):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _dive.delete_ElementMass

    @staticmethod
    def Create():
        return _dive.ElementMass_Create()

    def GetPtr(self, *args):
        return _dive.ElementMass_GetPtr(self, *args)

    def GetTag(self):
        return _dive.ElementMass_GetTag(self)

    def GetType(self):
        return _dive.ElementMass_GetType(self)

    def GetCenter(self):
        return _dive.ElementMass_GetCenter(self)

    def GetMaterial(self):
        return _dive.ElementMass_GetMaterial(self)

    def GetNodeIndex(self, node):
        return _dive.ElementMass_GetNodeIndex(self, node)

    def GetElementIndex(self):
        return _dive.ElementMass_GetElementIndex(self)

    def GetNumberDof(self):
        return _dive.ElementMass_GetNumberDof(self)

    def GetNumberNodes(self):
        return _dive.ElementMass_GetNumberNodes(self)

    def GetNumberFaces(self):
        return _dive.ElementMass_GetNumberFaces(self)

    def GetNumberEdges(self):
        return _dive.ElementMass_GetNumberEdges(self)

    def GetNumberNodesFace(self, faceNumber):
        return _dive.ElementMass_GetNumberNodesFace(self, faceNumber)

    def GetNumberNodesEdge(self, edgeNode):
        return _dive.ElementMass_GetNumberNodesEdge(self, edgeNode)

    def GetNumberDimensions(self):
        return _dive.ElementMass_GetNumberDimensions(self)

    def GetNumberCoordinates(self):
        return _dive.ElementMass_GetNumberCoordinates(self)

    def GetNode(self, nodeNumber):
        return _dive.ElementMass_GetNode(self, nodeNumber)

    def GetNodeFace(self, faceNumber, nodeNumber):
        return _dive.ElementMass_GetNodeFace(self, faceNumber, nodeNumber)

    def GetNodeEdge(self, edgeNumber, nodeNumber):
        return _dive.ElementMass_GetNodeEdge(self, edgeNumber, nodeNumber)

    def GetNodes(self):
        return _dive.ElementMass_GetNodes(self)

    def GetProperty(self, key):
        return _dive.ElementMass_GetProperty(self, key)

    def SetTag(self, elementTag):
        return _dive.ElementMass_SetTag(self, elementTag)

    def SetNumberDof(self, numberDof):
        return _dive.ElementMass_SetNumberDof(self, numberDof)

    def SetNode(self, nodeNumber, node):
        return _dive.ElementMass_SetNode(self, nodeNumber, node)

    def SetElementIndex(self, index):
        return _dive.ElementMass_SetElementIndex(self, index)

    def SetMaterial(self, material):
        return _dive.ElementMass_SetMaterial(self, material)

    def SetProperty(self, value):
        return _dive.ElementMass_SetProperty(self, value)

    def LocalCoordinates(self, *args):
        return _dive.ElementMass_LocalCoordinates(self, *args)

    def GlobalCoordinates(self, *args):
        return _dive.ElementMass_GlobalCoordinates(self, *args)

    def SizeMinimum(self):
        return _dive.ElementMass_SizeMinimum(self)

    def SizeMaximum(self):
        return _dive.ElementMass_SizeMaximum(self)

    def IsUsed(self, node):
        return _dive.ElementMass_IsUsed(self, node)

    def IsMapped(self):
        return _dive.ElementMass_IsMapped(self)

    def IsCacheable(self):
        return _dive.ElementMass_IsCacheable(self)

    def InitializeCache(self):
        return _dive.ElementMass_InitializeCache(self)

    def GetMass(self):
        return _dive.ElementMass_GetMass(self)

    def SetMass(self, mass):
        return _dive.ElementMass_SetMass(self, mass)

    def Mass(self, output):
        return _dive.ElementMass_Mass(self, output)

# Register ElementMass in _dive:
_dive.ElementMass_swigregister(ElementMass)

def CreateElementSpring(*args):
    return _dive.CreateElementSpring(*args)

def CastToElementSpring(element):
    return _dive.CastToElementSpring(element)
class ElementSpring(IElement):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _dive.delete_ElementSpring

    @staticmethod
    def Create():
        return _dive.ElementSpring_Create()

    def GetPtr(self, *args):
        return _dive.ElementSpring_GetPtr(self, *args)

    def GetTag(self):
        return _dive.ElementSpring_GetTag(self)

    def GetType(self):
        return _dive.ElementSpring_GetType(self)

    def GetCenter(self):
        return _dive.ElementSpring_GetCenter(self)

    def GetMaterial(self):
        return _dive.ElementSpring_GetMaterial(self)

    def GetNodeIndex(self, node):
        return _dive.ElementSpring_GetNodeIndex(self, node)

    def GetElementIndex(self):
        return _dive.ElementSpring_GetElementIndex(self)

    def GetNumberDof(self):
        return _dive.ElementSpring_GetNumberDof(self)

    def GetNumberNodes(self):
        return _dive.ElementSpring_GetNumberNodes(self)

    def GetNumberFaces(self):
        return _dive.ElementSpring_GetNumberFaces(self)

    def GetNumberEdges(self):
        return _dive.ElementSpring_GetNumberEdges(self)

    def GetNumberNodesFace(self, faceNumber):
        return _dive.ElementSpring_GetNumberNodesFace(self, faceNumber)

    def GetNumberNodesEdge(self, edgeNode):
        return _dive.ElementSpring_GetNumberNodesEdge(self, edgeNode)

    def GetNumberDimensions(self):
        return _dive.ElementSpring_GetNumberDimensions(self)

    def GetNumberCoordinates(self):
        return _dive.ElementSpring_GetNumberCoordinates(self)

    def GetNode(self, nodeNumber):
        return _dive.ElementSpring_GetNode(self, nodeNumber)

    def GetNodeFace(self, faceNumber, nodeNumber):
        return _dive.ElementSpring_GetNodeFace(self, faceNumber, nodeNumber)

    def GetNodeEdge(self, edgeNumber, nodeNumber):
        return _dive.ElementSpring_GetNodeEdge(self, edgeNumber, nodeNumber)

    def GetNodes(self):
        return _dive.ElementSpring_GetNodes(self)

    def GetProperty(self, key):
        return _dive.ElementSpring_GetProperty(self, key)

    def SetTag(self, elementTag):
        return _dive.ElementSpring_SetTag(self, elementTag)

    def SetNumberDof(self, numberDof):
        return _dive.ElementSpring_SetNumberDof(self, numberDof)

    def SetNode(self, nodeNumber, node):
        return _dive.ElementSpring_SetNode(self, nodeNumber, node)

    def SetElementIndex(self, index):
        return _dive.ElementSpring_SetElementIndex(self, index)

    def SetMaterial(self, material):
        return _dive.ElementSpring_SetMaterial(self, material)

    def SetProperty(self, value):
        return _dive.ElementSpring_SetProperty(self, value)

    def LocalCoordinates(self, *args):
        return _dive.ElementSpring_LocalCoordinates(self, *args)

    def GlobalCoordinates(self, *args):
        return _dive.ElementSpring_GlobalCoordinates(self, *args)

    def SizeMinimum(self):
        return _dive.ElementSpring_SizeMinimum(self)

    def SizeMaximum(self):
        return _dive.ElementSpring_SizeMaximum(self)

    def IsUsed(self, node):
        return _dive.ElementSpring_IsUsed(self, node)

    def IsMapped(self):
        return _dive.ElementSpring_IsMapped(self)

    def IsCacheable(self):
        return _dive.ElementSpring_IsCacheable(self)

    def InitializeCache(self):
        return _dive.ElementSpring_InitializeCache(self)

    def GetStiffness(self):
        return _dive.ElementSpring_GetStiffness(self)

    def SetStiffness(self, stiffness):
        return _dive.ElementSpring_SetStiffness(self, stiffness)

    def Stiffness(self, output):
        return _dive.ElementSpring_Stiffness(self, output)

# Register ElementSpring in _dive:
_dive.ElementSpring_swigregister(ElementSpring)


def AddVecElements(self, elements):
    for element in elements:
        self.append(element)
    return self

def CompVecElements(self, other):
    return self.GetTag() == other.GetTag()

def HashVecElements(self):
    return hash(self.GetTag())

vecElements.__add__ = AddVecElements
vecElements.__eq__ = CompVecElements
vecElements.__hash__ = HashVecElements


class vecBoundaryConditions(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _dive.vecBoundaryConditions_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _dive.vecBoundaryConditions___nonzero__(self)

    def __bool__(self):
        return _dive.vecBoundaryConditions___bool__(self)

    def __len__(self):
        return _dive.vecBoundaryConditions___len__(self)

    def __getslice__(self, i, j):
        return _dive.vecBoundaryConditions___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _dive.vecBoundaryConditions___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _dive.vecBoundaryConditions___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _dive.vecBoundaryConditions___delitem__(self, *args)

    def __getitem__(self, *args):
        return _dive.vecBoundaryConditions___getitem__(self, *args)

    def __setitem__(self, *args):
        return _dive.vecBoundaryConditions___setitem__(self, *args)

    def pop(self):
        return _dive.vecBoundaryConditions_pop(self)

    def append(self, x):
        return _dive.vecBoundaryConditions_append(self, x)

    def empty(self):
        return _dive.vecBoundaryConditions_empty(self)

    def size(self):
        return _dive.vecBoundaryConditions_size(self)

    def swap(self, v):
        return _dive.vecBoundaryConditions_swap(self, v)

    def begin(self):
        return _dive.vecBoundaryConditions_begin(self)

    def end(self):
        return _dive.vecBoundaryConditions_end(self)

    def rbegin(self):
        return _dive.vecBoundaryConditions_rbegin(self)

    def rend(self):
        return _dive.vecBoundaryConditions_rend(self)

    def clear(self):
        return _dive.vecBoundaryConditions_clear(self)

    def get_allocator(self):
        return _dive.vecBoundaryConditions_get_allocator(self)

    def pop_back(self):
        return _dive.vecBoundaryConditions_pop_back(self)

    def erase(self, *args):
        return _dive.vecBoundaryConditions_erase(self, *args)

    def __init__(self, *args):
        _dive.vecBoundaryConditions_swiginit(self, _dive.new_vecBoundaryConditions(*args))

    def push_back(self, x):
        return _dive.vecBoundaryConditions_push_back(self, x)

    def front(self):
        return _dive.vecBoundaryConditions_front(self)

    def back(self):
        return _dive.vecBoundaryConditions_back(self)

    def assign(self, n, x):
        return _dive.vecBoundaryConditions_assign(self, n, x)

    def resize(self, *args):
        return _dive.vecBoundaryConditions_resize(self, *args)

    def insert(self, *args):
        return _dive.vecBoundaryConditions_insert(self, *args)

    def reserve(self, n):
        return _dive.vecBoundaryConditions_reserve(self, n)

    def capacity(self):
        return _dive.vecBoundaryConditions_capacity(self)
    __swig_destroy__ = _dive.delete_vecBoundaryConditions

# Register vecBoundaryConditions in _dive:
_dive.vecBoundaryConditions_swigregister(vecBoundaryConditions)
class vecLoads(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _dive.vecLoads_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _dive.vecLoads___nonzero__(self)

    def __bool__(self):
        return _dive.vecLoads___bool__(self)

    def __len__(self):
        return _dive.vecLoads___len__(self)

    def __getslice__(self, i, j):
        return _dive.vecLoads___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _dive.vecLoads___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _dive.vecLoads___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _dive.vecLoads___delitem__(self, *args)

    def __getitem__(self, *args):
        return _dive.vecLoads___getitem__(self, *args)

    def __setitem__(self, *args):
        return _dive.vecLoads___setitem__(self, *args)

    def pop(self):
        return _dive.vecLoads_pop(self)

    def append(self, x):
        return _dive.vecLoads_append(self, x)

    def empty(self):
        return _dive.vecLoads_empty(self)

    def size(self):
        return _dive.vecLoads_size(self)

    def swap(self, v):
        return _dive.vecLoads_swap(self, v)

    def begin(self):
        return _dive.vecLoads_begin(self)

    def end(self):
        return _dive.vecLoads_end(self)

    def rbegin(self):
        return _dive.vecLoads_rbegin(self)

    def rend(self):
        return _dive.vecLoads_rend(self)

    def clear(self):
        return _dive.vecLoads_clear(self)

    def get_allocator(self):
        return _dive.vecLoads_get_allocator(self)

    def pop_back(self):
        return _dive.vecLoads_pop_back(self)

    def erase(self, *args):
        return _dive.vecLoads_erase(self, *args)

    def __init__(self, *args):
        _dive.vecLoads_swiginit(self, _dive.new_vecLoads(*args))

    def push_back(self, x):
        return _dive.vecLoads_push_back(self, x)

    def front(self):
        return _dive.vecLoads_front(self)

    def back(self):
        return _dive.vecLoads_back(self)

    def assign(self, n, x):
        return _dive.vecLoads_assign(self, n, x)

    def resize(self, *args):
        return _dive.vecLoads_resize(self, *args)

    def insert(self, *args):
        return _dive.vecLoads_insert(self, *args)

    def reserve(self, n):
        return _dive.vecLoads_reserve(self, n)

    def capacity(self):
        return _dive.vecLoads_capacity(self)
    __swig_destroy__ = _dive.delete_vecLoads

# Register vecLoads in _dive:
_dive.vecLoads_swigregister(vecLoads)
class IBoundaryCondition(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _dive.delete_IBoundaryCondition

    def GetType(self):
        return _dive.IBoundaryCondition_GetType(self)

    def GetNode(self):
        return _dive.IBoundaryCondition_GetNode(self)

    def GetDofIndex(self):
        return _dive.IBoundaryCondition_GetDofIndex(self)

    def GetValue(self):
        return _dive.IBoundaryCondition_GetValue(self)

    def SetNode(self, node):
        return _dive.IBoundaryCondition_SetNode(self, node)

    def SetDofIndex(self, dofIndex):
        return _dive.IBoundaryCondition_SetDofIndex(self, dofIndex)

    def SetValue(self, value):
        return _dive.IBoundaryCondition_SetValue(self, value)

# Register IBoundaryCondition in _dive:
_dive.IBoundaryCondition_swigregister(IBoundaryCondition)
load_boundary_condition = cvar.load_boundary_condition
load_distributed_volume = cvar.load_distributed_volume
load_distributed_face = cvar.load_distributed_face
load_distributed_edge = cvar.load_distributed_edge
load_node = cvar.load_node
load_node_transient = cvar.load_node_transient

class ILoad(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _dive.delete_ILoad

    def GetType(self):
        return _dive.ILoad_GetType(self)

# Register ILoad in _dive:
_dive.ILoad_swigregister(ILoad)
class ILoadDistributedVolume(ILoad):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _dive.delete_ILoadDistributedVolume

    def GetElement(self):
        return _dive.ILoadDistributedVolume_GetElement(self)

    def GetValue(self, point):
        return _dive.ILoadDistributedVolume_GetValue(self, point)

    def SetElement(self, element):
        return _dive.ILoadDistributedVolume_SetElement(self, element)

    def SetValue(self, value):
        return _dive.ILoadDistributedVolume_SetValue(self, value)

# Register ILoadDistributedVolume in _dive:
_dive.ILoadDistributedVolume_swigregister(ILoadDistributedVolume)
class ILoadDistributedFace(ILoad):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _dive.delete_ILoadDistributedFace

    def GetElement(self):
        return _dive.ILoadDistributedFace_GetElement(self)

    def GetFaceIndex(self):
        return _dive.ILoadDistributedFace_GetFaceIndex(self)

    def GetValue(self, point):
        return _dive.ILoadDistributedFace_GetValue(self, point)

    def SetElement(self, element):
        return _dive.ILoadDistributedFace_SetElement(self, element)

    def SetFaceIndex(self, faceIndex):
        return _dive.ILoadDistributedFace_SetFaceIndex(self, faceIndex)

    def SetValue(self, value):
        return _dive.ILoadDistributedFace_SetValue(self, value)

# Register ILoadDistributedFace in _dive:
_dive.ILoadDistributedFace_swigregister(ILoadDistributedFace)
class ILoadDistributedEdge(ILoad):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _dive.delete_ILoadDistributedEdge

    def GetElement(self):
        return _dive.ILoadDistributedEdge_GetElement(self)

    def GetEdgeIndex(self):
        return _dive.ILoadDistributedEdge_GetEdgeIndex(self)

    def GetValue(self, point):
        return _dive.ILoadDistributedEdge_GetValue(self, point)

    def SetElement(self, element):
        return _dive.ILoadDistributedEdge_SetElement(self, element)

    def SetEdgeIndex(self, edgeIndex):
        return _dive.ILoadDistributedEdge_SetEdgeIndex(self, edgeIndex)

    def SetValue(self, value):
        return _dive.ILoadDistributedEdge_SetValue(self, value)

# Register ILoadDistributedEdge in _dive:
_dive.ILoadDistributedEdge_swigregister(ILoadDistributedEdge)
class ILoadNode(ILoad):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _dive.delete_ILoadNode

    def GetNode(self):
        return _dive.ILoadNode_GetNode(self)

    def GetValue(self):
        return _dive.ILoadNode_GetValue(self)

    def SetNode(self, node):
        return _dive.ILoadNode_SetNode(self, node)

    def SetValue(self, value):
        return _dive.ILoadNode_SetValue(self, value)

# Register ILoadNode in _dive:
_dive.ILoadNode_swigregister(ILoadNode)
class ILoadNodeTransient(ILoad):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _dive.delete_ILoadNodeTransient

    def GetNode(self):
        return _dive.ILoadNodeTransient_GetNode(self)

    def GetValue(self, time):
        return _dive.ILoadNodeTransient_GetValue(self, time)

    def SetNode(self, node):
        return _dive.ILoadNodeTransient_SetNode(self, node)

    def SetValue(self, value):
        return _dive.ILoadNodeTransient_SetValue(self, value)

# Register ILoadNodeTransient in _dive:
_dive.ILoadNodeTransient_swigregister(ILoadNodeTransient)

def CreateBoundaryCondition(node, dofIndex, value):
    return _dive.CreateBoundaryCondition(node, dofIndex, value)
class BoundaryCondition(IBoundaryCondition):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _dive.delete_BoundaryCondition

    @staticmethod
    def Create():
        return _dive.BoundaryCondition_Create()

    def GetPtr(self, *args):
        return _dive.BoundaryCondition_GetPtr(self, *args)

    def GetType(self):
        return _dive.BoundaryCondition_GetType(self)

    def GetNode(self):
        return _dive.BoundaryCondition_GetNode(self)

    def GetDofIndex(self):
        return _dive.BoundaryCondition_GetDofIndex(self)

    def GetValue(self):
        return _dive.BoundaryCondition_GetValue(self)

    def SetNode(self, node):
        return _dive.BoundaryCondition_SetNode(self, node)

    def SetDofIndex(self, dofIndex):
        return _dive.BoundaryCondition_SetDofIndex(self, dofIndex)

    def SetValue(self, value):
        return _dive.BoundaryCondition_SetValue(self, value)

# Register BoundaryCondition in _dive:
_dive.BoundaryCondition_swigregister(BoundaryCondition)

def CreateLoadDistributedVolume(element, value):
    return _dive.CreateLoadDistributedVolume(element, value)
class LoadDistributedVolume(ILoadDistributedVolume):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _dive.delete_LoadDistributedVolume

    @staticmethod
    def Create():
        return _dive.LoadDistributedVolume_Create()

    def GetPtr(self, *args):
        return _dive.LoadDistributedVolume_GetPtr(self, *args)

    def GetType(self):
        return _dive.LoadDistributedVolume_GetType(self)

    def GetElement(self):
        return _dive.LoadDistributedVolume_GetElement(self)

    def GetValue(self, point):
        return _dive.LoadDistributedVolume_GetValue(self, point)

    def SetElement(self, element):
        return _dive.LoadDistributedVolume_SetElement(self, element)

    def SetValue(self, value):
        return _dive.LoadDistributedVolume_SetValue(self, value)

# Register LoadDistributedVolume in _dive:
_dive.LoadDistributedVolume_swigregister(LoadDistributedVolume)

def CreateLoadDistributedFace(element, faceIndex, value):
    return _dive.CreateLoadDistributedFace(element, faceIndex, value)
class LoadDistributedFace(ILoadDistributedFace):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _dive.delete_LoadDistributedFace

    @staticmethod
    def Create():
        return _dive.LoadDistributedFace_Create()

    def GetPtr(self, *args):
        return _dive.LoadDistributedFace_GetPtr(self, *args)

    def GetType(self):
        return _dive.LoadDistributedFace_GetType(self)

    def GetElement(self):
        return _dive.LoadDistributedFace_GetElement(self)

    def GetValue(self, point):
        return _dive.LoadDistributedFace_GetValue(self, point)

    def GetFaceIndex(self):
        return _dive.LoadDistributedFace_GetFaceIndex(self)

    def SetElement(self, element):
        return _dive.LoadDistributedFace_SetElement(self, element)

    def SetFaceIndex(self, faceIndex):
        return _dive.LoadDistributedFace_SetFaceIndex(self, faceIndex)

    def SetValue(self, value):
        return _dive.LoadDistributedFace_SetValue(self, value)

# Register LoadDistributedFace in _dive:
_dive.LoadDistributedFace_swigregister(LoadDistributedFace)

def CreateLoadDistributedEdge(element, edgeIndex, value):
    return _dive.CreateLoadDistributedEdge(element, edgeIndex, value)
class LoadDistributedEdge(ILoadDistributedEdge):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _dive.delete_LoadDistributedEdge

    @staticmethod
    def Create():
        return _dive.LoadDistributedEdge_Create()

    def GetPtr(self, *args):
        return _dive.LoadDistributedEdge_GetPtr(self, *args)

    def GetType(self):
        return _dive.LoadDistributedEdge_GetType(self)

    def GetElement(self):
        return _dive.LoadDistributedEdge_GetElement(self)

    def GetValue(self, point):
        return _dive.LoadDistributedEdge_GetValue(self, point)

    def GetEdgeIndex(self):
        return _dive.LoadDistributedEdge_GetEdgeIndex(self)

    def SetElement(self, element):
        return _dive.LoadDistributedEdge_SetElement(self, element)

    def SetEdgeIndex(self, edgeIndex):
        return _dive.LoadDistributedEdge_SetEdgeIndex(self, edgeIndex)

    def SetValue(self, value):
        return _dive.LoadDistributedEdge_SetValue(self, value)

# Register LoadDistributedEdge in _dive:
_dive.LoadDistributedEdge_swigregister(LoadDistributedEdge)

def CreateLoadNode(node, value):
    return _dive.CreateLoadNode(node, value)
class LoadNode(ILoadNode):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _dive.delete_LoadNode

    @staticmethod
    def Create():
        return _dive.LoadNode_Create()

    def GetPtr(self, *args):
        return _dive.LoadNode_GetPtr(self, *args)

    def GetType(self):
        return _dive.LoadNode_GetType(self)

    def GetNode(self):
        return _dive.LoadNode_GetNode(self)

    def GetValue(self):
        return _dive.LoadNode_GetValue(self)

    def SetNode(self, node):
        return _dive.LoadNode_SetNode(self, node)

    def SetValue(self, value):
        return _dive.LoadNode_SetValue(self, value)

# Register LoadNode in _dive:
_dive.LoadNode_swigregister(LoadNode)

def CreateLoadNodeTransient(node, value):
    return _dive.CreateLoadNodeTransient(node, value)
class LoadNodeTransient(ILoadNodeTransient):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _dive.delete_LoadNodeTransient

    @staticmethod
    def Create():
        return _dive.LoadNodeTransient_Create()

    def GetPtr(self, *args):
        return _dive.LoadNodeTransient_GetPtr(self, *args)

    def GetType(self):
        return _dive.LoadNodeTransient_GetType(self)

    def GetNode(self):
        return _dive.LoadNodeTransient_GetNode(self)

    def GetValue(self, time):
        return _dive.LoadNodeTransient_GetValue(self, time)

    def SetNode(self, node):
        return _dive.LoadNodeTransient_SetNode(self, node)

    def SetValue(self, value):
        return _dive.LoadNodeTransient_SetValue(self, value)

# Register LoadNodeTransient in _dive:
_dive.LoadNodeTransient_swigregister(LoadNodeTransient)
class vecMeshes(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _dive.vecMeshes_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _dive.vecMeshes___nonzero__(self)

    def __bool__(self):
        return _dive.vecMeshes___bool__(self)

    def __len__(self):
        return _dive.vecMeshes___len__(self)

    def __getslice__(self, i, j):
        return _dive.vecMeshes___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _dive.vecMeshes___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _dive.vecMeshes___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _dive.vecMeshes___delitem__(self, *args)

    def __getitem__(self, *args):
        return _dive.vecMeshes___getitem__(self, *args)

    def __setitem__(self, *args):
        return _dive.vecMeshes___setitem__(self, *args)

    def pop(self):
        return _dive.vecMeshes_pop(self)

    def append(self, x):
        return _dive.vecMeshes_append(self, x)

    def empty(self):
        return _dive.vecMeshes_empty(self)

    def size(self):
        return _dive.vecMeshes_size(self)

    def swap(self, v):
        return _dive.vecMeshes_swap(self, v)

    def begin(self):
        return _dive.vecMeshes_begin(self)

    def end(self):
        return _dive.vecMeshes_end(self)

    def rbegin(self):
        return _dive.vecMeshes_rbegin(self)

    def rend(self):
        return _dive.vecMeshes_rend(self)

    def clear(self):
        return _dive.vecMeshes_clear(self)

    def get_allocator(self):
        return _dive.vecMeshes_get_allocator(self)

    def pop_back(self):
        return _dive.vecMeshes_pop_back(self)

    def erase(self, *args):
        return _dive.vecMeshes_erase(self, *args)

    def __init__(self, *args):
        _dive.vecMeshes_swiginit(self, _dive.new_vecMeshes(*args))

    def push_back(self, x):
        return _dive.vecMeshes_push_back(self, x)

    def front(self):
        return _dive.vecMeshes_front(self)

    def back(self):
        return _dive.vecMeshes_back(self)

    def assign(self, n, x):
        return _dive.vecMeshes_assign(self, n, x)

    def resize(self, *args):
        return _dive.vecMeshes_resize(self, *args)

    def insert(self, *args):
        return _dive.vecMeshes_insert(self, *args)

    def reserve(self, n):
        return _dive.vecMeshes_reserve(self, n)

    def capacity(self):
        return _dive.vecMeshes_capacity(self)
    __swig_destroy__ = _dive.delete_vecMeshes

# Register vecMeshes in _dive:
_dive.vecMeshes_swigregister(vecMeshes)
class vecDofMeshIndices(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _dive.vecDofMeshIndices_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _dive.vecDofMeshIndices___nonzero__(self)

    def __bool__(self):
        return _dive.vecDofMeshIndices___bool__(self)

    def __len__(self):
        return _dive.vecDofMeshIndices___len__(self)

    def __getslice__(self, i, j):
        return _dive.vecDofMeshIndices___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _dive.vecDofMeshIndices___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _dive.vecDofMeshIndices___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _dive.vecDofMeshIndices___delitem__(self, *args)

    def __getitem__(self, *args):
        return _dive.vecDofMeshIndices___getitem__(self, *args)

    def __setitem__(self, *args):
        return _dive.vecDofMeshIndices___setitem__(self, *args)

    def pop(self):
        return _dive.vecDofMeshIndices_pop(self)

    def append(self, x):
        return _dive.vecDofMeshIndices_append(self, x)

    def empty(self):
        return _dive.vecDofMeshIndices_empty(self)

    def size(self):
        return _dive.vecDofMeshIndices_size(self)

    def swap(self, v):
        return _dive.vecDofMeshIndices_swap(self, v)

    def begin(self):
        return _dive.vecDofMeshIndices_begin(self)

    def end(self):
        return _dive.vecDofMeshIndices_end(self)

    def rbegin(self):
        return _dive.vecDofMeshIndices_rbegin(self)

    def rend(self):
        return _dive.vecDofMeshIndices_rend(self)

    def clear(self):
        return _dive.vecDofMeshIndices_clear(self)

    def get_allocator(self):
        return _dive.vecDofMeshIndices_get_allocator(self)

    def pop_back(self):
        return _dive.vecDofMeshIndices_pop_back(self)

    def erase(self, *args):
        return _dive.vecDofMeshIndices_erase(self, *args)

    def __init__(self, *args):
        _dive.vecDofMeshIndices_swiginit(self, _dive.new_vecDofMeshIndices(*args))

    def push_back(self, x):
        return _dive.vecDofMeshIndices_push_back(self, x)

    def front(self):
        return _dive.vecDofMeshIndices_front(self)

    def back(self):
        return _dive.vecDofMeshIndices_back(self)

    def assign(self, n, x):
        return _dive.vecDofMeshIndices_assign(self, n, x)

    def resize(self, *args):
        return _dive.vecDofMeshIndices_resize(self, *args)

    def insert(self, *args):
        return _dive.vecDofMeshIndices_insert(self, *args)

    def reserve(self, n):
        return _dive.vecDofMeshIndices_reserve(self, n)

    def capacity(self):
        return _dive.vecDofMeshIndices_capacity(self)

    def __str__(self):
        return _dive.vecDofMeshIndices___str__(self)
    __swig_destroy__ = _dive.delete_vecDofMeshIndices

# Register vecDofMeshIndices in _dive:
_dive.vecDofMeshIndices_swigregister(vecDofMeshIndices)
class vecNodeMeshIndices(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _dive.vecNodeMeshIndices_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _dive.vecNodeMeshIndices___nonzero__(self)

    def __bool__(self):
        return _dive.vecNodeMeshIndices___bool__(self)

    def __len__(self):
        return _dive.vecNodeMeshIndices___len__(self)

    def __getslice__(self, i, j):
        return _dive.vecNodeMeshIndices___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _dive.vecNodeMeshIndices___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _dive.vecNodeMeshIndices___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _dive.vecNodeMeshIndices___delitem__(self, *args)

    def __getitem__(self, *args):
        return _dive.vecNodeMeshIndices___getitem__(self, *args)

    def __setitem__(self, *args):
        return _dive.vecNodeMeshIndices___setitem__(self, *args)

    def pop(self):
        return _dive.vecNodeMeshIndices_pop(self)

    def append(self, x):
        return _dive.vecNodeMeshIndices_append(self, x)

    def empty(self):
        return _dive.vecNodeMeshIndices_empty(self)

    def size(self):
        return _dive.vecNodeMeshIndices_size(self)

    def swap(self, v):
        return _dive.vecNodeMeshIndices_swap(self, v)

    def begin(self):
        return _dive.vecNodeMeshIndices_begin(self)

    def end(self):
        return _dive.vecNodeMeshIndices_end(self)

    def rbegin(self):
        return _dive.vecNodeMeshIndices_rbegin(self)

    def rend(self):
        return _dive.vecNodeMeshIndices_rend(self)

    def clear(self):
        return _dive.vecNodeMeshIndices_clear(self)

    def get_allocator(self):
        return _dive.vecNodeMeshIndices_get_allocator(self)

    def pop_back(self):
        return _dive.vecNodeMeshIndices_pop_back(self)

    def erase(self, *args):
        return _dive.vecNodeMeshIndices_erase(self, *args)

    def __init__(self, *args):
        _dive.vecNodeMeshIndices_swiginit(self, _dive.new_vecNodeMeshIndices(*args))

    def push_back(self, x):
        return _dive.vecNodeMeshIndices_push_back(self, x)

    def front(self):
        return _dive.vecNodeMeshIndices_front(self)

    def back(self):
        return _dive.vecNodeMeshIndices_back(self)

    def assign(self, n, x):
        return _dive.vecNodeMeshIndices_assign(self, n, x)

    def resize(self, *args):
        return _dive.vecNodeMeshIndices_resize(self, *args)

    def insert(self, *args):
        return _dive.vecNodeMeshIndices_insert(self, *args)

    def reserve(self, n):
        return _dive.vecNodeMeshIndices_reserve(self, n)

    def capacity(self):
        return _dive.vecNodeMeshIndices_capacity(self)
    __swig_destroy__ = _dive.delete_vecNodeMeshIndices

# Register vecNodeMeshIndices in _dive:
_dive.vecNodeMeshIndices_swigregister(vecNodeMeshIndices)
class arrNodeMeshIndices(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _dive.arrNodeMeshIndices_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _dive.arrNodeMeshIndices___nonzero__(self)

    def __bool__(self):
        return _dive.arrNodeMeshIndices___bool__(self)

    def __len__(self):
        return _dive.arrNodeMeshIndices___len__(self)

    def __getslice__(self, i, j):
        return _dive.arrNodeMeshIndices___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _dive.arrNodeMeshIndices___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _dive.arrNodeMeshIndices___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _dive.arrNodeMeshIndices___delitem__(self, *args)

    def __getitem__(self, *args):
        return _dive.arrNodeMeshIndices___getitem__(self, *args)

    def __setitem__(self, *args):
        return _dive.arrNodeMeshIndices___setitem__(self, *args)

    def pop(self):
        return _dive.arrNodeMeshIndices_pop(self)

    def append(self, x):
        return _dive.arrNodeMeshIndices_append(self, x)

    def empty(self):
        return _dive.arrNodeMeshIndices_empty(self)

    def size(self):
        return _dive.arrNodeMeshIndices_size(self)

    def swap(self, v):
        return _dive.arrNodeMeshIndices_swap(self, v)

    def begin(self):
        return _dive.arrNodeMeshIndices_begin(self)

    def end(self):
        return _dive.arrNodeMeshIndices_end(self)

    def rbegin(self):
        return _dive.arrNodeMeshIndices_rbegin(self)

    def rend(self):
        return _dive.arrNodeMeshIndices_rend(self)

    def clear(self):
        return _dive.arrNodeMeshIndices_clear(self)

    def get_allocator(self):
        return _dive.arrNodeMeshIndices_get_allocator(self)

    def pop_back(self):
        return _dive.arrNodeMeshIndices_pop_back(self)

    def erase(self, *args):
        return _dive.arrNodeMeshIndices_erase(self, *args)

    def __init__(self, *args):
        _dive.arrNodeMeshIndices_swiginit(self, _dive.new_arrNodeMeshIndices(*args))

    def push_back(self, x):
        return _dive.arrNodeMeshIndices_push_back(self, x)

    def front(self):
        return _dive.arrNodeMeshIndices_front(self)

    def back(self):
        return _dive.arrNodeMeshIndices_back(self)

    def assign(self, n, x):
        return _dive.arrNodeMeshIndices_assign(self, n, x)

    def resize(self, *args):
        return _dive.arrNodeMeshIndices_resize(self, *args)

    def insert(self, *args):
        return _dive.arrNodeMeshIndices_insert(self, *args)

    def reserve(self, n):
        return _dive.arrNodeMeshIndices_reserve(self, n)

    def capacity(self):
        return _dive.arrNodeMeshIndices_capacity(self)

    def __str__(self):
        return _dive.arrNodeMeshIndices___str__(self)
    __swig_destroy__ = _dive.delete_arrNodeMeshIndices

# Register arrNodeMeshIndices in _dive:
_dive.arrNodeMeshIndices_swigregister(arrNodeMeshIndices)
class vecDirichletMeshIndices(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _dive.vecDirichletMeshIndices_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _dive.vecDirichletMeshIndices___nonzero__(self)

    def __bool__(self):
        return _dive.vecDirichletMeshIndices___bool__(self)

    def __len__(self):
        return _dive.vecDirichletMeshIndices___len__(self)

    def __getslice__(self, i, j):
        return _dive.vecDirichletMeshIndices___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _dive.vecDirichletMeshIndices___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _dive.vecDirichletMeshIndices___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _dive.vecDirichletMeshIndices___delitem__(self, *args)

    def __getitem__(self, *args):
        return _dive.vecDirichletMeshIndices___getitem__(self, *args)

    def __setitem__(self, *args):
        return _dive.vecDirichletMeshIndices___setitem__(self, *args)

    def pop(self):
        return _dive.vecDirichletMeshIndices_pop(self)

    def append(self, x):
        return _dive.vecDirichletMeshIndices_append(self, x)

    def empty(self):
        return _dive.vecDirichletMeshIndices_empty(self)

    def size(self):
        return _dive.vecDirichletMeshIndices_size(self)

    def swap(self, v):
        return _dive.vecDirichletMeshIndices_swap(self, v)

    def begin(self):
        return _dive.vecDirichletMeshIndices_begin(self)

    def end(self):
        return _dive.vecDirichletMeshIndices_end(self)

    def rbegin(self):
        return _dive.vecDirichletMeshIndices_rbegin(self)

    def rend(self):
        return _dive.vecDirichletMeshIndices_rend(self)

    def clear(self):
        return _dive.vecDirichletMeshIndices_clear(self)

    def get_allocator(self):
        return _dive.vecDirichletMeshIndices_get_allocator(self)

    def pop_back(self):
        return _dive.vecDirichletMeshIndices_pop_back(self)

    def erase(self, *args):
        return _dive.vecDirichletMeshIndices_erase(self, *args)

    def __init__(self, *args):
        _dive.vecDirichletMeshIndices_swiginit(self, _dive.new_vecDirichletMeshIndices(*args))

    def push_back(self, x):
        return _dive.vecDirichletMeshIndices_push_back(self, x)

    def front(self):
        return _dive.vecDirichletMeshIndices_front(self)

    def back(self):
        return _dive.vecDirichletMeshIndices_back(self)

    def assign(self, n, x):
        return _dive.vecDirichletMeshIndices_assign(self, n, x)

    def resize(self, *args):
        return _dive.vecDirichletMeshIndices_resize(self, *args)

    def insert(self, *args):
        return _dive.vecDirichletMeshIndices_insert(self, *args)

    def reserve(self, n):
        return _dive.vecDirichletMeshIndices_reserve(self, n)

    def capacity(self):
        return _dive.vecDirichletMeshIndices_capacity(self)

    def __str__(self):
        return _dive.vecDirichletMeshIndices___str__(self)
    __swig_destroy__ = _dive.delete_vecDirichletMeshIndices

# Register vecDirichletMeshIndices in _dive:
_dive.vecDirichletMeshIndices_swigregister(vecDirichletMeshIndices)
class DofMeshIndex(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    node = property(_dive.DofMeshIndex_node_get, _dive.DofMeshIndex_node_set)
    nodeIndex = property(_dive.DofMeshIndex_nodeIndex_get, _dive.DofMeshIndex_nodeIndex_set)
    dofIndex = property(_dive.DofMeshIndex_dofIndex_get, _dive.DofMeshIndex_dofIndex_set)
    globalIndex = property(_dive.DofMeshIndex_globalIndex_get, _dive.DofMeshIndex_globalIndex_set)
    dirichlet = property(_dive.DofMeshIndex_dirichlet_get, _dive.DofMeshIndex_dirichlet_set)
    dirichletIndex = property(_dive.DofMeshIndex_dirichletIndex_get, _dive.DofMeshIndex_dirichletIndex_set)
    dirichletReordered = property(_dive.DofMeshIndex_dirichletReordered_get, _dive.DofMeshIndex_dirichletReordered_set)

    def __init__(self):
        _dive.DofMeshIndex_swiginit(self, _dive.new_DofMeshIndex())
    __swig_destroy__ = _dive.delete_DofMeshIndex

# Register DofMeshIndex in _dive:
_dive.DofMeshIndex_swigregister(DofMeshIndex)
class NodeMeshIndex(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    index = property(_dive.NodeMeshIndex_index_get, _dive.NodeMeshIndex_index_set)
    node = property(_dive.NodeMeshIndex_node_get, _dive.NodeMeshIndex_node_set)
    dofIndices = property(_dive.NodeMeshIndex_dofIndices_get, _dive.NodeMeshIndex_dofIndices_set)

    def __init__(self):
        _dive.NodeMeshIndex_swiginit(self, _dive.new_NodeMeshIndex())
    __swig_destroy__ = _dive.delete_NodeMeshIndex

# Register NodeMeshIndex in _dive:
_dive.NodeMeshIndex_swigregister(NodeMeshIndex)
class DirichletMeshIndex(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    node = property(_dive.DirichletMeshIndex_node_get, _dive.DirichletMeshIndex_node_set)
    dofIndex = property(_dive.DirichletMeshIndex_dofIndex_get, _dive.DirichletMeshIndex_dofIndex_set)

    def __init__(self):
        _dive.DirichletMeshIndex_swiginit(self, _dive.new_DirichletMeshIndex())
    __swig_destroy__ = _dive.delete_DirichletMeshIndex

# Register DirichletMeshIndex in _dive:
_dive.DirichletMeshIndex_swigregister(DirichletMeshIndex)
class IMesh(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _dive.delete_IMesh

    def AddNode(self, node, status, IndexCheck=False):
        return _dive.IMesh_AddNode(self, node, status, IndexCheck)

    def AddElement(self, element, status, IndexCheck=False):
        return _dive.IMesh_AddElement(self, element, status, IndexCheck)

    def RemoveNode(self, *args):
        return _dive.IMesh_RemoveNode(self, *args)

    def RemoveElement(self, *args):
        return _dive.IMesh_RemoveElement(self, *args)

    def GetNodes(self):
        return _dive.IMesh_GetNodes(self)

    def GetElements(self):
        return _dive.IMesh_GetElements(self)

    def GetNode(self, tag, status):
        return _dive.IMesh_GetNode(self, tag, status)

    def GetNodeIndex(self, index, status):
        return _dive.IMesh_GetNodeIndex(self, index, status)

    def GetNodeSorted(self, tag, status):
        return _dive.IMesh_GetNodeSorted(self, tag, status)

    def GetElement(self, tag, status):
        return _dive.IMesh_GetElement(self, tag, status)

    def GetElementIndex(self, index, status):
        return _dive.IMesh_GetElementIndex(self, index, status)

    def GetElementSorted(self, tag, status):
        return _dive.IMesh_GetElementSorted(self, tag, status)

    def GetTotalDof(self):
        return _dive.IMesh_GetTotalDof(self)

    def GetPivot(self):
        return _dive.IMesh_GetPivot(self)

    def GetTag(self):
        return _dive.IMesh_GetTag(self)

    def SetTag(self, tag):
        return _dive.IMesh_SetTag(self, tag)

    def SortNodesTag(self):
        return _dive.IMesh_SortNodesTag(self)

    def SortElementsTag(self):
        return _dive.IMesh_SortElementsTag(self)

    def GetIndexNode(self, tag, status):
        return _dive.IMesh_GetIndexNode(self, tag, status)

    def GetIndexNodeSorted(self, tag, status):
        return _dive.IMesh_GetIndexNodeSorted(self, tag, status)

    def GetIndexElement(self, tag, status):
        return _dive.IMesh_GetIndexElement(self, tag, status)

    def GetIndexElementSorted(self, tag, status):
        return _dive.IMesh_GetIndexElementSorted(self, tag, status)

# Register IMesh in _dive:
_dive.IMesh_swigregister(IMesh)

def CreateMesh(*args):
    return _dive.CreateMesh(*args)
class Mesh(IMesh):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _dive.delete_Mesh

    @staticmethod
    def Create():
        return _dive.Mesh_Create()

    def GetPtr(self, *args):
        return _dive.Mesh_GetPtr(self, *args)

    def AddNode(self, node, status, IndexCheck=False):
        return _dive.Mesh_AddNode(self, node, status, IndexCheck)

    def AddElement(self, element, status, IndexCheck=False):
        return _dive.Mesh_AddElement(self, element, status, IndexCheck)

    def RemoveNode(self, *args):
        return _dive.Mesh_RemoveNode(self, *args)

    def RemoveElement(self, *args):
        return _dive.Mesh_RemoveElement(self, *args)

    def GetNodes(self):
        return _dive.Mesh_GetNodes(self)

    def GetElements(self):
        return _dive.Mesh_GetElements(self)

    def GetNode(self, tag, status):
        return _dive.Mesh_GetNode(self, tag, status)

    def GetNodeIndex(self, index, status):
        return _dive.Mesh_GetNodeIndex(self, index, status)

    def GetNodeSorted(self, tag, status):
        return _dive.Mesh_GetNodeSorted(self, tag, status)

    def GetElement(self, tag, status):
        return _dive.Mesh_GetElement(self, tag, status)

    def GetElementIndex(self, index, status):
        return _dive.Mesh_GetElementIndex(self, index, status)

    def GetElementSorted(self, tag, status):
        return _dive.Mesh_GetElementSorted(self, tag, status)

    def GetTotalDof(self):
        return _dive.Mesh_GetTotalDof(self)

    def GetPivot(self):
        return _dive.Mesh_GetPivot(self)

    def GetTag(self):
        return _dive.Mesh_GetTag(self)

    def SetTag(self, tag):
        return _dive.Mesh_SetTag(self, tag)

    def SortNodesTag(self):
        return _dive.Mesh_SortNodesTag(self)

    def SortElementsTag(self):
        return _dive.Mesh_SortElementsTag(self)

    def GetIndexNode(self, tag, status):
        return _dive.Mesh_GetIndexNode(self, tag, status)

    def GetIndexNodeSorted(self, tag, status):
        return _dive.Mesh_GetIndexNodeSorted(self, tag, status)

    def GetIndexElement(self, tag, status):
        return _dive.Mesh_GetIndexElement(self, tag, status)

    def GetIndexElementSorted(self, tag, status):
        return _dive.Mesh_GetIndexElementSorted(self, tag, status)

# Register Mesh in _dive:
_dive.Mesh_swigregister(Mesh)

def GetSizeMinimum(elements):
    return _dive.GetSizeMinimum(elements)

def GetSizeMaximum(elements):
    return _dive.GetSizeMaximum(elements)

def LoadGmsh(meshTag, fileName, numberDof, status):
    return _dive.LoadGmsh(meshTag, fileName, numberDof, status)

def DeformByInterpolation(mesh, interpolation):
    return _dive.DeformByInterpolation(mesh, interpolation)
class IWeakFormElement(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _dive.delete_IWeakFormElement

    def WeakFormulation(self, element, cacheIndex, local, output):
        return _dive.IWeakFormElement_WeakFormulation(self, element, cacheIndex, local, output)

# Register IWeakFormElement in _dive:
_dive.IWeakFormElement_swigregister(IWeakFormElement)
class IWeakFormLoad(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _dive.delete_IWeakFormLoad

    def WeakFormulation(self, load, local, output):
        return _dive.IWeakFormLoad_WeakFormulation(self, load, local, output)

# Register IWeakFormLoad in _dive:
_dive.IWeakFormLoad_swigregister(IWeakFormLoad)

def IntegralForm(*args):
    return _dive.IntegralForm(*args)

def UpdateMeshElements(mesh, numberDof):
    return _dive.UpdateMeshElements(mesh, numberDof)

def UpdateDofMeshIndices(mesh, totalDof, dofMeshIndices):
    return _dive.UpdateDofMeshIndices(mesh, totalDof, dofMeshIndices)

def UpdateNodeMeshIndices(mesh, dofMeshIndices, nodeMeshIndices):
    return _dive.UpdateNodeMeshIndices(mesh, dofMeshIndices, nodeMeshIndices)

def UpdateDirichletIndices(dirichlets, pivot, dofMeshIndices, dirichletMeshIndices):
    return _dive.UpdateDirichletIndices(dirichlets, pivot, dofMeshIndices, dirichletMeshIndices)

def UpdateDirichletLoads(dofMeshIndices):
    return _dive.UpdateDirichletLoads(dofMeshIndices)

def Reorder(mesh, numberDof, nodeMeshIndices, dofMeshIndices):
    return _dive.Reorder(mesh, numberDof, nodeMeshIndices, dofMeshIndices)

def SortDofMeshIndices(dofMeshIndices):
    return _dive.SortDofMeshIndices(dofMeshIndices)
class IProblem(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _dive.delete_IProblem

    def GetNumberDof(self):
        return _dive.IProblem_GetNumberDof(self)

    def GetTotalDof(self):
        return _dive.IProblem_GetTotalDof(self)

    def GetPivot(self):
        return _dive.IProblem_GetPivot(self)

    def GetMesh(self):
        return _dive.IProblem_GetMesh(self)

    def GetType(self):
        return _dive.IProblem_GetType(self)

    def GetTag(self):
        return _dive.IProblem_GetTag(self)

    def GetDirichlets(self):
        return _dive.IProblem_GetDirichlets(self)

    def GetLoads(self):
        return _dive.IProblem_GetLoads(self)

    def GetDofMeshIndices(self):
        return _dive.IProblem_GetDofMeshIndices(self)

    def GetNodeMeshIndices(self):
        return _dive.IProblem_GetNodeMeshIndices(self)

    def GetDirichletMeshIndices(self):
        return _dive.IProblem_GetDirichletMeshIndices(self)

    def SetMesh(self, mesh):
        return _dive.IProblem_SetMesh(self, mesh)

    def SetTag(self, tag):
        return _dive.IProblem_SetTag(self, tag)

    def AddDirichlet(self, dirichlet):
        return _dive.IProblem_AddDirichlet(self, dirichlet)

    def AddLoad(self, load):
        return _dive.IProblem_AddLoad(self, load)

    def Initialize(self):
        return _dive.IProblem_Initialize(self)

    def UpdateMeshValues(self, u):
        return _dive.IProblem_UpdateMeshValues(self, u)

# Register IProblem in _dive:
_dive.IProblem_swigregister(IProblem)
problem_fluid = cvar.problem_fluid
problem_pressure = cvar.problem_pressure
problem_thermal = cvar.problem_thermal
problem_structural = cvar.problem_structural

class IFluid(IProblem):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _dive.delete_IFluid

    def GetTemperature(self):
        return _dive.IFluid_GetTemperature(self)

    def GetPressure(self):
        return _dive.IFluid_GetPressure(self)

    def GetVelocity(self):
        return _dive.IFluid_GetVelocity(self)

    def SetTemperature(self, temperature):
        return _dive.IFluid_SetTemperature(self, temperature)

    def SetPressure(self, pressure):
        return _dive.IFluid_SetPressure(self, pressure)

    def Mass(self):
        return _dive.IFluid_Mass(self)

    def Stiffness(self):
        return _dive.IFluid_Stiffness(self)

    def Convection(self):
        return _dive.IFluid_Convection(self)

    def ConvectionSymmetric(self):
        return _dive.IFluid_ConvectionSymmetric(self)

    def ConvectionAsymmetric(self):
        return _dive.IFluid_ConvectionAsymmetric(self)

    def Stabilization(self):
        return _dive.IFluid_Stabilization(self)

    def LoadDistributedVolume(self):
        return _dive.IFluid_LoadDistributedVolume(self)

    def LoadDistributedVolumeStabilization(self):
        return _dive.IFluid_LoadDistributedVolumeStabilization(self)

    def Momentum(self):
        return _dive.IFluid_Momentum(self)

    def Velocity(self):
        return _dive.IFluid_Velocity(self)

    def UpdateMeshValuesMomentum(self, q):
        return _dive.IFluid_UpdateMeshValuesMomentum(self, q)

# Register IFluid in _dive:
_dive.IFluid_swigregister(IFluid)
class IPressure(IProblem):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _dive.delete_IPressure

    def GetTemperature(self):
        return _dive.IPressure_GetTemperature(self)

    def GetPressure(self):
        return _dive.IPressure_GetPressure(self)

    def GetVelocity(self):
        return _dive.IPressure_GetVelocity(self)

    def SetTemperature(self, temperature):
        return _dive.IPressure_SetTemperature(self, temperature)

    def SetVelocity(self, velocity):
        return _dive.IPressure_SetVelocity(self, velocity)

    def Mass(self):
        return _dive.IPressure_Mass(self)

    def Stiffness(self):
        return _dive.IPressure_Stiffness(self)

    def Crossed(self, problemMomentum):
        return _dive.IPressure_Crossed(self, problemMomentum)

    def Stabilization(self, problemMomentum):
        return _dive.IPressure_Stabilization(self, problemMomentum)

    def DistributedVolumeDivergence(self, problemMomentum):
        return _dive.IPressure_DistributedVolumeDivergence(self, problemMomentum)

    def Pressure(self):
        return _dive.IPressure_Pressure(self)

# Register IPressure in _dive:
_dive.IPressure_swigregister(IPressure)
class IThermal(IProblem):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _dive.delete_IThermal

    def GetTemperature(self):
        return _dive.IThermal_GetTemperature(self)

    def GetPressure(self):
        return _dive.IThermal_GetPressure(self)

    def SetPressure(self, pressure):
        return _dive.IThermal_SetPressure(self, pressure)

    def Mass(self):
        return _dive.IThermal_Mass(self)

    def Stiffness(self):
        return _dive.IThermal_Stiffness(self)

    def Convection(self, problemMomentum):
        return _dive.IThermal_Convection(self, problemMomentum)

    def Stabilization(self, problemMomentum):
        return _dive.IThermal_Stabilization(self, problemMomentum)

    def Energy(self):
        return _dive.IThermal_Energy(self)

# Register IThermal in _dive:
_dive.IThermal_swigregister(IThermal)
class IStructural(IProblem):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _dive.delete_IStructural

    def GetTemperature(self):
        return _dive.IStructural_GetTemperature(self)

    def GetPressure(self):
        return _dive.IStructural_GetPressure(self)

    def SetTemperature(self, temperature):
        return _dive.IStructural_SetTemperature(self, temperature)

    def SetPressure(self, pressure):
        return _dive.IStructural_SetPressure(self, pressure)

    def Mass(self):
        return _dive.IStructural_Mass(self)

    def Stiffness(self):
        return _dive.IStructural_Stiffness(self)

    def LoadDistributedEdge(self):
        return _dive.IStructural_LoadDistributedEdge(self)

    def LoadDistributedFace(self):
        return _dive.IStructural_LoadDistributedFace(self)

    def LoadDistributedVolume(self):
        return _dive.IStructural_LoadDistributedVolume(self)

    def LoadNode(self, *args):
        return _dive.IStructural_LoadNode(self, *args)

    def Displacement(self):
        return _dive.IStructural_Displacement(self)

    def AddVelocity(self, velocity):
        return _dive.IStructural_AddVelocity(self, velocity)

    def GetVelocity(self):
        return _dive.IStructural_GetVelocity(self)

# Register IStructural in _dive:
_dive.IStructural_swigregister(IStructural)

def CreateProblemThermal(*args):
    return _dive.CreateProblemThermal(*args)
class ProblemThermal(IThermal):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _dive.delete_ProblemThermal

    @staticmethod
    def Create():
        return _dive.ProblemThermal_Create()

    def GetPtr(self, *args):
        return _dive.ProblemThermal_GetPtr(self, *args)

    def GetNumberDof(self):
        return _dive.ProblemThermal_GetNumberDof(self)

    def GetTotalDof(self):
        return _dive.ProblemThermal_GetTotalDof(self)

    def GetPivot(self):
        return _dive.ProblemThermal_GetPivot(self)

    def GetTemperature(self):
        return _dive.ProblemThermal_GetTemperature(self)

    def GetPressure(self):
        return _dive.ProblemThermal_GetPressure(self)

    def GetMesh(self):
        return _dive.ProblemThermal_GetMesh(self)

    def GetType(self):
        return _dive.ProblemThermal_GetType(self)

    def GetTag(self):
        return _dive.ProblemThermal_GetTag(self)

    def GetDirichlets(self):
        return _dive.ProblemThermal_GetDirichlets(self)

    def GetLoads(self):
        return _dive.ProblemThermal_GetLoads(self)

    def GetDofMeshIndices(self):
        return _dive.ProblemThermal_GetDofMeshIndices(self)

    def GetNodeMeshIndices(self):
        return _dive.ProblemThermal_GetNodeMeshIndices(self)

    def GetDirichletMeshIndices(self):
        return _dive.ProblemThermal_GetDirichletMeshIndices(self)

    def SetPressure(self, pressure):
        return _dive.ProblemThermal_SetPressure(self, pressure)

    def SetMesh(self, mesh):
        return _dive.ProblemThermal_SetMesh(self, mesh)

    def SetTag(self, tag):
        return _dive.ProblemThermal_SetTag(self, tag)

    def AddDirichlet(self, dirichlet):
        return _dive.ProblemThermal_AddDirichlet(self, dirichlet)

    def AddLoad(self, load):
        return _dive.ProblemThermal_AddLoad(self, load)

    def Initialize(self):
        return _dive.ProblemThermal_Initialize(self)

    def UpdateMeshValues(self, u):
        return _dive.ProblemThermal_UpdateMeshValues(self, u)

    def Mass(self):
        return _dive.ProblemThermal_Mass(self)

    def Stiffness(self):
        return _dive.ProblemThermal_Stiffness(self)

    def Convection(self, problemMomentum):
        return _dive.ProblemThermal_Convection(self, problemMomentum)

    def Stabilization(self, problemMomentum):
        return _dive.ProblemThermal_Stabilization(self, problemMomentum)

    def Energy(self):
        return _dive.ProblemThermal_Energy(self)

# Register ProblemThermal in _dive:
_dive.ProblemThermal_swigregister(ProblemThermal)

def CreateProblemFluid(*args):
    return _dive.CreateProblemFluid(*args)
class ProblemFluid(IFluid):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _dive.delete_ProblemFluid

    @staticmethod
    def Create():
        return _dive.ProblemFluid_Create()

    def GetPtr(self, *args):
        return _dive.ProblemFluid_GetPtr(self, *args)

    def GetNumberDof(self):
        return _dive.ProblemFluid_GetNumberDof(self)

    def GetTotalDof(self):
        return _dive.ProblemFluid_GetTotalDof(self)

    def GetPivot(self):
        return _dive.ProblemFluid_GetPivot(self)

    def GetTemperature(self):
        return _dive.ProblemFluid_GetTemperature(self)

    def GetPressure(self):
        return _dive.ProblemFluid_GetPressure(self)

    def GetVelocity(self):
        return _dive.ProblemFluid_GetVelocity(self)

    def GetMesh(self):
        return _dive.ProblemFluid_GetMesh(self)

    def GetType(self):
        return _dive.ProblemFluid_GetType(self)

    def GetTag(self):
        return _dive.ProblemFluid_GetTag(self)

    def GetDirichlets(self):
        return _dive.ProblemFluid_GetDirichlets(self)

    def GetLoads(self):
        return _dive.ProblemFluid_GetLoads(self)

    def GetDofMeshIndices(self):
        return _dive.ProblemFluid_GetDofMeshIndices(self)

    def GetNodeMeshIndices(self):
        return _dive.ProblemFluid_GetNodeMeshIndices(self)

    def GetDirichletMeshIndices(self):
        return _dive.ProblemFluid_GetDirichletMeshIndices(self)

    def SetTemperature(self, temperature):
        return _dive.ProblemFluid_SetTemperature(self, temperature)

    def SetPressure(self, pressure):
        return _dive.ProblemFluid_SetPressure(self, pressure)

    def SetMesh(self, mesh):
        return _dive.ProblemFluid_SetMesh(self, mesh)

    def SetTag(self, tag):
        return _dive.ProblemFluid_SetTag(self, tag)

    def AddDirichlet(self, dirichlet):
        return _dive.ProblemFluid_AddDirichlet(self, dirichlet)

    def AddLoad(self, load):
        return _dive.ProblemFluid_AddLoad(self, load)

    def Initialize(self):
        return _dive.ProblemFluid_Initialize(self)

    def UpdateMeshValues(self, u):
        return _dive.ProblemFluid_UpdateMeshValues(self, u)

    def UpdateMeshValuesMomentum(self, q):
        return _dive.ProblemFluid_UpdateMeshValuesMomentum(self, q)

    def Mass(self):
        return _dive.ProblemFluid_Mass(self)

    def Stiffness(self):
        return _dive.ProblemFluid_Stiffness(self)

    def Convection(self):
        return _dive.ProblemFluid_Convection(self)

    def ConvectionSymmetric(self):
        return _dive.ProblemFluid_ConvectionSymmetric(self)

    def ConvectionAsymmetric(self):
        return _dive.ProblemFluid_ConvectionAsymmetric(self)

    def Stabilization(self):
        return _dive.ProblemFluid_Stabilization(self)

    def LoadDistributedVolume(self):
        return _dive.ProblemFluid_LoadDistributedVolume(self)

    def LoadDistributedVolumeStabilization(self):
        return _dive.ProblemFluid_LoadDistributedVolumeStabilization(self)

    def Momentum(self):
        return _dive.ProblemFluid_Momentum(self)

    def Velocity(self):
        return _dive.ProblemFluid_Velocity(self)

# Register ProblemFluid in _dive:
_dive.ProblemFluid_swigregister(ProblemFluid)

def CreateProblemPressure(*args):
    return _dive.CreateProblemPressure(*args)
class ProblemPressure(IPressure):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _dive.delete_ProblemPressure

    @staticmethod
    def Create():
        return _dive.ProblemPressure_Create()

    def GetPtr(self, *args):
        return _dive.ProblemPressure_GetPtr(self, *args)

    def GetNumberDof(self):
        return _dive.ProblemPressure_GetNumberDof(self)

    def GetTotalDof(self):
        return _dive.ProblemPressure_GetTotalDof(self)

    def GetPivot(self):
        return _dive.ProblemPressure_GetPivot(self)

    def GetTemperature(self):
        return _dive.ProblemPressure_GetTemperature(self)

    def GetPressure(self):
        return _dive.ProblemPressure_GetPressure(self)

    def GetVelocity(self):
        return _dive.ProblemPressure_GetVelocity(self)

    def GetMesh(self):
        return _dive.ProblemPressure_GetMesh(self)

    def GetType(self):
        return _dive.ProblemPressure_GetType(self)

    def GetTag(self):
        return _dive.ProblemPressure_GetTag(self)

    def GetDirichlets(self):
        return _dive.ProblemPressure_GetDirichlets(self)

    def GetLoads(self):
        return _dive.ProblemPressure_GetLoads(self)

    def GetDofMeshIndices(self):
        return _dive.ProblemPressure_GetDofMeshIndices(self)

    def GetNodeMeshIndices(self):
        return _dive.ProblemPressure_GetNodeMeshIndices(self)

    def GetDirichletMeshIndices(self):
        return _dive.ProblemPressure_GetDirichletMeshIndices(self)

    def SetTemperature(self, temperature):
        return _dive.ProblemPressure_SetTemperature(self, temperature)

    def SetVelocity(self, velocity):
        return _dive.ProblemPressure_SetVelocity(self, velocity)

    def SetMesh(self, mesh):
        return _dive.ProblemPressure_SetMesh(self, mesh)

    def SetTag(self, tag):
        return _dive.ProblemPressure_SetTag(self, tag)

    def AddDirichlet(self, dirichlet):
        return _dive.ProblemPressure_AddDirichlet(self, dirichlet)

    def AddLoad(self, load):
        return _dive.ProblemPressure_AddLoad(self, load)

    def Initialize(self):
        return _dive.ProblemPressure_Initialize(self)

    def UpdateMeshValues(self, u):
        return _dive.ProblemPressure_UpdateMeshValues(self, u)

    def Mass(self):
        return _dive.ProblemPressure_Mass(self)

    def Stiffness(self):
        return _dive.ProblemPressure_Stiffness(self)

    def Crossed(self, problemMomentum):
        return _dive.ProblemPressure_Crossed(self, problemMomentum)

    def Stabilization(self, problemMomentum):
        return _dive.ProblemPressure_Stabilization(self, problemMomentum)

    def DistributedVolumeDivergence(self, problemMomentum):
        return _dive.ProblemPressure_DistributedVolumeDivergence(self, problemMomentum)

    def Pressure(self):
        return _dive.ProblemPressure_Pressure(self)

# Register ProblemPressure in _dive:
_dive.ProblemPressure_swigregister(ProblemPressure)

def CreateProblemStructural(*args):
    return _dive.CreateProblemStructural(*args)
class ProblemStructural(IStructural):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _dive.delete_ProblemStructural

    @staticmethod
    def Create():
        return _dive.ProblemStructural_Create()

    def GetPtr(self, *args):
        return _dive.ProblemStructural_GetPtr(self, *args)

    def GetNumberDof(self):
        return _dive.ProblemStructural_GetNumberDof(self)

    def GetTotalDof(self):
        return _dive.ProblemStructural_GetTotalDof(self)

    def GetPivot(self):
        return _dive.ProblemStructural_GetPivot(self)

    def GetTemperature(self):
        return _dive.ProblemStructural_GetTemperature(self)

    def GetPressure(self):
        return _dive.ProblemStructural_GetPressure(self)

    def GetMesh(self):
        return _dive.ProblemStructural_GetMesh(self)

    def GetType(self):
        return _dive.ProblemStructural_GetType(self)

    def GetTag(self):
        return _dive.ProblemStructural_GetTag(self)

    def GetDirichlets(self):
        return _dive.ProblemStructural_GetDirichlets(self)

    def GetVelocity(self):
        return _dive.ProblemStructural_GetVelocity(self)

    def GetLoads(self):
        return _dive.ProblemStructural_GetLoads(self)

    def GetDofMeshIndices(self):
        return _dive.ProblemStructural_GetDofMeshIndices(self)

    def GetNodeMeshIndices(self):
        return _dive.ProblemStructural_GetNodeMeshIndices(self)

    def GetDirichletMeshIndices(self):
        return _dive.ProblemStructural_GetDirichletMeshIndices(self)

    def SetTemperature(self, temperature):
        return _dive.ProblemStructural_SetTemperature(self, temperature)

    def SetPressure(self, pressure):
        return _dive.ProblemStructural_SetPressure(self, pressure)

    def SetMesh(self, mesh):
        return _dive.ProblemStructural_SetMesh(self, mesh)

    def SetTag(self, tag):
        return _dive.ProblemStructural_SetTag(self, tag)

    def AddDirichlet(self, dirichlet):
        return _dive.ProblemStructural_AddDirichlet(self, dirichlet)

    def AddVelocity(self, velocity):
        return _dive.ProblemStructural_AddVelocity(self, velocity)

    def AddLoad(self, load):
        return _dive.ProblemStructural_AddLoad(self, load)

    def Initialize(self):
        return _dive.ProblemStructural_Initialize(self)

    def UpdateMeshValues(self, u):
        return _dive.ProblemStructural_UpdateMeshValues(self, u)

    def Mass(self):
        return _dive.ProblemStructural_Mass(self)

    def Stiffness(self):
        return _dive.ProblemStructural_Stiffness(self)

    def LoadDistributedEdge(self):
        return _dive.ProblemStructural_LoadDistributedEdge(self)

    def LoadDistributedFace(self):
        return _dive.ProblemStructural_LoadDistributedFace(self)

    def LoadDistributedVolume(self):
        return _dive.ProblemStructural_LoadDistributedVolume(self)

    def LoadNode(self, *args):
        return _dive.ProblemStructural_LoadNode(self, *args)

    def Displacement(self):
        return _dive.ProblemStructural_Displacement(self)

# Register ProblemStructural in _dive:
_dive.ProblemStructural_swigregister(ProblemStructural)
class Face(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    faceIndex = property(_dive.Face_faceIndex_get, _dive.Face_faceIndex_set)
    element = property(_dive.Face_element_get, _dive.Face_element_set)

    def __init__(self):
        _dive.Face_swiginit(self, _dive.new_Face())
    __swig_destroy__ = _dive.delete_Face

# Register Face in _dive:
_dive.Face_swigregister(Face)
class NodeCmp(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __call__(self, node1, node2):
        return _dive.NodeCmp___call__(self, node1, node2)

    def __init__(self):
        _dive.NodeCmp_swiginit(self, _dive.new_NodeCmp())
    __swig_destroy__ = _dive.delete_NodeCmp

# Register NodeCmp in _dive:
_dive.NodeCmp_swigregister(NodeCmp)
class ElementCmp(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __call__(self, element1, element2):
        return _dive.ElementCmp___call__(self, element1, element2)

    def __init__(self):
        _dive.ElementCmp_swiginit(self, _dive.new_ElementCmp())
    __swig_destroy__ = _dive.delete_ElementCmp

# Register ElementCmp in _dive:
_dive.ElementCmp_swigregister(ElementCmp)
class FaceCmp(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __call__(self, face1, face2):
        return _dive.FaceCmp___call__(self, face1, face2)

    def __init__(self):
        _dive.FaceCmp_swiginit(self, _dive.new_FaceCmp())
    __swig_destroy__ = _dive.delete_FaceCmp

# Register FaceCmp in _dive:
_dive.FaceCmp_swigregister(FaceCmp)
class TypeCmp(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __call__(self, type1, type2):
        return _dive.TypeCmp___call__(self, type1, type2)

    def __init__(self):
        _dive.TypeCmp_swiginit(self, _dive.new_TypeCmp())
    __swig_destroy__ = _dive.delete_TypeCmp

# Register TypeCmp in _dive:
_dive.TypeCmp_swigregister(TypeCmp)
class SpecNodesByCoordinate(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    axis_ = property(_dive.SpecNodesByCoordinate_axis__get, _dive.SpecNodesByCoordinate_axis__set)
    pos_ = property(_dive.SpecNodesByCoordinate_pos__get, _dive.SpecNodesByCoordinate_pos__set)
    tol_ = property(_dive.SpecNodesByCoordinate_tol__get, _dive.SpecNodesByCoordinate_tol__set)
    basis_ = property(_dive.SpecNodesByCoordinate_basis__get, _dive.SpecNodesByCoordinate_basis__set)

    def __init__(self, basis, axis, pos, tol):
        _dive.SpecNodesByCoordinate_swiginit(self, _dive.new_SpecNodesByCoordinate(basis, axis, pos, tol))

    def IsSatisfied(self, item):
        return _dive.SpecNodesByCoordinate_IsSatisfied(self, item)
    __swig_destroy__ = _dive.delete_SpecNodesByCoordinate

# Register SpecNodesByCoordinate in _dive:
_dive.SpecNodesByCoordinate_swigregister(SpecNodesByCoordinate)
class SpecNodesByRange(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    axis_ = property(_dive.SpecNodesByRange_axis__get, _dive.SpecNodesByRange_axis__set)
    min_ = property(_dive.SpecNodesByRange_min__get, _dive.SpecNodesByRange_min__set)
    max_ = property(_dive.SpecNodesByRange_max__get, _dive.SpecNodesByRange_max__set)
    tol_ = property(_dive.SpecNodesByRange_tol__get, _dive.SpecNodesByRange_tol__set)
    basis_ = property(_dive.SpecNodesByRange_basis__get, _dive.SpecNodesByRange_basis__set)

    def __init__(self, basis, axis, min, max, tol):
        _dive.SpecNodesByRange_swiginit(self, _dive.new_SpecNodesByRange(basis, axis, min, max, tol))

    def IsSatisfied(self, item):
        return _dive.SpecNodesByRange_IsSatisfied(self, item)
    __swig_destroy__ = _dive.delete_SpecNodesByRange

# Register SpecNodesByRange in _dive:
_dive.SpecNodesByRange_swigregister(SpecNodesByRange)
class SpecNodesByTag(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    min_ = property(_dive.SpecNodesByTag_min__get, _dive.SpecNodesByTag_min__set)
    max_ = property(_dive.SpecNodesByTag_max__get, _dive.SpecNodesByTag_max__set)

    def __init__(self, min, max):
        _dive.SpecNodesByTag_swiginit(self, _dive.new_SpecNodesByTag(min, max))

    def IsSatisfied(self, item):
        return _dive.SpecNodesByTag_IsSatisfied(self, item)
    __swig_destroy__ = _dive.delete_SpecNodesByTag

# Register SpecNodesByTag in _dive:
_dive.SpecNodesByTag_swigregister(SpecNodesByTag)
class SpecElementsByTag(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    min_ = property(_dive.SpecElementsByTag_min__get, _dive.SpecElementsByTag_min__set)
    max_ = property(_dive.SpecElementsByTag_max__get, _dive.SpecElementsByTag_max__set)

    def __init__(self, min, max):
        _dive.SpecElementsByTag_swiginit(self, _dive.new_SpecElementsByTag(min, max))

    def IsSatisfied(self, item):
        return _dive.SpecElementsByTag_IsSatisfied(self, item)
    __swig_destroy__ = _dive.delete_SpecElementsByTag

# Register SpecElementsByTag in _dive:
_dive.SpecElementsByTag_swigregister(SpecElementsByTag)
class SpecElementsByType(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    selectionTypes_ = property(_dive.SpecElementsByType_selectionTypes__get, _dive.SpecElementsByType_selectionTypes__set)

    def __init__(self):
        _dive.SpecElementsByType_swiginit(self, _dive.new_SpecElementsByType())

    def IsSatisfied(self, item):
        return _dive.SpecElementsByType_IsSatisfied(self, item)
    __swig_destroy__ = _dive.delete_SpecElementsByType

# Register SpecElementsByType in _dive:
_dive.SpecElementsByType_swigregister(SpecElementsByType)

def FilterNodes(spec, input):
    return _dive.FilterNodes(spec, input)

def FilterNodesByCoordinate(input, basis, axis, pos, tol):
    return _dive.FilterNodesByCoordinate(input, basis, axis, pos, tol)

def FilterNodesByRange(input, basis, axis, min, max, tol):
    return _dive.FilterNodesByRange(input, basis, axis, min, max, tol)

def FilterNodesByTag(input, min, max):
    return _dive.FilterNodesByTag(input, min, max)

def FilterNodesByElements(input):
    return _dive.FilterNodesByElements(input)

def FilterNodesRemoveDuplicates(input):
    return _dive.FilterNodesRemoveDuplicates(input)

def FilterElements(spec, input):
    return _dive.FilterElements(spec, input)

def FilterElementsByTag(input, min, max):
    return _dive.FilterElementsByTag(input, min, max)

def FilterElementsByType(input):
    return _dive.FilterElementsByType(input)

def FilterElementsByNodes(input):
    return _dive.FilterElementsByNodes(input)

def FilterElementsRemoveDuplicates(input):
    return _dive.FilterElementsRemoveDuplicates(input)
class SpecSortNodesByCoordinate(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    axis_ = property(_dive.SpecSortNodesByCoordinate_axis__get, _dive.SpecSortNodesByCoordinate_axis__set)
    basis_ = property(_dive.SpecSortNodesByCoordinate_basis__get, _dive.SpecSortNodesByCoordinate_basis__set)

    def __init__(self, basis, axis):
        _dive.SpecSortNodesByCoordinate_swiginit(self, _dive.new_SpecSortNodesByCoordinate(basis, axis))

    def IsSatisfied(self, item1, item2):
        return _dive.SpecSortNodesByCoordinate_IsSatisfied(self, item1, item2)
    __swig_destroy__ = _dive.delete_SpecSortNodesByCoordinate

# Register SpecSortNodesByCoordinate in _dive:
_dive.SpecSortNodesByCoordinate_swigregister(SpecSortNodesByCoordinate)

def SortNodes(spec, input):
    return _dive.SortNodes(spec, input)

def SortNodesByCoordinate(input, basis, axis):
    return _dive.SortNodesByCoordinate(input, basis, axis)

